
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002056c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d9c  080206fc  080206fc  000306fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025498  08025498  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  08025498  08025498  00035498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080254a0  080254a0  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080254a0  080254a0  000354a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080254a4  080254a4  000354a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080254a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          000108bc  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001094c  2001094c  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004494b  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009e12  00000000  00000000  00084a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000032e8  00000000  00000000  0008e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000029d9  00000000  00000000  00091b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037d59  00000000  00000000  00094521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b0e1  00000000  00000000  000cc27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc817  00000000  00000000  0011735b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000dfd8  00000000  00000000  00213b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00221b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080206e4 	.word	0x080206e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080206e4 	.word	0x080206e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b984 	b.w	80005a0 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f81a 	bl	80002d8 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__popcountsi2>:
 80002b0:	0843      	lsrs	r3, r0, #1
 80002b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	0883      	lsrs	r3, r0, #2
 80002ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002c2:	4418      	add	r0, r3
 80002c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	9e08      	ldr	r6, [sp, #32]
 80002de:	460d      	mov	r5, r1
 80002e0:	4604      	mov	r4, r0
 80002e2:	460f      	mov	r7, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14a      	bne.n	800037e <__udivmoddi4+0xa6>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	4694      	mov	ip, r2
 80002ec:	d965      	bls.n	80003ba <__udivmoddi4+0xe2>
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	b143      	cbz	r3, 8000306 <__udivmoddi4+0x2e>
 80002f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f8:	f1c3 0220 	rsb	r2, r3, #32
 80002fc:	409f      	lsls	r7, r3
 80002fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000302:	4317      	orrs	r7, r2
 8000304:	409c      	lsls	r4, r3
 8000306:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030a:	fa1f f58c 	uxth.w	r5, ip
 800030e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fb0e 7711 	mls	r7, lr, r1, r7
 8000318:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	4290      	cmp	r0, r2
 8000322:	d90a      	bls.n	800033a <__udivmoddi4+0x62>
 8000324:	eb1c 0202 	adds.w	r2, ip, r2
 8000328:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800032c:	f080 811c 	bcs.w	8000568 <__udivmoddi4+0x290>
 8000330:	4290      	cmp	r0, r2
 8000332:	f240 8119 	bls.w	8000568 <__udivmoddi4+0x290>
 8000336:	3902      	subs	r1, #2
 8000338:	4462      	add	r2, ip
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034a:	fb00 f505 	mul.w	r5, r0, r5
 800034e:	42a5      	cmp	r5, r4
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x90>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800035a:	f080 8107 	bcs.w	800056c <__udivmoddi4+0x294>
 800035e:	42a5      	cmp	r5, r4
 8000360:	f240 8104 	bls.w	800056c <__udivmoddi4+0x294>
 8000364:	4464      	add	r4, ip
 8000366:	3802      	subs	r0, #2
 8000368:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	2100      	movs	r1, #0
 8000370:	b11e      	cbz	r6, 800037a <__udivmoddi4+0xa2>
 8000372:	40dc      	lsrs	r4, r3
 8000374:	2300      	movs	r3, #0
 8000376:	e9c6 4300 	strd	r4, r3, [r6]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0xbc>
 8000382:	2e00      	cmp	r6, #0
 8000384:	f000 80ed 	beq.w	8000562 <__udivmoddi4+0x28a>
 8000388:	2100      	movs	r1, #0
 800038a:	e9c6 0500 	strd	r0, r5, [r6]
 800038e:	4608      	mov	r0, r1
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d149      	bne.n	8000430 <__udivmoddi4+0x158>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d302      	bcc.n	80003a6 <__udivmoddi4+0xce>
 80003a0:	4282      	cmp	r2, r0
 80003a2:	f200 80f8 	bhi.w	8000596 <__udivmoddi4+0x2be>
 80003a6:	1a84      	subs	r4, r0, r2
 80003a8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	4617      	mov	r7, r2
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d0e2      	beq.n	800037a <__udivmoddi4+0xa2>
 80003b4:	e9c6 4700 	strd	r4, r7, [r6]
 80003b8:	e7df      	b.n	800037a <__udivmoddi4+0xa2>
 80003ba:	b902      	cbnz	r2, 80003be <__udivmoddi4+0xe6>
 80003bc:	deff      	udf	#255	; 0xff
 80003be:	fab2 f382 	clz	r3, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f040 8090 	bne.w	80004e8 <__udivmoddi4+0x210>
 80003c8:	1a8a      	subs	r2, r1, r2
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2101      	movs	r1, #1
 80003d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d8:	fb07 2015 	mls	r0, r7, r5, r2
 80003dc:	0c22      	lsrs	r2, r4, #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb0e f005 	mul.w	r0, lr, r5
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x124>
 80003ea:	eb1c 0202 	adds.w	r2, ip, r2
 80003ee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x122>
 80003f4:	4290      	cmp	r0, r2
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2b8>
 80003fa:	4645      	mov	r5, r8
 80003fc:	1a12      	subs	r2, r2, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb2 f0f7 	udiv	r0, r2, r7
 8000404:	fb07 2210 	mls	r2, r7, r0, r2
 8000408:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x14e>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x14c>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2c2>
 8000424:	4610      	mov	r0, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x98>
 8000430:	f1c1 0720 	rsb	r7, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa05 f401 	lsl.w	r4, r5, r1
 8000442:	fa20 f307 	lsr.w	r3, r0, r7
 8000446:	40fd      	lsrs	r5, r7
 8000448:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000452:	fa1f fe8c 	uxth.w	lr, ip
 8000456:	fb09 5518 	mls	r5, r9, r8, r5
 800045a:	0c1c      	lsrs	r4, r3, #16
 800045c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000460:	fb08 f50e 	mul.w	r5, r8, lr
 8000464:	42a5      	cmp	r5, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	fa00 f001 	lsl.w	r0, r0, r1
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b0>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2b4>
 800047c:	42a5      	cmp	r5, r4
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2b4>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4464      	add	r4, ip
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	b29d      	uxth	r5, r3
 800048c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000490:	fb09 4413 	mls	r4, r9, r3, r4
 8000494:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000498:	fb03 fe0e 	mul.w	lr, r3, lr
 800049c:	45a6      	cmp	lr, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1da>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2ac>
 80004aa:	45a6      	cmp	lr, r4
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2ac>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	4464      	add	r4, ip
 80004b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ba:	eba4 040e 	sub.w	r4, r4, lr
 80004be:	42ac      	cmp	r4, r5
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46ae      	mov	lr, r5
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x29c>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x298>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x208>
 80004ca:	ebb0 0208 	subs.w	r2, r0, r8
 80004ce:	eb64 040e 	sbc.w	r4, r4, lr
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40ca      	lsrs	r2, r1
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	4317      	orrs	r7, r2
 80004dc:	e9c6 7400 	strd	r7, r4, [r6]
 80004e0:	4618      	mov	r0, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e8:	f1c3 0120 	rsb	r1, r3, #32
 80004ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f0:	fa20 f201 	lsr.w	r2, r0, r1
 80004f4:	fa25 f101 	lsr.w	r1, r5, r1
 80004f8:	409d      	lsls	r5, r3
 80004fa:	432a      	orrs	r2, r5
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1510 	mls	r5, r7, r0, r1
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f50e 	mul.w	r5, r0, lr
 8000516:	428d      	cmp	r5, r1
 8000518:	fa04 f403 	lsl.w	r4, r4, r3
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x258>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b0>
 8000528:	428d      	cmp	r5, r1
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b0>
 800052c:	3802      	subs	r0, #2
 800052e:	4461      	add	r1, ip
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5f7 	udiv	r5, r1, r7
 8000538:	fb07 1115 	mls	r1, r7, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f10e 	mul.w	r1, r5, lr
 8000544:	4291      	cmp	r1, r2
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x282>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2a8>
 8000552:	4291      	cmp	r1, r2
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2a8>
 8000556:	3d02      	subs	r5, #2
 8000558:	4462      	add	r2, ip
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0xfc>
 8000562:	4631      	mov	r1, r6
 8000564:	4630      	mov	r0, r6
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xa2>
 8000568:	4639      	mov	r1, r7
 800056a:	e6e6      	b.n	800033a <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e6fb      	b.n	8000368 <__udivmoddi4+0x90>
 8000570:	4548      	cmp	r0, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f0>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb65 0e0c 	sbc.w	lr, r5, ip
 800057c:	3b01      	subs	r3, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f0>
 8000580:	4645      	mov	r5, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x282>
 8000584:	462b      	mov	r3, r5
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1da>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x258>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b0>
 8000590:	3d02      	subs	r5, #2
 8000592:	4462      	add	r2, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x124>
 8000596:	4608      	mov	r0, r1
 8000598:	e70a      	b.n	80003b0 <__udivmoddi4+0xd8>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x14e>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <FileSystemInit>:
 *         - Criação de diretórios;
 *         - Leitura do arquivo de configurações;
 * @retval Nonecfg
 */
int FileSystemInit()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

	  LOG2("Iniciando sistema de arquivos ... ");
 80005aa:	4833      	ldr	r0, [pc, #204]	; (8000678 <FileSystemInit+0xd4>)
 80005ac:	f01f f9f0 	bl	801f990 <puts>

	  int status = lfs_storage_init(&cfg);
 80005b0:	4832      	ldr	r0, [pc, #200]	; (800067c <FileSystemInit+0xd8>)
 80005b2:	f000 fa4f 	bl	8000a54 <lfs_storage_init>
 80005b6:	6078      	str	r0, [r7, #4]

	  if (!status)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d105      	bne.n	80005ca <FileSystemInit+0x26>
	  {
		  LOG2( "erro: %i", status);
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	482f      	ldr	r0, [pc, #188]	; (8000680 <FileSystemInit+0xdc>)
 80005c2:	f01f f97f 	bl	801f8c4 <iprintf>
	    return status;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	e052      	b.n	8000670 <FileSystemInit+0xcc>
	  }

	  LOG2("OK");
 80005ca:	482e      	ldr	r0, [pc, #184]	; (8000684 <FileSystemInit+0xe0>)
 80005cc:	f01f f9e0 	bl	801f990 <puts>

  lfs_get_default_config(&cfg);
 80005d0:	482a      	ldr	r0, [pc, #168]	; (800067c <FileSystemInit+0xd8>)
 80005d2:	f000 fa29 	bl	8000a28 <lfs_get_default_config>

  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	e016      	b.n	800060a <FileSystemInit+0x66>
  {
    openFile[i].number = 0;
 80005dc:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <FileSystemInit+0xe4>)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2158      	movs	r1, #88	; 0x58
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	4413      	add	r3, r2
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
    memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2258      	movs	r2, #88	; 0x58
 80005f0:	fb02 f303 	mul.w	r3, r2, r3
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <FileSystemInit+0xe4>)
 80005f6:	4413      	add	r3, r2
 80005f8:	3304      	adds	r3, #4
 80005fa:	2254      	movs	r2, #84	; 0x54
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f01f fab6 	bl	801fb70 <memset>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b03      	cmp	r3, #3
 800060e:	dde5      	ble.n	80005dc <FileSystemInit+0x38>
  }


  LOG2("Montando sistema de arquivos ... ");
 8000610:	481e      	ldr	r0, [pc, #120]	; (800068c <FileSystemInit+0xe8>)
 8000612:	f01f f9bd 	bl	801f990 <puts>

  status = lfs_mount(&lfs, &cfg);
 8000616:	4919      	ldr	r1, [pc, #100]	; (800067c <FileSystemInit+0xd8>)
 8000618:	481d      	ldr	r0, [pc, #116]	; (8000690 <FileSystemInit+0xec>)
 800061a:	f00e f8c8 	bl	800e7ae <lfs_mount>
 800061e:	6078      	str	r0, [r7, #4]
  if (status)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d016      	beq.n	8000654 <FileSystemInit+0xb0>
  {
	  LOG2("erro: %i", status);
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4815      	ldr	r0, [pc, #84]	; (8000680 <FileSystemInit+0xdc>)
 800062a:	f01f f94b 	bl	801f8c4 <iprintf>
    // Se sistema de arquivos corrompido
    if (status == LFS_ERR_CORRUPT)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8000634:	d10e      	bne.n	8000654 <FileSystemInit+0xb0>
    {
      // Formata o sistema de arquivos
    	LOG2("Formatando sistema de arquivos ... ");
 8000636:	4817      	ldr	r0, [pc, #92]	; (8000694 <FileSystemInit+0xf0>)
 8000638:	f01f f9aa 	bl	801f990 <puts>
      status = lfs_format(&lfs, &cfg);
 800063c:	490f      	ldr	r1, [pc, #60]	; (800067c <FileSystemInit+0xd8>)
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <FileSystemInit+0xec>)
 8000640:	f00e f898 	bl	800e774 <lfs_format>
 8000644:	6078      	str	r0, [r7, #4]
      if (status)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <FileSystemInit+0xb0>
      {
    	  LOG2("erro: %d", status);
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <FileSystemInit+0xf4>)
 8000650:	f01f f938 	bl	801f8c4 <iprintf>
      }
    }
  }

  if (status == LFS_ERR_OK)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d109      	bne.n	800066e <FileSystemInit+0xca>
  {
	  LOG2("OK");
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <FileSystemInit+0xe0>)
 800065c:	f01f f998 	bl	801f990 <puts>
    lfs_mounted = 1;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <FileSystemInit+0xf8>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]

    // Cria diretório de configurações
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_MAP);
 8000666:	490e      	ldr	r1, [pc, #56]	; (80006a0 <FileSystemInit+0xfc>)
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <FileSystemInit+0xec>)
 800066a:	f00e f8bd 	bl	800e7e8 <lfs_mkdir>

  }

  return status;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	080206fc 	.word	0x080206fc
 800067c:	2000c9b0 	.word	0x2000c9b0
 8000680:	08020720 	.word	0x08020720
 8000684:	0802072c 	.word	0x0802072c
 8000688:	200000ac 	.word	0x200000ac
 800068c:	08020730 	.word	0x08020730
 8000690:	2000c938 	.word	0x2000c938
 8000694:	08020754 	.word	0x08020754
 8000698:	0802077c 	.word	0x0802077c
 800069c:	2000c934 	.word	0x2000c934
 80006a0:	08020788 	.word	0x08020788

080006a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80006b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <vApplicationGetIdleTaskMemory+0x30>)
 80006ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000210 	.word	0x20000210
 80006d4:	200002b0 	.word	0x200002b0

080006d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_FREERTOS_Init+0x30>)
 80006e0:	1d3c      	adds	r4, r7, #4
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f005 fce7 	bl	80060c8 <osThreadCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <MX_FREERTOS_Init+0x34>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bdb0      	pop	{r4, r5, r7, pc}
 8000708:	08020ad8 	.word	0x08020ad8
 800070c:	2000020c 	.word	0x2000020c

08000710 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000718:	f004 ff82 	bl	8005620 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f005 fd1f 	bl	8006160 <osDelay>
 8000722:	e7fb      	b.n	800071c <StartDefaultTask+0xc>

08000724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2d      	ldr	r2, [pc, #180]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <MX_GPIO_Init+0xd4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <MX_GPIO_Init+0xd4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24e 1108 	movw	r1, #57608	; 0xe108
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_GPIO_Init+0xd8>)
 80007ce:	f002 fe03 	bl	80033d8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 80007d2:	f24e 1308 	movw	r3, #57608	; 0xe108
 80007d6:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0xd8>)
 80007ec:	f002 fc58 	bl	80030a0 <HAL_GPIO_Init>

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40021000 	.word	0x40021000

08000800 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x50>)
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_I2C1_Init+0x54>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x50>)
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_I2C1_Init+0x58>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_I2C1_Init+0x50>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_I2C1_Init+0x50>)
 800083e:	f002 fde5 	bl	800340c <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 fa90 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200004b0 	.word	0x200004b0
 8000854:	40005400 	.word	0x40005400
 8000858:	000186a0 	.word	0x000186a0

0800085c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <HAL_I2C_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12c      	bne.n	80008d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800089a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a0:	2312      	movs	r3, #18
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ac:	2304      	movs	r3, #4
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <HAL_I2C_MspInit+0x8c>)
 80008b8:	f002 fbf2 	bl	80030a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 80008c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40005400 	.word	0x40005400
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400

080008ec <lfs_w25qflash_config_init>:



void lfs_w25qflash_config_init ()

{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

littlefs_config.read = lfs_w25qflash_read;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 80008f2:	4a1a      	ldr	r2, [pc, #104]	; (800095c <lfs_w25qflash_config_init+0x70>)
 80008f4:	605a      	str	r2, [r3, #4]
littlefs_config.prog = lfs_w25qflash_prog;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 80008f8:	4a19      	ldr	r2, [pc, #100]	; (8000960 <lfs_w25qflash_config_init+0x74>)
 80008fa:	609a      	str	r2, [r3, #8]
littlefs_config.erase = lfs_w25qflash_erase;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 80008fe:	4a19      	ldr	r2, [pc, #100]	; (8000964 <lfs_w25qflash_config_init+0x78>)
 8000900:	60da      	str	r2, [r3, #12]
littlefs_config.sync = lfs_w25qflash_sync;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000904:	4a18      	ldr	r2, [pc, #96]	; (8000968 <lfs_w25qflash_config_init+0x7c>)
 8000906:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
littlefs_config.lock = lfs_lock;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <lfs_w25qflash_config_init+0x80>)
 800090c:	615a      	str	r2, [r3, #20]
littlefs_config.unlock = lfs_unlock;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <lfs_w25qflash_config_init+0x84>)
 8000912:	619a      	str	r2, [r3, #24]
#endif

 littlefs_config.read_size = w25qxx.PageSize;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <lfs_w25qflash_config_init+0x88>)
 8000916:	895b      	ldrh	r3, [r3, #10]
 8000918:	461a      	mov	r2, r3
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 800091c:	61da      	str	r2, [r3, #28]
 littlefs_config.prog_size = w25qxx.PageSize;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <lfs_w25qflash_config_init+0x88>)
 8000920:	895b      	ldrh	r3, [r3, #10]
 8000922:	461a      	mov	r2, r3
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000926:	621a      	str	r2, [r3, #32]
 littlefs_config.block_size = w25qxx.SectorSize;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <lfs_w25qflash_config_init+0x88>)
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 800092e:	6253      	str	r3, [r2, #36]	; 0x24
 littlefs_config.block_count = w25qxx.SectorCount;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <lfs_w25qflash_config_init+0x88>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a08      	ldr	r2, [pc, #32]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000936:	6293      	str	r3, [r2, #40]	; 0x28
 littlefs_config.block_cycles = 100;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 800093a:	2264      	movs	r2, #100	; 0x64
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
 littlefs_config.cache_size = LITTLEFS_CACHE_SIZE;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
 littlefs_config.lookahead_size = LITTLEFS_LOOKAHEAD_SIZE;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000948:	2210      	movs	r2, #16
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000504 	.word	0x20000504
 800095c:	08000979 	.word	0x08000979
 8000960:	080009b9 	.word	0x080009b9
 8000964:	080009f9 	.word	0x080009f9
 8000968:	08000a13 	.word	0x08000a13
 800096c:	08000b5d 	.word	0x08000b5d
 8000970:	08000b9d 	.word	0x08000b9d
 8000974:	200107d8 	.word	0x200107d8

08000978 <lfs_w25qflash_read>:


/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de leitura
 */
int lfs_w25qflash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]

	if (W25qxx_ReadSector((uint8_t*) buffer, block, off, size)) {
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f01e fcb9 	bl	801f304 <W25qxx_ReadSector>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d007      	beq.n	80009a8 <lfs_w25qflash_read+0x30>

		LOG2("Leitura da flash no  - bloco %lu - off %lu - %lu bytes lidos\r\n", block, off, size);
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <lfs_w25qflash_read+0x3c>)
 80009a0:	f01e ff90 	bl	801f8c4 <iprintf>

		return LFS_ERR_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	e001      	b.n	80009ac <lfs_w25qflash_read+0x34>

	} else {

	  return LFS_ERR_CORRUPT;
 80009a8:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08020af4 	.word	0x08020af4

080009b8 <lfs_w25qflash_prog>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de escrita
 */

int lfs_w25qflash_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	603b      	str	r3, [r7, #0]

	if (W25qxx_WriteSector((uint8_t*) buffer, block, off, size)) {
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	6838      	ldr	r0, [r7, #0]
 80009ce:	f01e fbb7 	bl	801f140 <W25qxx_WriteSector>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d007      	beq.n	80009e8 <lfs_w25qflash_prog+0x30>

		LOG2("Escrita da flash no - bloco %lu - off %lu  - %lu bytes escritos\r\n", block, off, size);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <lfs_w25qflash_prog+0x3c>)
 80009e0:	f01e ff70 	bl	801f8c4 <iprintf>

		return LFS_ERR_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	e001      	b.n	80009ec <lfs_w25qflash_prog+0x34>

	} else {

		return LFS_ERR_CORRUPT;
 80009e8:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08020b34 	.word	0x08020b34

080009f8 <lfs_w25qflash_erase>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de apagamento (erase)
 */
int lfs_w25qflash_erase(const struct lfs_config *c, lfs_block_t block) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]

  	 W25qxx_EraseSector(block);
 8000a02:	6838      	ldr	r0, [r7, #0]
 8000a04:	f01e faa8 	bl	801ef58 <W25qxx_EraseSector>
	return LFS_ERR_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <lfs_w25qflash_sync>:
/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de sincronismo
 * 		  (para a Flash NAND esta função não é necessária, apenas retorna OK)
 */

int lfs_w25qflash_sync(const struct lfs_config *c) {
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]

	return LFS_ERR_OK;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <lfs_get_default_config>:


int lfs_get_default_config(struct lfs_config *lfsc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

	lfs_w25qflash_config_init();
 8000a30:	f7ff ff5c 	bl	80008ec <lfs_w25qflash_config_init>

    *lfsc = littlefs_config; /* copy pre-initialized lfs config structure */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <lfs_get_default_config+0x28>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	2354      	movs	r3, #84	; 0x54
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f01f f9a5 	bl	801fd8e <memcpy>
    return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000504 	.word	0x20000504

08000a54 <lfs_storage_init>:

int lfs_storage_init(const struct lfs_config *lfsc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    uint16_t status;

    /* initialize mflash */
    status = W25qxx_Init();
 8000a5c:	f01e f9aa 	bl	801edb4 <W25qxx_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	81fb      	strh	r3, [r7, #14]

    return status;
 8000a64:	89fb      	ldrh	r3, [r7, #14]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <osKernelGetState>:
//*** cmsis_os2.c
#define IS_IRQ_MODE()             (__get_IPSR() != 0U)
#define IS_IRQ()                  IS_IRQ_MODE()

//*** cmsis_os2.c
osKernelState_t osKernelGetState (void) {
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8000a74:	f007 fc84 	bl	8008380 <xTaskGetSchedulerState>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d004      	beq.n	8000a88 <osKernelGetState+0x1a>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d105      	bne.n	8000a8e <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning_enum;
 8000a82:	2302      	movs	r3, #2
 8000a84:	607b      	str	r3, [r7, #4]
      break;
 8000a86:	e005      	b.n	8000a94 <osKernelGetState+0x26>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	607b      	str	r3, [r7, #4]
      break;
 8000a8c:	e002      	b.n	8000a94 <osKernelGetState+0x26>
    case taskSCHEDULER_NOT_STARTED:
    default:
      //if (KernelState == osKernelReady) {
      //  state = osKernelReady;
      //} else {
        state = osKernelInactive;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
      //}
      break;
 8000a92:	bf00      	nop
  }

  return (state);
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <osKernelLock>:

//*** cmsis_os2.c
int32_t osKernelLock (void) {
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000aa4:	f3ef 8305 	mrs	r3, IPSR
 8000aa8:	603b      	str	r3, [r7, #0]
  return(result);
 8000aaa:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <osKernelLock+0x18>
    lock = (int32_t)osErrorISR;
 8000ab0:	2382      	movs	r3, #130	; 0x82
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	e013      	b.n	8000ade <osKernelLock+0x40>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8000ab6:	f007 fc63 	bl	8008380 <xTaskGetSchedulerState>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <osKernelLock+0x28>
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d003      	beq.n	8000acc <osKernelLock+0x2e>
 8000ac4:	e007      	b.n	8000ad6 <osKernelLock+0x38>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
        break;
 8000aca:	e008      	b.n	8000ade <osKernelLock+0x40>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8000acc:	f007 f88e 	bl	8007bec <vTaskSuspendAll>
        lock = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
        break;
 8000ad4:	e003      	b.n	8000ade <osKernelLock+0x40>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ada:	607b      	str	r3, [r7, #4]
        break;
 8000adc:	bf00      	nop
    }
  }

  return (lock);
 8000ade:	687b      	ldr	r3, [r7, #4]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <osKernelRestoreLock>:

  return (lock);
}

//*** cmsis_os2.c
int32_t osKernelRestoreLock (int32_t lock) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000af0:	f3ef 8305 	mrs	r3, IPSR
 8000af4:	60fb      	str	r3, [r7, #12]
  return(result);
 8000af6:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <osKernelRestoreLock+0x1a>
    lock = (int32_t)osErrorISR;
 8000afc:	2382      	movs	r3, #130	; 0x82
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	e026      	b.n	8000b50 <osKernelRestoreLock+0x68>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8000b02:	f007 fc3d 	bl	8008380 <xTaskGetSchedulerState>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <osKernelRestoreLock+0x28>
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d11a      	bne.n	8000b46 <osKernelRestoreLock+0x5e>
      case taskSCHEDULER_SUSPENDED:
      case taskSCHEDULER_RUNNING:
        if (lock == 1) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d102      	bne.n	8000b1c <osKernelRestoreLock+0x34>
          vTaskSuspendAll();
 8000b16:	f007 f869 	bl	8007bec <vTaskSuspendAll>
                lock = (int32_t)osError;
              }
            }
          }
        }
        break;
 8000b1a:	e018      	b.n	8000b4e <osKernelRestoreLock+0x66>
          if (lock != 0) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <osKernelRestoreLock+0x42>
            lock = (int32_t)osError;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b26:	607b      	str	r3, [r7, #4]
        break;
 8000b28:	e011      	b.n	8000b4e <osKernelRestoreLock+0x66>
            if (xTaskResumeAll() != pdTRUE) {
 8000b2a:	f007 f86d 	bl	8007c08 <xTaskResumeAll>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d00c      	beq.n	8000b4e <osKernelRestoreLock+0x66>
              if (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) {
 8000b34:	f007 fc24 	bl	8008380 <xTaskGetSchedulerState>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d007      	beq.n	8000b4e <osKernelRestoreLock+0x66>
                lock = (int32_t)osError;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b42:	607b      	str	r3, [r7, #4]
        break;
 8000b44:	e003      	b.n	8000b4e <osKernelRestoreLock+0x66>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4a:	607b      	str	r3, [r7, #4]
        break;
 8000b4c:	e000      	b.n	8000b50 <osKernelRestoreLock+0x68>
        break;
 8000b4e:	bf00      	nop
    }
  }

  return (lock);
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <lfs_lock>:

/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de LOCK
 */
int lfs_lock(const struct lfs_config *c)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 8000b64:	f7ff ff83 	bl	8000a6e <osKernelGetState>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <lfs_lock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e00e      	b.n	8000b90 <lfs_lock+0x34>
	}

	rtos_lockState = osKernelLock();
 8000b72:	f7ff ff94 	bl	8000a9e <osKernelLock>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <lfs_lock+0x3c>)
 8000b7a:	6013      	str	r3, [r2, #0]
	int ret = LFS_ERR_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]

	if (rtos_lockState < 0)
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <lfs_lock+0x3c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da02      	bge.n	8000b8e <lfs_lock+0x32>
	{
		ret = LFS_ERR_IO;
 8000b88:	f06f 0304 	mvn.w	r3, #4
 8000b8c:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000558 	.word	0x20000558

08000b9c <lfs_unlock>:
/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de UNLOCK
 */
int lfs_unlock(const struct lfs_config *c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 8000ba4:	f7ff ff63 	bl	8000a6e <osKernelGetState>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <lfs_unlock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e00e      	b.n	8000bd0 <lfs_unlock+0x34>
	}

	//int state = osKernelUnlock();
	int newLockState = osKernelRestoreLock(rtos_lockState);
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <lfs_unlock+0x3c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff96 	bl	8000ae8 <osKernelRestoreLock>
 8000bbc:	60b8      	str	r0, [r7, #8]
	int ret = LFS_ERR_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]

	if (newLockState < 0)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	da02      	bge.n	8000bce <lfs_unlock+0x32>
	{
		ret = LFS_ERR_IO;
 8000bc8:	f06f 0304 	mvn.w	r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000558 	.word	0x20000558

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 feba 	bl	8001958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f846 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f7ff fd9c 	bl	8000724 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000bec:	f000 fa6c 	bl	80010c8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000bf0:	f7ff fe06 	bl	8000800 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000bf4:	f000 fcb4 	bl	8001560 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfe:	481c      	ldr	r0, [pc, #112]	; (8000c70 <main+0x94>)
 8000c00:	f002 fbea 	bl	80033d8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c04:	2032      	movs	r0, #50	; 0x32
 8000c06:	f000 fee9 	bl	80019dc <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c10:	4817      	ldr	r0, [pc, #92]	; (8000c70 <main+0x94>)
 8000c12:	f002 fbe1 	bl	80033d8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c16:	2032      	movs	r0, #50	; 0x32
 8000c18:	f000 fee0 	bl	80019dc <HAL_Delay>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c22:	4813      	ldr	r0, [pc, #76]	; (8000c70 <main+0x94>)
 8000c24:	f002 fbd8 	bl	80033d8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c28:	2032      	movs	r0, #50	; 0x32
 8000c2a:	f000 fed7 	bl	80019dc <HAL_Delay>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c34:	480e      	ldr	r0, [pc, #56]	; (8000c70 <main+0x94>)
 8000c36:	f002 fbcf 	bl	80033d8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c3a:	2032      	movs	r0, #50	; 0x32
 8000c3c:	f000 fece 	bl	80019dc <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <main+0x94>)
 8000c48:	f002 fbc6 	bl	80033d8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c4c:	2032      	movs	r0, #50	; 0x32
 8000c4e:	f000 fec5 	bl	80019dc <HAL_Delay>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <main+0x94>)
 8000c5a:	f002 fbbd 	bl	80033d8 <HAL_GPIO_WritePin>


  FileSystemInit();
 8000c5e:	f7ff fca1 	bl	80005a4 <FileSystemInit>
  ModbusServerInit();
 8000c62:	f000 fa0f 	bl	8001084 <ModbusServerInit>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c66:	f7ff fd37 	bl	80006d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c6a:	f005 fa16 	bl	800609a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <main+0x92>
 8000c70:	40021000 	.word	0x40021000

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	; 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2230      	movs	r2, #48	; 0x30
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f01e ff74 	bl	801fb70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <SystemClock_Config+0xcc>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <SystemClock_Config+0xcc>)
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <SystemClock_Config+0xcc>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ce4:	2319      	movs	r3, #25
 8000ce6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 316;
 8000ce8:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8000cec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fcca 	bl	8003694 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d06:	f000 f831 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2105      	movs	r1, #5
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 ff2b 	bl	8003b84 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d34:	f000 f81a 	bl	8000d6c <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	; 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5a:	f000 fe1f 	bl	800199c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40002000 	.word	0x40002000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <ModbusHandleConnection>:
osThreadId modbusTcpServerTaskHandle;


static uint8_t ModbusHandleConnection(struct netconn *connfd)

{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000d7e:	af02      	add	r7, sp, #8
 8000d80:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8000d84:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 8000d88:	6008      	str	r0, [r1, #0]
	const uint32_t TIMEOUT_MS = 10000; // 10 segundos
 8000d8a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000d8e:	f8c7 122c 	str.w	r1, [r7, #556]	; 0x22c
	unsigned char recvBuffer[512];
	struct timeval timeout;
	timeout.tv_sec = TIMEOUT_MS / 1000;
 8000d92:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8000d96:	4848      	ldr	r0, [pc, #288]	; (8000eb8 <ModbusHandleConnection+0x140>)
 8000d98:	fba0 0101 	umull	r0, r1, r0, r1
 8000d9c:	0989      	lsrs	r1, r1, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	460a      	mov	r2, r1
 8000da2:	4603      	mov	r3, r0
 8000da4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8000da8:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 8000dac:	e9c1 2300 	strd	r2, r3, [r1]
	timeout.tv_usec = (TIMEOUT_MS % 1000) * 1000;
 8000db0:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8000db4:	4b40      	ldr	r3, [pc, #256]	; (8000eb8 <ModbusHandleConnection+0x140>)
 8000db6:	fba3 1302 	umull	r1, r3, r3, r2
 8000dba:	099b      	lsrs	r3, r3, #6
 8000dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dc0:	fb01 f303 	mul.w	r3, r1, r3
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000dd4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000dd8:	609a      	str	r2, [r3, #8]

	lwip_setsockopt(connfd->socket, SOL_SOCKET, SO_RCVTIMEO, &timeout,sizeof(timeout));
 8000dda:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000dde:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6998      	ldr	r0, [r3, #24]
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	2210      	movs	r2, #16
 8000dec:	9200      	str	r2, [sp, #0]
 8000dee:	f241 0206 	movw	r2, #4102	; 0x1006
 8000df2:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000df6:	f00f feb7 	bl	8010b68 <lwip_setsockopt>
	do
	{
		// Receber dados do cliente com um tempo limite
		struct netbuf *inbuf;

		err_t err = netconn_recv(connfd, &inbuf);
 8000dfa:	f107 020c 	add.w	r2, r7, #12
 8000dfe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000e02:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000e06:	4611      	mov	r1, r2
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	f00e f893 	bl	800ef34 <netconn_recv>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b

		if (err == ERR_OK)
 8000e14:	f997 322b 	ldrsb.w	r3, [r7, #555]	; 0x22b
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d141      	bne.n	8000ea0 <ModbusHandleConnection+0x128>
		{
			if (netconn_err(connfd) == ERR_OK)
 8000e1c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000e20:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	f00e fa0e 	bl	800f246 <netconn_err>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d139      	bne.n	8000ea4 <ModbusHandleConnection+0x12c>
			{
				/* Process received data */
				netbuf_copy(inbuf, recvBuffer, sizeof(recvBuffer));
 8000e30:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000e34:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e40:	2300      	movs	r3, #0
 8000e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e46:	f012 f86f 	bl	8012f28 <pbuf_copy_partial>
				uint16_t buffer_len = netbuf_len(inbuf);
 8000e4a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000e4e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	891b      	ldrh	r3, [r3, #8]
 8000e58:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
				uint16_t response_len = InterpreterMODBUS(recvBuffer, buffer_len);
 8000e5c:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f01d fce2 	bl	801e830 <InterpreterMODBUS>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f8a7 3226 	strh.w	r3, [r7, #550]	; 0x226
				netconn_write(connfd, recvBuffer, response_len, NETCONN_COPY);
 8000e72:	f8b7 2226 	ldrh.w	r2, [r7, #550]	; 0x226
 8000e76:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e7a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000e7e:	f5a3 700b 	sub.w	r0, r3, #556	; 0x22c
 8000e82:	2300      	movs	r3, #0
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	6800      	ldr	r0, [r0, #0]
 8000e8a:	f00e f8cd 	bl	800f028 <netconn_write_partly>
				netbuf_delete(inbuf);
 8000e8e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000e92:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00f fdc5 	bl	8010a28 <netbuf_delete>
				continue;
 8000e9e:	e004      	b.n	8000eaa <ModbusHandleConnection+0x132>

		osDelay(1);

	} while (1);

	return 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e003      	b.n	8000eac <ModbusHandleConnection+0x134>
		osDelay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f005 f95b 	bl	8006160 <osDelay>
	{
 8000eaa:	e7a6      	b.n	8000dfa <ModbusHandleConnection+0x82>

}
 8000eac:	4618      	mov	r0, r3
 8000eae:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	10624dd3 	.word	0x10624dd3

08000ebc <Modbus_activateTcpKeepAlive>:


void Modbus_activateTcpKeepAlive(struct netconn *connfd, int idleTime, int interval, int count)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
    int optval;
    socklen_t optlen = sizeof(optval);
 8000eca:	2304      	movs	r3, #4
 8000ecc:	617b      	str	r3, [r7, #20]

    // Enable SO_KEEPALIVE
    optval = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	613b      	str	r3, [r7, #16]
    if (lwip_setsockopt(connfd->socket, SOL_SOCKET, SO_KEEPALIVE, &optval, optlen) < 0) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6998      	ldr	r0, [r3, #24]
 8000ed6:	f107 0210 	add.w	r2, r7, #16
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000ee6:	f00f fe3f 	bl	8010b68 <lwip_setsockopt>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da02      	bge.n	8000ef6 <Modbus_activateTcpKeepAlive+0x3a>
    	 printf("Failed to set SO_KEEPALIVE option");
 8000ef0:	481f      	ldr	r0, [pc, #124]	; (8000f70 <Modbus_activateTcpKeepAlive+0xb4>)
 8000ef2:	f01e fce7 	bl	801f8c4 <iprintf>
        // Handle error
    }

    // Set TCP_KEEPIDLE
    optval = idleTime;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	613b      	str	r3, [r7, #16]
    if (lwip_setsockopt(connfd->socket, IPPROTO_TCP, TCP_KEEPIDLE, &optval, optlen) < 0) {
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6998      	ldr	r0, [r3, #24]
 8000efe:	f107 0210 	add.w	r2, r7, #16
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	4613      	mov	r3, r2
 8000f08:	2203      	movs	r2, #3
 8000f0a:	2106      	movs	r1, #6
 8000f0c:	f00f fe2c 	bl	8010b68 <lwip_setsockopt>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da02      	bge.n	8000f1c <Modbus_activateTcpKeepAlive+0x60>
    	 printf("Failed to set TCP_KEEPIDLE option");
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <Modbus_activateTcpKeepAlive+0xb8>)
 8000f18:	f01e fcd4 	bl	801f8c4 <iprintf>
        // Handle error
    }

    // Set TCP_KEEPINTVL
    optval = interval;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	613b      	str	r3, [r7, #16]
    if (lwip_setsockopt(connfd->socket, IPPROTO_TCP, TCP_KEEPINTVL, &optval, optlen) < 0) {
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6998      	ldr	r0, [r3, #24]
 8000f24:	f107 0210 	add.w	r2, r7, #16
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	2204      	movs	r2, #4
 8000f30:	2106      	movs	r1, #6
 8000f32:	f00f fe19 	bl	8010b68 <lwip_setsockopt>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da02      	bge.n	8000f42 <Modbus_activateTcpKeepAlive+0x86>
    	 printf("Failed to set TCP_KEEPINTVL option");
 8000f3c:	480e      	ldr	r0, [pc, #56]	; (8000f78 <Modbus_activateTcpKeepAlive+0xbc>)
 8000f3e:	f01e fcc1 	bl	801f8c4 <iprintf>
        // Handle error
    }

    // Set TCP_KEEPCNT
    optval = count;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	613b      	str	r3, [r7, #16]
    if (lwip_setsockopt(connfd->socket, IPPROTO_TCP, TCP_KEEPCNT, &optval, optlen) < 0) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6998      	ldr	r0, [r3, #24]
 8000f4a:	f107 0210 	add.w	r2, r7, #16
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	4613      	mov	r3, r2
 8000f54:	2205      	movs	r2, #5
 8000f56:	2106      	movs	r1, #6
 8000f58:	f00f fe06 	bl	8010b68 <lwip_setsockopt>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da02      	bge.n	8000f68 <Modbus_activateTcpKeepAlive+0xac>
    	 printf("Failed to set TCP_KEEPCNT option");
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <Modbus_activateTcpKeepAlive+0xc0>)
 8000f64:	f01e fcae 	bl	801f8c4 <iprintf>
        // Handle error
    }
}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	08020b78 	.word	0x08020b78
 8000f74:	08020b9c 	.word	0x08020b9c
 8000f78:	08020bc0 	.word	0x08020bc0
 8000f7c:	08020be4 	.word	0x08020be4

08000f80 <ModbusTcpSeverTask>:



void ModbusTcpSeverTask(void const *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TcpSeverTask */
	struct netconn *conn, *newconn;
	uint8_t i = MODBUS_CLOSED;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]

	/* Create a new TCP connection handle. */
	conn = netconn_new(NETCONN_TCP);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2010      	movs	r0, #16
 8000f92:	f00d fca9 	bl	800e8e8 <netconn_new_with_proto_and_callback>
 8000f96:	6138      	str	r0, [r7, #16]

	/* Check if the connection handle was created successfully */
	if (conn == NULL)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <ModbusTcpSeverTask+0x26>
	{
		/* Handle error */
		printf("Failed to create TCP connection handle\r\n");
 8000f9e:	4831      	ldr	r0, [pc, #196]	; (8001064 <ModbusTcpSeverTask+0xe4>)
 8000fa0:	f01e fcf6 	bl	801f990 <puts>
		return;
 8000fa4:	e05a      	b.n	800105c <ModbusTcpSeverTask+0xdc>
	}

	/* Bind the connection to the specified port. */
	if (netconn_bind(conn, IP_ADDR_ANY, MODBUS_SERVER_TCP_PORT) != ERR_OK)
 8000fa6:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8000faa:	492f      	ldr	r1, [pc, #188]	; (8001068 <ModbusTcpSeverTask+0xe8>)
 8000fac:	6938      	ldr	r0, [r7, #16]
 8000fae:	f00d fd55 	bl	800ea5c <netconn_bind>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <ModbusTcpSeverTask+0x4a>
	{
		/* Handle error */
		printf("Failed to bind to port %d\r\n", MODBUS_SERVER_TCP_PORT);
 8000fb8:	f245 51f0 	movw	r1, #22000	; 0x55f0
 8000fbc:	482b      	ldr	r0, [pc, #172]	; (800106c <ModbusTcpSeverTask+0xec>)
 8000fbe:	f01e fc81 	bl	801f8c4 <iprintf>
		netconn_delete(conn);
 8000fc2:	6938      	ldr	r0, [r7, #16]
 8000fc4:	f00d fd2e 	bl	800ea24 <netconn_delete>
		return;
 8000fc8:	e048      	b.n	800105c <ModbusTcpSeverTask+0xdc>
	}

	/* Put the connection into LISTEN state. */
	if (netconn_listen(conn) != ERR_OK)
 8000fca:	21ff      	movs	r1, #255	; 0xff
 8000fcc:	6938      	ldr	r0, [r7, #16]
 8000fce:	f00d fd7d 	bl	800eacc <netconn_listen_with_backlog>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <ModbusTcpSeverTask+0x66>
	{
		/* Handle error */
		printf("Failed to put the connection into LISTEN state \r\n");
 8000fd8:	4825      	ldr	r0, [pc, #148]	; (8001070 <ModbusTcpSeverTask+0xf0>)
 8000fda:	f01e fcd9 	bl	801f990 <puts>
		netconn_delete(conn);
 8000fde:	6938      	ldr	r0, [r7, #16]
 8000fe0:	f00d fd20 	bl	800ea24 <netconn_delete>
		return;
 8000fe4:	e03a      	b.n	800105c <ModbusTcpSeverTask+0xdc>
	}

	printf("TCP server listening on port %d \r\n", MODBUS_SERVER_TCP_PORT);
 8000fe6:	f245 51f0 	movw	r1, #22000	; 0x55f0
 8000fea:	4822      	ldr	r0, [pc, #136]	; (8001074 <ModbusTcpSeverTask+0xf4>)
 8000fec:	f01e fc6a 	bl	801f8c4 <iprintf>

	/* Infinite loop */
	for (;;)
	{
		if (i == MODBUS_CLOSED)
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d11a      	bne.n	800102c <ModbusTcpSeverTask+0xac>

		{
			if (netconn_accept(conn, &newconn) == ERR_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	6938      	ldr	r0, [r7, #16]
 8000ffe:	f00d fd91 	bl	800eb24 <netconn_accept>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d125      	bne.n	8001054 <ModbusTcpSeverTask+0xd4>
			{

				if (newconn != NULL) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <ModbusTcpSeverTask+0x94>

					printf("Is vali pointer \r\n");
 800100e:	481a      	ldr	r0, [pc, #104]	; (8001078 <ModbusTcpSeverTask+0xf8>)
 8001010:	f01e fcbe 	bl	801f990 <puts>
				}


				i = MODBUS_OPEN;
 8001014:	2301      	movs	r3, #1
 8001016:	75fb      	strb	r3, [r7, #23]
				printf("New connection established \r\n");
 8001018:	4818      	ldr	r0, [pc, #96]	; (800107c <ModbusTcpSeverTask+0xfc>)
 800101a:	f01e fcb9 	bl	801f990 <puts>

				/* Set keepalive options if enabled */
				if (MODBUS_SERVER_KEEP_ALIVE)
				{
					Modbus_activateTcpKeepAlive(newconn, keepidle, keepintvl, keepcnt);
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	2303      	movs	r3, #3
 8001022:	2205      	movs	r2, #5
 8001024:	210a      	movs	r1, #10
 8001026:	f7ff ff49 	bl	8000ebc <Modbus_activateTcpKeepAlive>
 800102a:	e013      	b.n	8001054 <ModbusTcpSeverTask+0xd4>
				}
			}
		}
		else
		{
			if (ModbusHandleConnection(newconn))
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fea2 	bl	8000d78 <ModbusHandleConnection>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00c      	beq.n	8001054 <ModbusTcpSeverTask+0xd4>
			{
				i = MODBUS_CLOSED;
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]
				netconn_close(newconn);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4618      	mov	r0, r3
 8001042:	f00e f8f3 	bl	800f22c <netconn_close>
				netconn_delete(newconn);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4618      	mov	r0, r3
 800104a:	f00d fceb 	bl	800ea24 <netconn_delete>
				printf("Conection closed \r\n");
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <ModbusTcpSeverTask+0x100>)
 8001050:	f01e fc9e 	bl	801f990 <puts>
			}
		}

		/* Delay for a short period */
		osDelay(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f005 f883 	bl	8006160 <osDelay>
		if (i == MODBUS_CLOSED)
 800105a:	e7c9      	b.n	8000ff0 <ModbusTcpSeverTask+0x70>
	}
}
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	08020c08 	.word	0x08020c08
 8001068:	08025298 	.word	0x08025298
 800106c:	08020c30 	.word	0x08020c30
 8001070:	08020c4c 	.word	0x08020c4c
 8001074:	08020c80 	.word	0x08020c80
 8001078:	08020ca4 	.word	0x08020ca4
 800107c:	08020cb8 	.word	0x08020cb8
 8001080:	08020cd8 	.word	0x08020cd8

08001084 <ModbusServerInit>:




void ModbusServerInit()
{
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
	/* definition and creation of tcpServerTask */
	LoadHoldingRegisterRAM();
 800108a:	f01d fd27 	bl	801eadc <LoadHoldingRegisterRAM>
	LoadInputRegisterRAM();
 800108e:	f01d fd45 	bl	801eb1c <LoadInputRegisterRAM>
	LoadEspelhoRAM();
 8001092:	f01d fd65 	bl	801eb60 <LoadEspelhoRAM>
	osThreadDef(tcpServerTask, ModbusTcpSeverTask, osPriorityBelowNormal, 0, MODBUS_SERVER_TASK_STACK_SIZE);
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <ModbusServerInit+0x3c>)
 8001098:	1d3c      	adds	r4, r7, #4
 800109a:	461d      	mov	r5, r3
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	modbusTcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f005 f80b 	bl	80060c8 <osThreadCreate>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <ModbusServerInit+0x40>)
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bdb0      	pop	{r4, r5, r7, pc}
 80010c0:	08020cfc 	.word	0x08020cfc
 80010c4:	2000055c 	.word	0x2000055c

080010c8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_SPI2_Init+0x64>)
 80010ce:	4a18      	ldr	r2, [pc, #96]	; (8001130 <MX_SPI2_Init+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_SPI2_Init+0x64>)
 80010d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_SPI2_Init+0x64>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_SPI2_Init+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_SPI2_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_SPI2_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_SPI2_Init+0x64>)
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SPI2_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_SPI2_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SPI2_Init+0x64>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_SPI2_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_SPI2_Init+0x64>)
 8001114:	220a      	movs	r2, #10
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_SPI2_Init+0x64>)
 800111a:	f002 ff45 	bl	8003fa8 <HAL_SPI_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001124:	f7ff fe22 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000560 	.word	0x20000560
 8001130:	40003800 	.word	0x40003800

08001134 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a28      	ldr	r2, [pc, #160]	; (80011f4 <HAL_SPI_MspInit+0xc0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d14a      	bne.n	80011ec <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <HAL_SPI_MspInit+0xc4>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <HAL_SPI_MspInit+0xc4>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_SPI_MspInit+0xc4>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_SPI_MspInit+0xc4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_SPI_MspInit+0xc4>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_SPI_MspInit+0xc4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_SPI_MspInit+0xc4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_SPI_MspInit+0xc4>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_SPI_MspInit+0xc4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011aa:	230c      	movs	r3, #12
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ba:	2305      	movs	r3, #5
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <HAL_SPI_MspInit+0xc8>)
 80011c6:	f001 ff6b 	bl	80030a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011dc:	2305      	movs	r3, #5
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <HAL_SPI_MspInit+0xcc>)
 80011e8:	f001 ff5a 	bl	80030a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	; 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40003800 	.word	0x40003800
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020400 	.word	0x40020400

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_MspInit+0x54>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_MspInit+0x54>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_MspInit+0x54>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_MspInit+0x54>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_MspInit+0x54>)
 8001230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_MspInit+0x54>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	210f      	movs	r1, #15
 8001246:	f06f 0001 	mvn.w	r0, #1
 800124a:	f000 fca3 	bl	8001b94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b33      	ldr	r3, [pc, #204]	; (8001340 <HAL_InitTick+0xe4>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a32      	ldr	r2, [pc, #200]	; (8001340 <HAL_InitTick+0xe4>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b30      	ldr	r3, [pc, #192]	; (8001340 <HAL_InitTick+0xe4>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001288:	f107 0210 	add.w	r2, r7, #16
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fe56 	bl	8003f44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012a2:	f002 fe27 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80012a6:	6378      	str	r0, [r7, #52]	; 0x34
 80012a8:	e004      	b.n	80012b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012aa:	f002 fe23 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80012ae:	4603      	mov	r3, r0
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <HAL_InitTick+0xe8>)
 80012b8:	fba2 2303 	umull	r2, r3, r2, r3
 80012bc:	0c9b      	lsrs	r3, r3, #18
 80012be:	3b01      	subs	r3, #1
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_InitTick+0xec>)
 80012c4:	4a21      	ldr	r2, [pc, #132]	; (800134c <HAL_InitTick+0xf0>)
 80012c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_InitTick+0xec>)
 80012ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ce:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_InitTick+0xec>)
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_InitTick+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_InitTick+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_InitTick+0xec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80012e8:	4817      	ldr	r0, [pc, #92]	; (8001348 <HAL_InitTick+0xec>)
 80012ea:	f003 fc33 	bl	8004b54 <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d11b      	bne.n	8001334 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80012fc:	4812      	ldr	r0, [pc, #72]	; (8001348 <HAL_InitTick+0xec>)
 80012fe:	f003 fc83 	bl	8004c08 <HAL_TIM_Base_Start_IT>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001308:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800130c:	2b00      	cmp	r3, #0
 800130e:	d111      	bne.n	8001334 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001310:	202d      	movs	r0, #45	; 0x2d
 8001312:	f000 fc5b 	bl	8001bcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d808      	bhi.n	800132e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	202d      	movs	r0, #45	; 0x2d
 8001322:	f000 fc37 	bl	8001b94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <HAL_InitTick+0xf4>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e002      	b.n	8001334 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001334:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001338:	4618      	mov	r0, r3
 800133a:	3738      	adds	r7, #56	; 0x38
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	431bde83 	.word	0x431bde83
 8001348:	200005b8 	.word	0x200005b8
 800134c:	40002000 	.word	0x40002000
 8001350:	20000004 	.word	0x20000004

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001386:	f003 fcaf 	bl	8004ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200005b8 	.word	0x200005b8

08001394 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <ETH_IRQHandler+0x10>)
 800139a:	f000 ffab 	bl	80022f4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20005168 	.word	0x20005168

080013a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return 1;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_kill>:

int _kill(int pid, int sig)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <_kill+0x20>)
 80013c4:	2216      	movs	r2, #22
 80013c6:	601a      	str	r2, [r3, #0]
  return -1;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20010944 	.word	0x20010944

080013dc <_exit>:

void _exit (int status)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffe5 	bl	80013b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ee:	e7fe      	b.n	80013ee <_exit+0x12>

080013f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e00a      	b.n	8001418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001402:	f3af 8000 	nop.w
 8001406:	4601      	mov	r1, r0
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	b2ca      	uxtb	r2, r1
 8001410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	dbf0      	blt.n	8001402 <_read+0x12>
  }

  return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e009      	b.n	8001450 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	dbf1      	blt.n	800143c <_write+0x12>
  }
  return len;
 8001458:	687b      	ldr	r3, [r7, #4]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_close>:

int _close(int file)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148a:	605a      	str	r2, [r3, #4]
  return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_isatty>:

int _isatty(int file)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d205      	bcs.n	8001508 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <_sbrk+0x6c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001506:	e009      	b.n	800151c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	371c      	adds	r7, #28
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	20020000 	.word	0x20020000
 800152c:	00000400 	.word	0x00000400
 8001530:	20000600 	.word	0x20000600
 8001534:	20010950 	.word	0x20010950
 8001538:	20010944 	.word	0x20010944

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_USART1_UART_Init+0x50>)
 8001568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 800156c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_USART1_UART_Init+0x4c>)
 8001598:	f003 fd7e 	bl	8005098 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015a2:	f7ff fbe3 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000604 	.word	0x20000604
 80015b0:	40011000 	.word	0x40011000

080015b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_UART_MspInit+0x84>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12c      	bne.n	8001630 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_UART_MspInit+0x88>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_UART_MspInit+0x88>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_UART_MspInit+0x88>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_UART_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_UART_MspInit+0x88>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_UART_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800160e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001620:	2307      	movs	r3, #7
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <HAL_UART_MspInit+0x8c>)
 800162c:	f001 fd38 	bl	80030a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40011000 	.word	0x40011000
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001648:	f7ff ff78 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164e:	490d      	ldr	r1, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001664:	4c0a      	ldr	r4, [pc, #40]	; (8001690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001672:	f01e fb65 	bl	801fd40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7ff fab1 	bl	8000bdc <main>
  bx  lr    
 800167a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800167c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001688:	080254a8 	.word	0x080254a8
  ldr r2, =_sbss
 800168c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001690:	2001094c 	.word	0x2001094c

08001694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>

08001696 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <DP83848_RegisterBusIO+0x28>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <DP83848_RegisterBusIO+0x28>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <DP83848_RegisterBusIO+0x28>
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c2:	e014      	b.n	80016ee <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d17c      	bne.n	8001814 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2220      	movs	r2, #32
 800172c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e01c      	b.n	800176e <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f107 0208 	add.w	r2, r7, #8
 800173c:	2119      	movs	r1, #25
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	4798      	blx	r3
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	da03      	bge.n	8001750 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001748:	f06f 0304 	mvn.w	r3, #4
 800174c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800174e:	e00b      	b.n	8001768 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	d105      	bne.n	8001768 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
         break;
 8001766:	e005      	b.n	8001774 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3301      	adds	r3, #1
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b1f      	cmp	r3, #31
 8001772:	d9df      	bls.n	8001734 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b1f      	cmp	r3, #31
 800177a:	d902      	bls.n	8001782 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 800177c:	f06f 0302 	mvn.w	r3, #2
 8001780:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d145      	bne.n	8001814 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6810      	ldr	r0, [r2, #0]
 8001790:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001794:	2100      	movs	r1, #0
 8001796:	4798      	blx	r3
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	db37      	blt.n	800180e <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6810      	ldr	r0, [r2, #0]
 80017a6:	f107 0208 	add.w	r2, r7, #8
 80017aa:	2100      	movs	r1, #0
 80017ac:	4798      	blx	r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db28      	blt.n	8001806 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4798      	blx	r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80017be:	e01c      	b.n	80017fa <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4798      	blx	r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017d2:	d80e      	bhi.n	80017f2 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6810      	ldr	r0, [r2, #0]
 80017dc:	f107 0208 	add.w	r2, r7, #8
 80017e0:	2100      	movs	r1, #0
 80017e2:	4798      	blx	r3
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	da07      	bge.n	80017fa <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 80017ea:	f06f 0304 	mvn.w	r3, #4
 80017ee:	613b      	str	r3, [r7, #16]
                 break;
 80017f0:	e010      	b.n	8001814 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 80017f2:	f06f 0301 	mvn.w	r3, #1
 80017f6:	613b      	str	r3, [r7, #16]
               break;
 80017f8:	e00c      	b.n	8001814 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1dd      	bne.n	80017c0 <DP83848_Init+0xc6>
 8001804:	e006      	b.n	8001814 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8001806:	f06f 0304 	mvn.w	r3, #4
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	e002      	b.n	8001814 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 800180e:	f06f 0303 	mvn.w	r3, #3
 8001812:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d112      	bne.n	8001840 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4798      	blx	r3
 8001820:	4603      	mov	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8001824:	bf00      	nop
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4798      	blx	r3
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001838:	d9f5      	bls.n	8001826 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001840:	693b      	ldr	r3, [r7, #16]
 }
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6810      	ldr	r0, [r2, #0]
 800185e:	f107 020c 	add.w	r2, r7, #12
 8001862:	2101      	movs	r1, #1
 8001864:	4798      	blx	r3
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	da02      	bge.n	8001872 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 800186c:	f06f 0304 	mvn.w	r3, #4
 8001870:	e06e      	b.n	8001950 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6810      	ldr	r0, [r2, #0]
 800187a:	f107 020c 	add.w	r2, r7, #12
 800187e:	2101      	movs	r1, #1
 8001880:	4798      	blx	r3
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	da02      	bge.n	800188e <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001888:	f06f 0304 	mvn.w	r3, #4
 800188c:	e060      	b.n	8001950 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001898:	2301      	movs	r3, #1
 800189a:	e059      	b.n	8001950 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6810      	ldr	r0, [r2, #0]
 80018a4:	f107 020c 	add.w	r2, r7, #12
 80018a8:	2100      	movs	r1, #0
 80018aa:	4798      	blx	r3
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da02      	bge.n	80018b8 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80018b2:	f06f 0304 	mvn.w	r3, #4
 80018b6:	e04b      	b.n	8001950 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d11b      	bne.n	80018fa <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <DP83848_GetLinkState+0x90>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80018d6:	2302      	movs	r3, #2
 80018d8:	e03a      	b.n	8001950 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e033      	b.n	8001950 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80018f2:	2304      	movs	r3, #4
 80018f4:	e02c      	b.n	8001950 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80018f6:	2305      	movs	r3, #5
 80018f8:	e02a      	b.n	8001950 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6810      	ldr	r0, [r2, #0]
 8001902:	f107 020c 	add.w	r2, r7, #12
 8001906:	2110      	movs	r1, #16
 8001908:	4798      	blx	r3
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	da02      	bge.n	8001916 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001910:	f06f 0304 	mvn.w	r3, #4
 8001914:	e01c      	b.n	8001950 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001920:	2306      	movs	r3, #6
 8001922:	e015      	b.n	8001950 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0306 	and.w	r3, r3, #6
 800192a:	2b04      	cmp	r3, #4
 800192c:	d101      	bne.n	8001932 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800192e:	2302      	movs	r3, #2
 8001930:	e00e      	b.n	8001950 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0306 	and.w	r3, r3, #6
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800193c:	2303      	movs	r3, #3
 800193e:	e007      	b.n	8001950 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0306 	and.w	r3, r3, #6
 8001946:	2b06      	cmp	r3, #6
 8001948:	d101      	bne.n	800194e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800194a:	2304      	movs	r3, #4
 800194c:	e000      	b.n	8001950 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800194e:	2305      	movs	r3, #5
    }
  }
}
 8001950:	4618      	mov	r0, r3
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_Init+0x40>)
 8001962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_Init+0x40>)
 800196e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_Init+0x40>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f8fc 	bl	8001b7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	200f      	movs	r0, #15
 8001988:	f7ff fc68 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff fc3a 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x20>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x24>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_IncTick+0x24>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008
 80019c0:	2000064c 	.word	0x2000064c

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000064c 	.word	0x2000064c

080019dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff ffee 	bl	80019c4 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_Delay+0x44>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffde 	bl	80019c4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <__NVIC_EnableIRQ+0x38>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff4c 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba6:	f7ff ff61 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001baa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	6978      	ldr	r0, [r7, #20]
 8001bb2:	f7ff ffb1 	bl	8001b18 <NVIC_EncodePriority>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff80 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001bc4:	bf00      	nop
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff54 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e06c      	b.n	8001cd4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d106      	bne.n	8001c12 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2223      	movs	r2, #35	; 0x23
 8001c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f004 f815 	bl	8005c3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_ETH_Init+0xf4>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a30      	ldr	r2, [pc, #192]	; (8001cdc <HAL_ETH_Init+0xf4>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <HAL_ETH_Init+0xf4>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a2b      	ldr	r2, [pc, #172]	; (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c38:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c3a:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4927      	ldr	r1, [pc, #156]	; (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_ETH_Init+0xf8>)
 8001c4a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c64:	f7ff feae 	bl	80019c4 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c6a:	e011      	b.n	8001c90 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c6c:	f7ff feaa 	bl	80019c4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c7a:	d909      	bls.n	8001c90 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	22e0      	movs	r2, #224	; 0xe0
 8001c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e021      	b.n	8001cd4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1e4      	bne.n	8001c6c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 ff56 	bl	8002b54 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fffd 	bl	8002ca8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f001 f853 	bl	8002d5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	2100      	movs	r1, #0
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 ffbb 	bl	8002c38 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2210      	movs	r2, #16
 8001cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800

08001ce4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d17f      	bne.n	8001df6 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2223      	movs	r2, #35	; 0x23
 8001cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001d12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d28:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001d3c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2204      	movs	r2, #4
 8001d44:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f9f8 	bl	800213c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f7ff fe39 	bl	80019dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0204 	orr.w	r2, r2, #4
 8001d80:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7ff fe26 	bl	80019dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fd7c 	bl	8002896 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001db4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dcc:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001de0:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001de4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001de8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2223      	movs	r2, #35	; 0x23
 8001dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
  }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e0e:	2b23      	cmp	r3, #35	; 0x23
 8001e10:	d170      	bne.n	8001ef4 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2223      	movs	r2, #35	; 0x23
 8001e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001e2c:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001e30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e34:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e4c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	f023 0302 	bic.w	r3, r3, #2
 8001e60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e64:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0204 	bic.w	r2, r2, #4
 8001e74:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fdac 	bl	80019dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fd02 	bl	8002896 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff fd96 	bl	80019dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	e00e      	b.n	8001edc <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	3212      	adds	r2, #18
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d9ed      	bls.n	8001ebe <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2210      	movs	r2, #16
 8001eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
  }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f14:	f043 0201 	orr.w	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e045      	b.n	8001fae <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f28:	2b23      	cmp	r3, #35	; 0x23
 8001f2a:	d13f      	bne.n	8001fac <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001f34:	2201      	movs	r2, #1
 8001f36:	6839      	ldr	r1, [r7, #0]
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 ff7b 	bl	8002e34 <ETH_Prepare_Tx_Descriptors>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4a:	f043 0202 	orr.w	r2, r3, #2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e02a      	b.n	8001fae <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f58:	f3bf 8f4f 	dsb	sy
}
 8001f5c:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d904      	bls.n	8001f7a <HAL_ETH_Transmit_IT+0x7c>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	1f1a      	subs	r2, r3, #4
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f94:	461a      	mov	r2, r3
 8001f96:	2304      	movs	r3, #4
 8001f98:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
  }
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b088      	sub	sp, #32
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0a8      	b.n	8002134 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe8:	2b23      	cmp	r3, #35	; 0x23
 8001fea:	d001      	beq.n	8001ff0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0a1      	b.n	8002134 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	3212      	adds	r2, #18
 8001ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002000:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002006:	f1c3 0304 	rsb	r3, r3, #4
 800200a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800200c:	e06a      	b.n	80020e4 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_ETH_ReadData+0x88>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d040      	beq.n	80020c0 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00c      	beq.n	8002082 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002072:	3b04      	subs	r3, #4
 8002074:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800209a:	461a      	mov	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f003 ff86 	bl	8005fb0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	441a      	add	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3301      	adds	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d902      	bls.n	80020d2 <HAL_ETH_ReadData+0x11c>
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	3b04      	subs	r3, #4
 80020d0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	3212      	adds	r2, #18
 80020d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020dc:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db06      	blt.n	80020fa <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d202      	bcs.n	80020fa <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d089      	beq.n	800200e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	441a      	add	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f814 	bl	800213c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d108      	bne.n	8002132 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3720      	adds	r7, #32
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002148:	2301      	movs	r3, #1
 800214a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002150:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	3212      	adds	r2, #18
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002162:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002164:	e03d      	b.n	80021e2 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d112      	bne.n	8002194 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	4618      	mov	r0, r3
 8002174:	f003 feec 	bl	8005f50 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	74fb      	strb	r3, [r7, #19]
 8002182:	e007      	b.n	8002194 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	461a      	mov	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	461a      	mov	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d023      	beq.n	80021e2 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <ETH_UpdateDescriptor+0xfc>)
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	e003      	b.n	80021b2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80021b0:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3301      	adds	r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d902      	bls.n	80021d0 <ETH_UpdateDescriptor+0x94>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b04      	subs	r3, #4
 80021ce:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	3212      	adds	r2, #18
 80021d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021da:	617b      	str	r3, [r7, #20]
      desccount--;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	3b01      	subs	r3, #1
 80021e0:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <ETH_UpdateDescriptor+0xb2>
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1bb      	bne.n	8002166 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d01a      	beq.n	800222e <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002202:	f3bf 8f5f 	dmb	sy
}
 8002206:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6919      	ldr	r1, [r3, #16]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	18ca      	adds	r2, r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800222e:	bf00      	nop
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	80004600 	.word	0x80004600

0800223c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3318      	adds	r3, #24
 8002248:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800225a:	e03f      	b.n	80022dc <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800225c:	2301      	movs	r3, #1
 800225e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3b01      	subs	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	3304      	adds	r3, #4
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3301      	adds	r3, #1
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002284:	7bbb      	ldrb	r3, [r7, #14]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d028      	beq.n	80022dc <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68d9      	ldr	r1, [r3, #12]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	440b      	add	r3, r1
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db1b      	blt.n	80022d8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	3304      	adds	r3, #4
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 febf 	bl	8006030 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	3304      	adds	r3, #4
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	3301      	adds	r3, #1
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022d6:	e001      	b.n	80022dc <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_ETH_ReleaseTxPacket+0xac>
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1b9      	bne.n	800225c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d112      	bne.n	8002334 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b40      	cmp	r3, #64	; 0x40
 800231e:	d109      	bne.n	8002334 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002328:	461a      	mov	r2, r3
 800232a:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_ETH_IRQHandler+0x178>)
 800232c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f003 f9cc 	bl	80056cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d113      	bne.n	800236e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10a      	bne.n	800236e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002360:	461a      	mov	r2, r3
 8002362:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002366:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f003 f9bf 	bl	80056ec <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800237c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002380:	d14c      	bne.n	800241c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002394:	d142      	bne.n	800241c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f043 0208 	orr.w	r2, r3, #8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b8:	d11a      	bne.n	80023f0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_ETH_IRQHandler+0x17c>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80023e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023e4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	22e0      	movs	r2, #224	; 0xe0
 80023ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80023ee:	e012      	b.n	8002416 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	f248 6380 	movw	r3, #34432	; 0x8680
 80023fe:	4013      	ands	r3, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240e:	461a      	mov	r2, r3
 8002410:	f248 6380 	movw	r3, #34432	; 0x8680
 8002414:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f003 f978 	bl	800570c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b08      	cmp	r3, #8
 8002428:	d10e      	bne.n	8002448 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f81c 	bl	8002478 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_ETH_IRQHandler+0x180>)
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_ETH_IRQHandler+0x180>)
 8002456:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800245a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f815 	bl	800248c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	00010040 	.word	0x00010040
 8002470:	007e2000 	.word	0x007e2000
 8002474:	40013c00 	.word	0x40013c00

08002478 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 031c 	and.w	r3, r3, #28
 80024bc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	02db      	lsls	r3, r3, #11
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	019b      	lsls	r3, r3, #6
 80024ce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f023 0302 	bic.w	r3, r3, #2
 80024de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80024f0:	f7ff fa68 	bl	80019c4 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024f6:	e00d      	b.n	8002514 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80024f8:	f7ff fa64 	bl	80019c4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002506:	d301      	bcc.n	800250c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e010      	b.n	800252e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1ec      	bne.n	80024f8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 031c 	and.w	r3, r3, #28
 8002552:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	02db      	lsls	r3, r3, #11
 8002558:	b29b      	uxth	r3, r3
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	019b      	lsls	r3, r3, #6
 8002564:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f043 0302 	orr.w	r3, r3, #2
 8002574:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002590:	f7ff fa18 	bl	80019c4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002596:	e00d      	b.n	80025b4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002598:	f7ff fa14 	bl	80019c4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a6:	d301      	bcc.n	80025ac <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e009      	b.n	80025c0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1ec      	bne.n	8002598 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0d9      	b.n	8002790 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bf14      	ite	ne
 80025ea:	2301      	movne	r3, #1
 80025ec:	2300      	moveq	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	461a      	mov	r2, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf0c      	ite	eq
 800264a:	2301      	moveq	r3, #1
 800264c:	2300      	movne	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	0c1b      	lsrs	r3, r3, #16
 8002750:	b29a      	uxth	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2300      	moveq	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e00b      	b.n	80027c8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d105      	bne.n	80027c6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80027ba:	6839      	ldr	r1, [r7, #0]
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f88f 	bl	80028e0 <ETH_SetMACConfig>

    return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
  }
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 031c 	bic.w	r3, r3, #28
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80027e8:	f001 fb78 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 80027ec:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_ETH_SetMDIOClockRange+0x98>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d908      	bls.n	8002808 <HAL_ETH_SetMDIOClockRange+0x38>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4a1c      	ldr	r2, [pc, #112]	; (800286c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d804      	bhi.n	8002808 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	e027      	b.n	8002858 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4a18      	ldr	r2, [pc, #96]	; (800286c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d908      	bls.n	8002822 <HAL_ETH_SetMDIOClockRange+0x52>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d204      	bcs.n	8002822 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f043 030c 	orr.w	r3, r3, #12
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e01a      	b.n	8002858 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d303      	bcc.n	8002832 <HAL_ETH_SetMDIOClockRange+0x62>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d911      	bls.n	8002856 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d908      	bls.n	800284c <HAL_ETH_SetMDIOClockRange+0x7c>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d804      	bhi.n	800284c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e005      	b.n	8002858 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f043 0310 	orr.w	r3, r3, #16
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e000      	b.n	8002858 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002856:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	611a      	str	r2, [r3, #16]
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	01312cff 	.word	0x01312cff
 800286c:	02160ebf 	.word	0x02160ebf
 8002870:	03938700 	.word	0x03938700
 8002874:	05f5e0ff 	.word	0x05f5e0ff
 8002878:	08f0d17f 	.word	0x08f0d17f

0800287c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff f888 	bl	80019dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028d6:	6193      	str	r3, [r2, #24]
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <ETH_SetMACConfig+0x15c>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	7c1b      	ldrb	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <ETH_SetMACConfig+0x28>
 8002902:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002906:	e000      	b.n	800290a <ETH_SetMACConfig+0x2a>
 8002908:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	7c5b      	ldrb	r3, [r3, #17]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <ETH_SetMACConfig+0x38>
 8002912:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002916:	e000      	b.n	800291a <ETH_SetMACConfig+0x3a>
 8002918:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800291a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002920:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	7fdb      	ldrb	r3, [r3, #31]
 8002926:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002928:	431a      	orrs	r2, r3
                        macconf->Speed |
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800292e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	7f92      	ldrb	r2, [r2, #30]
 8002934:	2a00      	cmp	r2, #0
 8002936:	d102      	bne.n	800293e <ETH_SetMACConfig+0x5e>
 8002938:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800293c:	e000      	b.n	8002940 <ETH_SetMACConfig+0x60>
 800293e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002940:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7f1b      	ldrb	r3, [r3, #28]
 8002946:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002948:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800294e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	791b      	ldrb	r3, [r3, #4]
 8002954:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002956:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800295e:	2a00      	cmp	r2, #0
 8002960:	d102      	bne.n	8002968 <ETH_SetMACConfig+0x88>
 8002962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002966:	e000      	b.n	800296a <ETH_SetMACConfig+0x8a>
 8002968:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800296a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	7bdb      	ldrb	r3, [r3, #15]
 8002970:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002972:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002978:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002980:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002982:	4313      	orrs	r3, r2
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800299a:	2001      	movs	r0, #1
 800299c:	f7ff f81e 	bl	80019dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029be:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80029c6:	2a00      	cmp	r2, #0
 80029c8:	d101      	bne.n	80029ce <ETH_SetMACConfig+0xee>
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	e000      	b.n	80029d0 <ETH_SetMACConfig+0xf0>
 80029ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029d0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80029de:	2a01      	cmp	r2, #1
 80029e0:	d101      	bne.n	80029e6 <ETH_SetMACConfig+0x106>
 80029e2:	2208      	movs	r2, #8
 80029e4:	e000      	b.n	80029e8 <ETH_SetMACConfig+0x108>
 80029e6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80029e8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80029f0:	2a01      	cmp	r2, #1
 80029f2:	d101      	bne.n	80029f8 <ETH_SetMACConfig+0x118>
 80029f4:	2204      	movs	r2, #4
 80029f6:	e000      	b.n	80029fa <ETH_SetMACConfig+0x11a>
 80029f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a02:	2a01      	cmp	r2, #1
 8002a04:	d101      	bne.n	8002a0a <ETH_SetMACConfig+0x12a>
 8002a06:	2202      	movs	r2, #2
 8002a08:	e000      	b.n	8002a0c <ETH_SetMACConfig+0x12c>
 8002a0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a24:	2001      	movs	r0, #1
 8002a26:	f7fe ffd9 	bl	80019dc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	619a      	str	r2, [r3, #24]
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	ff20810f 	.word	0xff20810f

08002a40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <ETH_SetDMAConfig+0x110>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	7b1b      	ldrb	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <ETH_SetDMAConfig+0x2c>
 8002a66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a6a:	e000      	b.n	8002a6e <ETH_SetDMAConfig+0x2e>
 8002a6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	7b5b      	ldrb	r3, [r3, #13]
 8002a72:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a74:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	7f52      	ldrb	r2, [r2, #29]
 8002a7a:	2a00      	cmp	r2, #0
 8002a7c:	d102      	bne.n	8002a84 <ETH_SetDMAConfig+0x44>
 8002a7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a82:	e000      	b.n	8002a86 <ETH_SetDMAConfig+0x46>
 8002a84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a86:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	7b9b      	ldrb	r3, [r3, #14]
 8002a8c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a8e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	7f1b      	ldrb	r3, [r3, #28]
 8002a9a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a9c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7f9b      	ldrb	r3, [r3, #30]
 8002aa2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002aa4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002aaa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ab2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f7fe ff80 	bl	80019dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002af4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002afa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b00:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b08:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b0a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b12:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b18:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b26:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7fe ff51 	bl	80019dc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	f8de3f23 	.word	0xf8de3f23

08002b54 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b0a6      	sub	sp, #152	; 0x98
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b90:	2300      	movs	r3, #0
 8002b92:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff fe86 	bl	80028e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c00:	2301      	movs	r3, #1
 8002c02:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c08:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c14:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c24:	f107 0308 	add.w	r3, r7, #8
 8002c28:	4619      	mov	r1, r3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ff08 	bl	8002a40 <ETH_SetDMAConfig>
}
 8002c30:	bf00      	nop
 8002c32:	3798      	adds	r7, #152	; 0x98
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3305      	adds	r3, #5
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	3204      	adds	r2, #4
 8002c50:	7812      	ldrb	r2, [r2, #0]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <ETH_MACAddressConfig+0x68>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3303      	adds	r3, #3
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	061a      	lsls	r2, r3, #24
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3301      	adds	r3, #1
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	7812      	ldrb	r2, [r2, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <ETH_MACAddressConfig+0x6c>)
 8002c8a:	4413      	add	r3, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	6013      	str	r3, [r2, #0]
}
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40028040 	.word	0x40028040
 8002ca4:	40028044 	.word	0x40028044

08002ca8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e03e      	b.n	8002d34 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68d9      	ldr	r1, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	3206      	adds	r2, #6
 8002ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d80c      	bhi.n	8002d18 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68d9      	ldr	r1, [r3, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	e004      	b.n	8002d22 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3301      	adds	r3, #1
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d9bd      	bls.n	8002cb6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4c:	611a      	str	r2, [r3, #16]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e046      	b.n	8002df6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6919      	ldr	r1, [r3, #16]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002da4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002dac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	3212      	adds	r2, #18
 8002dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d80c      	bhi.n	8002de6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6919      	ldr	r1, [r3, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	e004      	b.n	8002df0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3301      	adds	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d9b5      	bls.n	8002d68 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e26:	60da      	str	r2, [r3, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b08d      	sub	sp, #52	; 0x34
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3318      	adds	r3, #24
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e76:	d007      	beq.n	8002e88 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e103      	b.n	8003094 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	3301      	adds	r3, #1
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ea4:	f023 031f 	bic.w	r3, r3, #31
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	6852      	ldr	r2, [r2, #4]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002f12:	f3bf 8f5f 	dmb	sy
}
 8002f16:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002f24:	e084      	b.n	8003030 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d006      	beq.n	8002f46 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e005      	b.n	8002f52 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	3301      	adds	r3, #1
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d902      	bls.n	8002f64 <ETH_Prepare_Tx_Descriptors+0x130>
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	3b04      	subs	r3, #4
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f6c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f86:	d007      	beq.n	8002f98 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d029      	beq.n	8002fec <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002faa:	e019      	b.n	8002fe0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002fac:	f3bf 8f5f 	dmb	sy
}
 8002fb0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d902      	bls.n	8002fd0 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	3b04      	subs	r3, #4
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	3301      	adds	r3, #1
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d3e1      	bcc.n	8002fac <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e053      	b.n	8003094 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	3301      	adds	r3, #1
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800300a:	f023 031f 	bic.w	r3, r3, #31
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	6852      	ldr	r2, [r2, #4]
 8003012:	431a      	orrs	r2, r3
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	3301      	adds	r3, #1
 800301c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800301e:	f3bf 8f5f 	dmb	sy
}
 8003022:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f47f af76 	bne.w	8002f26 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e005      	b.n	800305a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	3304      	adds	r3, #4
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800307a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800307c:	b672      	cpsid	i
}
 800307e:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	4413      	add	r3, r2
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800308e:	b662      	cpsie	i
}
 8003090:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3734      	adds	r7, #52	; 0x34
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	e16b      	b.n	8003394 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030bc:	2201      	movs	r2, #1
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	f040 815a 	bne.w	800338e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d005      	beq.n	80030f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d130      	bne.n	8003154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	2203      	movs	r2, #3
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 0201 	and.w	r2, r3, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b03      	cmp	r3, #3
 800315e:	d017      	beq.n	8003190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d123      	bne.n	80031e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	08da      	lsrs	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3208      	adds	r2, #8
 80031a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	220f      	movs	r2, #15
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	69b9      	ldr	r1, [r7, #24]
 80031e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0203 	and.w	r2, r3, #3
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80b4 	beq.w	800338e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b60      	ldr	r3, [pc, #384]	; (80033ac <HAL_GPIO_Init+0x30c>)
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	4a5f      	ldr	r2, [pc, #380]	; (80033ac <HAL_GPIO_Init+0x30c>)
 8003230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003234:	6453      	str	r3, [r2, #68]	; 0x44
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_GPIO_Init+0x30c>)
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003242:	4a5b      	ldr	r2, [pc, #364]	; (80033b0 <HAL_GPIO_Init+0x310>)
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	3302      	adds	r3, #2
 800324a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	220f      	movs	r2, #15
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_GPIO_Init+0x314>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d02b      	beq.n	80032c6 <HAL_GPIO_Init+0x226>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a51      	ldr	r2, [pc, #324]	; (80033b8 <HAL_GPIO_Init+0x318>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d025      	beq.n	80032c2 <HAL_GPIO_Init+0x222>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a50      	ldr	r2, [pc, #320]	; (80033bc <HAL_GPIO_Init+0x31c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01f      	beq.n	80032be <HAL_GPIO_Init+0x21e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4f      	ldr	r2, [pc, #316]	; (80033c0 <HAL_GPIO_Init+0x320>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d019      	beq.n	80032ba <HAL_GPIO_Init+0x21a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4e      	ldr	r2, [pc, #312]	; (80033c4 <HAL_GPIO_Init+0x324>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_GPIO_Init+0x216>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4d      	ldr	r2, [pc, #308]	; (80033c8 <HAL_GPIO_Init+0x328>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00d      	beq.n	80032b2 <HAL_GPIO_Init+0x212>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4c      	ldr	r2, [pc, #304]	; (80033cc <HAL_GPIO_Init+0x32c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <HAL_GPIO_Init+0x20e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <HAL_GPIO_Init+0x330>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_GPIO_Init+0x20a>
 80032a6:	2307      	movs	r3, #7
 80032a8:	e00e      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032aa:	2308      	movs	r3, #8
 80032ac:	e00c      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032ae:	2306      	movs	r3, #6
 80032b0:	e00a      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032b2:	2305      	movs	r3, #5
 80032b4:	e008      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032b6:	2304      	movs	r3, #4
 80032b8:	e006      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e004      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032be:	2302      	movs	r3, #2
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_GPIO_Init+0x228>
 80032c6:	2300      	movs	r3, #0
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f002 0203 	and.w	r2, r2, #3
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	4093      	lsls	r3, r2
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d8:	4935      	ldr	r1, [pc, #212]	; (80033b0 <HAL_GPIO_Init+0x310>)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_GPIO_Init+0x334>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800330a:	4a32      	ldr	r2, [pc, #200]	; (80033d4 <HAL_GPIO_Init+0x334>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003310:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <HAL_GPIO_Init+0x334>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003334:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <HAL_GPIO_Init+0x334>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_GPIO_Init+0x334>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_GPIO_Init+0x334>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_GPIO_Init+0x334>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003388:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <HAL_GPIO_Init+0x334>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3301      	adds	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	f67f ae90 	bls.w	80030bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40021400 	.word	0x40021400
 80033cc:	40021800 	.word	0x40021800
 80033d0:	40021c00 	.word	0x40021c00
 80033d4:	40013c00 	.word	0x40013c00

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f4:	e003      	b.n	80033fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e12b      	b.n	8003676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fa12 	bl	800085c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	; 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003470:	f000 fd40 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 8003474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a81      	ldr	r2, [pc, #516]	; (8003680 <HAL_I2C_Init+0x274>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d807      	bhi.n	8003490 <HAL_I2C_Init+0x84>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a80      	ldr	r2, [pc, #512]	; (8003684 <HAL_I2C_Init+0x278>)
 8003484:	4293      	cmp	r3, r2
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e006      	b.n	800349e <HAL_I2C_Init+0x92>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a7d      	ldr	r2, [pc, #500]	; (8003688 <HAL_I2C_Init+0x27c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	bf94      	ite	ls
 8003498:	2301      	movls	r3, #1
 800349a:	2300      	movhi	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0e7      	b.n	8003676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a78      	ldr	r2, [pc, #480]	; (800368c <HAL_I2C_Init+0x280>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	0c9b      	lsrs	r3, r3, #18
 80034b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a6a      	ldr	r2, [pc, #424]	; (8003680 <HAL_I2C_Init+0x274>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d802      	bhi.n	80034e0 <HAL_I2C_Init+0xd4>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3301      	adds	r3, #1
 80034de:	e009      	b.n	80034f4 <HAL_I2C_Init+0xe8>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	4a69      	ldr	r2, [pc, #420]	; (8003690 <HAL_I2C_Init+0x284>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	3301      	adds	r3, #1
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003506:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	495c      	ldr	r1, [pc, #368]	; (8003680 <HAL_I2C_Init+0x274>)
 8003510:	428b      	cmp	r3, r1
 8003512:	d819      	bhi.n	8003548 <HAL_I2C_Init+0x13c>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1e59      	subs	r1, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003528:	400b      	ands	r3, r1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_I2C_Init+0x138>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1e59      	subs	r1, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fbb1 f3f3 	udiv	r3, r1, r3
 800353c:	3301      	adds	r3, #1
 800353e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003542:	e051      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 8003544:	2304      	movs	r3, #4
 8003546:	e04f      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d111      	bne.n	8003574 <HAL_I2C_Init+0x168>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	440b      	add	r3, r1
 800355e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e012      	b.n	800359a <HAL_I2C_Init+0x18e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e58      	subs	r0, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	0099      	lsls	r1, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	fbb0 f3f3 	udiv	r3, r0, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Init+0x196>
 800359e:	2301      	movs	r3, #1
 80035a0:	e022      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10e      	bne.n	80035c8 <HAL_I2C_Init+0x1bc>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1e58      	subs	r0, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	440b      	add	r3, r1
 80035b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c6:	e00f      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1e58      	subs	r0, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	0099      	lsls	r1, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	fbb0 f3f3 	udiv	r3, r0, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	6809      	ldr	r1, [r1, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6911      	ldr	r1, [r2, #16]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	000186a0 	.word	0x000186a0
 8003684:	001e847f 	.word	0x001e847f
 8003688:	003d08ff 	.word	0x003d08ff
 800368c:	431bde83 	.word	0x431bde83
 8003690:	10624dd3 	.word	0x10624dd3

08003694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e267      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d075      	beq.n	800379e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b2:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d00c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036be:	4b85      	ldr	r3, [pc, #532]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d112      	bne.n	80036f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ca:	4b82      	ldr	r3, [pc, #520]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d6:	d10b      	bne.n	80036f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	4b7e      	ldr	r3, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d05b      	beq.n	800379c <HAL_RCC_OscConfig+0x108>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d157      	bne.n	800379c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e242      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d106      	bne.n	8003708 <HAL_RCC_OscConfig+0x74>
 80036fa:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a75      	ldr	r2, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e01d      	b.n	8003744 <HAL_RCC_OscConfig+0xb0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0x98>
 8003712:	4b70      	ldr	r3, [pc, #448]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a6f      	ldr	r2, [pc, #444]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b6d      	ldr	r3, [pc, #436]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6c      	ldr	r2, [pc, #432]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e00b      	b.n	8003744 <HAL_RCC_OscConfig+0xb0>
 800372c:	4b69      	ldr	r3, [pc, #420]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a68      	ldr	r2, [pc, #416]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a65      	ldr	r2, [pc, #404]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 800373e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fe f93a 	bl	80019c4 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003754:	f7fe f936 	bl	80019c4 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e207      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	4b5b      	ldr	r3, [pc, #364]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0xc0>
 8003772:	e014      	b.n	800379e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fe f926 	bl	80019c4 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800377c:	f7fe f922 	bl	80019c4 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1f3      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378e:	4b51      	ldr	r3, [pc, #324]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0xe8>
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d063      	beq.n	8003872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037aa:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d11c      	bne.n	80037fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c2:	4b44      	ldr	r3, [pc, #272]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d116      	bne.n	80037fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_RCC_OscConfig+0x152>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e1c7      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e6:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4937      	ldr	r1, [pc, #220]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	e03a      	b.n	8003872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003804:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_RCC_OscConfig+0x244>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fe f8db 	bl	80019c4 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003812:	f7fe f8d7 	bl	80019c4 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1a8      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4925      	ldr	r1, [pc, #148]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
 8003844:	e015      	b.n	8003872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003846:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HAL_RCC_OscConfig+0x244>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe f8ba 	bl	80019c4 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003854:	f7fe f8b6 	bl	80019c4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e187      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d036      	beq.n	80038ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_RCC_OscConfig+0x248>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fe f89a 	bl	80019c4 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003894:	f7fe f896 	bl	80019c4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e167      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80038a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x200>
 80038b2:	e01b      	b.n	80038ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_OscConfig+0x248>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fe f883 	bl	80019c4 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	e00e      	b.n	80038e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c2:	f7fe f87f 	bl	80019c4 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d907      	bls.n	80038e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e150      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
 80038d4:	40023800 	.word	0x40023800
 80038d8:	42470000 	.word	0x42470000
 80038dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e0:	4b88      	ldr	r3, [pc, #544]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80038e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ea      	bne.n	80038c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8097 	beq.w	8003a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fe:	4b81      	ldr	r3, [pc, #516]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	4b7d      	ldr	r3, [pc, #500]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4a7c      	ldr	r2, [pc, #496]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003918:	6413      	str	r3, [r2, #64]	; 0x40
 800391a:	4b7a      	ldr	r3, [pc, #488]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	4b77      	ldr	r3, [pc, #476]	; (8003b08 <HAL_RCC_OscConfig+0x474>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d118      	bne.n	8003968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003936:	4b74      	ldr	r3, [pc, #464]	; (8003b08 <HAL_RCC_OscConfig+0x474>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a73      	ldr	r2, [pc, #460]	; (8003b08 <HAL_RCC_OscConfig+0x474>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003942:	f7fe f83f 	bl	80019c4 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fe f83b 	bl	80019c4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e10c      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCC_OscConfig+0x474>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d106      	bne.n	800397e <HAL_RCC_OscConfig+0x2ea>
 8003970:	4b64      	ldr	r3, [pc, #400]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a63      	ldr	r2, [pc, #396]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	e01c      	b.n	80039b8 <HAL_RCC_OscConfig+0x324>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b05      	cmp	r3, #5
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x30c>
 8003986:	4b5f      	ldr	r3, [pc, #380]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	4a5e      	ldr	r2, [pc, #376]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 800398c:	f043 0304 	orr.w	r3, r3, #4
 8003990:	6713      	str	r3, [r2, #112]	; 0x70
 8003992:	4b5c      	ldr	r3, [pc, #368]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	4a5b      	ldr	r2, [pc, #364]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0x324>
 80039a0:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a57      	ldr	r2, [pc, #348]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
 80039ac:	4b55      	ldr	r3, [pc, #340]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4a54      	ldr	r2, [pc, #336]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039b2:	f023 0304 	bic.w	r3, r3, #4
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d015      	beq.n	80039ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fe f800 	bl	80019c4 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	e00a      	b.n	80039de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fd fffc 	bl	80019c4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0cb      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ee      	beq.n	80039c8 <HAL_RCC_OscConfig+0x334>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ec:	f7fd ffea 	bl	80019c4 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fd ffe6 	bl	80019c4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0b5      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0a:	4b3e      	ldr	r3, [pc, #248]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ee      	bne.n	80039f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a1 	beq.w	8003b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a32:	4b34      	ldr	r3, [pc, #208]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d05c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d141      	bne.n	8003aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_OscConfig+0x478>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd ffba 	bl	80019c4 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fd ffb6 	bl	80019c4 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e087      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	491b      	ldr	r1, [pc, #108]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x478>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fd ff8f 	bl	80019c4 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd ff8b 	bl	80019c4 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e05c      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x416>
 8003ac8:	e054      	b.n	8003b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <HAL_RCC_OscConfig+0x478>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fd ff78 	bl	80019c4 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd ff74 	bl	80019c4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e045      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x444>
 8003af6:	e03d      	b.n	8003b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e038      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40007000 	.word	0x40007000
 8003b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCC_OscConfig+0x4ec>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d028      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d121      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d11a      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d111      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800

08003b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0cc      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b68      	ldr	r3, [pc, #416]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d90c      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b65      	ldr	r3, [pc, #404]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b63      	ldr	r3, [pc, #396]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0b8      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a52      	ldr	r2, [pc, #328]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	494d      	ldr	r1, [pc, #308]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d044      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d119      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e07f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e067      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4934      	ldr	r1, [pc, #208]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c74:	f7fd fea6 	bl	80019c4 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fd fea2 	bl	80019c4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e04f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 020c 	and.w	r2, r3, #12
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1eb      	bne.n	8003c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d20c      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e032      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4916      	ldr	r1, [pc, #88]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0a:	f000 f821 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	490a      	ldr	r1, [pc, #40]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	5ccb      	ldrb	r3, [r1, r3]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd fa96 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023c00 	.word	0x40023c00
 8003d40:	40023800 	.word	0x40023800
 8003d44:	08025064 	.word	0x08025064
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	20000004 	.word	0x20000004

08003d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d54:	b090      	sub	sp, #64	; 0x40
 8003d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d60:	2300      	movs	r3, #0
 8003d62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d68:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d00d      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x40>
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	f200 80a1 	bhi.w	8003ebc <HAL_RCC_GetSysClockFreq+0x16c>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x34>
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d003      	beq.n	8003d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d82:	e09b      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b53      	ldr	r3, [pc, #332]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d88:	e09b      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8a:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d8e:	e098      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d90:	4b4f      	ldr	r3, [pc, #316]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9a:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d028      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	099b      	lsrs	r3, r3, #6
 8003dac:	2200      	movs	r2, #0
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	627a      	str	r2, [r7, #36]	; 0x24
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003db8:	2100      	movs	r1, #0
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dbc:	fb03 f201 	mul.w	r2, r3, r1
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	fb00 f303 	mul.w	r3, r0, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4a43      	ldr	r2, [pc, #268]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dca:	fba0 1202 	umull	r1, r2, r0, r2
 8003dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dd0:	460a      	mov	r2, r1
 8003dd2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd6:	4413      	add	r3, r2
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ddc:	2200      	movs	r2, #0
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	61fa      	str	r2, [r7, #28]
 8003de2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dea:	f7fc fa49 	bl	8000280 <__aeabi_uldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4613      	mov	r3, r2
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df6:	e053      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df8:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	099b      	lsrs	r3, r3, #6
 8003dfe:	2200      	movs	r2, #0
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	617a      	str	r2, [r7, #20]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e0a:	f04f 0b00 	mov.w	fp, #0
 8003e0e:	4652      	mov	r2, sl
 8003e10:	465b      	mov	r3, fp
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f04f 0100 	mov.w	r1, #0
 8003e1a:	0159      	lsls	r1, r3, #5
 8003e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e20:	0150      	lsls	r0, r2, #5
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	ebb2 080a 	subs.w	r8, r2, sl
 8003e2a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e42:	ebb2 0408 	subs.w	r4, r2, r8
 8003e46:	eb63 0509 	sbc.w	r5, r3, r9
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	00eb      	lsls	r3, r5, #3
 8003e54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e58:	00e2      	lsls	r2, r4, #3
 8003e5a:	4614      	mov	r4, r2
 8003e5c:	461d      	mov	r5, r3
 8003e5e:	eb14 030a 	adds.w	r3, r4, sl
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	eb45 030b 	adc.w	r3, r5, fp
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e76:	4629      	mov	r1, r5
 8003e78:	028b      	lsls	r3, r1, #10
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e80:	4621      	mov	r1, r4
 8003e82:	028a      	lsls	r2, r1, #10
 8003e84:	4610      	mov	r0, r2
 8003e86:	4619      	mov	r1, r3
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	60fa      	str	r2, [r7, #12]
 8003e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e94:	f7fc f9f4 	bl	8000280 <__aeabi_uldivmod>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eba:	e002      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ebc:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ebe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3740      	adds	r7, #64	; 0x40
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	00f42400 	.word	0x00f42400
 8003ed8:	017d7840 	.word	0x017d7840

08003edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000000 	.word	0x20000000

08003ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ef8:	f7ff fff0 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8003efc:	4602      	mov	r2, r0
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	0a9b      	lsrs	r3, r3, #10
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4903      	ldr	r1, [pc, #12]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f0a:	5ccb      	ldrb	r3, [r1, r3]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08025074 	.word	0x08025074

08003f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f20:	f7ff ffdc 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	0b5b      	lsrs	r3, r3, #13
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4903      	ldr	r1, [pc, #12]	; (8003f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	08025074 	.word	0x08025074

08003f44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	220f      	movs	r2, #15
 8003f52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f54:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0203 	and.w	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f60:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	08db      	lsrs	r3, r3, #3
 8003f7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f86:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <HAL_RCC_GetClockConfig+0x60>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0207 	and.w	r2, r3, #7
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	601a      	str	r2, [r3, #0]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40023c00 	.word	0x40023c00

08003fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e07b      	b.n	80040b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d108      	bne.n	8003fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fca:	d009      	beq.n	8003fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]
 8003fd2:	e005      	b.n	8003fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd f89a 	bl	8001134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004016:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004064:	ea42 0103 	orr.w	r1, r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	f003 0104 	and.w	r1, r3, #4
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f003 0210 	and.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b088      	sub	sp, #32
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_SPI_Transmit+0x22>
 80040d8:	2302      	movs	r3, #2
 80040da:	e12d      	b.n	8004338 <HAL_SPI_Transmit+0x27e>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040e4:	f7fd fc6e 	bl	80019c4 <HAL_GetTick>
 80040e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d002      	beq.n	8004100 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
 80040fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040fe:	e116      	b.n	800432e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_SPI_Transmit+0x52>
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d102      	bne.n	8004112 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004110:	e10d      	b.n	800432e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2203      	movs	r2, #3
 8004116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	88fa      	ldrh	r2, [r7, #6]
 800412a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004158:	d10f      	bne.n	800417a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004168:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004178:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d007      	beq.n	8004198 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004196:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a0:	d14f      	bne.n	8004242 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <HAL_SPI_Transmit+0xf6>
 80041aa:	8afb      	ldrh	r3, [r7, #22]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d142      	bne.n	8004236 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	881a      	ldrh	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	1c9a      	adds	r2, r3, #2
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041d4:	e02f      	b.n	8004236 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d112      	bne.n	800420a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	881a      	ldrh	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	86da      	strh	r2, [r3, #54]	; 0x36
 8004208:	e015      	b.n	8004236 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420a:	f7fd fbdb 	bl	80019c4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d803      	bhi.n	8004222 <HAL_SPI_Transmit+0x168>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004220:	d102      	bne.n	8004228 <HAL_SPI_Transmit+0x16e>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004234:	e07b      	b.n	800432e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1ca      	bne.n	80041d6 <HAL_SPI_Transmit+0x11c>
 8004240:	e050      	b.n	80042e4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_SPI_Transmit+0x196>
 800424a:	8afb      	ldrh	r3, [r7, #22]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d144      	bne.n	80042da <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	7812      	ldrb	r2, [r2, #0]
 800425c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004276:	e030      	b.n	80042da <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d113      	bne.n	80042ae <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80042ac:	e015      	b.n	80042da <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ae:	f7fd fb89 	bl	80019c4 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d803      	bhi.n	80042c6 <HAL_SPI_Transmit+0x20c>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c4:	d102      	bne.n	80042cc <HAL_SPI_Transmit+0x212>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042d8:	e029      	b.n	800432e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1c9      	bne.n	8004278 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	6839      	ldr	r1, [r7, #0]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fbdf 	bl	8004aac <SPI_EndRxTxTransaction>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e003      	b.n	800432e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004336:	7ffb      	ldrb	r3, [r7, #31]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d002      	beq.n	8004366 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004360:	2302      	movs	r3, #2
 8004362:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004364:	e0fb      	b.n	800455e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800436e:	d112      	bne.n	8004396 <HAL_SPI_Receive+0x56>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10e      	bne.n	8004396 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2204      	movs	r2, #4
 800437c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	4613      	mov	r3, r2
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f8ef 	bl	8004570 <HAL_SPI_TransmitReceive>
 8004392:	4603      	mov	r3, r0
 8004394:	e0e8      	b.n	8004568 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_SPI_Receive+0x64>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e0e1      	b.n	8004568 <HAL_SPI_Receive+0x228>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ac:	f7fd fb0a 	bl	80019c4 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_SPI_Receive+0x7e>
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043c2:	e0cc      	b.n	800455e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2204      	movs	r2, #4
 80043c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440a:	d10f      	bne.n	800442c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800442a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d007      	beq.n	800444a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004448:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d16a      	bne.n	8004528 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004452:	e032      	b.n	80044ba <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b01      	cmp	r3, #1
 8004460:	d115      	bne.n	800448e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f103 020c 	add.w	r2, r3, #12
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	7812      	ldrb	r2, [r2, #0]
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448c:	e015      	b.n	80044ba <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448e:	f7fd fa99 	bl	80019c4 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d803      	bhi.n	80044a6 <HAL_SPI_Receive+0x166>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a4:	d102      	bne.n	80044ac <HAL_SPI_Receive+0x16c>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80044b8:	e051      	b.n	800455e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1c7      	bne.n	8004454 <HAL_SPI_Receive+0x114>
 80044c4:	e035      	b.n	8004532 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d113      	bne.n	80044fc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	b292      	uxth	r2, r2
 80044e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044fa:	e015      	b.n	8004528 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044fc:	f7fd fa62 	bl	80019c4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d803      	bhi.n	8004514 <HAL_SPI_Receive+0x1d4>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004512:	d102      	bne.n	800451a <HAL_SPI_Receive+0x1da>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004526:	e01a      	b.n	800455e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1c9      	bne.n	80044c6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa52 	bl	80049e0 <SPI_EndRxTransaction>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
 8004554:	e003      	b.n	800455e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	; 0x30
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800457e:	2301      	movs	r3, #1
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_SPI_TransmitReceive+0x26>
 8004592:	2302      	movs	r3, #2
 8004594:	e198      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x358>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800459e:	f7fd fa11 	bl	80019c4 <HAL_GetTick>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045b4:	887b      	ldrh	r3, [r7, #2]
 80045b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d00f      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x70>
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c6:	d107      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d103      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x68>
 80045d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d003      	beq.n	80045e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045de:	e16d      	b.n	80048bc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x82>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0x82>
 80045ec:	887b      	ldrh	r3, [r7, #2]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045f8:	e160      	b.n	80048bc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b04      	cmp	r3, #4
 8004604:	d003      	beq.n	800460e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2205      	movs	r2, #5
 800460a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	887a      	ldrh	r2, [r7, #2]
 800461e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	887a      	ldrh	r2, [r7, #2]
 8004630:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	887a      	ldrh	r2, [r7, #2]
 8004636:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d007      	beq.n	8004662 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d17c      	bne.n	8004766 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_SPI_TransmitReceive+0x10a>
 8004674:	8b7b      	ldrh	r3, [r7, #26]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d16a      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	881a      	ldrh	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800469e:	e057      	b.n	8004750 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d11b      	bne.n	80046e6 <HAL_SPI_TransmitReceive+0x176>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d016      	beq.n	80046e6 <HAL_SPI_TransmitReceive+0x176>
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d113      	bne.n	80046e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	881a      	ldrh	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	1c9a      	adds	r2, r3, #2
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d119      	bne.n	8004728 <HAL_SPI_TransmitReceive+0x1b8>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d014      	beq.n	8004728 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	b292      	uxth	r2, r2
 800470a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	1c9a      	adds	r2, r3, #2
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004724:	2301      	movs	r3, #1
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004728:	f7fd f94c 	bl	80019c4 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004734:	429a      	cmp	r2, r3
 8004736:	d80b      	bhi.n	8004750 <HAL_SPI_TransmitReceive+0x1e0>
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800473e:	d007      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800474e:	e0b5      	b.n	80048bc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1a2      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x130>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d19d      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x130>
 8004764:	e080      	b.n	8004868 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_SPI_TransmitReceive+0x204>
 800476e:	8b7b      	ldrh	r3, [r7, #26]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d16f      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	7812      	ldrb	r2, [r2, #0]
 8004780:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479a:	e05b      	b.n	8004854 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d11c      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x274>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d017      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x274>
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d114      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d119      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x2b6>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d014      	beq.n	8004826 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004822:	2301      	movs	r3, #1
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004826:	f7fd f8cd 	bl	80019c4 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004832:	429a      	cmp	r2, r3
 8004834:	d803      	bhi.n	800483e <HAL_SPI_TransmitReceive+0x2ce>
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483c:	d102      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x2d4>
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004852:	e033      	b.n	80048bc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d19e      	bne.n	800479c <HAL_SPI_TransmitReceive+0x22c>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d199      	bne.n	800479c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f91d 	bl	8004aac <SPI_EndRxTxTransaction>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d006      	beq.n	8004886 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004884:	e01a      	b.n	80048bc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b2:	e003      	b.n	80048bc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3730      	adds	r7, #48	; 0x30
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048e0:	f7fd f870 	bl	80019c4 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	4413      	add	r3, r2
 80048ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048f0:	f7fd f868 	bl	80019c4 <HAL_GetTick>
 80048f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048f6:	4b39      	ldr	r3, [pc, #228]	; (80049dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	015b      	lsls	r3, r3, #5
 80048fc:	0d1b      	lsrs	r3, r3, #20
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004906:	e054      	b.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800490e:	d050      	beq.n	80049b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004910:	f7fd f858 	bl	80019c4 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	429a      	cmp	r2, r3
 800491e:	d902      	bls.n	8004926 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d13d      	bne.n	80049a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493e:	d111      	bne.n	8004964 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004948:	d004      	beq.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004952:	d107      	bne.n	8004964 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496c:	d10f      	bne.n	800498e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800498c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e017      	b.n	80049d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4013      	ands	r3, r2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d19b      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000000 	.word	0x20000000

080049e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049f4:	d111      	bne.n	8004a1a <SPI_EndRxTransaction+0x3a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fe:	d004      	beq.n	8004a0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d107      	bne.n	8004a1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a22:	d12a      	bne.n	8004a7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d012      	beq.n	8004a54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2200      	movs	r2, #0
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff ff49 	bl	80048d0 <SPI_WaitFlagStateUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d02d      	beq.n	8004aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	f043 0220 	orr.w	r2, r3, #32
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e026      	b.n	8004aa2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ff36 	bl	80048d0 <SPI_WaitFlagStateUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01a      	beq.n	8004aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e013      	b.n	8004aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2200      	movs	r2, #0
 8004a82:	2101      	movs	r1, #1
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ff23 	bl	80048d0 <SPI_WaitFlagStateUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e000      	b.n	8004aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff ff04 	bl	80048d0 <SPI_WaitFlagStateUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e032      	b.n	8004b44 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ade:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <SPI_EndRxTxTransaction+0xa0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <SPI_EndRxTxTransaction+0xa4>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	0d5b      	lsrs	r3, r3, #21
 8004aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afc:	d112      	bne.n	8004b24 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	2180      	movs	r1, #128	; 0x80
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff fee1 	bl	80048d0 <SPI_WaitFlagStateUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d016      	beq.n	8004b42 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e00f      	b.n	8004b44 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b80      	cmp	r3, #128	; 0x80
 8004b3c:	d0f2      	beq.n	8004b24 <SPI_EndRxTxTransaction+0x78>
 8004b3e:	e000      	b.n	8004b42 <SPI_EndRxTxTransaction+0x96>
        break;
 8004b40:	bf00      	nop
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	165e9f81 	.word	0x165e9f81

08004b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e041      	b.n	8004bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f839 	bl	8004bf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 f9c0 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d001      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e04e      	b.n	8004cbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a23      	ldr	r2, [pc, #140]	; (8004ccc <HAL_TIM_Base_Start_IT+0xc4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d022      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x80>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4a:	d01d      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x80>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d018      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x80>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x80>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x80>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1b      	ldr	r2, [pc, #108]	; (8004cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x80>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x80>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d111      	bne.n	8004cac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d010      	beq.n	8004cbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004caa:	e007      	b.n	8004cbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40010400 	.word	0x40010400
 8004ce0:	40014000 	.word	0x40014000
 8004ce4:	40001800 	.word	0x40001800

08004ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d020      	beq.n	8004d4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01b      	beq.n	8004d4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0202 	mvn.w	r2, #2
 8004d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f8d2 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004d38:	e005      	b.n	8004d46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8c4 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f8d5 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d020      	beq.n	8004d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01b      	beq.n	8004d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0204 	mvn.w	r2, #4
 8004d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8ac 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004d84:	e005      	b.n	8004d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f89e 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f8af 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d020      	beq.n	8004de4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01b      	beq.n	8004de4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0208 	mvn.w	r2, #8
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2204      	movs	r2, #4
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f886 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f878 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f889 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d020      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01b      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0210 	mvn.w	r2, #16
 8004e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2208      	movs	r2, #8
 8004e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f860 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f852 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f863 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0201 	mvn.w	r2, #1
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fb ff7a 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f906 	bl	8005084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00c      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f834 	bl	8004f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0220 	mvn.w	r2, #32
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8d8 	bl	8005070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a46      	ldr	r2, [pc, #280]	; (8005044 <TIM_Base_SetConfig+0x12c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d013      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d00f      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a43      	ldr	r2, [pc, #268]	; (8005048 <TIM_Base_SetConfig+0x130>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a42      	ldr	r2, [pc, #264]	; (800504c <TIM_Base_SetConfig+0x134>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a41      	ldr	r2, [pc, #260]	; (8005050 <TIM_Base_SetConfig+0x138>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a40      	ldr	r2, [pc, #256]	; (8005054 <TIM_Base_SetConfig+0x13c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d108      	bne.n	8004f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a35      	ldr	r2, [pc, #212]	; (8005044 <TIM_Base_SetConfig+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f78:	d027      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a32      	ldr	r2, [pc, #200]	; (8005048 <TIM_Base_SetConfig+0x130>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d023      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a31      	ldr	r2, [pc, #196]	; (800504c <TIM_Base_SetConfig+0x134>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a30      	ldr	r2, [pc, #192]	; (8005050 <TIM_Base_SetConfig+0x138>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2f      	ldr	r2, [pc, #188]	; (8005054 <TIM_Base_SetConfig+0x13c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d017      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2e      	ldr	r2, [pc, #184]	; (8005058 <TIM_Base_SetConfig+0x140>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2d      	ldr	r2, [pc, #180]	; (800505c <TIM_Base_SetConfig+0x144>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2c      	ldr	r2, [pc, #176]	; (8005060 <TIM_Base_SetConfig+0x148>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a2b      	ldr	r2, [pc, #172]	; (8005064 <TIM_Base_SetConfig+0x14c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2a      	ldr	r2, [pc, #168]	; (8005068 <TIM_Base_SetConfig+0x150>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a29      	ldr	r2, [pc, #164]	; (800506c <TIM_Base_SetConfig+0x154>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a10      	ldr	r2, [pc, #64]	; (8005044 <TIM_Base_SetConfig+0x12c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0xf8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <TIM_Base_SetConfig+0x13c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d103      	bne.n	8005018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d105      	bne.n	8005036 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	611a      	str	r2, [r3, #16]
  }
}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40010400 	.word	0x40010400
 8005058:	40014000 	.word	0x40014000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800
 8005064:	40001800 	.word	0x40001800
 8005068:	40001c00 	.word	0x40001c00
 800506c:	40002000 	.word	0x40002000

08005070 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e042      	b.n	8005130 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fc fa78 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2224      	movs	r2, #36	; 0x24
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f82b 	bl	8005138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800513c:	b0c0      	sub	sp, #256	; 0x100
 800513e:	af00      	add	r7, sp, #0
 8005140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005154:	68d9      	ldr	r1, [r3, #12]
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	ea40 0301 	orr.w	r3, r0, r1
 8005160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	431a      	orrs	r2, r3
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	431a      	orrs	r2, r3
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005190:	f021 010c 	bic.w	r1, r1, #12
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800519e:	430b      	orrs	r3, r1
 80051a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b2:	6999      	ldr	r1, [r3, #24]
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	ea40 0301 	orr.w	r3, r0, r1
 80051be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b8f      	ldr	r3, [pc, #572]	; (8005404 <UART_SetConfig+0x2cc>)
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d005      	beq.n	80051d8 <UART_SetConfig+0xa0>
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b8d      	ldr	r3, [pc, #564]	; (8005408 <UART_SetConfig+0x2d0>)
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d104      	bne.n	80051e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051d8:	f7fe fea0 	bl	8003f1c <HAL_RCC_GetPCLK2Freq>
 80051dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051e0:	e003      	b.n	80051ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051e2:	f7fe fe87 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80051e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f4:	f040 810c 	bne.w	8005410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800520a:	4622      	mov	r2, r4
 800520c:	462b      	mov	r3, r5
 800520e:	1891      	adds	r1, r2, r2
 8005210:	65b9      	str	r1, [r7, #88]	; 0x58
 8005212:	415b      	adcs	r3, r3
 8005214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800521a:	4621      	mov	r1, r4
 800521c:	eb12 0801 	adds.w	r8, r2, r1
 8005220:	4629      	mov	r1, r5
 8005222:	eb43 0901 	adc.w	r9, r3, r1
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800523a:	4690      	mov	r8, r2
 800523c:	4699      	mov	r9, r3
 800523e:	4623      	mov	r3, r4
 8005240:	eb18 0303 	adds.w	r3, r8, r3
 8005244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005248:	462b      	mov	r3, r5
 800524a:	eb49 0303 	adc.w	r3, r9, r3
 800524e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800525e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005266:	460b      	mov	r3, r1
 8005268:	18db      	adds	r3, r3, r3
 800526a:	653b      	str	r3, [r7, #80]	; 0x50
 800526c:	4613      	mov	r3, r2
 800526e:	eb42 0303 	adc.w	r3, r2, r3
 8005272:	657b      	str	r3, [r7, #84]	; 0x54
 8005274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800527c:	f7fb f800 	bl	8000280 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4b61      	ldr	r3, [pc, #388]	; (800540c <UART_SetConfig+0x2d4>)
 8005286:	fba3 2302 	umull	r2, r3, r3, r2
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	011c      	lsls	r4, r3, #4
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005292:	2200      	movs	r2, #0
 8005294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800529c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80052a8:	415b      	adcs	r3, r3
 80052aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052b0:	4641      	mov	r1, r8
 80052b2:	eb12 0a01 	adds.w	sl, r2, r1
 80052b6:	4649      	mov	r1, r9
 80052b8:	eb43 0b01 	adc.w	fp, r3, r1
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d0:	4692      	mov	sl, r2
 80052d2:	469b      	mov	fp, r3
 80052d4:	4643      	mov	r3, r8
 80052d6:	eb1a 0303 	adds.w	r3, sl, r3
 80052da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052de:	464b      	mov	r3, r9
 80052e0:	eb4b 0303 	adc.w	r3, fp, r3
 80052e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052fc:	460b      	mov	r3, r1
 80052fe:	18db      	adds	r3, r3, r3
 8005300:	643b      	str	r3, [r7, #64]	; 0x40
 8005302:	4613      	mov	r3, r2
 8005304:	eb42 0303 	adc.w	r3, r2, r3
 8005308:	647b      	str	r3, [r7, #68]	; 0x44
 800530a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800530e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005312:	f7fa ffb5 	bl	8000280 <__aeabi_uldivmod>
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4611      	mov	r1, r2
 800531c:	4b3b      	ldr	r3, [pc, #236]	; (800540c <UART_SetConfig+0x2d4>)
 800531e:	fba3 2301 	umull	r2, r3, r3, r1
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2264      	movs	r2, #100	; 0x64
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	1acb      	subs	r3, r1, r3
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005332:	4b36      	ldr	r3, [pc, #216]	; (800540c <UART_SetConfig+0x2d4>)
 8005334:	fba3 2302 	umull	r2, r3, r3, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005340:	441c      	add	r4, r3
 8005342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005346:	2200      	movs	r2, #0
 8005348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800534c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005354:	4642      	mov	r2, r8
 8005356:	464b      	mov	r3, r9
 8005358:	1891      	adds	r1, r2, r2
 800535a:	63b9      	str	r1, [r7, #56]	; 0x38
 800535c:	415b      	adcs	r3, r3
 800535e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005364:	4641      	mov	r1, r8
 8005366:	1851      	adds	r1, r2, r1
 8005368:	6339      	str	r1, [r7, #48]	; 0x30
 800536a:	4649      	mov	r1, r9
 800536c:	414b      	adcs	r3, r1
 800536e:	637b      	str	r3, [r7, #52]	; 0x34
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800537c:	4659      	mov	r1, fp
 800537e:	00cb      	lsls	r3, r1, #3
 8005380:	4651      	mov	r1, sl
 8005382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005386:	4651      	mov	r1, sl
 8005388:	00ca      	lsls	r2, r1, #3
 800538a:	4610      	mov	r0, r2
 800538c:	4619      	mov	r1, r3
 800538e:	4603      	mov	r3, r0
 8005390:	4642      	mov	r2, r8
 8005392:	189b      	adds	r3, r3, r2
 8005394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005398:	464b      	mov	r3, r9
 800539a:	460a      	mov	r2, r1
 800539c:	eb42 0303 	adc.w	r3, r2, r3
 80053a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053b8:	460b      	mov	r3, r1
 80053ba:	18db      	adds	r3, r3, r3
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053be:	4613      	mov	r3, r2
 80053c0:	eb42 0303 	adc.w	r3, r2, r3
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053ce:	f7fa ff57 	bl	8000280 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <UART_SetConfig+0x2d4>)
 80053d8:	fba3 1302 	umull	r1, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	2164      	movs	r1, #100	; 0x64
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	3332      	adds	r3, #50	; 0x32
 80053ea:	4a08      	ldr	r2, [pc, #32]	; (800540c <UART_SetConfig+0x2d4>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	f003 0207 	and.w	r2, r3, #7
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4422      	add	r2, r4
 80053fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005400:	e106      	b.n	8005610 <UART_SetConfig+0x4d8>
 8005402:	bf00      	nop
 8005404:	40011000 	.word	0x40011000
 8005408:	40011400 	.word	0x40011400
 800540c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005414:	2200      	movs	r2, #0
 8005416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800541a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800541e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005422:	4642      	mov	r2, r8
 8005424:	464b      	mov	r3, r9
 8005426:	1891      	adds	r1, r2, r2
 8005428:	6239      	str	r1, [r7, #32]
 800542a:	415b      	adcs	r3, r3
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
 800542e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005432:	4641      	mov	r1, r8
 8005434:	1854      	adds	r4, r2, r1
 8005436:	4649      	mov	r1, r9
 8005438:	eb43 0501 	adc.w	r5, r3, r1
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	00eb      	lsls	r3, r5, #3
 8005446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800544a:	00e2      	lsls	r2, r4, #3
 800544c:	4614      	mov	r4, r2
 800544e:	461d      	mov	r5, r3
 8005450:	4643      	mov	r3, r8
 8005452:	18e3      	adds	r3, r4, r3
 8005454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005458:	464b      	mov	r3, r9
 800545a:	eb45 0303 	adc.w	r3, r5, r3
 800545e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800546e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800547e:	4629      	mov	r1, r5
 8005480:	008b      	lsls	r3, r1, #2
 8005482:	4621      	mov	r1, r4
 8005484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005488:	4621      	mov	r1, r4
 800548a:	008a      	lsls	r2, r1, #2
 800548c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005490:	f7fa fef6 	bl	8000280 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4b60      	ldr	r3, [pc, #384]	; (800561c <UART_SetConfig+0x4e4>)
 800549a:	fba3 2302 	umull	r2, r3, r3, r2
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	011c      	lsls	r4, r3, #4
 80054a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	61b9      	str	r1, [r7, #24]
 80054bc:	415b      	adcs	r3, r3
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c4:	4641      	mov	r1, r8
 80054c6:	1851      	adds	r1, r2, r1
 80054c8:	6139      	str	r1, [r7, #16]
 80054ca:	4649      	mov	r1, r9
 80054cc:	414b      	adcs	r3, r1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054dc:	4659      	mov	r1, fp
 80054de:	00cb      	lsls	r3, r1, #3
 80054e0:	4651      	mov	r1, sl
 80054e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e6:	4651      	mov	r1, sl
 80054e8:	00ca      	lsls	r2, r1, #3
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	4603      	mov	r3, r0
 80054f0:	4642      	mov	r2, r8
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054f8:	464b      	mov	r3, r9
 80054fa:	460a      	mov	r2, r1
 80054fc:	eb42 0303 	adc.w	r3, r2, r3
 8005500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	67bb      	str	r3, [r7, #120]	; 0x78
 800550e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800551c:	4649      	mov	r1, r9
 800551e:	008b      	lsls	r3, r1, #2
 8005520:	4641      	mov	r1, r8
 8005522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005526:	4641      	mov	r1, r8
 8005528:	008a      	lsls	r2, r1, #2
 800552a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800552e:	f7fa fea7 	bl	8000280 <__aeabi_uldivmod>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4611      	mov	r1, r2
 8005538:	4b38      	ldr	r3, [pc, #224]	; (800561c <UART_SetConfig+0x4e4>)
 800553a:	fba3 2301 	umull	r2, r3, r3, r1
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	2264      	movs	r2, #100	; 0x64
 8005542:	fb02 f303 	mul.w	r3, r2, r3
 8005546:	1acb      	subs	r3, r1, r3
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	3332      	adds	r3, #50	; 0x32
 800554c:	4a33      	ldr	r2, [pc, #204]	; (800561c <UART_SetConfig+0x4e4>)
 800554e:	fba2 2303 	umull	r2, r3, r2, r3
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005558:	441c      	add	r4, r3
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800555e:	2200      	movs	r2, #0
 8005560:	673b      	str	r3, [r7, #112]	; 0x70
 8005562:	677a      	str	r2, [r7, #116]	; 0x74
 8005564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	1891      	adds	r1, r2, r2
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	415b      	adcs	r3, r3
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005578:	4641      	mov	r1, r8
 800557a:	1851      	adds	r1, r2, r1
 800557c:	6039      	str	r1, [r7, #0]
 800557e:	4649      	mov	r1, r9
 8005580:	414b      	adcs	r3, r1
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005590:	4659      	mov	r1, fp
 8005592:	00cb      	lsls	r3, r1, #3
 8005594:	4651      	mov	r1, sl
 8005596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800559a:	4651      	mov	r1, sl
 800559c:	00ca      	lsls	r2, r1, #3
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	4642      	mov	r2, r8
 80055a6:	189b      	adds	r3, r3, r2
 80055a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80055aa:	464b      	mov	r3, r9
 80055ac:	460a      	mov	r2, r1
 80055ae:	eb42 0303 	adc.w	r3, r2, r3
 80055b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	663b      	str	r3, [r7, #96]	; 0x60
 80055be:	667a      	str	r2, [r7, #100]	; 0x64
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055cc:	4649      	mov	r1, r9
 80055ce:	008b      	lsls	r3, r1, #2
 80055d0:	4641      	mov	r1, r8
 80055d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d6:	4641      	mov	r1, r8
 80055d8:	008a      	lsls	r2, r1, #2
 80055da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055de:	f7fa fe4f 	bl	8000280 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <UART_SetConfig+0x4e4>)
 80055e8:	fba3 1302 	umull	r1, r3, r3, r2
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	2164      	movs	r1, #100	; 0x64
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	3332      	adds	r3, #50	; 0x32
 80055fa:	4a08      	ldr	r2, [pc, #32]	; (800561c <UART_SetConfig+0x4e4>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	095b      	lsrs	r3, r3, #5
 8005602:	f003 020f 	and.w	r2, r3, #15
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4422      	add	r2, r4
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005616:	46bd      	mov	sp, r7
 8005618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800561c:	51eb851f 	.word	0x51eb851f

08005620 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005620:	b5b0      	push	{r4, r5, r7, lr}
 8005622:	b08c      	sub	sp, #48	; 0x30
 8005624:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005626:	2100      	movs	r1, #0
 8005628:	2000      	movs	r0, #0
 800562a:	f00b fdf7 	bl	801121c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800562e:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <MX_LWIP_Init+0x78>)
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005634:	4b19      	ldr	r3, [pc, #100]	; (800569c <MX_LWIP_Init+0x7c>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800563a:	4b19      	ldr	r3, [pc, #100]	; (80056a0 <MX_LWIP_Init+0x80>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005640:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <MX_LWIP_Init+0x84>)
 8005642:	9302      	str	r3, [sp, #8]
 8005644:	4b18      	ldr	r3, [pc, #96]	; (80056a8 <MX_LWIP_Init+0x88>)
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	2300      	movs	r3, #0
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <MX_LWIP_Init+0x80>)
 800564e:	4a13      	ldr	r2, [pc, #76]	; (800569c <MX_LWIP_Init+0x7c>)
 8005650:	4911      	ldr	r1, [pc, #68]	; (8005698 <MX_LWIP_Init+0x78>)
 8005652:	4816      	ldr	r0, [pc, #88]	; (80056ac <MX_LWIP_Init+0x8c>)
 8005654:	f00c fbac 	bl	8011db0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005658:	4814      	ldr	r0, [pc, #80]	; (80056ac <MX_LWIP_Init+0x8c>)
 800565a:	f00c fd63 	bl	8012124 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800565e:	4813      	ldr	r0, [pc, #76]	; (80056ac <MX_LWIP_Init+0x8c>)
 8005660:	f00c fd70 	bl	8012144 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005664:	4912      	ldr	r1, [pc, #72]	; (80056b0 <MX_LWIP_Init+0x90>)
 8005666:	4811      	ldr	r0, [pc, #68]	; (80056ac <MX_LWIP_Init+0x8c>)
 8005668:	f00c fe72 	bl	8012350 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 1024);
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <MX_LWIP_Init+0x94>)
 800566e:	1d3c      	adds	r4, r7, #4
 8005670:	461d      	mov	r5, r3
 8005672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800567a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	490a      	ldr	r1, [pc, #40]	; (80056ac <MX_LWIP_Init+0x8c>)
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fd20 	bl	80060c8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005688:	4808      	ldr	r0, [pc, #32]	; (80056ac <MX_LWIP_Init+0x8c>)
 800568a:	f014 ff69 	bl	801a560 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800568e:	bf00      	nop
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bdb0      	pop	{r4, r5, r7, pc}
 8005696:	bf00      	nop
 8005698:	20000688 	.word	0x20000688
 800569c:	2000068c 	.word	0x2000068c
 80056a0:	20000690 	.word	0x20000690
 80056a4:	0801112d 	.word	0x0801112d
 80056a8:	08005b91 	.word	0x08005b91
 80056ac:	20000650 	.word	0x20000650
 80056b0:	080056b9 	.word	0x080056b9
 80056b4:	08020d20 	.word	0x08020d20

080056b8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <HAL_ETH_RxCpltCallback+0x1c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fe71 	bl	80063c0 <osSemaphoreRelease>
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20005160 	.word	0x20005160

080056ec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80056f4:	4b04      	ldr	r3, [pc, #16]	; (8005708 <HAL_ETH_TxCpltCallback+0x1c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fe61 	bl	80063c0 <osSemaphoreRelease>
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20005164 	.word	0x20005164

0800570c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fd f8b1 	bl	800287c <HAL_ETH_GetDMAError>
 800571a:	4603      	mov	r3, r0
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	d104      	bne.n	800572e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005724:	4b04      	ldr	r3, [pc, #16]	; (8005738 <HAL_ETH_ErrorCallback+0x2c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fe49 	bl	80063c0 <osSemaphoreRelease>
  }
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20005160 	.word	0x20005160

0800573c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800573c:	b5b0      	push	{r4, r5, r7, lr}
 800573e:	b0ac      	sub	sp, #176	; 0xb0
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8005756:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800575a:	2264      	movs	r2, #100	; 0x64
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f01a fa06 	bl	801fb70 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005764:	4b90      	ldr	r3, [pc, #576]	; (80059a8 <low_level_init+0x26c>)
 8005766:	4a91      	ldr	r2, [pc, #580]	; (80059ac <low_level_init+0x270>)
 8005768:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0xAE;
 800576a:	23ae      	movs	r3, #174	; 0xae
 800576c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x04;
 8005770:	2304      	movs	r3, #4
 8005772:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x65;
 8005776:	2365      	movs	r3, #101	; 0x65
 8005778:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x11;
 800577c:	2311      	movs	r3, #17
 800577e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xC2;
 8005782:	23c2      	movs	r3, #194	; 0xc2
 8005784:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xD9;
 8005788:	23d9      	movs	r3, #217	; 0xd9
 800578a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800578e:	4a86      	ldr	r2, [pc, #536]	; (80059a8 <low_level_init+0x26c>)
 8005790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005794:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005796:	4b84      	ldr	r3, [pc, #528]	; (80059a8 <low_level_init+0x26c>)
 8005798:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800579c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800579e:	4b82      	ldr	r3, [pc, #520]	; (80059a8 <low_level_init+0x26c>)
 80057a0:	4a83      	ldr	r2, [pc, #524]	; (80059b0 <low_level_init+0x274>)
 80057a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80057a4:	4b80      	ldr	r3, [pc, #512]	; (80059a8 <low_level_init+0x26c>)
 80057a6:	4a83      	ldr	r2, [pc, #524]	; (80059b4 <low_level_init+0x278>)
 80057a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80057aa:	4b7f      	ldr	r3, [pc, #508]	; (80059a8 <low_level_init+0x26c>)
 80057ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80057b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80057b2:	487d      	ldr	r0, [pc, #500]	; (80059a8 <low_level_init+0x26c>)
 80057b4:	f7fc fa18 	bl	8001be8 <HAL_ETH_Init>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80057be:	2238      	movs	r2, #56	; 0x38
 80057c0:	2100      	movs	r1, #0
 80057c2:	487d      	ldr	r0, [pc, #500]	; (80059b8 <low_level_init+0x27c>)
 80057c4:	f01a f9d4 	bl	801fb70 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80057c8:	4b7b      	ldr	r3, [pc, #492]	; (80059b8 <low_level_init+0x27c>)
 80057ca:	2221      	movs	r2, #33	; 0x21
 80057cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80057ce:	4b7a      	ldr	r3, [pc, #488]	; (80059b8 <low_level_init+0x27c>)
 80057d0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80057d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80057d6:	4b78      	ldr	r3, [pc, #480]	; (80059b8 <low_level_init+0x27c>)
 80057d8:	2200      	movs	r2, #0
 80057da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80057dc:	4877      	ldr	r0, [pc, #476]	; (80059bc <low_level_init+0x280>)
 80057de:	f00c f9a1 	bl	8011b24 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2206      	movs	r2, #6
 80057e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80057ea:	4b6f      	ldr	r3, [pc, #444]	; (80059a8 <low_level_init+0x26c>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	781a      	ldrb	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80057f6:	4b6c      	ldr	r3, [pc, #432]	; (80059a8 <low_level_init+0x26c>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	785a      	ldrb	r2, [r3, #1]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005802:	4b69      	ldr	r3, [pc, #420]	; (80059a8 <low_level_init+0x26c>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	789a      	ldrb	r2, [r3, #2]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800580e:	4b66      	ldr	r3, [pc, #408]	; (80059a8 <low_level_init+0x26c>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	78da      	ldrb	r2, [r3, #3]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800581a:	4b63      	ldr	r3, [pc, #396]	; (80059a8 <low_level_init+0x26c>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	791a      	ldrb	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005826:	4b60      	ldr	r3, [pc, #384]	; (80059a8 <low_level_init+0x26c>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	795a      	ldrb	r2, [r3, #5]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005838:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005840:	f043 030a 	orr.w	r3, r3, #10
 8005844:	b2da      	uxtb	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800584c:	2300      	movs	r3, #0
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005850:	2300      	movs	r3, #0
 8005852:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8005854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005858:	2101      	movs	r1, #1
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fd30 	bl	80062c0 <osSemaphoreCreate>
 8005860:	4603      	mov	r3, r0
 8005862:	4a57      	ldr	r2, [pc, #348]	; (80059c0 <low_level_init+0x284>)
 8005864:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8005866:	2300      	movs	r3, #0
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
 800586a:	2300      	movs	r3, #0
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800586e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005872:	2101      	movs	r1, #1
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fd23 	bl	80062c0 <osSemaphoreCreate>
 800587a:	4603      	mov	r3, r0
 800587c:	4a51      	ldr	r2, [pc, #324]	; (80059c4 <low_level_init+0x288>)
 800587e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8005880:	4b4f      	ldr	r3, [pc, #316]	; (80059c0 <low_level_init+0x284>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f000 fd4c 	bl	8006324 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800588c:	4b4d      	ldr	r3, [pc, #308]	; (80059c4 <low_level_init+0x288>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fd46 	bl	8006324 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005898:	4b4b      	ldr	r3, [pc, #300]	; (80059c8 <low_level_init+0x28c>)
 800589a:	f107 0408 	add.w	r4, r7, #8
 800589e:	461d      	mov	r5, r3
 80058a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80058ac:	f107 0308 	add.w	r3, r7, #8
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fc08 	bl	80060c8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80058b8:	4944      	ldr	r1, [pc, #272]	; (80059cc <low_level_init+0x290>)
 80058ba:	4845      	ldr	r0, [pc, #276]	; (80059d0 <low_level_init+0x294>)
 80058bc:	f7fb feeb 	bl	8001696 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80058c0:	4843      	ldr	r0, [pc, #268]	; (80059d0 <low_level_init+0x294>)
 80058c2:	f7fb ff1a 	bl	80016fa <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80058c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d165      	bne.n	800599a <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 80058ce:	4840      	ldr	r0, [pc, #256]	; (80059d0 <low_level_init+0x294>)
 80058d0:	f7fb ffbb 	bl	800184a <DP83848_GetLinkState>
 80058d4:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 80058d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058dc:	2b01      	cmp	r3, #1
 80058de:	dc06      	bgt.n	80058ee <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f00c fd05 	bl	80122f0 <netif_set_link_down>
      netif_set_down(netif);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f00c fc98 	bl	801221c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80058ec:	e057      	b.n	800599e <low_level_init+0x262>
      switch (PHYLinkState)
 80058ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058f2:	3b02      	subs	r3, #2
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d82b      	bhi.n	8005950 <low_level_init+0x214>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <low_level_init+0x1c4>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005911 	.word	0x08005911
 8005904:	08005923 	.word	0x08005923
 8005908:	08005933 	.word	0x08005933
 800590c:	08005943 	.word	0x08005943
        duplex = ETH_FULLDUPLEX_MODE;
 8005910:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8005918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800591c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8005920:	e01f      	b.n	8005962 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8005922:	2300      	movs	r3, #0
 8005924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8005928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800592c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8005930:	e017      	b.n	8005962 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8005932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 800593a:	2300      	movs	r3, #0
 800593c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8005940:	e00f      	b.n	8005962 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8005942:	2300      	movs	r3, #0
 8005944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8005948:	2300      	movs	r3, #0
 800594a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800594e:	e008      	b.n	8005962 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8005950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8005958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800595c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8005960:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005962:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005966:	4619      	mov	r1, r3
 8005968:	480f      	ldr	r0, [pc, #60]	; (80059a8 <low_level_init+0x26c>)
 800596a:	f7fc fe2d 	bl	80025c8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800596e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005972:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8005974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005978:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800597a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800597e:	4619      	mov	r1, r3
 8005980:	4809      	ldr	r0, [pc, #36]	; (80059a8 <low_level_init+0x26c>)
 8005982:	f7fc ff0b 	bl	800279c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005986:	4808      	ldr	r0, [pc, #32]	; (80059a8 <low_level_init+0x26c>)
 8005988:	f7fc f9ac 	bl	8001ce4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f00c fbd9 	bl	8012144 <netif_set_up>
    netif_set_link_up(netif);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f00c fc74 	bl	8012280 <netif_set_link_up>
}
 8005998:	e001      	b.n	800599e <low_level_init+0x262>
    Error_Handler();
 800599a:	f7fb f9e7 	bl	8000d6c <Error_Handler>
}
 800599e:	bf00      	nop
 80059a0:	37b0      	adds	r7, #176	; 0xb0
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bdb0      	pop	{r4, r5, r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20005168 	.word	0x20005168
 80059ac:	40028000 	.word	0x40028000
 80059b0:	200050c0 	.word	0x200050c0
 80059b4:	20005020 	.word	0x20005020
 80059b8:	20005218 	.word	0x20005218
 80059bc:	0802507c 	.word	0x0802507c
 80059c0:	20005160 	.word	0x20005160
 80059c4:	20005164 	.word	0x20005164
 80059c8:	08020d44 	.word	0x08020d44
 80059cc:	2000000c 	.word	0x2000000c
 80059d0:	20005250 	.word	0x20005250

080059d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b092      	sub	sp, #72	; 0x48
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80059ec:	f107 030c 	add.w	r3, r7, #12
 80059f0:	2230      	movs	r2, #48	; 0x30
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f01a f8bb 	bl	801fb70 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80059fa:	f107 030c 	add.w	r3, r7, #12
 80059fe:	2230      	movs	r2, #48	; 0x30
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f01a f8b4 	bl	801fb70 <memset>

  for(q = p; q != NULL; q = q->next)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a0c:	e045      	b.n	8005a9a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d902      	bls.n	8005a1a <low_level_output+0x46>
      return ERR_IF;
 8005a14:	f06f 030b 	mvn.w	r3, #11
 8005a18:	e06c      	b.n	8005af4 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8005a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1c:	6859      	ldr	r1, [r3, #4]
 8005a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a20:	4613      	mov	r3, r2
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	3348      	adds	r3, #72	; 0x48
 8005a2a:	443b      	add	r3, r7
 8005a2c:	3b3c      	subs	r3, #60	; 0x3c
 8005a2e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a32:	895b      	ldrh	r3, [r3, #10]
 8005a34:	4619      	mov	r1, r3
 8005a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a38:	4613      	mov	r3, r2
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	3348      	adds	r3, #72	; 0x48
 8005a42:	443b      	add	r3, r7
 8005a44:	3b38      	subs	r3, #56	; 0x38
 8005a46:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d011      	beq.n	8005a72 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a50:	1e5a      	subs	r2, r3, #1
 8005a52:	f107 000c 	add.w	r0, r7, #12
 8005a56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a58:	460b      	mov	r3, r1
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	440b      	add	r3, r1
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	18c1      	adds	r1, r0, r3
 8005a62:	4613      	mov	r3, r2
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	3348      	adds	r3, #72	; 0x48
 8005a6c:	443b      	add	r3, r7
 8005a6e:	3b34      	subs	r3, #52	; 0x34
 8005a70:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	3348      	adds	r3, #72	; 0x48
 8005a86:	443b      	add	r3, r7
 8005a88:	3b34      	subs	r3, #52	; 0x34
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a90:	3301      	adds	r3, #1
 8005a92:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	643b      	str	r3, [r7, #64]	; 0x40
 8005a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1b6      	bne.n	8005a0e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	891b      	ldrh	r3, [r3, #8]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <low_level_output+0x128>)
 8005aa8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005aaa:	4a14      	ldr	r2, [pc, #80]	; (8005afc <low_level_output+0x128>)
 8005aac:	f107 030c 	add.w	r3, r7, #12
 8005ab0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <low_level_output+0x128>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005ab8:	6838      	ldr	r0, [r7, #0]
 8005aba:	f00d f8d5 	bl	8012c68 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8005abe:	490f      	ldr	r1, [pc, #60]	; (8005afc <low_level_output+0x128>)
 8005ac0:	480f      	ldr	r0, [pc, #60]	; (8005b00 <low_level_output+0x12c>)
 8005ac2:	f7fc fa1c 	bl	8001efe <HAL_ETH_Transmit_IT>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10e      	bne.n	8005aea <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005acc:	bf00      	nop
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <low_level_output+0x130>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fc24 	bl	8006324 <osSemaphoreWait>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f5      	bne.n	8005ace <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8005ae2:	4807      	ldr	r0, [pc, #28]	; (8005b00 <low_level_output+0x12c>)
 8005ae4:	f7fc fbaa 	bl	800223c <HAL_ETH_ReleaseTxPacket>
 8005ae8:	e002      	b.n	8005af0 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8005aea:	6838      	ldr	r0, [r7, #0]
 8005aec:	f00d f816 	bl	8012b1c <pbuf_free>
  }

  return errval;
 8005af0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3748      	adds	r7, #72	; 0x48
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20005218 	.word	0x20005218
 8005b00:	20005168 	.word	0x20005168
 8005b04:	20005164 	.word	0x20005164

08005b08 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005b14:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <low_level_input+0x2c>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005b1c:	f107 030c 	add.w	r3, r7, #12
 8005b20:	4619      	mov	r1, r3
 8005b22:	4805      	ldr	r0, [pc, #20]	; (8005b38 <low_level_input+0x30>)
 8005b24:	f7fc fa47 	bl	8001fb6 <HAL_ETH_ReadData>
  }

  return p;
 8005b28:	68fb      	ldr	r3, [r7, #12]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2000501c 	.word	0x2000501c
 8005b38:	20005168 	.word	0x20005168

08005b3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005b4c:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <ethernetif_input+0x50>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fbe5 	bl	8006324 <osSemaphoreWait>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f5      	bne.n	8005b4c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005b60:	68b8      	ldr	r0, [r7, #8]
 8005b62:	f7ff ffd1 	bl	8005b08 <low_level_input>
 8005b66:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	4798      	blx	r3
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f00c ffcc 	bl	8012b1c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1ea      	bne.n	8005b60 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005b8a:	e7df      	b.n	8005b4c <ethernetif_input+0x10>
 8005b8c:	20005160 	.word	0x20005160

08005b90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <ethernetif_init+0x1c>
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <ethernetif_init+0x48>)
 8005ba0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005ba4:	490d      	ldr	r1, [pc, #52]	; (8005bdc <ethernetif_init+0x4c>)
 8005ba6:	480e      	ldr	r0, [pc, #56]	; (8005be0 <ethernetif_init+0x50>)
 8005ba8:	f019 fe8c 	bl	801f8c4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2273      	movs	r2, #115	; 0x73
 8005bb0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2274      	movs	r2, #116	; 0x74
 8005bb8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <ethernetif_init+0x54>)
 8005bc0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <ethernetif_init+0x58>)
 8005bc6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fdb7 	bl	800573c <low_level_init>

  return ERR_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	08020d60 	.word	0x08020d60
 8005bdc:	08020d7c 	.word	0x08020d7c
 8005be0:	08020d8c 	.word	0x08020d8c
 8005be4:	0801c42d 	.word	0x0801c42d
 8005be8:	080059d5 	.word	0x080059d5

08005bec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005bf8:	68f9      	ldr	r1, [r7, #12]
 8005bfa:	4809      	ldr	r0, [pc, #36]	; (8005c20 <pbuf_free_custom+0x34>)
 8005bfc:	f00c f882 	bl	8011d04 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005c00:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <pbuf_free_custom+0x38>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d107      	bne.n	8005c18 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <pbuf_free_custom+0x38>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <pbuf_free_custom+0x3c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fbd4 	bl	80063c0 <osSemaphoreRelease>
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	0802507c 	.word	0x0802507c
 8005c24:	2000501c 	.word	0x2000501c
 8005c28:	20005160 	.word	0x20005160

08005c2c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005c30:	f7fb fec8 	bl	80019c4 <HAL_GetTick>
 8005c34:	4603      	mov	r3, r0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08e      	sub	sp, #56	; 0x38
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	605a      	str	r2, [r3, #4]
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	60da      	str	r2, [r3, #12]
 8005c52:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a4a      	ldr	r2, [pc, #296]	; (8005d84 <HAL_ETH_MspInit+0x148>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	f040 808d 	bne.w	8005d7a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005c60:	2300      	movs	r3, #0
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	4b48      	ldr	r3, [pc, #288]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	4a47      	ldr	r2, [pc, #284]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c70:	4b45      	ldr	r3, [pc, #276]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	4b41      	ldr	r3, [pc, #260]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	4a40      	ldr	r2, [pc, #256]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005c86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c8c:	4b3e      	ldr	r3, [pc, #248]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c94:	61fb      	str	r3, [r7, #28]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	4b3a      	ldr	r3, [pc, #232]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	4a39      	ldr	r2, [pc, #228]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005ca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ca8:	4b37      	ldr	r3, [pc, #220]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	4b33      	ldr	r3, [pc, #204]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	4a32      	ldr	r2, [pc, #200]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005cbe:	f043 0304 	orr.w	r3, r3, #4
 8005cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005cc4:	4b30      	ldr	r3, [pc, #192]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	4b2c      	ldr	r3, [pc, #176]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	4a2b      	ldr	r2, [pc, #172]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	6313      	str	r3, [r2, #48]	; 0x30
 8005ce0:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	4b25      	ldr	r3, [pc, #148]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005cf6:	f043 0302 	orr.w	r3, r3, #2
 8005cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8005cfc:	4b22      	ldr	r3, [pc, #136]	; (8005d88 <HAL_ETH_MspInit+0x14c>)
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005d08:	2332      	movs	r3, #50	; 0x32
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d14:	2303      	movs	r3, #3
 8005d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d18:	230b      	movs	r3, #11
 8005d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d20:	4619      	mov	r1, r3
 8005d22:	481a      	ldr	r0, [pc, #104]	; (8005d8c <HAL_ETH_MspInit+0x150>)
 8005d24:	f7fd f9bc 	bl	80030a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005d28:	2386      	movs	r3, #134	; 0x86
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d34:	2303      	movs	r3, #3
 8005d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d38:	230b      	movs	r3, #11
 8005d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d40:	4619      	mov	r1, r3
 8005d42:	4813      	ldr	r0, [pc, #76]	; (8005d90 <HAL_ETH_MspInit+0x154>)
 8005d44:	f7fd f9ac 	bl	80030a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005d48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d56:	2303      	movs	r3, #3
 8005d58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005d5a:	230b      	movs	r3, #11
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d62:	4619      	mov	r1, r3
 8005d64:	480b      	ldr	r0, [pc, #44]	; (8005d94 <HAL_ETH_MspInit+0x158>)
 8005d66:	f7fd f99b 	bl	80030a0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2105      	movs	r1, #5
 8005d6e:	203d      	movs	r0, #61	; 0x3d
 8005d70:	f7fb ff10 	bl	8001b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005d74:	203d      	movs	r0, #61	; 0x3d
 8005d76:	f7fb ff29 	bl	8001bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	3738      	adds	r7, #56	; 0x38
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	40028000 	.word	0x40028000
 8005d88:	40023800 	.word	0x40023800
 8005d8c:	40020800 	.word	0x40020800
 8005d90:	40020000 	.word	0x40020000
 8005d94:	40020400 	.word	0x40020400

08005d98 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005d9c:	4802      	ldr	r0, [pc, #8]	; (8005da8 <ETH_PHY_IO_Init+0x10>)
 8005d9e:	f7fc fd17 	bl	80027d0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20005168 	.word	0x20005168

08005dac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  return 0;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	68f9      	ldr	r1, [r7, #12]
 8005dce:	4807      	ldr	r0, [pc, #28]	; (8005dec <ETH_PHY_IO_ReadReg+0x30>)
 8005dd0:	f7fc fb66 	bl	80024a0 <HAL_ETH_ReadPHYRegister>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dde:	e000      	b.n	8005de2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20005168 	.word	0x20005168

08005df0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	68f9      	ldr	r1, [r7, #12]
 8005e02:	4807      	ldr	r0, [pc, #28]	; (8005e20 <ETH_PHY_IO_WriteReg+0x30>)
 8005e04:	f7fc fb97 	bl	8002536 <HAL_ETH_WritePHYRegister>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e12:	e000      	b.n	8005e16 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20005168 	.word	0x20005168

08005e24 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e28:	f7fb fdcc 	bl	80019c4 <HAL_GetTick>
 8005e2c:	4603      	mov	r3, r0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b0a0      	sub	sp, #128	; 0x80
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005e3c:	f107 0308 	add.w	r3, r7, #8
 8005e40:	2264      	movs	r2, #100	; 0x64
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f019 fe93 	bl	801fb70 <memset>
  int32_t PHYLinkState = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e52:	2300      	movs	r3, #0
 8005e54:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e56:	2300      	movs	r3, #0
 8005e58:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005e5e:	483a      	ldr	r0, [pc, #232]	; (8005f48 <ethernet_link_thread+0x114>)
 8005e60:	f7fb fcf3 	bl	800184a <DP83848_GetLinkState>
 8005e64:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00c      	beq.n	8005e92 <ethernet_link_thread+0x5e>
 8005e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	dc09      	bgt.n	8005e92 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005e7e:	4833      	ldr	r0, [pc, #204]	; (8005f4c <ethernet_link_thread+0x118>)
 8005e80:	f7fb ffbe 	bl	8001e00 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005e84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e86:	f00c f9c9 	bl	801221c <netif_set_down>
    netif_set_link_down(netif);
 8005e8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e8c:	f00c fa30 	bl	80122f0 <netif_set_link_down>
 8005e90:	e055      	b.n	8005f3e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8005e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d14e      	bne.n	8005f3e <ethernet_link_thread+0x10a>
 8005ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	dd4b      	ble.n	8005f3e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea8:	3b02      	subs	r3, #2
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d82a      	bhi.n	8005f04 <ethernet_link_thread+0xd0>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <ethernet_link_thread+0x80>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005ed7 	.word	0x08005ed7
 8005ebc:	08005ee7 	.word	0x08005ee7
 8005ec0:	08005ef7 	.word	0x08005ef7
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005ec4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ec8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005eca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ece:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005ed4:	e017      	b.n	8005f06 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ede:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005ee4:	e00f      	b.n	8005f06 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005eea:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005eec:	2300      	movs	r3, #0
 8005eee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005ef4:	e007      	b.n	8005f06 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005efa:	2300      	movs	r3, #0
 8005efc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005efe:	2301      	movs	r3, #1
 8005f00:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005f02:	e000      	b.n	8005f06 <ethernet_link_thread+0xd2>
    default:
      break;
 8005f04:	bf00      	nop
    }

    if(linkchanged)
 8005f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d018      	beq.n	8005f3e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005f0c:	f107 0308 	add.w	r3, r7, #8
 8005f10:	4619      	mov	r1, r3
 8005f12:	480e      	ldr	r0, [pc, #56]	; (8005f4c <ethernet_link_thread+0x118>)
 8005f14:	f7fc fb58 	bl	80025c8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f1a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f1e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005f20:	f107 0308 	add.w	r3, r7, #8
 8005f24:	4619      	mov	r1, r3
 8005f26:	4809      	ldr	r0, [pc, #36]	; (8005f4c <ethernet_link_thread+0x118>)
 8005f28:	f7fc fc38 	bl	800279c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005f2c:	4807      	ldr	r0, [pc, #28]	; (8005f4c <ethernet_link_thread+0x118>)
 8005f2e:	f7fb fed9 	bl	8001ce4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005f32:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f34:	f00c f906 	bl	8012144 <netif_set_up>
      netif_set_link_up(netif);
 8005f38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f3a:	f00c f9a1 	bl	8012280 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005f3e:	2064      	movs	r0, #100	; 0x64
 8005f40:	f000 f90e 	bl	8006160 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005f44:	e78b      	b.n	8005e5e <ethernet_link_thread+0x2a>
 8005f46:	bf00      	nop
 8005f48:	20005250 	.word	0x20005250
 8005f4c:	20005168 	.word	0x20005168

08005f50 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005f58:	4812      	ldr	r0, [pc, #72]	; (8005fa4 <HAL_ETH_RxAllocateCallback+0x54>)
 8005f5a:	f00b fe5f 	bl	8011c1c <memp_malloc_pool>
 8005f5e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d014      	beq.n	8005f90 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f103 0220 	add.w	r2, r3, #32
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4a0d      	ldr	r2, [pc, #52]	; (8005fa8 <HAL_ETH_RxAllocateCallback+0x58>)
 8005f74:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005f7e:	9201      	str	r2, [sp, #4]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2241      	movs	r2, #65	; 0x41
 8005f86:	2100      	movs	r1, #0
 8005f88:	2000      	movs	r0, #0
 8005f8a:	f00c fc0d 	bl	80127a8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005f8e:	e005      	b.n	8005f9c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_ETH_RxAllocateCallback+0x5c>)
 8005f92:	2201      	movs	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	0802507c 	.word	0x0802507c
 8005fa8:	08005bed 	.word	0x08005bed
 8005fac:	2000501c 	.word	0x2000501c

08005fb0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b089      	sub	sp, #36	; 0x24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3b20      	subs	r3, #32
 8005fce:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	887a      	ldrh	r2, [r7, #2]
 8005fe0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e003      	b.n	8005ffa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	61fb      	str	r3, [r7, #28]
 8006006:	e009      	b.n	800601c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	891a      	ldrh	r2, [r3, #8]
 800600c:	887b      	ldrh	r3, [r7, #2]
 800600e:	4413      	add	r3, r2
 8006010:	b29a      	uxth	r2, r3
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f2      	bne.n	8006008 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	3724      	adds	r7, #36	; 0x24
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f00c fd6f 	bl	8012b1c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	4603      	mov	r3, r0
 800604e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006058:	2b84      	cmp	r3, #132	; 0x84
 800605a:	d005      	beq.n	8006068 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800605c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	3303      	adds	r3, #3
 8006066:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006068:	68fb      	ldr	r3, [r7, #12]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800607c:	f3ef 8305 	mrs	r3, IPSR
 8006080:	607b      	str	r3, [r7, #4]
  return(result);
 8006082:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800609e:	f001 fd3b 	bl	8007b18 <vTaskStartScheduler>
  
  return osOK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80060ac:	f7ff ffe3 	bl	8006076 <inHandlerMode>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80060b6:	f001 fe53 	bl	8007d60 <xTaskGetTickCountFromISR>
 80060ba:	4603      	mov	r3, r0
 80060bc:	e002      	b.n	80060c4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80060be:	f001 fe3f 	bl	8007d40 <xTaskGetTickCount>
 80060c2:	4603      	mov	r3, r0
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	b089      	sub	sp, #36	; 0x24
 80060cc:	af04      	add	r7, sp, #16
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d020      	beq.n	800611c <osThreadCreate+0x54>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01c      	beq.n	800611c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685c      	ldr	r4, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691e      	ldr	r6, [r3, #16]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ffa6 	bl	8006046 <makeFreeRtosPriority>
 80060fa:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006104:	9202      	str	r2, [sp, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	9100      	str	r1, [sp, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	4632      	mov	r2, r6
 800610e:	4629      	mov	r1, r5
 8006110:	4620      	mov	r0, r4
 8006112:	f001 fb23 	bl	800775c <xTaskCreateStatic>
 8006116:	4603      	mov	r3, r0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	e01c      	b.n	8006156 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685c      	ldr	r4, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006128:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff ff88 	bl	8006046 <makeFreeRtosPriority>
 8006136:	4602      	mov	r2, r0
 8006138:	f107 030c 	add.w	r3, r7, #12
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	9200      	str	r2, [sp, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	4632      	mov	r2, r6
 8006144:	4629      	mov	r1, r5
 8006146:	4620      	mov	r0, r4
 8006148:	f001 fb65 	bl	8007816 <xTaskCreate>
 800614c:	4603      	mov	r3, r0
 800614e:	2b01      	cmp	r3, #1
 8006150:	d001      	beq.n	8006156 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	e000      	b.n	8006158 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006156:	68fb      	ldr	r3, [r7, #12]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006160 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <osDelay+0x16>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	e000      	b.n	8006178 <osDelay+0x18>
 8006176:	2301      	movs	r3, #1
 8006178:	4618      	mov	r0, r3
 800617a:	f001 fc99 	bl	8007ab0 <vTaskDelay>
  
  return osOK;
 800617e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4619      	mov	r1, r3
 800619e:	2001      	movs	r0, #1
 80061a0:	f000 fc7d 	bl	8006a9e <xQueueCreateMutexStatic>
 80061a4:	4603      	mov	r3, r0
 80061a6:	e003      	b.n	80061b0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80061a8:	2001      	movs	r0, #1
 80061aa:	f000 fc60 	bl	8006a6e <xQueueCreateMutex>
 80061ae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80061c2:	2300      	movs	r3, #0
 80061c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <osMutexWait+0x18>
    return osErrorParameter;
 80061cc:	2380      	movs	r3, #128	; 0x80
 80061ce:	e03a      	b.n	8006246 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061da:	d103      	bne.n	80061e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80061dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	e009      	b.n	80061f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d006      	beq.n	80061f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <osMutexWait+0x40>
      ticks = 1;
 80061f4:	2301      	movs	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80061f8:	f7ff ff3d 	bl	8006076 <inHandlerMode>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d017      	beq.n	8006232 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006202:	f107 0308 	add.w	r3, r7, #8
 8006206:	461a      	mov	r2, r3
 8006208:	2100      	movs	r1, #0
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 f874 	bl	80072f8 <xQueueReceiveFromISR>
 8006210:	4603      	mov	r3, r0
 8006212:	2b01      	cmp	r3, #1
 8006214:	d001      	beq.n	800621a <osMutexWait+0x62>
      return osErrorOS;
 8006216:	23ff      	movs	r3, #255	; 0xff
 8006218:	e015      	b.n	8006246 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d011      	beq.n	8006244 <osMutexWait+0x8c>
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <osMutexWait+0x98>)
 8006222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	e008      	b.n	8006244 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 ff53 	bl	80070e0 <xQueueSemaphoreTake>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d001      	beq.n	8006244 <osMutexWait+0x8c>
    return osErrorOS;
 8006240:	23ff      	movs	r3, #255	; 0xff
 8006242:	e000      	b.n	8006246 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006260:	2300      	movs	r3, #0
 8006262:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006264:	f7ff ff07 	bl	8006076 <inHandlerMode>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d016      	beq.n	800629c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800626e:	f107 0308 	add.w	r3, r7, #8
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fdc6 	bl	8006e06 <xQueueGiveFromISR>
 800627a:	4603      	mov	r3, r0
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <osMutexRelease+0x30>
      return osErrorOS;
 8006280:	23ff      	movs	r3, #255	; 0xff
 8006282:	e017      	b.n	80062b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d013      	beq.n	80062b2 <osMutexRelease+0x5e>
 800628a:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <osMutexRelease+0x68>)
 800628c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	e00a      	b.n	80062b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800629c:	2300      	movs	r3, #0
 800629e:	2200      	movs	r2, #0
 80062a0:	2100      	movs	r1, #0
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fc16 	bl	8006ad4 <xQueueGenericSend>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d001      	beq.n	80062b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80062ae:	23ff      	movs	r3, #255	; 0xff
 80062b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80062b2:	68fb      	ldr	r3, [r7, #12]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	e000ed04 	.word	0xe000ed04

080062c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00f      	beq.n	80062f2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d10a      	bne.n	80062ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	2203      	movs	r2, #3
 80062de:	9200      	str	r2, [sp, #0]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2100      	movs	r1, #0
 80062e4:	2001      	movs	r0, #1
 80062e6:	f000 fad7 	bl	8006898 <xQueueGenericCreateStatic>
 80062ea:	4603      	mov	r3, r0
 80062ec:	e016      	b.n	800631c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e014      	b.n	800631c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d110      	bne.n	800631a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80062f8:	2203      	movs	r2, #3
 80062fa:	2100      	movs	r1, #0
 80062fc:	2001      	movs	r0, #1
 80062fe:	f000 fb43 	bl	8006988 <xQueueGenericCreate>
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <osSemaphoreCreate+0x56>
 800630a:	2300      	movs	r3, #0
 800630c:	2200      	movs	r2, #0
 800630e:	2100      	movs	r1, #0
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fbdf 	bl	8006ad4 <xQueueGenericSend>
      return sema;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	e000      	b.n	800631c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800631a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	e03a      	b.n	80063b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006346:	d103      	bne.n	8006350 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e009      	b.n	8006364 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <osSemaphoreWait+0x40>
      ticks = 1;
 8006360:	2301      	movs	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006364:	f7ff fe87 	bl	8006076 <inHandlerMode>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d017      	beq.n	800639e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800636e:	f107 0308 	add.w	r3, r7, #8
 8006372:	461a      	mov	r2, r3
 8006374:	2100      	movs	r1, #0
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 ffbe 	bl	80072f8 <xQueueReceiveFromISR>
 800637c:	4603      	mov	r3, r0
 800637e:	2b01      	cmp	r3, #1
 8006380:	d001      	beq.n	8006386 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006382:	23ff      	movs	r3, #255	; 0xff
 8006384:	e015      	b.n	80063b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d011      	beq.n	80063b0 <osSemaphoreWait+0x8c>
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <osSemaphoreWait+0x98>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	e008      	b.n	80063b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fe9d 	bl	80070e0 <xQueueSemaphoreTake>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d001      	beq.n	80063b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80063ac:	23ff      	movs	r3, #255	; 0xff
 80063ae:	e000      	b.n	80063b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80063d0:	f7ff fe51 	bl	8006076 <inHandlerMode>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d016      	beq.n	8006408 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80063da:	f107 0308 	add.w	r3, r7, #8
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fd10 	bl	8006e06 <xQueueGiveFromISR>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d001      	beq.n	80063f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80063ec:	23ff      	movs	r3, #255	; 0xff
 80063ee:	e017      	b.n	8006420 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d013      	beq.n	800641e <osSemaphoreRelease+0x5e>
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <osSemaphoreRelease+0x68>)
 80063f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	e00a      	b.n	800641e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006408:	2300      	movs	r3, #0
 800640a:	2200      	movs	r2, #0
 800640c:	2100      	movs	r1, #0
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fb60 	bl	8006ad4 <xQueueGenericSend>
 8006414:	4603      	mov	r3, r0
 8006416:	2b01      	cmp	r3, #1
 8006418:	d001      	beq.n	800641e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800641a:	23ff      	movs	r3, #255	; 0xff
 800641c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800641e:	68fb      	ldr	r3, [r7, #12]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006434:	f7ff fe1f 	bl	8006076 <inHandlerMode>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800643e:	2382      	movs	r3, #130	; 0x82
 8006440:	e003      	b.n	800644a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 f814 	bl	8007470 <vQueueDelete>

  return osOK; 
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006452:	b590      	push	{r4, r7, lr}
 8006454:	b085      	sub	sp, #20
 8006456:	af02      	add	r7, sp, #8
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d011      	beq.n	8006488 <osMessageCreate+0x36>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00d      	beq.n	8006488 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6859      	ldr	r1, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2400      	movs	r4, #0
 800647e:	9400      	str	r4, [sp, #0]
 8006480:	f000 fa0a 	bl	8006898 <xQueueGenericCreateStatic>
 8006484:	4603      	mov	r3, r0
 8006486:	e008      	b.n	800649a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	4619      	mov	r1, r3
 8006494:	f000 fa78 	bl	8006988 <xQueueGenericCreate>
 8006498:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800649a:	4618      	mov	r0, r3
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd90      	pop	{r4, r7, pc}
	...

080064a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80064b0:	2300      	movs	r3, #0
 80064b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <osMessagePut+0x1e>
    ticks = 1;
 80064be:	2301      	movs	r3, #1
 80064c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80064c2:	f7ff fdd8 	bl	8006076 <inHandlerMode>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d018      	beq.n	80064fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80064cc:	f107 0210 	add.w	r2, r7, #16
 80064d0:	f107 0108 	add.w	r1, r7, #8
 80064d4:	2300      	movs	r3, #0
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fbfa 	bl	8006cd0 <xQueueGenericSendFromISR>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d001      	beq.n	80064e6 <osMessagePut+0x42>
      return osErrorOS;
 80064e2:	23ff      	movs	r3, #255	; 0xff
 80064e4:	e018      	b.n	8006518 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d014      	beq.n	8006516 <osMessagePut+0x72>
 80064ec:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <osMessagePut+0x7c>)
 80064ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	e00b      	b.n	8006516 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80064fe:	f107 0108 	add.w	r1, r7, #8
 8006502:	2300      	movs	r3, #0
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fae4 	bl	8006ad4 <xQueueGenericSend>
 800650c:	4603      	mov	r3, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	d001      	beq.n	8006516 <osMessagePut+0x72>
      return osErrorOS;
 8006512:	23ff      	movs	r3, #255	; 0xff
 8006514:	e000      	b.n	8006518 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b08b      	sub	sp, #44	; 0x2c
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	617b      	str	r3, [r7, #20]
    return event;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	461c      	mov	r4, r3
 8006546:	f107 0314 	add.w	r3, r7, #20
 800654a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800654e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006552:	e054      	b.n	80065fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006554:	2300      	movs	r3, #0
 8006556:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006562:	d103      	bne.n	800656c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
 800656a:	e009      	b.n	8006580 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d006      	beq.n	8006580 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <osMessageGet+0x5c>
      ticks = 1;
 800657c:	2301      	movs	r3, #1
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006580:	f7ff fd79 	bl	8006076 <inHandlerMode>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01c      	beq.n	80065c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800658a:	f107 0220 	add.w	r2, r7, #32
 800658e:	f107 0314 	add.w	r3, r7, #20
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	68b8      	ldr	r0, [r7, #8]
 8006598:	f000 feae 	bl	80072f8 <xQueueReceiveFromISR>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d102      	bne.n	80065a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80065a2:	2310      	movs	r3, #16
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e001      	b.n	80065ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01d      	beq.n	80065ee <osMessageGet+0xca>
 80065b2:	4b15      	ldr	r3, [pc, #84]	; (8006608 <osMessageGet+0xe4>)
 80065b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	e014      	b.n	80065ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80065c4:	f107 0314 	add.w	r3, r7, #20
 80065c8:	3304      	adds	r3, #4
 80065ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065cc:	4619      	mov	r1, r3
 80065ce:	68b8      	ldr	r0, [r7, #8]
 80065d0:	f000 fca6 	bl	8006f20 <xQueueReceive>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d102      	bne.n	80065e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80065da:	2310      	movs	r3, #16
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e006      	b.n	80065ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <osMessageGet+0xc6>
 80065e6:	2300      	movs	r3, #0
 80065e8:	e000      	b.n	80065ec <osMessageGet+0xc8>
 80065ea:	2340      	movs	r3, #64	; 0x40
 80065ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	461c      	mov	r4, r3
 80065f2:	f107 0314 	add.w	r3, r7, #20
 80065f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	372c      	adds	r7, #44	; 0x2c
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}
 8006606:	bf00      	nop
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006614:	f7ff fd2f 	bl	8006076 <inHandlerMode>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 ff08 	bl	8007434 <uxQueueMessagesWaitingFromISR>
 8006624:	4603      	mov	r3, r0
 8006626:	e003      	b.n	8006630 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fee5 	bl	80073f8 <uxQueueMessagesWaiting>
 800662e:	4603      	mov	r3, r0
  }
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006640:	f7ff fd19 	bl	8006076 <inHandlerMode>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <osMessageDelete+0x16>
    return osErrorISR;
 800664a:	2382      	movs	r3, #130	; 0x82
 800664c:	e003      	b.n	8006656 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 ff0e 	bl	8007470 <vQueueDelete>

  return osOK; 
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f103 0208 	add.w	r2, r3, #8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006676:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f103 0208 	add.w	r2, r3, #8
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f103 0208 	add.w	r2, r3, #8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	601a      	str	r2, [r3, #0]
}
 80066f4:	bf00      	nop
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006716:	d103      	bne.n	8006720 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	e00c      	b.n	800673a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3308      	adds	r3, #8
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	e002      	b.n	800672e <vListInsert+0x2e>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	429a      	cmp	r2, r3
 8006738:	d2f6      	bcs.n	8006728 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6892      	ldr	r2, [r2, #8]
 8006788:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6852      	ldr	r2, [r2, #4]
 8006792:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	429a      	cmp	r2, r3
 800679c:	d103      	bne.n	80067a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	1e5a      	subs	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10a      	bne.n	80067f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067ee:	bf00      	nop
 80067f0:	e7fe      	b.n	80067f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067f2:	f002 f917 	bl	8008a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	441a      	add	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	3b01      	subs	r3, #1
 8006824:	68f9      	ldr	r1, [r7, #12]
 8006826:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	441a      	add	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	22ff      	movs	r2, #255	; 0xff
 8006836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	22ff      	movs	r2, #255	; 0xff
 800683e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d114      	bne.n	8006872 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01a      	beq.n	8006886 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3310      	adds	r3, #16
 8006854:	4618      	mov	r0, r3
 8006856:	f001 fbd3 	bl	8008000 <xTaskRemoveFromEventList>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d012      	beq.n	8006886 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006860:	4b0c      	ldr	r3, [pc, #48]	; (8006894 <xQueueGenericReset+0xcc>)
 8006862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	e009      	b.n	8006886 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3310      	adds	r3, #16
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fef1 	bl	800665e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3324      	adds	r3, #36	; 0x24
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff feec 	bl	800665e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006886:	f002 f8fd 	bl	8008a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800688a:	2301      	movs	r3, #1
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08e      	sub	sp, #56	; 0x38
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <xQueueGenericCreateStatic+0x52>
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <xQueueGenericCreateStatic+0x56>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <xQueueGenericCreateStatic+0x58>
 80068ee:	2300      	movs	r3, #0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	623b      	str	r3, [r7, #32]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d102      	bne.n	8006916 <xQueueGenericCreateStatic+0x7e>
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <xQueueGenericCreateStatic+0x82>
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <xQueueGenericCreateStatic+0x84>
 800691a:	2300      	movs	r3, #0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	61fb      	str	r3, [r7, #28]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006936:	2348      	movs	r3, #72	; 0x48
 8006938:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b48      	cmp	r3, #72	; 0x48
 800693e:	d00a      	beq.n	8006956 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	61bb      	str	r3, [r7, #24]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006956:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00d      	beq.n	800697e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800696a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	4613      	mov	r3, r2
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f83f 	bl	80069fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006980:	4618      	mov	r0, r3
 8006982:	3730      	adds	r7, #48	; 0x30
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08a      	sub	sp, #40	; 0x28
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	613b      	str	r3, [r7, #16]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	fb02 f303 	mul.w	r3, r2, r3
 80069ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	3348      	adds	r3, #72	; 0x48
 80069c0:	4618      	mov	r0, r3
 80069c2:	f002 f951 	bl	8008c68 <pvPortMalloc>
 80069c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d011      	beq.n	80069f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	3348      	adds	r3, #72	; 0x48
 80069d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069e0:	79fa      	ldrb	r2, [r7, #7]
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	4613      	mov	r3, r2
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f805 	bl	80069fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069f2:	69bb      	ldr	r3, [r7, #24]
	}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3720      	adds	r7, #32
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d103      	bne.n	8006a18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e002      	b.n	8006a1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	69b8      	ldr	r0, [r7, #24]
 8006a2e:	f7ff fecb 	bl	80067c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b082      	sub	sp, #8
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00e      	beq.n	8006a66 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2100      	movs	r1, #0
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f837 	bl	8006ad4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006a66:	bf00      	nop
 8006a68:	3708      	adds	r7, #8
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b086      	sub	sp, #24
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	4603      	mov	r3, r0
 8006a76:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	461a      	mov	r2, r3
 8006a84:	6939      	ldr	r1, [r7, #16]
 8006a86:	6978      	ldr	r0, [r7, #20]
 8006a88:	f7ff ff7e 	bl	8006988 <xQueueGenericCreate>
 8006a8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff ffd3 	bl	8006a3a <prvInitialiseMutex>

		return xNewQueue;
 8006a94:	68fb      	ldr	r3, [r7, #12]
	}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b088      	sub	sp, #32
 8006aa2:	af02      	add	r7, sp, #8
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	6039      	str	r1, [r7, #0]
 8006aa8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	6939      	ldr	r1, [r7, #16]
 8006abc:	6978      	ldr	r0, [r7, #20]
 8006abe:	f7ff feeb 	bl	8006898 <xQueueGenericCreateStatic>
 8006ac2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7ff ffb8 	bl	8006a3a <prvInitialiseMutex>

		return xNewQueue;
 8006aca:	68fb      	ldr	r3, [r7, #12]
	}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08e      	sub	sp, #56	; 0x38
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <xQueueGenericSend+0x32>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <xQueueGenericSend+0x40>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <xQueueGenericSend+0x44>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <xQueueGenericSend+0x46>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <xQueueGenericSend+0x60>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d103      	bne.n	8006b42 <xQueueGenericSend+0x6e>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <xQueueGenericSend+0x72>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <xQueueGenericSend+0x74>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <xQueueGenericSend+0x8e>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	623b      	str	r3, [r7, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b62:	f001 fc0d 	bl	8008380 <xTaskGetSchedulerState>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <xQueueGenericSend+0x9e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <xQueueGenericSend+0xa2>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <xQueueGenericSend+0xa4>
 8006b76:	2300      	movs	r3, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <xQueueGenericSend+0xbe>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	61fb      	str	r3, [r7, #28]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b92:	f001 ff47 	bl	8008a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d302      	bcc.n	8006ba8 <xQueueGenericSend+0xd4>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d129      	bne.n	8006bfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bae:	f000 fc9a 	bl	80074e6 <prvCopyDataToQueue>
 8006bb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d010      	beq.n	8006bde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	3324      	adds	r3, #36	; 0x24
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 fa1d 	bl	8008000 <xTaskRemoveFromEventList>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d013      	beq.n	8006bf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bcc:	4b3f      	ldr	r3, [pc, #252]	; (8006ccc <xQueueGenericSend+0x1f8>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	e00a      	b.n	8006bf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006be4:	4b39      	ldr	r3, [pc, #228]	; (8006ccc <xQueueGenericSend+0x1f8>)
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bf4:	f001 ff46 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e063      	b.n	8006cc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c02:	f001 ff3f 	bl	8008a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e05c      	b.n	8006cc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c10:	f107 0314 	add.w	r3, r7, #20
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 fa55 	bl	80080c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c1e:	f001 ff31 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c22:	f000 ffe3 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c26:	f001 fefd 	bl	8008a24 <vPortEnterCritical>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c30:	b25b      	sxtb	r3, r3
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c36:	d103      	bne.n	8006c40 <xQueueGenericSend+0x16c>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c46:	b25b      	sxtb	r3, r3
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSend+0x182>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c56:	f001 ff15 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c5a:	1d3a      	adds	r2, r7, #4
 8006c5c:	f107 0314 	add.w	r3, r7, #20
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f001 fa44 	bl	80080f0 <xTaskCheckForTimeOut>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d124      	bne.n	8006cb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c70:	f000 fd31 	bl	80076d6 <prvIsQueueFull>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d018      	beq.n	8006cac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	3310      	adds	r3, #16
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 f998 	bl	8007fb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c8a:	f000 fcbc 	bl	8007606 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c8e:	f000 ffbb 	bl	8007c08 <xTaskResumeAll>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f47f af7c 	bne.w	8006b92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <xQueueGenericSend+0x1f8>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	e772      	b.n	8006b92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cae:	f000 fcaa 	bl	8007606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cb2:	f000 ffa9 	bl	8007c08 <xTaskResumeAll>
 8006cb6:	e76c      	b.n	8006b92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cba:	f000 fca4 	bl	8007606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cbe:	f000 ffa3 	bl	8007c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3738      	adds	r7, #56	; 0x38
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b090      	sub	sp, #64	; 0x40
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d103      	bne.n	8006d0c <xQueueGenericSendFromISR+0x3c>
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <xQueueGenericSendFromISR+0x40>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <xQueueGenericSendFromISR+0x42>
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d103      	bne.n	8006d3a <xQueueGenericSendFromISR+0x6a>
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <xQueueGenericSendFromISR+0x6e>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueGenericSendFromISR+0x70>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	623b      	str	r3, [r7, #32]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d5a:	f001 ff45 	bl	8008be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	61fa      	str	r2, [r7, #28]
 8006d74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <xQueueGenericSendFromISR+0xbc>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d12f      	bne.n	8006dec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006da2:	f000 fba0 	bl	80074e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006da6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dae:	d112      	bne.n	8006dd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d016      	beq.n	8006de6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	3324      	adds	r3, #36	; 0x24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 f91f 	bl	8008000 <xTaskRemoveFromEventList>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00e      	beq.n	8006de6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e007      	b.n	8006de6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006dda:	3301      	adds	r3, #1
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	b25a      	sxtb	r2, r3
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006de6:	2301      	movs	r3, #1
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006dea:	e001      	b.n	8006df0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3740      	adds	r7, #64	; 0x40
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b08e      	sub	sp, #56	; 0x38
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	623b      	str	r3, [r7, #32]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	61fb      	str	r3, [r7, #28]
}
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d103      	bne.n	8006e5e <xQueueGiveFromISR+0x58>
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <xQueueGiveFromISR+0x5c>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e000      	b.n	8006e64 <xQueueGiveFromISR+0x5e>
 8006e62:	2300      	movs	r3, #0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	61bb      	str	r3, [r7, #24]
}
 8006e7a:	bf00      	nop
 8006e7c:	e7fe      	b.n	8006e7c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e7e:	f001 feb3 	bl	8008be8 <vPortValidateInterruptPriority>
	__asm volatile
 8006e82:	f3ef 8211 	mrs	r2, BASEPRI
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	617a      	str	r2, [r7, #20]
 8006e98:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006e9a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d22b      	bcs.n	8006f06 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ec0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec8:	d112      	bne.n	8006ef0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d016      	beq.n	8006f00 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	3324      	adds	r3, #36	; 0x24
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 f892 	bl	8008000 <xTaskRemoveFromEventList>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00e      	beq.n	8006f00 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e007      	b.n	8006f00 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	b25a      	sxtb	r2, r3
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f00:	2301      	movs	r3, #1
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
 8006f04:	e001      	b.n	8006f0a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f383 8811 	msr	BASEPRI, r3
}
 8006f14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3738      	adds	r7, #56	; 0x38
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08c      	sub	sp, #48	; 0x30
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10a      	bne.n	8006f50 <xQueueReceive+0x30>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	623b      	str	r3, [r7, #32]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d103      	bne.n	8006f5e <xQueueReceive+0x3e>
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <xQueueReceive+0x42>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <xQueueReceive+0x44>
 8006f62:	2300      	movs	r3, #0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <xQueueReceive+0x5e>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	61fb      	str	r3, [r7, #28]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f7e:	f001 f9ff 	bl	8008380 <xTaskGetSchedulerState>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d102      	bne.n	8006f8e <xQueueReceive+0x6e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <xQueueReceive+0x72>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <xQueueReceive+0x74>
 8006f92:	2300      	movs	r3, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <xQueueReceive+0x8e>
	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	61bb      	str	r3, [r7, #24]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fae:	f001 fd39 	bl	8008a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01f      	beq.n	8006ffe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc2:	f000 fafa 	bl	80075ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	1e5a      	subs	r2, r3, #1
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00f      	beq.n	8006ff6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	3310      	adds	r3, #16
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 f810 	bl	8008000 <xTaskRemoveFromEventList>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fe6:	4b3d      	ldr	r3, [pc, #244]	; (80070dc <xQueueReceive+0x1bc>)
 8006fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ff6:	f001 fd45 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e069      	b.n	80070d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d103      	bne.n	800700c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007004:	f001 fd3e 	bl	8008a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007008:	2300      	movs	r3, #0
 800700a:	e062      	b.n	80070d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d106      	bne.n	8007020 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007012:	f107 0310 	add.w	r3, r7, #16
 8007016:	4618      	mov	r0, r3
 8007018:	f001 f854 	bl	80080c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800701c:	2301      	movs	r3, #1
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007020:	f001 fd30 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007024:	f000 fde2 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007028:	f001 fcfc 	bl	8008a24 <vPortEnterCritical>
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007032:	b25b      	sxtb	r3, r3
 8007034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007038:	d103      	bne.n	8007042 <xQueueReceive+0x122>
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007048:	b25b      	sxtb	r3, r3
 800704a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704e:	d103      	bne.n	8007058 <xQueueReceive+0x138>
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007058:	f001 fd14 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800705c:	1d3a      	adds	r2, r7, #4
 800705e:	f107 0310 	add.w	r3, r7, #16
 8007062:	4611      	mov	r1, r2
 8007064:	4618      	mov	r0, r3
 8007066:	f001 f843 	bl	80080f0 <xTaskCheckForTimeOut>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d123      	bne.n	80070b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007072:	f000 fb1a 	bl	80076aa <prvIsQueueEmpty>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d017      	beq.n	80070ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	3324      	adds	r3, #36	; 0x24
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f000 ff97 	bl	8007fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800708a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708c:	f000 fabb 	bl	8007606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007090:	f000 fdba 	bl	8007c08 <xTaskResumeAll>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d189      	bne.n	8006fae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800709a:	4b10      	ldr	r3, [pc, #64]	; (80070dc <xQueueReceive+0x1bc>)
 800709c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	e780      	b.n	8006fae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ae:	f000 faaa 	bl	8007606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070b2:	f000 fda9 	bl	8007c08 <xTaskResumeAll>
 80070b6:	e77a      	b.n	8006fae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ba:	f000 faa4 	bl	8007606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070be:	f000 fda3 	bl	8007c08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070c4:	f000 faf1 	bl	80076aa <prvIsQueueEmpty>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f43f af6f 	beq.w	8006fae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3730      	adds	r7, #48	; 0x30
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	e000ed04 	.word	0xe000ed04

080070e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08e      	sub	sp, #56	; 0x38
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	623b      	str	r3, [r7, #32]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	61fb      	str	r3, [r7, #28]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007130:	f001 f926 	bl	8008380 <xTaskGetSchedulerState>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <xQueueSemaphoreTake+0x60>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <xQueueSemaphoreTake+0x64>
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <xQueueSemaphoreTake+0x66>
 8007144:	2300      	movs	r3, #0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10a      	bne.n	8007160 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	61bb      	str	r3, [r7, #24]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007160:	f001 fc60 	bl	8008a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	2b00      	cmp	r3, #0
 800716e:	d024      	beq.n	80071ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	1e5a      	subs	r2, r3, #1
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007180:	f001 faa6 	bl	80086d0 <pvTaskIncrementMutexHeldCount>
 8007184:	4602      	mov	r2, r0
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00f      	beq.n	80071b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	3310      	adds	r3, #16
 8007196:	4618      	mov	r0, r3
 8007198:	f000 ff32 	bl	8008000 <xTaskRemoveFromEventList>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d007      	beq.n	80071b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071a2:	4b54      	ldr	r3, [pc, #336]	; (80072f4 <xQueueSemaphoreTake+0x214>)
 80071a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071b2:	f001 fc67 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e097      	b.n	80072ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d111      	bne.n	80071e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	617b      	str	r3, [r7, #20]
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80071dc:	f001 fc52 	bl	8008a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071e0:	2300      	movs	r3, #0
 80071e2:	e082      	b.n	80072ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d106      	bne.n	80071f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071ea:	f107 030c 	add.w	r3, r7, #12
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 ff68 	bl	80080c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071f8:	f001 fc44 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071fc:	f000 fcf6 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007200:	f001 fc10 	bl	8008a24 <vPortEnterCritical>
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800720a:	b25b      	sxtb	r3, r3
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007210:	d103      	bne.n	800721a <xQueueSemaphoreTake+0x13a>
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007220:	b25b      	sxtb	r3, r3
 8007222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007226:	d103      	bne.n	8007230 <xQueueSemaphoreTake+0x150>
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007230:	f001 fc28 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007234:	463a      	mov	r2, r7
 8007236:	f107 030c 	add.w	r3, r7, #12
 800723a:	4611      	mov	r1, r2
 800723c:	4618      	mov	r0, r3
 800723e:	f000 ff57 	bl	80080f0 <xTaskCheckForTimeOut>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d132      	bne.n	80072ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800724a:	f000 fa2e 	bl	80076aa <prvIsQueueEmpty>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d026      	beq.n	80072a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800725c:	f001 fbe2 	bl	8008a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	4618      	mov	r0, r3
 8007266:	f001 f8a9 	bl	80083bc <xTaskPriorityInherit>
 800726a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800726c:	f001 fc0a 	bl	8008a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	3324      	adds	r3, #36	; 0x24
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	4611      	mov	r1, r2
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fe9d 	bl	8007fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800727e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007280:	f000 f9c1 	bl	8007606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007284:	f000 fcc0 	bl	8007c08 <xTaskResumeAll>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	f47f af68 	bne.w	8007160 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007290:	4b18      	ldr	r3, [pc, #96]	; (80072f4 <xQueueSemaphoreTake+0x214>)
 8007292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	e75e      	b.n	8007160 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80072a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072a4:	f000 f9af 	bl	8007606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072a8:	f000 fcae 	bl	8007c08 <xTaskResumeAll>
 80072ac:	e758      	b.n	8007160 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b0:	f000 f9a9 	bl	8007606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072b4:	f000 fca8 	bl	8007c08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ba:	f000 f9f6 	bl	80076aa <prvIsQueueEmpty>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f43f af4d 	beq.w	8007160 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00d      	beq.n	80072e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80072cc:	f001 fbaa 	bl	8008a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80072d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072d2:	f000 f8f0 	bl	80074b6 <prvGetDisinheritPriorityAfterTimeout>
 80072d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 f968 	bl	80085b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80072e4:	f001 fbce 	bl	8008a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3738      	adds	r7, #56	; 0x38
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08e      	sub	sp, #56	; 0x38
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	623b      	str	r3, [r7, #32]
}
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <xQueueReceiveFromISR+0x3a>
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <xQueueReceiveFromISR+0x3e>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <xQueueReceiveFromISR+0x40>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	61fb      	str	r3, [r7, #28]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007352:	f001 fc49 	bl	8008be8 <vPortValidateInterruptPriority>
	__asm volatile
 8007356:	f3ef 8211 	mrs	r2, BASEPRI
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	61ba      	str	r2, [r7, #24]
 800736c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800736e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	2b00      	cmp	r3, #0
 800737c:	d02f      	beq.n	80073de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800738c:	f000 f915 	bl	80075ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	1e5a      	subs	r2, r3, #1
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073a0:	d112      	bne.n	80073c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d016      	beq.n	80073d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	3310      	adds	r3, #16
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fe26 	bl	8008000 <xTaskRemoveFromEventList>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00e      	beq.n	80073d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e007      	b.n	80073d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80073c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073cc:	3301      	adds	r3, #1
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	b25a      	sxtb	r2, r3
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80073d8:	2301      	movs	r3, #1
 80073da:	637b      	str	r3, [r7, #52]	; 0x34
 80073dc:	e001      	b.n	80073e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80073de:	2300      	movs	r3, #0
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f383 8811 	msr	BASEPRI, r3
}
 80073ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3738      	adds	r7, #56	; 0x38
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60bb      	str	r3, [r7, #8]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800741c:	f001 fb02 	bl	8008a24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007426:	f001 fb2d 	bl	8008a84 <vPortExitCritical>

	return uxReturn;
 800742a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60fb      	str	r3, [r7, #12]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007462:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007464:	4618      	mov	r0, r3
 8007466:	371c      	adds	r7, #28
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <vQueueDelete+0x28>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	60bb      	str	r3, [r7, #8]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f935 	bl	8007708 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f001 fca9 	bl	8008e00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d006      	beq.n	80074d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f1c3 0307 	rsb	r3, r3, #7
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e001      	b.n	80074d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074d8:	68fb      	ldr	r3, [r7, #12]
	}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b086      	sub	sp, #24
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10d      	bne.n	8007520 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d14d      	bne.n	80075a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	4618      	mov	r0, r3
 8007512:	f000 ffc9 	bl	80084a8 <xTaskPriorityDisinherit>
 8007516:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	609a      	str	r2, [r3, #8]
 800751e:	e043      	b.n	80075a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d119      	bne.n	800755a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6858      	ldr	r0, [r3, #4]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	461a      	mov	r2, r3
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	f018 fc2c 	bl	801fd8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	441a      	add	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	429a      	cmp	r2, r3
 800754e:	d32b      	bcc.n	80075a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	605a      	str	r2, [r3, #4]
 8007558:	e026      	b.n	80075a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	68d8      	ldr	r0, [r3, #12]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	461a      	mov	r2, r3
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	f018 fc12 	bl	801fd8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	425b      	negs	r3, r3
 8007574:	441a      	add	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d207      	bcs.n	8007596 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	425b      	negs	r3, r3
 8007590:	441a      	add	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b02      	cmp	r3, #2
 800759a:	d105      	bne.n	80075a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075b0:	697b      	ldr	r3, [r7, #20]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d018      	beq.n	80075fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	441a      	add	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d303      	bcc.n	80075ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68d9      	ldr	r1, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	461a      	mov	r2, r3
 80075f8:	6838      	ldr	r0, [r7, #0]
 80075fa:	f018 fbc8 	bl	801fd8e <memcpy>
	}
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800760e:	f001 fa09 	bl	8008a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007618:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800761a:	e011      	b.n	8007640 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d012      	beq.n	800764a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3324      	adds	r3, #36	; 0x24
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fce9 	bl	8008000 <xTaskRemoveFromEventList>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007634:	f000 fdbe 	bl	80081b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	3b01      	subs	r3, #1
 800763c:	b2db      	uxtb	r3, r3
 800763e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007644:	2b00      	cmp	r3, #0
 8007646:	dce9      	bgt.n	800761c <prvUnlockQueue+0x16>
 8007648:	e000      	b.n	800764c <prvUnlockQueue+0x46>
					break;
 800764a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	22ff      	movs	r2, #255	; 0xff
 8007650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007654:	f001 fa16 	bl	8008a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007658:	f001 f9e4 	bl	8008a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007662:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007664:	e011      	b.n	800768a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d012      	beq.n	8007694 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3310      	adds	r3, #16
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fcc4 	bl	8008000 <xTaskRemoveFromEventList>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800767e:	f000 fd99 	bl	80081b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	3b01      	subs	r3, #1
 8007686:	b2db      	uxtb	r3, r3
 8007688:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800768a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800768e:	2b00      	cmp	r3, #0
 8007690:	dce9      	bgt.n	8007666 <prvUnlockQueue+0x60>
 8007692:	e000      	b.n	8007696 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007694:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	22ff      	movs	r2, #255	; 0xff
 800769a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800769e:	f001 f9f1 	bl	8008a84 <vPortExitCritical>
}
 80076a2:	bf00      	nop
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076b2:	f001 f9b7 	bl	8008a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076be:	2301      	movs	r3, #1
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	e001      	b.n	80076c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076c8:	f001 f9dc 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 80076cc:	68fb      	ldr	r3, [r7, #12]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076de:	f001 f9a1 	bl	8008a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d102      	bne.n	80076f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	e001      	b.n	80076f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076f8:	f001 f9c4 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 80076fc:	68fb      	ldr	r3, [r7, #12]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e016      	b.n	8007744 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007716:	4a10      	ldr	r2, [pc, #64]	; (8007758 <vQueueUnregisterQueue+0x50>)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	4413      	add	r3, r2
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	429a      	cmp	r2, r3
 8007724:	d10b      	bne.n	800773e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007726:	4a0c      	ldr	r2, [pc, #48]	; (8007758 <vQueueUnregisterQueue+0x50>)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2100      	movs	r1, #0
 800772c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007730:	4a09      	ldr	r2, [pc, #36]	; (8007758 <vQueueUnregisterQueue+0x50>)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	4413      	add	r3, r2
 8007738:	2200      	movs	r2, #0
 800773a:	605a      	str	r2, [r3, #4]
				break;
 800773c:	e006      	b.n	800774c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3301      	adds	r3, #1
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b07      	cmp	r3, #7
 8007748:	d9e5      	bls.n	8007716 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	20005270 	.word	0x20005270

0800775c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08e      	sub	sp, #56	; 0x38
 8007760:	af04      	add	r7, sp, #16
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800776a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10a      	bne.n	8007786 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	623b      	str	r3, [r7, #32]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	61fb      	str	r3, [r7, #28]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077a2:	23a0      	movs	r3, #160	; 0xa0
 80077a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2ba0      	cmp	r3, #160	; 0xa0
 80077aa:	d00a      	beq.n	80077c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	61bb      	str	r3, [r7, #24]
}
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01e      	beq.n	8007808 <xTaskCreateStatic+0xac>
 80077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01b      	beq.n	8007808 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	2202      	movs	r2, #2
 80077de:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077e2:	2300      	movs	r3, #0
 80077e4:	9303      	str	r3, [sp, #12]
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	9302      	str	r3, [sp, #8]
 80077ea:	f107 0314 	add.w	r3, r7, #20
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f850 	bl	80078a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007802:	f000 f8eb 	bl	80079dc <prvAddNewTaskToReadyList>
 8007806:	e001      	b.n	800780c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800780c:	697b      	ldr	r3, [r7, #20]
	}
 800780e:	4618      	mov	r0, r3
 8007810:	3728      	adds	r7, #40	; 0x28
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007816:	b580      	push	{r7, lr}
 8007818:	b08c      	sub	sp, #48	; 0x30
 800781a:	af04      	add	r7, sp, #16
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	4613      	mov	r3, r2
 8007824:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4618      	mov	r0, r3
 800782c:	f001 fa1c 	bl	8008c68 <pvPortMalloc>
 8007830:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00e      	beq.n	8007856 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007838:	20a0      	movs	r0, #160	; 0xa0
 800783a:	f001 fa15 	bl	8008c68 <pvPortMalloc>
 800783e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	631a      	str	r2, [r3, #48]	; 0x30
 800784c:	e005      	b.n	800785a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800784e:	6978      	ldr	r0, [r7, #20]
 8007850:	f001 fad6 	bl	8008e00 <vPortFree>
 8007854:	e001      	b.n	800785a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d017      	beq.n	8007890 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007868:	88fa      	ldrh	r2, [r7, #6]
 800786a:	2300      	movs	r3, #0
 800786c:	9303      	str	r3, [sp, #12]
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	9302      	str	r3, [sp, #8]
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f80e 	bl	80078a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007884:	69f8      	ldr	r0, [r7, #28]
 8007886:	f000 f8a9 	bl	80079dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800788a:	2301      	movs	r3, #1
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	e002      	b.n	8007896 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007894:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007896:	69bb      	ldr	r3, [r7, #24]
	}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078b8:	3b01      	subs	r3, #1
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f023 0307 	bic.w	r3, r3, #7
 80078c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	617b      	str	r3, [r7, #20]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01f      	beq.n	800792e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078ee:	2300      	movs	r3, #0
 80078f0:	61fb      	str	r3, [r7, #28]
 80078f2:	e012      	b.n	800791a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	7819      	ldrb	r1, [r3, #0]
 80078fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	4413      	add	r3, r2
 8007902:	3334      	adds	r3, #52	; 0x34
 8007904:	460a      	mov	r2, r1
 8007906:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d006      	beq.n	8007922 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	3301      	adds	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	2b0f      	cmp	r3, #15
 800791e:	d9e9      	bls.n	80078f4 <prvInitialiseNewTask+0x54>
 8007920:	e000      	b.n	8007924 <prvInitialiseNewTask+0x84>
			{
				break;
 8007922:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800792c:	e003      	b.n	8007936 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	2b06      	cmp	r3, #6
 800793a:	d901      	bls.n	8007940 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800793c:	2306      	movs	r3, #6
 800793e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007944:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800794a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	2200      	movs	r2, #0
 8007950:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	3304      	adds	r3, #4
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fea1 	bl	800669e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	3318      	adds	r3, #24
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe fe9c 	bl	800669e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	f1c3 0207 	rsb	r2, r3, #7
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800797a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	2200      	movs	r2, #0
 8007980:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	2200      	movs	r2, #0
 8007988:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	334c      	adds	r3, #76	; 0x4c
 8007990:	224c      	movs	r2, #76	; 0x4c
 8007992:	2100      	movs	r1, #0
 8007994:	4618      	mov	r0, r3
 8007996:	f018 f8eb 	bl	801fb70 <memset>
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	4a0c      	ldr	r2, [pc, #48]	; (80079d0 <prvInitialiseNewTask+0x130>)
 800799e:	651a      	str	r2, [r3, #80]	; 0x50
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	4a0c      	ldr	r2, [pc, #48]	; (80079d4 <prvInitialiseNewTask+0x134>)
 80079a4:	655a      	str	r2, [r3, #84]	; 0x54
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	4a0b      	ldr	r2, [pc, #44]	; (80079d8 <prvInitialiseNewTask+0x138>)
 80079aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	69b8      	ldr	r0, [r7, #24]
 80079b2:	f000 ff07 	bl	80087c4 <pxPortInitialiseStack>
 80079b6:	4602      	mov	r2, r0
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079c8:	bf00      	nop
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20010808 	.word	0x20010808
 80079d4:	20010870 	.word	0x20010870
 80079d8:	200108d8 	.word	0x200108d8

080079dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079e4:	f001 f81e 	bl	8008a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079e8:	4b2a      	ldr	r3, [pc, #168]	; (8007a94 <prvAddNewTaskToReadyList+0xb8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3301      	adds	r3, #1
 80079ee:	4a29      	ldr	r2, [pc, #164]	; (8007a94 <prvAddNewTaskToReadyList+0xb8>)
 80079f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079f2:	4b29      	ldr	r3, [pc, #164]	; (8007a98 <prvAddNewTaskToReadyList+0xbc>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d109      	bne.n	8007a0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079fa:	4a27      	ldr	r2, [pc, #156]	; (8007a98 <prvAddNewTaskToReadyList+0xbc>)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a00:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <prvAddNewTaskToReadyList+0xb8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d110      	bne.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a08:	f000 fbf8 	bl	80081fc <prvInitialiseTaskLists>
 8007a0c:	e00d      	b.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a0e:	4b23      	ldr	r3, [pc, #140]	; (8007a9c <prvAddNewTaskToReadyList+0xc0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d109      	bne.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a16:	4b20      	ldr	r3, [pc, #128]	; (8007a98 <prvAddNewTaskToReadyList+0xbc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d802      	bhi.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a24:	4a1c      	ldr	r2, [pc, #112]	; (8007a98 <prvAddNewTaskToReadyList+0xbc>)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a2a:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <prvAddNewTaskToReadyList+0xc4>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	4a1b      	ldr	r2, [pc, #108]	; (8007aa0 <prvAddNewTaskToReadyList+0xc4>)
 8007a32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	2201      	movs	r2, #1
 8007a3a:	409a      	lsls	r2, r3
 8007a3c:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	4a18      	ldr	r2, [pc, #96]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4a15      	ldr	r2, [pc, #84]	; (8007aa8 <prvAddNewTaskToReadyList+0xcc>)
 8007a54:	441a      	add	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	f7fe fe2b 	bl	80066b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a62:	f001 f80f 	bl	8008a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a66:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <prvAddNewTaskToReadyList+0xc0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00e      	beq.n	8007a8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <prvAddNewTaskToReadyList+0xbc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d207      	bcs.n	8007a8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <prvAddNewTaskToReadyList+0xd0>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	200053b0 	.word	0x200053b0
 8007a98:	200052b0 	.word	0x200052b0
 8007a9c:	200053bc 	.word	0x200053bc
 8007aa0:	200053cc 	.word	0x200053cc
 8007aa4:	200053b8 	.word	0x200053b8
 8007aa8:	200052b4 	.word	0x200052b4
 8007aac:	e000ed04 	.word	0xe000ed04

08007ab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d017      	beq.n	8007af2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ac2:	4b13      	ldr	r3, [pc, #76]	; (8007b10 <vTaskDelay+0x60>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <vTaskDelay+0x30>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	60bb      	str	r3, [r7, #8]
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ae0:	f000 f884 	bl	8007bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fe06 	bl	80086f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007aec:	f000 f88c 	bl	8007c08 <xTaskResumeAll>
 8007af0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d107      	bne.n	8007b08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007af8:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <vTaskDelay+0x64>)
 8007afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b08:	bf00      	nop
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	200053d8 	.word	0x200053d8
 8007b14:	e000ed04 	.word	0xe000ed04

08007b18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	; 0x28
 8007b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b26:	463a      	mov	r2, r7
 8007b28:	1d39      	adds	r1, r7, #4
 8007b2a:	f107 0308 	add.w	r3, r7, #8
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7f8 fdb8 	bl	80006a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	9202      	str	r2, [sp, #8]
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	2300      	movs	r3, #0
 8007b44:	460a      	mov	r2, r1
 8007b46:	4921      	ldr	r1, [pc, #132]	; (8007bcc <vTaskStartScheduler+0xb4>)
 8007b48:	4821      	ldr	r0, [pc, #132]	; (8007bd0 <vTaskStartScheduler+0xb8>)
 8007b4a:	f7ff fe07 	bl	800775c <xTaskCreateStatic>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4a20      	ldr	r2, [pc, #128]	; (8007bd4 <vTaskStartScheduler+0xbc>)
 8007b52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b54:	4b1f      	ldr	r3, [pc, #124]	; (8007bd4 <vTaskStartScheduler+0xbc>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	e001      	b.n	8007b66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d11b      	bne.n	8007ba4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	613b      	str	r3, [r7, #16]
}
 8007b7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b80:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <vTaskStartScheduler+0xc0>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	334c      	adds	r3, #76	; 0x4c
 8007b86:	4a15      	ldr	r2, [pc, #84]	; (8007bdc <vTaskStartScheduler+0xc4>)
 8007b88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b8a:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <vTaskStartScheduler+0xc8>)
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b92:	4b14      	ldr	r3, [pc, #80]	; (8007be4 <vTaskStartScheduler+0xcc>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b98:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <vTaskStartScheduler+0xd0>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b9e:	f000 fe9f 	bl	80088e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ba2:	e00e      	b.n	8007bc2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007baa:	d10a      	bne.n	8007bc2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	60fb      	str	r3, [r7, #12]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <vTaskStartScheduler+0xa8>
}
 8007bc2:	bf00      	nop
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	08020db4 	.word	0x08020db4
 8007bd0:	080081cd 	.word	0x080081cd
 8007bd4:	200053d4 	.word	0x200053d4
 8007bd8:	200052b0 	.word	0x200052b0
 8007bdc:	2000008c 	.word	0x2000008c
 8007be0:	200053d0 	.word	0x200053d0
 8007be4:	200053bc 	.word	0x200053bc
 8007be8:	200053b4 	.word	0x200053b4

08007bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bf0:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <vTaskSuspendAll+0x18>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a03      	ldr	r2, [pc, #12]	; (8007c04 <vTaskSuspendAll+0x18>)
 8007bf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007bfa:	bf00      	nop
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	200053d8 	.word	0x200053d8

08007c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c16:	4b41      	ldr	r3, [pc, #260]	; (8007d1c <xTaskResumeAll+0x114>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <xTaskResumeAll+0x2c>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	603b      	str	r3, [r7, #0]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c34:	f000 fef6 	bl	8008a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c38:	4b38      	ldr	r3, [pc, #224]	; (8007d1c <xTaskResumeAll+0x114>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	4a37      	ldr	r2, [pc, #220]	; (8007d1c <xTaskResumeAll+0x114>)
 8007c40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c42:	4b36      	ldr	r3, [pc, #216]	; (8007d1c <xTaskResumeAll+0x114>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d161      	bne.n	8007d0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c4a:	4b35      	ldr	r3, [pc, #212]	; (8007d20 <xTaskResumeAll+0x118>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d05d      	beq.n	8007d0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c52:	e02e      	b.n	8007cb2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c54:	4b33      	ldr	r3, [pc, #204]	; (8007d24 <xTaskResumeAll+0x11c>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3318      	adds	r3, #24
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fd86 	bl	8006772 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fd81 	bl	8006772 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	2201      	movs	r2, #1
 8007c76:	409a      	lsls	r2, r3
 8007c78:	4b2b      	ldr	r3, [pc, #172]	; (8007d28 <xTaskResumeAll+0x120>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	4a2a      	ldr	r2, [pc, #168]	; (8007d28 <xTaskResumeAll+0x120>)
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	4613      	mov	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4a27      	ldr	r2, [pc, #156]	; (8007d2c <xTaskResumeAll+0x124>)
 8007c90:	441a      	add	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3304      	adds	r3, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	4610      	mov	r0, r2
 8007c9a:	f7fe fd0d 	bl	80066b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca2:	4b23      	ldr	r3, [pc, #140]	; (8007d30 <xTaskResumeAll+0x128>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d302      	bcc.n	8007cb2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007cac:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <xTaskResumeAll+0x12c>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <xTaskResumeAll+0x11c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1cc      	bne.n	8007c54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cc0:	f000 fb3e 	bl	8008340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007cc4:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <xTaskResumeAll+0x130>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d010      	beq.n	8007cf2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cd0:	f000 f858 	bl	8007d84 <xTaskIncrementTick>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007cda:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <xTaskResumeAll+0x12c>)
 8007cdc:	2201      	movs	r2, #1
 8007cde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f1      	bne.n	8007cd0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007cec:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <xTaskResumeAll+0x130>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cf2:	4b10      	ldr	r3, [pc, #64]	; (8007d34 <xTaskResumeAll+0x12c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <xTaskResumeAll+0x134>)
 8007d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d0e:	f000 feb9 	bl	8008a84 <vPortExitCritical>

	return xAlreadyYielded;
 8007d12:	68bb      	ldr	r3, [r7, #8]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200053d8 	.word	0x200053d8
 8007d20:	200053b0 	.word	0x200053b0
 8007d24:	20005370 	.word	0x20005370
 8007d28:	200053b8 	.word	0x200053b8
 8007d2c:	200052b4 	.word	0x200052b4
 8007d30:	200052b0 	.word	0x200052b0
 8007d34:	200053c4 	.word	0x200053c4
 8007d38:	200053c0 	.word	0x200053c0
 8007d3c:	e000ed04 	.word	0xe000ed04

08007d40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <xTaskGetTickCount+0x1c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d4c:	687b      	ldr	r3, [r7, #4]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	200053b4 	.word	0x200053b4

08007d60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d66:	f000 ff3f 	bl	8008be8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007d6e:	4b04      	ldr	r3, [pc, #16]	; (8007d80 <xTaskGetTickCountFromISR+0x20>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d74:	683b      	ldr	r3, [r7, #0]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	200053b4 	.word	0x200053b4

08007d84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d8e:	4b4e      	ldr	r3, [pc, #312]	; (8007ec8 <xTaskIncrementTick+0x144>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f040 808e 	bne.w	8007eb4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d98:	4b4c      	ldr	r3, [pc, #304]	; (8007ecc <xTaskIncrementTick+0x148>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007da0:	4a4a      	ldr	r2, [pc, #296]	; (8007ecc <xTaskIncrementTick+0x148>)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d120      	bne.n	8007dee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007dac:	4b48      	ldr	r3, [pc, #288]	; (8007ed0 <xTaskIncrementTick+0x14c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00a      	beq.n	8007dcc <xTaskIncrementTick+0x48>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	603b      	str	r3, [r7, #0]
}
 8007dc8:	bf00      	nop
 8007dca:	e7fe      	b.n	8007dca <xTaskIncrementTick+0x46>
 8007dcc:	4b40      	ldr	r3, [pc, #256]	; (8007ed0 <xTaskIncrementTick+0x14c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	4b40      	ldr	r3, [pc, #256]	; (8007ed4 <xTaskIncrementTick+0x150>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a3e      	ldr	r2, [pc, #248]	; (8007ed0 <xTaskIncrementTick+0x14c>)
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	4a3e      	ldr	r2, [pc, #248]	; (8007ed4 <xTaskIncrementTick+0x150>)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	4b3d      	ldr	r3, [pc, #244]	; (8007ed8 <xTaskIncrementTick+0x154>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	4a3c      	ldr	r2, [pc, #240]	; (8007ed8 <xTaskIncrementTick+0x154>)
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	f000 faa9 	bl	8008340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007dee:	4b3b      	ldr	r3, [pc, #236]	; (8007edc <xTaskIncrementTick+0x158>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d348      	bcc.n	8007e8a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007df8:	4b35      	ldr	r3, [pc, #212]	; (8007ed0 <xTaskIncrementTick+0x14c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e02:	4b36      	ldr	r3, [pc, #216]	; (8007edc <xTaskIncrementTick+0x158>)
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e08:	601a      	str	r2, [r3, #0]
					break;
 8007e0a:	e03e      	b.n	8007e8a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e0c:	4b30      	ldr	r3, [pc, #192]	; (8007ed0 <xTaskIncrementTick+0x14c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d203      	bcs.n	8007e2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e24:	4a2d      	ldr	r2, [pc, #180]	; (8007edc <xTaskIncrementTick+0x158>)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e2a:	e02e      	b.n	8007e8a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7fe fc9e 	bl	8006772 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	3318      	adds	r3, #24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fc95 	bl	8006772 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	409a      	lsls	r2, r3
 8007e50:	4b23      	ldr	r3, [pc, #140]	; (8007ee0 <xTaskIncrementTick+0x15c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	4a22      	ldr	r2, [pc, #136]	; (8007ee0 <xTaskIncrementTick+0x15c>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4a1f      	ldr	r2, [pc, #124]	; (8007ee4 <xTaskIncrementTick+0x160>)
 8007e68:	441a      	add	r2, r3
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4610      	mov	r0, r2
 8007e72:	f7fe fc21 	bl	80066b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ee8 <xTaskIncrementTick+0x164>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d3b9      	bcc.n	8007df8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e88:	e7b6      	b.n	8007df8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e8a:	4b17      	ldr	r3, [pc, #92]	; (8007ee8 <xTaskIncrementTick+0x164>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	4914      	ldr	r1, [pc, #80]	; (8007ee4 <xTaskIncrementTick+0x160>)
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d901      	bls.n	8007ea6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ea6:	4b11      	ldr	r3, [pc, #68]	; (8007eec <xTaskIncrementTick+0x168>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
 8007eb2:	e004      	b.n	8007ebe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <xTaskIncrementTick+0x16c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	4a0d      	ldr	r2, [pc, #52]	; (8007ef0 <xTaskIncrementTick+0x16c>)
 8007ebc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ebe:	697b      	ldr	r3, [r7, #20]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	200053d8 	.word	0x200053d8
 8007ecc:	200053b4 	.word	0x200053b4
 8007ed0:	20005368 	.word	0x20005368
 8007ed4:	2000536c 	.word	0x2000536c
 8007ed8:	200053c8 	.word	0x200053c8
 8007edc:	200053d0 	.word	0x200053d0
 8007ee0:	200053b8 	.word	0x200053b8
 8007ee4:	200052b4 	.word	0x200052b4
 8007ee8:	200052b0 	.word	0x200052b0
 8007eec:	200053c4 	.word	0x200053c4
 8007ef0:	200053c0 	.word	0x200053c0

08007ef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007efa:	4b29      	ldr	r3, [pc, #164]	; (8007fa0 <vTaskSwitchContext+0xac>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f02:	4b28      	ldr	r3, [pc, #160]	; (8007fa4 <vTaskSwitchContext+0xb0>)
 8007f04:	2201      	movs	r2, #1
 8007f06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f08:	e044      	b.n	8007f94 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007f0a:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <vTaskSwitchContext+0xb0>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f10:	4b25      	ldr	r3, [pc, #148]	; (8007fa8 <vTaskSwitchContext+0xb4>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	fab3 f383 	clz	r3, r3
 8007f1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f1e:	7afb      	ldrb	r3, [r7, #11]
 8007f20:	f1c3 031f 	rsb	r3, r3, #31
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	4921      	ldr	r1, [pc, #132]	; (8007fac <vTaskSwitchContext+0xb8>)
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10a      	bne.n	8007f50 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	607b      	str	r3, [r7, #4]
}
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <vTaskSwitchContext+0x5a>
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a14      	ldr	r2, [pc, #80]	; (8007fac <vTaskSwitchContext+0xb8>)
 8007f5c:	4413      	add	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	605a      	str	r2, [r3, #4]
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	3308      	adds	r3, #8
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d104      	bne.n	8007f80 <vTaskSwitchContext+0x8c>
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	605a      	str	r2, [r3, #4]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	4a0a      	ldr	r2, [pc, #40]	; (8007fb0 <vTaskSwitchContext+0xbc>)
 8007f88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f8a:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <vTaskSwitchContext+0xbc>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	334c      	adds	r3, #76	; 0x4c
 8007f90:	4a08      	ldr	r2, [pc, #32]	; (8007fb4 <vTaskSwitchContext+0xc0>)
 8007f92:	6013      	str	r3, [r2, #0]
}
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	200053d8 	.word	0x200053d8
 8007fa4:	200053c4 	.word	0x200053c4
 8007fa8:	200053b8 	.word	0x200053b8
 8007fac:	200052b4 	.word	0x200052b4
 8007fb0:	200052b0 	.word	0x200052b0
 8007fb4:	2000008c 	.word	0x2000008c

08007fb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	60fb      	str	r3, [r7, #12]
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fde:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <vTaskPlaceOnEventList+0x44>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3318      	adds	r3, #24
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fe fb8a 	bl	8006700 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fec:	2101      	movs	r1, #1
 8007fee:	6838      	ldr	r0, [r7, #0]
 8007ff0:	f000 fb82 	bl	80086f8 <prvAddCurrentTaskToDelayedList>
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	200052b0 	.word	0x200052b0

08008000 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10a      	bne.n	800802c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	60fb      	str	r3, [r7, #12]
}
 8008028:	bf00      	nop
 800802a:	e7fe      	b.n	800802a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	3318      	adds	r3, #24
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe fb9e 	bl	8006772 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008036:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <xTaskRemoveFromEventList+0xac>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d11c      	bne.n	8008078 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	3304      	adds	r3, #4
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fb95 	bl	8006772 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	2201      	movs	r2, #1
 800804e:	409a      	lsls	r2, r3
 8008050:	4b17      	ldr	r3, [pc, #92]	; (80080b0 <xTaskRemoveFromEventList+0xb0>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4313      	orrs	r3, r2
 8008056:	4a16      	ldr	r2, [pc, #88]	; (80080b0 <xTaskRemoveFromEventList+0xb0>)
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805e:	4613      	mov	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4a13      	ldr	r2, [pc, #76]	; (80080b4 <xTaskRemoveFromEventList+0xb4>)
 8008068:	441a      	add	r2, r3
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	3304      	adds	r3, #4
 800806e:	4619      	mov	r1, r3
 8008070:	4610      	mov	r0, r2
 8008072:	f7fe fb21 	bl	80066b8 <vListInsertEnd>
 8008076:	e005      	b.n	8008084 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	3318      	adds	r3, #24
 800807c:	4619      	mov	r1, r3
 800807e:	480e      	ldr	r0, [pc, #56]	; (80080b8 <xTaskRemoveFromEventList+0xb8>)
 8008080:	f7fe fb1a 	bl	80066b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008088:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <xTaskRemoveFromEventList+0xbc>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808e:	429a      	cmp	r2, r3
 8008090:	d905      	bls.n	800809e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008092:	2301      	movs	r3, #1
 8008094:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008096:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <xTaskRemoveFromEventList+0xc0>)
 8008098:	2201      	movs	r2, #1
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	e001      	b.n	80080a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800809e:	2300      	movs	r3, #0
 80080a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080a2:	697b      	ldr	r3, [r7, #20]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	200053d8 	.word	0x200053d8
 80080b0:	200053b8 	.word	0x200053b8
 80080b4:	200052b4 	.word	0x200052b4
 80080b8:	20005370 	.word	0x20005370
 80080bc:	200052b0 	.word	0x200052b0
 80080c0:	200053c4 	.word	0x200053c4

080080c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <vTaskInternalSetTimeOutState+0x24>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <vTaskInternalSetTimeOutState+0x28>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	605a      	str	r2, [r3, #4]
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	200053c8 	.word	0x200053c8
 80080ec:	200053b4 	.word	0x200053b4

080080f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b088      	sub	sp, #32
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	613b      	str	r3, [r7, #16]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	60fb      	str	r3, [r7, #12]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008132:	f000 fc77 	bl	8008a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008136:	4b1d      	ldr	r3, [pc, #116]	; (80081ac <xTaskCheckForTimeOut+0xbc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800814e:	d102      	bne.n	8008156 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008150:	2300      	movs	r3, #0
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	e023      	b.n	800819e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <xTaskCheckForTimeOut+0xc0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d007      	beq.n	8008172 <xTaskCheckForTimeOut+0x82>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	429a      	cmp	r2, r3
 800816a:	d302      	bcc.n	8008172 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800816c:	2301      	movs	r3, #1
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e015      	b.n	800819e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	429a      	cmp	r2, r3
 800817a:	d20b      	bcs.n	8008194 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	1ad2      	subs	r2, r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff ff9b 	bl	80080c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800818e:	2300      	movs	r3, #0
 8008190:	61fb      	str	r3, [r7, #28]
 8008192:	e004      	b.n	800819e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800819a:	2301      	movs	r3, #1
 800819c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800819e:	f000 fc71 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 80081a2:	69fb      	ldr	r3, [r7, #28]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3720      	adds	r7, #32
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	200053b4 	.word	0x200053b4
 80081b0:	200053c8 	.word	0x200053c8

080081b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081b8:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <vTaskMissedYield+0x14>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	601a      	str	r2, [r3, #0]
}
 80081be:	bf00      	nop
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	200053c4 	.word	0x200053c4

080081cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081d4:	f000 f852 	bl	800827c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <prvIdleTask+0x28>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d9f9      	bls.n	80081d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <prvIdleTask+0x2c>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081f0:	e7f0      	b.n	80081d4 <prvIdleTask+0x8>
 80081f2:	bf00      	nop
 80081f4:	200052b4 	.word	0x200052b4
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008202:	2300      	movs	r3, #0
 8008204:	607b      	str	r3, [r7, #4]
 8008206:	e00c      	b.n	8008222 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4a12      	ldr	r2, [pc, #72]	; (800825c <prvInitialiseTaskLists+0x60>)
 8008214:	4413      	add	r3, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fa21 	bl	800665e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3301      	adds	r3, #1
 8008220:	607b      	str	r3, [r7, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b06      	cmp	r3, #6
 8008226:	d9ef      	bls.n	8008208 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008228:	480d      	ldr	r0, [pc, #52]	; (8008260 <prvInitialiseTaskLists+0x64>)
 800822a:	f7fe fa18 	bl	800665e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800822e:	480d      	ldr	r0, [pc, #52]	; (8008264 <prvInitialiseTaskLists+0x68>)
 8008230:	f7fe fa15 	bl	800665e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008234:	480c      	ldr	r0, [pc, #48]	; (8008268 <prvInitialiseTaskLists+0x6c>)
 8008236:	f7fe fa12 	bl	800665e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800823a:	480c      	ldr	r0, [pc, #48]	; (800826c <prvInitialiseTaskLists+0x70>)
 800823c:	f7fe fa0f 	bl	800665e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008240:	480b      	ldr	r0, [pc, #44]	; (8008270 <prvInitialiseTaskLists+0x74>)
 8008242:	f7fe fa0c 	bl	800665e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <prvInitialiseTaskLists+0x78>)
 8008248:	4a05      	ldr	r2, [pc, #20]	; (8008260 <prvInitialiseTaskLists+0x64>)
 800824a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800824c:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <prvInitialiseTaskLists+0x7c>)
 800824e:	4a05      	ldr	r2, [pc, #20]	; (8008264 <prvInitialiseTaskLists+0x68>)
 8008250:	601a      	str	r2, [r3, #0]
}
 8008252:	bf00      	nop
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	200052b4 	.word	0x200052b4
 8008260:	20005340 	.word	0x20005340
 8008264:	20005354 	.word	0x20005354
 8008268:	20005370 	.word	0x20005370
 800826c:	20005384 	.word	0x20005384
 8008270:	2000539c 	.word	0x2000539c
 8008274:	20005368 	.word	0x20005368
 8008278:	2000536c 	.word	0x2000536c

0800827c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008282:	e019      	b.n	80082b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008284:	f000 fbce 	bl	8008a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008288:	4b10      	ldr	r3, [pc, #64]	; (80082cc <prvCheckTasksWaitingTermination+0x50>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3304      	adds	r3, #4
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fa6c 	bl	8006772 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800829a:	4b0d      	ldr	r3, [pc, #52]	; (80082d0 <prvCheckTasksWaitingTermination+0x54>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3b01      	subs	r3, #1
 80082a0:	4a0b      	ldr	r2, [pc, #44]	; (80082d0 <prvCheckTasksWaitingTermination+0x54>)
 80082a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <prvCheckTasksWaitingTermination+0x58>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	4a0a      	ldr	r2, [pc, #40]	; (80082d4 <prvCheckTasksWaitingTermination+0x58>)
 80082ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082ae:	f000 fbe9 	bl	8008a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f810 	bl	80082d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <prvCheckTasksWaitingTermination+0x58>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e1      	bne.n	8008284 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20005384 	.word	0x20005384
 80082d0:	200053b0 	.word	0x200053b0
 80082d4:	20005398 	.word	0x20005398

080082d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	334c      	adds	r3, #76	; 0x4c
 80082e4:	4618      	mov	r0, r3
 80082e6:	f017 fc89 	bl	801fbfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d108      	bne.n	8008306 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fd81 	bl	8008e00 <vPortFree>
				vPortFree( pxTCB );
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fd7e 	bl	8008e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008304:	e018      	b.n	8008338 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800830c:	2b01      	cmp	r3, #1
 800830e:	d103      	bne.n	8008318 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fd75 	bl	8008e00 <vPortFree>
	}
 8008316:	e00f      	b.n	8008338 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800831e:	2b02      	cmp	r3, #2
 8008320:	d00a      	beq.n	8008338 <prvDeleteTCB+0x60>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	60fb      	str	r3, [r7, #12]
}
 8008334:	bf00      	nop
 8008336:	e7fe      	b.n	8008336 <prvDeleteTCB+0x5e>
	}
 8008338:	bf00      	nop
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008346:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <prvResetNextTaskUnblockTime+0x38>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008350:	4b0a      	ldr	r3, [pc, #40]	; (800837c <prvResetNextTaskUnblockTime+0x3c>)
 8008352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008356:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008358:	e008      	b.n	800836c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835a:	4b07      	ldr	r3, [pc, #28]	; (8008378 <prvResetNextTaskUnblockTime+0x38>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4a04      	ldr	r2, [pc, #16]	; (800837c <prvResetNextTaskUnblockTime+0x3c>)
 800836a:	6013      	str	r3, [r2, #0]
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	20005368 	.word	0x20005368
 800837c:	200053d0 	.word	0x200053d0

08008380 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <xTaskGetSchedulerState+0x34>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800838e:	2301      	movs	r3, #1
 8008390:	607b      	str	r3, [r7, #4]
 8008392:	e008      	b.n	80083a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008394:	4b08      	ldr	r3, [pc, #32]	; (80083b8 <xTaskGetSchedulerState+0x38>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800839c:	2302      	movs	r3, #2
 800839e:	607b      	str	r3, [r7, #4]
 80083a0:	e001      	b.n	80083a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083a2:	2300      	movs	r3, #0
 80083a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083a6:	687b      	ldr	r3, [r7, #4]
	}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	200053bc 	.word	0x200053bc
 80083b8:	200053d8 	.word	0x200053d8

080083bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d05e      	beq.n	8008490 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d6:	4b31      	ldr	r3, [pc, #196]	; (800849c <xTaskPriorityInherit+0xe0>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	429a      	cmp	r2, r3
 80083de:	d24e      	bcs.n	800847e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	db06      	blt.n	80083f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083e8:	4b2c      	ldr	r3, [pc, #176]	; (800849c <xTaskPriorityInherit+0xe0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	f1c3 0207 	rsb	r2, r3, #7
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6959      	ldr	r1, [r3, #20]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4a26      	ldr	r2, [pc, #152]	; (80084a0 <xTaskPriorityInherit+0xe4>)
 8008408:	4413      	add	r3, r2
 800840a:	4299      	cmp	r1, r3
 800840c:	d12f      	bne.n	800846e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	3304      	adds	r3, #4
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe f9ad 	bl	8006772 <uxListRemove>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	2201      	movs	r2, #1
 8008424:	fa02 f303 	lsl.w	r3, r2, r3
 8008428:	43da      	mvns	r2, r3
 800842a:	4b1e      	ldr	r3, [pc, #120]	; (80084a4 <xTaskPriorityInherit+0xe8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4013      	ands	r3, r2
 8008430:	4a1c      	ldr	r2, [pc, #112]	; (80084a4 <xTaskPriorityInherit+0xe8>)
 8008432:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008434:	4b19      	ldr	r3, [pc, #100]	; (800849c <xTaskPriorityInherit+0xe0>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	2201      	movs	r2, #1
 8008444:	409a      	lsls	r2, r3
 8008446:	4b17      	ldr	r3, [pc, #92]	; (80084a4 <xTaskPriorityInherit+0xe8>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4313      	orrs	r3, r2
 800844c:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <xTaskPriorityInherit+0xe8>)
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4a10      	ldr	r2, [pc, #64]	; (80084a0 <xTaskPriorityInherit+0xe4>)
 800845e:	441a      	add	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	3304      	adds	r3, #4
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f7fe f926 	bl	80066b8 <vListInsertEnd>
 800846c:	e004      	b.n	8008478 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800846e:	4b0b      	ldr	r3, [pc, #44]	; (800849c <xTaskPriorityInherit+0xe0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008478:	2301      	movs	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	e008      	b.n	8008490 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008482:	4b06      	ldr	r3, [pc, #24]	; (800849c <xTaskPriorityInherit+0xe0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	429a      	cmp	r2, r3
 800848a:	d201      	bcs.n	8008490 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800848c:	2301      	movs	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008490:	68fb      	ldr	r3, [r7, #12]
	}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	200052b0 	.word	0x200052b0
 80084a0:	200052b4 	.word	0x200052b4
 80084a4:	200053b8 	.word	0x200053b8

080084a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d06e      	beq.n	800859c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084be:	4b3a      	ldr	r3, [pc, #232]	; (80085a8 <xTaskPriorityDisinherit+0x100>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d00a      	beq.n	80084de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	60fb      	str	r3, [r7, #12]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10a      	bne.n	80084fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60bb      	str	r3, [r7, #8]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008500:	1e5a      	subs	r2, r3, #1
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850e:	429a      	cmp	r2, r3
 8008510:	d044      	beq.n	800859c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008516:	2b00      	cmp	r3, #0
 8008518:	d140      	bne.n	800859c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	3304      	adds	r3, #4
 800851e:	4618      	mov	r0, r3
 8008520:	f7fe f927 	bl	8006772 <uxListRemove>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d115      	bne.n	8008556 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852e:	491f      	ldr	r1, [pc, #124]	; (80085ac <xTaskPriorityDisinherit+0x104>)
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xTaskPriorityDisinherit+0xae>
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	2201      	movs	r2, #1
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	43da      	mvns	r2, r3
 800854c:	4b18      	ldr	r3, [pc, #96]	; (80085b0 <xTaskPriorityDisinherit+0x108>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4013      	ands	r3, r2
 8008552:	4a17      	ldr	r2, [pc, #92]	; (80085b0 <xTaskPriorityDisinherit+0x108>)
 8008554:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	f1c3 0207 	rsb	r2, r3, #7
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	2201      	movs	r2, #1
 8008570:	409a      	lsls	r2, r3
 8008572:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <xTaskPriorityDisinherit+0x108>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4313      	orrs	r3, r2
 8008578:	4a0d      	ldr	r2, [pc, #52]	; (80085b0 <xTaskPriorityDisinherit+0x108>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a08      	ldr	r2, [pc, #32]	; (80085ac <xTaskPriorityDisinherit+0x104>)
 800858a:	441a      	add	r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe f890 	bl	80066b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008598:	2301      	movs	r3, #1
 800859a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800859c:	697b      	ldr	r3, [r7, #20]
	}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200052b0 	.word	0x200052b0
 80085ac:	200052b4 	.word	0x200052b4
 80085b0:	200053b8 	.word	0x200053b8

080085b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80085c2:	2301      	movs	r3, #1
 80085c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d077      	beq.n	80086bc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d10a      	bne.n	80085ea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80085d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d8:	f383 8811 	msr	BASEPRI, r3
 80085dc:	f3bf 8f6f 	isb	sy
 80085e0:	f3bf 8f4f 	dsb	sy
 80085e4:	60fb      	str	r3, [r7, #12]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d902      	bls.n	80085fa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	61fb      	str	r3, [r7, #28]
 80085f8:	e002      	b.n	8008600 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	429a      	cmp	r2, r3
 8008608:	d058      	beq.n	80086bc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	429a      	cmp	r2, r3
 8008612:	d153      	bne.n	80086bc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008614:	4b2b      	ldr	r3, [pc, #172]	; (80086c4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	429a      	cmp	r2, r3
 800861c:	d10a      	bne.n	8008634 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	60bb      	str	r3, [r7, #8]
}
 8008630:	bf00      	nop
 8008632:	e7fe      	b.n	8008632 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008638:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	69fa      	ldr	r2, [r7, #28]
 800863e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	db04      	blt.n	8008652 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f1c3 0207 	rsb	r2, r3, #7
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	6959      	ldr	r1, [r3, #20]
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4a19      	ldr	r2, [pc, #100]	; (80086c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008662:	4413      	add	r3, r2
 8008664:	4299      	cmp	r1, r3
 8008666:	d129      	bne.n	80086bc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	3304      	adds	r3, #4
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe f880 	bl	8006772 <uxListRemove>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	2201      	movs	r2, #1
 800867e:	fa02 f303 	lsl.w	r3, r2, r3
 8008682:	43da      	mvns	r2, r3
 8008684:	4b11      	ldr	r3, [pc, #68]	; (80086cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4013      	ands	r3, r2
 800868a:	4a10      	ldr	r2, [pc, #64]	; (80086cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800868c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	2201      	movs	r2, #1
 8008694:	409a      	lsls	r2, r3
 8008696:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4313      	orrs	r3, r2
 800869c:	4a0b      	ldr	r2, [pc, #44]	; (80086cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4a06      	ldr	r2, [pc, #24]	; (80086c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80086ae:	441a      	add	r2, r3
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	3304      	adds	r3, #4
 80086b4:	4619      	mov	r1, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	f7fd fffe 	bl	80066b8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086bc:	bf00      	nop
 80086be:	3720      	adds	r7, #32
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	200052b0 	.word	0x200052b0
 80086c8:	200052b4 	.word	0x200052b4
 80086cc:	200053b8 	.word	0x200053b8

080086d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80086d4:	4b07      	ldr	r3, [pc, #28]	; (80086f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086e2:	3201      	adds	r2, #1
 80086e4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80086e6:	4b03      	ldr	r3, [pc, #12]	; (80086f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80086e8:	681b      	ldr	r3, [r3, #0]
	}
 80086ea:	4618      	mov	r0, r3
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	200052b0 	.word	0x200052b0

080086f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008702:	4b29      	ldr	r3, [pc, #164]	; (80087a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008708:	4b28      	ldr	r3, [pc, #160]	; (80087ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3304      	adds	r3, #4
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe f82f 	bl	8006772 <uxListRemove>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10b      	bne.n	8008732 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800871a:	4b24      	ldr	r3, [pc, #144]	; (80087ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	2201      	movs	r2, #1
 8008722:	fa02 f303 	lsl.w	r3, r2, r3
 8008726:	43da      	mvns	r2, r3
 8008728:	4b21      	ldr	r3, [pc, #132]	; (80087b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4013      	ands	r3, r2
 800872e:	4a20      	ldr	r2, [pc, #128]	; (80087b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008730:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008738:	d10a      	bne.n	8008750 <prvAddCurrentTaskToDelayedList+0x58>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008740:	4b1a      	ldr	r3, [pc, #104]	; (80087ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3304      	adds	r3, #4
 8008746:	4619      	mov	r1, r3
 8008748:	481a      	ldr	r0, [pc, #104]	; (80087b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800874a:	f7fd ffb5 	bl	80066b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800874e:	e026      	b.n	800879e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4413      	add	r3, r2
 8008756:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008758:	4b14      	ldr	r3, [pc, #80]	; (80087ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	429a      	cmp	r2, r3
 8008766:	d209      	bcs.n	800877c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008768:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	4b0f      	ldr	r3, [pc, #60]	; (80087ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3304      	adds	r3, #4
 8008772:	4619      	mov	r1, r3
 8008774:	4610      	mov	r0, r2
 8008776:	f7fd ffc3 	bl	8006700 <vListInsert>
}
 800877a:	e010      	b.n	800879e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800877c:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3304      	adds	r3, #4
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f7fd ffb9 	bl	8006700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800878e:	4b0c      	ldr	r3, [pc, #48]	; (80087c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	429a      	cmp	r2, r3
 8008796:	d202      	bcs.n	800879e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008798:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6013      	str	r3, [r2, #0]
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	200053b4 	.word	0x200053b4
 80087ac:	200052b0 	.word	0x200052b0
 80087b0:	200053b8 	.word	0x200053b8
 80087b4:	2000539c 	.word	0x2000539c
 80087b8:	2000536c 	.word	0x2000536c
 80087bc:	20005368 	.word	0x20005368
 80087c0:	200053d0 	.word	0x200053d0

080087c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3b04      	subs	r3, #4
 80087d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b04      	subs	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f023 0201 	bic.w	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3b04      	subs	r3, #4
 80087f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087f4:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <pxPortInitialiseStack+0x64>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3b14      	subs	r3, #20
 80087fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3b04      	subs	r3, #4
 800880a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f06f 0202 	mvn.w	r2, #2
 8008812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3b20      	subs	r3, #32
 8008818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800881a:	68fb      	ldr	r3, [r7, #12]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	0800882d 	.word	0x0800882d

0800882c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <prvTaskExitError+0x54>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800883e:	d00a      	beq.n	8008856 <prvTaskExitError+0x2a>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	60fb      	str	r3, [r7, #12]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <prvTaskExitError+0x28>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	60bb      	str	r3, [r7, #8]
}
 8008868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800886a:	bf00      	nop
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0fc      	beq.n	800886c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	20000020 	.word	0x20000020
	...

08008890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <pxCurrentTCBConst2>)
 8008892:	6819      	ldr	r1, [r3, #0]
 8008894:	6808      	ldr	r0, [r1, #0]
 8008896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	f380 8809 	msr	PSP, r0
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8811 	msr	BASEPRI, r0
 80088aa:	4770      	bx	lr
 80088ac:	f3af 8000 	nop.w

080088b0 <pxCurrentTCBConst2>:
 80088b0:	200052b0 	.word	0x200052b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop

080088b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088b8:	4808      	ldr	r0, [pc, #32]	; (80088dc <prvPortStartFirstTask+0x24>)
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	6800      	ldr	r0, [r0, #0]
 80088be:	f380 8808 	msr	MSP, r0
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8814 	msr	CONTROL, r0
 80088ca:	b662      	cpsie	i
 80088cc:	b661      	cpsie	f
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	df00      	svc	0
 80088d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088da:	bf00      	nop
 80088dc:	e000ed08 	.word	0xe000ed08

080088e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088e6:	4b46      	ldr	r3, [pc, #280]	; (8008a00 <xPortStartScheduler+0x120>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a46      	ldr	r2, [pc, #280]	; (8008a04 <xPortStartScheduler+0x124>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10a      	bne.n	8008906 <xPortStartScheduler+0x26>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	613b      	str	r3, [r7, #16]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008906:	4b3e      	ldr	r3, [pc, #248]	; (8008a00 <xPortStartScheduler+0x120>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a3f      	ldr	r2, [pc, #252]	; (8008a08 <xPortStartScheduler+0x128>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d10a      	bne.n	8008926 <xPortStartScheduler+0x46>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	60fb      	str	r3, [r7, #12]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008926:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <xPortStartScheduler+0x12c>)
 8008928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	22ff      	movs	r2, #255	; 0xff
 8008936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008948:	b2da      	uxtb	r2, r3
 800894a:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <xPortStartScheduler+0x130>)
 800894c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800894e:	4b31      	ldr	r3, [pc, #196]	; (8008a14 <xPortStartScheduler+0x134>)
 8008950:	2207      	movs	r2, #7
 8008952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008954:	e009      	b.n	800896a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008956:	4b2f      	ldr	r3, [pc, #188]	; (8008a14 <xPortStartScheduler+0x134>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3b01      	subs	r3, #1
 800895c:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <xPortStartScheduler+0x134>)
 800895e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	b2db      	uxtb	r3, r3
 8008968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d0ef      	beq.n	8008956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008976:	4b27      	ldr	r3, [pc, #156]	; (8008a14 <xPortStartScheduler+0x134>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1c3 0307 	rsb	r3, r3, #7
 800897e:	2b04      	cmp	r3, #4
 8008980:	d00a      	beq.n	8008998 <xPortStartScheduler+0xb8>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	60bb      	str	r3, [r7, #8]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008998:	4b1e      	ldr	r3, [pc, #120]	; (8008a14 <xPortStartScheduler+0x134>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <xPortStartScheduler+0x134>)
 80089a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <xPortStartScheduler+0x134>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089aa:	4a1a      	ldr	r2, [pc, #104]	; (8008a14 <xPortStartScheduler+0x134>)
 80089ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089b6:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <xPortStartScheduler+0x138>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a17      	ldr	r2, [pc, #92]	; (8008a18 <xPortStartScheduler+0x138>)
 80089bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089c2:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <xPortStartScheduler+0x138>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a14      	ldr	r2, [pc, #80]	; (8008a18 <xPortStartScheduler+0x138>)
 80089c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089ce:	f000 f8dd 	bl	8008b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089d2:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <xPortStartScheduler+0x13c>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089d8:	f000 f8fc 	bl	8008bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <xPortStartScheduler+0x140>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a0f      	ldr	r2, [pc, #60]	; (8008a20 <xPortStartScheduler+0x140>)
 80089e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089e8:	f7ff ff66 	bl	80088b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089ec:	f7ff fa82 	bl	8007ef4 <vTaskSwitchContext>
	prvTaskExitError();
 80089f0:	f7ff ff1c 	bl	800882c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	e000ed00 	.word	0xe000ed00
 8008a04:	410fc271 	.word	0x410fc271
 8008a08:	410fc270 	.word	0x410fc270
 8008a0c:	e000e400 	.word	0xe000e400
 8008a10:	200053dc 	.word	0x200053dc
 8008a14:	200053e0 	.word	0x200053e0
 8008a18:	e000ed20 	.word	0xe000ed20
 8008a1c:	20000020 	.word	0x20000020
 8008a20:	e000ef34 	.word	0xe000ef34

08008a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	607b      	str	r3, [r7, #4]
}
 8008a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	4a0d      	ldr	r2, [pc, #52]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d10f      	bne.n	8008a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a50:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <vPortEnterCritical+0x5c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	603b      	str	r3, [r7, #0]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <vPortEnterCritical+0x4a>
	}
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	20000020 	.word	0x20000020
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a8a:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <vPortExitCritical+0x50>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <vPortExitCritical+0x24>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	607b      	str	r3, [r7, #4]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <vPortExitCritical+0x50>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <vPortExitCritical+0x50>)
 8008ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <vPortExitCritical+0x50>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <vPortExitCritical+0x42>
 8008aba:	2300      	movs	r3, #0
 8008abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f383 8811 	msr	BASEPRI, r3
}
 8008ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000020 	.word	0x20000020
	...

08008ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ae0:	f3ef 8009 	mrs	r0, PSP
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <pxCurrentTCBConst>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	f01e 0f10 	tst.w	lr, #16
 8008af0:	bf08      	it	eq
 8008af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afa:	6010      	str	r0, [r2, #0]
 8008afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b04:	f380 8811 	msr	BASEPRI, r0
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f7ff f9f0 	bl	8007ef4 <vTaskSwitchContext>
 8008b14:	f04f 0000 	mov.w	r0, #0
 8008b18:	f380 8811 	msr	BASEPRI, r0
 8008b1c:	bc09      	pop	{r0, r3}
 8008b1e:	6819      	ldr	r1, [r3, #0]
 8008b20:	6808      	ldr	r0, [r1, #0]
 8008b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b26:	f01e 0f10 	tst.w	lr, #16
 8008b2a:	bf08      	it	eq
 8008b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b30:	f380 8809 	msr	PSP, r0
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	f3af 8000 	nop.w

08008b40 <pxCurrentTCBConst>:
 8008b40:	200052b0 	.word	0x200052b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop

08008b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	607b      	str	r3, [r7, #4]
}
 8008b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b62:	f7ff f90f 	bl	8007d84 <xTaskIncrementTick>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <SysTick_Handler+0x40>)
 8008b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	2300      	movs	r3, #0
 8008b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f383 8811 	msr	BASEPRI, r3
}
 8008b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b96:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <vPortSetupTimerInterrupt+0x38>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <vPortSetupTimerInterrupt+0x3c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <vPortSetupTimerInterrupt+0x40>)
 8008ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba6:	099b      	lsrs	r3, r3, #6
 8008ba8:	4a09      	ldr	r2, [pc, #36]	; (8008bd0 <vPortSetupTimerInterrupt+0x44>)
 8008baa:	3b01      	subs	r3, #1
 8008bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bae:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008bb0:	2207      	movs	r2, #7
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	e000e010 	.word	0xe000e010
 8008bc4:	e000e018 	.word	0xe000e018
 8008bc8:	20000000 	.word	0x20000000
 8008bcc:	10624dd3 	.word	0x10624dd3
 8008bd0:	e000e014 	.word	0xe000e014

08008bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008be4 <vPortEnableVFP+0x10>
 8008bd8:	6801      	ldr	r1, [r0, #0]
 8008bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bde:	6001      	str	r1, [r0, #0]
 8008be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008be2:	bf00      	nop
 8008be4:	e000ed88 	.word	0xe000ed88

08008be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bee:	f3ef 8305 	mrs	r3, IPSR
 8008bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b0f      	cmp	r3, #15
 8008bf8:	d914      	bls.n	8008c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bfa:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <vPortValidateInterruptPriority+0x70>)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c04:	4b15      	ldr	r3, [pc, #84]	; (8008c5c <vPortValidateInterruptPriority+0x74>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	7afa      	ldrb	r2, [r7, #11]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d20a      	bcs.n	8008c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
}
 8008c20:	bf00      	nop
 8008c22:	e7fe      	b.n	8008c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c24:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <vPortValidateInterruptPriority+0x78>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <vPortValidateInterruptPriority+0x7c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d90a      	bls.n	8008c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	603b      	str	r3, [r7, #0]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <vPortValidateInterruptPriority+0x60>
	}
 8008c4a:	bf00      	nop
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	e000e3f0 	.word	0xe000e3f0
 8008c5c:	200053dc 	.word	0x200053dc
 8008c60:	e000ed0c 	.word	0xe000ed0c
 8008c64:	200053e0 	.word	0x200053e0

08008c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c74:	f7fe ffba 	bl	8007bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c78:	4b5b      	ldr	r3, [pc, #364]	; (8008de8 <pvPortMalloc+0x180>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c80:	f000 f920 	bl	8008ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c84:	4b59      	ldr	r3, [pc, #356]	; (8008dec <pvPortMalloc+0x184>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f040 8093 	bne.w	8008db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01d      	beq.n	8008cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c98:	2208      	movs	r2, #8
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d014      	beq.n	8008cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f023 0307 	bic.w	r3, r3, #7
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	617b      	str	r3, [r7, #20]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d06e      	beq.n	8008db8 <pvPortMalloc+0x150>
 8008cda:	4b45      	ldr	r3, [pc, #276]	; (8008df0 <pvPortMalloc+0x188>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d869      	bhi.n	8008db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ce4:	4b43      	ldr	r3, [pc, #268]	; (8008df4 <pvPortMalloc+0x18c>)
 8008ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ce8:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <pvPortMalloc+0x18c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cee:	e004      	b.n	8008cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d903      	bls.n	8008d0c <pvPortMalloc+0xa4>
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f1      	bne.n	8008cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d0c:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <pvPortMalloc+0x180>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d050      	beq.n	8008db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2208      	movs	r2, #8
 8008d1c:	4413      	add	r3, r2
 8008d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	2308      	movs	r3, #8
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d91f      	bls.n	8008d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <pvPortMalloc+0xf8>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	613b      	str	r3, [r7, #16]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	1ad2      	subs	r2, r2, r3
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d72:	69b8      	ldr	r0, [r7, #24]
 8008d74:	f000 f908 	bl	8008f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d78:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <pvPortMalloc+0x188>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	4a1b      	ldr	r2, [pc, #108]	; (8008df0 <pvPortMalloc+0x188>)
 8008d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d86:	4b1a      	ldr	r3, [pc, #104]	; (8008df0 <pvPortMalloc+0x188>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <pvPortMalloc+0x190>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d203      	bcs.n	8008d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d92:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <pvPortMalloc+0x188>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <pvPortMalloc+0x190>)
 8008d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	4b13      	ldr	r3, [pc, #76]	; (8008dec <pvPortMalloc+0x184>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <pvPortMalloc+0x194>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3301      	adds	r3, #1
 8008db4:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <pvPortMalloc+0x194>)
 8008db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008db8:	f7fe ff26 	bl	8007c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	f003 0307 	and.w	r3, r3, #7
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <pvPortMalloc+0x174>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	60fb      	str	r3, [r7, #12]
}
 8008dd8:	bf00      	nop
 8008dda:	e7fe      	b.n	8008dda <pvPortMalloc+0x172>
	return pvReturn;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3728      	adds	r7, #40	; 0x28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	2000c91c 	.word	0x2000c91c
 8008dec:	2000c930 	.word	0x2000c930
 8008df0:	2000c920 	.word	0x2000c920
 8008df4:	2000c914 	.word	0x2000c914
 8008df8:	2000c924 	.word	0x2000c924
 8008dfc:	2000c928 	.word	0x2000c928

08008e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d04d      	beq.n	8008eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e12:	2308      	movs	r3, #8
 8008e14:	425b      	negs	r3, r3
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	4413      	add	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <vPortFree+0xb8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <vPortFree+0x44>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	60fb      	str	r3, [r7, #12]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <vPortFree+0x62>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60bb      	str	r3, [r7, #8]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	4b14      	ldr	r3, [pc, #80]	; (8008eb8 <vPortFree+0xb8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01e      	beq.n	8008eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d11a      	bne.n	8008eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <vPortFree+0xb8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	43db      	mvns	r3, r3
 8008e82:	401a      	ands	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e88:	f7fe feb0 	bl	8007bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <vPortFree+0xbc>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4413      	add	r3, r2
 8008e96:	4a09      	ldr	r2, [pc, #36]	; (8008ebc <vPortFree+0xbc>)
 8008e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e9a:	6938      	ldr	r0, [r7, #16]
 8008e9c:	f000 f874 	bl	8008f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <vPortFree+0xc0>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	4a06      	ldr	r2, [pc, #24]	; (8008ec0 <vPortFree+0xc0>)
 8008ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008eaa:	f7fe fead 	bl	8007c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008eae:	bf00      	nop
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	2000c930 	.word	0x2000c930
 8008ebc:	2000c920 	.word	0x2000c920
 8008ec0:	2000c92c 	.word	0x2000c92c

08008ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eca:	f247 5330 	movw	r3, #30000	; 0x7530
 8008ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ed0:	4b27      	ldr	r3, [pc, #156]	; (8008f70 <prvHeapInit+0xac>)
 8008ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00c      	beq.n	8008ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0307 	bic.w	r3, r3, #7
 8008eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	4a1f      	ldr	r2, [pc, #124]	; (8008f70 <prvHeapInit+0xac>)
 8008ef4:	4413      	add	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008efc:	4a1d      	ldr	r2, [pc, #116]	; (8008f74 <prvHeapInit+0xb0>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <prvHeapInit+0xb0>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f10:	2208      	movs	r2, #8
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4a15      	ldr	r2, [pc, #84]	; (8008f78 <prvHeapInit+0xb4>)
 8008f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f26:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <prvHeapInit+0xb4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f2e:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <prvHeapInit+0xb4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <prvHeapInit+0xb4>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	4a0a      	ldr	r2, [pc, #40]	; (8008f7c <prvHeapInit+0xb8>)
 8008f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4a09      	ldr	r2, [pc, #36]	; (8008f80 <prvHeapInit+0xbc>)
 8008f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f5c:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <prvHeapInit+0xc0>)
 8008f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f62:	601a      	str	r2, [r3, #0]
}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	200053e4 	.word	0x200053e4
 8008f74:	2000c914 	.word	0x2000c914
 8008f78:	2000c91c 	.word	0x2000c91c
 8008f7c:	2000c924 	.word	0x2000c924
 8008f80:	2000c920 	.word	0x2000c920
 8008f84:	2000c930 	.word	0x2000c930

08008f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f90:	4b28      	ldr	r3, [pc, #160]	; (8009034 <prvInsertBlockIntoFreeList+0xac>)
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	e002      	b.n	8008f9c <prvInsertBlockIntoFreeList+0x14>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d8f7      	bhi.n	8008f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d108      	bne.n	8008fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	441a      	add	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d118      	bne.n	8009010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d00d      	beq.n	8009006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	441a      	add	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	e008      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009006:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e003      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d002      	beq.n	8009026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	2000c914 	.word	0x2000c914
 8009038:	2000c91c 	.word	0x2000c91c

0800903c <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4293      	cmp	r3, r2
 800904c:	bf38      	it	cc
 800904e:	4613      	movcc	r3, r2
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4293      	cmp	r3, r2
 800906c:	bf28      	it	cs
 800906e:	4613      	movcs	r3, r2
}
 8009070:	4618      	mov	r0, r3
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	fbb3 f2f2 	udiv	r2, r3, r2
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	fb01 f202 	mul.w	r2, r1, r2
 8009094:	1a9b      	subs	r3, r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	1ad3      	subs	r3, r2, r3
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	4413      	add	r3, r2
 80090b6:	3b01      	subs	r3, #1
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff ffde 	bl	800907c <lfs_aligndown>
 80090c0:	4603      	mov	r3, r0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80090ca:	b480      	push	{r7}
 80090cc:	b083      	sub	sp, #12
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	fab3 f383 	clz	r3, r3
 80090da:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 80090de:	4618      	mov	r0, r3
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	fa93 f3a3 	rbit	r3, r3
 80090f8:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7f7 f8cd 	bl	80002b0 <__popcountsi2>
 8009116:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	1ad3      	subs	r3, r2, r3
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 8009144:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff ffee 	bl	800913c <lfs_fromle32>
 8009160:	4603      	mov	r3, r0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff ffed 	bl	800916a <lfs_frombe32>
 8009190:	4603      	mov	r3, r0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800919a:	b580      	push	{r7, lr}
 800919c:	b082      	sub	sp, #8
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f016 f934 	bl	801f410 <malloc>
 80091a8:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f016 f930 	bl	801f420 <free>
#else
    (void)p;
#endif
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <lfs_cache_drop>:
int lfs_mounted;
lfs_t lfs;
struct lfs_config cfg;

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	68d8      	ldr	r0, [r3, #12]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fa:	461a      	mov	r2, r3
 80091fc:	21ff      	movs	r1, #255	; 0xff
 80091fe:	f016 fcb7 	bl	801fb70 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009208:	601a      	str	r2, [r3, #0]
}
 800920a:	bf00      	nop
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8009214:	b5b0      	push	{r4, r5, r7, lr}
 8009216:	b08a      	sub	sp, #40	; 0x28
 8009218:	af02      	add	r7, sp, #8
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800922e:	429a      	cmp	r2, r3
 8009230:	d208      	bcs.n	8009244 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8009232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009236:	441a      	add	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (block >= lfs->cfg->block_count ||
 800923e:	429a      	cmp	r2, r3
 8009240:	f240 811b 	bls.w	800947a <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8009244:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009248:	e11c      	b.n	8009484 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800924a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d03f      	beq.n	80092d4 <lfs_bd_read+0xc0>
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800925a:	429a      	cmp	r2, r3
 800925c:	d13a      	bne.n	80092d4 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8009268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800926a:	429a      	cmp	r2, r3
 800926c:	d232      	bcs.n	80092d4 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009274:	429a      	cmp	r2, r3
 8009276:	d324      	bcc.n	80092c2 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	6859      	ldr	r1, [r3, #4]
 8009280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009282:	1acb      	subs	r3, r1, r3
 8009284:	4413      	add	r3, r2
 8009286:	4619      	mov	r1, r3
 8009288:	69b8      	ldr	r0, [r7, #24]
 800928a:	f7ff fee7 	bl	800905c <lfs_min>
 800928e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800929a:	1acb      	subs	r3, r1, r3
 800929c:	4413      	add	r3, r2
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	4619      	mov	r1, r3
 80092a2:	69f8      	ldr	r0, [r7, #28]
 80092a4:	f016 fd73 	bl	801fd8e <memcpy>

                data += diff;
 80092a8:	69fa      	ldr	r2, [r7, #28]
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	4413      	add	r3, r2
 80092ae:	61fb      	str	r3, [r7, #28]
                off += diff;
 80092b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	4413      	add	r3, r2
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80092b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80092c0:	e0db      	b.n	800947a <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	4619      	mov	r1, r3
 80092cc:	69b8      	ldr	r0, [r7, #24]
 80092ce:	f7ff fec5 	bl	800905c <lfs_min>
 80092d2:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092da:	429a      	cmp	r2, r3
 80092dc:	d13a      	bne.n	8009354 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	4413      	add	r3, r2
        if (block == rcache->block &&
 80092e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d232      	bcs.n	8009354 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d324      	bcc.n	8009342 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6859      	ldr	r1, [r3, #4]
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	1acb      	subs	r3, r1, r3
 8009304:	4413      	add	r3, r2
 8009306:	4619      	mov	r1, r3
 8009308:	69b8      	ldr	r0, [r7, #24]
 800930a:	f7ff fea7 	bl	800905c <lfs_min>
 800930e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68da      	ldr	r2, [r3, #12]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800931a:	1acb      	subs	r3, r1, r3
 800931c:	4413      	add	r3, r2
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	4619      	mov	r1, r3
 8009322:	69f8      	ldr	r0, [r7, #28]
 8009324:	f016 fd33 	bl	801fd8e <memcpy>

                data += diff;
 8009328:	69fa      	ldr	r2, [r7, #28]
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	4413      	add	r3, r2
 800932e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8009330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	4413      	add	r3, r2
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8009338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8009340:	e09b      	b.n	800947a <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	4619      	mov	r1, r3
 800934c:	69b8      	ldr	r0, [r7, #24]
 800934e:	f7ff fe85 	bl	800905c <lfs_min>
 8009352:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8009354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d336      	bcc.n	80093ca <lfs_bd_read+0x1b6>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009360:	69da      	ldr	r2, [r3, #28]
 8009362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009364:	fbb3 f1f2 	udiv	r1, r3, r2
 8009368:	fb01 f202 	mul.w	r2, r1, r2
 800936c:	1a9b      	subs	r3, r3, r2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d12b      	bne.n	80093ca <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009376:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8009378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800937a:	429a      	cmp	r2, r3
 800937c:	d325      	bcc.n	80093ca <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	4619      	mov	r1, r3
 8009386:	69b8      	ldr	r0, [r7, #24]
 8009388:	f7ff fe78 	bl	800907c <lfs_aligndown>
 800938c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009392:	685c      	ldr	r4, [r3, #4]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093a2:	47a0      	blx	r4
 80093a4:	6178      	str	r0, [r7, #20]
            if (err) {
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <lfs_bd_read+0x19c>
                return err;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	e069      	b.n	8009484 <lfs_bd_read+0x270>
            }

            data += diff;
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	4413      	add	r3, r2
 80093b6:	61fb      	str	r3, [r7, #28]
            off += diff;
 80093b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	4413      	add	r3, r2
 80093be:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 80093c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 80093c8:	e057      	b.n	800947a <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d305      	bcc.n	80093e2 <lfs_bd_read+0x1ce>
 80093d6:	4b2d      	ldr	r3, [pc, #180]	; (800948c <lfs_bd_read+0x278>)
 80093d8:	4a2d      	ldr	r2, [pc, #180]	; (8009490 <lfs_bd_read+0x27c>)
 80093da:	215e      	movs	r1, #94	; 0x5e
 80093dc:	482d      	ldr	r0, [pc, #180]	; (8009494 <lfs_bd_read+0x280>)
 80093de:	f015 fff5 	bl	801f3cc <__assert_func>
        rcache->block = block;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e6:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	4619      	mov	r1, r3
 80093f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80093f2:	f7ff fe43 	bl	800907c <lfs_aligndown>
 80093f6:	4602      	mov	r2, r0
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 80093fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009406:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8009408:	4619      	mov	r1, r3
 800940a:	4610      	mov	r0, r2
 800940c:	f7ff fe4b 	bl	80090a6 <lfs_alignup>
 8009410:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                lfs_min(
 8009418:	4619      	mov	r1, r3
 800941a:	4610      	mov	r0, r2
 800941c:	f7ff fe1e 	bl	800905c <lfs_min>
 8009420:	4602      	mov	r2, r0
                - rcache->off,
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8009426:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800942c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f7ff fe13 	bl	800905c <lfs_min>
 8009436:	4602      	mov	r2, r0
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009440:	685c      	ldr	r4, [r3, #4]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6819      	ldr	r1, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	462b      	mov	r3, r5
 800945a:	47a0      	blx	r4
 800945c:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	dd05      	ble.n	8009470 <lfs_bd_read+0x25c>
 8009464:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <lfs_bd_read+0x284>)
 8009466:	4a0a      	ldr	r2, [pc, #40]	; (8009490 <lfs_bd_read+0x27c>)
 8009468:	2169      	movs	r1, #105	; 0x69
 800946a:	480a      	ldr	r0, [pc, #40]	; (8009494 <lfs_bd_read+0x280>)
 800946c:	f015 ffae 	bl	801f3cc <__assert_func>
        if (err) {
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <lfs_bd_read+0x266>
            return err;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	e004      	b.n	8009484 <lfs_bd_read+0x270>
    while (size > 0) {
 800947a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947c:	2b00      	cmp	r3, #0
 800947e:	f47f aee4 	bne.w	800924a <lfs_bd_read+0x36>
        }
    }

    return 0;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3720      	adds	r7, #32
 8009488:	46bd      	mov	sp, r7
 800948a:	bdb0      	pop	{r4, r5, r7, pc}
 800948c:	08020dbc 	.word	0x08020dbc
 8009490:	08025088 	.word	0x08025088
 8009494:	08020ddc 	.word	0x08020ddc
 8009498:	08020e08 	.word	0x08020e08

0800949c <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800949c:	b580      	push	{r7, lr}
 800949e:	b08e      	sub	sp, #56	; 0x38
 80094a0:	af04      	add	r7, sp, #16
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
 80094a8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 80094b2:	2300      	movs	r3, #0
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
 80094b6:	e039      	b.n	800952c <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 80094b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	2108      	movs	r1, #8
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7ff fdcb 	bl	800905c <lfs_min>
 80094c6:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 80094c8:	683a      	ldr	r2, [r7, #0]
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	1ad1      	subs	r1, r2, r3
 80094ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	4413      	add	r3, r2
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	9203      	str	r2, [sp, #12]
 80094d8:	f107 0210 	add.w	r2, r7, #16
 80094dc:	9202      	str	r2, [sp, #8]
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	460b      	mov	r3, r1
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff fe92 	bl	8009214 <lfs_bd_read>
 80094f0:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <lfs_bd_cmp+0x60>
            return res;
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	e01c      	b.n	8009536 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 80094fc:	6a3a      	ldr	r2, [r7, #32]
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	18d1      	adds	r1, r2, r3
 8009502:	f107 0310 	add.w	r3, r7, #16
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	4618      	mov	r0, r3
 800950a:	f016 fb21 	bl	801fb50 <memcmp>
 800950e:	61b8      	str	r0, [r7, #24]
        if (res) {
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d006      	beq.n	8009524 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	da01      	bge.n	8009520 <lfs_bd_cmp+0x84>
 800951c:	2301      	movs	r3, #1
 800951e:	e00a      	b.n	8009536 <lfs_bd_cmp+0x9a>
 8009520:	2302      	movs	r3, #2
 8009522:	e008      	b.n	8009536 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8009524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	4413      	add	r3, r2
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
 800952c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800952e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009530:	429a      	cmp	r2, r3
 8009532:	d3c1      	bcc.n	80094b8 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3728      	adds	r7, #40	; 0x28
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8009540:	b5b0      	push	{r4, r5, r7, lr}
 8009542:	b08c      	sub	sp, #48	; 0x30
 8009544:	af04      	add	r7, sp, #16
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009556:	d061      	beq.n	800961c <lfs_bd_flush+0xdc>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f113 0f02 	cmn.w	r3, #2
 8009560:	d05c      	beq.n	800961c <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800956a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956c:	429a      	cmp	r2, r3
 800956e:	d305      	bcc.n	800957c <lfs_bd_flush+0x3c>
 8009570:	4b2d      	ldr	r3, [pc, #180]	; (8009628 <lfs_bd_flush+0xe8>)
 8009572:	4a2e      	ldr	r2, [pc, #184]	; (800962c <lfs_bd_flush+0xec>)
 8009574:	2197      	movs	r1, #151	; 0x97
 8009576:	482e      	ldr	r0, [pc, #184]	; (8009630 <lfs_bd_flush+0xf0>)
 8009578:	f015 ff28 	bl	801f3cc <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	4619      	mov	r1, r3
 8009588:	4610      	mov	r0, r2
 800958a:	f7ff fd8c 	bl	80090a6 <lfs_alignup>
 800958e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009594:	689c      	ldr	r4, [r3, #8]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	6819      	ldr	r1, [r3, #0]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	462b      	mov	r3, r5
 80095ac:	47a0      	blx	r4
 80095ae:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dd05      	ble.n	80095c2 <lfs_bd_flush+0x82>
 80095b6:	4b1f      	ldr	r3, [pc, #124]	; (8009634 <lfs_bd_flush+0xf4>)
 80095b8:	4a1c      	ldr	r2, [pc, #112]	; (800962c <lfs_bd_flush+0xec>)
 80095ba:	219b      	movs	r1, #155	; 0x9b
 80095bc:	481c      	ldr	r0, [pc, #112]	; (8009630 <lfs_bd_flush+0xf0>)
 80095be:	f015 ff05 	bl	801f3cc <__assert_func>
        if (err) {
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <lfs_bd_flush+0x8c>
            return err;
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	e028      	b.n	800961e <lfs_bd_flush+0xde>
        }

        if (validate) {
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d020      	beq.n	8009614 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7ff fdf7 	bl	80091c8 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80095e2:	68b9      	ldr	r1, [r7, #8]
 80095e4:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80095e6:	69f8      	ldr	r0, [r7, #28]
 80095e8:	9003      	str	r0, [sp, #12]
 80095ea:	9102      	str	r1, [sp, #8]
 80095ec:	9201      	str	r2, [sp, #4]
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	2100      	movs	r1, #0
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f7ff ff50 	bl	800949c <lfs_bd_cmp>
 80095fc:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2b00      	cmp	r3, #0
 8009602:	da01      	bge.n	8009608 <lfs_bd_flush+0xc8>
                return res;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	e00a      	b.n	800961e <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 800960e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009612:	e004      	b.n	800961e <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7ff fde5 	bl	80091e6 <lfs_cache_zero>
    }

    return 0;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3720      	adds	r7, #32
 8009622:	46bd      	mov	sp, r7
 8009624:	bdb0      	pop	{r4, r5, r7, pc}
 8009626:	bf00      	nop
 8009628:	08020e14 	.word	0x08020e14
 800962c:	08025094 	.word	0x08025094
 8009630:	08020ddc 	.word	0x08020ddc
 8009634:	08020e08 	.word	0x08020e08

08009638 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff fdbd 	bl	80091c8 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800964e:	78fb      	ldrb	r3, [r7, #3]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff ff73 	bl	8009540 <lfs_bd_flush>
 800965a:	6178      	str	r0, [r7, #20]
    if (err) {
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <lfs_bd_sync+0x2e>
        return err;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	e011      	b.n	800968a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
 8009674:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dd05      	ble.n	8009688 <lfs_bd_sync+0x50>
 800967c:	4b05      	ldr	r3, [pc, #20]	; (8009694 <lfs_bd_sync+0x5c>)
 800967e:	4a06      	ldr	r2, [pc, #24]	; (8009698 <lfs_bd_sync+0x60>)
 8009680:	21c1      	movs	r1, #193	; 0xc1
 8009682:	4806      	ldr	r0, [pc, #24]	; (800969c <lfs_bd_sync+0x64>)
 8009684:	f015 fea2 	bl	801f3cc <__assert_func>
    return err;
 8009688:	697b      	ldr	r3, [r7, #20]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	08020e08 	.word	0x08020e08
 8009698:	080250a4 	.word	0x080250a4
 800969c:	08020ddc 	.word	0x08020ddc

080096a0 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	f113 0f02 	cmn.w	r3, #2
 80096b8:	d00b      	beq.n	80096d2 <lfs_bd_prog+0x32>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d305      	bcc.n	80096d2 <lfs_bd_prog+0x32>
 80096c6:	4b47      	ldr	r3, [pc, #284]	; (80097e4 <lfs_bd_prog+0x144>)
 80096c8:	4a47      	ldr	r2, [pc, #284]	; (80097e8 <lfs_bd_prog+0x148>)
 80096ca:	21cc      	movs	r1, #204	; 0xcc
 80096cc:	4847      	ldr	r0, [pc, #284]	; (80097ec <lfs_bd_prog+0x14c>)
 80096ce:	f015 fe7d 	bl	801f3cc <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80096d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d6:	441a      	add	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	429a      	cmp	r2, r3
 80096e0:	d977      	bls.n	80097d2 <lfs_bd_prog+0x132>
 80096e2:	4b43      	ldr	r3, [pc, #268]	; (80097f0 <lfs_bd_prog+0x150>)
 80096e4:	4a40      	ldr	r2, [pc, #256]	; (80097e8 <lfs_bd_prog+0x148>)
 80096e6:	21cd      	movs	r1, #205	; 0xcd
 80096e8:	4840      	ldr	r0, [pc, #256]	; (80097ec <lfs_bd_prog+0x14c>)
 80096ea:	f015 fe6f 	bl	801f3cc <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d151      	bne.n	800979c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80096fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096fe:	429a      	cmp	r2, r3
 8009700:	d34c      	bcc.n	800979c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970c:	4413      	add	r3, r2
                off >= pcache->off &&
 800970e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009710:	429a      	cmp	r2, r3
 8009712:	d243      	bcs.n	800979c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6859      	ldr	r1, [r3, #4]
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8009722:	4413      	add	r3, r2
 8009724:	4619      	mov	r1, r3
 8009726:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009728:	f7ff fc98 	bl	800905c <lfs_min>
 800972c:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	68da      	ldr	r2, [r3, #12]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009738:	1acb      	subs	r3, r1, r3
 800973a:	4413      	add	r3, r2
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	69f9      	ldr	r1, [r7, #28]
 8009740:	4618      	mov	r0, r3
 8009742:	f016 fb24 	bl	801fd8e <memcpy>

            data += diff;
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	4413      	add	r3, r2
 800974c:	61fb      	str	r3, [r7, #28]
            off += diff;
 800974e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	4413      	add	r3, r2
 8009754:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8009756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	6898      	ldr	r0, [r3, #8]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	4619      	mov	r1, r3
 800976c:	f7ff fc66 	bl	800903c <lfs_max>
 8009770:	4602      	mov	r2, r0
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	689a      	ldr	r2, [r3, #8]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	429a      	cmp	r2, r3
 8009782:	d126      	bne.n	80097d2 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff fed8 	bl	8009540 <lfs_bd_flush>
 8009790:	6178      	str	r0, [r7, #20]
                if (err) {
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01c      	beq.n	80097d2 <lfs_bd_prog+0x132>
                    return err;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	e01e      	b.n	80097da <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097a4:	d005      	beq.n	80097b2 <lfs_bd_prog+0x112>
 80097a6:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <lfs_bd_prog+0x154>)
 80097a8:	4a0f      	ldr	r2, [pc, #60]	; (80097e8 <lfs_bd_prog+0x148>)
 80097aa:	21ea      	movs	r1, #234	; 0xea
 80097ac:	480f      	ldr	r0, [pc, #60]	; (80097ec <lfs_bd_prog+0x14c>)
 80097ae:	f015 fe0d 	bl	801f3cc <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097b6:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	4619      	mov	r1, r3
 80097c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097c2:	f7ff fc5b 	bl	800907c <lfs_aligndown>
 80097c6:	4602      	mov	r2, r0
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2200      	movs	r2, #0
 80097d0:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 80097d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d18a      	bne.n	80096ee <lfs_bd_prog+0x4e>
    }

    return 0;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	08020e3c 	.word	0x08020e3c
 80097e8:	080250b0 	.word	0x080250b0
 80097ec:	08020ddc 	.word	0x08020ddc
 80097f0:	08020e78 	.word	0x08020e78
 80097f4:	08020e9c 	.word	0x08020e9c

080097f8 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d305      	bcc.n	800981a <lfs_bd_erase+0x22>
 800980e:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <lfs_bd_erase+0x50>)
 8009810:	4a0e      	ldr	r2, [pc, #56]	; (800984c <lfs_bd_erase+0x54>)
 8009812:	21f8      	movs	r1, #248	; 0xf8
 8009814:	480e      	ldr	r0, [pc, #56]	; (8009850 <lfs_bd_erase+0x58>)
 8009816:	f015 fdd9 	bl	801f3cc <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	4610      	mov	r0, r2
 8009828:	4798      	blx	r3
 800982a:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	dd05      	ble.n	800983e <lfs_bd_erase+0x46>
 8009832:	4b08      	ldr	r3, [pc, #32]	; (8009854 <lfs_bd_erase+0x5c>)
 8009834:	4a05      	ldr	r2, [pc, #20]	; (800984c <lfs_bd_erase+0x54>)
 8009836:	21fa      	movs	r1, #250	; 0xfa
 8009838:	4805      	ldr	r0, [pc, #20]	; (8009850 <lfs_bd_erase+0x58>)
 800983a:	f015 fdc7 	bl	801f3cc <__assert_func>
    return err;
 800983e:	68fb      	ldr	r3, [r7, #12]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	08020dbc 	.word	0x08020dbc
 800984c:	080250bc 	.word	0x080250bc
 8009850:	08020ddc 	.word	0x08020ddc
 8009854:	08020e08 	.word	0x08020e08

08009858 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3304      	adds	r3, #4
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	601a      	str	r2, [r3, #0]
}
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009892:	d005      	beq.n	80098a0 <lfs_pair_isnull+0x1e>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3304      	adds	r3, #4
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800989e:	d101      	bne.n	80098a4 <lfs_pair_isnull+0x22>
 80098a0:	2301      	movs	r3, #1
 80098a2:	e000      	b.n	80098a6 <lfs_pair_isnull+0x24>
 80098a4:	2300      	movs	r3, #0
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	b2db      	uxtb	r3, r3
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d017      	beq.n	80098fe <lfs_pair_cmp+0x46>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3304      	adds	r3, #4
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	3304      	adds	r3, #4
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d00f      	beq.n	80098fe <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	3304      	adds	r3, #4
 80098e6:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d008      	beq.n	80098fe <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	3304      	adds	r3, #4
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d001      	beq.n	80098fe <lfs_pair_cmp+0x46>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e000      	b.n	8009900 <lfs_pair_cmp+0x48>
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <lfs_pair_sync>:

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d107      	bne.n	8009932 <lfs_pair_sync+0x26>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	3304      	adds	r3, #4
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	3304      	adds	r3, #4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	429a      	cmp	r2, r3
 8009930:	d00d      	beq.n	800994e <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	3304      	adds	r3, #4
 800993a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800993c:	429a      	cmp	r2, r3
 800993e:	d108      	bne.n	8009952 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	3304      	adds	r3, #4
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d101      	bne.n	8009952 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <lfs_pair_sync+0x48>
 8009952:	2300      	movs	r3, #0
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	b2db      	uxtb	r3, r3
}
 800995a:	4618      	mov	r0, r3
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8009966:	b590      	push	{r4, r7, lr}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff fbe2 	bl	800913c <lfs_fromle32>
 8009978:	4602      	mov	r2, r0
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3304      	adds	r3, #4
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	1d1c      	adds	r4, r3, #4
 8009988:	4610      	mov	r0, r2
 800998a:	f7ff fbd7 	bl	800913c <lfs_fromle32>
 800998e:	4603      	mov	r3, r0
 8009990:	6023      	str	r3, [r4, #0]
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	bd90      	pop	{r4, r7, pc}

0800999a <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800999a:	b590      	push	{r4, r7, lr}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff fbd3 	bl	8009152 <lfs_tole32>
 80099ac:	4602      	mov	r2, r0
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3304      	adds	r3, #4
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	1d1c      	adds	r4, r3, #4
 80099bc:	4610      	mov	r0, r2
 80099be:	f7ff fbc8 	bl	8009152 <lfs_tole32>
 80099c2:	4603      	mov	r3, r0
 80099c4:	6023      	str	r3, [r4, #0]
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd90      	pop	{r4, r7, pc}

080099ce <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	43db      	mvns	r3, r3
 80099da:	0fdb      	lsrs	r3, r3, #31
 80099dc:	b2db      	uxtb	r3, r3
}
 80099de:	4618      	mov	r0, r3
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	059b      	lsls	r3, r3, #22
 80099f6:	159b      	asrs	r3, r3, #22
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099fc:	bf0c      	ite	eq
 80099fe:	2301      	moveq	r3, #1
 8009a00:	2300      	movne	r3, #0
 8009a02:	b2db      	uxtb	r3, r3
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	0d1b      	lsrs	r3, r3, #20
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a22:	b29b      	uxth	r3, r3
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	0d1b      	lsrs	r3, r3, #20
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a42:	b29b      	uxth	r3, r3
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	0d1b      	lsrs	r3, r3, #20
 8009a5c:	b2db      	uxtb	r3, r3
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff ffec 	bl	8009a50 <lfs_tag_chunk>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	b25b      	sxtb	r3, r3
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	0a9b      	lsrs	r3, r3, #10
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a96:	b29b      	uxth	r3, r3
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff ff8f 	bl	80099ea <lfs_tag_isdelete>
 8009acc:	4603      	mov	r3, r0
 8009ace:	461a      	mov	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff ffe5 	bl	8009aa4 <lfs_tag_size>
 8009ada:	4603      	mov	r3, r0
 8009adc:	3304      	adds	r3, #4
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8009ae6:	b480      	push	{r7}
 8009ae8:	b085      	sub	sp, #20
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8009af0:	2300      	movs	r3, #0
 8009af2:	60fb      	str	r3, [r7, #12]
 8009af4:	e012      	b.n	8009b1c <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4413      	add	r3, r2
 8009afe:	6819      	ldr	r1, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	4413      	add	r3, r2
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	4403      	add	r3, r0
 8009b12:	404a      	eors	r2, r1
 8009b14:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	dde9      	ble.n	8009af6 <lfs_gstate_xor+0x10>
    }
}
 8009b22:	bf00      	nop
 8009b24:	bf00      	nop
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	e00b      	b.n	8009b56 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	4413      	add	r3, r2
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <lfs_gstate_iszero+0x20>
            return false;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e006      	b.n	8009b5e <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60fb      	str	r3, [r7, #12]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	ddf0      	ble.n	8009b3e <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8009b5c:	2301      	movs	r3, #1
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7ff ff94 	bl	8009aa4 <lfs_tag_size>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	bf14      	ite	ne
 8009b82:	2301      	movne	r3, #1
 8009b84:	2300      	moveq	r3, #0
 8009b86:	b2db      	uxtb	r3, r3
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff ff81 	bl	8009aa4 <lfs_tag_size>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	b2db      	uxtb	r3, r3
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff ff28 	bl	8009a10 <lfs_tag_type1>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bf14      	ite	ne
 8009bc6:	2301      	movne	r3, #1
 8009bc8:	2300      	moveq	r3, #0
 8009bca:	b2db      	uxtb	r3, r3
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff ff14 	bl	8009a10 <lfs_tag_type1>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <lfs_gstate_hasmovehere+0x30>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3304      	adds	r3, #4
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff fe5f 	bl	80098b8 <lfs_pair_cmp>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <lfs_gstate_hasmovehere+0x30>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e000      	b.n	8009c06 <lfs_gstate_hasmovehere+0x32>
 8009c04:	2300      	movs	r3, #0
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	b2db      	uxtb	r3, r3
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7ff fa8b 	bl	800913c <lfs_fromle32>
 8009c26:	4602      	mov	r2, r0
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff fa83 	bl	800913c <lfs_fromle32>
 8009c36:	4602      	mov	r2, r0
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff fa7b 	bl	800913c <lfs_fromle32>
 8009c46:	4602      	mov	r2, r0
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	609a      	str	r2, [r3, #8]
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff fa76 	bl	8009152 <lfs_tole32>
 8009c66:	4602      	mov	r2, r0
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff fa6e 	bl	8009152 <lfs_tole32>
 8009c76:	4602      	mov	r2, r0
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff fa66 	bl	8009152 <lfs_tole32>
 8009c86:	4602      	mov	r2, r0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	609a      	str	r2, [r3, #8]
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7ff fa4b 	bl	800913c <lfs_fromle32>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7ff fa43 	bl	800913c <lfs_fromle32>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	605a      	str	r2, [r3, #4]
}
 8009cbc:	bf00      	nop
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <lfs_superblock_fromle32>:
    ctz->head = lfs_tole32(ctz->head);
    ctz->size = lfs_tole32(ctz->size);
}
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff fa33 	bl	800913c <lfs_fromle32>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff fa2b 	bl	800913c <lfs_fromle32>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff fa23 	bl	800913c <lfs_fromle32>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7ff fa1b 	bl	800913c <lfs_fromle32>
 8009d06:	4602      	mov	r2, r0
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff fa13 	bl	800913c <lfs_fromle32>
 8009d16:	4602      	mov	r2, r0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff fa0b 	bl	800913c <lfs_fromle32>
 8009d26:	4602      	mov	r2, r0
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	615a      	str	r2, [r3, #20]
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff fa06 	bl	8009152 <lfs_tole32>
 8009d46:	4602      	mov	r2, r0
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7ff f9fe 	bl	8009152 <lfs_tole32>
 8009d56:	4602      	mov	r2, r0
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff f9f6 	bl	8009152 <lfs_tole32>
 8009d66:	4602      	mov	r2, r0
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff f9ee 	bl	8009152 <lfs_tole32>
 8009d76:	4602      	mov	r2, r0
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff f9e6 	bl	8009152 <lfs_tole32>
 8009d86:	4602      	mov	r2, r0
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff f9de 	bl	8009152 <lfs_tole32>
 8009d96:	4602      	mov	r2, r0
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	615a      	str	r2, [r3, #20]
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc0:	4413      	add	r3, r2
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009dc6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    lfs_block_t off = ((block - lfs->free.off)
 8009dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dcc:	fb01 f202 	mul.w	r2, r1, r2
 8009dd0:	1a9b      	subs	r3, r3, r2
 8009dd2:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d212      	bcs.n	8009e04 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	095b      	lsrs	r3, r3, #5
 8009de6:	009a      	lsls	r2, r3, #2
 8009de8:	440a      	add	r2, r1
 8009dea:	6811      	ldr	r1, [r2, #0]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	f002 021f 	and.w	r2, r2, #31
 8009df2:	2001      	movs	r0, #1
 8009df4:	fa00 f202 	lsl.w	r2, r0, r2
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4403      	add	r3, r0
 8009e00:	430a      	orrs	r2, r1
 8009e02:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff ffe4 	bl	8009e12 <lfs_alloc_ack>
}
 8009e4a:	bf00      	nop
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
	...

08009e54 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af02      	add	r7, sp, #8
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8009e5e:	e04f      	b.n	8009f00 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e64:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e74:	1e5a      	subs	r2, r3, #1
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	095b      	lsrs	r3, r3, #5
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f003 031f 	and.w	r3, r3, #31
 8009e8e:	2101      	movs	r1, #1
 8009e90:	fa01 f303 	lsl.w	r3, r1, r3
 8009e94:	4013      	ands	r3, r2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d132      	bne.n	8009f00 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009ea6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009eac:	fb01 f202 	mul.w	r2, r1, r2
 8009eb0:	1a9a      	subs	r2, r3, r2
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8009eb6:	e009      	b.n	8009ecc <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ec6:	1e5a      	subs	r2, r3, #1
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d011      	beq.n	8009efc <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ee0:	095b      	lsrs	r3, r3, #5
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4413      	add	r3, r2
 8009ee6:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eec:	f003 031f 	and.w	r3, r3, #31
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef6:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d1dd      	bne.n	8009eb8 <lfs_alloc+0x64>
                }

                return 0;
 8009efc:	2300      	movs	r3, #0
 8009efe:	e050      	b.n	8009fa2 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d1a9      	bne.n	8009e60 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10f      	bne.n	8009f34 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1c:	4413      	add	r3, r2
 8009f1e:	4a23      	ldr	r2, [pc, #140]	; (8009fac <lfs_alloc+0x158>)
 8009f20:	9200      	str	r2, [sp, #0]
 8009f22:	f44f 720d 	mov.w	r2, #564	; 0x234
 8009f26:	4922      	ldr	r1, [pc, #136]	; (8009fb0 <lfs_alloc+0x15c>)
 8009f28:	4822      	ldr	r0, [pc, #136]	; (8009fb4 <lfs_alloc+0x160>)
 8009f2a:	f015 fccb 	bl	801f8c4 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8009f2e:	f06f 031b 	mvn.w	r3, #27
 8009f32:	e036      	b.n	8009fa2 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3c:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009f42:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f48:	fb01 f202 	mul.w	r2, r1, r2
 8009f4c:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f58:	00da      	lsls	r2, r3, #3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f5e:	4619      	mov	r1, r3
 8009f60:	4610      	mov	r0, r2
 8009f62:	f7ff f87b 	bl	800905c <lfs_min>
 8009f66:	4602      	mov	r2, r0
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2100      	movs	r1, #0
 8009f80:	f015 fdf6 	bl	801fb70 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8009f84:	2301      	movs	r3, #1
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	490b      	ldr	r1, [pc, #44]	; (8009fb8 <lfs_alloc+0x164>)
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f003 fe5a 	bl	800dc44 <lfs_fs_rawtraverse>
 8009f90:	60f8      	str	r0, [r7, #12]
        if (err) {
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f43f af62 	beq.w	8009e5e <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff ff48 	bl	8009e30 <lfs_alloc_drop>
            return err;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	08020ee8 	.word	0x08020ee8
 8009fb0:	08020ddc 	.word	0x08020ddc
 8009fb4:	08020ec0 	.word	0x08020ec0
 8009fb8:	08009da5 	.word	0x08009da5

08009fbc <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8009fbc:	b590      	push	{r4, r7, lr}
 8009fbe:	b08f      	sub	sp, #60	; 0x3c
 8009fc0:	af04      	add	r7, sp, #16
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	333c      	adds	r3, #60	; 0x3c
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7ff fdf6 	bl	8009bd4 <lfs_gstate_hasmovehere>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 80ba 	beq.w	800a164 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7ff fd47 	bl	8009a84 <lfs_tag_id>
 8009ff6:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 80b3 	beq.w	800a164 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a002:	4618      	mov	r0, r3
 800a004:	f7ff fd3e 	bl	8009a84 <lfs_tag_id>
 800a008:	4603      	mov	r3, r0
 800a00a:	461c      	mov	r4, r3
 800a00c:	6838      	ldr	r0, [r7, #0]
 800a00e:	f7ff fd39 	bl	8009a84 <lfs_tag_id>
 800a012:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800a014:	429c      	cmp	r4, r3
 800a016:	f200 80a5 	bhi.w	800a164 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a020:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800a022:	e09f      	b.n	800a164 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff fd49 	bl	8009abe <lfs_tag_dsize>
 800a02c:	4602      	mov	r2, r0
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	1a9b      	subs	r3, r3, r2
 800a032:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800a038:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800a03e:	2204      	movs	r2, #4
 800a040:	9203      	str	r2, [sp, #12]
 800a042:	f107 0210 	add.w	r2, r7, #16
 800a046:	9202      	str	r2, [sp, #8]
 800a048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a04a:	9201      	str	r2, [sp, #4]
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	2304      	movs	r3, #4
 800a050:	460a      	mov	r2, r1
 800a052:	2100      	movs	r1, #0
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7ff f8dd 	bl	8009214 <lfs_bd_read>
 800a05a:	61b8      	str	r0, [r7, #24]
        if (err) {
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <lfs_dir_getslice+0xaa>
            return err;
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	e08a      	b.n	800a17c <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	4618      	mov	r0, r3
 800a06a:	f7ff f87e 	bl	800916a <lfs_frombe32>
 800a06e:	4602      	mov	r2, r0
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	4053      	eors	r3, r2
 800a074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a078:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fd02 	bl	8009a84 <lfs_tag_id>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d02b      	beq.n	800a0de <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a086:	69f8      	ldr	r0, [r7, #28]
 800a088:	f7ff fcc2 	bl	8009a10 <lfs_tag_type1>
 800a08c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800a08e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a092:	d124      	bne.n	800a0de <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800a094:	69f8      	ldr	r0, [r7, #28]
 800a096:	f7ff fcf5 	bl	8009a84 <lfs_tag_id>
 800a09a:	4603      	mov	r3, r0
 800a09c:	461c      	mov	r4, r3
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	683a      	ldr	r2, [r7, #0]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7ff fced 	bl	8009a84 <lfs_tag_id>
 800a0aa:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a0ac:	429c      	cmp	r4, r3
 800a0ae:	d816      	bhi.n	800a0de <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	1ad2      	subs	r2, r2, r3
 800a0b6:	4b33      	ldr	r3, [pc, #204]	; (800a184 <lfs_dir_getslice+0x1c8>)
 800a0b8:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800a0ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d102      	bne.n	800a0ce <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 800a0c8:	f06f 0301 	mvn.w	r3, #1
 800a0cc:	e056      	b.n	800a17c <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a0ce:	69f8      	ldr	r0, [r7, #28]
 800a0d0:	f7ff fccb 	bl	8009a6a <lfs_tag_splice>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	029a      	lsls	r2, r3, #10
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	4413      	add	r3, r2
 800a0dc:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	401a      	ands	r2, r3
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	1ac9      	subs	r1, r1, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	400b      	ands	r3, r1
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d138      	bne.n	800a164 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 800a0f2:	69f8      	ldr	r0, [r7, #28]
 800a0f4:	f7ff fc79 	bl	80099ea <lfs_tag_isdelete>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 800a0fe:	f06f 0301 	mvn.w	r3, #1
 800a102:	e03b      	b.n	800a17c <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800a104:	69f8      	ldr	r0, [r7, #28]
 800a106:	f7ff fccd 	bl	8009aa4 <lfs_tag_size>
 800a10a:	4603      	mov	r3, r0
 800a10c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe ffa4 	bl	800905c <lfs_min>
 800a114:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800a116:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a11e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a120:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800a122:	3204      	adds	r2, #4
 800a124:	6979      	ldr	r1, [r7, #20]
 800a126:	9103      	str	r1, [sp, #12]
 800a128:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a12a:	9102      	str	r1, [sp, #8]
 800a12c:	9201      	str	r2, [sp, #4]
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	4602      	mov	r2, r0
 800a134:	2100      	movs	r1, #0
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f7ff f86c 	bl	8009214 <lfs_bd_read>
 800a13c:	61b8      	str	r0, [r7, #24]
            if (err) {
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <lfs_dir_getslice+0x18c>
                return err;
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	e019      	b.n	800a17c <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800a148:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	18d0      	adds	r0, r2, r3
 800a14e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	461a      	mov	r2, r3
 800a156:	2100      	movs	r1, #0
 800a158:	f015 fd0a 	bl	801fb70 <memset>

            return tag + gdiff;
 800a15c:	6a3a      	ldr	r2, [r7, #32]
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	4413      	add	r3, r2
 800a162:	e00b      	b.n	800a17c <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff fca9 	bl	8009abe <lfs_tag_dsize>
 800a16c:	4603      	mov	r3, r0
 800a16e:	3304      	adds	r3, #4
 800a170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a172:	429a      	cmp	r2, r3
 800a174:	f4bf af56 	bcs.w	800a024 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800a178:	f06f 0301 	mvn.w	r3, #1
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	372c      	adds	r7, #44	; 0x2c
 800a180:	46bd      	mov	sp, r7
 800a182:	bd90      	pop	{r4, r7, pc}
 800a184:	000ffc00 	.word	0x000ffc00

0800a188 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af04      	add	r7, sp, #16
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800a196:	6838      	ldr	r0, [r7, #0]
 800a198:	f7ff fc84 	bl	8009aa4 <lfs_tag_size>
 800a19c:	4603      	mov	r3, r0
 800a19e:	9302      	str	r3, [sp, #8]
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7ff ff04 	bl	8009fbc <lfs_dir_getslice>
 800a1b4:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b08c      	sub	sp, #48	; 0x30
 800a1c2:	af04      	add	r7, sp, #16
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	607a      	str	r2, [r7, #4]
 800a1ca:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ce:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800a1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d4:	441a      	add	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	f240 80c0 	bls.w	800a362 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800a1e2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a1e6:	e0c1      	b.n	800a36c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800a1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ea:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d03f      	beq.n	800a272 <lfs_dir_getread+0xb4>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f113 0f02 	cmn.w	r3, #2
 800a1fa:	d13a      	bne.n	800a272 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800a206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a208:	429a      	cmp	r2, r3
 800a20a:	d232      	bcs.n	800a272 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a212:	429a      	cmp	r2, r3
 800a214:	d324      	bcc.n	800a260 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	689a      	ldr	r2, [r3, #8]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6859      	ldr	r1, [r3, #4]
 800a21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a220:	1acb      	subs	r3, r1, r3
 800a222:	4413      	add	r3, r2
 800a224:	4619      	mov	r1, r3
 800a226:	69b8      	ldr	r0, [r7, #24]
 800a228:	f7fe ff18 	bl	800905c <lfs_min>
 800a22c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68da      	ldr	r2, [r3, #12]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a238:	1acb      	subs	r3, r1, r3
 800a23a:	4413      	add	r3, r2
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	4619      	mov	r1, r3
 800a240:	69f8      	ldr	r0, [r7, #28]
 800a242:	f015 fda4 	bl	801fd8e <memcpy>

                data += diff;
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	4413      	add	r3, r2
 800a24c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800a24e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	4413      	add	r3, r2
 800a254:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800a256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800a25e:	e080      	b.n	800a362 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	4619      	mov	r1, r3
 800a26a:	69b8      	ldr	r0, [r7, #24]
 800a26c:	f7fe fef6 	bl	800905c <lfs_min>
 800a270:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f113 0f02 	cmn.w	r3, #2
 800a27a:	d13a      	bne.n	800a2f2 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800a286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a288:	429a      	cmp	r2, r3
 800a28a:	d232      	bcs.n	800a2f2 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a292:	429a      	cmp	r2, r3
 800a294:	d324      	bcc.n	800a2e0 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	6859      	ldr	r1, [r3, #4]
 800a29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a0:	1acb      	subs	r3, r1, r3
 800a2a2:	4413      	add	r3, r2
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	69b8      	ldr	r0, [r7, #24]
 800a2a8:	f7fe fed8 	bl	800905c <lfs_min>
 800a2ac:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	68da      	ldr	r2, [r3, #12]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2b8:	1acb      	subs	r3, r1, r3
 800a2ba:	4413      	add	r3, r2
 800a2bc:	69ba      	ldr	r2, [r7, #24]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	69f8      	ldr	r0, [r7, #28]
 800a2c2:	f015 fd64 	bl	801fd8e <memcpy>

                data += diff;
 800a2c6:	69fa      	ldr	r2, [r7, #28]
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	61fb      	str	r3, [r7, #28]
                off += diff;
 800a2ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800a2d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800a2de:	e040      	b.n	800a362 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	69b8      	ldr	r0, [r7, #24]
 800a2ec:	f7fe feb6 	bl	800905c <lfs_min>
 800a2f0:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	f06f 0201 	mvn.w	r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2fe:	69db      	ldr	r3, [r3, #28]
 800a300:	4619      	mov	r1, r3
 800a302:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a304:	f7fe feba 	bl	800907c <lfs_aligndown>
 800a308:	4602      	mov	r2, r0
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a30e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	441a      	add	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	4619      	mov	r1, r3
 800a31c:	4610      	mov	r0, r2
 800a31e:	f7fe fec2 	bl	80090a6 <lfs_alignup>
 800a322:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a32a:	4619      	mov	r1, r3
 800a32c:	4610      	mov	r0, r2
 800a32e:	f7fe fe95 	bl	800905c <lfs_min>
 800a332:	4602      	mov	r2, r0
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6889      	ldr	r1, [r1, #8]
 800a344:	9102      	str	r1, [sp, #8]
 800a346:	9201      	str	r2, [sp, #4]
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a34e:	68b9      	ldr	r1, [r7, #8]
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7ff fe33 	bl	8009fbc <lfs_dir_getslice>
 800a356:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	da01      	bge.n	800a362 <lfs_dir_getread+0x1a4>
            return err;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	e004      	b.n	800a36c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800a362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a364:	2b00      	cmp	r3, #0
 800a366:	f47f af3f 	bne.w	800a1e8 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3720      	adds	r7, #32
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800a374:	b590      	push	{r4, r7, lr}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <lfs_dir_traverse_filter+0x1e>
 800a38e:	4b23      	ldr	r3, [pc, #140]	; (800a41c <lfs_dir_traverse_filter+0xa8>)
 800a390:	e000      	b.n	800a394 <lfs_dir_traverse_filter+0x20>
 800a392:	4b23      	ldr	r3, [pc, #140]	; (800a420 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800a394:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	405a      	eors	r2, r3
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d014      	beq.n	800a3d0 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7ff fb1d 	bl	80099ea <lfs_tag_isdelete>
 800a3b0:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10c      	bne.n	800a3d0 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	4a18      	ldr	r2, [pc, #96]	; (800a41c <lfs_dir_traverse_filter+0xa8>)
 800a3ba:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	6819      	ldr	r1, [r3, #0]
 800a3c0:	4b18      	ldr	r3, [pc, #96]	; (800a424 <lfs_dir_traverse_filter+0xb0>)
 800a3c2:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a3c4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a3c8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d101      	bne.n	800a3d4 <lfs_dir_traverse_filter+0x60>
        return true;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e01e      	b.n	800a412 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a3d4:	68b8      	ldr	r0, [r7, #8]
 800a3d6:	f7ff fb1b 	bl	8009a10 <lfs_tag_type1>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3e0:	d116      	bne.n	800a410 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800a3e2:	68b8      	ldr	r0, [r7, #8]
 800a3e4:	f7ff fb4e 	bl	8009a84 <lfs_tag_id>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	461c      	mov	r4, r3
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7ff fb47 	bl	8009a84 <lfs_tag_id>
 800a3f6:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a3f8:	429c      	cmp	r4, r3
 800a3fa:	d809      	bhi.n	800a410 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a3fc:	68b8      	ldr	r0, [r7, #8]
 800a3fe:	f7ff fb34 	bl	8009a6a <lfs_tag_splice>
 800a402:	4603      	mov	r3, r0
 800a404:	029a      	lsls	r2, r3, #10
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	441a      	add	r2, r3
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	601a      	str	r2, [r3, #0]
    }

    return false;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	bd90      	pop	{r4, r7, pc}
 800a41a:	bf00      	nop
 800a41c:	7ffffc00 	.word	0x7ffffc00
 800a420:	700ffc00 	.word	0x700ffc00
 800a424:	000ffc00 	.word	0x000ffc00

0800a428 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b09d      	sub	sp, #116	; 0x74
 800a42c:	af0a      	add	r7, sp, #40	; 0x28
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800a436:	6838      	ldr	r0, [r7, #0]
 800a438:	f7ff fb41 	bl	8009abe <lfs_tag_dsize>
 800a43c:	4602      	mov	r2, r0
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	441a      	add	r2, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	429a      	cmp	r2, r3
 800a448:	d233      	bcs.n	800a4b2 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 800a44a:	6838      	ldr	r0, [r7, #0]
 800a44c:	f7ff fb37 	bl	8009abe <lfs_tag_dsize>
 800a450:	4602      	mov	r2, r0
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4413      	add	r3, r2
 800a456:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 800a458:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	681b      	ldr	r3, [r3, #0]
            int err = lfs_bd_read(lfs,
 800a45e:	2204      	movs	r2, #4
 800a460:	9203      	str	r2, [sp, #12]
 800a462:	f107 021c 	add.w	r2, r7, #28
 800a466:	9202      	str	r2, [sp, #8]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	9201      	str	r2, [sp, #4]
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	2304      	movs	r3, #4
 800a470:	460a      	mov	r2, r1
 800a472:	2100      	movs	r1, #0
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f7fe fecd 	bl	8009214 <lfs_bd_read>
 800a47a:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (err) {
 800a47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <lfs_dir_traverse+0x5e>
                return err;
 800a482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a484:	e11e      	b.n	800a6c4 <lfs_dir_traverse+0x29c>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fe fe6e 	bl	800916a <lfs_frombe32>
 800a48e:	4602      	mov	r2, r0
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	4053      	eors	r3, r2
 800a494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a498:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 800a4a6:	f107 0314 	add.w	r3, r7, #20
 800a4aa:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	e011      	b.n	800a4d6 <lfs_dir_traverse+0xae>
        } else if (attrcount > 0) {
 800a4b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dd0c      	ble.n	800a4d2 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 800a4b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 800a4be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 800a4c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4c6:	3308      	adds	r3, #8
 800a4c8:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 800a4ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4d0:	e001      	b.n	800a4d6 <lfs_dir_traverse+0xae>
        } else {
            return 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e0f6      	b.n	800a6c4 <lfs_dir_traverse+0x29c>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800a4d6:	4b7d      	ldr	r3, [pc, #500]	; (800a6cc <lfs_dir_traverse+0x2a4>)
 800a4d8:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800a4da:	69fa      	ldr	r2, [r7, #28]
 800a4dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4de:	405a      	eors	r2, r3
 800a4e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4e4:	400b      	ands	r3, r1
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f040 80e5 	bne.w	800a6b8 <lfs_dir_traverse+0x290>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 800a4ee:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a4f0:	f7ff fac8 	bl	8009a84 <lfs_tag_id>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d038      	beq.n	800a56c <lfs_dir_traverse+0x144>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 800a4fa:	f107 031c 	add.w	r3, r7, #28
 800a4fe:	9308      	str	r3, [sp, #32]
 800a500:	4b73      	ldr	r3, [pc, #460]	; (800a6d0 <lfs_dir_traverse+0x2a8>)
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	2300      	movs	r3, #0
 800a506:	9306      	str	r3, [sp, #24]
 800a508:	2300      	movs	r3, #0
 800a50a:	9305      	str	r3, [sp, #20]
 800a50c:	2300      	movs	r3, #0
 800a50e:	9304      	str	r3, [sp, #16]
 800a510:	2300      	movs	r3, #0
 800a512:	9303      	str	r3, [sp, #12]
 800a514:	2300      	movs	r3, #0
 800a516:	9302      	str	r3, [sp, #8]
 800a518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a51a:	9301      	str	r3, [sp, #4]
 800a51c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7ff ff7e 	bl	800a428 <lfs_dir_traverse>
 800a52c:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 800a52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a530:	2b00      	cmp	r3, #0
 800a532:	da01      	bge.n	800a538 <lfs_dir_traverse+0x110>
                return filter;
 800a534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a536:	e0c5      	b.n	800a6c4 <lfs_dir_traverse+0x29c>
            }

            if (filter) {
 800a538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f040 80be 	bne.w	800a6bc <lfs_dir_traverse+0x294>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff fa9e 	bl	8009a84 <lfs_tag_id>
 800a548:	4603      	mov	r3, r0
 800a54a:	461a      	mov	r2, r3
 800a54c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a550:	4293      	cmp	r3, r2
 800a552:	f200 80b5 	bhi.w	800a6c0 <lfs_dir_traverse+0x298>
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	4618      	mov	r0, r3
 800a55a:	f7ff fa93 	bl	8009a84 <lfs_tag_id>
 800a55e:	4603      	mov	r3, r0
 800a560:	461a      	mov	r2, r3
 800a562:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a566:	4293      	cmp	r3, r2
 800a568:	f240 80aa 	bls.w	800a6c0 <lfs_dir_traverse+0x298>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff fa5e 	bl	8009a30 <lfs_tag_type3>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	f43f af5d 	beq.w	800a436 <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fa56 	bl	8009a30 <lfs_tag_type3>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	f240 1301 	movw	r3, #257	; 0x101
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d136      	bne.n	800a5fe <lfs_dir_traverse+0x1d6>
            uint16_t fromid = lfs_tag_size(tag);
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff fa86 	bl	8009aa4 <lfs_tag_size>
 800a598:	4603      	mov	r3, r0
 800a59a:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fa70 	bl	8009a84 <lfs_tag_id>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 800a5a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	b29b      	uxth	r3, r3
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 800a5ae:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800a5b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a5b2:	1a8a      	subs	r2, r1, r2
 800a5b4:	b291      	uxth	r1, r2
 800a5b6:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800a5ba:	440a      	add	r2, r1
 800a5bc:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 800a5be:	b212      	sxth	r2, r2
 800a5c0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a5c2:	9108      	str	r1, [sp, #32]
 800a5c4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a5c6:	9107      	str	r1, [sp, #28]
 800a5c8:	9206      	str	r2, [sp, #24]
 800a5ca:	9305      	str	r3, [sp, #20]
 800a5cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5ce:	9304      	str	r3, [sp, #16]
 800a5d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a5d4:	9303      	str	r3, [sp, #12]
 800a5d6:	4b3f      	ldr	r3, [pc, #252]	; (800a6d4 <lfs_dir_traverse+0x2ac>)
 800a5d8:	9302      	str	r3, [sp, #8]
 800a5da:	2300      	movs	r3, #0
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff ff1c 	bl	800a428 <lfs_dir_traverse>
 800a5f0:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f43f af1e 	beq.w	800a436 <lfs_dir_traverse+0xe>
                return err;
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	e062      	b.n	800a6c4 <lfs_dir_traverse+0x29c>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff fa15 	bl	8009a30 <lfs_tag_type3>
 800a606:	4603      	mov	r3, r0
 800a608:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800a60c:	d144      	bne.n	800a698 <lfs_dir_traverse+0x270>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a60e:	2300      	movs	r3, #0
 800a610:	643b      	str	r3, [r7, #64]	; 0x40
 800a612:	e038      	b.n	800a686 <lfs_dir_traverse+0x25e>
                const struct lfs_attr *a = buffer;
 800a614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a616:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a61a:	4613      	mov	r3, r2
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	4413      	add	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	461a      	mov	r2, r3
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	4413      	add	r3, r2
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a62e:	051c      	lsls	r4, r3, #20
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff fa26 	bl	8009a84 <lfs_tag_id>
 800a638:	4603      	mov	r3, r0
 800a63a:	461a      	mov	r2, r3
 800a63c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800a640:	4413      	add	r3, r2
 800a642:	029b      	lsls	r3, r3, #10
 800a644:	ea44 0103 	orr.w	r1, r4, r3
 800a648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a64a:	4613      	mov	r3, r2
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	461a      	mov	r2, r3
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	4413      	add	r3, r2
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800a65c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a65e:	4613      	mov	r3, r2
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	4413      	add	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	461a      	mov	r2, r3
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66a:	4413      	add	r3, r2
 800a66c:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a66e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a670:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a672:	4798      	blx	r3
 800a674:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <lfs_dir_traverse+0x258>
                    return err;
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	e021      	b.n	800a6c4 <lfs_dir_traverse+0x29c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a682:	3301      	adds	r3, #1
 800a684:	643b      	str	r3, [r7, #64]	; 0x40
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	4618      	mov	r0, r3
 800a68a:	f7ff fa0b 	bl	8009aa4 <lfs_tag_size>
 800a68e:	4602      	mov	r2, r0
 800a690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a692:	4293      	cmp	r3, r2
 800a694:	d3be      	bcc.n	800a614 <lfs_dir_traverse+0x1ec>
 800a696:	e6ce      	b.n	800a436 <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800a698:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800a69c:	029a      	lsls	r2, r3, #10
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	18d1      	adds	r1, r2, r3
 800a6a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6a6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a6a8:	4798      	blx	r3
 800a6aa:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f43f aec1 	beq.w	800a436 <lfs_dir_traverse+0xe>
                return err;
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	e005      	b.n	800a6c4 <lfs_dir_traverse+0x29c>
            continue;
 800a6b8:	bf00      	nop
 800a6ba:	e6bc      	b.n	800a436 <lfs_dir_traverse+0xe>
                continue;
 800a6bc:	bf00      	nop
 800a6be:	e6ba      	b.n	800a436 <lfs_dir_traverse+0xe>
                continue;
 800a6c0:	bf00      	nop
    while (true) {
 800a6c2:	e6b8      	b.n	800a436 <lfs_dir_traverse+0xe>
            }
        }
    }
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	374c      	adds	r7, #76	; 0x4c
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd90      	pop	{r4, r7, pc}
 800a6cc:	7ff00000 	.word	0x7ff00000
 800a6d0:	0800a375 	.word	0x0800a375
 800a6d4:	600ffc00 	.word	0x600ffc00

0800a6d8 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a6d8:	b590      	push	{r4, r7, lr}
 800a6da:	b09f      	sub	sp, #124	; 0x7c
 800a6dc:	af04      	add	r7, sp, #16
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800a6e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6ea:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d207      	bcs.n	800a70a <lfs_dir_fetchmatch+0x32>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	429a      	cmp	r2, r3
 800a708:	d302      	bcc.n	800a710 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800a70a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a70e:	e340      	b.n	800ad92 <lfs_dir_fetchmatch+0x6ba>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800a710:	2300      	movs	r3, #0
 800a712:	633b      	str	r3, [r7, #48]	; 0x30
 800a714:	2300      	movs	r3, #0
 800a716:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800a71c:	2300      	movs	r3, #0
 800a71e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a720:	e052      	b.n	800a7c8 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800a722:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800a72c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a72e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a732:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a734:	0092      	lsls	r2, r2, #2
 800a736:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800a738:	2104      	movs	r1, #4
 800a73a:	9103      	str	r1, [sp, #12]
 800a73c:	9202      	str	r2, [sp, #8]
 800a73e:	2200      	movs	r2, #0
 800a740:	9201      	str	r2, [sp, #4]
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	2304      	movs	r3, #4
 800a746:	4602      	mov	r2, r0
 800a748:	2100      	movs	r1, #0
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7fe fd62 	bl	8009214 <lfs_bd_read>
 800a750:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800a752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	3368      	adds	r3, #104	; 0x68
 800a758:	443b      	add	r3, r7
 800a75a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fcec 	bl	800913c <lfs_fromle32>
 800a764:	4602      	mov	r2, r0
 800a766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	3368      	adds	r3, #104	; 0x68
 800a76c:	443b      	add	r3, r7
 800a76e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <lfs_dir_fetchmatch+0xac>
 800a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a77e:	d001      	beq.n	800a784 <lfs_dir_fetchmatch+0xac>
            return err;
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	e306      	b.n	800ad92 <lfs_dir_fetchmatch+0x6ba>
        }

        if (err != LFS_ERR_CORRUPT &&
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a78a:	d01a      	beq.n	800a7c2 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800a78c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	3368      	adds	r3, #104	; 0x68
 800a792:	443b      	add	r3, r7
 800a794:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800a798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a79a:	3301      	adds	r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	bfb8      	it	lt
 800a7a4:	425b      	neglt	r3, r3
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	3368      	adds	r3, #104	; 0x68
 800a7aa:	443b      	add	r3, r7
 800a7ac:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	f7fe fcb4 	bl	8009120 <lfs_scmp>
 800a7b8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	dd01      	ble.n	800a7c2 <lfs_dir_fetchmatch+0xea>
            r = i;
 800a7be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7c0:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800a7c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	dda9      	ble.n	800a722 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800a7ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	bfb8      	it	lt
 800a7d8:	425b      	neglt	r3, r3
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	4413      	add	r3, r2
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800a7e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	bfb8      	it	lt
 800a7f2:	425b      	neglt	r3, r3
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800a800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a802:	2b00      	cmp	r3, #0
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	bfb8      	it	lt
 800a80a:	425b      	neglt	r3, r3
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	3368      	adds	r3, #104	; 0x68
 800a810:	443b      	add	r3, r7
 800a812:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2200      	movs	r2, #0
 800a81e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800a820:	2300      	movs	r3, #0
 800a822:	65bb      	str	r3, [r7, #88]	; 0x58
 800a824:	e2a1      	b.n	800ad6a <lfs_dir_fetchmatch+0x692>
        lfs_off_t off = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800a82a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a82e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800a836:	4a96      	ldr	r2, [pc, #600]	; (800aa90 <lfs_dir_fetchmatch+0x3b8>)
 800a838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a83c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a840:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800a844:	2300      	movs	r3, #0
 800a846:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800a84a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a84c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	4618      	mov	r0, r3
 800a854:	f7fe fc7d 	bl	8009152 <lfs_tole32>
 800a858:	4602      	mov	r2, r0
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	3308      	adds	r3, #8
 800a862:	2204      	movs	r2, #4
 800a864:	4619      	mov	r1, r3
 800a866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a86a:	f003 ffe1 	bl	800e830 <lfs_crc>
 800a86e:	4603      	mov	r3, r0
 800a870:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	4618      	mov	r0, r3
 800a878:	f7fe fc60 	bl	800913c <lfs_fromle32>
 800a87c:	4602      	mov	r2, r0
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800a882:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a884:	f7ff f91b 	bl	8009abe <lfs_tag_dsize>
 800a888:	4602      	mov	r2, r0
 800a88a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a88c:	4413      	add	r3, r2
 800a88e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800a890:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a896:	6a58      	ldr	r0, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2204      	movs	r2, #4
 800a89e:	9203      	str	r2, [sp, #12]
 800a8a0:	f107 0220 	add.w	r2, r7, #32
 800a8a4:	9202      	str	r2, [sp, #8]
 800a8a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8a8:	9201      	str	r2, [sp, #4]
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	460a      	mov	r2, r1
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7fe fcae 	bl	8009214 <lfs_bd_read>
 800a8b8:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800a8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d009      	beq.n	800a8d4 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800a8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8c2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a8c6:	d103      	bne.n	800a8d0 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	759a      	strb	r2, [r3, #22]
                    break;
 800a8ce:	e1d4      	b.n	800ac7a <lfs_dir_fetchmatch+0x5a2>
                }
                return err;
 800a8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8d2:	e25e      	b.n	800ad92 <lfs_dir_fetchmatch+0x6ba>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d6:	f107 0120 	add.w	r1, r7, #32
 800a8da:	2204      	movs	r2, #4
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f003 ffa7 	bl	800e830 <lfs_crc>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fe fc3e 	bl	800916a <lfs_frombe32>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8f2:	4053      	eors	r3, r2
 800a8f4:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff f868 	bl	80099ce <lfs_tag_isvalid>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f083 0301 	eor.w	r3, r3, #1
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d01b      	beq.n	800a942 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a90a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a90c:	f7ff f880 	bl	8009a10 <lfs_tag_type1>
 800a910:	4603      	mov	r3, r0
 800a912:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a916:	d10d      	bne.n	800a934 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a920:	6a12      	ldr	r2, [r2, #32]
 800a922:	fbb3 f1f2 	udiv	r1, r3, r2
 800a926:	fb01 f202 	mul.w	r2, r1, r2
 800a92a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <lfs_dir_fetchmatch+0x25c>
 800a930:	2301      	movs	r3, #1
 800a932:	e000      	b.n	800a936 <lfs_dir_fetchmatch+0x25e>
 800a934:	2300      	movs	r3, #0
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	759a      	strb	r2, [r3, #22]
                break;
 800a940:	e19b      	b.n	800ac7a <lfs_dir_fetchmatch+0x5a2>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800a942:	6a3b      	ldr	r3, [r7, #32]
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff f8ba 	bl	8009abe <lfs_tag_dsize>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a94e:	441a      	add	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	429a      	cmp	r2, r3
 800a958:	d903      	bls.n	800a962 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2200      	movs	r2, #0
 800a95e:	759a      	strb	r2, [r3, #22]
                break;
 800a960:	e18b      	b.n	800ac7a <lfs_dir_fetchmatch+0x5a2>
            }

            ptag = tag;
 800a962:	6a3b      	ldr	r3, [r7, #32]
 800a964:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff f851 	bl	8009a10 <lfs_tag_type1>
 800a96e:	4603      	mov	r3, r0
 800a970:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a974:	d164      	bne.n	800aa40 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800a976:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a97c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a984:	3204      	adds	r2, #4
 800a986:	2104      	movs	r1, #4
 800a988:	9103      	str	r1, [sp, #12]
 800a98a:	f107 011c 	add.w	r1, r7, #28
 800a98e:	9102      	str	r1, [sp, #8]
 800a990:	9201      	str	r2, [sp, #4]
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	4623      	mov	r3, r4
 800a996:	4602      	mov	r2, r0
 800a998:	2100      	movs	r1, #0
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f7fe fc3a 	bl	8009214 <lfs_bd_read>
 800a9a0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800a9a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d009      	beq.n	800a9bc <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800a9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9aa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a9ae:	d103      	bne.n	800a9b8 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	759a      	strb	r2, [r3, #22]
                        break;
 800a9b6:	e160      	b.n	800ac7a <lfs_dir_fetchmatch+0x5a2>
                    }
                    return err;
 800a9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800a9ba:	e1ea      	b.n	800ad92 <lfs_dir_fetchmatch+0x6ba>
                }
                dcrc = lfs_fromle32(dcrc);
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fbbc 	bl	800913c <lfs_fromle32>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800a9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d003      	beq.n	800a9d8 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	759a      	strb	r2, [r3, #22]
                    break;
 800a9d6:	e150      	b.n	800ac7a <lfs_dir_fetchmatch+0x5a2>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff f838 	bl	8009a50 <lfs_tag_chunk>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	07db      	lsls	r3, r3, #31
 800a9e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9e6:	4053      	eors	r3, r2
 800a9e8:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a9f2:	2204      	movs	r2, #4
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f003 ff1b 	bl	800e830 <lfs_crc>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800aa00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa02:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800aa04:	6a3b      	ldr	r3, [r7, #32]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7ff f859 	bl	8009abe <lfs_tag_dsize>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa10:	441a      	add	r2, r3
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa1a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800aa22:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800aa24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800aa2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800aa36:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800aa38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa3e:	e720      	b.n	800a882 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800aa40:	2304      	movs	r3, #4
 800aa42:	647b      	str	r3, [r7, #68]	; 0x44
 800aa44:	e032      	b.n	800aaac <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800aa46:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa56:	440a      	add	r2, r1
 800aa58:	2101      	movs	r1, #1
 800aa5a:	9103      	str	r1, [sp, #12]
 800aa5c:	f107 011b 	add.w	r1, r7, #27
 800aa60:	9102      	str	r1, [sp, #8]
 800aa62:	9201      	str	r2, [sp, #4]
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	4623      	mov	r3, r4
 800aa68:	4602      	mov	r2, r0
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f7fe fbd1 	bl	8009214 <lfs_bd_read>
 800aa72:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800aa74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00c      	beq.n	800aa94 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800aa7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa7c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800aa80:	d103      	bne.n	800aa8a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2200      	movs	r2, #0
 800aa86:	759a      	strb	r2, [r3, #22]
 800aa88:	e018      	b.n	800aabc <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800aa8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800aa8c:	e181      	b.n	800ad92 <lfs_dir_fetchmatch+0x6ba>
 800aa8e:	bf00      	nop
 800aa90:	08020f24 	.word	0x08020f24
                }

                crc = lfs_crc(crc, &dat, 1);
 800aa94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa96:	f107 011b 	add.w	r1, r7, #27
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f003 fec7 	bl	800e830 <lfs_crc>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800aaa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	647b      	str	r3, [r7, #68]	; 0x44
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7ff f805 	bl	8009abe <lfs_tag_dsize>
 800aab4:	4602      	mov	r2, r0
 800aab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d3c4      	bcc.n	800aa46 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe ffa6 	bl	8009a10 <lfs_tag_type1>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d113      	bne.n	800aaf2 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe ffd9 	bl	8009a84 <lfs_tag_id>
 800aad2:	4603      	mov	r3, r0
 800aad4:	461a      	mov	r2, r3
 800aad6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aada:	4293      	cmp	r3, r2
 800aadc:	f200 8081 	bhi.w	800abe2 <lfs_dir_fetchmatch+0x50a>
                    tempcount = lfs_tag_id(tag) + 1;
 800aae0:	6a3b      	ldr	r3, [r7, #32]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe ffce 	bl	8009a84 <lfs_tag_id>
 800aae8:	4603      	mov	r3, r0
 800aaea:	3301      	adds	r3, #1
 800aaec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800aaf0:	e077      	b.n	800abe2 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7fe ff8b 	bl	8009a10 <lfs_tag_type1>
 800aafa:	4603      	mov	r3, r0
 800aafc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab00:	d134      	bne.n	800ab6c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800ab02:	6a3b      	ldr	r3, [r7, #32]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe ffb0 	bl	8009a6a <lfs_tag_splice>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ab12:	4413      	add	r3, r2
 800ab14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800ab18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab1a:	4ba0      	ldr	r3, [pc, #640]	; (800ad9c <lfs_dir_fetchmatch+0x6c4>)
 800ab1c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800ab1e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800ab22:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800ab26:	6a3a      	ldr	r2, [r7, #32]
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d104      	bne.n	800ab36 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800ab2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab32:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab34:	e055      	b.n	800abe2 <lfs_dir_fetchmatch+0x50a>
                } else if (tempbesttag != -1 &&
 800ab36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab3c:	d051      	beq.n	800abe2 <lfs_dir_fetchmatch+0x50a>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fe ff9f 	bl	8009a84 <lfs_tag_id>
 800ab46:	4603      	mov	r3, r0
 800ab48:	461c      	mov	r4, r3
 800ab4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe ff99 	bl	8009a84 <lfs_tag_id>
 800ab52:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800ab54:	429c      	cmp	r4, r3
 800ab56:	d844      	bhi.n	800abe2 <lfs_dir_fetchmatch+0x50a>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800ab58:	6a3b      	ldr	r3, [r7, #32]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe ff85 	bl	8009a6a <lfs_tag_splice>
 800ab60:	4603      	mov	r3, r0
 800ab62:	029a      	lsls	r2, r3, #10
 800ab64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab66:	4413      	add	r3, r2
 800ab68:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab6a:	e03a      	b.n	800abe2 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fe ff4e 	bl	8009a10 <lfs_tag_type1>
 800ab74:	4603      	mov	r3, r0
 800ab76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ab7a:	d132      	bne.n	800abe2 <lfs_dir_fetchmatch+0x50a>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe ff66 	bl	8009a50 <lfs_tag_chunk>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bf14      	ite	ne
 800ab8e:	2301      	movne	r3, #1
 800ab90:	2300      	moveq	r3, #0
 800ab92:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800ab96:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aba4:	3204      	adds	r2, #4
 800aba6:	2108      	movs	r1, #8
 800aba8:	9103      	str	r1, [sp, #12]
 800abaa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800abae:	9102      	str	r1, [sp, #8]
 800abb0:	9201      	str	r2, [sp, #4]
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4623      	mov	r3, r4
 800abb6:	4602      	mov	r2, r0
 800abb8:	2100      	movs	r1, #0
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7fe fb2a 	bl	8009214 <lfs_bd_read>
 800abc0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800abc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d007      	beq.n	800abd8 <lfs_dir_fetchmatch+0x500>
                    if (err == LFS_ERR_CORRUPT) {
 800abc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800abce:	d103      	bne.n	800abd8 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	2200      	movs	r2, #0
 800abd4:	759a      	strb	r2, [r3, #22]
                        break;
 800abd6:	e050      	b.n	800ac7a <lfs_dir_fetchmatch+0x5a2>
                    }
                }
                lfs_pair_fromle32(temptail);
 800abd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe fec2 	bl	8009966 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800abe2:	6a3a      	ldr	r2, [r7, #32]
 800abe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abe6:	405a      	eors	r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	4013      	ands	r3, r2
 800abec:	2b00      	cmp	r3, #0
 800abee:	f47f ae48 	bne.w	800a882 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800abf2:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800abf8:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800abfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abfc:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800abfe:	617b      	str	r3, [r7, #20]
 800ac00:	f107 0210 	add.w	r2, r7, #16
 800ac04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac08:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ac0c:	4798      	blx	r3
 800ac0e:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 800ac10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	da09      	bge.n	800ac2a <lfs_dir_fetchmatch+0x552>
                    if (res == LFS_ERR_CORRUPT) {
 800ac16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac18:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ac1c:	d103      	bne.n	800ac26 <lfs_dir_fetchmatch+0x54e>
                        dir->erased = false;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2200      	movs	r2, #0
 800ac22:	759a      	strb	r2, [r3, #22]
 800ac24:	e029      	b.n	800ac7a <lfs_dir_fetchmatch+0x5a2>
                        break;
                    }
                    return res;
 800ac26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800ac28:	e0b3      	b.n	800ad92 <lfs_dir_fetchmatch+0x6ba>
                }

                if (res == LFS_CMP_EQ) {
 800ac2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d102      	bne.n	800ac36 <lfs_dir_fetchmatch+0x55e>
                    // found a match
                    tempbesttag = tag;
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac34:	e625      	b.n	800a882 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800ac36:	6a3a      	ldr	r2, [r7, #32]
 800ac38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac3a:	405a      	eors	r2, r3
 800ac3c:	4b58      	ldr	r3, [pc, #352]	; (800ada0 <lfs_dir_fetchmatch+0x6c8>)
 800ac3e:	4013      	ands	r3, r2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d103      	bne.n	800ac4c <lfs_dir_fetchmatch+0x574>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800ac44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac48:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac4a:	e61a      	b.n	800a882 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 800ac4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	f47f ae17 	bne.w	800a882 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe ff14 	bl	8009a84 <lfs_tag_id>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	461c      	mov	r4, r3
 800ac60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe ff0e 	bl	8009a84 <lfs_tag_id>
 800ac68:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800ac6a:	429c      	cmp	r4, r3
 800ac6c:	f63f ae09 	bhi.w	800a882 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac76:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac78:	e603      	b.n	800a882 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d100      	bne.n	800ac84 <lfs_dir_fetchmatch+0x5ac>
 800ac82:	e05d      	b.n	800ad40 <lfs_dir_fetchmatch+0x668>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	333c      	adds	r3, #60	; 0x3c
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fe ffa1 	bl	8009bd4 <lfs_gstate_hasmovehere>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d028      	beq.n	800acea <lfs_dir_fetchmatch+0x612>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fe fef1 	bl	8009a84 <lfs_tag_id>
 800aca2:	4603      	mov	r3, r0
 800aca4:	461c      	mov	r4, r3
 800aca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fe feeb 	bl	8009a84 <lfs_tag_id>
 800acae:	4603      	mov	r3, r0
 800acb0:	429c      	cmp	r4, r3
 800acb2:	d104      	bne.n	800acbe <lfs_dir_fetchmatch+0x5e6>
                    besttag |= 0x80000000;
 800acb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acba:	667b      	str	r3, [r7, #100]	; 0x64
 800acbc:	e015      	b.n	800acea <lfs_dir_fetchmatch+0x612>
                } else if (besttag != -1 &&
 800acbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc4:	d011      	beq.n	800acea <lfs_dir_fetchmatch+0x612>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe feda 	bl	8009a84 <lfs_tag_id>
 800acd0:	4603      	mov	r3, r0
 800acd2:	461c      	mov	r4, r3
 800acd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe fed4 	bl	8009a84 <lfs_tag_id>
 800acdc:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800acde:	429c      	cmp	r4, r3
 800ace0:	d203      	bcs.n	800acea <lfs_dir_fetchmatch+0x612>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800ace2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ace4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ace8:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800acea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00f      	beq.n	800ad10 <lfs_dir_fetchmatch+0x638>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800acf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe fec6 	bl	8009a84 <lfs_tag_id>
 800acf8:	4603      	mov	r3, r0
 800acfa:	461a      	mov	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	8a9b      	ldrh	r3, [r3, #20]
 800ad00:	4619      	mov	r1, r3
 800ad02:	4610      	mov	r0, r2
 800ad04:	f7fe f9aa 	bl	800905c <lfs_min>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad0e:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 800ad10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe fe5b 	bl	80099ce <lfs_tag_isvalid>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <lfs_dir_fetchmatch+0x64a>
                return besttag;
 800ad1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad20:	e037      	b.n	800ad92 <lfs_dir_fetchmatch+0x6ba>
            } else if (lfs_tag_id(besttag) < dir->count) {
 800ad22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fe fead 	bl	8009a84 <lfs_tag_id>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	8a9b      	ldrh	r3, [r3, #20]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d202      	bcs.n	800ad3c <lfs_dir_fetchmatch+0x664>
                return LFS_ERR_NOENT;
 800ad36:	f06f 0301 	mvn.w	r3, #1
 800ad3a:	e02a      	b.n	800ad92 <lfs_dir_fetchmatch+0x6ba>
            } else {
                return 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	e028      	b.n	800ad92 <lfs_dir_fetchmatch+0x6ba>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe fd88 	bl	8009858 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800ad48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	bfb8      	it	lt
 800ad54:	425b      	neglt	r3, r3
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	3368      	adds	r3, #104	; 0x68
 800ad5a:	443b      	add	r3, r7
 800ad5c:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800ad64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad66:	3301      	adds	r3, #1
 800ad68:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	f77f ad5a 	ble.w	800a826 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	490a      	ldr	r1, [pc, #40]	; (800ada4 <lfs_dir_fetchmatch+0x6cc>)
 800ad7c:	9101      	str	r1, [sp, #4]
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	4613      	mov	r3, r2
 800ad82:	f240 4232 	movw	r2, #1074	; 0x432
 800ad86:	4908      	ldr	r1, [pc, #32]	; (800ada8 <lfs_dir_fetchmatch+0x6d0>)
 800ad88:	4808      	ldr	r0, [pc, #32]	; (800adac <lfs_dir_fetchmatch+0x6d4>)
 800ad8a:	f014 fd9b 	bl	801f8c4 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800ad8e:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	376c      	adds	r7, #108	; 0x6c
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd90      	pop	{r4, r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	000ffc00 	.word	0x000ffc00
 800ada0:	7ffffc00 	.word	0x7ffffc00
 800ada4:	08020ee8 	.word	0x08020ee8
 800ada8:	08020ddc 	.word	0x08020ddc
 800adac:	08020eec 	.word	0x08020eec

0800adb0 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af04      	add	r7, sp, #16
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800adbc:	2300      	movs	r3, #0
 800adbe:	9303      	str	r3, [sp, #12]
 800adc0:	2300      	movs	r3, #0
 800adc2:	9302      	str	r3, [sp, #8]
 800adc4:	2300      	movs	r3, #0
 800adc6:	9301      	str	r3, [sp, #4]
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	68b9      	ldr	r1, [r7, #8]
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7ff fc7e 	bl	800a6d8 <lfs_dir_fetchmatch>
 800addc:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
	...

0800ade8 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08a      	sub	sp, #40	; 0x28
 800adec:	af02      	add	r7, sp, #8
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800adf4:	f107 0310 	add.w	r3, r7, #16
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <lfs_dir_getgstate+0x5c>)
 800adfc:	4a12      	ldr	r2, [pc, #72]	; (800ae48 <lfs_dir_getgstate+0x60>)
 800adfe:	68b9      	ldr	r1, [r7, #8]
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f7ff f9c1 	bl	800a188 <lfs_dir_get>
 800ae06:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	da05      	bge.n	800ae1a <lfs_dir_getgstate+0x32>
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	f113 0f02 	cmn.w	r3, #2
 800ae14:	d001      	beq.n	800ae1a <lfs_dir_getgstate+0x32>
        return res;
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	e00f      	b.n	800ae3a <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	f113 0f02 	cmn.w	r3, #2
 800ae20:	d00a      	beq.n	800ae38 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800ae22:	f107 0310 	add.w	r3, r7, #16
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fe fef4 	bl	8009c14 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800ae2c:	f107 0310 	add.w	r3, r7, #16
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7fe fe57 	bl	8009ae6 <lfs_gstate_xor>
    }

    return 0;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3720      	adds	r7, #32
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	7ff0000c 	.word	0x7ff0000c
 800ae48:	7ff00000 	.word	0x7ff00000

0800ae4c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800ae4c:	b590      	push	{r4, r7, lr}
 800ae4e:	b08f      	sub	sp, #60	; 0x3c
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	689c      	ldr	r4, [r3, #8]
 800ae6a:	68b8      	ldr	r0, [r7, #8]
 800ae6c:	f7fe fe1a 	bl	8009aa4 <lfs_tag_size>
 800ae70:	4603      	mov	r3, r0
 800ae72:	4619      	mov	r1, r3
 800ae74:	4620      	mov	r0, r4
 800ae76:	f7fe f8f1 	bl	800905c <lfs_min>
 800ae7a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800ae7c:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	69fa      	ldr	r2, [r7, #28]
 800ae84:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800ae86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae88:	6849      	ldr	r1, [r1, #4]
 800ae8a:	69b8      	ldr	r0, [r7, #24]
 800ae8c:	9003      	str	r0, [sp, #12]
 800ae8e:	9102      	str	r1, [sp, #8]
 800ae90:	9201      	str	r2, [sp, #4]
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	4622      	mov	r2, r4
 800ae98:	2100      	movs	r1, #0
 800ae9a:	6a38      	ldr	r0, [r7, #32]
 800ae9c:	f7fe fafe 	bl	800949c <lfs_bd_cmp>
 800aea0:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <lfs_dir_find_match+0x60>
        return res;
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	e014      	b.n	800aed6 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	689c      	ldr	r4, [r3, #8]
 800aeb0:	68b8      	ldr	r0, [r7, #8]
 800aeb2:	f7fe fdf7 	bl	8009aa4 <lfs_tag_size>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	429c      	cmp	r4, r3
 800aeba:	d00b      	beq.n	800aed4 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	689c      	ldr	r4, [r3, #8]
 800aec0:	68b8      	ldr	r0, [r7, #8]
 800aec2:	f7fe fdef 	bl	8009aa4 <lfs_tag_size>
 800aec6:	4603      	mov	r3, r0
 800aec8:	429c      	cmp	r4, r3
 800aeca:	d201      	bcs.n	800aed0 <lfs_dir_find_match+0x84>
 800aecc:	2301      	movs	r3, #1
 800aece:	e002      	b.n	800aed6 <lfs_dir_find_match+0x8a>
 800aed0:	2302      	movs	r3, #2
 800aed2:	e000      	b.n	800aed6 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	372c      	adds	r7, #44	; 0x2c
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd90      	pop	{r4, r7, pc}
	...

0800aee0 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800aee0:	b590      	push	{r4, r7, lr}
 800aee2:	b093      	sub	sp, #76	; 0x4c
 800aee4:	af04      	add	r7, sp, #16
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800af00:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800af02:	4b6e      	ldr	r3, [pc, #440]	; (800b0bc <lfs_dir_find+0x1dc>)
 800af04:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a1a      	ldr	r2, [r3, #32]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800af16:	496a      	ldr	r1, [pc, #424]	; (800b0c0 <lfs_dir_find+0x1e0>)
 800af18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800af1a:	f014 fe4f 	bl	801fbbc <strspn>
 800af1e:	4602      	mov	r2, r0
 800af20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af22:	4413      	add	r3, r2
 800af24:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800af26:	4966      	ldr	r1, [pc, #408]	; (800b0c0 <lfs_dir_find+0x1e0>)
 800af28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800af2a:	f014 fe36 	bl	801fb9a <strcspn>
 800af2e:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	2b01      	cmp	r3, #1
 800af34:	d105      	bne.n	800af42 <lfs_dir_find+0x62>
 800af36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af38:	781a      	ldrb	r2, [r3, #0]
 800af3a:	4b62      	ldr	r3, [pc, #392]	; (800b0c4 <lfs_dir_find+0x1e4>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d00a      	beq.n	800af58 <lfs_dir_find+0x78>
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	2b02      	cmp	r3, #2
 800af46:	d10c      	bne.n	800af62 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800af48:	2202      	movs	r2, #2
 800af4a:	495f      	ldr	r1, [pc, #380]	; (800b0c8 <lfs_dir_find+0x1e8>)
 800af4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800af4e:	f014 fdff 	bl	801fb50 <memcmp>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d104      	bne.n	800af62 <lfs_dir_find+0x82>
            name += namelen;
 800af58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	4413      	add	r3, r2
 800af5e:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800af60:	e7d9      	b.n	800af16 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800af62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	4413      	add	r3, r2
 800af68:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800af6a:	2301      	movs	r3, #1
 800af6c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800af6e:	4954      	ldr	r1, [pc, #336]	; (800b0c0 <lfs_dir_find+0x1e0>)
 800af70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af72:	f014 fe23 	bl	801fbbc <strspn>
 800af76:	4602      	mov	r2, r0
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	4413      	add	r3, r2
 800af7c:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800af7e:	4950      	ldr	r1, [pc, #320]	; (800b0c0 <lfs_dir_find+0x1e0>)
 800af80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af82:	f014 fe0a 	bl	801fb9a <strcspn>
 800af86:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d01d      	beq.n	800afca <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800af8e:	6a3b      	ldr	r3, [r7, #32]
 800af90:	2b02      	cmp	r3, #2
 800af92:	d112      	bne.n	800afba <lfs_dir_find+0xda>
 800af94:	2202      	movs	r2, #2
 800af96:	494c      	ldr	r1, [pc, #304]	; (800b0c8 <lfs_dir_find+0x1e8>)
 800af98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af9a:	f014 fdd9 	bl	801fb50 <memcmp>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10a      	bne.n	800afba <lfs_dir_find+0xda>
                depth -= 1;
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	3b01      	subs	r3, #1
 800afa8:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	2b00      	cmp	r3, #0
 800afae:	d107      	bne.n	800afc0 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800afb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	4413      	add	r3, r2
 800afb6:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800afb8:	e7ad      	b.n	800af16 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800afba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbc:	3301      	adds	r3, #1
 800afbe:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 800afc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	4413      	add	r3, r2
 800afc6:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800afc8:	e7d1      	b.n	800af6e <lfs_dir_find+0x8e>
                break;
 800afca:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800afcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d101      	bne.n	800afd8 <lfs_dir_find+0xf8>
            return tag;
 800afd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd6:	e06c      	b.n	800b0b2 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afdc:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe fd25 	bl	8009a30 <lfs_tag_type3>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d002      	beq.n	800aff2 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800afec:	f06f 0313 	mvn.w	r3, #19
 800aff0:	e05f      	b.n	800b0b2 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe fd45 	bl	8009a84 <lfs_tag_id>
 800affa:	4603      	mov	r3, r0
 800affc:	461a      	mov	r2, r3
 800affe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b002:	429a      	cmp	r2, r3
 800b004:	d01c      	beq.n	800b040 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800b006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fe fd3b 	bl	8009a84 <lfs_tag_id>
 800b00e:	4603      	mov	r3, r0
 800b010:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b012:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b016:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b01e:	9200      	str	r2, [sp, #0]
 800b020:	4a2a      	ldr	r2, [pc, #168]	; (800b0cc <lfs_dir_find+0x1ec>)
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7ff f8af 	bl	800a188 <lfs_dir_get>
 800b02a:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	da01      	bge.n	800b036 <lfs_dir_find+0x156>
                return res;
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	e03d      	b.n	800b0b2 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	3318      	adds	r3, #24
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fe fc93 	bl	8009966 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800b046:	212f      	movs	r1, #47	; 0x2f
 800b048:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b04a:	f014 fd99 	bl	801fb80 <strchr>
 800b04e:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <lfs_dir_find+0x178>
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	e000      	b.n	800b05a <lfs_dir_find+0x17a>
 800b058:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	613a      	str	r2, [r7, #16]
 800b05e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b060:	617a      	str	r2, [r7, #20]
 800b062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b064:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b066:	f107 0210 	add.w	r2, r7, #16
 800b06a:	9203      	str	r2, [sp, #12]
 800b06c:	4a18      	ldr	r2, [pc, #96]	; (800b0d0 <lfs_dir_find+0x1f0>)
 800b06e:	9202      	str	r2, [sp, #8]
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800b07a:	4622      	mov	r2, r4
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff fb2a 	bl	800a6d8 <lfs_dir_fetchmatch>
 800b084:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	2b00      	cmp	r3, #0
 800b08a:	da01      	bge.n	800b090 <lfs_dir_find+0x1b0>
                return tag;
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	e010      	b.n	800b0b2 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800b090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b092:	2b00      	cmp	r3, #0
 800b094:	d004      	beq.n	800b0a0 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800b096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	4413      	add	r3, r2
 800b09c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800b09e:	e73a      	b.n	800af16 <lfs_dir_find+0x36>
            if (!dir->split) {
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	7ddb      	ldrb	r3, [r3, #23]
 800b0a4:	f083 0301 	eor.w	r3, r3, #1
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0c8      	beq.n	800b040 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800b0ae:	f06f 0301 	mvn.w	r3, #1
    }
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	373c      	adds	r7, #60	; 0x3c
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd90      	pop	{r4, r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	002ffc00 	.word	0x002ffc00
 800b0c0:	08020f2c 	.word	0x08020f2c
 800b0c4:	08020f30 	.word	0x08020f30
 800b0c8:	08020f34 	.word	0x08020f34
 800b0cc:	700ffc00 	.word	0x700ffc00
 800b0d0:	0800ae4d 	.word	0x0800ae4d

0800b0d4 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800b0d4:	b590      	push	{r4, r7, lr}
 800b0d6:	b08b      	sub	sp, #44	; 0x2c
 800b0d8:	af04      	add	r7, sp, #16
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f103 0010 	add.w	r0, r3, #16
 800b0e8:	68fc      	ldr	r4, [r7, #12]
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	6852      	ldr	r2, [r2, #4]
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	9103      	str	r1, [sp, #12]
 800b0f6:	6879      	ldr	r1, [r7, #4]
 800b0f8:	9102      	str	r1, [sp, #8]
 800b0fa:	9201      	str	r2, [sp, #4]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	2300      	movs	r3, #0
 800b100:	4622      	mov	r2, r4
 800b102:	4601      	mov	r1, r0
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7fe facb 	bl	80096a0 <lfs_bd_prog>
 800b10a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <lfs_dir_commitprog+0x42>
        return err;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	e010      	b.n	800b138 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	6879      	ldr	r1, [r7, #4]
 800b11e:	4618      	mov	r0, r3
 800b120:	f003 fb86 	bl	800e830 <lfs_crc>
 800b124:	4602      	mov	r2, r0
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	441a      	add	r2, r3
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	605a      	str	r2, [r3, #4]
    return 0;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	371c      	adds	r7, #28
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd90      	pop	{r4, r7, pc}

0800b140 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800b140:	b590      	push	{r4, r7, lr}
 800b142:	b08f      	sub	sp, #60	; 0x3c
 800b144:	af04      	add	r7, sp, #16
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
 800b14c:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7fe fcb5 	bl	8009abe <lfs_tag_dsize>
 800b154:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	441a      	add	r2, r3
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	429a      	cmp	r2, r3
 800b164:	d902      	bls.n	800b16c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800b166:	f06f 031b 	mvn.w	r3, #27
 800b16a:	e065      	b.n	800b238 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	4053      	eors	r3, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe f802 	bl	8009182 <lfs_tobe32>
 800b17e:	4603      	mov	r3, r0
 800b180:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800b182:	f107 0214 	add.w	r2, r7, #20
 800b186:	2304      	movs	r3, #4
 800b188:	68b9      	ldr	r1, [r7, #8]
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f7ff ffa2 	bl	800b0d4 <lfs_dir_commitprog>
 800b190:	61f8      	str	r0, [r7, #28]
    if (err) {
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <lfs_dir_commitattr+0x5c>
        return err;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	e04d      	b.n	800b238 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	db0c      	blt.n	800b1bc <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800b1a2:	6a3b      	ldr	r3, [r7, #32]
 800b1a4:	3b04      	subs	r3, #4
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	68b9      	ldr	r1, [r7, #8]
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff ff92 	bl	800b0d4 <lfs_dir_commitprog>
 800b1b0:	61f8      	str	r0, [r7, #28]
        if (err) {
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d039      	beq.n	800b22c <lfs_dir_commitattr+0xec>
            return err;
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	e03d      	b.n	800b238 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	627b      	str	r3, [r7, #36]	; 0x24
 800b1c4:	e02d      	b.n	800b222 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800b1c6:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800b1c8:	6a3a      	ldr	r2, [r7, #32]
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800b1ce:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	69ba      	ldr	r2, [r7, #24]
 800b1d6:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800b1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1da:	440a      	add	r2, r1
 800b1dc:	2101      	movs	r1, #1
 800b1de:	9103      	str	r1, [sp, #12]
 800b1e0:	f107 0113 	add.w	r1, r7, #19
 800b1e4:	9102      	str	r1, [sp, #8]
 800b1e6:	9201      	str	r2, [sp, #4]
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	4623      	mov	r3, r4
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7fe f80f 	bl	8009214 <lfs_bd_read>
 800b1f6:	61f8      	str	r0, [r7, #28]
            if (err) {
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d001      	beq.n	800b202 <lfs_dir_commitattr+0xc2>
                return err;
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	e01a      	b.n	800b238 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800b202:	f107 0213 	add.w	r2, r7, #19
 800b206:	2301      	movs	r3, #1
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff ff62 	bl	800b0d4 <lfs_dir_commitprog>
 800b210:	61f8      	str	r0, [r7, #28]
            if (err) {
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <lfs_dir_commitattr+0xdc>
                return err;
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	e00d      	b.n	800b238 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	3301      	adds	r3, #1
 800b220:	627b      	str	r3, [r7, #36]	; 0x24
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	3b04      	subs	r3, #4
 800b226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b228:	429a      	cmp	r2, r3
 800b22a:	d3cc      	bcc.n	800b1c6 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	609a      	str	r2, [r3, #8]
    return 0;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	372c      	adds	r7, #44	; 0x2c
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd90      	pop	{r4, r7, pc}

0800b240 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800b240:	b590      	push	{r4, r7, lr}
 800b242:	b097      	sub	sp, #92	; 0x5c
 800b244:	af04      	add	r7, sp, #16
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b256:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b258:	4619      	mov	r1, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	f7fd ff23 	bl	80090a6 <lfs_alignup>
 800b260:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800b266:	2300      	movs	r3, #0
 800b268:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800b26a:	e0a6      	b.n	800b3ba <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	3304      	adds	r3, #4
 800b272:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800b274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fd feec 	bl	800905c <lfs_min>
 800b284:	4602      	mov	r2, r0
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	4413      	add	r3, r2
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800b28c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	429a      	cmp	r2, r3
 800b292:	d206      	bcs.n	800b2a2 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	3b08      	subs	r3, #8
 800b298:	4619      	mov	r1, r3
 800b29a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b29c:	f7fd fede 	bl	800905c <lfs_min>
 800b2a0:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800b2a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2a6:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800b2a8:	6879      	ldr	r1, [r7, #4]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2204      	movs	r2, #4
 800b2b0:	9203      	str	r2, [sp, #12]
 800b2b2:	f107 0214 	add.w	r2, r7, #20
 800b2b6:	9202      	str	r2, [sp, #8]
 800b2b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2ba:	9201      	str	r2, [sp, #4]
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	2304      	movs	r3, #4
 800b2c0:	460a      	mov	r2, r1
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7fd ffa5 	bl	8009214 <lfs_bd_read>
 800b2ca:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d005      	beq.n	800b2de <lfs_dir_commitcrc+0x9e>
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b2d8:	d001      	beq.n	800b2de <lfs_dir_commitcrc+0x9e>
            return err;
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	e0e8      	b.n	800b4b0 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fd ff42 	bl	800916a <lfs_frombe32>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	43db      	mvns	r3, r3
 800b2ea:	0fdb      	lsrs	r3, r3, #31
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	bf14      	ite	ne
 800b2f0:	2301      	movne	r3, #1
 800b2f2:	2300      	moveq	r3, #0
 800b2f4:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800b2f6:	7efb      	ldrb	r3, [r7, #27]
 800b2f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2fc:	051a      	lsls	r2, r3, #20
 800b2fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	1acb      	subs	r3, r1, r3
 800b304:	4313      	orrs	r3, r2
 800b306:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800b30a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800b30e:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	689a      	ldr	r2, [r3, #8]
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	4053      	eors	r3, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fd ff32 	bl	8009182 <lfs_tobe32>
 800b31e:	4603      	mov	r3, r0
 800b320:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	f107 010c 	add.w	r1, r7, #12
 800b32a:	2204      	movs	r2, #4
 800b32c:	4618      	mov	r0, r3
 800b32e:	f003 fa7f 	bl	800e830 <lfs_crc>
 800b332:	4602      	mov	r2, r0
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fd ff08 	bl	8009152 <lfs_tole32>
 800b342:	4603      	mov	r3, r0
 800b344:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f103 0010 	add.w	r0, r3, #16
 800b34c:	687c      	ldr	r4, [r7, #4]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	6852      	ldr	r2, [r2, #4]
 800b356:	2108      	movs	r1, #8
 800b358:	9103      	str	r1, [sp, #12]
 800b35a:	f107 010c 	add.w	r1, r7, #12
 800b35e:	9102      	str	r1, [sp, #8]
 800b360:	9201      	str	r2, [sp, #4]
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	2300      	movs	r3, #0
 800b366:	4622      	mov	r2, r4
 800b368:	4601      	mov	r1, r0
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7fe f998 	bl	80096a0 <lfs_bd_prog>
 800b370:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <lfs_dir_commitcrc+0x13c>
            return err;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	e099      	b.n	800b4b0 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800b37c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	3304      	adds	r3, #4
 800b388:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fb86 	bl	8009aa4 <lfs_tag_size>
 800b398:	4603      	mov	r3, r0
 800b39a:	1d1a      	adds	r2, r3, #4
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	441a      	add	r2, r3
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800b3a6:	7efb      	ldrb	r3, [r7, #27]
 800b3a8:	07da      	lsls	r2, r3, #31
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	405a      	eors	r2, r3
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3b8:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	f63f af53 	bhi.w	800b26c <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f103 0110 	add.w	r1, r3, #16
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7fe f931 	bl	8009638 <lfs_bd_sync>
 800b3d6:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <lfs_dir_commitcrc+0x1a2>
        return err;
 800b3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e0:	e066      	b.n	800b4b0 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800b3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ea:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800b3ec:	e05b      	b.n	800b4a6 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800b3ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3f2:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3f8:	e030      	b.n	800b45c <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800b3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d106      	bne.n	800b410 <lfs_dir_commitcrc+0x1d0>
 800b402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b406:	429a      	cmp	r2, r3
 800b408:	d002      	beq.n	800b410 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800b40a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800b40e:	e04f      	b.n	800b4b0 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800b410:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800b412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b416:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800b418:	1d18      	adds	r0, r3, #4
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2201      	movs	r2, #1
 800b420:	9203      	str	r2, [sp, #12]
 800b422:	f107 020b 	add.w	r2, r7, #11
 800b426:	9202      	str	r2, [sp, #8]
 800b428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b42a:	9201      	str	r2, [sp, #4]
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	4603      	mov	r3, r0
 800b430:	460a      	mov	r2, r1
 800b432:	2100      	movs	r1, #0
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7fd feed 	bl	8009214 <lfs_bd_read>
 800b43a:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <lfs_dir_commitcrc+0x206>
                return err;
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	e034      	b.n	800b4b0 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800b446:	f107 030b 	add.w	r3, r7, #11
 800b44a:	2201      	movs	r2, #1
 800b44c:	4619      	mov	r1, r3
 800b44e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b450:	f003 f9ee 	bl	800e830 <lfs_crc>
 800b454:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800b456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b458:	3301      	adds	r3, #1
 800b45a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45e:	3304      	adds	r3, #4
 800b460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b462:	429a      	cmp	r2, r3
 800b464:	d3c9      	bcc.n	800b3fa <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800b46c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800b470:	e01e      	b.n	800b4b0 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800b472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fd fded 	bl	800905c <lfs_min>
 800b482:	4602      	mov	r2, r0
 800b484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b486:	4413      	add	r3, r2
 800b488:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800b48a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	429a      	cmp	r2, r3
 800b490:	d206      	bcs.n	800b4a0 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800b492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b494:	3b08      	subs	r3, #8
 800b496:	4619      	mov	r1, r3
 800b498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b49a:	f7fd fddf 	bl	800905c <lfs_min>
 800b49e:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a2:	3304      	adds	r3, #4
 800b4a4:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800b4a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d39f      	bcc.n	800b3ee <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	374c      	adds	r7, #76	; 0x4c
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd90      	pop	{r4, r7, pc}

0800b4b8 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08a      	sub	sp, #40	; 0x28
 800b4bc:	af04      	add	r7, sp, #16
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	617b      	str	r3, [r7, #20]
 800b4c6:	e016      	b.n	800b4f6 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	bfb8      	it	lt
 800b4d4:	425b      	neglt	r3, r3
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	4413      	add	r3, r2
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7fe fcb8 	bl	8009e54 <lfs_alloc>
 800b4e4:	60f8      	str	r0, [r7, #12]
        if (err) {
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <lfs_dir_alloc+0x38>
            return err;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	e058      	b.n	800b5a2 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	dde5      	ble.n	800b4c8 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2200      	movs	r2, #0
 800b500:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800b502:	6879      	ldr	r1, [r7, #4]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800b50c:	2004      	movs	r0, #4
 800b50e:	9003      	str	r0, [sp, #12]
 800b510:	9202      	str	r2, [sp, #8]
 800b512:	2200      	movs	r2, #0
 800b514:	9201      	str	r2, [sp, #4]
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	2304      	movs	r3, #4
 800b51a:	460a      	mov	r2, r1
 800b51c:	2100      	movs	r1, #0
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7fd fe78 	bl	8009214 <lfs_bd_read>
 800b524:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fd fe06 	bl	800913c <lfs_fromle32>
 800b530:	4602      	mov	r2, r0
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d005      	beq.n	800b548 <lfs_dir_alloc+0x90>
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b542:	d001      	beq.n	800b548 <lfs_dir_alloc+0x90>
        return err;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	e02c      	b.n	800b5a2 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	dd0e      	ble.n	800b570 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	689a      	ldr	r2, [r3, #8]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	3301      	adds	r3, #1
 800b55e:	f043 0301 	orr.w	r3, r3, #1
 800b562:	4619      	mov	r1, r3
 800b564:	4610      	mov	r0, r2
 800b566:	f7fd fd9e 	bl	80090a6 <lfs_alignup>
 800b56a:	4602      	mov	r2, r0
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2204      	movs	r2, #4
 800b574:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b57c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2200      	movs	r2, #0
 800b582:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b58a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b592:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	2200      	movs	r2, #0
 800b598:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2200      	movs	r2, #0
 800b59e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
	...

0800b5ac <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08a      	sub	sp, #40	; 0x28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3348      	adds	r3, #72	; 0x48
 800b5bc:	461a      	mov	r2, r3
 800b5be:	6879      	ldr	r1, [r7, #4]
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f7ff fc11 	bl	800ade8 <lfs_dir_getgstate>
 800b5c6:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <lfs_dir_drop+0x26>
        return err;
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	e022      	b.n	800b618 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3318      	adds	r3, #24
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe f9df 	bl	800999a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	7ddb      	ldrb	r3, [r3, #23]
 800b5e0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800b5e4:	051a      	lsls	r2, r3, #20
 800b5e6:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <lfs_dir_drop+0x74>)
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	61fb      	str	r3, [r7, #28]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	3318      	adds	r3, #24
 800b5f0:	623b      	str	r3, [r7, #32]
 800b5f2:	f107 021c 	add.w	r2, r7, #28
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 fbac 	bl	800bd58 <lfs_dir_commit>
 800b600:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	3318      	adds	r3, #24
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe f9ad 	bl	8009966 <lfs_pair_fromle32>
    if (err) {
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <lfs_dir_drop+0x6a>
        return err;
 800b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b614:	e000      	b.n	800b618 <lfs_dir_drop+0x6c>
    }

    return 0;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3728      	adds	r7, #40	; 0x28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	000ffc08 	.word	0x000ffc08

0800b624 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800b624:	b580      	push	{r7, lr}
 800b626:	b092      	sub	sp, #72	; 0x48
 800b628:	af04      	add	r7, sp, #16
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
 800b630:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_alloc_ack(lfs);
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7fe fbed 	bl	8009e12 <lfs_alloc_ack>
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800b638:	f107 0314 	add.w	r3, r7, #20
 800b63c:	4619      	mov	r1, r3
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff ff3a 	bl	800b4b8 <lfs_dir_alloc>
 800b644:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800b646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <lfs_dir_split+0x2c>
        return err;
 800b64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b64e:	e03c      	b.n	800b6ca <lfs_dir_split+0xa6>
    }

    tail.split = dir->split;
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	7ddb      	ldrb	r3, [r3, #23]
 800b654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800b664:	f107 0114 	add.w	r1, r7, #20
 800b668:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b66c:	9302      	str	r3, [sp, #8]
 800b66e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b672:	9301      	str	r3, [sp, #4]
 800b674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 f853 	bl	800b728 <lfs_dir_compact>
 800b682:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800b684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b686:	2b00      	cmp	r3, #0
 800b688:	d001      	beq.n	800b68e <lfs_dir_split+0x6a>
        return err;
 800b68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68c:	e01d      	b.n	800b6ca <lfs_dir_split+0xa6>
    }

    dir->tail[0] = tail.pair[0];
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	2201      	movs	r2, #1
 800b69e:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3320      	adds	r3, #32
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	f7fe f905 	bl	80098b8 <lfs_pair_cmp>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d109      	bne.n	800b6c8 <lfs_dir_split+0xa4>
 800b6b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d105      	bne.n	800b6c8 <lfs_dir_split+0xa4>
        lfs->root[0] = tail.pair[0];
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800b6c2:	69ba      	ldr	r2, [r7, #24]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3738      	adds	r7, #56	; 0x38
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b086      	sub	sp, #24
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	60f8      	str	r0, [r7, #12]
 800b6da:	60b9      	str	r1, [r7, #8]
 800b6dc:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800b6e2:	68b8      	ldr	r0, [r7, #8]
 800b6e4:	f7fe f9eb 	bl	8009abe <lfs_tag_dsize>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	441a      	add	r2, r3
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	601a      	str	r2, [r3, #0]
    return 0;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3718      	adds	r7, #24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b086      	sub	sp, #24
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	6859      	ldr	r1, [r3, #4]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	f7ff fd11 	bl	800b140 <lfs_dir_commitattr>
 800b71e:	4603      	mov	r3, r0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800b728:	b590      	push	{r4, r7, lr}
 800b72a:	b0ad      	sub	sp, #180	; 0xb4
 800b72c:	af0a      	add	r7, sp, #40	; 0x28
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
 800b734:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	663b      	str	r3, [r7, #96]	; 0x60
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	667b      	str	r3, [r7, #100]	; 0x64
    bool relocated = false;
 800b742:	2300      	movs	r3, #0
 800b744:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool tired = false;
 800b748:	2300      	movs	r3, #0
 800b74a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    // should we split?
    while (end - begin > 1) {
 800b74e:	e08f      	b.n	800b870 <lfs_dir_compact+0x148>
        // find size
        lfs_size_t size = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	65fb      	str	r3, [r7, #92]	; 0x5c
        int err = lfs_dir_traverse(lfs,
 800b754:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b758:	425b      	negs	r3, r3
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	b21b      	sxth	r3, r3
 800b75e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b762:	9208      	str	r2, [sp, #32]
 800b764:	4aa4      	ldr	r2, [pc, #656]	; (800b9f8 <lfs_dir_compact+0x2d0>)
 800b766:	9207      	str	r2, [sp, #28]
 800b768:	9306      	str	r3, [sp, #24]
 800b76a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b76e:	9305      	str	r3, [sp, #20]
 800b770:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b774:	9304      	str	r3, [sp, #16]
 800b776:	2300      	movs	r3, #0
 800b778:	9303      	str	r3, [sp, #12]
 800b77a:	4ba0      	ldr	r3, [pc, #640]	; (800b9fc <lfs_dir_compact+0x2d4>)
 800b77c:	9302      	str	r3, [sp, #8]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f7fe fe49 	bl	800a428 <lfs_dir_traverse>
 800b796:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 800b79a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d002      	beq.n	800b7a8 <lfs_dir_compact+0x80>
            return err;
 800b7a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b7a6:	e2cc      	b.n	800bd42 <lfs_dir_compact+0x61a>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 800b7a8:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b7ac:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	2bfe      	cmp	r3, #254	; 0xfe
 800b7b4:	dc22      	bgt.n	800b7fc <lfs_dir_compact+0xd4>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7bc:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup((lfs->cfg->metadata_max ?
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d004      	beq.n	800b7d4 <lfs_dir_compact+0xac>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b7d0:	085b      	lsrs	r3, r3, #1
 800b7d2:	e003      	b.n	800b7dc <lfs_dir_compact+0xb4>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b7da:	085b      	lsrs	r3, r3, #1
                        lfs->cfg->prog_size))) {
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b7e0:	6a12      	ldr	r2, [r2, #32]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fd fc5e 	bl	80090a6 <lfs_alignup>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f7fd fc34 	bl	800905c <lfs_min>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
        if (end - begin < 0xff &&
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d242      	bcs.n	800b882 <lfs_dir_compact+0x15a>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 800b7fc:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b800:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b804:	1ad3      	subs	r3, r2, r3
 800b806:	0fda      	lsrs	r2, r3, #31
 800b808:	4413      	add	r3, r2
 800b80a:	105b      	asrs	r3, r3, #1
 800b80c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800b810:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800b814:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800b818:	4413      	add	r3, r2
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b820:	9202      	str	r2, [sp, #8]
 800b822:	9301      	str	r3, [sp, #4]
 800b824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	68b9      	ldr	r1, [r7, #8]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7ff fef7 	bl	800b624 <lfs_dir_split>
 800b836:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, begin+split, end);
        if (err) {
 800b83a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00f      	beq.n	800b862 <lfs_dir_compact+0x13a>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800b842:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b846:	f113 0f1c 	cmn.w	r3, #28
 800b84a:	d107      	bne.n	800b85c <lfs_dir_compact+0x134>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800b856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b858:	429a      	cmp	r2, r3
 800b85a:	d214      	bcs.n	800b886 <lfs_dir_compact+0x15e>
                break;
            }
            return err;
 800b85c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b860:	e26f      	b.n	800bd42 <lfs_dir_compact+0x61a>
        }

        end = begin + split;
 800b862:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800b866:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800b86a:	4413      	add	r3, r2
 800b86c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    while (end - begin > 1) {
 800b870:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b874:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	f73f af68 	bgt.w	800b750 <lfs_dir_compact+0x28>
 800b880:	e002      	b.n	800b888 <lfs_dir_compact+0x160>
            break;
 800b882:	bf00      	nop
 800b884:	e000      	b.n	800b888 <lfs_dir_compact+0x160>
                break;
 800b886:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	1c5a      	adds	r2, r3, #1
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	609a      	str	r2, [r3, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dd5b      	ble.n	800b954 <lfs_dir_compact+0x22c>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b8a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b8a6:	3201      	adds	r2, #1
 800b8a8:	f042 0201 	orr.w	r2, r2, #1
 800b8ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8b0:	fb01 f202 	mul.w	r2, r1, r2
 800b8b4:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d14c      	bne.n	800b954 <lfs_dir_compact+0x22c>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	657a      	str	r2, [r7, #84]	; 0x54
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	65ba      	str	r2, [r7, #88]	; 0x58
 800b8c4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fd fff4 	bl	80098b8 <lfs_pair_cmp>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d13a      	bne.n	800b94c <lfs_dir_compact+0x224>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_rawsize(lfs);
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f002 ff32 	bl	800e740 <lfs_fs_rawsize>
 800b8dc:	67b8      	str	r0, [r7, #120]	; 0x78
            if (res < 0) {
 800b8de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da01      	bge.n	800b8e8 <lfs_dir_compact+0x1c0>
                return res;
 800b8e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8e6:	e22c      	b.n	800bd42 <lfs_dir_compact+0x61a>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ee:	085a      	lsrs	r2, r3, #1
 800b8f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d92e      	bls.n	800b954 <lfs_dir_compact+0x22c>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	4a41      	ldr	r2, [pc, #260]	; (800ba00 <lfs_dir_compact+0x2d8>)
 800b8fc:	9200      	str	r2, [sp, #0]
 800b8fe:	f240 626c 	movw	r2, #1644	; 0x66c
 800b902:	4940      	ldr	r1, [pc, #256]	; (800ba04 <lfs_dir_compact+0x2dc>)
 800b904:	4840      	ldr	r0, [pc, #256]	; (800ba08 <lfs_dir_compact+0x2e0>)
 800b906:	f013 ffdd 	bl	801f8c4 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800b90a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b90e:	9302      	str	r3, [sp, #8]
 800b910:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	68b9      	ldr	r1, [r7, #8]
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f7ff fe7e 	bl	800b624 <lfs_dir_split>
 800b928:	6778      	str	r0, [r7, #116]	; 0x74
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 800b92a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d005      	beq.n	800b93c <lfs_dir_compact+0x214>
 800b930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b932:	f113 0f1c 	cmn.w	r3, #28
 800b936:	d001      	beq.n	800b93c <lfs_dir_compact+0x214>
                    return err;
 800b938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b93a:	e202      	b.n	800bd42 <lfs_dir_compact+0x61a>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 800b93c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d108      	bne.n	800b954 <lfs_dir_compact+0x22c>
                    end = begin;
 800b942:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b946:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800b94a:	e003      	b.n	800b954 <lfs_dir_compact+0x22c>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
 800b94c:	2301      	movs	r3, #1
 800b94e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800b952:	e16b      	b.n	800bc2c <lfs_dir_compact+0x504>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b95a:	2300      	movs	r3, #0
 800b95c:	643b      	str	r3, [r7, #64]	; 0x40
 800b95e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b962:	647b      	str	r3, [r7, #68]	; 0x44
 800b964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b968:	64bb      	str	r3, [r7, #72]	; 0x48
 800b96a:	2300      	movs	r3, #0
 800b96c:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800b974:	2b00      	cmp	r3, #0
 800b976:	d004      	beq.n	800b982 <lfs_dir_compact+0x25a>
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b97e:	3b08      	subs	r3, #8
 800b980:	e003      	b.n	800b98a <lfs_dir_compact+0x262>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800b98a:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	4619      	mov	r1, r3
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f7fd ff30 	bl	80097f8 <lfs_bd_erase>
 800b998:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800b99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d006      	beq.n	800b9ae <lfs_dir_compact+0x286>
                if (err == LFS_ERR_CORRUPT) {
 800b9a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9a2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b9a6:	f000 8136 	beq.w	800bc16 <lfs_dir_compact+0x4ee>
                    goto relocate;
                }
                return err;
 800b9aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9ac:	e1c9      	b.n	800bd42 <lfs_dir_compact+0x61a>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fd fbcd 	bl	8009152 <lfs_tole32>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800b9c4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b9c8:	2304      	movs	r3, #4
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff fb82 	bl	800b0d4 <lfs_dir_commitprog>
 800b9d0:	6738      	str	r0, [r7, #112]	; 0x70
            dir->rev = lfs_fromle32(dir->rev);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fd fbb0 	bl	800913c <lfs_fromle32>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	609a      	str	r2, [r3, #8]
            if (err) {
 800b9e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d011      	beq.n	800ba0c <lfs_dir_compact+0x2e4>
                if (err == LFS_ERR_CORRUPT) {
 800b9e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9ea:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b9ee:	f000 8114 	beq.w	800bc1a <lfs_dir_compact+0x4f2>
                    goto relocate;
                }
                return err;
 800b9f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9f4:	e1a5      	b.n	800bd42 <lfs_dir_compact+0x61a>
 800b9f6:	bf00      	nop
 800b9f8:	0800b6d3 	.word	0x0800b6d3
 800b9fc:	400ffc00 	.word	0x400ffc00
 800ba00:	08020ee8 	.word	0x08020ee8
 800ba04:	08020ddc 	.word	0x08020ddc
 800ba08:	08020f38 	.word	0x08020f38
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800ba0c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ba10:	425b      	negs	r3, r3
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	637a      	str	r2, [r7, #52]	; 0x34
 800ba1a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ba1e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800ba20:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ba24:	9208      	str	r2, [sp, #32]
 800ba26:	4aaa      	ldr	r2, [pc, #680]	; (800bcd0 <lfs_dir_compact+0x5a8>)
 800ba28:	9207      	str	r2, [sp, #28]
 800ba2a:	9306      	str	r3, [sp, #24]
 800ba2c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800ba30:	9305      	str	r3, [sp, #20]
 800ba32:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ba36:	9304      	str	r3, [sp, #16]
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9303      	str	r3, [sp, #12]
 800ba3c:	4ba5      	ldr	r3, [pc, #660]	; (800bcd4 <lfs_dir_compact+0x5ac>)
 800ba3e:	9302      	str	r3, [sp, #8]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	9301      	str	r3, [sp, #4]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7fe fce8 	bl	800a428 <lfs_dir_traverse>
 800ba58:	6738      	str	r0, [r7, #112]	; 0x70
                        lfs, &commit});
            if (err) {
 800ba5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d006      	beq.n	800ba6e <lfs_dir_compact+0x346>
                if (err == LFS_ERR_CORRUPT) {
 800ba60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba62:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ba66:	f000 80da 	beq.w	800bc1e <lfs_dir_compact+0x4f6>
                    goto relocate;
                }
                return err;
 800ba6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba6c:	e169      	b.n	800bd42 <lfs_dir_compact+0x61a>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	3318      	adds	r3, #24
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fd ff05 	bl	8009882 <lfs_pair_isnull>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f083 0301 	eor.w	r3, r3, #1
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d022      	beq.n	800baca <lfs_dir_compact+0x3a2>
                lfs_pair_tole32(dir->tail);
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	3318      	adds	r3, #24
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fd ff86 	bl	800999a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	7ddb      	ldrb	r3, [r3, #23]
 800ba92:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800ba96:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800ba98:	4a8f      	ldr	r2, [pc, #572]	; (800bcd8 <lfs_dir_compact+0x5b0>)
 800ba9a:	431a      	orrs	r2, r3
                        dir->tail);
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800baa0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f7ff fb4b 	bl	800b140 <lfs_dir_commitattr>
 800baaa:	6738      	str	r0, [r7, #112]	; 0x70
                lfs_pair_fromle32(dir->tail);
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	3318      	adds	r3, #24
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fd ff58 	bl	8009966 <lfs_pair_fromle32>
                if (err) {
 800bab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d006      	beq.n	800baca <lfs_dir_compact+0x3a2>
                    if (err == LFS_ERR_CORRUPT) {
 800babc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800babe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bac2:	f000 80ae 	beq.w	800bc22 <lfs_dir_compact+0x4fa>
                        goto relocate;
                    }
                    return err;
 800bac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bac8:	e13b      	b.n	800bd42 <lfs_dir_compact+0x61a>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800baca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bace:	2200      	movs	r2, #0
 800bad0:	601a      	str	r2, [r3, #0]
 800bad2:	605a      	str	r2, [r3, #4]
 800bad4:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800bad6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bada:	f083 0301 	eor.w	r3, r3, #1
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d011      	beq.n	800bb08 <lfs_dir_compact+0x3e0>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800baea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800baee:	4611      	mov	r1, r2
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fd fff8 	bl	8009ae6 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bafc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb00:	4611      	mov	r1, r2
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fd ffef 	bl	8009ae6 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800bb0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb12:	4611      	mov	r1, r2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fd ffe6 	bl	8009ae6 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800bb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bb20:	f023 0303 	bic.w	r3, r3, #3
 800bb24:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800bb26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	68b9      	ldr	r1, [r7, #8]
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f7ff f95a 	bl	800ade8 <lfs_dir_getgstate>
 800bb34:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800bb36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <lfs_dir_compact+0x418>
                return err;
 800bb3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb3e:	e100      	b.n	800bd42 <lfs_dir_compact+0x61a>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800bb40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fd fff3 	bl	8009b30 <lfs_gstate_iszero>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	f083 0301 	eor.w	r3, r3, #1
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d016      	beq.n	800bb84 <lfs_dir_compact+0x45c>
                lfs_gstate_tole32(&delta);
 800bb56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fe f87a 	bl	8009c54 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800bb60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb64:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bb68:	4a5c      	ldr	r2, [pc, #368]	; (800bcdc <lfs_dir_compact+0x5b4>)
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7ff fae8 	bl	800b140 <lfs_dir_commitattr>
 800bb70:	6738      	str	r0, [r7, #112]	; 0x70
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800bb72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d005      	beq.n	800bb84 <lfs_dir_compact+0x45c>
                    if (err == LFS_ERR_CORRUPT) {
 800bb78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb7a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bb7e:	d052      	beq.n	800bc26 <lfs_dir_compact+0x4fe>
                        goto relocate;
                    }
                    return err;
 800bb80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb82:	e0de      	b.n	800bd42 <lfs_dir_compact+0x61a>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800bb84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bb88:	4619      	mov	r1, r3
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff fb58 	bl	800b240 <lfs_dir_commitcrc>
 800bb90:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800bb92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d005      	beq.n	800bba4 <lfs_dir_compact+0x47c>
                if (err == LFS_ERR_CORRUPT) {
 800bb98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb9a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bb9e:	d044      	beq.n	800bc2a <lfs_dir_compact+0x502>
                    goto relocate;
                }
                return err;
 800bba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bba2:	e0ce      	b.n	800bd42 <lfs_dir_compact+0x61a>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800bba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bbaa:	6a12      	ldr	r2, [r2, #32]
 800bbac:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbb0:	fb01 f202 	mul.w	r2, r1, r2
 800bbb4:	1a9b      	subs	r3, r3, r2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d006      	beq.n	800bbc8 <lfs_dir_compact+0x4a0>
 800bbba:	4b49      	ldr	r3, [pc, #292]	; (800bce0 <lfs_dir_compact+0x5b8>)
 800bbbc:	4a49      	ldr	r2, [pc, #292]	; (800bce4 <lfs_dir_compact+0x5bc>)
 800bbbe:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 800bbc2:	4849      	ldr	r0, [pc, #292]	; (800bce8 <lfs_dir_compact+0x5c0>)
 800bbc4:	f013 fc02 	bl	801f3cc <__assert_func>
            lfs_pair_swap(dir->pair);
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fd fe44 	bl	8009858 <lfs_pair_swap>
            dir->count = end - begin;
 800bbd0:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800bbd4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800bbe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800bbe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	3348      	adds	r3, #72	; 0x48
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	605a      	str	r2, [r3, #4]
 800bbf6:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800bbf8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bbfc:	f083 0301 	eor.w	r3, r3, #1
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d078      	beq.n	800bcf8 <lfs_dir_compact+0x5d0>
                lfs->gdisk = lfs->gstate;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	333c      	adds	r3, #60	; 0x3c
 800bc0c:	3230      	adds	r2, #48	; 0x30
 800bc0e:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800bc14:	e070      	b.n	800bcf8 <lfs_dir_compact+0x5d0>
                    goto relocate;
 800bc16:	bf00      	nop
 800bc18:	e008      	b.n	800bc2c <lfs_dir_compact+0x504>
                    goto relocate;
 800bc1a:	bf00      	nop
 800bc1c:	e006      	b.n	800bc2c <lfs_dir_compact+0x504>
                    goto relocate;
 800bc1e:	bf00      	nop
 800bc20:	e004      	b.n	800bc2c <lfs_dir_compact+0x504>
                        goto relocate;
 800bc22:	bf00      	nop
 800bc24:	e002      	b.n	800bc2c <lfs_dir_compact+0x504>
                        goto relocate;
 800bc26:	bf00      	nop
 800bc28:	e000      	b.n	800bc2c <lfs_dir_compact+0x504>
                    goto relocate;
 800bc2a:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        lfs_cache_drop(lfs, &lfs->pcache);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	3310      	adds	r3, #16
 800bc36:	4619      	mov	r1, r3
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f7fd fac5 	bl	80091c8 <lfs_cache_drop>
        if (!tired) {
 800bc3e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800bc42:	f083 0301 	eor.w	r3, r3, #1
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d009      	beq.n	800bc60 <lfs_dir_compact+0x538>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	4a26      	ldr	r2, [pc, #152]	; (800bcec <lfs_dir_compact+0x5c4>)
 800bc52:	9200      	str	r2, [sp, #0]
 800bc54:	f240 7202 	movw	r2, #1794	; 0x702
 800bc58:	4923      	ldr	r1, [pc, #140]	; (800bce8 <lfs_dir_compact+0x5c0>)
 800bc5a:	4825      	ldr	r0, [pc, #148]	; (800bcf0 <lfs_dir_compact+0x5c8>)
 800bc5c:	f013 fe32 	bl	801f8c4 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2200      	movs	r2, #0
 800bc64:	617a      	str	r2, [r7, #20]
 800bc66:	2201      	movs	r2, #1
 800bc68:	61ba      	str	r2, [r7, #24]
 800bc6a:	f107 0214 	add.w	r2, r7, #20
 800bc6e:	4611      	mov	r1, r2
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fd fe21 	bl	80098b8 <lfs_pair_cmp>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10c      	bne.n	800bc96 <lfs_dir_compact+0x56e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	4a1a      	ldr	r2, [pc, #104]	; (800bcec <lfs_dir_compact+0x5c4>)
 800bc82:	9200      	str	r2, [sp, #0]
 800bc84:	f240 7207 	movw	r2, #1799	; 0x707
 800bc88:	4917      	ldr	r1, [pc, #92]	; (800bce8 <lfs_dir_compact+0x5c0>)
 800bc8a:	481a      	ldr	r0, [pc, #104]	; (800bcf4 <lfs_dir_compact+0x5cc>)
 800bc8c:	f013 fe1a 	bl	801f8c4 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800bc90:	f06f 031b 	mvn.w	r3, #27
 800bc94:	e055      	b.n	800bd42 <lfs_dir_compact+0x61a>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f7fe f8d9 	bl	8009e54 <lfs_alloc>
 800bca2:	66b8      	str	r0, [r7, #104]	; 0x68
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800bca4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00c      	beq.n	800bcc4 <lfs_dir_compact+0x59c>
 800bcaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcac:	f113 0f1c 	cmn.w	r3, #28
 800bcb0:	d106      	bne.n	800bcc0 <lfs_dir_compact+0x598>
 800bcb2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800bcb6:	f083 0301 	eor.w	r3, r3, #1
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <lfs_dir_compact+0x59c>
            return err;
 800bcc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcc2:	e03e      	b.n	800bd42 <lfs_dir_compact+0x61a>
        }

        tired = false;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        continue;
 800bcca:	bf00      	nop
    while (true) {
 800bccc:	e642      	b.n	800b954 <lfs_dir_compact+0x22c>
 800bcce:	bf00      	nop
 800bcd0:	0800b6ff 	.word	0x0800b6ff
 800bcd4:	400ffc00 	.word	0x400ffc00
 800bcd8:	000ffc08 	.word	0x000ffc08
 800bcdc:	7ffffc0c 	.word	0x7ffffc0c
 800bce0:	08020f68 	.word	0x08020f68
 800bce4:	080250cc 	.word	0x080250cc
 800bce8:	08020ddc 	.word	0x08020ddc
 800bcec:	08020ee8 	.word	0x08020ee8
 800bcf0:	08020f90 	.word	0x08020f90
 800bcf4:	08020fb4 	.word	0x08020fb4
        break;
 800bcf8:	bf00      	nop
    }

    if (relocated) {
 800bcfa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d01e      	beq.n	800bd40 <lfs_dir_compact+0x618>
        // update references if we relocated
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800bd02:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800bd04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	6812      	ldr	r2, [r2, #0]
 800bd0a:	68b9      	ldr	r1, [r7, #8]
 800bd0c:	6849      	ldr	r1, [r1, #4]
 800bd0e:	4c0f      	ldr	r4, [pc, #60]	; (800bd4c <lfs_dir_compact+0x624>)
 800bd10:	9403      	str	r4, [sp, #12]
 800bd12:	9102      	str	r1, [sp, #8]
 800bd14:	9201      	str	r2, [sp, #4]
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	4603      	mov	r3, r0
 800bd1a:	f44f 62e3 	mov.w	r2, #1816	; 0x718
 800bd1e:	490c      	ldr	r1, [pc, #48]	; (800bd50 <lfs_dir_compact+0x628>)
 800bd20:	480c      	ldr	r0, [pc, #48]	; (800bd54 <lfs_dir_compact+0x62c>)
 800bd22:	f013 fdcf 	bl	801f8c4 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	68f8      	ldr	r0, [r7, #12]
 800bd30:	f002 f98e 	bl	800e050 <lfs_fs_relocate>
 800bd34:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800bd36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <lfs_dir_compact+0x618>
            return err;
 800bd3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd3e:	e000      	b.n	800bd42 <lfs_dir_compact+0x61a>
        }
    }

    return 0;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	378c      	adds	r7, #140	; 0x8c
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd90      	pop	{r4, r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	08020ee8 	.word	0x08020ee8
 800bd50:	08020ddc 	.word	0x08020ddc
 800bd54:	08020fec 	.word	0x08020fec

0800bd58 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800bd58:	b5b0      	push	{r4, r5, r7, lr}
 800bd5a:	b0b8      	sub	sp, #224	; 0xe0
 800bd5c:	af0a      	add	r7, sp, #40	; 0x28
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd6e:	e045      	b.n	800bdfc <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800bd70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd74:	3308      	adds	r3, #8
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d03a      	beq.n	800bdf2 <lfs_dir_commit+0x9a>
 800bd7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd80:	3308      	adds	r3, #8
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	4611      	mov	r1, r2
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fd fd96 	bl	80098b8 <lfs_pair_cmp>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d12f      	bne.n	800bdf2 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800bd92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd96:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d12a      	bne.n	800bdf2 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800bd9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d023      	beq.n	800bdf2 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800bdaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d91b      	bls.n	800bdf2 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800bdba:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 ffbe 	bl	800cd40 <lfs_file_outline>
 800bdc4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800bdc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <lfs_dir_commit+0x7e>
                return err;
 800bdd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdd4:	e36e      	b.n	800c4b4 <lfs_dir_commit+0x75c>
            }

            err = lfs_file_flush(lfs, f);
 800bdd6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 ffd2 	bl	800cd84 <lfs_file_flush>
 800bde0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800bde4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <lfs_dir_commit+0x9a>
                return err;
 800bdec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdf0:	e360      	b.n	800c4b4 <lfs_dir_commit+0x75c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bdf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bdfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1b5      	bne.n	800bd70 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800be0a:	461d      	mov	r5, r3
 800be0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800be14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bool hasdelete = false;
 800be18:	2300      	movs	r3, #0
 800be1a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    for (int i = 0; i < attrcount; i++) {
 800be1e:	2300      	movs	r3, #0
 800be20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be24:	e075      	b.n	800bf12 <lfs_dir_commit+0x1ba>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800be26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be2a:	00db      	lsls	r3, r3, #3
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	4413      	add	r3, r2
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4618      	mov	r0, r3
 800be34:	f7fd fdfc 	bl	8009a30 <lfs_tag_type3>
 800be38:	4603      	mov	r3, r0
 800be3a:	461a      	mov	r2, r3
 800be3c:	f240 4301 	movw	r3, #1025	; 0x401
 800be40:	429a      	cmp	r2, r3
 800be42:	d106      	bne.n	800be52 <lfs_dir_commit+0xfa>
            dir->count += 1;
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	8a9b      	ldrh	r3, [r3, #20]
 800be48:	3301      	adds	r3, #1
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	829a      	strh	r2, [r3, #20]
 800be50:	e05a      	b.n	800bf08 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800be52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be56:	00db      	lsls	r3, r3, #3
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	4413      	add	r3, r2
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fd fde6 	bl	8009a30 <lfs_tag_type3>
 800be64:	4603      	mov	r3, r0
 800be66:	461a      	mov	r2, r3
 800be68:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d114      	bne.n	800be9a <lfs_dir_commit+0x142>
            LFS_ASSERT(dir->count > 0);
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	8a9b      	ldrh	r3, [r3, #20]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <lfs_dir_commit+0x12e>
 800be78:	4bac      	ldr	r3, [pc, #688]	; (800c12c <lfs_dir_commit+0x3d4>)
 800be7a:	4aad      	ldr	r2, [pc, #692]	; (800c130 <lfs_dir_commit+0x3d8>)
 800be7c:	f240 7141 	movw	r1, #1857	; 0x741
 800be80:	48ac      	ldr	r0, [pc, #688]	; (800c134 <lfs_dir_commit+0x3dc>)
 800be82:	f013 faa3 	bl	801f3cc <__assert_func>
            dir->count -= 1;
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	8a9b      	ldrh	r3, [r3, #20]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800be92:	2301      	movs	r3, #1
 800be94:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800be98:	e036      	b.n	800bf08 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800be9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be9e:	00db      	lsls	r3, r3, #3
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	4413      	add	r3, r2
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fd fdb2 	bl	8009a10 <lfs_tag_type1>
 800beac:	4603      	mov	r3, r0
 800beae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800beb2:	d129      	bne.n	800bf08 <lfs_dir_commit+0x1b0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800beb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800beb8:	00db      	lsls	r3, r3, #3
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	4413      	add	r3, r2
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800bec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	4413      	add	r3, r2
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800bed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bedc:	00db      	lsls	r3, r3, #3
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	4413      	add	r3, r2
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fd fdb3 	bl	8009a50 <lfs_tag_chunk>
 800beea:	4603      	mov	r3, r0
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	bf14      	ite	ne
 800bef4:	2301      	movne	r3, #1
 800bef6:	2300      	moveq	r3, #0
 800bef8:	b2da      	uxtb	r2, r3
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	3318      	adds	r3, #24
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fd fd2f 	bl	8009966 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800bf08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	db84      	blt.n	800be26 <lfs_dir_commit+0xce>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800bf1c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d045      	beq.n	800bfb0 <lfs_dir_commit+0x258>
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	8a9b      	ldrh	r3, [r3, #20]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d141      	bne.n	800bfb0 <lfs_dir_commit+0x258>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	f107 0214 	add.w	r2, r7, #20
 800bf32:	4619      	mov	r1, r3
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f001 ffab 	bl	800de90 <lfs_fs_pred>
 800bf3a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err && err != LFS_ERR_NOENT) {
 800bf3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d011      	beq.n	800bf6a <lfs_dir_commit+0x212>
 800bf46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf4a:	f113 0f02 	cmn.w	r3, #2
 800bf4e:	d00c      	beq.n	800bf6a <lfs_dir_commit+0x212>
            *dir = olddir;
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	461d      	mov	r5, r3
 800bf54:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800bf58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bf60:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800bf64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf68:	e2a4      	b.n	800c4b4 <lfs_dir_commit+0x75c>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 800bf6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf6e:	f113 0f02 	cmn.w	r3, #2
 800bf72:	d01d      	beq.n	800bfb0 <lfs_dir_commit+0x258>
 800bf74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d019      	beq.n	800bfb0 <lfs_dir_commit+0x258>
            err = lfs_dir_drop(lfs, &pdir, dir);
 800bf7c:	f107 0314 	add.w	r3, r7, #20
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	4619      	mov	r1, r3
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f7ff fb11 	bl	800b5ac <lfs_dir_drop>
 800bf8a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (err) {
 800bf8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00c      	beq.n	800bfb0 <lfs_dir_commit+0x258>
                *dir = olddir;
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	461d      	mov	r5, r3
 800bf9a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800bf9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfa2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bfa6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800bfaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfae:	e281      	b.n	800c4b4 <lfs_dir_commit+0x75c>
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	7d9b      	ldrb	r3, [r3, #22]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <lfs_dir_commit+0x26a>
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	8a9b      	ldrh	r3, [r3, #20]
 800bfbc:	2bfe      	cmp	r3, #254	; 0xfe
 800bfbe:	f240 8130 	bls.w	800c222 <lfs_dir_commit+0x4ca>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800bfc6:	657b      	str	r3, [r7, #84]	; 0x54
            .off = dir->off,
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800bfcc:	65bb      	str	r3, [r7, #88]	; 0x58
            .ptag = dir->etag,
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800bfd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfd8:	663b      	str	r3, [r7, #96]	; 0x60
            .crc = 0xffffffff,

            .begin = dir->off,
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800bfde:	667b      	str	r3, [r7, #100]	; 0x64
            .end = (lfs->cfg->metadata_max ?
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d004      	beq.n	800bff4 <lfs_dir_commit+0x29c>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff0:	3b08      	subs	r3, #8
 800bff2:	e003      	b.n	800bffc <lfs_dir_commit+0x2a4>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffa:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800bffc:	66bb      	str	r3, [r7, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	3318      	adds	r3, #24
 800c002:	4618      	mov	r0, r3
 800c004:	f7fd fcc9 	bl	800999a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	68da      	ldr	r2, [r3, #12]
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c014:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c018:	653b      	str	r3, [r7, #80]	; 0x50
        int err = lfs_dir_traverse(lfs,
 800c01a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c01e:	9308      	str	r3, [sp, #32]
 800c020:	4b45      	ldr	r3, [pc, #276]	; (800c138 <lfs_dir_commit+0x3e0>)
 800c022:	9307      	str	r3, [sp, #28]
 800c024:	2300      	movs	r3, #0
 800c026:	9306      	str	r3, [sp, #24]
 800c028:	2300      	movs	r3, #0
 800c02a:	9305      	str	r3, [sp, #20]
 800c02c:	2300      	movs	r3, #0
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	2300      	movs	r3, #0
 800c032:	9303      	str	r3, [sp, #12]
 800c034:	2300      	movs	r3, #0
 800c036:	9302      	str	r3, [sp, #8]
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	9301      	str	r3, [sp, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	460b      	mov	r3, r1
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f7fe f9ef 	bl	800a428 <lfs_dir_traverse>
 800c04a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	3318      	adds	r3, #24
 800c052:	4618      	mov	r0, r3
 800c054:	f7fd fc87 	bl	8009966 <lfs_pair_fromle32>
        if (err) {
 800c058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d018      	beq.n	800c092 <lfs_dir_commit+0x33a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c064:	f113 0f1c 	cmn.w	r3, #28
 800c068:	f000 80dd 	beq.w	800c226 <lfs_dir_commit+0x4ce>
 800c06c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c070:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c074:	f000 80d7 	beq.w	800c226 <lfs_dir_commit+0x4ce>
                goto compact;
            }
            *dir = olddir;
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	461d      	mov	r5, r3
 800c07c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c084:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c088:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800c08c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c090:	e210      	b.n	800c4b4 <lfs_dir_commit+0x75c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800c092:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c096:	2200      	movs	r2, #0
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	605a      	str	r2, [r3, #4]
 800c09c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7fd fd1b 	bl	8009ae6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c0b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fd fd12 	bl	8009ae6 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800c0c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fd fd09 	bl	8009ae6 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800c0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c0da:	f023 0303 	bic.w	r3, r3, #3
 800c0de:	643b      	str	r3, [r7, #64]	; 0x40
        if (!lfs_gstate_iszero(&delta)) {
 800c0e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fd fd23 	bl	8009b30 <lfs_gstate_iszero>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	f083 0301 	eor.w	r3, r3, #1
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d04c      	beq.n	800c190 <lfs_dir_commit+0x438>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800c0f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	68b9      	ldr	r1, [r7, #8]
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f7fe fe72 	bl	800ade8 <lfs_dir_getgstate>
 800c104:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 800c108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d015      	beq.n	800c13c <lfs_dir_commit+0x3e4>
                *dir = olddir;
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	461d      	mov	r5, r3
 800c114:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c11a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c11c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c120:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800c124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c128:	e1c4      	b.n	800c4b4 <lfs_dir_commit+0x75c>
 800c12a:	bf00      	nop
 800c12c:	08021028 	.word	0x08021028
 800c130:	080250dc 	.word	0x080250dc
 800c134:	08020ddc 	.word	0x08020ddc
 800c138:	0800b6ff 	.word	0x0800b6ff
            }

            lfs_gstate_tole32(&delta);
 800c13c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c140:	4618      	mov	r0, r3
 800c142:	f7fd fd87 	bl	8009c54 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800c146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c14a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800c14e:	4aba      	ldr	r2, [pc, #744]	; (800c438 <lfs_dir_commit+0x6e0>)
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	f7fe fff5 	bl	800b140 <lfs_dir_commitattr>
 800c156:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800c15a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d016      	beq.n	800c190 <lfs_dir_commit+0x438>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c162:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c166:	f113 0f1c 	cmn.w	r3, #28
 800c16a:	d05e      	beq.n	800c22a <lfs_dir_commit+0x4d2>
 800c16c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c170:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c174:	d059      	beq.n	800c22a <lfs_dir_commit+0x4d2>
                    goto compact;
                }
                *dir = olddir;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	461d      	mov	r5, r3
 800c17a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c17e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c182:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c186:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800c18a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c18e:	e191      	b.n	800c4b4 <lfs_dir_commit+0x75c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800c190:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c194:	4619      	mov	r1, r3
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7ff f852 	bl	800b240 <lfs_dir_commitcrc>
 800c19c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if (err) {
 800c1a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d016      	beq.n	800c1d6 <lfs_dir_commit+0x47e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c1a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1ac:	f113 0f1c 	cmn.w	r3, #28
 800c1b0:	d03d      	beq.n	800c22e <lfs_dir_commit+0x4d6>
 800c1b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1b6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c1ba:	d038      	beq.n	800c22e <lfs_dir_commit+0x4d6>
                goto compact;
            }
            *dir = olddir;
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	461d      	mov	r5, r3
 800c1c0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c1c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c1cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800c1d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1d4:	e16e      	b.n	800c4b4 <lfs_dir_commit+0x75c>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800c1d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c1dc:	6a12      	ldr	r2, [r2, #32]
 800c1de:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1e2:	fb01 f202 	mul.w	r2, r1, r2
 800c1e6:	1a9b      	subs	r3, r3, r2
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d006      	beq.n	800c1fa <lfs_dir_commit+0x4a2>
 800c1ec:	4b93      	ldr	r3, [pc, #588]	; (800c43c <lfs_dir_commit+0x6e4>)
 800c1ee:	4a94      	ldr	r2, [pc, #592]	; (800c440 <lfs_dir_commit+0x6e8>)
 800c1f0:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 800c1f4:	4893      	ldr	r0, [pc, #588]	; (800c444 <lfs_dir_commit+0x6ec>)
 800c1f6:	f013 f8e9 	bl	801f3cc <__assert_func>
        dir->off = commit.off;
 800c1fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800c200:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	333c      	adds	r3, #60	; 0x3c
 800c20c:	3230      	adds	r2, #48	; 0x30
 800c20e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c210:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3348      	adds	r3, #72	; 0x48
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	605a      	str	r2, [r3, #4]
 800c21e:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 800c220:	e02c      	b.n	800c27c <lfs_dir_commit+0x524>
    } else {
compact:
 800c222:	bf00      	nop
 800c224:	e004      	b.n	800c230 <lfs_dir_commit+0x4d8>
                goto compact;
 800c226:	bf00      	nop
 800c228:	e002      	b.n	800c230 <lfs_dir_commit+0x4d8>
                    goto compact;
 800c22a:	bf00      	nop
 800c22c:	e000      	b.n	800c230 <lfs_dir_commit+0x4d8>
                goto compact;
 800c22e:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3310      	adds	r3, #16
 800c234:	4619      	mov	r1, r3
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f7fc ffc6 	bl	80091c8 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	8a9b      	ldrh	r3, [r3, #20]
 800c240:	9302      	str	r3, [sp, #8]
 800c242:	2300      	movs	r3, #0
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	68b9      	ldr	r1, [r7, #8]
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f7ff fa69 	bl	800b728 <lfs_dir_compact>
 800c256:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                dir, 0, dir->count);
        if (err) {
 800c25a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00c      	beq.n	800c27c <lfs_dir_commit+0x524>
            *dir = olddir;
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	461d      	mov	r5, r3
 800c266:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c26a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c26c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c26e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c272:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800c276:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c27a:	e11b      	b.n	800c4b4 <lfs_dir_commit+0x75c>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c284:	e0c1      	b.n	800c40a <lfs_dir_commit+0x6b2>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800c286:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c28a:	3308      	adds	r3, #8
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	429a      	cmp	r2, r3
 800c290:	f000 80b6 	beq.w	800c400 <lfs_dir_commit+0x6a8>
 800c294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c298:	3308      	adds	r3, #8
 800c29a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c29e:	4611      	mov	r1, r2
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fd fb09 	bl	80098b8 <lfs_pair_cmp>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f040 80a9 	bne.w	800c400 <lfs_dir_commit+0x6a8>
            d->m = *dir;
 800c2ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	f103 0408 	add.w	r4, r3, #8
 800c2b8:	4615      	mov	r5, r2
 800c2ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c2c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c2cc:	e092      	b.n	800c3f4 <lfs_dir_commit+0x69c>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c2ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fd fba8 	bl	8009a30 <lfs_tag_type3>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d119      	bne.n	800c320 <lfs_dir_commit+0x5c8>
                        d->id == lfs_tag_id(attrs[i].tag)) {
 800c2ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2f0:	889c      	ldrh	r4, [r3, #4]
 800c2f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fd fbc0 	bl	8009a84 <lfs_tag_id>
 800c304:	4603      	mov	r3, r0
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c306:	429c      	cmp	r4, r3
 800c308:	d10a      	bne.n	800c320 <lfs_dir_commit+0x5c8>
                    d->m.pair[0] = LFS_BLOCK_NULL;
 800c30a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c30e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c312:	609a      	str	r2, [r3, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
 800c314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c31c:	60da      	str	r2, [r3, #12]
 800c31e:	e064      	b.n	800c3ea <lfs_dir_commit+0x692>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c320:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	4413      	add	r3, r2
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fd fb7f 	bl	8009a30 <lfs_tag_type3>
 800c332:	4603      	mov	r3, r0
 800c334:	461a      	mov	r2, r3
 800c336:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d123      	bne.n	800c386 <lfs_dir_commit+0x62e>
                        d->id > lfs_tag_id(attrs[i].tag)) {
 800c33e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c342:	889c      	ldrh	r4, [r3, #4]
 800c344:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c348:	00db      	lsls	r3, r3, #3
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	4413      	add	r3, r2
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4618      	mov	r0, r3
 800c352:	f7fd fb97 	bl	8009a84 <lfs_tag_id>
 800c356:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c358:	429c      	cmp	r4, r3
 800c35a:	d914      	bls.n	800c386 <lfs_dir_commit+0x62e>
                    d->id -= 1;
 800c35c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c360:	889b      	ldrh	r3, [r3, #4]
 800c362:	3b01      	subs	r3, #1
 800c364:	b29a      	uxth	r2, r3
 800c366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c36a:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800c36c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c370:	799b      	ldrb	r3, [r3, #6]
 800c372:	2b02      	cmp	r3, #2
 800c374:	d139      	bne.n	800c3ea <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos -= 1;
 800c376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37c:	1e5a      	subs	r2, r3, #1
 800c37e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c382:	629a      	str	r2, [r3, #40]	; 0x28
                    if (d->type == LFS_TYPE_DIR) {
 800c384:	e031      	b.n	800c3ea <lfs_dir_commit+0x692>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800c386:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	4413      	add	r3, r2
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4618      	mov	r0, r3
 800c394:	f7fd fb4c 	bl	8009a30 <lfs_tag_type3>
 800c398:	4603      	mov	r3, r0
 800c39a:	461a      	mov	r2, r3
 800c39c:	f240 4301 	movw	r3, #1025	; 0x401
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d122      	bne.n	800c3ea <lfs_dir_commit+0x692>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
 800c3a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3a8:	889c      	ldrh	r4, [r3, #4]
 800c3aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c3ae:	00db      	lsls	r3, r3, #3
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fd fb64 	bl	8009a84 <lfs_tag_id>
 800c3bc:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800c3be:	429c      	cmp	r4, r3
 800c3c0:	d313      	bcc.n	800c3ea <lfs_dir_commit+0x692>
                    d->id += 1;
 800c3c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3c6:	889b      	ldrh	r3, [r3, #4]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3d0:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800c3d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3d6:	799b      	ldrb	r3, [r3, #6]
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d106      	bne.n	800c3ea <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos += 1;
 800c3dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3e8:	629a      	str	r2, [r3, #40]	; 0x28
            for (int i = 0; i < attrcount; i++) {
 800c3ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c3f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	f6ff af67 	blt.w	800c2ce <lfs_dir_commit+0x576>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c40a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f47f af39 	bne.w	800c286 <lfs_dir_commit+0x52e>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c418:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c41c:	e045      	b.n	800c4aa <lfs_dir_commit+0x752>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800c41e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c422:	3308      	adds	r3, #8
 800c424:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c428:	4611      	mov	r1, r2
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fd fa44 	bl	80098b8 <lfs_pair_cmp>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d134      	bne.n	800c4a0 <lfs_dir_commit+0x748>
            while (d->id >= d->m.count && d->m.split) {
 800c436:	e026      	b.n	800c486 <lfs_dir_commit+0x72e>
 800c438:	7ffffc0c 	.word	0x7ffffc0c
 800c43c:	08020f68 	.word	0x08020f68
 800c440:	080250dc 	.word	0x080250dc
 800c444:	08020ddc 	.word	0x08020ddc
                // we split and id is on tail now
                d->id -= d->m.count;
 800c448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c44c:	889a      	ldrh	r2, [r3, #4]
 800c44e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c452:	8b9b      	ldrh	r3, [r3, #28]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	b29a      	uxth	r2, r3
 800c458:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c45c:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800c45e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c462:	f103 0108 	add.w	r1, r3, #8
 800c466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c46a:	3320      	adds	r3, #32
 800c46c:	461a      	mov	r2, r3
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f7fe fc9e 	bl	800adb0 <lfs_dir_fetch>
 800c474:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 800c478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <lfs_dir_commit+0x72e>
                    return err;
 800c480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c484:	e016      	b.n	800c4b4 <lfs_dir_commit+0x75c>
            while (d->id >= d->m.count && d->m.split) {
 800c486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c48a:	889a      	ldrh	r2, [r3, #4]
 800c48c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c490:	8b9b      	ldrh	r3, [r3, #28]
 800c492:	429a      	cmp	r2, r3
 800c494:	d304      	bcc.n	800c4a0 <lfs_dir_commit+0x748>
 800c496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c49a:	7fdb      	ldrb	r3, [r3, #31]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1d3      	bne.n	800c448 <lfs_dir_commit+0x6f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c4a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1b5      	bne.n	800c41e <lfs_dir_commit+0x6c6>
                }
            }
        }
    }

    return 0;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	37b8      	adds	r7, #184	; 0xb8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bdb0      	pop	{r4, r5, r7, pc}

0800c4bc <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 800c4bc:	b5b0      	push	{r4, r5, r7, lr}
 800c4be:	b0b8      	sub	sp, #224	; 0xe0
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f002 f90c 	bl	800e6e4 <lfs_fs_forceconsistency>
 800c4cc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800c4d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <lfs_rawmkdir+0x22>
        return err;
 800c4d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4dc:	e128      	b.n	800c730 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 800c4e6:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 800c4ea:	463a      	mov	r2, r7
 800c4ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c4f0:	f103 0108 	add.w	r1, r3, #8
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7fe fcf2 	bl	800aee0 <lfs_dir_find>
 800c4fc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 800c500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c504:	f113 0f02 	cmn.w	r3, #2
 800c508:	d105      	bne.n	800c516 <lfs_rawmkdir+0x5a>
 800c50a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c50e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c512:	4293      	cmp	r3, r2
 800c514:	d109      	bne.n	800c52a <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 800c516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	da02      	bge.n	800c524 <lfs_rawmkdir+0x68>
 800c51e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c522:	e105      	b.n	800c730 <lfs_rawmkdir+0x274>
 800c524:	f06f 0310 	mvn.w	r3, #16
 800c528:	e102      	b.n	800c730 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7f3 fe4f 	bl	80001d0 <strlen>
 800c532:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c53a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800c53e:	429a      	cmp	r2, r3
 800c540:	d902      	bls.n	800c548 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 800c542:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800c546:	e0f3      	b.n	800c730 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7fd fc62 	bl	8009e12 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 800c54e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7fe ffaf 	bl	800b4b8 <lfs_dir_alloc>
 800c55a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800c55e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <lfs_rawmkdir+0xb0>
        return err;
 800c566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c56a:	e0e1      	b.n	800c730 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 800c56c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c570:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800c574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c578:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c57c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 800c580:	e012      	b.n	800c5a8 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 800c582:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c586:	f103 0218 	add.w	r2, r3, #24
 800c58a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7fe fc0d 	bl	800adb0 <lfs_dir_fetch>
 800c596:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800c59a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d002      	beq.n	800c5a8 <lfs_rawmkdir+0xec>
            return err;
 800c5a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5a6:	e0c3      	b.n	800c730 <lfs_rawmkdir+0x274>
    while (pred.split) {
 800c5a8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e8      	bne.n	800c582 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 800c5b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c5b4:	3318      	adds	r3, #24
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fd f9ef 	bl	800999a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 800c5bc:	4b5e      	ldr	r3, [pc, #376]	; (800c738 <lfs_rawmkdir+0x27c>)
 800c5be:	667b      	str	r3, [r7, #100]	; 0x64
 800c5c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c5c4:	3318      	adds	r3, #24
 800c5c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5c8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800c5cc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7ff fbc0 	bl	800bd58 <lfs_dir_commit>
 800c5d8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 800c5dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c5e0:	3318      	adds	r3, #24
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fd f9bf 	bl	8009966 <lfs_pair_fromle32>
    if (err) {
 800c5e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <lfs_rawmkdir+0x13a>
        return err;
 800c5f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5f4:	e09c      	b.n	800c730 <lfs_rawmkdir+0x274>
    }

    // current block end of list?
    if (cwd.m.split) {
 800c5f6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d04c      	beq.n	800c698 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 800c5fe:	2101      	movs	r1, #1
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f001 fe8d 	bl	800e320 <lfs_fs_preporphans>
 800c606:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800c60a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d002      	beq.n	800c618 <lfs_rawmkdir+0x15c>
            return err;
 800c612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c616:	e08b      	b.n	800c730 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 800c618:	2300      	movs	r3, #0
 800c61a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800c62a:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 800c62c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c630:	4618      	mov	r0, r3
 800c632:	f7fd f9b2 	bl	800999a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 800c636:	4b40      	ldr	r3, [pc, #256]	; (800c738 <lfs_rawmkdir+0x27c>)
 800c638:	617b      	str	r3, [r7, #20]
 800c63a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c63e:	61bb      	str	r3, [r7, #24]
 800c640:	f107 0214 	add.w	r2, r7, #20
 800c644:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800c648:	2301      	movs	r3, #1
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff fb84 	bl	800bd58 <lfs_dir_commit>
 800c650:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 800c654:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fd f984 	bl	8009966 <lfs_pair_fromle32>
        if (err) {
 800c65e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c662:	2b00      	cmp	r3, #0
 800c664:	d006      	beq.n	800c674 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 800c666:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 800c66e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c672:	e05d      	b.n	800c730 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 800c674:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 800c67c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f001 fe4d 	bl	800e320 <lfs_fs_preporphans>
 800c686:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800c68a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d002      	beq.n	800c698 <lfs_rawmkdir+0x1dc>
            return err;
 800c692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c696:	e04b      	b.n	800c730 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 800c698:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fd f97c 	bl	800999a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 800c6a2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c6a6:	029b      	lsls	r3, r3, #10
 800c6a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	643b      	str	r3, [r7, #64]	; 0x40
 800c6b6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c6ba:	029a      	lsls	r2, r3, #10
 800c6bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c6c6:	647b      	str	r3, [r7, #68]	; 0x44
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6cc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c6d0:	029b      	lsls	r3, r3, #10
 800c6d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c6d6:	f043 0308 	orr.w	r3, r3, #8
 800c6da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c6e0:	653b      	str	r3, [r7, #80]	; 0x50
 800c6e2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c6e6:	f083 0301 	eor.w	r3, r3, #1
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <lfs_rawmkdir+0x238>
 800c6f0:	4b11      	ldr	r3, [pc, #68]	; (800c738 <lfs_rawmkdir+0x27c>)
 800c6f2:	e000      	b.n	800c6f6 <lfs_rawmkdir+0x23a>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	657b      	str	r3, [r7, #84]	; 0x54
 800c6f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c6fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6fe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c702:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c706:	f103 0108 	add.w	r1, r3, #8
 800c70a:	2304      	movs	r3, #4
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff fb23 	bl	800bd58 <lfs_dir_commit>
 800c712:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 800c716:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fd f923 	bl	8009966 <lfs_pair_fromle32>
    if (err) {
 800c720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <lfs_rawmkdir+0x272>
        return err;
 800c728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c72c:	e000      	b.n	800c730 <lfs_rawmkdir+0x274>
    }

    return 0;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	37e0      	adds	r7, #224	; 0xe0
 800c734:	46bd      	mov	sp, r7
 800c736:	bdb0      	pop	{r4, r5, r7, pc}
 800c738:	600ffc08 	.word	0x600ffc08

0800c73c <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b087      	sub	sp, #28
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c752:	3b08      	subs	r3, #8
 800c754:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c75e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d101      	bne.n	800c76a <lfs_ctz_index+0x2e>
        return 0;
 800c766:	2300      	movs	r3, #0
 800c768:	e01c      	b.n	800c7a4 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3b01      	subs	r3, #1
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fc fcca 	bl	8009108 <lfs_popc>
 800c774:	4603      	mov	r3, r0
 800c776:	3302      	adds	r3, #2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	1ad2      	subs	r2, r2, r3
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	fbb2 f3f3 	udiv	r3, r2, r3
 800c784:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	fb02 f303 	mul.w	r3, r2, r3
 800c78e:	697a      	ldr	r2, [r7, #20]
 800c790:	1ad4      	subs	r4, r2, r3
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7fc fcb8 	bl	8009108 <lfs_popc>
 800c798:	4603      	mov	r3, r0
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	1ae2      	subs	r2, r4, r3
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	601a      	str	r2, [r3, #0]
    return i;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	371c      	adds	r7, #28
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd90      	pop	{r4, r7, pc}

0800c7ac <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800c7ac:	b590      	push	{r4, r7, lr}
 800c7ae:	b08f      	sub	sp, #60	; 0x3c
 800c7b0:	af04      	add	r7, sp, #16
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d108      	bne.n	800c7d2 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800c7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7c6:	601a      	str	r2, [r3, #0]
        *off = 0;
 800c7c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
        return 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e053      	b.n	800c87a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800c7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	617b      	str	r3, [r7, #20]
 800c7d8:	f107 0314 	add.w	r3, r7, #20
 800c7dc:	4619      	mov	r1, r3
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f7ff ffac 	bl	800c73c <lfs_ctz_index>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800c7e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f7ff ffa4 	bl	800c73c <lfs_ctz_index>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800c7f8:	e034      	b.n	800c864 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800c7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7fc:	6a3b      	ldr	r3, [r7, #32]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	3301      	adds	r3, #1
 800c802:	4618      	mov	r0, r3
 800c804:	f7fc fc61 	bl	80090ca <lfs_npw2>
 800c808:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800c80a:	1e5c      	subs	r4, r3, #1
 800c80c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c80e:	f7fc fc6c 	bl	80090ea <lfs_ctz>
 800c812:	4603      	mov	r3, r0
 800c814:	4619      	mov	r1, r3
 800c816:	4620      	mov	r0, r4
 800c818:	f7fc fc20 	bl	800905c <lfs_min>
 800c81c:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	69fa      	ldr	r2, [r7, #28]
 800c822:	0092      	lsls	r2, r2, #2
 800c824:	2104      	movs	r1, #4
 800c826:	9103      	str	r1, [sp, #12]
 800c828:	4639      	mov	r1, r7
 800c82a:	9102      	str	r1, [sp, #8]
 800c82c:	9201      	str	r2, [sp, #4]
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	2304      	movs	r3, #4
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	68b9      	ldr	r1, [r7, #8]
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7fc fcec 	bl	8009214 <lfs_bd_read>
 800c83c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	4618      	mov	r0, r3
 800c842:	f7fc fc7b 	bl	800913c <lfs_fromle32>
 800c846:	4603      	mov	r3, r0
 800c848:	603b      	str	r3, [r7, #0]
        if (err) {
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d001      	beq.n	800c854 <lfs_ctz_find+0xa8>
            return err;
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	e012      	b.n	800c87a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800c854:	2201      	movs	r2, #1
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	fa02 f303 	lsl.w	r3, r2, r3
 800c85c:	461a      	mov	r2, r3
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	1a9b      	subs	r3, r3, r2
 800c862:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800c864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c866:	6a3b      	ldr	r3, [r7, #32]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d8c6      	bhi.n	800c7fa <lfs_ctz_find+0x4e>
    }

    *block = head;
 800c86c:	683a      	ldr	r2, [r7, #0]
 800c86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c870:	601a      	str	r2, [r3, #0]
    *off = pos;
 800c872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c876:	601a      	str	r2, [r3, #0]
    return 0;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	372c      	adds	r7, #44	; 0x2c
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd90      	pop	{r4, r7, pc}
	...

0800c884 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800c884:	b580      	push	{r7, lr}
 800c886:	b092      	sub	sp, #72	; 0x48
 800c888:	af04      	add	r7, sp, #16
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800c892:	f107 0320 	add.w	r3, r7, #32
 800c896:	4619      	mov	r1, r3
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f7fd fadb 	bl	8009e54 <lfs_alloc>
 800c89e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800c8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <lfs_ctz_extend+0x26>
            return err;
 800c8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a8:	e0e9      	b.n	800ca7e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7fc ffa2 	bl	80097f8 <lfs_bd_erase>
 800c8b4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d006      	beq.n	800c8ca <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800c8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8be:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c8c2:	f000 80cb 	beq.w	800ca5c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	e0d9      	b.n	800ca7e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800c8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d107      	bne.n	800c8e0 <lfs_ctz_extend+0x5c>
                *block = nblock;
 800c8d0:	6a3a      	ldr	r2, [r7, #32]
 800c8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8d4:	601a      	str	r2, [r3, #0]
                *off = 0;
 800c8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8d8:	2200      	movs	r2, #0
 800c8da:	601a      	str	r2, [r3, #0]
                return 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	e0ce      	b.n	800ca7e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800c8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800c8e6:	f107 031c 	add.w	r3, r7, #28
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f7ff ff25 	bl	800c73c <lfs_ctz_index>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	429a      	cmp	r2, r3
 800c906:	d044      	beq.n	800c992 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800c908:	2300      	movs	r3, #0
 800c90a:	637b      	str	r3, [r7, #52]	; 0x34
 800c90c:	e035      	b.n	800c97a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800c90e:	69fa      	ldr	r2, [r7, #28]
 800c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c912:	1ad2      	subs	r2, r2, r3
 800c914:	2301      	movs	r3, #1
 800c916:	9303      	str	r3, [sp, #12]
 800c918:	f107 0317 	add.w	r3, r7, #23
 800c91c:	9302      	str	r3, [sp, #8]
 800c91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	4613      	mov	r3, r2
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	2100      	movs	r1, #0
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f7fc fc71 	bl	8009214 <lfs_bd_read>
 800c932:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	2b00      	cmp	r3, #0
 800c938:	d001      	beq.n	800c93e <lfs_ctz_extend+0xba>
                        return err;
 800c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93c:	e09f      	b.n	800ca7e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	2201      	movs	r2, #1
 800c942:	9203      	str	r2, [sp, #12]
 800c944:	f107 0217 	add.w	r2, r7, #23
 800c948:	9202      	str	r2, [sp, #8]
 800c94a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c94c:	9201      	str	r2, [sp, #4]
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	2301      	movs	r3, #1
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	68b9      	ldr	r1, [r7, #8]
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f7fc fea2 	bl	80096a0 <lfs_bd_prog>
 800c95c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	2b00      	cmp	r3, #0
 800c962:	d007      	beq.n	800c974 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c96a:	d101      	bne.n	800c970 <lfs_ctz_extend+0xec>
                            goto relocate;
 800c96c:	bf00      	nop
                    goto relocate;
 800c96e:	e075      	b.n	800ca5c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800c972:	e084      	b.n	800ca7e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 800c974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c976:	3301      	adds	r3, #1
 800c978:	637b      	str	r3, [r7, #52]	; 0x34
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c97e:	429a      	cmp	r2, r3
 800c980:	d3c5      	bcc.n	800c90e <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800c982:	6a3a      	ldr	r2, [r7, #32]
 800c984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c986:	601a      	str	r2, [r3, #0]
                *off = noff;
 800c988:	69fa      	ldr	r2, [r7, #28]
 800c98a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c98c:	601a      	str	r2, [r3, #0]
                return 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	e075      	b.n	800ca7e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800c992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c994:	3301      	adds	r3, #1
 800c996:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800c998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c99a:	f7fc fba6 	bl	80090ea <lfs_ctz>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	633b      	str	r3, [r7, #48]	; 0x30
 800c9ac:	e049      	b.n	800ca42 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fc fbce 	bl	8009152 <lfs_tole32>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9be:	0092      	lsls	r2, r2, #2
 800c9c0:	2104      	movs	r1, #4
 800c9c2:	9103      	str	r1, [sp, #12]
 800c9c4:	f107 0118 	add.w	r1, r7, #24
 800c9c8:	9102      	str	r1, [sp, #8]
 800c9ca:	9201      	str	r2, [sp, #4]
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	68b9      	ldr	r1, [r7, #8]
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f7fc fe63 	bl	80096a0 <lfs_bd_prog>
 800c9da:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fc fbac 	bl	800913c <lfs_fromle32>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	61bb      	str	r3, [r7, #24]
                if (err) {
 800c9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d005      	beq.n	800c9fa <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c9f4:	d034      	beq.n	800ca60 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	e041      	b.n	800ca7e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d01b      	beq.n	800ca3c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca08:	0092      	lsls	r2, r2, #2
 800ca0a:	2104      	movs	r1, #4
 800ca0c:	9103      	str	r1, [sp, #12]
 800ca0e:	f107 0118 	add.w	r1, r7, #24
 800ca12:	9102      	str	r1, [sp, #8]
 800ca14:	9201      	str	r2, [sp, #4]
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	2304      	movs	r3, #4
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7fc fbf8 	bl	8009214 <lfs_bd_read>
 800ca24:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fc fb87 	bl	800913c <lfs_fromle32>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <lfs_ctz_extend+0x1b8>
                        return err;
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	e020      	b.n	800ca7e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800ca3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3e:	3301      	adds	r3, #1
 800ca40:	633b      	str	r3, [r7, #48]	; 0x30
 800ca42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d3b1      	bcc.n	800c9ae <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800ca4a:	6a3a      	ldr	r2, [r7, #32]
 800ca4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca4e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	009a      	lsls	r2, r3, #2
 800ca54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca56:	601a      	str	r2, [r3, #0]
            return 0;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	e010      	b.n	800ca7e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800ca5c:	bf00      	nop
 800ca5e:	e000      	b.n	800ca62 <lfs_ctz_extend+0x1de>
                        goto relocate;
 800ca60:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800ca62:	6a3b      	ldr	r3, [r7, #32]
 800ca64:	4a08      	ldr	r2, [pc, #32]	; (800ca88 <lfs_ctz_extend+0x204>)
 800ca66:	9200      	str	r2, [sp, #0]
 800ca68:	f640 126a 	movw	r2, #2410	; 0x96a
 800ca6c:	4907      	ldr	r1, [pc, #28]	; (800ca8c <lfs_ctz_extend+0x208>)
 800ca6e:	4808      	ldr	r0, [pc, #32]	; (800ca90 <lfs_ctz_extend+0x20c>)
 800ca70:	f012 ff28 	bl	801f8c4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800ca74:	68b9      	ldr	r1, [r7, #8]
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f7fc fba6 	bl	80091c8 <lfs_cache_drop>
    while (true) {
 800ca7c:	e709      	b.n	800c892 <lfs_ctz_extend+0xe>
    }
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3738      	adds	r7, #56	; 0x38
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	08020ee8 	.word	0x08020ee8
 800ca8c:	08020ddc 	.word	0x08020ddc
 800ca90:	08020f90 	.word	0x08020f90

0800ca94 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b090      	sub	sp, #64	; 0x40
 800ca98:	af04      	add	r7, sp, #16
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
 800caa0:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800caa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d101      	bne.n	800caac <lfs_ctz_traverse+0x18>
        return 0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	e06b      	b.n	800cb84 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800caac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caae:	3b01      	subs	r3, #1
 800cab0:	61fb      	str	r3, [r7, #28]
 800cab2:	f107 031c 	add.w	r3, r7, #28
 800cab6:	4619      	mov	r1, r3
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f7ff fe3f 	bl	800c73c <lfs_ctz_index>
 800cabe:	4603      	mov	r3, r0
 800cac0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800cac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac4:	6839      	ldr	r1, [r7, #0]
 800cac6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cac8:	4798      	blx	r3
 800caca:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d001      	beq.n	800cad6 <lfs_ctz_traverse+0x42>
            return err;
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	e056      	b.n	800cb84 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d101      	bne.n	800cae0 <lfs_ctz_traverse+0x4c>
            return 0;
 800cadc:	2300      	movs	r3, #0
 800cade:	e051      	b.n	800cb84 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	f003 0301 	and.w	r3, r3, #1
 800cae6:	f1c3 0302 	rsb	r3, r3, #2
 800caea:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800caec:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800caee:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800caf0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800caf2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800caf4:	9303      	str	r3, [sp, #12]
 800caf6:	f107 0314 	add.w	r3, r7, #20
 800cafa:	9302      	str	r3, [sp, #8]
 800cafc:	2300      	movs	r3, #0
 800cafe:	9301      	str	r3, [sp, #4]
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	4613      	mov	r3, r2
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	68b9      	ldr	r1, [r7, #8]
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f7fc fb82 	bl	8009214 <lfs_bd_read>
 800cb10:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fc fb11 	bl	800913c <lfs_fromle32>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fc fb0b 	bl	800913c <lfs_fromle32>
 800cb26:	4603      	mov	r3, r0
 800cb28:	61bb      	str	r3, [r7, #24]
        if (err) {
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <lfs_ctz_traverse+0xa0>
            return err;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	e027      	b.n	800cb84 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800cb34:	2300      	movs	r3, #0
 800cb36:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb38:	e012      	b.n	800cb60 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	3330      	adds	r3, #48	; 0x30
 800cb40:	443b      	add	r3, r7
 800cb42:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800cb46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb48:	4611      	mov	r1, r2
 800cb4a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cb4c:	4798      	blx	r3
 800cb4e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <lfs_ctz_traverse+0xc6>
                return err;
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	e014      	b.n	800cb84 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800cb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb60:	6a3b      	ldr	r3, [r7, #32]
 800cb62:	3b01      	subs	r3, #1
 800cb64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb66:	429a      	cmp	r2, r3
 800cb68:	dbe7      	blt.n	800cb3a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	009b      	lsls	r3, r3, #2
 800cb70:	3330      	adds	r3, #48	; 0x30
 800cb72:	443b      	add	r3, r7
 800cb74:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800cb78:	603b      	str	r3, [r7, #0]
        index -= count;
 800cb7a:	6a3b      	ldr	r3, [r7, #32]
 800cb7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800cb82:	e79e      	b.n	800cac2 <lfs_ctz_traverse+0x2e>
    }
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3730      	adds	r7, #48	; 0x30
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <lfs_file_relocate>:
    return err;
}


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800cb8c:	b590      	push	{r4, r7, lr}
 800cb8e:	b08d      	sub	sp, #52	; 0x34
 800cb90:	af06      	add	r7, sp, #24
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800cb96:	f107 030c 	add.w	r3, r7, #12
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7fd f959 	bl	8009e54 <lfs_alloc>
 800cba2:	6138      	str	r0, [r7, #16]
        if (err) {
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <lfs_file_relocate+0x22>
            return err;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	e0bb      	b.n	800cd26 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7fc fe20 	bl	80097f8 <lfs_bd_erase>
 800cbb8:	6138      	str	r0, [r7, #16]
        if (err) {
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d006      	beq.n	800cbce <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cbc6:	f000 809b 	beq.w	800cd00 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	e0ab      	b.n	800cd26 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800cbce:	2300      	movs	r3, #0
 800cbd0:	617b      	str	r3, [r7, #20]
 800cbd2:	e069      	b.n	800cca8 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d027      	beq.n	800cc30 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	f103 0008 	add.w	r0, r3, #8
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	889b      	ldrh	r3, [r3, #4]
 800cbf8:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800cbfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cbfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc02:	2101      	movs	r1, #1
 800cc04:	9105      	str	r1, [sp, #20]
 800cc06:	f107 010b 	add.w	r1, r7, #11
 800cc0a:	9104      	str	r1, [sp, #16]
 800cc0c:	6979      	ldr	r1, [r7, #20]
 800cc0e:	9103      	str	r1, [sp, #12]
 800cc10:	9302      	str	r3, [sp, #8]
 800cc12:	4b47      	ldr	r3, [pc, #284]	; (800cd30 <lfs_file_relocate+0x1a4>)
 800cc14:	9301      	str	r3, [sp, #4]
 800cc16:	9200      	str	r2, [sp, #0]
 800cc18:	4623      	mov	r3, r4
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	4601      	mov	r1, r0
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7fd facd 	bl	800a1be <lfs_dir_getread>
 800cc24:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d01e      	beq.n	800cc6a <lfs_file_relocate+0xde>
                    return err;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	e07a      	b.n	800cd26 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800cc36:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	1ad4      	subs	r4, r2, r3
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc44:	2201      	movs	r2, #1
 800cc46:	9203      	str	r2, [sp, #12]
 800cc48:	f107 020b 	add.w	r2, r7, #11
 800cc4c:	9202      	str	r2, [sp, #8]
 800cc4e:	697a      	ldr	r2, [r7, #20]
 800cc50:	9201      	str	r2, [sp, #4]
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	4623      	mov	r3, r4
 800cc56:	4602      	mov	r2, r0
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7fc fadb 	bl	8009214 <lfs_bd_read>
 800cc5e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <lfs_file_relocate+0xde>
                    return err;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	e05d      	b.n	800cd26 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f103 0110 	add.w	r1, r3, #16
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2201      	movs	r2, #1
 800cc76:	9203      	str	r2, [sp, #12]
 800cc78:	f107 020b 	add.w	r2, r7, #11
 800cc7c:	9202      	str	r2, [sp, #8]
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	9201      	str	r2, [sp, #4]
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	2301      	movs	r3, #1
 800cc86:	4602      	mov	r2, r0
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7fc fd09 	bl	80096a0 <lfs_bd_prog>
 800cc8e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d005      	beq.n	800cca2 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cc9c:	d032      	beq.n	800cd04 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	e041      	b.n	800cd26 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	3301      	adds	r3, #1
 800cca6:	617b      	str	r3, [r7, #20]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccac:	697a      	ldr	r2, [r7, #20]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d390      	bcc.n	800cbd4 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	69d9      	ldr	r1, [r3, #28]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	f013 f864 	bl	801fd8e <memcpy>
        file->cache.block = lfs->pcache.block;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	691a      	ldr	r2, [r3, #16]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	695a      	ldr	r2, [r3, #20]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	699a      	ldr	r2, [r3, #24]
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3310      	adds	r3, #16
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7fc fa7e 	bl	80091e6 <lfs_cache_zero>

        file->block = nblock;
 800ccea:	68fa      	ldr	r2, [r7, #12]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	e012      	b.n	800cd26 <lfs_file_relocate+0x19a>
                goto relocate;
 800cd00:	bf00      	nop
 800cd02:	e000      	b.n	800cd06 <lfs_file_relocate+0x17a>
                    goto relocate;
 800cd04:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	4a0a      	ldr	r2, [pc, #40]	; (800cd34 <lfs_file_relocate+0x1a8>)
 800cd0a:	9200      	str	r2, [sp, #0]
 800cd0c:	f640 229b 	movw	r2, #2715	; 0xa9b
 800cd10:	4909      	ldr	r1, [pc, #36]	; (800cd38 <lfs_file_relocate+0x1ac>)
 800cd12:	480a      	ldr	r0, [pc, #40]	; (800cd3c <lfs_file_relocate+0x1b0>)
 800cd14:	f012 fdd6 	bl	801f8c4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	3310      	adds	r3, #16
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7fc fa52 	bl	80091c8 <lfs_cache_drop>
    while (true) {
 800cd24:	e737      	b.n	800cb96 <lfs_file_relocate+0xa>
    }
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	371c      	adds	r7, #28
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd90      	pop	{r4, r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	fff7fc00 	.word	0xfff7fc00
 800cd34:	08020ee8 	.word	0x08020ee8
 800cd38:	08020ddc 	.word	0x08020ddc
 800cd3c:	08020f90 	.word	0x08020f90

0800cd40 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7fd f85d 	bl	8009e12 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff ff16 	bl	800cb8c <lfs_file_relocate>
 800cd60:	60f8      	str	r0, [r7, #12]
    if (err) {
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <lfs_file_outline+0x2c>
        return err;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	e006      	b.n	800cd7a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <lfs_file_flush>:
#endif

#ifndef LFS_READONLY
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800cd84:	b590      	push	{r4, r7, lr}
 800cd86:	b09f      	sub	sp, #124	; 0x7c
 800cd88:	af02      	add	r7, sp, #8
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d011      	beq.n	800cdbe <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d105      	bne.n	800cdb2 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	3340      	adds	r3, #64	; 0x40
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7fc fa0b 	bl	80091c8 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 80a4 	beq.w	800cf14 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd0:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d176      	bne.n	800cecc <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800cdde:	f107 030c 	add.w	r3, r7, #12
 800cde2:	2254      	movs	r2, #84	; 0x54
 800cde4:	2100      	movs	r1, #0
 800cde6:	4618      	mov	r0, r3
 800cde8:	f012 fec2 	bl	801fb70 <memset>
                .ctz.head = file->ctz.head,
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 800cdf0:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800cdf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 800ce00:	643b      	str	r3, [r7, #64]	; 0x40
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ce08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4619      	mov	r1, r3
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7fc f9d8 	bl	80091c8 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800ce18:	e02b      	b.n	800ce72 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_rawread(lfs, &orig, &data, 1);
 800ce1a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800ce1e:	f107 010c 	add.w	r1, r7, #12
 800ce22:	2301      	movs	r3, #1
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f881 	bl	800cf2c <lfs_file_rawread>
 800ce2a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800ce2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	da01      	bge.n	800ce36 <lfs_file_flush+0xb2>
                    return res;
 800ce32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce34:	e06f      	b.n	800cf16 <lfs_file_flush+0x192>
                }

                res = lfs_file_rawwrite(lfs, file, &data, 1);
 800ce36:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f968 	bl	800d114 <lfs_file_rawwrite>
 800ce44:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800ce46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	da01      	bge.n	800ce50 <lfs_file_flush+0xcc>
                    return res;
 800ce4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce4e:	e062      	b.n	800cf16 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce58:	d00b      	beq.n	800ce72 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800ce5a:	f107 030c 	add.w	r3, r7, #12
 800ce5e:	3340      	adds	r3, #64	; 0x40
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7fc f9b0 	bl	80091c8 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7fc f9ab 	bl	80091c8 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d3cd      	bcc.n	800ce1a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	2301      	movs	r3, #1
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f7fc fb59 	bl	8009540 <lfs_bd_flush>
 800ce8e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800ce90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d026      	beq.n	800cee4 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800ce96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce98:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ce9c:	d001      	beq.n	800cea2 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800ce9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cea0:	e039      	b.n	800cf16 <lfs_file_flush+0x192>
                        goto relocate;
 800cea2:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea8:	4a1d      	ldr	r2, [pc, #116]	; (800cf20 <lfs_file_flush+0x19c>)
 800ceaa:	9200      	str	r2, [sp, #0]
 800ceac:	f640 22ea 	movw	r2, #2794	; 0xaea
 800ceb0:	491c      	ldr	r1, [pc, #112]	; (800cf24 <lfs_file_flush+0x1a0>)
 800ceb2:	481d      	ldr	r0, [pc, #116]	; (800cf28 <lfs_file_flush+0x1a4>)
 800ceb4:	f012 fd06 	bl	801f8c4 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7ff fe66 	bl	800cb8c <lfs_file_relocate>
 800cec0:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800cec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0da      	beq.n	800ce7e <lfs_file_flush+0xfa>
                    return err;
 800cec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ceca:	e024      	b.n	800cf16 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	4619      	mov	r1, r3
 800ced6:	4610      	mov	r0, r2
 800ced8:	f7fc f8b0 	bl	800903c <lfs_max>
 800cedc:	4602      	mov	r2, r0
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	635a      	str	r2, [r3, #52]	; 0x34
 800cee2:	e000      	b.n	800cee6 <lfs_file_flush+0x162>
                break;
 800cee4:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf12:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3774      	adds	r7, #116	; 0x74
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd90      	pop	{r4, r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	08020ee8 	.word	0x08020ee8
 800cf24:	08020ddc 	.word	0x08020ddc
 800cf28:	08020f90 	.word	0x08020f90

0800cf2c <lfs_file_rawread>:
    return 0;
}
#endif

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800cf2c:	b5b0      	push	{r4, r5, r7, lr}
 800cf2e:	b092      	sub	sp, #72	; 0x48
 800cf30:	af06      	add	r7, sp, #24
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3e:	f003 0301 	and.w	r3, r3, #1
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <lfs_file_rawread+0x28>
 800cf46:	4b6f      	ldr	r3, [pc, #444]	; (800d104 <lfs_file_rawread+0x1d8>)
 800cf48:	4a6f      	ldr	r2, [pc, #444]	; (800d108 <lfs_file_rawread+0x1dc>)
 800cf4a:	f640 3138 	movw	r1, #2872	; 0xb38
 800cf4e:	486f      	ldr	r0, [pc, #444]	; (800d10c <lfs_file_rawread+0x1e0>)
 800cf50:	f012 fa3c 	bl	801f3cc <__assert_func>

    uint8_t *data = buffer;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d009      	beq.n	800cf7c <lfs_file_rawread+0x50>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800cf68:	68b9      	ldr	r1, [r7, #8]
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f7ff ff0a 	bl	800cd84 <lfs_file_flush>
 800cf70:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d001      	beq.n	800cf7c <lfs_file_rawread+0x50>
            return err;
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	e0bf      	b.n	800d0fc <lfs_file_rawread+0x1d0>
        }
    }
#endif

    if (file->pos >= file->ctz.size) {
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d301      	bcc.n	800cf8c <lfs_file_rawread+0x60>
        // eof if past end
        return 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	e0b7      	b.n	800d0fc <lfs_file_rawread+0x1d0>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	4619      	mov	r1, r3
 800cf98:	6838      	ldr	r0, [r7, #0]
 800cf9a:	f7fc f85f 	bl	800905c <lfs_min>
 800cf9e:	6038      	str	r0, [r7, #0]
    nsize = size;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 800cfa4:	e0a5      	b.n	800d0f2 <lfs_file_rawread+0x1c6>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d006      	beq.n	800cfc0 <lfs_file_rawread+0x94>
                file->off == lfs->cfg->block_size) {
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_READING) ||
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d130      	bne.n	800d022 <lfs_file_rawread+0xf6>
            if (!(file->flags & LFS_F_INLINE)) {
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d11c      	bne.n	800d006 <lfs_file_rawread+0xda>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfda:	68ba      	ldr	r2, [r7, #8]
 800cfdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cfde:	68b9      	ldr	r1, [r7, #8]
 800cfe0:	3138      	adds	r1, #56	; 0x38
 800cfe2:	68b8      	ldr	r0, [r7, #8]
 800cfe4:	303c      	adds	r0, #60	; 0x3c
 800cfe6:	9003      	str	r0, [sp, #12]
 800cfe8:	9102      	str	r1, [sp, #8]
 800cfea:	9201      	str	r2, [sp, #4]
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	462b      	mov	r3, r5
 800cff0:	4622      	mov	r2, r4
 800cff2:	2100      	movs	r1, #0
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff fbd9 	bl	800c7ac <lfs_ctz_find>
 800cffa:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800cffc:	6a3b      	ldr	r3, [r7, #32]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d009      	beq.n	800d016 <lfs_file_rawread+0xea>
                    return err;
 800d002:	6a3b      	ldr	r3, [r7, #32]
 800d004:	e07a      	b.n	800d0fc <lfs_file_rawread+0x1d0>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	f06f 0201 	mvn.w	r2, #1
 800d00c:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	4619      	mov	r1, r3
 800d030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d032:	f7fc f813 	bl	800905c <lfs_min>
 800d036:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d026      	beq.n	800d092 <lfs_file_rawread+0x166>
            int err = lfs_dir_getread(lfs, &file->m,
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	f103 0408 	add.w	r4, r3, #8
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	889b      	ldrh	r3, [r3, #4]
 800d05a:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800d05c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d064:	68b9      	ldr	r1, [r7, #8]
 800d066:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800d068:	69f8      	ldr	r0, [r7, #28]
 800d06a:	9005      	str	r0, [sp, #20]
 800d06c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d06e:	9004      	str	r0, [sp, #16]
 800d070:	9103      	str	r1, [sp, #12]
 800d072:	9302      	str	r3, [sp, #8]
 800d074:	4b26      	ldr	r3, [pc, #152]	; (800d110 <lfs_file_rawread+0x1e4>)
 800d076:	9301      	str	r3, [sp, #4]
 800d078:	9200      	str	r2, [sp, #0]
 800d07a:	462b      	mov	r3, r5
 800d07c:	2200      	movs	r2, #0
 800d07e:	4621      	mov	r1, r4
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f7fd f89c 	bl	800a1be <lfs_dir_getread>
 800d086:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d01d      	beq.n	800d0ca <lfs_file_rawread+0x19e>
                return err;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	e034      	b.n	800d0fc <lfs_file_rawread+0x1d0>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d09c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d0a6:	69f9      	ldr	r1, [r7, #28]
 800d0a8:	9103      	str	r1, [sp, #12]
 800d0aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0ac:	9102      	str	r1, [sp, #8]
 800d0ae:	9201      	str	r2, [sp, #4]
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	4623      	mov	r3, r4
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f7fc f8ab 	bl	8009214 <lfs_bd_read>
 800d0be:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d001      	beq.n	800d0ca <lfs_file_rawread+0x19e>
                return err;
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	e018      	b.n	800d0fc <lfs_file_rawread+0x1d0>
            }
        }

        file->pos += diff;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	441a      	add	r2, r3
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	441a      	add	r2, r3
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800d0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800d0ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	1ad3      	subs	r3, r2, r3
 800d0f0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 800d0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f47f af56 	bne.w	800cfa6 <lfs_file_rawread+0x7a>
    }

    return size;
 800d0fa:	683b      	ldr	r3, [r7, #0]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3730      	adds	r7, #48	; 0x30
 800d100:	46bd      	mov	sp, r7
 800d102:	bdb0      	pop	{r4, r5, r7, pc}
 800d104:	08021038 	.word	0x08021038
 800d108:	080250ec 	.word	0x080250ec
 800d10c:	08020ddc 	.word	0x08020ddc
 800d110:	fff7fc00 	.word	0xfff7fc00

0800d114 <lfs_file_rawwrite>:

#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800d114:	b5b0      	push	{r4, r5, r7, lr}
 800d116:	b094      	sub	sp, #80	; 0x50
 800d118:	af04      	add	r7, sp, #16
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d126:	f003 0302 	and.w	r3, r3, #2
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d106      	bne.n	800d13c <lfs_file_rawwrite+0x28>
 800d12e:	4b85      	ldr	r3, [pc, #532]	; (800d344 <lfs_file_rawwrite+0x230>)
 800d130:	4a85      	ldr	r2, [pc, #532]	; (800d348 <lfs_file_rawwrite+0x234>)
 800d132:	f640 3182 	movw	r1, #2946	; 0xb82
 800d136:	4885      	ldr	r0, [pc, #532]	; (800d34c <lfs_file_rawwrite+0x238>)
 800d138:	f012 f948 	bl	801f3cc <__assert_func>

    const uint8_t *data = buffer;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d009      	beq.n	800d164 <lfs_file_rawwrite+0x50>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800d150:	68b9      	ldr	r1, [r7, #8]
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f7ff fe16 	bl	800cd84 <lfs_file_flush>
 800d158:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 800d15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d001      	beq.n	800d164 <lfs_file_rawwrite+0x50>
            return err;
 800d160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d162:	e166      	b.n	800d432 <lfs_file_rawwrite+0x31e>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d009      	beq.n	800d184 <lfs_file_rawwrite+0x70>
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d178:	429a      	cmp	r2, r3
 800d17a:	d203      	bcs.n	800d184 <lfs_file_rawwrite+0x70>
        file->pos = file->ctz.size;
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	441a      	add	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d190:	429a      	cmp	r2, r3
 800d192:	d902      	bls.n	800d19a <lfs_file_rawwrite+0x86>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 800d194:	f06f 031a 	mvn.w	r3, #26
 800d198:	e14b      	b.n	800d432 <lfs_file_rawwrite+0x31e>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d121      	bne.n	800d1ea <lfs_file_rawwrite+0xd6>
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d91b      	bls.n	800d1ea <lfs_file_rawwrite+0xd6>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b6:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800d1c0:	e00e      	b.n	800d1e0 <lfs_file_rawwrite+0xcc>
            lfs_ssize_t res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	75fb      	strb	r3, [r7, #23]
 800d1c6:	f107 0217 	add.w	r2, r7, #23
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	68b9      	ldr	r1, [r7, #8]
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f7ff ffa0 	bl	800d114 <lfs_file_rawwrite>
 800d1d4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 800d1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	da01      	bge.n	800d1e0 <lfs_file_rawwrite+0xcc>
                return res;
 800d1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1de:	e128      	b.n	800d432 <lfs_file_rawwrite+0x31e>
        while (file->pos < pos) {
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d8eb      	bhi.n	800d1c2 <lfs_file_rawwrite+0xae>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f000 8112 	beq.w	800d41c <lfs_file_rawwrite+0x308>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fe:	441a      	add	r2, r3
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d204:	4619      	mov	r1, r3
 800d206:	4610      	mov	r0, r2
 800d208:	f7fb ff18 	bl	800903c <lfs_max>
 800d20c:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                (lfs->cfg->metadata_max ?
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d004      	beq.n	800d228 <lfs_file_rawwrite+0x114>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800d224:	08db      	lsrs	r3, r3, #3
 800d226:	e003      	b.n	800d230 <lfs_file_rawwrite+0x11c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            lfs_min(0x3fe, lfs_min(
 800d22e:	08db      	lsrs	r3, r3, #3
 800d230:	4619      	mov	r1, r3
 800d232:	4610      	mov	r0, r2
 800d234:	f7fb ff12 	bl	800905c <lfs_min>
 800d238:	4603      	mov	r3, r0
 800d23a:	4619      	mov	r1, r3
 800d23c:	f240 30fe 	movw	r0, #1022	; 0x3fe
 800d240:	f7fb ff0c 	bl	800905c <lfs_min>
 800d244:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800d246:	429c      	cmp	r4, r3
 800d248:	f240 80e8 	bls.w	800d41c <lfs_file_rawwrite+0x308>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800d24c:	68b9      	ldr	r1, [r7, #8]
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	f7ff fd76 	bl	800cd40 <lfs_file_outline>
 800d254:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 800d256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 80df 	beq.w	800d41c <lfs_file_rawwrite+0x308>
            file->flags |= LFS_F_ERRED;
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d262:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	e0e1      	b.n	800d432 <lfs_file_rawwrite+0x31e>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d276:	2b00      	cmp	r3, #0
 800d278:	d006      	beq.n	800d288 <lfs_file_rawwrite+0x174>
                file->off == lfs->cfg->block_size) {
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 800d284:	429a      	cmp	r2, r3
 800d286:	d171      	bne.n	800d36c <lfs_file_rawwrite+0x258>
            if (!(file->flags & LFS_F_INLINE)) {
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d290:	2b00      	cmp	r3, #0
 800d292:	d15d      	bne.n	800d350 <lfs_file_rawwrite+0x23c>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d12d      	bne.n	800d2fc <lfs_file_rawwrite+0x1e8>
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d029      	beq.n	800d2fc <lfs_file_rawwrite+0x1e8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800d2b6:	68ba      	ldr	r2, [r7, #8]
 800d2b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800d2ba:	3a01      	subs	r2, #1
 800d2bc:	68b9      	ldr	r1, [r7, #8]
 800d2be:	3138      	adds	r1, #56	; 0x38
 800d2c0:	68b8      	ldr	r0, [r7, #8]
 800d2c2:	303c      	adds	r0, #60	; 0x3c
 800d2c4:	9003      	str	r0, [sp, #12]
 800d2c6:	9102      	str	r1, [sp, #8]
 800d2c8:	9201      	str	r2, [sp, #4]
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	462b      	mov	r3, r5
 800d2ce:	4622      	mov	r2, r4
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	68f8      	ldr	r0, [r7, #12]
 800d2d4:	f7ff fa6a 	bl	800c7ac <lfs_ctz_find>
 800d2d8:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 800d2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d007      	beq.n	800d2f0 <lfs_file_rawwrite+0x1dc>
                        file->flags |= LFS_F_ERRED;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	e0a0      	b.n	800d432 <lfs_file_rawwrite+0x31e>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	3340      	adds	r3, #64	; 0x40
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7fb ff75 	bl	80091e6 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f7fc fd88 	bl	8009e12 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d308:	68fc      	ldr	r4, [r7, #12]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d312:	68ba      	ldr	r2, [r7, #8]
 800d314:	3238      	adds	r2, #56	; 0x38
 800d316:	68b9      	ldr	r1, [r7, #8]
 800d318:	313c      	adds	r1, #60	; 0x3c
 800d31a:	9102      	str	r1, [sp, #8]
 800d31c:	9201      	str	r2, [sp, #4]
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	462b      	mov	r3, r5
 800d322:	4622      	mov	r2, r4
 800d324:	4601      	mov	r1, r0
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	f7ff faac 	bl	800c884 <lfs_ctz_extend>
 800d32c:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d015      	beq.n	800d360 <lfs_file_rawwrite+0x24c>
                    file->flags |= LFS_F_ERRED;
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d338:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	e076      	b.n	800d432 <lfs_file_rawwrite+0x31e>
 800d344:	08021068 	.word	0x08021068
 800d348:	08025100 	.word	0x08025100
 800d34c:	08020ddc 	.word	0x08020ddc
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	f06f 0201 	mvn.w	r2, #1
 800d356:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d364:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	4619      	mov	r1, r3
 800d37a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d37c:	f7fb fe6e 	bl	800905c <lfs_min>
 800d380:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d388:	68fc      	ldr	r4, [r7, #12]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d392:	69f9      	ldr	r1, [r7, #28]
 800d394:	9103      	str	r1, [sp, #12]
 800d396:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d398:	9102      	str	r1, [sp, #8]
 800d39a:	9201      	str	r2, [sp, #4]
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	2301      	movs	r3, #1
 800d3a0:	4622      	mov	r2, r4
 800d3a2:	4601      	mov	r1, r0
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f7fc f97b 	bl	80096a0 <lfs_bd_prog>
 800d3aa:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d01c      	beq.n	800d3ec <lfs_file_rawwrite+0x2d8>
                if (err == LFS_ERR_CORRUPT) {
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d3b8:	d007      	beq.n	800d3ca <lfs_file_rawwrite+0x2b6>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	e033      	b.n	800d432 <lfs_file_rawwrite+0x31e>
                    goto relocate;
 800d3ca:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800d3cc:	68b9      	ldr	r1, [r7, #8]
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f7ff fbdc 	bl	800cb8c <lfs_file_relocate>
 800d3d4:	61b8      	str	r0, [r7, #24]
            if (err) {
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d0d2      	beq.n	800d382 <lfs_file_rawwrite+0x26e>
                file->flags |= LFS_F_ERRED;
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	e022      	b.n	800d432 <lfs_file_rawwrite+0x31e>
            break;
 800d3ec:	bf00      	nop
            }
        }

        file->pos += diff;
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	441a      	add	r2, r3
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	441a      	add	r2, r3
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800d406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	4413      	add	r3, r2
 800d40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 800d40e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	1ad3      	subs	r3, r2, r3
 800d414:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f7fc fcfb 	bl	8009e12 <lfs_alloc_ack>
    while (nsize > 0) {
 800d41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f47f af25 	bne.w	800d26e <lfs_file_rawwrite+0x15a>
    }

    file->flags &= ~LFS_F_ERRED;
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d428:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	631a      	str	r2, [r3, #48]	; 0x30
    return size;
 800d430:	683b      	ldr	r3, [r7, #0]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3740      	adds	r7, #64	; 0x40
 800d436:	46bd      	mov	sp, r7
 800d438:	bdb0      	pop	{r4, r5, r7, pc}
 800d43a:	bf00      	nop

0800d43c <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b08c      	sub	sp, #48	; 0x30
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	683a      	ldr	r2, [r7, #0]
 800d44a:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 800d44c:	2300      	movs	r3, #0
 800d44e:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d454:	69db      	ldr	r3, [r3, #28]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d106      	bne.n	800d468 <lfs_init+0x2c>
 800d45a:	4b92      	ldr	r3, [pc, #584]	; (800d6a4 <lfs_init+0x268>)
 800d45c:	4a92      	ldr	r2, [pc, #584]	; (800d6a8 <lfs_init+0x26c>)
 800d45e:	f640 51a4 	movw	r1, #3492	; 0xda4
 800d462:	4892      	ldr	r0, [pc, #584]	; (800d6ac <lfs_init+0x270>)
 800d464:	f011 ffb2 	bl	801f3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d46c:	6a1b      	ldr	r3, [r3, #32]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d106      	bne.n	800d480 <lfs_init+0x44>
 800d472:	4b8f      	ldr	r3, [pc, #572]	; (800d6b0 <lfs_init+0x274>)
 800d474:	4a8c      	ldr	r2, [pc, #560]	; (800d6a8 <lfs_init+0x26c>)
 800d476:	f640 51a5 	movw	r1, #3493	; 0xda5
 800d47a:	488c      	ldr	r0, [pc, #560]	; (800d6ac <lfs_init+0x270>)
 800d47c:	f011 ffa6 	bl	801f3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d486:	2b00      	cmp	r3, #0
 800d488:	d106      	bne.n	800d498 <lfs_init+0x5c>
 800d48a:	4b8a      	ldr	r3, [pc, #552]	; (800d6b4 <lfs_init+0x278>)
 800d48c:	4a86      	ldr	r2, [pc, #536]	; (800d6a8 <lfs_init+0x26c>)
 800d48e:	f640 51a6 	movw	r1, #3494	; 0xda6
 800d492:	4886      	ldr	r0, [pc, #536]	; (800d6ac <lfs_init+0x270>)
 800d494:	f011 ff9a 	bl	801f3cc <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d4a2:	69d2      	ldr	r2, [r2, #28]
 800d4a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4a8:	fb01 f202 	mul.w	r2, r1, r2
 800d4ac:	1a9b      	subs	r3, r3, r2
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d006      	beq.n	800d4c0 <lfs_init+0x84>
 800d4b2:	4b81      	ldr	r3, [pc, #516]	; (800d6b8 <lfs_init+0x27c>)
 800d4b4:	4a7c      	ldr	r2, [pc, #496]	; (800d6a8 <lfs_init+0x26c>)
 800d4b6:	f640 51aa 	movw	r1, #3498	; 0xdaa
 800d4ba:	487c      	ldr	r0, [pc, #496]	; (800d6ac <lfs_init+0x270>)
 800d4bc:	f011 ff86 	bl	801f3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d4ca:	6a12      	ldr	r2, [r2, #32]
 800d4cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4d0:	fb01 f202 	mul.w	r2, r1, r2
 800d4d4:	1a9b      	subs	r3, r3, r2
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d006      	beq.n	800d4e8 <lfs_init+0xac>
 800d4da:	4b78      	ldr	r3, [pc, #480]	; (800d6bc <lfs_init+0x280>)
 800d4dc:	4a72      	ldr	r2, [pc, #456]	; (800d6a8 <lfs_init+0x26c>)
 800d4de:	f640 51ab 	movw	r1, #3499	; 0xdab
 800d4e2:	4872      	ldr	r0, [pc, #456]	; (800d6ac <lfs_init+0x270>)
 800d4e4:	f011 ff72 	bl	801f3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d4f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d4f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4f8:	fb01 f202 	mul.w	r2, r1, r2
 800d4fc:	1a9b      	subs	r3, r3, r2
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d006      	beq.n	800d510 <lfs_init+0xd4>
 800d502:	4b6f      	ldr	r3, [pc, #444]	; (800d6c0 <lfs_init+0x284>)
 800d504:	4a68      	ldr	r2, [pc, #416]	; (800d6a8 <lfs_init+0x26c>)
 800d506:	f640 51ac 	movw	r1, #3500	; 0xdac
 800d50a:	4868      	ldr	r0, [pc, #416]	; (800d6ac <lfs_init+0x270>)
 800d50c:	f011 ff5e 	bl	801f3cc <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d516:	3b08      	subs	r3, #8
 800d518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d51c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d520:	4618      	mov	r0, r3
 800d522:	f7fb fdd2 	bl	80090ca <lfs_npw2>
 800d526:	4603      	mov	r3, r0
 800d528:	009a      	lsls	r2, r3, #2
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d530:	429a      	cmp	r2, r3
 800d532:	d906      	bls.n	800d542 <lfs_init+0x106>
 800d534:	4b63      	ldr	r3, [pc, #396]	; (800d6c4 <lfs_init+0x288>)
 800d536:	4a5c      	ldr	r2, [pc, #368]	; (800d6a8 <lfs_init+0x26c>)
 800d538:	f640 51af 	movw	r1, #3503	; 0xdaf
 800d53c:	485b      	ldr	r0, [pc, #364]	; (800d6ac <lfs_init+0x270>)
 800d53e:	f011 ff45 	bl	801f3cc <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d106      	bne.n	800d55a <lfs_init+0x11e>
 800d54c:	4b5e      	ldr	r3, [pc, #376]	; (800d6c8 <lfs_init+0x28c>)
 800d54e:	4a56      	ldr	r2, [pc, #344]	; (800d6a8 <lfs_init+0x26c>)
 800d550:	f640 51b8 	movw	r1, #3512	; 0xdb8
 800d554:	4855      	ldr	r0, [pc, #340]	; (800d6ac <lfs_init+0x270>)
 800d556:	f011 ff39 	bl	801f3cc <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d560:	2b00      	cmp	r3, #0
 800d562:	d005      	beq.n	800d570 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	60da      	str	r2, [r3, #12]
 800d56e:	e010      	b.n	800d592 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d576:	4618      	mov	r0, r3
 800d578:	f7fb fe0f 	bl	800919a <lfs_malloc>
 800d57c:	4602      	mov	r2, r0
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d103      	bne.n	800d592 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800d58a:	f06f 030b 	mvn.w	r3, #11
 800d58e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800d590:	e0fd      	b.n	800d78e <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d005      	beq.n	800d5a8 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	61da      	str	r2, [r3, #28]
 800d5a6:	e010      	b.n	800d5ca <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fb fdf3 	bl	800919a <lfs_malloc>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	69db      	ldr	r3, [r3, #28]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d103      	bne.n	800d5ca <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800d5c2:	f06f 030b 	mvn.w	r3, #11
 800d5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800d5c8:	e0e1      	b.n	800d78e <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7fb fe09 	bl	80091e6 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3310      	adds	r3, #16
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7fb fe03 	bl	80091e6 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d106      	bne.n	800d5f8 <lfs_init+0x1bc>
 800d5ea:	4b38      	ldr	r3, [pc, #224]	; (800d6cc <lfs_init+0x290>)
 800d5ec:	4a2e      	ldr	r2, [pc, #184]	; (800d6a8 <lfs_init+0x26c>)
 800d5ee:	f640 51d6 	movw	r1, #3542	; 0xdd6
 800d5f2:	482e      	ldr	r0, [pc, #184]	; (800d6ac <lfs_init+0x270>)
 800d5f4:	f011 feea 	bl	801f3cc <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5fe:	f003 0307 	and.w	r3, r3, #7
 800d602:	2b00      	cmp	r3, #0
 800d604:	d106      	bne.n	800d614 <lfs_init+0x1d8>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60c:	f003 0303 	and.w	r3, r3, #3
 800d610:	2b00      	cmp	r3, #0
 800d612:	d006      	beq.n	800d622 <lfs_init+0x1e6>
 800d614:	4b2e      	ldr	r3, [pc, #184]	; (800d6d0 <lfs_init+0x294>)
 800d616:	4a24      	ldr	r2, [pc, #144]	; (800d6a8 <lfs_init+0x26c>)
 800d618:	f640 51d7 	movw	r1, #3543	; 0xdd7
 800d61c:	4823      	ldr	r0, [pc, #140]	; (800d6ac <lfs_init+0x270>)
 800d61e:	f011 fed5 	bl	801f3cc <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d005      	beq.n	800d638 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	665a      	str	r2, [r3, #100]	; 0x64
 800d636:	e010      	b.n	800d65a <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fb fdab 	bl	800919a <lfs_malloc>
 800d644:	4602      	mov	r2, r0
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d103      	bne.n	800d65a <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800d652:	f06f 030b 	mvn.w	r3, #11
 800d656:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800d658:	e099      	b.n	800d78e <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d660:	2bff      	cmp	r3, #255	; 0xff
 800d662:	d906      	bls.n	800d672 <lfs_init+0x236>
 800d664:	4b1b      	ldr	r3, [pc, #108]	; (800d6d4 <lfs_init+0x298>)
 800d666:	4a10      	ldr	r2, [pc, #64]	; (800d6a8 <lfs_init+0x26c>)
 800d668:	f640 51e4 	movw	r1, #3556	; 0xde4
 800d66c:	480f      	ldr	r0, [pc, #60]	; (800d6ac <lfs_init+0x270>)
 800d66e:	f011 fead 	bl	801f3cc <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d680:	2b00      	cmp	r3, #0
 800d682:	d102      	bne.n	800d68a <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	22ff      	movs	r2, #255	; 0xff
 800d688:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d68e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d690:	2b00      	cmp	r3, #0
 800d692:	da23      	bge.n	800d6dc <lfs_init+0x2a0>
 800d694:	4b10      	ldr	r3, [pc, #64]	; (800d6d8 <lfs_init+0x29c>)
 800d696:	4a04      	ldr	r2, [pc, #16]	; (800d6a8 <lfs_init+0x26c>)
 800d698:	f640 51ea 	movw	r1, #3562	; 0xdea
 800d69c:	4803      	ldr	r0, [pc, #12]	; (800d6ac <lfs_init+0x270>)
 800d69e:	f011 fe95 	bl	801f3cc <__assert_func>
 800d6a2:	bf00      	nop
 800d6a4:	08021098 	.word	0x08021098
 800d6a8:	08025114 	.word	0x08025114
 800d6ac:	08020ddc 	.word	0x08020ddc
 800d6b0:	080210b4 	.word	0x080210b4
 800d6b4:	080210d0 	.word	0x080210d0
 800d6b8:	080210ec 	.word	0x080210ec
 800d6bc:	0802111c 	.word	0x0802111c
 800d6c0:	0802114c 	.word	0x0802114c
 800d6c4:	08021180 	.word	0x08021180
 800d6c8:	080211cc 	.word	0x080211cc
 800d6cc:	080211e8 	.word	0x080211e8
 800d6d0:	08021208 	.word	0x08021208
 800d6d4:	0802125c 	.word	0x0802125c
 800d6d8:	08021278 	.word	0x08021278
    lfs->file_max = lfs->cfg->file_max;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d103      	bne.n	800d6f6 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d6f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6fc:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d700:	4293      	cmp	r3, r2
 800d702:	d906      	bls.n	800d712 <lfs_init+0x2d6>
 800d704:	4b26      	ldr	r3, [pc, #152]	; (800d7a0 <lfs_init+0x364>)
 800d706:	4a27      	ldr	r2, [pc, #156]	; (800d7a4 <lfs_init+0x368>)
 800d708:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 800d70c:	4826      	ldr	r0, [pc, #152]	; (800d7a8 <lfs_init+0x36c>)
 800d70e:	f011 fe5d 	bl	801f3cc <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d720:	2b00      	cmp	r3, #0
 800d722:	d103      	bne.n	800d72c <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d72a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d738:	429a      	cmp	r2, r3
 800d73a:	d906      	bls.n	800d74a <lfs_init+0x30e>
 800d73c:	4b1b      	ldr	r3, [pc, #108]	; (800d7ac <lfs_init+0x370>)
 800d73e:	4a19      	ldr	r2, [pc, #100]	; (800d7a4 <lfs_init+0x368>)
 800d740:	f640 51f6 	movw	r1, #3574	; 0xdf6
 800d744:	4818      	ldr	r0, [pc, #96]	; (800d7a8 <lfs_init+0x36c>)
 800d746:	f011 fe41 	bl	801f3cc <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d750:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d758:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	333c      	adds	r3, #60	; 0x3c
 800d76a:	2200      	movs	r2, #0
 800d76c:	601a      	str	r2, [r3, #0]
 800d76e:	605a      	str	r2, [r3, #4]
 800d770:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	3330      	adds	r3, #48	; 0x30
 800d776:	2200      	movs	r2, #0
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	605a      	str	r2, [r3, #4]
 800d77c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	3348      	adds	r3, #72	; 0x48
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	605a      	str	r2, [r3, #4]
 800d788:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	e003      	b.n	800d796 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f80e 	bl	800d7b0 <lfs_deinit>
    return err;
 800d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d796:	4618      	mov	r0, r3
 800d798:	3730      	adds	r7, #48	; 0x30
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	0802129c 	.word	0x0802129c
 800d7a4:	08025114 	.word	0x08025114
 800d7a8:	08020ddc 	.word	0x08020ddc
 800d7ac:	080212b8 	.word	0x080212b8

0800d7b0 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d104      	bne.n	800d7cc <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	68db      	ldr	r3, [r3, #12]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fb fcf3 	bl	80091b2 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d104      	bne.n	800d7e0 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	69db      	ldr	r3, [r3, #28]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fb fce9 	bl	80091b2 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d104      	bne.n	800d7f4 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7fb fcdf 	bl	80091b2 <lfs_free>
    }

    return 0;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
	...

0800d800 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 800d800:	b580      	push	{r7, lr}
 800d802:	b0a0      	sub	sp, #128	; 0x80
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
    int err = 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f7ff fe13 	bl	800d43c <lfs_init>
 800d816:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d818:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <lfs_rawformat+0x22>
            return err;
 800d81e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d820:	e082      	b.n	800d928 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d82c:	461a      	mov	r2, r3
 800d82e:	2100      	movs	r1, #0
 800d830:	f012 f99e 	bl	801fb70 <memset>
        lfs->free.off = 0;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d840:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800d848:	4619      	mov	r1, r3
 800d84a:	4610      	mov	r0, r2
 800d84c:	f7fb fc06 	bl	800905c <lfs_min>
 800d850:	4602      	mov	r2, r0
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7fc fad8 	bl	8009e12 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800d862:	f107 030c 	add.w	r3, r7, #12
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7fd fe25 	bl	800b4b8 <lfs_dir_alloc>
 800d86e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d870:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d872:	2b00      	cmp	r3, #0
 800d874:	d14f      	bne.n	800d916 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800d876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d87a:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        lfs_superblock_t superblock = {
 800d882:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs_superblock_t superblock = {
 800d88a:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800d890:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800d896:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800d89c:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 800d89e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fc fa46 	bl	8009d34 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800d8a8:	4b21      	ldr	r3, [pc, #132]	; (800d930 <lfs_rawformat+0x130>)
 800d8aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	653b      	str	r3, [r7, #80]	; 0x50
 800d8b0:	4b20      	ldr	r3, [pc, #128]	; (800d934 <lfs_rawformat+0x134>)
 800d8b2:	657b      	str	r3, [r7, #84]	; 0x54
 800d8b4:	4b20      	ldr	r3, [pc, #128]	; (800d938 <lfs_rawformat+0x138>)
 800d8b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d8b8:	4b20      	ldr	r3, [pc, #128]	; (800d93c <lfs_rawformat+0x13c>)
 800d8ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d8c0:	663b      	str	r3, [r7, #96]	; 0x60
 800d8c2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d8c6:	f107 010c 	add.w	r1, r7, #12
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7fe fa43 	bl	800bd58 <lfs_dir_commit>
 800d8d2:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800d8d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d11f      	bne.n	800d91a <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800d8e0:	f107 010c 	add.w	r1, r7, #12
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7fe fa35 	bl	800bd58 <lfs_dir_commit>
 800d8ee:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d8f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d113      	bne.n	800d91e <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	633b      	str	r3, [r7, #48]	; 0x30
 800d8fe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d902:	f107 030c 	add.w	r3, r7, #12
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7fd fa51 	bl	800adb0 <lfs_dir_fetch>
 800d90e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d912:	2b00      	cmp	r3, #0
 800d914:	e004      	b.n	800d920 <lfs_rawformat+0x120>
            goto cleanup;
 800d916:	bf00      	nop
 800d918:	e002      	b.n	800d920 <lfs_rawformat+0x120>
            goto cleanup;
 800d91a:	bf00      	nop
 800d91c:	e000      	b.n	800d920 <lfs_rawformat+0x120>
            goto cleanup;
 800d91e:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f7ff ff45 	bl	800d7b0 <lfs_deinit>
    return err;
 800d926:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 800d928:	4618      	mov	r0, r3
 800d92a:	3780      	adds	r7, #128	; 0x80
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	40100000 	.word	0x40100000
 800d934:	0ff00008 	.word	0x0ff00008
 800d938:	080212e8 	.word	0x080212e8
 800d93c:	20100018 	.word	0x20100018

0800d940 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 800d940:	b580      	push	{r7, lr}
 800d942:	b09c      	sub	sp, #112	; 0x70
 800d944:	af04      	add	r7, sp, #16
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800d94a:	6839      	ldr	r1, [r7, #0]
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f7ff fd75 	bl	800d43c <lfs_init>
 800d952:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 800d954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <lfs_rawmount+0x1e>
        return err;
 800d95a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d95c:	e149      	b.n	800dbf2 <lfs_rawmount+0x2b2>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800d95e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d962:	2220      	movs	r2, #32
 800d964:	2100      	movs	r1, #0
 800d966:	4618      	mov	r0, r3
 800d968:	f012 f902 	bl	801fb70 <memset>
 800d96c:	2301      	movs	r3, #1
 800d96e:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 800d970:	2300      	movs	r3, #0
 800d972:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 800d974:	e0dc      	b.n	800db30 <lfs_rawmount+0x1f0>
        if (cycle >= lfs->cfg->block_count/2) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d97c:	085b      	lsrs	r3, r3, #1
 800d97e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d980:	429a      	cmp	r2, r3
 800d982:	d303      	bcc.n	800d98c <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 800d984:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800d988:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800d98a:	e12e      	b.n	800dbea <lfs_rawmount+0x2aa>
        }
        cycle += 1;
 800d98c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d98e:	3301      	adds	r3, #1
 800d990:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	627b      	str	r3, [r7, #36]	; 0x24
 800d996:	4b99      	ldr	r3, [pc, #612]	; (800dbfc <lfs_rawmount+0x2bc>)
 800d998:	62bb      	str	r3, [r7, #40]	; 0x28
 800d99a:	2308      	movs	r3, #8
 800d99c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800d99e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d9a2:	f103 0218 	add.w	r2, r3, #24
 800d9a6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d9aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9ae:	9303      	str	r3, [sp, #12]
 800d9b0:	4b93      	ldr	r3, [pc, #588]	; (800dc00 <lfs_rawmount+0x2c0>)
 800d9b2:	9302      	str	r3, [sp, #8]
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	9301      	str	r3, [sp, #4]
 800d9b8:	4b92      	ldr	r3, [pc, #584]	; (800dc04 <lfs_rawmount+0x2c4>)
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	4b92      	ldr	r3, [pc, #584]	; (800dc08 <lfs_rawmount+0x2c8>)
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7fc fe8a 	bl	800a6d8 <lfs_dir_fetchmatch>
 800d9c4:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800d9c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	da02      	bge.n	800d9d2 <lfs_rawmount+0x92>
            err = tag;
 800d9cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9ce:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800d9d0:	e10b      	b.n	800dbea <lfs_rawmount+0x2aa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800d9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f000 809e 	beq.w	800db16 <lfs_rawmount+0x1d6>
 800d9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7fc f804 	bl	80099ea <lfs_tag_isdelete>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	f083 0301 	eor.w	r3, r3, #1
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f000 8093 	beq.w	800db16 <lfs_rawmount+0x1d6>
            // update root
            lfs->root[0] = dir.pair[0];
 800d9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800d9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800d9fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800da00:	f107 030c 	add.w	r3, r7, #12
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	4b81      	ldr	r3, [pc, #516]	; (800dc0c <lfs_rawmount+0x2cc>)
 800da08:	4a7f      	ldr	r2, [pc, #508]	; (800dc08 <lfs_rawmount+0x2c8>)
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7fc fbbc 	bl	800a188 <lfs_dir_get>
 800da10:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800da12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da14:	2b00      	cmp	r3, #0
 800da16:	da02      	bge.n	800da1e <lfs_rawmount+0xde>
                err = tag;
 800da18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da1a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800da1c:	e0e5      	b.n	800dbea <lfs_rawmount+0x2aa>
            }
            lfs_superblock_fromle32(&superblock);
 800da1e:	f107 030c 	add.w	r3, r7, #12
 800da22:	4618      	mov	r0, r3
 800da24:	f7fc f94e 	bl	8009cc4 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	0c1b      	lsrs	r3, r3, #16
 800da2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800da36:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d103      	bne.n	800da46 <lfs_rawmount+0x106>
 800da3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800da42:	2b00      	cmp	r3, #0
 800da44:	d011      	beq.n	800da6a <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800da46:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800da4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800da4e:	4970      	ldr	r1, [pc, #448]	; (800dc10 <lfs_rawmount+0x2d0>)
 800da50:	9101      	str	r1, [sp, #4]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	4613      	mov	r3, r2
 800da56:	f640 6291 	movw	r2, #3729	; 0xe91
 800da5a:	496e      	ldr	r1, [pc, #440]	; (800dc14 <lfs_rawmount+0x2d4>)
 800da5c:	486e      	ldr	r0, [pc, #440]	; (800dc18 <lfs_rawmount+0x2d8>)
 800da5e:	f011 ff31 	bl	801f8c4 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800da62:	f06f 0315 	mvn.w	r3, #21
 800da66:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800da68:	e054      	b.n	800db14 <lfs_rawmount+0x1d4>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d018      	beq.n	800daa2 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 800da70:	69ba      	ldr	r2, [r7, #24]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da76:	429a      	cmp	r2, r3
 800da78:	d910      	bls.n	800da9c <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800da7a:	69ba      	ldr	r2, [r7, #24]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da80:	4963      	ldr	r1, [pc, #396]	; (800dc10 <lfs_rawmount+0x2d0>)
 800da82:	9101      	str	r1, [sp, #4]
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	4613      	mov	r3, r2
 800da88:	f640 629a 	movw	r2, #3738	; 0xe9a
 800da8c:	4961      	ldr	r1, [pc, #388]	; (800dc14 <lfs_rawmount+0x2d4>)
 800da8e:	4863      	ldr	r0, [pc, #396]	; (800dc1c <lfs_rawmount+0x2dc>)
 800da90:	f011 ff18 	bl	801f8c4 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800da94:	f06f 0315 	mvn.w	r3, #21
 800da98:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800da9a:	e03b      	b.n	800db14 <lfs_rawmount+0x1d4>
                }

                lfs->name_max = superblock.name_max;
 800da9c:	69ba      	ldr	r2, [r7, #24]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d018      	beq.n	800dada <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 800daa8:	69fa      	ldr	r2, [r7, #28]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daae:	429a      	cmp	r2, r3
 800dab0:	d910      	bls.n	800dad4 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800dab2:	69fa      	ldr	r2, [r7, #28]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dab8:	4955      	ldr	r1, [pc, #340]	; (800dc10 <lfs_rawmount+0x2d0>)
 800daba:	9101      	str	r1, [sp, #4]
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	4613      	mov	r3, r2
 800dac0:	f640 62a5 	movw	r2, #3749	; 0xea5
 800dac4:	4953      	ldr	r1, [pc, #332]	; (800dc14 <lfs_rawmount+0x2d4>)
 800dac6:	4856      	ldr	r0, [pc, #344]	; (800dc20 <lfs_rawmount+0x2e0>)
 800dac8:	f011 fefc 	bl	801f8c4 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800dacc:	f06f 0315 	mvn.w	r3, #21
 800dad0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800dad2:	e01f      	b.n	800db14 <lfs_rawmount+0x1d4>
                }

                lfs->file_max = superblock.file_max;
 800dad4:	69fa      	ldr	r2, [r7, #28]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800dada:	6a3b      	ldr	r3, [r7, #32]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d01a      	beq.n	800db16 <lfs_rawmount+0x1d6>
                if (superblock.attr_max > lfs->attr_max) {
 800dae0:	6a3a      	ldr	r2, [r7, #32]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d910      	bls.n	800db0c <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800daea:	6a3a      	ldr	r2, [r7, #32]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf0:	4947      	ldr	r1, [pc, #284]	; (800dc10 <lfs_rawmount+0x2d0>)
 800daf2:	9101      	str	r1, [sp, #4]
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	4613      	mov	r3, r2
 800daf8:	f44f 626b 	mov.w	r2, #3760	; 0xeb0
 800dafc:	4945      	ldr	r1, [pc, #276]	; (800dc14 <lfs_rawmount+0x2d4>)
 800dafe:	4849      	ldr	r0, [pc, #292]	; (800dc24 <lfs_rawmount+0x2e4>)
 800db00:	f011 fee0 	bl	801f8c4 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800db04:	f06f 0315 	mvn.w	r3, #21
 800db08:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800db0a:	e003      	b.n	800db14 <lfs_rawmount+0x1d4>
                }

                lfs->attr_max = superblock.attr_max;
 800db0c:	6a3a      	ldr	r2, [r7, #32]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	675a      	str	r2, [r3, #116]	; 0x74
 800db12:	e000      	b.n	800db16 <lfs_rawmount+0x1d6>
            goto cleanup;
 800db14:	e069      	b.n	800dbea <lfs_rawmount+0x2aa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7fd f960 	bl	800ade8 <lfs_dir_getgstate>
 800db28:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 800db2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d15b      	bne.n	800dbe8 <lfs_rawmount+0x2a8>
    while (!lfs_pair_isnull(dir.tail)) {
 800db30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db34:	3318      	adds	r3, #24
 800db36:	4618      	mov	r0, r3
 800db38:	f7fb fea3 	bl	8009882 <lfs_pair_isnull>
 800db3c:	4603      	mov	r3, r0
 800db3e:	f083 0301 	eor.w	r3, r3, #1
 800db42:	b2db      	uxtb	r3, r3
 800db44:	2b00      	cmp	r3, #0
 800db46:	f47f af16 	bne.w	800d976 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	3320      	adds	r3, #32
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fb fe97 	bl	8009882 <lfs_pair_isnull>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d003      	beq.n	800db62 <lfs_rawmount+0x222>
        err = LFS_ERR_INVAL;
 800db5a:	f06f 0315 	mvn.w	r3, #21
 800db5e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800db60:	e043      	b.n	800dbea <lfs_rawmount+0x2aa>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	3330      	adds	r3, #48	; 0x30
 800db66:	4618      	mov	r0, r3
 800db68:	f7fb ffe2 	bl	8009b30 <lfs_gstate_iszero>
 800db6c:	4603      	mov	r3, r0
 800db6e:	f083 0301 	eor.w	r3, r3, #1
 800db72:	b2db      	uxtb	r3, r3
 800db74:	2b00      	cmp	r3, #0
 800db76:	d010      	beq.n	800db9a <lfs_rawmount+0x25a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800db84:	4822      	ldr	r0, [pc, #136]	; (800dc10 <lfs_rawmount+0x2d0>)
 800db86:	9002      	str	r0, [sp, #8]
 800db88:	9201      	str	r2, [sp, #4]
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	460b      	mov	r3, r1
 800db8e:	f640 62c9 	movw	r2, #3785	; 0xec9
 800db92:	4920      	ldr	r1, [pc, #128]	; (800dc14 <lfs_rawmount+0x2d4>)
 800db94:	4824      	ldr	r0, [pc, #144]	; (800dc28 <lfs_rawmount+0x2e8>)
 800db96:	f011 fe95 	bl	801f8c4 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fb ff15 	bl	80099ce <lfs_tag_isvalid>
 800dba4:	4603      	mov	r3, r0
 800dba6:	f083 0301 	eor.w	r3, r3, #1
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	461a      	mov	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb2:	441a      	add	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	333c      	adds	r3, #60	; 0x3c
 800dbbe:	3230      	adds	r2, #48	; 0x30
 800dbc0:	ca07      	ldmia	r2, {r0, r1, r2}
 800dbc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800dbce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dbd0:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbd4:	fb01 f202 	mul.w	r2, r1, r2
 800dbd8:	1a9a      	subs	r2, r3, r2
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f7fc f926 	bl	8009e30 <lfs_alloc_drop>

    return 0;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e004      	b.n	800dbf2 <lfs_rawmount+0x2b2>
            goto cleanup;
 800dbe8:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f000 f81e 	bl	800dc2c <lfs_rawunmount>
    return err;
 800dbf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3760      	adds	r7, #96	; 0x60
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	080212e8 	.word	0x080212e8
 800dc00:	0800ae4d 	.word	0x0800ae4d
 800dc04:	0ff00008 	.word	0x0ff00008
 800dc08:	7ffffc00 	.word	0x7ffffc00
 800dc0c:	20100018 	.word	0x20100018
 800dc10:	08020ee8 	.word	0x08020ee8
 800dc14:	08020ddc 	.word	0x08020ddc
 800dc18:	080212f4 	.word	0x080212f4
 800dc1c:	08021320 	.word	0x08021320
 800dc20:	08021354 	.word	0x08021354
 800dc24:	08021388 	.word	0x08021388
 800dc28:	080213bc 	.word	0x080213bc

0800dc2c <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f7ff fdbb 	bl	800d7b0 <lfs_deinit>
 800dc3a:	4603      	mov	r3, r0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800dc44:	b590      	push	{r4, r7, lr}
 800dc46:	b09d      	sub	sp, #116	; 0x74
 800dc48:	af04      	add	r7, sp, #16
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
 800dc50:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800dc52:	f107 0318 	add.w	r3, r7, #24
 800dc56:	2220      	movs	r2, #32
 800dc58:	2100      	movs	r1, #0
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f011 ff88 	bl	801fb70 <memset>
 800dc60:	2301      	movs	r3, #1
 800dc62:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800dc68:	e0a7      	b.n	800ddba <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc70:	085b      	lsrs	r3, r3, #1
 800dc72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d302      	bcc.n	800dc7e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 800dc78:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800dc7c:	e102      	b.n	800de84 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 800dc7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc80:	3301      	adds	r3, #1
 800dc82:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 800dc84:	2300      	movs	r3, #0
 800dc86:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc88:	e013      	b.n	800dcb2 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 800dc8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc8c:	3306      	adds	r3, #6
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	3360      	adds	r3, #96	; 0x60
 800dc92:	443b      	add	r3, r7
 800dc94:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	4611      	mov	r1, r2
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	4798      	blx	r3
 800dca0:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 800dca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <lfs_fs_rawtraverse+0x68>
                return err;
 800dca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcaa:	e0eb      	b.n	800de84 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 800dcac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcae:	3301      	adds	r3, #1
 800dcb0:	65bb      	str	r3, [r7, #88]	; 0x58
 800dcb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	dde8      	ble.n	800dc8a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800dcb8:	f107 0318 	add.w	r3, r7, #24
 800dcbc:	f103 0218 	add.w	r2, r3, #24
 800dcc0:	f107 0318 	add.w	r3, r7, #24
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7fd f872 	bl	800adb0 <lfs_dir_fetch>
 800dccc:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800dcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d001      	beq.n	800dcd8 <lfs_fs_rawtraverse+0x94>
            return err;
 800dcd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcd6:	e0d5      	b.n	800de84 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800dcd8:	2300      	movs	r3, #0
 800dcda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800dcde:	e067      	b.n	800ddb0 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800dce0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dce4:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800dce6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dcea:	f043 0308 	orr.w	r3, r3, #8
 800dcee:	f107 0118 	add.w	r1, r7, #24
 800dcf2:	f107 0210 	add.w	r2, r7, #16
 800dcf6:	9200      	str	r2, [sp, #0]
 800dcf8:	4a64      	ldr	r2, [pc, #400]	; (800de8c <lfs_fs_rawtraverse+0x248>)
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f7fc fa44 	bl	800a188 <lfs_dir_get>
 800dd00:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800dd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	da05      	bge.n	800dd14 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 800dd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd0a:	f113 0f02 	cmn.w	r3, #2
 800dd0e:	d049      	beq.n	800dda4 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 800dd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd12:	e0b7      	b.n	800de84 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 800dd14:	f107 0310 	add.w	r3, r7, #16
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fb ffbb 	bl	8009c94 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800dd1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7fb fe85 	bl	8009a30 <lfs_tag_type3>
 800dd26:	4603      	mov	r3, r0
 800dd28:	461a      	mov	r2, r3
 800dd2a:	f240 2302 	movw	r3, #514	; 0x202
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d113      	bne.n	800dd5a <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800dd32:	68f9      	ldr	r1, [r7, #12]
 800dd34:	6938      	ldr	r0, [r7, #16]
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	9202      	str	r2, [sp, #8]
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	9201      	str	r2, [sp, #4]
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	4603      	mov	r3, r0
 800dd44:	460a      	mov	r2, r1
 800dd46:	2100      	movs	r1, #0
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f7fe fea3 	bl	800ca94 <lfs_ctz_traverse>
 800dd4e:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800dd50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d027      	beq.n	800dda6 <lfs_fs_rawtraverse+0x162>
                    return err;
 800dd56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd58:	e094      	b.n	800de84 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800dd5a:	78fb      	ldrb	r3, [r7, #3]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d022      	beq.n	800dda6 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800dd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fb fe64 	bl	8009a30 <lfs_tag_type3>
 800dd68:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800dd6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd6e:	d11a      	bne.n	800dda6 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 800dd70:	2300      	movs	r3, #0
 800dd72:	653b      	str	r3, [r7, #80]	; 0x50
 800dd74:	e012      	b.n	800dd9c <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 800dd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	f107 0210 	add.w	r2, r7, #16
 800dd7e:	4413      	add	r3, r2
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	4611      	mov	r1, r2
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	4798      	blx	r3
 800dd8a:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800dd8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d001      	beq.n	800dd96 <lfs_fs_rawtraverse+0x152>
                        return err;
 800dd92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd94:	e076      	b.n	800de84 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 800dd96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd98:	3301      	adds	r3, #1
 800dd9a:	653b      	str	r3, [r7, #80]	; 0x50
 800dd9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	dde9      	ble.n	800dd76 <lfs_fs_rawtraverse+0x132>
 800dda2:	e000      	b.n	800dda6 <lfs_fs_rawtraverse+0x162>
                    continue;
 800dda4:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800dda6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ddaa:	3301      	adds	r3, #1
 800ddac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800ddb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ddb2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d392      	bcc.n	800dce0 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 800ddba:	f107 0318 	add.w	r3, r7, #24
 800ddbe:	3318      	adds	r3, #24
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fb fd5e 	bl	8009882 <lfs_pair_isnull>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	f083 0301 	eor.w	r3, r3, #1
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f47f af4b 	bne.w	800dc6a <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddda:	e04f      	b.n	800de7c <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 800dddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddde:	799b      	ldrb	r3, [r3, #6]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d147      	bne.n	800de74 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800dde4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dde8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d01d      	beq.n	800de2c <lfs_fs_rawtraverse+0x1e8>
 800ddf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d117      	bne.n	800de2c <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800ddfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddfe:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800de02:	68f8      	ldr	r0, [r7, #12]
 800de04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de06:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800de08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	9202      	str	r2, [sp, #8]
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	9201      	str	r2, [sp, #4]
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	4623      	mov	r3, r4
 800de18:	4602      	mov	r2, r0
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f7fe fe3a 	bl	800ca94 <lfs_ctz_traverse>
 800de20:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800de22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de24:	2b00      	cmp	r3, #0
 800de26:	d001      	beq.n	800de2c <lfs_fs_rawtraverse+0x1e8>
                return err;
 800de28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de2a:	e02b      	b.n	800de84 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800de2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01e      	beq.n	800de76 <lfs_fs_rawtraverse+0x232>
 800de38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d118      	bne.n	800de76 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800de44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de46:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de4e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800de50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	9202      	str	r2, [sp, #8]
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	9201      	str	r2, [sp, #4]
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	4623      	mov	r3, r4
 800de60:	4602      	mov	r2, r0
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f7fe fe16 	bl	800ca94 <lfs_ctz_traverse>
 800de68:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800de6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d002      	beq.n	800de76 <lfs_fs_rawtraverse+0x232>
                return err;
 800de70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de72:	e007      	b.n	800de84 <lfs_fs_rawtraverse+0x240>
            continue;
 800de74:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800de76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d1ac      	bne.n	800dddc <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800de82:	2300      	movs	r3, #0
}
 800de84:	4618      	mov	r0, r3
 800de86:	3764      	adds	r7, #100	; 0x64
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd90      	pop	{r4, r7, pc}
 800de8c:	700ffc00 	.word	0x700ffc00

0800de90 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800de90:	b580      	push	{r7, lr}
 800de92:	b086      	sub	sp, #24
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2201      	movs	r2, #1
 800dea6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800deac:	e024      	b.n	800def8 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deb4:	085b      	lsrs	r3, r3, #1
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d302      	bcc.n	800dec2 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800debc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800dec0:	e027      	b.n	800df12 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	3301      	adds	r3, #1
 800dec6:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	3318      	adds	r3, #24
 800decc:	68b9      	ldr	r1, [r7, #8]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fb fcf2 	bl	80098b8 <lfs_pair_cmp>
 800ded4:	4603      	mov	r3, r0
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d101      	bne.n	800dede <lfs_fs_pred+0x4e>
            return 0;
 800deda:	2300      	movs	r3, #0
 800dedc:	e019      	b.n	800df12 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	3318      	adds	r3, #24
 800dee2:	461a      	mov	r2, r3
 800dee4:	6879      	ldr	r1, [r7, #4]
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f7fc ff62 	bl	800adb0 <lfs_dir_fetch>
 800deec:	6138      	str	r0, [r7, #16]
        if (err) {
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d001      	beq.n	800def8 <lfs_fs_pred+0x68>
            return err;
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	e00c      	b.n	800df12 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	3318      	adds	r3, #24
 800defc:	4618      	mov	r0, r3
 800defe:	f7fb fcc0 	bl	8009882 <lfs_pair_isnull>
 800df02:	4603      	mov	r3, r0
 800df04:	f083 0301 	eor.w	r3, r3, #1
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d1cf      	bne.n	800deae <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800df0e:	f06f 0301 	mvn.w	r3, #1
}
 800df12:	4618      	mov	r0, r3
 800df14:	3718      	adds	r7, #24
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800df1a:	b5b0      	push	{r4, r5, r7, lr}
 800df1c:	b08e      	sub	sp, #56	; 0x38
 800df1e:	af04      	add	r7, sp, #16
 800df20:	60f8      	str	r0, [r7, #12]
 800df22:	60b9      	str	r1, [r7, #8]
 800df24:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800df3a:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df40:	6a5d      	ldr	r5, [r3, #36]	; 0x24
            disk->block, disk->off, &child, sizeof(child));
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	69fa      	ldr	r2, [r7, #28]
 800df48:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 800df4a:	2108      	movs	r1, #8
 800df4c:	9103      	str	r1, [sp, #12]
 800df4e:	f107 0110 	add.w	r1, r7, #16
 800df52:	9102      	str	r1, [sp, #8]
 800df54:	9201      	str	r2, [sp, #4]
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	462b      	mov	r3, r5
 800df5a:	4622      	mov	r2, r4
 800df5c:	4601      	mov	r1, r0
 800df5e:	6a38      	ldr	r0, [r7, #32]
 800df60:	f7fb f958 	bl	8009214 <lfs_bd_read>
 800df64:	61b8      	str	r0, [r7, #24]
    if (err) {
 800df66:	69bb      	ldr	r3, [r7, #24]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <lfs_fs_parent_match+0x56>
        return err;
 800df6c:	69bb      	ldr	r3, [r7, #24]
 800df6e:	e012      	b.n	800df96 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800df70:	f107 0310 	add.w	r3, r7, #16
 800df74:	4618      	mov	r0, r3
 800df76:	f7fb fcf6 	bl	8009966 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800df7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7c:	1d1a      	adds	r2, r3, #4
 800df7e:	f107 0310 	add.w	r3, r7, #16
 800df82:	4611      	mov	r1, r2
 800df84:	4618      	mov	r0, r3
 800df86:	f7fb fc97 	bl	80098b8 <lfs_pair_cmp>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	bf14      	ite	ne
 800df90:	2301      	movne	r3, #1
 800df92:	2300      	moveq	r3, #0
 800df94:	b2db      	uxtb	r3, r3
}
 800df96:	4618      	mov	r0, r3
 800df98:	3728      	adds	r7, #40	; 0x28
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800dfa0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b08e      	sub	sp, #56	; 0x38
 800dfa4:	af04      	add	r7, sp, #16
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800dfbc:	e030      	b.n	800e020 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc4:	085b      	lsrs	r3, r3, #1
 800dfc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d302      	bcc.n	800dfd2 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800dfcc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800dfd0:	e033      	b.n	800e03a <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 800dfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800dfe6:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	3304      	adds	r3, #4
 800dfec:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800dfee:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800dff0:	f107 0314 	add.w	r3, r7, #20
 800dff4:	9303      	str	r3, [sp, #12]
 800dff6:	4b13      	ldr	r3, [pc, #76]	; (800e044 <lfs_fs_parent+0xa4>)
 800dff8:	9302      	str	r3, [sp, #8]
 800dffa:	2300      	movs	r3, #0
 800dffc:	9301      	str	r3, [sp, #4]
 800dffe:	4b12      	ldr	r3, [pc, #72]	; (800e048 <lfs_fs_parent+0xa8>)
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	4b12      	ldr	r3, [pc, #72]	; (800e04c <lfs_fs_parent+0xac>)
 800e004:	6879      	ldr	r1, [r7, #4]
 800e006:	68f8      	ldr	r0, [r7, #12]
 800e008:	f7fc fb66 	bl	800a6d8 <lfs_dir_fetchmatch>
 800e00c:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d005      	beq.n	800e020 <lfs_fs_parent+0x80>
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	f113 0f02 	cmn.w	r3, #2
 800e01a:	d001      	beq.n	800e020 <lfs_fs_parent+0x80>
            return tag;
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	e00c      	b.n	800e03a <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	3318      	adds	r3, #24
 800e024:	4618      	mov	r0, r3
 800e026:	f7fb fc2c 	bl	8009882 <lfs_pair_isnull>
 800e02a:	4603      	mov	r3, r0
 800e02c:	f083 0301 	eor.w	r3, r3, #1
 800e030:	b2db      	uxtb	r3, r3
 800e032:	2b00      	cmp	r3, #0
 800e034:	d1c3      	bne.n	800dfbe <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800e036:	f06f 0301 	mvn.w	r3, #1
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3728      	adds	r7, #40	; 0x28
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	0800df1b 	.word	0x0800df1b
 800e048:	20000008 	.word	0x20000008
 800e04c:	7ff003ff 	.word	0x7ff003ff

0800e050 <lfs_fs_relocate>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 800e050:	b580      	push	{r7, lr}
 800e052:	b0a6      	sub	sp, #152	; 0x98
 800e054:	af04      	add	r7, sp, #16
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	3320      	adds	r3, #32
 800e060:	4619      	mov	r1, r3
 800e062:	68b8      	ldr	r0, [r7, #8]
 800e064:	f7fb fc28 	bl	80098b8 <lfs_pair_cmp>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d107      	bne.n	800e07e <lfs_fs_relocate+0x2e>
        lfs->root[0] = newpair[0];
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685a      	ldr	r2, [r3, #4]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e086:	e031      	b.n	800e0ec <lfs_fs_relocate+0x9c>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 800e088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e08c:	3308      	adds	r3, #8
 800e08e:	4619      	mov	r1, r3
 800e090:	68b8      	ldr	r0, [r7, #8]
 800e092:	f7fb fc11 	bl	80098b8 <lfs_pair_cmp>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d109      	bne.n	800e0b0 <lfs_fs_relocate+0x60>
            d->m.pair[0] = newpair[0];
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0a4:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	685a      	ldr	r2, [r3, #4]
 800e0aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0ae:	60da      	str	r2, [r3, #12]
        }

        if (d->type == LFS_TYPE_DIR &&
 800e0b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0b4:	799b      	ldrb	r3, [r3, #6]
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d113      	bne.n	800e0e2 <lfs_fs_relocate+0x92>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
 800e0ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0be:	332c      	adds	r3, #44	; 0x2c
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	68b8      	ldr	r0, [r7, #8]
 800e0c4:	f7fb fbf8 	bl	80098b8 <lfs_pair_cmp>
 800e0c8:	4603      	mov	r3, r0
        if (d->type == LFS_TYPE_DIR &&
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d109      	bne.n	800e0e2 <lfs_fs_relocate+0x92>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0d6:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0e0:	631a      	str	r2, [r3, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800e0e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e0ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d1c9      	bne.n	800e088 <lfs_fs_relocate+0x38>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 800e0f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e0f8:	461a      	mov	r2, r3
 800e0fa:	68b9      	ldr	r1, [r7, #8]
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f7ff ff4f 	bl	800dfa0 <lfs_fs_parent>
 800e102:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800e106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	da07      	bge.n	800e11e <lfs_fs_relocate+0xce>
 800e10e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e112:	f113 0f02 	cmn.w	r3, #2
 800e116:	d002      	beq.n	800e11e <lfs_fs_relocate+0xce>
        return tag;
 800e118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e11c:	e0f3      	b.n	800e306 <lfs_fs_relocate+0x2b6>
    }

    if (tag != LFS_ERR_NOENT) {
 800e11e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e122:	f113 0f02 	cmn.w	r3, #2
 800e126:	d07c      	beq.n	800e222 <lfs_fs_relocate+0x1d2>
        // update disk, this creates a desync
        int err = lfs_fs_preporphans(lfs, +1);
 800e128:	2101      	movs	r1, #1
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f000 f8f8 	bl	800e320 <lfs_fs_preporphans>
 800e130:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800e132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <lfs_fs_relocate+0xec>
            return err;
 800e138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e13a:	e0e4      	b.n	800e306 <lfs_fs_relocate+0x2b6>
        }

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800e13c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e140:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	3330      	adds	r3, #48	; 0x30
 800e148:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e14c:	4611      	mov	r1, r2
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fb fd40 	bl	8009bd4 <lfs_gstate_hasmovehere>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d02d      	beq.n	800e1b6 <lfs_fs_relocate+0x166>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fb fc90 	bl	8009a84 <lfs_tag_id>
 800e164:	4603      	mov	r3, r0
 800e166:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            LFS_DEBUG("Fixing move while relocating "
 800e16a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e16c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e16e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800e172:	4867      	ldr	r0, [pc, #412]	; (800e310 <lfs_fs_relocate+0x2c0>)
 800e174:	9002      	str	r0, [sp, #8]
 800e176:	9201      	str	r2, [sp, #4]
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	460b      	mov	r3, r1
 800e17c:	f640 72c4 	movw	r2, #4036	; 0xfc4
 800e180:	4964      	ldr	r1, [pc, #400]	; (800e314 <lfs_fs_relocate+0x2c4>)
 800e182:	4865      	ldr	r0, [pc, #404]	; (800e318 <lfs_fs_relocate+0x2c8>)
 800e184:	f011 fb9e 	bl	801f8c4 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800e188:	2200      	movs	r2, #0
 800e18a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f000 f900 	bl	800e394 <lfs_fs_prepmove>
            if (moveid < lfs_tag_id(tag)) {
 800e194:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fb fc73 	bl	8009a84 <lfs_tag_id>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d205      	bcs.n	800e1b6 <lfs_fs_relocate+0x166>
                tag -= LFS_MKTAG(0, 1, 0);
 800e1aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1ae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e1b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
        }

        lfs_pair_tole32(newpair);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f7fb fbef 	bl	800999a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800e1bc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e1c0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d007      	beq.n	800e1d8 <lfs_fs_relocate+0x188>
 800e1c8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e1cc:	029b      	lsls	r3, r3, #10
 800e1ce:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e1d2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e1d6:	e000      	b.n	800e1da <lfs_fs_relocate+0x18a>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	647b      	str	r3, [r7, #68]	; 0x44
 800e1dc:	2300      	movs	r3, #0
 800e1de:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	653b      	str	r3, [r7, #80]	; 0x50
 800e1ea:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e1ee:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800e1f2:	2302      	movs	r3, #2
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f7fd fdaf 	bl	800bd58 <lfs_dir_commit>
 800e1fa:	67b8      	str	r0, [r7, #120]	; 0x78
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7fb fbb2 	bl	8009966 <lfs_pair_fromle32>
        if (err) {
 800e202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <lfs_fs_relocate+0x1bc>
            return err;
 800e208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e20a:	e07c      	b.n	800e306 <lfs_fs_relocate+0x2b6>
        }

        // next step, clean up orphans
        err = lfs_fs_preporphans(lfs, -1);
 800e20c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f000 f885 	bl	800e320 <lfs_fs_preporphans>
 800e216:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800e218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d001      	beq.n	800e222 <lfs_fs_relocate+0x1d2>
            return err;
 800e21e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e220:	e071      	b.n	800e306 <lfs_fs_relocate+0x2b6>
        }
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 800e222:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e226:	461a      	mov	r2, r3
 800e228:	68b9      	ldr	r1, [r7, #8]
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f7ff fe30 	bl	800de90 <lfs_fs_pred>
 800e230:	6778      	str	r0, [r7, #116]	; 0x74
    if (err && err != LFS_ERR_NOENT) {
 800e232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e234:	2b00      	cmp	r3, #0
 800e236:	d005      	beq.n	800e244 <lfs_fs_relocate+0x1f4>
 800e238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e23a:	f113 0f02 	cmn.w	r3, #2
 800e23e:	d001      	beq.n	800e244 <lfs_fs_relocate+0x1f4>
        return err;
 800e240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e242:	e060      	b.n	800e306 <lfs_fs_relocate+0x2b6>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 800e244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e246:	f113 0f02 	cmn.w	r3, #2
 800e24a:	d05b      	beq.n	800e304 <lfs_fs_relocate+0x2b4>
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800e24c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e250:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3330      	adds	r3, #48	; 0x30
 800e258:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e25c:	4611      	mov	r1, r2
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fb fcb8 	bl	8009bd4 <lfs_gstate_hasmovehere>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d01c      	beq.n	800e2a4 <lfs_fs_relocate+0x254>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fb fc08 	bl	8009a84 <lfs_tag_id>
 800e274:	4603      	mov	r3, r0
 800e276:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            LFS_DEBUG("Fixing move while relocating "
 800e27a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e27c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e27e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800e282:	4823      	ldr	r0, [pc, #140]	; (800e310 <lfs_fs_relocate+0x2c0>)
 800e284:	9002      	str	r0, [sp, #8]
 800e286:	9201      	str	r2, [sp, #4]
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	460b      	mov	r3, r1
 800e28c:	f640 72eb 	movw	r2, #4075	; 0xfeb
 800e290:	4920      	ldr	r1, [pc, #128]	; (800e314 <lfs_fs_relocate+0x2c4>)
 800e292:	4821      	ldr	r0, [pc, #132]	; (800e318 <lfs_fs_relocate+0x2c8>)
 800e294:	f011 fb16 	bl	801f8c4 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800e298:	2200      	movs	r2, #0
 800e29a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f000 f878 	bl	800e394 <lfs_fs_prepmove>
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7fb fb78 	bl	800999a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800e2aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800e2ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d007      	beq.n	800e2c6 <lfs_fs_relocate+0x276>
 800e2b6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800e2ba:	029b      	lsls	r3, r3, #10
 800e2bc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e2c0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e2c4:	e000      	b.n	800e2c8 <lfs_fs_relocate+0x278>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2ce:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e2d2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800e2d6:	051a      	lsls	r2, r3, #20
 800e2d8:	4b10      	ldr	r3, [pc, #64]	; (800e31c <lfs_fs_relocate+0x2cc>)
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	633b      	str	r3, [r7, #48]	; 0x30
 800e2e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e2e6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800e2ea:	2302      	movs	r3, #2
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f7fd fd33 	bl	800bd58 <lfs_dir_commit>
 800e2f2:	6778      	str	r0, [r7, #116]	; 0x74
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f7fb fb36 	bl	8009966 <lfs_pair_fromle32>
        if (err) {
 800e2fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d001      	beq.n	800e304 <lfs_fs_relocate+0x2b4>
            return err;
 800e300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e302:	e000      	b.n	800e306 <lfs_fs_relocate+0x2b6>
        }
    }

    return 0;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3788      	adds	r7, #136	; 0x88
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	08020ee8 	.word	0x08020ee8
 800e314:	08020ddc 	.word	0x08020ddc
 800e318:	080213f4 	.word	0x080213f4
 800e31c:	000ffc08 	.word	0x000ffc08

0800e320 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800e320:	b590      	push	{r4, r7, lr}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	460b      	mov	r3, r1
 800e32a:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e330:	4618      	mov	r0, r3
 800e332:	f7fb fbb7 	bl	8009aa4 <lfs_tag_size>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10a      	bne.n	800e352 <lfs_fs_preporphans+0x32>
 800e33c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e340:	2b00      	cmp	r3, #0
 800e342:	da06      	bge.n	800e352 <lfs_fs_preporphans+0x32>
 800e344:	4b10      	ldr	r3, [pc, #64]	; (800e388 <lfs_fs_preporphans+0x68>)
 800e346:	4a11      	ldr	r2, [pc, #68]	; (800e38c <lfs_fs_preporphans+0x6c>)
 800e348:	f241 0103 	movw	r1, #4099	; 0x1003
 800e34c:	4810      	ldr	r0, [pc, #64]	; (800e390 <lfs_fs_preporphans+0x70>)
 800e34e:	f011 f83d 	bl	801f3cc <__assert_func>
    lfs->gstate.tag += orphans;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e35a:	441a      	add	r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e364:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3330      	adds	r3, #48	; 0x30
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fb fbfc 	bl	8009b6a <lfs_gstate_hasorphans>
 800e372:	4603      	mov	r3, r0
 800e374:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800e376:	ea44 0203 	orr.w	r2, r4, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800e37e:	2300      	movs	r3, #0
}
 800e380:	4618      	mov	r0, r3
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	bd90      	pop	{r4, r7, pc}
 800e388:	08021438 	.word	0x08021438
 800e38c:	08025120 	.word	0x08025120
 800e390:	08020ddc 	.word	0x08020ddc

0800e394 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	460b      	mov	r3, r1
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3a6:	4a17      	ldr	r2, [pc, #92]	; (800e404 <lfs_fs_prepmove+0x70>)
 800e3a8:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800e3aa:	897b      	ldrh	r3, [r7, #10]
 800e3ac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e3b0:	428b      	cmp	r3, r1
 800e3b2:	d006      	beq.n	800e3c2 <lfs_fs_prepmove+0x2e>
 800e3b4:	897b      	ldrh	r3, [r7, #10]
 800e3b6:	029b      	lsls	r3, r3, #10
 800e3b8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e3bc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e3c0:	e000      	b.n	800e3c4 <lfs_fs_prepmove+0x30>
 800e3c2:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800e3c4:	431a      	orrs	r2, r3
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800e3ca:	897b      	ldrh	r3, [r7, #10]
 800e3cc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d002      	beq.n	800e3da <lfs_fs_prepmove+0x46>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	e000      	b.n	800e3dc <lfs_fs_prepmove+0x48>
 800e3da:	2300      	movs	r3, #0
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800e3e0:	897b      	ldrh	r3, [r7, #10]
 800e3e2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d003      	beq.n	800e3f2 <lfs_fs_prepmove+0x5e>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	3304      	adds	r3, #4
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	e000      	b.n	800e3f4 <lfs_fs_prepmove+0x60>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e3f8:	bf00      	nop
 800e3fa:	3714      	adds	r7, #20
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	800003ff 	.word	0x800003ff

0800e408 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800e408:	b5b0      	push	{r4, r5, r7, lr}
 800e40a:	b094      	sub	sp, #80	; 0x50
 800e40c:	af04      	add	r7, sp, #16
 800e40e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	333c      	adds	r3, #60	; 0x3c
 800e414:	4618      	mov	r0, r3
 800e416:	f7fb fbca 	bl	8009bae <lfs_gstate_hasmove>
 800e41a:	4603      	mov	r3, r0
 800e41c:	f083 0301 	eor.w	r3, r3, #1
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b00      	cmp	r3, #0
 800e424:	d001      	beq.n	800e42a <lfs_fs_demove+0x22>
        return 0;
 800e426:	2300      	movs	r3, #0
 800e428:	e049      	b.n	800e4be <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e436:	4618      	mov	r0, r3
 800e438:	f7fb fb24 	bl	8009a84 <lfs_tag_id>
 800e43c:	4603      	mov	r3, r0
 800e43e:	461a      	mov	r2, r3
 800e440:	4b21      	ldr	r3, [pc, #132]	; (800e4c8 <lfs_fs_demove+0xc0>)
 800e442:	9302      	str	r3, [sp, #8]
 800e444:	9201      	str	r2, [sp, #4]
 800e446:	9400      	str	r4, [sp, #0]
 800e448:	462b      	mov	r3, r5
 800e44a:	f241 021d 	movw	r2, #4125	; 0x101d
 800e44e:	491f      	ldr	r1, [pc, #124]	; (800e4cc <lfs_fs_demove+0xc4>)
 800e450:	481f      	ldr	r0, [pc, #124]	; (800e4d0 <lfs_fs_demove+0xc8>)
 800e452:	f011 fa37 	bl	801f8c4 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e45c:	f107 0318 	add.w	r3, r7, #24
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7fc fca4 	bl	800adb0 <lfs_dir_fetch>
 800e468:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 800e46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <lfs_fs_demove+0x6c>
        return err;
 800e470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e472:	e024      	b.n	800e4be <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fb fb03 	bl	8009a84 <lfs_tag_id>
 800e47e:	4603      	mov	r3, r0
 800e480:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800e482:	2200      	movs	r2, #0
 800e484:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f7ff ff83 	bl	800e394 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800e48e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e490:	029b      	lsls	r3, r3, #10
 800e492:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e496:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e49a:	613b      	str	r3, [r7, #16]
 800e49c:	2300      	movs	r3, #0
 800e49e:	617b      	str	r3, [r7, #20]
 800e4a0:	f107 0210 	add.w	r2, r7, #16
 800e4a4:	f107 0118 	add.w	r1, r7, #24
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7fd fc54 	bl	800bd58 <lfs_dir_commit>
 800e4b0:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800e4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <lfs_fs_demove+0xb4>
        return err;
 800e4b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ba:	e000      	b.n	800e4be <lfs_fs_demove+0xb6>
    }

    return 0;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3740      	adds	r7, #64	; 0x40
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bdb0      	pop	{r4, r5, r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	08020ee8 	.word	0x08020ee8
 800e4cc:	08020ddc 	.word	0x08020ddc
 800e4d0:	0802146c 	.word	0x0802146c

0800e4d4 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs) {
 800e4d4:	b5b0      	push	{r4, r5, r7, lr}
 800e4d6:	b0a8      	sub	sp, #160	; 0xa0
 800e4d8:	af04      	add	r7, sp, #16
 800e4da:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	3330      	adds	r3, #48	; 0x30
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fb fb42 	bl	8009b6a <lfs_gstate_hasorphans>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	f083 0301 	eor.w	r3, r3, #1
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d001      	beq.n	800e4f6 <lfs_fs_deorphan+0x22>
        return 0;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	e0e6      	b.n	800e6c4 <lfs_fs_deorphan+0x1f0>
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800e4f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	4618      	mov	r0, r3
 800e500:	f011 fb36 	bl	801fb70 <memset>
 800e504:	2301      	movs	r3, #1
 800e506:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800e50a:	2301      	movs	r3, #1
 800e50c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
 800e510:	e0bd      	b.n	800e68e <lfs_fs_deorphan+0x1ba>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800e512:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e516:	f103 0218 	add.w	r2, r3, #24
 800e51a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e51e:	4619      	mov	r1, r3
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7fc fc45 	bl	800adb0 <lfs_dir_fetch>
 800e526:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 800e52a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d002      	beq.n	800e538 <lfs_fs_deorphan+0x64>
            return err;
 800e532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e536:	e0c5      	b.n	800e6c4 <lfs_fs_deorphan+0x1f0>
        }

        // check head blocks for orphans
        if (!pdir.split) {
 800e538:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800e53c:	f083 0301 	eor.w	r3, r3, #1
 800e540:	b2db      	uxtb	r3, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	f000 8099 	beq.w	800e67a <lfs_fs_deorphan+0x1a6>
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800e548:	f107 020c 	add.w	r2, r7, #12
 800e54c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e550:	3318      	adds	r3, #24
 800e552:	4619      	mov	r1, r3
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7ff fd23 	bl	800dfa0 <lfs_fs_parent>
 800e55a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800e55e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e562:	2b00      	cmp	r3, #0
 800e564:	da07      	bge.n	800e576 <lfs_fs_deorphan+0xa2>
 800e566:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e56a:	f113 0f02 	cmn.w	r3, #2
 800e56e:	d002      	beq.n	800e576 <lfs_fs_deorphan+0xa2>
                return tag;
 800e570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e574:	e0a6      	b.n	800e6c4 <lfs_fs_deorphan+0x1f0>
            }

            if (tag == LFS_ERR_NOENT) {
 800e576:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e57a:	f113 0f02 	cmn.w	r3, #2
 800e57e:	d11d      	bne.n	800e5bc <lfs_fs_deorphan+0xe8>
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800e580:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e586:	4951      	ldr	r1, [pc, #324]	; (800e6cc <lfs_fs_deorphan+0x1f8>)
 800e588:	9101      	str	r1, [sp, #4]
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	4613      	mov	r3, r2
 800e58e:	f241 0252 	movw	r2, #4178	; 0x1052
 800e592:	494f      	ldr	r1, [pc, #316]	; (800e6d0 <lfs_fs_deorphan+0x1fc>)
 800e594:	484f      	ldr	r0, [pc, #316]	; (800e6d4 <lfs_fs_deorphan+0x200>)
 800e596:	f011 f995 	bl	801f8c4 <iprintf>
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
 800e59a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e59e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7fd f801 	bl	800b5ac <lfs_dir_drop>
 800e5aa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (err) {
 800e5ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d05d      	beq.n	800e672 <lfs_fs_deorphan+0x19e>
                    return err;
 800e5b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5ba:	e083      	b.n	800e6c4 <lfs_fs_deorphan+0x1f0>
                // refetch tail
                continue;
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 800e5bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e5c0:	f107 010c 	add.w	r1, r7, #12
 800e5c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e5c8:	9300      	str	r3, [sp, #0]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	4a42      	ldr	r2, [pc, #264]	; (800e6d8 <lfs_fs_deorphan+0x204>)
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7fb fdda 	bl	800a188 <lfs_dir_get>
 800e5d4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
 800e5d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	da02      	bge.n	800e5e6 <lfs_fs_deorphan+0x112>
                return res;
 800e5e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5e4:	e06e      	b.n	800e6c4 <lfs_fs_deorphan+0x1f0>
            }
            lfs_pair_fromle32(pair);
 800e5e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fb f9bb 	bl	8009966 <lfs_pair_fromle32>

            if (!lfs_pair_sync(pair, pdir.tail)) {
 800e5f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e5f4:	f103 0218 	add.w	r2, r3, #24
 800e5f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fb f984 	bl	800990c <lfs_pair_sync>
 800e604:	4603      	mov	r3, r0
 800e606:	f083 0301 	eor.w	r3, r3, #1
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d034      	beq.n	800e67a <lfs_fs_deorphan+0x1a6>
                // we have desynced
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 800e610:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e616:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e61a:	4c2c      	ldr	r4, [pc, #176]	; (800e6cc <lfs_fs_deorphan+0x1f8>)
 800e61c:	9403      	str	r4, [sp, #12]
 800e61e:	9102      	str	r1, [sp, #8]
 800e620:	9201      	str	r2, [sp, #4]
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	4603      	mov	r3, r0
 800e626:	f241 0268 	movw	r2, #4200	; 0x1068
 800e62a:	4929      	ldr	r1, [pc, #164]	; (800e6d0 <lfs_fs_deorphan+0x1fc>)
 800e62c:	482b      	ldr	r0, [pc, #172]	; (800e6dc <lfs_fs_deorphan+0x208>)
 800e62e:	f011 f949 	bl	801f8c4 <iprintf>
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
 800e632:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e636:	4618      	mov	r0, r3
 800e638:	f7fb f9af 	bl	800999a <lfs_pair_tole32>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 800e63c:	4b28      	ldr	r3, [pc, #160]	; (800e6e0 <lfs_fs_deorphan+0x20c>)
 800e63e:	637b      	str	r3, [r7, #52]	; 0x34
 800e640:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e644:	63bb      	str	r3, [r7, #56]	; 0x38
 800e646:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e64a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800e64e:	2301      	movs	r3, #1
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f7fd fb81 	bl	800bd58 <lfs_dir_commit>
 800e656:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
 800e65a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fb f981 	bl	8009966 <lfs_pair_fromle32>
                if (err) {
 800e664:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d004      	beq.n	800e676 <lfs_fs_deorphan+0x1a2>
                    return err;
 800e66c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                return tag;
 800e670:	e028      	b.n	800e6c4 <lfs_fs_deorphan+0x1f0>
                continue;
 800e672:	bf00      	nop
 800e674:	e00b      	b.n	800e68e <lfs_fs_deorphan+0x1ba>
                }

                // refetch tail
                continue;
 800e676:	bf00      	nop
 800e678:	e009      	b.n	800e68e <lfs_fs_deorphan+0x1ba>
            }
        }

        pdir = dir;
 800e67a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800e67e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 800e682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e68a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (!lfs_pair_isnull(pdir.tail)) {
 800e68e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e692:	3318      	adds	r3, #24
 800e694:	4618      	mov	r0, r3
 800e696:	f7fb f8f4 	bl	8009882 <lfs_pair_isnull>
 800e69a:	4603      	mov	r3, r0
 800e69c:	f083 0301 	eor.w	r3, r3, #1
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	f47f af35 	bne.w	800e512 <lfs_fs_deorphan+0x3e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	3330      	adds	r3, #48	; 0x30
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fb fa6f 	bl	8009b90 <lfs_gstate_getorphans>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	425b      	negs	r3, r3
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	b25b      	sxtb	r3, r3
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7ff fe2f 	bl	800e320 <lfs_fs_preporphans>
 800e6c2:	4603      	mov	r3, r0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3790      	adds	r7, #144	; 0x90
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bdb0      	pop	{r4, r5, r7, pc}
 800e6cc:	08020ee8 	.word	0x08020ee8
 800e6d0:	08020ddc 	.word	0x08020ddc
 800e6d4:	080214a0 	.word	0x080214a0
 800e6d8:	7ffffc00 	.word	0x7ffffc00
 800e6dc:	080214d0 	.word	0x080214d0
 800e6e0:	600ffc08 	.word	0x600ffc08

0800e6e4 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f7ff fe8b 	bl	800e408 <lfs_fs_demove>
 800e6f2:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d001      	beq.n	800e6fe <lfs_fs_forceconsistency+0x1a>
        return err;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	e009      	b.n	800e712 <lfs_fs_forceconsistency+0x2e>
    }

    err = lfs_fs_deorphan(lfs);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f7ff fee8 	bl	800e4d4 <lfs_fs_deorphan>
 800e704:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d001      	beq.n	800e710 <lfs_fs_forceconsistency+0x2c>
        return err;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	e000      	b.n	800e712 <lfs_fs_forceconsistency+0x2e>
    }

    return 0;
 800e710:	2300      	movs	r3, #0
}
 800e712:	4618      	mov	r0, r3
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800e71a:	b480      	push	{r7}
 800e71c:	b085      	sub	sp, #20
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	1c5a      	adds	r2, r3, #1
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	601a      	str	r2, [r3, #0]
    return 0;
 800e732:	2300      	movs	r3, #0
}
 800e734:	4618      	mov	r0, r3
 800e736:	3714      	adds	r7, #20
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800e748:	2300      	movs	r3, #0
 800e74a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800e74c:	f107 0208 	add.w	r2, r7, #8
 800e750:	2300      	movs	r3, #0
 800e752:	4907      	ldr	r1, [pc, #28]	; (800e770 <lfs_fs_rawsize+0x30>)
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7ff fa75 	bl	800dc44 <lfs_fs_rawtraverse>
 800e75a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d001      	beq.n	800e766 <lfs_fs_rawsize+0x26>
        return err;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	e000      	b.n	800e768 <lfs_fs_rawsize+0x28>
    }

    return size;
 800e766:	68bb      	ldr	r3, [r7, #8]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	0800e71b 	.word	0x0800e71b

0800e774 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	6838      	ldr	r0, [r7, #0]
 800e784:	4798      	blx	r3
 800e786:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d001      	beq.n	800e792 <lfs_format+0x1e>
        return err;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	e009      	b.n	800e7a6 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800e792:	6839      	ldr	r1, [r7, #0]
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f7ff f833 	bl	800d800 <lfs_rawformat>
 800e79a:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	699b      	ldr	r3, [r3, #24]
 800e7a0:	6838      	ldr	r0, [r7, #0]
 800e7a2:	4798      	blx	r3
    return err;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3710      	adds	r7, #16
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b084      	sub	sp, #16
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
 800e7b6:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	695b      	ldr	r3, [r3, #20]
 800e7bc:	6838      	ldr	r0, [r7, #0]
 800e7be:	4798      	blx	r3
 800e7c0:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <lfs_mount+0x1e>
        return err;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	e009      	b.n	800e7e0 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f7ff f8b6 	bl	800d940 <lfs_rawmount>
 800e7d4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	699b      	ldr	r3, [r3, #24]
 800e7da:	6838      	ldr	r0, [r7, #0]
 800e7dc:	4798      	blx	r3
    return err;
 800e7de:	68fb      	ldr	r3, [r7, #12]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3710      	adds	r7, #16
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7f6:	695b      	ldr	r3, [r3, #20]
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e7fc:	4610      	mov	r0, r2
 800e7fe:	4798      	blx	r3
 800e800:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d001      	beq.n	800e80c <lfs_mkdir+0x24>
        return err;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	e00c      	b.n	800e826 <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 800e80c:	6839      	ldr	r1, [r7, #0]
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7fd fe54 	bl	800c4bc <lfs_rawmkdir>
 800e814:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e81a:	699b      	ldr	r3, [r3, #24]
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e820:	4610      	mov	r0, r2
 800e822:	4798      	blx	r3
    return err;
 800e824:	68fb      	ldr	r3, [r7, #12]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
	...

0800e830 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800e830:	b480      	push	{r7}
 800e832:	b087      	sub	sp, #28
 800e834:	af00      	add	r7, sp, #0
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800e840:	2300      	movs	r3, #0
 800e842:	617b      	str	r3, [r7, #20]
 800e844:	e024      	b.n	800e890 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	091a      	lsrs	r2, r3, #4
 800e84a:	6939      	ldr	r1, [r7, #16]
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	440b      	add	r3, r1
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	4619      	mov	r1, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	404b      	eors	r3, r1
 800e858:	f003 030f 	and.w	r3, r3, #15
 800e85c:	4912      	ldr	r1, [pc, #72]	; (800e8a8 <lfs_crc+0x78>)
 800e85e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e862:	4053      	eors	r3, r2
 800e864:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	091a      	lsrs	r2, r3, #4
 800e86a:	6939      	ldr	r1, [r7, #16]
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	440b      	add	r3, r1
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	091b      	lsrs	r3, r3, #4
 800e874:	b2db      	uxtb	r3, r3
 800e876:	4619      	mov	r1, r3
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	404b      	eors	r3, r1
 800e87c:	f003 030f 	and.w	r3, r3, #15
 800e880:	4909      	ldr	r1, [pc, #36]	; (800e8a8 <lfs_crc+0x78>)
 800e882:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e886:	4053      	eors	r3, r2
 800e888:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	3301      	adds	r3, #1
 800e88e:	617b      	str	r3, [r7, #20]
 800e890:	697a      	ldr	r2, [r7, #20]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	429a      	cmp	r2, r3
 800e896:	d3d6      	bcc.n	800e846 <lfs_crc+0x16>
    }

    return crc;
 800e898:	68fb      	ldr	r3, [r7, #12]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	371c      	adds	r7, #28
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop
 800e8a8:	08025134 	.word	0x08025134

0800e8ac <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	330c      	adds	r3, #12
 800e8bc:	461a      	mov	r2, r3
 800e8be:	6839      	ldr	r1, [r7, #0]
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f002 fc95 	bl	80111f0 <tcpip_send_msg_wait_sem>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e8ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d103      	bne.n	800e8da <netconn_apimsg+0x2e>
    return apimsg->err;
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e8d8:	e001      	b.n	800e8de <netconn_apimsg+0x32>
  }
  return err;
 800e8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
	...

0800e8e8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b08c      	sub	sp, #48	; 0x30
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	603a      	str	r2, [r7, #0]
 800e8f2:	71fb      	strb	r3, [r7, #7]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f001 f923 	bl	800fb48 <netconn_alloc>
 800e902:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800e904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e906:	2b00      	cmp	r3, #0
 800e908:	d054      	beq.n	800e9b4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e90a:	79bb      	ldrb	r3, [r7, #6]
 800e90c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e910:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e912:	f107 0308 	add.w	r3, r7, #8
 800e916:	4619      	mov	r1, r3
 800e918:	4829      	ldr	r0, [pc, #164]	; (800e9c0 <netconn_new_with_proto_and_callback+0xd8>)
 800e91a:	f7ff ffc7 	bl	800e8ac <netconn_apimsg>
 800e91e:	4603      	mov	r3, r0
 800e920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800e924:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d043      	beq.n	800e9b4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d005      	beq.n	800e940 <netconn_new_with_proto_and_callback+0x58>
 800e934:	4b23      	ldr	r3, [pc, #140]	; (800e9c4 <netconn_new_with_proto_and_callback+0xdc>)
 800e936:	22a3      	movs	r2, #163	; 0xa3
 800e938:	4923      	ldr	r1, [pc, #140]	; (800e9c8 <netconn_new_with_proto_and_callback+0xe0>)
 800e93a:	4824      	ldr	r0, [pc, #144]	; (800e9cc <netconn_new_with_proto_and_callback+0xe4>)
 800e93c:	f010 ffc2 	bl	801f8c4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	3310      	adds	r3, #16
 800e944:	4618      	mov	r0, r3
 800e946:	f00f fcb2 	bl	801e2ae <sys_mbox_valid>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d105      	bne.n	800e95c <netconn_new_with_proto_and_callback+0x74>
 800e950:	4b1c      	ldr	r3, [pc, #112]	; (800e9c4 <netconn_new_with_proto_and_callback+0xdc>)
 800e952:	22a4      	movs	r2, #164	; 0xa4
 800e954:	491e      	ldr	r1, [pc, #120]	; (800e9d0 <netconn_new_with_proto_and_callback+0xe8>)
 800e956:	481d      	ldr	r0, [pc, #116]	; (800e9cc <netconn_new_with_proto_and_callback+0xe4>)
 800e958:	f010 ffb4 	bl	801f8c4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	3314      	adds	r3, #20
 800e960:	4618      	mov	r0, r3
 800e962:	f00f fca4 	bl	801e2ae <sys_mbox_valid>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d005      	beq.n	800e978 <netconn_new_with_proto_and_callback+0x90>
 800e96c:	4b15      	ldr	r3, [pc, #84]	; (800e9c4 <netconn_new_with_proto_and_callback+0xdc>)
 800e96e:	22a6      	movs	r2, #166	; 0xa6
 800e970:	4918      	ldr	r1, [pc, #96]	; (800e9d4 <netconn_new_with_proto_and_callback+0xec>)
 800e972:	4816      	ldr	r0, [pc, #88]	; (800e9cc <netconn_new_with_proto_and_callback+0xe4>)
 800e974:	f010 ffa6 	bl	801f8c4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	330c      	adds	r3, #12
 800e97c:	4618      	mov	r0, r3
 800e97e:	f00f fd27 	bl	801e3d0 <sys_sem_valid>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d105      	bne.n	800e994 <netconn_new_with_proto_and_callback+0xac>
 800e988:	4b0e      	ldr	r3, [pc, #56]	; (800e9c4 <netconn_new_with_proto_and_callback+0xdc>)
 800e98a:	22a9      	movs	r2, #169	; 0xa9
 800e98c:	4912      	ldr	r1, [pc, #72]	; (800e9d8 <netconn_new_with_proto_and_callback+0xf0>)
 800e98e:	480f      	ldr	r0, [pc, #60]	; (800e9cc <netconn_new_with_proto_and_callback+0xe4>)
 800e990:	f010 ff98 	bl	801f8c4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e996:	330c      	adds	r3, #12
 800e998:	4618      	mov	r0, r3
 800e99a:	f00f fd0c 	bl	801e3b6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a0:	3310      	adds	r3, #16
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f00f fbfc 	bl	801e1a0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e9a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9aa:	2007      	movs	r0, #7
 800e9ac:	f003 f9ce 	bl	8011d4c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	e000      	b.n	800e9b6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3730      	adds	r7, #48	; 0x30
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	0800fb1d 	.word	0x0800fb1d
 800e9c4:	080215bc 	.word	0x080215bc
 800e9c8:	080215f0 	.word	0x080215f0
 800e9cc:	08021614 	.word	0x08021614
 800e9d0:	0802163c 	.word	0x0802163c
 800e9d4:	08021654 	.word	0x08021654
 800e9d8:	08021678 	.word	0x08021678

0800e9dc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b08c      	sub	sp, #48	; 0x30
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d101      	bne.n	800e9ee <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	e014      	b.n	800ea18 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e9f2:	2329      	movs	r3, #41	; 0x29
 800e9f4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e9f6:	f107 030c 	add.w	r3, r7, #12
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4808      	ldr	r0, [pc, #32]	; (800ea20 <netconn_prepare_delete+0x44>)
 800e9fe:	f7ff ff55 	bl	800e8ac <netconn_apimsg>
 800ea02:	4603      	mov	r3, r0
 800ea04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800ea08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d002      	beq.n	800ea16 <netconn_prepare_delete+0x3a>
    return err;
 800ea10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ea14:	e000      	b.n	800ea18 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3730      	adds	r7, #48	; 0x30
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	08010089 	.word	0x08010089

0800ea24 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <netconn_delete+0x12>
    return ERR_OK;
 800ea32:	2300      	movs	r3, #0
 800ea34:	e00d      	b.n	800ea52 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7ff ffd0 	bl	800e9dc <netconn_prepare_delete>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800ea40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d102      	bne.n	800ea4e <netconn_delete+0x2a>
    netconn_free(conn);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f001 f8eb 	bl	800fc24 <netconn_free>
  }
  return err;
 800ea4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
	...

0800ea5c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b08e      	sub	sp, #56	; 0x38
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	4613      	mov	r3, r2
 800ea68:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d109      	bne.n	800ea84 <netconn_bind+0x28>
 800ea70:	4b11      	ldr	r3, [pc, #68]	; (800eab8 <netconn_bind+0x5c>)
 800ea72:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ea76:	4911      	ldr	r1, [pc, #68]	; (800eabc <netconn_bind+0x60>)
 800ea78:	4811      	ldr	r0, [pc, #68]	; (800eac0 <netconn_bind+0x64>)
 800ea7a:	f010 ff23 	bl	801f8c4 <iprintf>
 800ea7e:	f06f 030f 	mvn.w	r3, #15
 800ea82:	e015      	b.n	800eab0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d101      	bne.n	800ea8e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ea8a:	4b0e      	ldr	r3, [pc, #56]	; (800eac4 <netconn_bind+0x68>)
 800ea8c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ea96:	88fb      	ldrh	r3, [r7, #6]
 800ea98:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ea9a:	f107 0314 	add.w	r3, r7, #20
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4809      	ldr	r0, [pc, #36]	; (800eac8 <netconn_bind+0x6c>)
 800eaa2:	f7ff ff03 	bl	800e8ac <netconn_apimsg>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800eaac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3738      	adds	r7, #56	; 0x38
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	080215bc 	.word	0x080215bc
 800eabc:	080216f4 	.word	0x080216f4
 800eac0:	08021614 	.word	0x08021614
 800eac4:	08025298 	.word	0x08025298
 800eac8:	08010251 	.word	0x08010251

0800eacc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b08c      	sub	sp, #48	; 0x30
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	460b      	mov	r3, r1
 800ead6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d109      	bne.n	800eaf2 <netconn_listen_with_backlog+0x26>
 800eade:	4b0d      	ldr	r3, [pc, #52]	; (800eb14 <netconn_listen_with_backlog+0x48>)
 800eae0:	f240 12bb 	movw	r2, #443	; 0x1bb
 800eae4:	490c      	ldr	r1, [pc, #48]	; (800eb18 <netconn_listen_with_backlog+0x4c>)
 800eae6:	480d      	ldr	r0, [pc, #52]	; (800eb1c <netconn_listen_with_backlog+0x50>)
 800eae8:	f010 feec 	bl	801f8c4 <iprintf>
 800eaec:	f06f 030f 	mvn.w	r3, #15
 800eaf0:	e00c      	b.n	800eb0c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800eaf6:	f107 030c 	add.w	r3, r7, #12
 800eafa:	4619      	mov	r1, r3
 800eafc:	4808      	ldr	r0, [pc, #32]	; (800eb20 <netconn_listen_with_backlog+0x54>)
 800eafe:	f7ff fed5 	bl	800e8ac <netconn_apimsg>
 800eb02:	4603      	mov	r3, r0
 800eb04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800eb08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3730      	adds	r7, #48	; 0x30
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	080215bc 	.word	0x080215bc
 800eb18:	08021774 	.word	0x08021774
 800eb1c:	08021614 	.word	0x08021614
 800eb20:	080102c5 	.word	0x080102c5

0800eb24 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d109      	bne.n	800eb48 <netconn_accept+0x24>
 800eb34:	4b3d      	ldr	r3, [pc, #244]	; (800ec2c <netconn_accept+0x108>)
 800eb36:	f240 12e1 	movw	r2, #481	; 0x1e1
 800eb3a:	493d      	ldr	r1, [pc, #244]	; (800ec30 <netconn_accept+0x10c>)
 800eb3c:	483d      	ldr	r0, [pc, #244]	; (800ec34 <netconn_accept+0x110>)
 800eb3e:	f010 fec1 	bl	801f8c4 <iprintf>
 800eb42:	f06f 030f 	mvn.w	r3, #15
 800eb46:	e06c      	b.n	800ec22 <netconn_accept+0xfe>
  *new_conn = NULL;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d109      	bne.n	800eb68 <netconn_accept+0x44>
 800eb54:	4b35      	ldr	r3, [pc, #212]	; (800ec2c <netconn_accept+0x108>)
 800eb56:	f240 12e3 	movw	r2, #483	; 0x1e3
 800eb5a:	4937      	ldr	r1, [pc, #220]	; (800ec38 <netconn_accept+0x114>)
 800eb5c:	4835      	ldr	r0, [pc, #212]	; (800ec34 <netconn_accept+0x110>)
 800eb5e:	f010 feb1 	bl	801f8c4 <iprintf>
 800eb62:	f06f 030f 	mvn.w	r3, #15
 800eb66:	e05c      	b.n	800ec22 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 fb6c 	bl	800f246 <netconn_err>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800eb72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d002      	beq.n	800eb80 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800eb7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb7e:	e050      	b.n	800ec22 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	3314      	adds	r3, #20
 800eb84:	4618      	mov	r0, r3
 800eb86:	f00f fb92 	bl	801e2ae <sys_mbox_valid>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d005      	beq.n	800eb9c <netconn_accept+0x78>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	7f1b      	ldrb	r3, [r3, #28]
 800eb94:	f003 0301 	and.w	r3, r3, #1
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d002      	beq.n	800eba2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800eb9c:	f06f 030e 	mvn.w	r3, #14
 800eba0:	e03f      	b.n	800ec22 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	7f1b      	ldrb	r3, [r3, #28]
 800eba6:	f003 0302 	and.w	r3, r3, #2
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00e      	beq.n	800ebcc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	3314      	adds	r3, #20
 800ebb2:	f107 020c 	add.w	r2, r7, #12
 800ebb6:	4611      	mov	r1, r2
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f00f fb5c 	bl	801e276 <sys_arch_mbox_tryfetch>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebc4:	d10a      	bne.n	800ebdc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ebc6:	f06f 0306 	mvn.w	r3, #6
 800ebca:	e02a      	b.n	800ec22 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	3314      	adds	r3, #20
 800ebd0:	f107 010c 	add.w	r1, r7, #12
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f00f fb0e 	bl	801e1f8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d005      	beq.n	800ebf0 <netconn_accept+0xcc>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe8:	2200      	movs	r2, #0
 800ebea:	2101      	movs	r1, #1
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f107 0213 	add.w	r2, r7, #19
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 fb75 	bl	800f2e8 <lwip_netconn_is_err_msg>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d002      	beq.n	800ec0a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800ec04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec08:	e00b      	b.n	800ec22 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d102      	bne.n	800ec16 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800ec10:	f06f 030e 	mvn.w	r3, #14
 800ec14:	e005      	b.n	800ec22 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	697a      	ldr	r2, [r7, #20]
 800ec1e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ec20:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3718      	adds	r7, #24
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	080215bc 	.word	0x080215bc
 800ec30:	08021794 	.word	0x08021794
 800ec34:	08021614 	.word	0x08021614
 800ec38:	080217b4 	.word	0x080217b4

0800ec3c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b088      	sub	sp, #32
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	4613      	mov	r3, r2
 800ec48:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d109      	bne.n	800ec68 <netconn_recv_data+0x2c>
 800ec54:	4b58      	ldr	r3, [pc, #352]	; (800edb8 <netconn_recv_data+0x17c>)
 800ec56:	f44f 7212 	mov.w	r2, #584	; 0x248
 800ec5a:	4958      	ldr	r1, [pc, #352]	; (800edbc <netconn_recv_data+0x180>)
 800ec5c:	4858      	ldr	r0, [pc, #352]	; (800edc0 <netconn_recv_data+0x184>)
 800ec5e:	f010 fe31 	bl	801f8c4 <iprintf>
 800ec62:	f06f 030f 	mvn.w	r3, #15
 800ec66:	e0a2      	b.n	800edae <netconn_recv_data+0x172>
  *new_buf = NULL;
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d109      	bne.n	800ec88 <netconn_recv_data+0x4c>
 800ec74:	4b50      	ldr	r3, [pc, #320]	; (800edb8 <netconn_recv_data+0x17c>)
 800ec76:	f240 224a 	movw	r2, #586	; 0x24a
 800ec7a:	4952      	ldr	r1, [pc, #328]	; (800edc4 <netconn_recv_data+0x188>)
 800ec7c:	4850      	ldr	r0, [pc, #320]	; (800edc0 <netconn_recv_data+0x184>)
 800ec7e:	f010 fe21 	bl	801f8c4 <iprintf>
 800ec82:	f06f 030f 	mvn.w	r3, #15
 800ec86:	e092      	b.n	800edae <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	3310      	adds	r3, #16
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f00f fb0e 	bl	801e2ae <sys_mbox_valid>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d10e      	bne.n	800ecb6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f000 fad4 	bl	800f246 <netconn_err>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800eca2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d002      	beq.n	800ecb0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ecaa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ecae:	e07e      	b.n	800edae <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800ecb0:	f06f 030a 	mvn.w	r3, #10
 800ecb4:	e07b      	b.n	800edae <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	7f1b      	ldrb	r3, [r3, #28]
 800ecba:	f003 0302 	and.w	r3, r3, #2
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10f      	bne.n	800ece2 <netconn_recv_data+0xa6>
 800ecc2:	79fb      	ldrb	r3, [r7, #7]
 800ecc4:	f003 0304 	and.w	r3, r3, #4
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10a      	bne.n	800ece2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	7f1b      	ldrb	r3, [r3, #28]
 800ecd0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d104      	bne.n	800ece2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d023      	beq.n	800ed2a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	3310      	adds	r3, #16
 800ece6:	f107 0218 	add.w	r2, r7, #24
 800ecea:	4611      	mov	r1, r2
 800ecec:	4618      	mov	r0, r3
 800ecee:	f00f fac2 	bl	801e276 <sys_arch_mbox_tryfetch>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecf8:	d11f      	bne.n	800ed3a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f000 faa3 	bl	800f246 <netconn_err>
 800ed00:	4603      	mov	r3, r0
 800ed02:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800ed04:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ed0c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ed10:	e04d      	b.n	800edae <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	7f1b      	ldrb	r3, [r3, #28]
 800ed16:	f003 0301 	and.w	r3, r3, #1
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d002      	beq.n	800ed24 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ed1e:	f06f 030a 	mvn.w	r3, #10
 800ed22:	e044      	b.n	800edae <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ed24:	f06f 0306 	mvn.w	r3, #6
 800ed28:	e041      	b.n	800edae <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	3310      	adds	r3, #16
 800ed2e:	f107 0118 	add.w	r1, r7, #24
 800ed32:	2200      	movs	r2, #0
 800ed34:	4618      	mov	r0, r3
 800ed36:	f00f fa5f 	bl	801e1f8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed42:	2b10      	cmp	r3, #16
 800ed44:	d117      	bne.n	800ed76 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	f107 0217 	add.w	r2, r7, #23
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f000 faca 	bl	800f2e8 <lwip_netconn_is_err_msg>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d009      	beq.n	800ed6e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ed5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed5e:	f113 0f0f 	cmn.w	r3, #15
 800ed62:	d101      	bne.n	800ed68 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ed64:	2300      	movs	r3, #0
 800ed66:	e022      	b.n	800edae <netconn_recv_data+0x172>
      }
      return err;
 800ed68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed6c:	e01f      	b.n	800edae <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	891b      	ldrh	r3, [r3, #8]
 800ed72:	83fb      	strh	r3, [r7, #30]
 800ed74:	e00d      	b.n	800ed92 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d106      	bne.n	800ed8a <netconn_recv_data+0x14e>
 800ed7c:	4b0e      	ldr	r3, [pc, #56]	; (800edb8 <netconn_recv_data+0x17c>)
 800ed7e:	f240 2291 	movw	r2, #657	; 0x291
 800ed82:	4911      	ldr	r1, [pc, #68]	; (800edc8 <netconn_recv_data+0x18c>)
 800ed84:	480e      	ldr	r0, [pc, #56]	; (800edc0 <netconn_recv_data+0x184>)
 800ed86:	f010 fd9d 	bl	801f8c4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	891b      	ldrh	r3, [r3, #8]
 800ed90:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d005      	beq.n	800eda6 <netconn_recv_data+0x16a>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed9e:	8bfa      	ldrh	r2, [r7, #30]
 800eda0:	2101      	movs	r1, #1
 800eda2:	68f8      	ldr	r0, [r7, #12]
 800eda4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800eda6:	69ba      	ldr	r2, [r7, #24]
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3720      	adds	r7, #32
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	080215bc 	.word	0x080215bc
 800edbc:	080217d4 	.word	0x080217d4
 800edc0:	08021614 	.word	0x08021614
 800edc4:	080217f4 	.word	0x080217f4
 800edc8:	08021810 	.word	0x08021810

0800edcc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	60f8      	str	r0, [r7, #12]
 800edd4:	60b9      	str	r1, [r7, #8]
 800edd6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d005      	beq.n	800edea <netconn_tcp_recvd_msg+0x1e>
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ede6:	2b10      	cmp	r3, #16
 800ede8:	d009      	beq.n	800edfe <netconn_tcp_recvd_msg+0x32>
 800edea:	4b0c      	ldr	r3, [pc, #48]	; (800ee1c <netconn_tcp_recvd_msg+0x50>)
 800edec:	f240 22a7 	movw	r2, #679	; 0x2a7
 800edf0:	490b      	ldr	r1, [pc, #44]	; (800ee20 <netconn_tcp_recvd_msg+0x54>)
 800edf2:	480c      	ldr	r0, [pc, #48]	; (800ee24 <netconn_tcp_recvd_msg+0x58>)
 800edf4:	f010 fd66 	bl	801f8c4 <iprintf>
 800edf8:	f06f 030f 	mvn.w	r3, #15
 800edfc:	e00a      	b.n	800ee14 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ee0a:	6879      	ldr	r1, [r7, #4]
 800ee0c:	4806      	ldr	r0, [pc, #24]	; (800ee28 <netconn_tcp_recvd_msg+0x5c>)
 800ee0e:	f7ff fd4d 	bl	800e8ac <netconn_apimsg>
 800ee12:	4603      	mov	r3, r0
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	080215bc 	.word	0x080215bc
 800ee20:	0802181c 	.word	0x0802181c
 800ee24:	08021614 	.word	0x08021614
 800ee28:	080103f5 	.word	0x080103f5

0800ee2c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b090      	sub	sp, #64	; 0x40
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	4613      	mov	r3, r2
 800ee38:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3310      	adds	r3, #16
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f00f fa35 	bl	801e2ae <sys_mbox_valid>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d102      	bne.n	800ee50 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800ee4a:	f06f 030a 	mvn.w	r3, #10
 800ee4e:	e06d      	b.n	800ef2c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	7f1b      	ldrb	r3, [r3, #28]
 800ee54:	b25b      	sxtb	r3, r3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	da07      	bge.n	800ee6a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	7f1b      	ldrb	r3, [r3, #28]
 800ee5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee62:	b2da      	uxtb	r2, r3
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800ee68:	e039      	b.n	800eede <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ee6a:	79fb      	ldrb	r3, [r7, #7]
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	68b9      	ldr	r1, [r7, #8]
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	f7ff fee3 	bl	800ec3c <netconn_recv_data>
 800ee76:	4603      	mov	r3, r0
 800ee78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800ee7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d002      	beq.n	800ee8a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ee84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ee88:	e050      	b.n	800ef2c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ee90:	79fb      	ldrb	r3, [r7, #7]
 800ee92:	f003 0308 	and.w	r3, r3, #8
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d10e      	bne.n	800eeb8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <netconn_recv_data_tcp+0x7a>
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	891b      	ldrh	r3, [r3, #8]
 800eea4:	e000      	b.n	800eea8 <netconn_recv_data_tcp+0x7c>
 800eea6:	2301      	movs	r3, #1
 800eea8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800eeaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eeac:	f107 0214 	add.w	r2, r7, #20
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f7ff ff8a 	bl	800edcc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d134      	bne.n	800ef28 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800eebe:	79fb      	ldrb	r3, [r7, #7]
 800eec0:	f003 0310 	and.w	r3, r3, #16
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d009      	beq.n	800eedc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	7f1b      	ldrb	r3, [r3, #28]
 800eecc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eed0:	b2da      	uxtb	r2, r3
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800eed6:	f06f 0306 	mvn.w	r3, #6
 800eeda:	e027      	b.n	800ef2c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800eedc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d005      	beq.n	800eef2 <netconn_recv_data_tcp+0xc6>
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeea:	2200      	movs	r2, #0
 800eeec:	2101      	movs	r1, #1
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10f      	bne.n	800ef1a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f000 f9a3 	bl	800f246 <netconn_err>
 800ef00:	4603      	mov	r3, r0
 800ef02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800ef06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d002      	beq.n	800ef14 <netconn_recv_data_tcp+0xe8>
          return err;
 800ef0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef12:	e00b      	b.n	800ef2c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ef14:	f06f 030d 	mvn.w	r3, #13
 800ef18:	e008      	b.n	800ef2c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ef1a:	2101      	movs	r1, #1
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f000 f955 	bl	800f1cc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ef22:	f06f 030e 	mvn.w	r3, #14
 800ef26:	e001      	b.n	800ef2c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ef28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3740      	adds	r7, #64	; 0x40
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d109      	bne.n	800ef5c <netconn_recv+0x28>
 800ef48:	4b32      	ldr	r3, [pc, #200]	; (800f014 <netconn_recv+0xe0>)
 800ef4a:	f240 3263 	movw	r2, #867	; 0x363
 800ef4e:	4932      	ldr	r1, [pc, #200]	; (800f018 <netconn_recv+0xe4>)
 800ef50:	4832      	ldr	r0, [pc, #200]	; (800f01c <netconn_recv+0xe8>)
 800ef52:	f010 fcb7 	bl	801f8c4 <iprintf>
 800ef56:	f06f 030f 	mvn.w	r3, #15
 800ef5a:	e056      	b.n	800f00a <netconn_recv+0xd6>
  *new_buf = NULL;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d109      	bne.n	800ef7c <netconn_recv+0x48>
 800ef68:	4b2a      	ldr	r3, [pc, #168]	; (800f014 <netconn_recv+0xe0>)
 800ef6a:	f240 3265 	movw	r2, #869	; 0x365
 800ef6e:	492c      	ldr	r1, [pc, #176]	; (800f020 <netconn_recv+0xec>)
 800ef70:	482a      	ldr	r0, [pc, #168]	; (800f01c <netconn_recv+0xe8>)
 800ef72:	f010 fca7 	bl	801f8c4 <iprintf>
 800ef76:	f06f 030f 	mvn.w	r3, #15
 800ef7a:	e046      	b.n	800f00a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef84:	2b10      	cmp	r3, #16
 800ef86:	d13a      	bne.n	800effe <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ef8c:	2006      	movs	r0, #6
 800ef8e:	f002 fe67 	bl	8011c60 <memp_malloc>
 800ef92:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d102      	bne.n	800efa0 <netconn_recv+0x6c>
      return ERR_MEM;
 800ef9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef9e:	e034      	b.n	800f00a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800efa0:	f107 030c 	add.w	r3, r7, #12
 800efa4:	2200      	movs	r2, #0
 800efa6:	4619      	mov	r1, r3
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f7ff ff3f 	bl	800ee2c <netconn_recv_data_tcp>
 800efae:	4603      	mov	r3, r0
 800efb0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800efb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d006      	beq.n	800efc8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800efba:	6979      	ldr	r1, [r7, #20]
 800efbc:	2006      	movs	r0, #6
 800efbe:	f002 fec5 	bl	8011d4c <memp_free>
      return err;
 800efc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800efc6:	e020      	b.n	800f00a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d106      	bne.n	800efdc <netconn_recv+0xa8>
 800efce:	4b11      	ldr	r3, [pc, #68]	; (800f014 <netconn_recv+0xe0>)
 800efd0:	f240 3279 	movw	r2, #889	; 0x379
 800efd4:	4913      	ldr	r1, [pc, #76]	; (800f024 <netconn_recv+0xf0>)
 800efd6:	4811      	ldr	r0, [pc, #68]	; (800f01c <netconn_recv+0xe8>)
 800efd8:	f010 fc74 	bl	801f8c4 <iprintf>

    buf->p = p;
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	2200      	movs	r2, #0
 800efec:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	2200      	movs	r2, #0
 800eff2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800effa:	2300      	movs	r3, #0
 800effc:	e005      	b.n	800f00a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800effe:	2200      	movs	r2, #0
 800f000:	6839      	ldr	r1, [r7, #0]
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7ff fe1a 	bl	800ec3c <netconn_recv_data>
 800f008:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3718      	adds	r7, #24
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	080215bc 	.word	0x080215bc
 800f018:	080217d4 	.word	0x080217d4
 800f01c:	08021614 	.word	0x08021614
 800f020:	080217f4 	.word	0x080217f4
 800f024:	0802186c 	.word	0x0802186c

0800f028 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b088      	sub	sp, #32
 800f02c:	af02      	add	r7, sp, #8
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
 800f034:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800f03e:	78fa      	ldrb	r2, [r7, #3]
 800f040:	f107 0110 	add.w	r1, r7, #16
 800f044:	6a3b      	ldr	r3, [r7, #32]
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	4613      	mov	r3, r2
 800f04a:	2201      	movs	r2, #1
 800f04c:	68f8      	ldr	r0, [r7, #12]
 800f04e:	f000 f805 	bl	800f05c <netconn_write_vectors_partly>
 800f052:	4603      	mov	r3, r0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3718      	adds	r7, #24
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b092      	sub	sp, #72	; 0x48
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	4611      	mov	r1, r2
 800f068:	461a      	mov	r2, r3
 800f06a:	460b      	mov	r3, r1
 800f06c:	80fb      	strh	r3, [r7, #6]
 800f06e:	4613      	mov	r3, r2
 800f070:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d109      	bne.n	800f08c <netconn_write_vectors_partly+0x30>
 800f078:	4b4e      	ldr	r3, [pc, #312]	; (800f1b4 <netconn_write_vectors_partly+0x158>)
 800f07a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f07e:	494e      	ldr	r1, [pc, #312]	; (800f1b8 <netconn_write_vectors_partly+0x15c>)
 800f080:	484e      	ldr	r0, [pc, #312]	; (800f1bc <netconn_write_vectors_partly+0x160>)
 800f082:	f010 fc1f 	bl	801f8c4 <iprintf>
 800f086:	f06f 030f 	mvn.w	r3, #15
 800f08a:	e08e      	b.n	800f1aa <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f094:	2b10      	cmp	r3, #16
 800f096:	d009      	beq.n	800f0ac <netconn_write_vectors_partly+0x50>
 800f098:	4b46      	ldr	r3, [pc, #280]	; (800f1b4 <netconn_write_vectors_partly+0x158>)
 800f09a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f09e:	4948      	ldr	r1, [pc, #288]	; (800f1c0 <netconn_write_vectors_partly+0x164>)
 800f0a0:	4846      	ldr	r0, [pc, #280]	; (800f1bc <netconn_write_vectors_partly+0x160>)
 800f0a2:	f010 fc0f 	bl	801f8c4 <iprintf>
 800f0a6:	f06f 0305 	mvn.w	r3, #5
 800f0aa:	e07e      	b.n	800f1aa <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	7f1b      	ldrb	r3, [r3, #28]
 800f0b0:	f003 0302 	and.w	r3, r3, #2
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d104      	bne.n	800f0c2 <netconn_write_vectors_partly+0x66>
 800f0b8:	797b      	ldrb	r3, [r7, #5]
 800f0ba:	f003 0304 	and.w	r3, r3, #4
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <netconn_write_vectors_partly+0x6a>
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e000      	b.n	800f0c8 <netconn_write_vectors_partly+0x6c>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800f0cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d005      	beq.n	800f0e0 <netconn_write_vectors_partly+0x84>
 800f0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d102      	bne.n	800f0e0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800f0da:	f06f 0305 	mvn.w	r3, #5
 800f0de:	e064      	b.n	800f1aa <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	643b      	str	r3, [r7, #64]	; 0x40
 800f0e8:	e015      	b.n	800f116 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800f0ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0ec:	00db      	lsls	r3, r3, #3
 800f0ee:	68ba      	ldr	r2, [r7, #8]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0f6:	4413      	add	r3, r2
 800f0f8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800f0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0fc:	00db      	lsls	r3, r3, #3
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	4413      	add	r3, r2
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f106:	429a      	cmp	r2, r3
 800f108:	d202      	bcs.n	800f110 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f10a:	f06f 0305 	mvn.w	r3, #5
 800f10e:	e04c      	b.n	800f1aa <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f112:	3301      	adds	r3, #1
 800f114:	643b      	str	r3, [r7, #64]	; 0x40
 800f116:	88fb      	ldrh	r3, [r7, #6]
 800f118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f11a:	429a      	cmp	r2, r3
 800f11c:	dbe5      	blt.n	800f0ea <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f120:	2b00      	cmp	r3, #0
 800f122:	d101      	bne.n	800f128 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f124:	2300      	movs	r3, #0
 800f126:	e040      	b.n	800f1aa <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	da0a      	bge.n	800f144 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f130:	2b00      	cmp	r3, #0
 800f132:	d102      	bne.n	800f13a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f134:	f06f 0305 	mvn.w	r3, #5
 800f138:	e037      	b.n	800f1aa <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f13a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f13e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f142:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f14c:	88fb      	ldrh	r3, [r7, #6]
 800f14e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f150:	2300      	movs	r3, #0
 800f152:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f154:	797b      	ldrb	r3, [r7, #5]
 800f156:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f15c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f162:	f107 0314 	add.w	r3, r7, #20
 800f166:	4619      	mov	r1, r3
 800f168:	4816      	ldr	r0, [pc, #88]	; (800f1c4 <netconn_write_vectors_partly+0x168>)
 800f16a:	f7ff fb9f 	bl	800e8ac <netconn_apimsg>
 800f16e:	4603      	mov	r3, r0
 800f170:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800f174:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d114      	bne.n	800f1a6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f17c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d002      	beq.n	800f188 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f186:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f188:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10a      	bne.n	800f1a6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f194:	429a      	cmp	r2, r3
 800f196:	d006      	beq.n	800f1a6 <netconn_write_vectors_partly+0x14a>
 800f198:	4b06      	ldr	r3, [pc, #24]	; (800f1b4 <netconn_write_vectors_partly+0x158>)
 800f19a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f19e:	490a      	ldr	r1, [pc, #40]	; (800f1c8 <netconn_write_vectors_partly+0x16c>)
 800f1a0:	4806      	ldr	r0, [pc, #24]	; (800f1bc <netconn_write_vectors_partly+0x160>)
 800f1a2:	f010 fb8f 	bl	801f8c4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f1a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3748      	adds	r7, #72	; 0x48
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	080215bc 	.word	0x080215bc
 800f1b8:	08021894 	.word	0x08021894
 800f1bc:	08021614 	.word	0x08021614
 800f1c0:	080218b0 	.word	0x080218b0
 800f1c4:	080107f9 	.word	0x080107f9
 800f1c8:	080218d4 	.word	0x080218d4

0800f1cc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b08c      	sub	sp, #48	; 0x30
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d109      	bne.n	800f1f2 <netconn_close_shutdown+0x26>
 800f1de:	4b0f      	ldr	r3, [pc, #60]	; (800f21c <netconn_close_shutdown+0x50>)
 800f1e0:	f240 4247 	movw	r2, #1095	; 0x447
 800f1e4:	490e      	ldr	r1, [pc, #56]	; (800f220 <netconn_close_shutdown+0x54>)
 800f1e6:	480f      	ldr	r0, [pc, #60]	; (800f224 <netconn_close_shutdown+0x58>)
 800f1e8:	f010 fb6c 	bl	801f8c4 <iprintf>
 800f1ec:	f06f 030f 	mvn.w	r3, #15
 800f1f0:	e010      	b.n	800f214 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800f1f6:	78fb      	ldrb	r3, [r7, #3]
 800f1f8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f1fa:	2329      	movs	r3, #41	; 0x29
 800f1fc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800f1fe:	f107 030c 	add.w	r3, r7, #12
 800f202:	4619      	mov	r1, r3
 800f204:	4808      	ldr	r0, [pc, #32]	; (800f228 <netconn_close_shutdown+0x5c>)
 800f206:	f7ff fb51 	bl	800e8ac <netconn_apimsg>
 800f20a:	4603      	mov	r3, r0
 800f20c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f210:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f214:	4618      	mov	r0, r3
 800f216:	3730      	adds	r7, #48	; 0x30
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	080215bc 	.word	0x080215bc
 800f220:	080218f8 	.word	0x080218f8
 800f224:	08021614 	.word	0x08021614
 800f228:	08010911 	.word	0x08010911

0800f22c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800f234:	2103      	movs	r1, #3
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff ffc8 	bl	800f1cc <netconn_close_shutdown>
 800f23c:	4603      	mov	r3, r0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b084      	sub	sp, #16
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d101      	bne.n	800f258 <netconn_err+0x12>
    return ERR_OK;
 800f254:	2300      	movs	r3, #0
 800f256:	e00d      	b.n	800f274 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f258:	f00f f944 	bl	801e4e4 <sys_arch_protect>
 800f25c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	7a1b      	ldrb	r3, [r3, #8]
 800f262:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f00f f948 	bl	801e500 <sys_arch_unprotect>
  return err;
 800f270:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3710      	adds	r7, #16
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	4603      	mov	r3, r0
 800f284:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f28a:	f113 0f0d 	cmn.w	r3, #13
 800f28e:	d009      	beq.n	800f2a4 <lwip_netconn_err_to_msg+0x28>
 800f290:	f113 0f0d 	cmn.w	r3, #13
 800f294:	dc0c      	bgt.n	800f2b0 <lwip_netconn_err_to_msg+0x34>
 800f296:	f113 0f0f 	cmn.w	r3, #15
 800f29a:	d007      	beq.n	800f2ac <lwip_netconn_err_to_msg+0x30>
 800f29c:	f113 0f0e 	cmn.w	r3, #14
 800f2a0:	d002      	beq.n	800f2a8 <lwip_netconn_err_to_msg+0x2c>
 800f2a2:	e005      	b.n	800f2b0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f2a4:	4b0a      	ldr	r3, [pc, #40]	; (800f2d0 <lwip_netconn_err_to_msg+0x54>)
 800f2a6:	e00e      	b.n	800f2c6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f2a8:	4b0a      	ldr	r3, [pc, #40]	; (800f2d4 <lwip_netconn_err_to_msg+0x58>)
 800f2aa:	e00c      	b.n	800f2c6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f2ac:	4b0a      	ldr	r3, [pc, #40]	; (800f2d8 <lwip_netconn_err_to_msg+0x5c>)
 800f2ae:	e00a      	b.n	800f2c6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f2b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d005      	beq.n	800f2c4 <lwip_netconn_err_to_msg+0x48>
 800f2b8:	4b08      	ldr	r3, [pc, #32]	; (800f2dc <lwip_netconn_err_to_msg+0x60>)
 800f2ba:	227d      	movs	r2, #125	; 0x7d
 800f2bc:	4908      	ldr	r1, [pc, #32]	; (800f2e0 <lwip_netconn_err_to_msg+0x64>)
 800f2be:	4809      	ldr	r0, [pc, #36]	; (800f2e4 <lwip_netconn_err_to_msg+0x68>)
 800f2c0:	f010 fb00 	bl	801f8c4 <iprintf>
      return NULL;
 800f2c4:	2300      	movs	r3, #0
  }
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	08025174 	.word	0x08025174
 800f2d4:	08025175 	.word	0x08025175
 800f2d8:	08025176 	.word	0x08025176
 800f2dc:	08021914 	.word	0x08021914
 800f2e0:	08021948 	.word	0x08021948
 800f2e4:	08021958 	.word	0x08021958

0800f2e8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d105      	bne.n	800f304 <lwip_netconn_is_err_msg+0x1c>
 800f2f8:	4b12      	ldr	r3, [pc, #72]	; (800f344 <lwip_netconn_is_err_msg+0x5c>)
 800f2fa:	2285      	movs	r2, #133	; 0x85
 800f2fc:	4912      	ldr	r1, [pc, #72]	; (800f348 <lwip_netconn_is_err_msg+0x60>)
 800f2fe:	4813      	ldr	r0, [pc, #76]	; (800f34c <lwip_netconn_is_err_msg+0x64>)
 800f300:	f010 fae0 	bl	801f8c4 <iprintf>

  if (msg == &netconn_aborted) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4a12      	ldr	r2, [pc, #72]	; (800f350 <lwip_netconn_is_err_msg+0x68>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d104      	bne.n	800f316 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	22f3      	movs	r2, #243	; 0xf3
 800f310:	701a      	strb	r2, [r3, #0]
    return 1;
 800f312:	2301      	movs	r3, #1
 800f314:	e012      	b.n	800f33c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a0e      	ldr	r2, [pc, #56]	; (800f354 <lwip_netconn_is_err_msg+0x6c>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d104      	bne.n	800f328 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	22f2      	movs	r2, #242	; 0xf2
 800f322:	701a      	strb	r2, [r3, #0]
    return 1;
 800f324:	2301      	movs	r3, #1
 800f326:	e009      	b.n	800f33c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4a0b      	ldr	r2, [pc, #44]	; (800f358 <lwip_netconn_is_err_msg+0x70>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d104      	bne.n	800f33a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	22f1      	movs	r2, #241	; 0xf1
 800f334:	701a      	strb	r2, [r3, #0]
    return 1;
 800f336:	2301      	movs	r3, #1
 800f338:	e000      	b.n	800f33c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f33a:	2300      	movs	r3, #0
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3708      	adds	r7, #8
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	08021914 	.word	0x08021914
 800f348:	08021980 	.word	0x08021980
 800f34c:	08021958 	.word	0x08021958
 800f350:	08025174 	.word	0x08025174
 800f354:	08025175 	.word	0x08025175
 800f358:	08025176 	.word	0x08025176

0800f35c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b088      	sub	sp, #32
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d105      	bne.n	800f37c <recv_udp+0x20>
 800f370:	4b34      	ldr	r3, [pc, #208]	; (800f444 <recv_udp+0xe8>)
 800f372:	22e5      	movs	r2, #229	; 0xe5
 800f374:	4934      	ldr	r1, [pc, #208]	; (800f448 <recv_udp+0xec>)
 800f376:	4835      	ldr	r0, [pc, #212]	; (800f44c <recv_udp+0xf0>)
 800f378:	f010 faa4 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d105      	bne.n	800f38e <recv_udp+0x32>
 800f382:	4b30      	ldr	r3, [pc, #192]	; (800f444 <recv_udp+0xe8>)
 800f384:	22e6      	movs	r2, #230	; 0xe6
 800f386:	4932      	ldr	r1, [pc, #200]	; (800f450 <recv_udp+0xf4>)
 800f388:	4830      	ldr	r0, [pc, #192]	; (800f44c <recv_udp+0xf0>)
 800f38a:	f010 fa9b 	bl	801f8c4 <iprintf>
  conn = (struct netconn *)arg;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d103      	bne.n	800f3a0 <recv_udp+0x44>
    pbuf_free(p);
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f003 fbbf 	bl	8012b1c <pbuf_free>
    return;
 800f39e:	e04d      	b.n	800f43c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d005      	beq.n	800f3b6 <recv_udp+0x5a>
 800f3aa:	4b26      	ldr	r3, [pc, #152]	; (800f444 <recv_udp+0xe8>)
 800f3ac:	22ee      	movs	r2, #238	; 0xee
 800f3ae:	4929      	ldr	r1, [pc, #164]	; (800f454 <recv_udp+0xf8>)
 800f3b0:	4826      	ldr	r0, [pc, #152]	; (800f44c <recv_udp+0xf0>)
 800f3b2:	f010 fa87 	bl	801f8c4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	3310      	adds	r3, #16
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f00e ff77 	bl	801e2ae <sys_mbox_valid>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d103      	bne.n	800f3ce <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f003 fba8 	bl	8012b1c <pbuf_free>
    return;
 800f3cc:	e036      	b.n	800f43c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f3ce:	2006      	movs	r0, #6
 800f3d0:	f002 fc46 	bl	8011c60 <memp_malloc>
 800f3d4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d103      	bne.n	800f3e4 <recv_udp+0x88>
    pbuf_free(p);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f003 fb9d 	bl	8012b1c <pbuf_free>
    return;
 800f3e2:	e02b      	b.n	800f43c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d002      	beq.n	800f3fc <recv_udp+0xa0>
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	e000      	b.n	800f3fe <recv_udp+0xa2>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	69ba      	ldr	r2, [r7, #24]
 800f400:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f406:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	891b      	ldrh	r3, [r3, #8]
 800f40c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	3310      	adds	r3, #16
 800f412:	69b9      	ldr	r1, [r7, #24]
 800f414:	4618      	mov	r0, r3
 800f416:	f00e fed5 	bl	801e1c4 <sys_mbox_trypost>
 800f41a:	4603      	mov	r3, r0
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d003      	beq.n	800f428 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f420:	69b8      	ldr	r0, [r7, #24]
 800f422:	f001 fb01 	bl	8010a28 <netbuf_delete>
    return;
 800f426:	e009      	b.n	800f43c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d005      	beq.n	800f43c <recv_udp+0xe0>
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f434:	8afa      	ldrh	r2, [r7, #22]
 800f436:	2100      	movs	r1, #0
 800f438:	69f8      	ldr	r0, [r7, #28]
 800f43a:	4798      	blx	r3
  }
}
 800f43c:	3720      	adds	r7, #32
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
 800f442:	bf00      	nop
 800f444:	08021914 	.word	0x08021914
 800f448:	0802198c 	.word	0x0802198c
 800f44c:	08021958 	.word	0x08021958
 800f450:	080219b0 	.word	0x080219b0
 800f454:	080219d0 	.word	0x080219d0

0800f458 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b088      	sub	sp, #32
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	60f8      	str	r0, [r7, #12]
 800f460:	60b9      	str	r1, [r7, #8]
 800f462:	607a      	str	r2, [r7, #4]
 800f464:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d106      	bne.n	800f47a <recv_tcp+0x22>
 800f46c:	4b36      	ldr	r3, [pc, #216]	; (800f548 <recv_tcp+0xf0>)
 800f46e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f472:	4936      	ldr	r1, [pc, #216]	; (800f54c <recv_tcp+0xf4>)
 800f474:	4836      	ldr	r0, [pc, #216]	; (800f550 <recv_tcp+0xf8>)
 800f476:	f010 fa25 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d106      	bne.n	800f48e <recv_tcp+0x36>
 800f480:	4b31      	ldr	r3, [pc, #196]	; (800f548 <recv_tcp+0xf0>)
 800f482:	f240 122d 	movw	r2, #301	; 0x12d
 800f486:	4933      	ldr	r1, [pc, #204]	; (800f554 <recv_tcp+0xfc>)
 800f488:	4831      	ldr	r0, [pc, #196]	; (800f550 <recv_tcp+0xf8>)
 800f48a:	f010 fa1b 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f48e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d006      	beq.n	800f4a4 <recv_tcp+0x4c>
 800f496:	4b2c      	ldr	r3, [pc, #176]	; (800f548 <recv_tcp+0xf0>)
 800f498:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f49c:	492e      	ldr	r1, [pc, #184]	; (800f558 <recv_tcp+0x100>)
 800f49e:	482c      	ldr	r0, [pc, #176]	; (800f550 <recv_tcp+0xf8>)
 800f4a0:	f010 fa10 	bl	801f8c4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d102      	bne.n	800f4b4 <recv_tcp+0x5c>
    return ERR_VAL;
 800f4ae:	f06f 0305 	mvn.w	r3, #5
 800f4b2:	e045      	b.n	800f540 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	68ba      	ldr	r2, [r7, #8]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d006      	beq.n	800f4cc <recv_tcp+0x74>
 800f4be:	4b22      	ldr	r3, [pc, #136]	; (800f548 <recv_tcp+0xf0>)
 800f4c0:	f240 1235 	movw	r2, #309	; 0x135
 800f4c4:	4925      	ldr	r1, [pc, #148]	; (800f55c <recv_tcp+0x104>)
 800f4c6:	4822      	ldr	r0, [pc, #136]	; (800f550 <recv_tcp+0xf8>)
 800f4c8:	f010 f9fc 	bl	801f8c4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	3310      	adds	r3, #16
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f00e feec 	bl	801e2ae <sys_mbox_valid>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d10d      	bne.n	800f4f8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d008      	beq.n	800f4f4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	891b      	ldrh	r3, [r3, #8]
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	68b8      	ldr	r0, [r7, #8]
 800f4ea:	f004 faf9 	bl	8013ae0 <tcp_recved>
      pbuf_free(p);
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f003 fb14 	bl	8012b1c <pbuf_free>
    }
    return ERR_OK;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e023      	b.n	800f540 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d005      	beq.n	800f50a <recv_tcp+0xb2>
    msg = p;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	891b      	ldrh	r3, [r3, #8]
 800f506:	83fb      	strh	r3, [r7, #30]
 800f508:	e003      	b.n	800f512 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f50a:	4b15      	ldr	r3, [pc, #84]	; (800f560 <recv_tcp+0x108>)
 800f50c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	3310      	adds	r3, #16
 800f516:	69b9      	ldr	r1, [r7, #24]
 800f518:	4618      	mov	r0, r3
 800f51a:	f00e fe53 	bl	801e1c4 <sys_mbox_trypost>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f528:	e00a      	b.n	800f540 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d005      	beq.n	800f53e <recv_tcp+0xe6>
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f536:	8bfa      	ldrh	r2, [r7, #30]
 800f538:	2100      	movs	r1, #0
 800f53a:	6978      	ldr	r0, [r7, #20]
 800f53c:	4798      	blx	r3
  }

  return ERR_OK;
 800f53e:	2300      	movs	r3, #0
}
 800f540:	4618      	mov	r0, r3
 800f542:	3720      	adds	r7, #32
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	08021914 	.word	0x08021914
 800f54c:	080219f0 	.word	0x080219f0
 800f550:	08021958 	.word	0x08021958
 800f554:	08021a14 	.word	0x08021a14
 800f558:	08021a34 	.word	0x08021a34
 800f55c:	08021a4c 	.word	0x08021a4c
 800f560:	08025176 	.word	0x08025176

0800f564 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b084      	sub	sp, #16
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d106      	bne.n	800f586 <poll_tcp+0x22>
 800f578:	4b29      	ldr	r3, [pc, #164]	; (800f620 <poll_tcp+0xbc>)
 800f57a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f57e:	4929      	ldr	r1, [pc, #164]	; (800f624 <poll_tcp+0xc0>)
 800f580:	4829      	ldr	r0, [pc, #164]	; (800f628 <poll_tcp+0xc4>)
 800f582:	f010 f99f 	bl	801f8c4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	785b      	ldrb	r3, [r3, #1]
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d104      	bne.n	800f598 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f58e:	2101      	movs	r1, #1
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f000 ff65 	bl	8010460 <lwip_netconn_do_writemore>
 800f596:	e016      	b.n	800f5c6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	785b      	ldrb	r3, [r3, #1]
 800f59c:	2b04      	cmp	r3, #4
 800f59e:	d112      	bne.n	800f5c6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	6a1b      	ldr	r3, [r3, #32]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d00a      	beq.n	800f5be <poll_tcp+0x5a>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6a1b      	ldr	r3, [r3, #32]
 800f5ac:	7a5b      	ldrb	r3, [r3, #9]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d005      	beq.n	800f5be <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6a1b      	ldr	r3, [r3, #32]
 800f5b6:	7a5a      	ldrb	r2, [r3, #9]
 800f5b8:	3a01      	subs	r2, #1
 800f5ba:	b2d2      	uxtb	r2, r2
 800f5bc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f5be:	2101      	movs	r1, #1
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f000 fbf7 	bl	800fdb4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	7f1b      	ldrb	r3, [r3, #28]
 800f5ca:	f003 0310 	and.w	r3, r3, #16
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d021      	beq.n	800f616 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d01d      	beq.n	800f616 <poll_tcp+0xb2>
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f5e2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f5e6:	d316      	bcc.n	800f616 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f5f0:	2b04      	cmp	r3, #4
 800f5f2:	d810      	bhi.n	800f616 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	7f1b      	ldrb	r3, [r3, #28]
 800f5f8:	f023 0310 	bic.w	r3, r3, #16
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f606:	2b00      	cmp	r3, #0
 800f608:	d005      	beq.n	800f616 <poll_tcp+0xb2>
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60e:	2200      	movs	r2, #0
 800f610:	2102      	movs	r1, #2
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f616:	2300      	movs	r3, #0
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3710      	adds	r7, #16
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}
 800f620:	08021914 	.word	0x08021914
 800f624:	08021a6c 	.word	0x08021a6c
 800f628:	08021958 	.word	0x08021958

0800f62c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	4613      	mov	r3, r2
 800f638:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d106      	bne.n	800f652 <sent_tcp+0x26>
 800f644:	4b20      	ldr	r3, [pc, #128]	; (800f6c8 <sent_tcp+0x9c>)
 800f646:	f240 1293 	movw	r2, #403	; 0x193
 800f64a:	4920      	ldr	r1, [pc, #128]	; (800f6cc <sent_tcp+0xa0>)
 800f64c:	4820      	ldr	r0, [pc, #128]	; (800f6d0 <sent_tcp+0xa4>)
 800f64e:	f010 f939 	bl	801f8c4 <iprintf>

  if (conn) {
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d032      	beq.n	800f6be <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	785b      	ldrb	r3, [r3, #1]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d104      	bne.n	800f66a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f660:	2101      	movs	r1, #1
 800f662:	6978      	ldr	r0, [r7, #20]
 800f664:	f000 fefc 	bl	8010460 <lwip_netconn_do_writemore>
 800f668:	e007      	b.n	800f67a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	785b      	ldrb	r3, [r3, #1]
 800f66e:	2b04      	cmp	r3, #4
 800f670:	d103      	bne.n	800f67a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f672:	2101      	movs	r1, #1
 800f674:	6978      	ldr	r0, [r7, #20]
 800f676:	f000 fb9d 	bl	800fdb4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d01d      	beq.n	800f6be <sent_tcp+0x92>
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f68a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f68e:	d316      	bcc.n	800f6be <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f698:	2b04      	cmp	r3, #4
 800f69a:	d810      	bhi.n	800f6be <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	7f1b      	ldrb	r3, [r3, #28]
 800f6a0:	f023 0310 	bic.w	r3, r3, #16
 800f6a4:	b2da      	uxtb	r2, r3
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d005      	beq.n	800f6be <sent_tcp+0x92>
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b6:	88fa      	ldrh	r2, [r7, #6]
 800f6b8:	2102      	movs	r1, #2
 800f6ba:	6978      	ldr	r0, [r7, #20]
 800f6bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3718      	adds	r7, #24
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	08021914 	.word	0x08021914
 800f6cc:	08021a6c 	.word	0x08021a6c
 800f6d0:	08021958 	.word	0x08021958

0800f6d4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b088      	sub	sp, #32
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	460b      	mov	r3, r1
 800f6de:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d106      	bne.n	800f6f8 <err_tcp+0x24>
 800f6ea:	4b5f      	ldr	r3, [pc, #380]	; (800f868 <err_tcp+0x194>)
 800f6ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f6f0:	495e      	ldr	r1, [pc, #376]	; (800f86c <err_tcp+0x198>)
 800f6f2:	485f      	ldr	r0, [pc, #380]	; (800f870 <err_tcp+0x19c>)
 800f6f4:	f010 f8e6 	bl	801f8c4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f6f8:	f00e fef4 	bl	801e4e4 <sys_arch_protect>
 800f6fc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	2200      	movs	r2, #0
 800f702:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	78fa      	ldrb	r2, [r7, #3]
 800f708:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	7f1b      	ldrb	r3, [r3, #28]
 800f70e:	f043 0301 	orr.w	r3, r3, #1
 800f712:	b2da      	uxtb	r2, r3
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	785b      	ldrb	r3, [r3, #1]
 800f71c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	2200      	movs	r2, #0
 800f722:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f724:	69b8      	ldr	r0, [r7, #24]
 800f726:	f00e feeb 	bl	801e500 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d005      	beq.n	800f73e <err_tcp+0x6a>
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f736:	2200      	movs	r2, #0
 800f738:	2104      	movs	r1, #4
 800f73a:	69f8      	ldr	r0, [r7, #28]
 800f73c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f742:	2b00      	cmp	r3, #0
 800f744:	d005      	beq.n	800f752 <err_tcp+0x7e>
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f74a:	2200      	movs	r2, #0
 800f74c:	2100      	movs	r1, #0
 800f74e:	69f8      	ldr	r0, [r7, #28]
 800f750:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f756:	2b00      	cmp	r3, #0
 800f758:	d005      	beq.n	800f766 <err_tcp+0x92>
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f75e:	2200      	movs	r2, #0
 800f760:	2102      	movs	r1, #2
 800f762:	69f8      	ldr	r0, [r7, #28]
 800f764:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff fd86 	bl	800f27c <lwip_netconn_err_to_msg>
 800f770:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	3310      	adds	r3, #16
 800f776:	4618      	mov	r0, r3
 800f778:	f00e fd99 	bl	801e2ae <sys_mbox_valid>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d005      	beq.n	800f78e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	3310      	adds	r3, #16
 800f786:	6939      	ldr	r1, [r7, #16]
 800f788:	4618      	mov	r0, r3
 800f78a:	f00e fd1b 	bl	801e1c4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	3314      	adds	r3, #20
 800f792:	4618      	mov	r0, r3
 800f794:	f00e fd8b 	bl	801e2ae <sys_mbox_valid>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d005      	beq.n	800f7aa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	3314      	adds	r3, #20
 800f7a2:	6939      	ldr	r1, [r7, #16]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f00e fd0d 	bl	801e1c4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f7aa:	7dfb      	ldrb	r3, [r7, #23]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d005      	beq.n	800f7bc <err_tcp+0xe8>
 800f7b0:	7dfb      	ldrb	r3, [r7, #23]
 800f7b2:	2b04      	cmp	r3, #4
 800f7b4:	d002      	beq.n	800f7bc <err_tcp+0xe8>
 800f7b6:	7dfb      	ldrb	r3, [r7, #23]
 800f7b8:	2b03      	cmp	r3, #3
 800f7ba:	d143      	bne.n	800f844 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f7bc:	69fb      	ldr	r3, [r7, #28]
 800f7be:	7f1b      	ldrb	r3, [r3, #28]
 800f7c0:	f003 0304 	and.w	r3, r3, #4
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	bf14      	ite	ne
 800f7c8:	2301      	movne	r3, #1
 800f7ca:	2300      	moveq	r3, #0
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	7f1b      	ldrb	r3, [r3, #28]
 800f7d4:	f023 0304 	bic.w	r3, r3, #4
 800f7d8:	b2da      	uxtb	r2, r3
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d13b      	bne.n	800f85c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	6a1b      	ldr	r3, [r3, #32]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d106      	bne.n	800f7fa <err_tcp+0x126>
 800f7ec:	4b1e      	ldr	r3, [pc, #120]	; (800f868 <err_tcp+0x194>)
 800f7ee:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f7f2:	4920      	ldr	r1, [pc, #128]	; (800f874 <err_tcp+0x1a0>)
 800f7f4:	481e      	ldr	r0, [pc, #120]	; (800f870 <err_tcp+0x19c>)
 800f7f6:	f010 f865 	bl	801f8c4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f7fa:	7dfb      	ldrb	r3, [r7, #23]
 800f7fc:	2b04      	cmp	r3, #4
 800f7fe:	d104      	bne.n	800f80a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	6a1b      	ldr	r3, [r3, #32]
 800f804:	2200      	movs	r2, #0
 800f806:	711a      	strb	r2, [r3, #4]
 800f808:	e003      	b.n	800f812 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	6a1b      	ldr	r3, [r3, #32]
 800f80e:	78fa      	ldrb	r2, [r7, #3]
 800f810:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f812:	69fb      	ldr	r3, [r7, #28]
 800f814:	6a1b      	ldr	r3, [r3, #32]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	330c      	adds	r3, #12
 800f81a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f81c:	68b8      	ldr	r0, [r7, #8]
 800f81e:	f00e fdd7 	bl	801e3d0 <sys_sem_valid>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d106      	bne.n	800f836 <err_tcp+0x162>
 800f828:	4b0f      	ldr	r3, [pc, #60]	; (800f868 <err_tcp+0x194>)
 800f82a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800f82e:	4912      	ldr	r1, [pc, #72]	; (800f878 <err_tcp+0x1a4>)
 800f830:	480f      	ldr	r0, [pc, #60]	; (800f870 <err_tcp+0x19c>)
 800f832:	f010 f847 	bl	801f8c4 <iprintf>
      conn->current_msg = NULL;
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	2200      	movs	r2, #0
 800f83a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f83c:	68b8      	ldr	r0, [r7, #8]
 800f83e:	f00e fdad 	bl	801e39c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f842:	e00b      	b.n	800f85c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	6a1b      	ldr	r3, [r3, #32]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d008      	beq.n	800f85e <err_tcp+0x18a>
 800f84c:	4b06      	ldr	r3, [pc, #24]	; (800f868 <err_tcp+0x194>)
 800f84e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f852:	490a      	ldr	r1, [pc, #40]	; (800f87c <err_tcp+0x1a8>)
 800f854:	4806      	ldr	r0, [pc, #24]	; (800f870 <err_tcp+0x19c>)
 800f856:	f010 f835 	bl	801f8c4 <iprintf>
  }
}
 800f85a:	e000      	b.n	800f85e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f85c:	bf00      	nop
}
 800f85e:	bf00      	nop
 800f860:	3720      	adds	r7, #32
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	08021914 	.word	0x08021914
 800f86c:	08021a6c 	.word	0x08021a6c
 800f870:	08021958 	.word	0x08021958
 800f874:	08021a7c 	.word	0x08021a7c
 800f878:	08021a98 	.word	0x08021a98
 800f87c:	08021ab4 	.word	0x08021ab4

0800f880 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b084      	sub	sp, #16
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f88e:	6879      	ldr	r1, [r7, #4]
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f004 ffeb 	bl	801486c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f896:	490a      	ldr	r1, [pc, #40]	; (800f8c0 <setup_tcp+0x40>)
 800f898:	68f8      	ldr	r0, [r7, #12]
 800f89a:	f004 fff9 	bl	8014890 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f89e:	4909      	ldr	r1, [pc, #36]	; (800f8c4 <setup_tcp+0x44>)
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f005 f817 	bl	80148d4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f8a6:	2202      	movs	r2, #2
 800f8a8:	4907      	ldr	r1, [pc, #28]	; (800f8c8 <setup_tcp+0x48>)
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f005 f86e 	bl	801498c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f8b0:	4906      	ldr	r1, [pc, #24]	; (800f8cc <setup_tcp+0x4c>)
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f005 f830 	bl	8014918 <tcp_err>
}
 800f8b8:	bf00      	nop
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	0800f459 	.word	0x0800f459
 800f8c4:	0800f62d 	.word	0x0800f62d
 800f8c8:	0800f565 	.word	0x0800f565
 800f8cc:	0800f6d5 	.word	0x0800f6d5

0800f8d0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f8d0:	b590      	push	{r4, r7, lr}
 800f8d2:	b089      	sub	sp, #36	; 0x24
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	60f8      	str	r0, [r7, #12]
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	4613      	mov	r3, r2
 800f8dc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d102      	bne.n	800f8ee <accept_function+0x1e>
    return ERR_VAL;
 800f8e8:	f06f 0305 	mvn.w	r3, #5
 800f8ec:	e0a1      	b.n	800fa32 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	3314      	adds	r3, #20
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f00e fcdb 	bl	801e2ae <sys_mbox_valid>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d102      	bne.n	800f904 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f8fe:	f06f 0305 	mvn.w	r3, #5
 800f902:	e096      	b.n	800fa32 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d11b      	bne.n	800f942 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	f103 0414 	add.w	r4, r3, #20
 800f910:	f06f 000c 	mvn.w	r0, #12
 800f914:	f7ff fcb2 	bl	800f27c <lwip_netconn_err_to_msg>
 800f918:	4603      	mov	r3, r0
 800f91a:	4619      	mov	r1, r3
 800f91c:	4620      	mov	r0, r4
 800f91e:	f00e fc51 	bl	801e1c4 <sys_mbox_trypost>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d109      	bne.n	800f93c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d005      	beq.n	800f93c <accept_function+0x6c>
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f934:	2200      	movs	r2, #0
 800f936:	2100      	movs	r1, #0
 800f938:	69f8      	ldr	r0, [r7, #28]
 800f93a:	4798      	blx	r3
    }
    return ERR_VAL;
 800f93c:	f06f 0305 	mvn.w	r3, #5
 800f940:	e077      	b.n	800fa32 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d006      	beq.n	800f958 <accept_function+0x88>
 800f94a:	4b3c      	ldr	r3, [pc, #240]	; (800fa3c <accept_function+0x16c>)
 800f94c:	f240 222a 	movw	r2, #554	; 0x22a
 800f950:	493b      	ldr	r1, [pc, #236]	; (800fa40 <accept_function+0x170>)
 800f952:	483c      	ldr	r0, [pc, #240]	; (800fa44 <accept_function+0x174>)
 800f954:	f00f ffb6 	bl	801f8c4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	781a      	ldrb	r2, [r3, #0]
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f960:	4619      	mov	r1, r3
 800f962:	4610      	mov	r0, r2
 800f964:	f000 f8f0 	bl	800fb48 <netconn_alloc>
 800f968:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d11b      	bne.n	800f9a8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	f103 0414 	add.w	r4, r3, #20
 800f976:	f06f 000c 	mvn.w	r0, #12
 800f97a:	f7ff fc7f 	bl	800f27c <lwip_netconn_err_to_msg>
 800f97e:	4603      	mov	r3, r0
 800f980:	4619      	mov	r1, r3
 800f982:	4620      	mov	r0, r4
 800f984:	f00e fc1e 	bl	801e1c4 <sys_mbox_trypost>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d109      	bne.n	800f9a2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f992:	2b00      	cmp	r3, #0
 800f994:	d005      	beq.n	800f9a2 <accept_function+0xd2>
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99a:	2200      	movs	r2, #0
 800f99c:	2100      	movs	r1, #0
 800f99e:	69f8      	ldr	r0, [r7, #28]
 800f9a0:	4798      	blx	r3
    }
    return ERR_MEM;
 800f9a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9a6:	e044      	b.n	800fa32 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	68ba      	ldr	r2, [r7, #8]
 800f9ac:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f9ae:	69b8      	ldr	r0, [r7, #24]
 800f9b0:	f7ff ff66 	bl	800f880 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	3314      	adds	r3, #20
 800f9b8:	69b9      	ldr	r1, [r7, #24]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f00e fc02 	bl	801e1c4 <sys_mbox_trypost>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d02a      	beq.n	800fa1c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f9cc:	2100      	movs	r1, #0
 800f9ce:	6978      	ldr	r0, [r7, #20]
 800f9d0:	f004 ff4c 	bl	801486c <tcp_arg>
    tcp_recv(pcb, NULL);
 800f9d4:	2100      	movs	r1, #0
 800f9d6:	6978      	ldr	r0, [r7, #20]
 800f9d8:	f004 ff5a 	bl	8014890 <tcp_recv>
    tcp_sent(pcb, NULL);
 800f9dc:	2100      	movs	r1, #0
 800f9de:	6978      	ldr	r0, [r7, #20]
 800f9e0:	f004 ff78 	bl	80148d4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	6978      	ldr	r0, [r7, #20]
 800f9ea:	f004 ffcf 	bl	801498c <tcp_poll>
    tcp_err(pcb, NULL);
 800f9ee:	2100      	movs	r1, #0
 800f9f0:	6978      	ldr	r0, [r7, #20]
 800f9f2:	f004 ff91 	bl	8014918 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f9f6:	69bb      	ldr	r3, [r7, #24]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f9fc:	69bb      	ldr	r3, [r7, #24]
 800f9fe:	3310      	adds	r3, #16
 800fa00:	4618      	mov	r0, r3
 800fa02:	f00e fbcd 	bl	801e1a0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	3310      	adds	r3, #16
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f00e fc60 	bl	801e2d0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800fa10:	69b8      	ldr	r0, [r7, #24]
 800fa12:	f000 f907 	bl	800fc24 <netconn_free>
    return ERR_MEM;
 800fa16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa1a:	e00a      	b.n	800fa32 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d005      	beq.n	800fa30 <accept_function+0x160>
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa28:	2200      	movs	r2, #0
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	69f8      	ldr	r0, [r7, #28]
 800fa2e:	4798      	blx	r3
  }

  return ERR_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3724      	adds	r7, #36	; 0x24
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd90      	pop	{r4, r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	08021914 	.word	0x08021914
 800fa40:	08021ad0 	.word	0x08021ad0
 800fa44:	08021958 	.word	0x08021958

0800fa48 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800fa48:	b590      	push	{r4, r7, lr}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800fa50:	2300      	movs	r3, #0
 800fa52:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d006      	beq.n	800fa6c <pcb_new+0x24>
 800fa5e:	4b2b      	ldr	r3, [pc, #172]	; (800fb0c <pcb_new+0xc4>)
 800fa60:	f240 2265 	movw	r2, #613	; 0x265
 800fa64:	492a      	ldr	r1, [pc, #168]	; (800fb10 <pcb_new+0xc8>)
 800fa66:	482b      	ldr	r0, [pc, #172]	; (800fb14 <pcb_new+0xcc>)
 800fa68:	f00f ff2c 	bl	801f8c4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa76:	2b10      	cmp	r3, #16
 800fa78:	d022      	beq.n	800fac0 <pcb_new+0x78>
 800fa7a:	2b20      	cmp	r3, #32
 800fa7c:	d133      	bne.n	800fae6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681c      	ldr	r4, [r3, #0]
 800fa82:	7bfb      	ldrb	r3, [r7, #15]
 800fa84:	4618      	mov	r0, r3
 800fa86:	f00a f9b2 	bl	8019dee <udp_new_ip_type>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d02a      	beq.n	800faee <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	2b22      	cmp	r3, #34	; 0x22
 800faa0:	d104      	bne.n	800faac <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6858      	ldr	r0, [r3, #4]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	4917      	ldr	r1, [pc, #92]	; (800fb18 <pcb_new+0xd0>)
 800faba:	f00a f91f 	bl	8019cfc <udp_recv>
      }
      break;
 800fabe:	e016      	b.n	800faee <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681c      	ldr	r4, [r3, #0]
 800fac4:	7bfb      	ldrb	r3, [r7, #15]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f004 fec2 	bl	8014850 <tcp_new_ip_type>
 800facc:	4603      	mov	r3, r0
 800face:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00b      	beq.n	800faf2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4618      	mov	r0, r3
 800fae0:	f7ff fece 	bl	800f880 <setup_tcp>
      }
      break;
 800fae4:	e005      	b.n	800faf2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	22fa      	movs	r2, #250	; 0xfa
 800faea:	711a      	strb	r2, [r3, #4]
      return;
 800faec:	e00a      	b.n	800fb04 <pcb_new+0xbc>
      break;
 800faee:	bf00      	nop
 800faf0:	e000      	b.n	800faf4 <pcb_new+0xac>
      break;
 800faf2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d102      	bne.n	800fb04 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	22ff      	movs	r2, #255	; 0xff
 800fb02:	711a      	strb	r2, [r3, #4]
  }
}
 800fb04:	3714      	adds	r7, #20
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd90      	pop	{r4, r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	08021914 	.word	0x08021914
 800fb10:	08021af8 	.word	0x08021af8
 800fb14:	08021958 	.word	0x08021958
 800fb18:	0800f35d 	.word	0x0800f35d

0800fb1c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b084      	sub	sp, #16
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d102      	bne.n	800fb3e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	f7ff ff85 	bl	800fa48 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800fb3e:	bf00      	nop
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
	...

0800fb48 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	4603      	mov	r3, r0
 800fb50:	6039      	str	r1, [r7, #0]
 800fb52:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800fb58:	2007      	movs	r0, #7
 800fb5a:	f002 f881 	bl	8011c60 <memp_malloc>
 800fb5e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d101      	bne.n	800fb6a <netconn_alloc+0x22>
    return NULL;
 800fb66:	2300      	movs	r3, #0
 800fb68:	e052      	b.n	800fc10 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	79fa      	ldrb	r2, [r7, #7]
 800fb74:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800fb7c:	79fb      	ldrb	r3, [r7, #7]
 800fb7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb82:	2b10      	cmp	r3, #16
 800fb84:	d004      	beq.n	800fb90 <netconn_alloc+0x48>
 800fb86:	2b20      	cmp	r3, #32
 800fb88:	d105      	bne.n	800fb96 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800fb8a:	2306      	movs	r3, #6
 800fb8c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800fb8e:	e00a      	b.n	800fba6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800fb90:	2306      	movs	r3, #6
 800fb92:	617b      	str	r3, [r7, #20]
      break;
 800fb94:	e007      	b.n	800fba6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800fb96:	4b20      	ldr	r3, [pc, #128]	; (800fc18 <netconn_alloc+0xd0>)
 800fb98:	f240 22e5 	movw	r2, #741	; 0x2e5
 800fb9c:	491f      	ldr	r1, [pc, #124]	; (800fc1c <netconn_alloc+0xd4>)
 800fb9e:	4820      	ldr	r0, [pc, #128]	; (800fc20 <netconn_alloc+0xd8>)
 800fba0:	f00f fe90 	bl	801f8c4 <iprintf>
      goto free_and_return;
 800fba4:	e02f      	b.n	800fc06 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	3310      	adds	r3, #16
 800fbaa:	6979      	ldr	r1, [r7, #20]
 800fbac:	4618      	mov	r0, r3
 800fbae:	f00e fad5 	bl	801e15c <sys_mbox_new>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d125      	bne.n	800fc04 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	330c      	adds	r3, #12
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f00e fb93 	bl	801e2ea <sys_sem_new>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d005      	beq.n	800fbd6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3310      	adds	r3, #16
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f00e fae6 	bl	801e1a0 <sys_mbox_free>
    goto free_and_return;
 800fbd4:	e017      	b.n	800fc06 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	3314      	adds	r3, #20
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f00e fb78 	bl	801e2d0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	683a      	ldr	r2, [r7, #0]
 800fbf2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	7cfa      	ldrb	r2, [r7, #19]
 800fbfe:	771a      	strb	r2, [r3, #28]
  return conn;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	e005      	b.n	800fc10 <netconn_alloc+0xc8>
    goto free_and_return;
 800fc04:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800fc06:	68f9      	ldr	r1, [r7, #12]
 800fc08:	2007      	movs	r0, #7
 800fc0a:	f002 f89f 	bl	8011d4c <memp_free>
  return NULL;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3718      	adds	r7, #24
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	08021914 	.word	0x08021914
 800fc1c:	08021b18 	.word	0x08021b18
 800fc20:	08021958 	.word	0x08021958

0800fc24 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d006      	beq.n	800fc42 <netconn_free+0x1e>
 800fc34:	4b1b      	ldr	r3, [pc, #108]	; (800fca4 <netconn_free+0x80>)
 800fc36:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fc3a:	491b      	ldr	r1, [pc, #108]	; (800fca8 <netconn_free+0x84>)
 800fc3c:	481b      	ldr	r0, [pc, #108]	; (800fcac <netconn_free+0x88>)
 800fc3e:	f00f fe41 	bl	801f8c4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	3310      	adds	r3, #16
 800fc46:	4618      	mov	r0, r3
 800fc48:	f00e fb31 	bl	801e2ae <sys_mbox_valid>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d006      	beq.n	800fc60 <netconn_free+0x3c>
 800fc52:	4b14      	ldr	r3, [pc, #80]	; (800fca4 <netconn_free+0x80>)
 800fc54:	f240 3223 	movw	r2, #803	; 0x323
 800fc58:	4915      	ldr	r1, [pc, #84]	; (800fcb0 <netconn_free+0x8c>)
 800fc5a:	4814      	ldr	r0, [pc, #80]	; (800fcac <netconn_free+0x88>)
 800fc5c:	f00f fe32 	bl	801f8c4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	3314      	adds	r3, #20
 800fc64:	4618      	mov	r0, r3
 800fc66:	f00e fb22 	bl	801e2ae <sys_mbox_valid>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d006      	beq.n	800fc7e <netconn_free+0x5a>
 800fc70:	4b0c      	ldr	r3, [pc, #48]	; (800fca4 <netconn_free+0x80>)
 800fc72:	f240 3226 	movw	r2, #806	; 0x326
 800fc76:	490f      	ldr	r1, [pc, #60]	; (800fcb4 <netconn_free+0x90>)
 800fc78:	480c      	ldr	r0, [pc, #48]	; (800fcac <netconn_free+0x88>)
 800fc7a:	f00f fe23 	bl	801f8c4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	330c      	adds	r3, #12
 800fc82:	4618      	mov	r0, r3
 800fc84:	f00e fb97 	bl	801e3b6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	330c      	adds	r3, #12
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f00e fbb0 	bl	801e3f2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800fc92:	6879      	ldr	r1, [r7, #4]
 800fc94:	2007      	movs	r0, #7
 800fc96:	f002 f859 	bl	8011d4c <memp_free>
}
 800fc9a:	bf00      	nop
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	08021914 	.word	0x08021914
 800fca8:	08021b40 	.word	0x08021b40
 800fcac:	08021958 	.word	0x08021958
 800fcb0:	08021b70 	.word	0x08021b70
 800fcb4:	08021bac 	.word	0x08021bac

0800fcb8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	3310      	adds	r3, #16
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f00e faf2 	bl	801e2ae <sys_mbox_valid>
 800fcca:	4603      	mov	r3, r0
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d02f      	beq.n	800fd30 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fcd0:	e018      	b.n	800fd04 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcda:	2b10      	cmp	r3, #16
 800fcdc:	d10e      	bne.n	800fcfc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	f107 020f 	add.w	r2, r7, #15
 800fce4:	4611      	mov	r1, r2
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7ff fafe 	bl	800f2e8 <lwip_netconn_is_err_msg>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d108      	bne.n	800fd04 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f002 ff11 	bl	8012b1c <pbuf_free>
 800fcfa:	e003      	b.n	800fd04 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f000 fe92 	bl	8010a28 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	3310      	adds	r3, #16
 800fd08:	f107 0210 	add.w	r2, r7, #16
 800fd0c:	4611      	mov	r1, r2
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f00e fab1 	bl	801e276 <sys_arch_mbox_tryfetch>
 800fd14:	4603      	mov	r3, r0
 800fd16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd1a:	d1da      	bne.n	800fcd2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	3310      	adds	r3, #16
 800fd20:	4618      	mov	r0, r3
 800fd22:	f00e fa3d 	bl	801e1a0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	3310      	adds	r3, #16
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f00e fad0 	bl	801e2d0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3314      	adds	r3, #20
 800fd34:	4618      	mov	r0, r3
 800fd36:	f00e faba 	bl	801e2ae <sys_mbox_valid>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d034      	beq.n	800fdaa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fd40:	e01d      	b.n	800fd7e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	f107 020e 	add.w	r2, r7, #14
 800fd48:	4611      	mov	r1, r2
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7ff facc 	bl	800f2e8 <lwip_netconn_is_err_msg>
 800fd50:	4603      	mov	r3, r0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d113      	bne.n	800fd7e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800fd5a:	6978      	ldr	r0, [r7, #20]
 800fd5c:	f7ff ffac 	bl	800fcb8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d007      	beq.n	800fd78 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f003 fcd5 	bl	801371c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	2200      	movs	r2, #0
 800fd76:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800fd78:	6978      	ldr	r0, [r7, #20]
 800fd7a:	f7ff ff53 	bl	800fc24 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	3314      	adds	r3, #20
 800fd82:	f107 0210 	add.w	r2, r7, #16
 800fd86:	4611      	mov	r1, r2
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f00e fa74 	bl	801e276 <sys_arch_mbox_tryfetch>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd94:	d1d5      	bne.n	800fd42 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	3314      	adds	r3, #20
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f00e fa00 	bl	801e1a0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	3314      	adds	r3, #20
 800fda4:	4618      	mov	r0, r3
 800fda6:	f00e fa93 	bl	801e2d0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800fdaa:	bf00      	nop
 800fdac:	3718      	adds	r7, #24
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
	...

0800fdb4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b086      	sub	sp, #24
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d106      	bne.n	800fdd8 <lwip_netconn_do_close_internal+0x24>
 800fdca:	4b87      	ldr	r3, [pc, #540]	; (800ffe8 <lwip_netconn_do_close_internal+0x234>)
 800fdcc:	f240 32a2 	movw	r2, #930	; 0x3a2
 800fdd0:	4986      	ldr	r1, [pc, #536]	; (800ffec <lwip_netconn_do_close_internal+0x238>)
 800fdd2:	4887      	ldr	r0, [pc, #540]	; (800fff0 <lwip_netconn_do_close_internal+0x23c>)
 800fdd4:	f00f fd76 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fde0:	2b10      	cmp	r3, #16
 800fde2:	d006      	beq.n	800fdf2 <lwip_netconn_do_close_internal+0x3e>
 800fde4:	4b80      	ldr	r3, [pc, #512]	; (800ffe8 <lwip_netconn_do_close_internal+0x234>)
 800fde6:	f240 32a3 	movw	r2, #931	; 0x3a3
 800fdea:	4982      	ldr	r1, [pc, #520]	; (800fff4 <lwip_netconn_do_close_internal+0x240>)
 800fdec:	4880      	ldr	r0, [pc, #512]	; (800fff0 <lwip_netconn_do_close_internal+0x23c>)
 800fdee:	f00f fd69 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	785b      	ldrb	r3, [r3, #1]
 800fdf6:	2b04      	cmp	r3, #4
 800fdf8:	d006      	beq.n	800fe08 <lwip_netconn_do_close_internal+0x54>
 800fdfa:	4b7b      	ldr	r3, [pc, #492]	; (800ffe8 <lwip_netconn_do_close_internal+0x234>)
 800fdfc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800fe00:	497d      	ldr	r1, [pc, #500]	; (800fff8 <lwip_netconn_do_close_internal+0x244>)
 800fe02:	487b      	ldr	r0, [pc, #492]	; (800fff0 <lwip_netconn_do_close_internal+0x23c>)
 800fe04:	f00f fd5e 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d106      	bne.n	800fe1e <lwip_netconn_do_close_internal+0x6a>
 800fe10:	4b75      	ldr	r3, [pc, #468]	; (800ffe8 <lwip_netconn_do_close_internal+0x234>)
 800fe12:	f240 32a5 	movw	r2, #933	; 0x3a5
 800fe16:	4979      	ldr	r1, [pc, #484]	; (800fffc <lwip_netconn_do_close_internal+0x248>)
 800fe18:	4875      	ldr	r0, [pc, #468]	; (800fff0 <lwip_netconn_do_close_internal+0x23c>)
 800fe1a:	f00f fd53 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6a1b      	ldr	r3, [r3, #32]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <lwip_netconn_do_close_internal+0x80>
 800fe26:	4b70      	ldr	r3, [pc, #448]	; (800ffe8 <lwip_netconn_do_close_internal+0x234>)
 800fe28:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fe2c:	4974      	ldr	r1, [pc, #464]	; (8010000 <lwip_netconn_do_close_internal+0x24c>)
 800fe2e:	4870      	ldr	r0, [pc, #448]	; (800fff0 <lwip_netconn_do_close_internal+0x23c>)
 800fe30:	f00f fd48 	bl	801f8c4 <iprintf>

  tpcb = conn->pcb.tcp;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6a1b      	ldr	r3, [r3, #32]
 800fe3e:	7a1b      	ldrb	r3, [r3, #8]
 800fe40:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800fe42:	7bfb      	ldrb	r3, [r7, #15]
 800fe44:	f003 0301 	and.w	r3, r3, #1
 800fe48:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800fe4a:	7bfb      	ldrb	r3, [r7, #15]
 800fe4c:	f003 0302 	and.w	r3, r3, #2
 800fe50:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800fe52:	7bfb      	ldrb	r3, [r7, #15]
 800fe54:	2b03      	cmp	r3, #3
 800fe56:	d102      	bne.n	800fe5e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	75bb      	strb	r3, [r7, #22]
 800fe5c:	e01f      	b.n	800fe9e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800fe5e:	7bbb      	ldrb	r3, [r7, #14]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00e      	beq.n	800fe82 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800fe68:	2b05      	cmp	r3, #5
 800fe6a:	d007      	beq.n	800fe7c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800fe70:	2b06      	cmp	r3, #6
 800fe72:	d003      	beq.n	800fe7c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800fe78:	2b08      	cmp	r3, #8
 800fe7a:	d102      	bne.n	800fe82 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	75bb      	strb	r3, [r7, #22]
 800fe80:	e00d      	b.n	800fe9e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800fe82:	7b7b      	ldrb	r3, [r7, #13]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d008      	beq.n	800fe9a <lwip_netconn_do_close_internal+0xe6>
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	8b5b      	ldrh	r3, [r3, #26]
 800fe8c:	f003 0310 	and.w	r3, r3, #16
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d002      	beq.n	800fe9a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800fe94:	2301      	movs	r3, #1
 800fe96:	75bb      	strb	r3, [r7, #22]
 800fe98:	e001      	b.n	800fe9e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800fe9e:	7dbb      	ldrb	r3, [r7, #22]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d003      	beq.n	800feac <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800fea4:	2100      	movs	r1, #0
 800fea6:	6938      	ldr	r0, [r7, #16]
 800fea8:	f004 fce0 	bl	801486c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	7d1b      	ldrb	r3, [r3, #20]
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d104      	bne.n	800febe <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800feb4:	2100      	movs	r1, #0
 800feb6:	6938      	ldr	r0, [r7, #16]
 800feb8:	f004 fd50 	bl	801495c <tcp_accept>
 800febc:	e01d      	b.n	800fefa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800febe:	7bbb      	ldrb	r3, [r7, #14]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d007      	beq.n	800fed4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800fec4:	2100      	movs	r1, #0
 800fec6:	6938      	ldr	r0, [r7, #16]
 800fec8:	f004 fce2 	bl	8014890 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800fecc:	2100      	movs	r1, #0
 800fece:	6938      	ldr	r0, [r7, #16]
 800fed0:	f004 fd44 	bl	801495c <tcp_accept>
    }
    if (shut_tx) {
 800fed4:	7b7b      	ldrb	r3, [r7, #13]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d003      	beq.n	800fee2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800feda:	2100      	movs	r1, #0
 800fedc:	6938      	ldr	r0, [r7, #16]
 800fede:	f004 fcf9 	bl	80148d4 <tcp_sent>
    }
    if (shut_close) {
 800fee2:	7dbb      	ldrb	r3, [r7, #22]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d008      	beq.n	800fefa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800fee8:	2200      	movs	r2, #0
 800feea:	2100      	movs	r1, #0
 800feec:	6938      	ldr	r0, [r7, #16]
 800feee:	f004 fd4d 	bl	801498c <tcp_poll>
      tcp_err(tpcb, NULL);
 800fef2:	2100      	movs	r1, #0
 800fef4:	6938      	ldr	r0, [r7, #16]
 800fef6:	f004 fd0f 	bl	8014918 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800fefa:	7dbb      	ldrb	r3, [r7, #22]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d005      	beq.n	800ff0c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ff00:	6938      	ldr	r0, [r7, #16]
 800ff02:	f003 fac5 	bl	8013490 <tcp_close>
 800ff06:	4603      	mov	r3, r0
 800ff08:	75fb      	strb	r3, [r7, #23]
 800ff0a:	e007      	b.n	800ff1c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ff0c:	7bbb      	ldrb	r3, [r7, #14]
 800ff0e:	7b7a      	ldrb	r2, [r7, #13]
 800ff10:	4619      	mov	r1, r3
 800ff12:	6938      	ldr	r0, [r7, #16]
 800ff14:	f003 fae8 	bl	80134e8 <tcp_shutdown>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ff1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d102      	bne.n	800ff2a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ff24:	2301      	movs	r3, #1
 800ff26:	757b      	strb	r3, [r7, #21]
 800ff28:	e016      	b.n	800ff58 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ff2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff32:	d10f      	bne.n	800ff54 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a1b      	ldr	r3, [r3, #32]
 800ff38:	7a5b      	ldrb	r3, [r3, #9]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d10c      	bne.n	800ff58 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ff42:	7dbb      	ldrb	r3, [r7, #22]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d007      	beq.n	800ff58 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800ff48:	6938      	ldr	r0, [r7, #16]
 800ff4a:	f003 fbe7 	bl	801371c <tcp_abort>
          err = ERR_OK;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	75fb      	strb	r3, [r7, #23]
 800ff52:	e001      	b.n	800ff58 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ff54:	2301      	movs	r3, #1
 800ff56:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ff58:	7d7b      	ldrb	r3, [r7, #21]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d052      	beq.n	8010004 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6a1b      	ldr	r3, [r3, #32]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	330c      	adds	r3, #12
 800ff66:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6a1b      	ldr	r3, [r3, #32]
 800ff6c:	7dfa      	ldrb	r2, [r7, #23]
 800ff6e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ff7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d129      	bne.n	800ffd8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ff84:	7dbb      	ldrb	r3, [r7, #22]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00c      	beq.n	800ffa4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d005      	beq.n	800ffa4 <lwip_netconn_do_close_internal+0x1f0>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	2104      	movs	r1, #4
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	4798      	blx	r3
      }
      if (shut_rx) {
 800ffa4:	7bbb      	ldrb	r3, [r7, #14]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d009      	beq.n	800ffbe <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d005      	beq.n	800ffbe <lwip_netconn_do_close_internal+0x20a>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	2100      	movs	r1, #0
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	4798      	blx	r3
      }
      if (shut_tx) {
 800ffbe:	7b7b      	ldrb	r3, [r7, #13]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d009      	beq.n	800ffd8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d005      	beq.n	800ffd8 <lwip_netconn_do_close_internal+0x224>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	2102      	movs	r1, #2
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ffd8:	78fb      	ldrb	r3, [r7, #3]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d002      	beq.n	800ffe4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800ffde:	68b8      	ldr	r0, [r7, #8]
 800ffe0:	f00e f9dc 	bl	801e39c <sys_sem_signal>
    }
    return ERR_OK;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	e03c      	b.n	8010062 <lwip_netconn_do_close_internal+0x2ae>
 800ffe8:	08021914 	.word	0x08021914
 800ffec:	08021be8 	.word	0x08021be8
 800fff0:	08021958 	.word	0x08021958
 800fff4:	08021bf8 	.word	0x08021bf8
 800fff8:	08021c18 	.word	0x08021c18
 800fffc:	08021c3c 	.word	0x08021c3c
 8010000:	08021a7c 	.word	0x08021a7c
  }
  if (!close_finished) {
 8010004:	7d7b      	ldrb	r3, [r7, #21]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d11e      	bne.n	8010048 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	7d1b      	ldrb	r3, [r3, #20]
 801000e:	2b01      	cmp	r3, #1
 8010010:	d106      	bne.n	8010020 <lwip_netconn_do_close_internal+0x26c>
 8010012:	4b16      	ldr	r3, [pc, #88]	; (801006c <lwip_netconn_do_close_internal+0x2b8>)
 8010014:	f240 4241 	movw	r2, #1089	; 0x441
 8010018:	4915      	ldr	r1, [pc, #84]	; (8010070 <lwip_netconn_do_close_internal+0x2bc>)
 801001a:	4816      	ldr	r0, [pc, #88]	; (8010074 <lwip_netconn_do_close_internal+0x2c0>)
 801001c:	f00f fc52 	bl	801f8c4 <iprintf>
    if (shut_tx) {
 8010020:	7b7b      	ldrb	r3, [r7, #13]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d003      	beq.n	801002e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8010026:	4914      	ldr	r1, [pc, #80]	; (8010078 <lwip_netconn_do_close_internal+0x2c4>)
 8010028:	6938      	ldr	r0, [r7, #16]
 801002a:	f004 fc53 	bl	80148d4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801002e:	2201      	movs	r2, #1
 8010030:	4912      	ldr	r1, [pc, #72]	; (801007c <lwip_netconn_do_close_internal+0x2c8>)
 8010032:	6938      	ldr	r0, [r7, #16]
 8010034:	f004 fcaa 	bl	801498c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8010038:	4911      	ldr	r1, [pc, #68]	; (8010080 <lwip_netconn_do_close_internal+0x2cc>)
 801003a:	6938      	ldr	r0, [r7, #16]
 801003c:	f004 fc6c 	bl	8014918 <tcp_err>
    tcp_arg(tpcb, conn);
 8010040:	6879      	ldr	r1, [r7, #4]
 8010042:	6938      	ldr	r0, [r7, #16]
 8010044:	f004 fc12 	bl	801486c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8010048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d106      	bne.n	801005e <lwip_netconn_do_close_internal+0x2aa>
 8010050:	4b06      	ldr	r3, [pc, #24]	; (801006c <lwip_netconn_do_close_internal+0x2b8>)
 8010052:	f240 424d 	movw	r2, #1101	; 0x44d
 8010056:	490b      	ldr	r1, [pc, #44]	; (8010084 <lwip_netconn_do_close_internal+0x2d0>)
 8010058:	4806      	ldr	r0, [pc, #24]	; (8010074 <lwip_netconn_do_close_internal+0x2c0>)
 801005a:	f00f fc33 	bl	801f8c4 <iprintf>
  return err;
 801005e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3718      	adds	r7, #24
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	08021914 	.word	0x08021914
 8010070:	08021c50 	.word	0x08021c50
 8010074:	08021958 	.word	0x08021958
 8010078:	0800f62d 	.word	0x0800f62d
 801007c:	0800f565 	.word	0x0800f565
 8010080:	0800f6d5 	.word	0x0800f6d5
 8010084:	08021c74 	.word	0x08021c74

08010088 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	785b      	ldrb	r3, [r3, #1]
 801009a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801009c:	7afb      	ldrb	r3, [r7, #11]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d00d      	beq.n	80100be <lwip_netconn_do_delconn+0x36>
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100ac:	2b10      	cmp	r3, #16
 80100ae:	d006      	beq.n	80100be <lwip_netconn_do_delconn+0x36>
 80100b0:	4b60      	ldr	r3, [pc, #384]	; (8010234 <lwip_netconn_do_delconn+0x1ac>)
 80100b2:	f240 425e 	movw	r2, #1118	; 0x45e
 80100b6:	4960      	ldr	r1, [pc, #384]	; (8010238 <lwip_netconn_do_delconn+0x1b0>)
 80100b8:	4860      	ldr	r0, [pc, #384]	; (801023c <lwip_netconn_do_delconn+0x1b4>)
 80100ba:	f00f fc03 	bl	801f8c4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80100be:	7afb      	ldrb	r3, [r7, #11]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d005      	beq.n	80100d0 <lwip_netconn_do_delconn+0x48>
 80100c4:	7afb      	ldrb	r3, [r7, #11]
 80100c6:	2b02      	cmp	r3, #2
 80100c8:	d002      	beq.n	80100d0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80100ca:	7afb      	ldrb	r3, [r7, #11]
 80100cc:	2b03      	cmp	r3, #3
 80100ce:	d109      	bne.n	80100e4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80100d0:	7afb      	ldrb	r3, [r7, #11]
 80100d2:	2b03      	cmp	r3, #3
 80100d4:	d10a      	bne.n	80100ec <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	7f1b      	ldrb	r3, [r3, #28]
 80100dc:	f003 0304 	and.w	r3, r3, #4
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d103      	bne.n	80100ec <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	22fb      	movs	r2, #251	; 0xfb
 80100e8:	711a      	strb	r2, [r3, #4]
 80100ea:	e097      	b.n	801021c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80100ec:	7afb      	ldrb	r3, [r7, #11]
 80100ee:	2b03      	cmp	r3, #3
 80100f0:	d10d      	bne.n	801010e <lwip_netconn_do_delconn+0x86>
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	7f1b      	ldrb	r3, [r3, #28]
 80100f8:	f003 0304 	and.w	r3, r3, #4
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d106      	bne.n	801010e <lwip_netconn_do_delconn+0x86>
 8010100:	4b4c      	ldr	r3, [pc, #304]	; (8010234 <lwip_netconn_do_delconn+0x1ac>)
 8010102:	f240 427a 	movw	r2, #1146	; 0x47a
 8010106:	494e      	ldr	r1, [pc, #312]	; (8010240 <lwip_netconn_do_delconn+0x1b8>)
 8010108:	484c      	ldr	r0, [pc, #304]	; (801023c <lwip_netconn_do_delconn+0x1b4>)
 801010a:	f00f fbdb 	bl	801f8c4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2200      	movs	r2, #0
 8010112:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4618      	mov	r0, r3
 801011a:	f7ff fdcd 	bl	800fcb8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d05f      	beq.n	80101e8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010132:	2b10      	cmp	r3, #16
 8010134:	d00d      	beq.n	8010152 <lwip_netconn_do_delconn+0xca>
 8010136:	2b20      	cmp	r3, #32
 8010138:	d151      	bne.n	80101de <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	2200      	movs	r2, #0
 8010142:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	4618      	mov	r0, r3
 801014c:	f009 fdf6 	bl	8019d3c <udp_remove>
          break;
 8010150:	e046      	b.n	80101e0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	6a1b      	ldr	r3, [r3, #32]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d006      	beq.n	801016a <lwip_netconn_do_delconn+0xe2>
 801015c:	4b35      	ldr	r3, [pc, #212]	; (8010234 <lwip_netconn_do_delconn+0x1ac>)
 801015e:	f240 4294 	movw	r2, #1172	; 0x494
 8010162:	4938      	ldr	r1, [pc, #224]	; (8010244 <lwip_netconn_do_delconn+0x1bc>)
 8010164:	4835      	ldr	r0, [pc, #212]	; (801023c <lwip_netconn_do_delconn+0x1b4>)
 8010166:	f00f fbad 	bl	801f8c4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2204      	movs	r2, #4
 8010170:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2203      	movs	r2, #3
 8010176:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2100      	movs	r1, #0
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff fe14 	bl	800fdb4 <lwip_netconn_do_close_internal>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d04b      	beq.n	801022a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	785b      	ldrb	r3, [r3, #1]
 8010198:	2b04      	cmp	r3, #4
 801019a:	d006      	beq.n	80101aa <lwip_netconn_do_delconn+0x122>
 801019c:	4b25      	ldr	r3, [pc, #148]	; (8010234 <lwip_netconn_do_delconn+0x1ac>)
 801019e:	f240 429a 	movw	r2, #1178	; 0x49a
 80101a2:	4929      	ldr	r1, [pc, #164]	; (8010248 <lwip_netconn_do_delconn+0x1c0>)
 80101a4:	4825      	ldr	r0, [pc, #148]	; (801023c <lwip_netconn_do_delconn+0x1b4>)
 80101a6:	f00f fb8d 	bl	801f8c4 <iprintf>
            UNLOCK_TCPIP_CORE();
 80101aa:	4828      	ldr	r0, [pc, #160]	; (801024c <lwip_netconn_do_delconn+0x1c4>)
 80101ac:	f00e f967 	bl	801e47e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	330c      	adds	r3, #12
 80101b6:	2100      	movs	r1, #0
 80101b8:	4618      	mov	r0, r3
 80101ba:	f00e f8be 	bl	801e33a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80101be:	4823      	ldr	r0, [pc, #140]	; (801024c <lwip_netconn_do_delconn+0x1c4>)
 80101c0:	f00e f94e 	bl	801e460 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	785b      	ldrb	r3, [r3, #1]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d02d      	beq.n	801022a <lwip_netconn_do_delconn+0x1a2>
 80101ce:	4b19      	ldr	r3, [pc, #100]	; (8010234 <lwip_netconn_do_delconn+0x1ac>)
 80101d0:	f240 429e 	movw	r2, #1182	; 0x49e
 80101d4:	491c      	ldr	r1, [pc, #112]	; (8010248 <lwip_netconn_do_delconn+0x1c0>)
 80101d6:	4819      	ldr	r0, [pc, #100]	; (801023c <lwip_netconn_do_delconn+0x1b4>)
 80101d8:	f00f fb74 	bl	801f8c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80101dc:	e025      	b.n	801022a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80101de:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2200      	movs	r2, #0
 80101e6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d007      	beq.n	8010202 <lwip_netconn_do_delconn+0x17a>
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	6810      	ldr	r0, [r2, #0]
 80101fc:	2200      	movs	r2, #0
 80101fe:	2100      	movs	r1, #0
 8010200:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010208:	2b00      	cmp	r3, #0
 801020a:	d007      	beq.n	801021c <lwip_netconn_do_delconn+0x194>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010212:	68fa      	ldr	r2, [r7, #12]
 8010214:	6810      	ldr	r0, [r2, #0]
 8010216:	2200      	movs	r2, #0
 8010218:	2102      	movs	r1, #2
 801021a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	330c      	adds	r3, #12
 8010222:	4618      	mov	r0, r3
 8010224:	f00e f8d4 	bl	801e3d0 <sys_sem_valid>
 8010228:	e000      	b.n	801022c <lwip_netconn_do_delconn+0x1a4>
          return;
 801022a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	08021914 	.word	0x08021914
 8010238:	08021c84 	.word	0x08021c84
 801023c:	08021958 	.word	0x08021958
 8010240:	08021c98 	.word	0x08021c98
 8010244:	08021cb8 	.word	0x08021cb8
 8010248:	08021cd4 	.word	0x08021cd4
 801024c:	2000ca50 	.word	0x2000ca50

08010250 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d025      	beq.n	80102b2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010270:	2b10      	cmp	r3, #16
 8010272:	d00e      	beq.n	8010292 <lwip_netconn_do_bind+0x42>
 8010274:	2b20      	cmp	r3, #32
 8010276:	d119      	bne.n	80102ac <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	6858      	ldr	r0, [r3, #4]
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	6899      	ldr	r1, [r3, #8]
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	899b      	ldrh	r3, [r3, #12]
 8010286:	461a      	mov	r2, r3
 8010288:	f009 fc28 	bl	8019adc <udp_bind>
 801028c:	4603      	mov	r3, r0
 801028e:	73fb      	strb	r3, [r7, #15]
        break;
 8010290:	e011      	b.n	80102b6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	6858      	ldr	r0, [r3, #4]
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	6899      	ldr	r1, [r3, #8]
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	899b      	ldrh	r3, [r3, #12]
 80102a0:	461a      	mov	r2, r3
 80102a2:	f003 fa47 	bl	8013734 <tcp_bind>
 80102a6:	4603      	mov	r3, r0
 80102a8:	73fb      	strb	r3, [r7, #15]
        break;
 80102aa:	e004      	b.n	80102b6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80102ac:	23fa      	movs	r3, #250	; 0xfa
 80102ae:	73fb      	strb	r3, [r7, #15]
        break;
 80102b0:	e001      	b.n	80102b6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80102b2:	23fa      	movs	r3, #250	; 0xfa
 80102b4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	7bfa      	ldrb	r2, [r7, #15]
 80102ba:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80102bc:	bf00      	nop
 80102be:	3710      	adds	r7, #16
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b086      	sub	sp, #24
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d07f      	beq.n	80103da <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102e4:	2b10      	cmp	r3, #16
 80102e6:	d175      	bne.n	80103d4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	785b      	ldrb	r3, [r3, #1]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d165      	bne.n	80103be <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	7d1b      	ldrb	r3, [r3, #20]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d002      	beq.n	8010304 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80102fe:	23fa      	movs	r3, #250	; 0xfa
 8010300:	72fb      	strb	r3, [r7, #11]
 8010302:	e06c      	b.n	80103de <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8010304:	23ff      	movs	r3, #255	; 0xff
 8010306:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	f107 020b 	add.w	r2, r7, #11
 8010312:	7cf9      	ldrb	r1, [r7, #19]
 8010314:	4618      	mov	r0, r3
 8010316:	f003 fadf 	bl	80138d8 <tcp_listen_with_backlog_and_err>
 801031a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d05d      	beq.n	80103de <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	3310      	adds	r3, #16
 8010328:	4618      	mov	r0, r3
 801032a:	f00d ffc0 	bl	801e2ae <sys_mbox_valid>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00b      	beq.n	801034c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	3310      	adds	r3, #16
 801033a:	4618      	mov	r0, r3
 801033c:	f00d ff30 	bl	801e1a0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3310      	adds	r3, #16
 8010346:	4618      	mov	r0, r3
 8010348:	f00d ffc2 	bl	801e2d0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 801034c:	2300      	movs	r3, #0
 801034e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	3314      	adds	r3, #20
 8010356:	4618      	mov	r0, r3
 8010358:	f00d ffa9 	bl	801e2ae <sys_mbox_valid>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d108      	bne.n	8010374 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	3314      	adds	r3, #20
 8010368:	2106      	movs	r1, #6
 801036a:	4618      	mov	r0, r3
 801036c:	f00d fef6 	bl	801e15c <sys_mbox_new>
 8010370:	4603      	mov	r3, r0
 8010372:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8010374:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d118      	bne.n	80103ae <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	2202      	movs	r2, #2
 8010382:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801038c:	697b      	ldr	r3, [r7, #20]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	685a      	ldr	r2, [r3, #4]
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4619      	mov	r1, r3
 8010398:	4610      	mov	r0, r2
 801039a:	f004 fa67 	bl	801486c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	4912      	ldr	r1, [pc, #72]	; (80103f0 <lwip_netconn_do_listen+0x12c>)
 80103a6:	4618      	mov	r0, r3
 80103a8:	f004 fad8 	bl	801495c <tcp_accept>
 80103ac:	e017      	b.n	80103de <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80103ae:	68f8      	ldr	r0, [r7, #12]
 80103b0:	f003 f86e 	bl	8013490 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2200      	movs	r2, #0
 80103ba:	605a      	str	r2, [r3, #4]
 80103bc:	e00f      	b.n	80103de <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	785b      	ldrb	r3, [r3, #1]
 80103c4:	2b02      	cmp	r3, #2
 80103c6:	d102      	bne.n	80103ce <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	72fb      	strb	r3, [r7, #11]
 80103cc:	e007      	b.n	80103de <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80103ce:	23f5      	movs	r3, #245	; 0xf5
 80103d0:	72fb      	strb	r3, [r7, #11]
 80103d2:	e004      	b.n	80103de <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80103d4:	23f0      	movs	r3, #240	; 0xf0
 80103d6:	72fb      	strb	r3, [r7, #11]
 80103d8:	e001      	b.n	80103de <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80103da:	23f5      	movs	r3, #245	; 0xf5
 80103dc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80103de:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80103e6:	bf00      	nop
 80103e8:	3718      	adds	r7, #24
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	0800f8d1 	.word	0x0800f8d1

080103f4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b086      	sub	sp, #24
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	2200      	movs	r2, #0
 8010404:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d022      	beq.n	8010456 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801041a:	2b10      	cmp	r3, #16
 801041c:	d11b      	bne.n	8010456 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801042a:	d202      	bcs.n	8010432 <lwip_netconn_do_recv+0x3e>
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	b29b      	uxth	r3, r3
 8010430:	e001      	b.n	8010436 <lwip_netconn_do_recv+0x42>
 8010432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010436:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	89fa      	ldrh	r2, [r7, #14]
 8010440:	4611      	mov	r1, r2
 8010442:	4618      	mov	r0, r3
 8010444:	f003 fb4c 	bl	8013ae0 <tcp_recved>
        remaining -= recved;
 8010448:	89fb      	ldrh	r3, [r7, #14]
 801044a:	697a      	ldr	r2, [r7, #20]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d1e6      	bne.n	8010424 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010456:	bf00      	nop
 8010458:	3718      	adds	r7, #24
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
	...

08010460 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b088      	sub	sp, #32
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801046c:	2300      	movs	r3, #0
 801046e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d106      	bne.n	8010484 <lwip_netconn_do_writemore+0x24>
 8010476:	4b96      	ldr	r3, [pc, #600]	; (80106d0 <lwip_netconn_do_writemore+0x270>)
 8010478:	f240 6273 	movw	r2, #1651	; 0x673
 801047c:	4995      	ldr	r1, [pc, #596]	; (80106d4 <lwip_netconn_do_writemore+0x274>)
 801047e:	4896      	ldr	r0, [pc, #600]	; (80106d8 <lwip_netconn_do_writemore+0x278>)
 8010480:	f00f fa20 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	785b      	ldrb	r3, [r3, #1]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d006      	beq.n	801049a <lwip_netconn_do_writemore+0x3a>
 801048c:	4b90      	ldr	r3, [pc, #576]	; (80106d0 <lwip_netconn_do_writemore+0x270>)
 801048e:	f240 6274 	movw	r2, #1652	; 0x674
 8010492:	4992      	ldr	r1, [pc, #584]	; (80106dc <lwip_netconn_do_writemore+0x27c>)
 8010494:	4890      	ldr	r0, [pc, #576]	; (80106d8 <lwip_netconn_do_writemore+0x278>)
 8010496:	f00f fa15 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a1b      	ldr	r3, [r3, #32]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d106      	bne.n	80104b0 <lwip_netconn_do_writemore+0x50>
 80104a2:	4b8b      	ldr	r3, [pc, #556]	; (80106d0 <lwip_netconn_do_writemore+0x270>)
 80104a4:	f240 6275 	movw	r2, #1653	; 0x675
 80104a8:	498d      	ldr	r1, [pc, #564]	; (80106e0 <lwip_netconn_do_writemore+0x280>)
 80104aa:	488b      	ldr	r0, [pc, #556]	; (80106d8 <lwip_netconn_do_writemore+0x278>)
 80104ac:	f00f fa0a 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d106      	bne.n	80104c6 <lwip_netconn_do_writemore+0x66>
 80104b8:	4b85      	ldr	r3, [pc, #532]	; (80106d0 <lwip_netconn_do_writemore+0x270>)
 80104ba:	f240 6276 	movw	r2, #1654	; 0x676
 80104be:	4989      	ldr	r1, [pc, #548]	; (80106e4 <lwip_netconn_do_writemore+0x284>)
 80104c0:	4885      	ldr	r0, [pc, #532]	; (80106d8 <lwip_netconn_do_writemore+0x278>)
 80104c2:	f00f f9ff 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6a1b      	ldr	r3, [r3, #32]
 80104ca:	699a      	ldr	r2, [r3, #24]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6a1b      	ldr	r3, [r3, #32]
 80104d0:	695b      	ldr	r3, [r3, #20]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d306      	bcc.n	80104e4 <lwip_netconn_do_writemore+0x84>
 80104d6:	4b7e      	ldr	r3, [pc, #504]	; (80106d0 <lwip_netconn_do_writemore+0x270>)
 80104d8:	f240 6277 	movw	r2, #1655	; 0x677
 80104dc:	4982      	ldr	r1, [pc, #520]	; (80106e8 <lwip_netconn_do_writemore+0x288>)
 80104de:	487e      	ldr	r0, [pc, #504]	; (80106d8 <lwip_netconn_do_writemore+0x278>)
 80104e0:	f00f f9f0 	bl	801f8c4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6a1b      	ldr	r3, [r3, #32]
 80104e8:	899b      	ldrh	r3, [r3, #12]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d106      	bne.n	80104fc <lwip_netconn_do_writemore+0x9c>
 80104ee:	4b78      	ldr	r3, [pc, #480]	; (80106d0 <lwip_netconn_do_writemore+0x270>)
 80104f0:	f240 6279 	movw	r2, #1657	; 0x679
 80104f4:	497d      	ldr	r1, [pc, #500]	; (80106ec <lwip_netconn_do_writemore+0x28c>)
 80104f6:	4878      	ldr	r0, [pc, #480]	; (80106d8 <lwip_netconn_do_writemore+0x278>)
 80104f8:	f00f f9e4 	bl	801f8c4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6a1b      	ldr	r3, [r3, #32]
 8010500:	7f1b      	ldrb	r3, [r3, #28]
 8010502:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	7f1b      	ldrb	r3, [r3, #28]
 8010508:	f003 0302 	and.w	r3, r3, #2
 801050c:	2b00      	cmp	r3, #0
 801050e:	d104      	bne.n	801051a <lwip_netconn_do_writemore+0xba>
 8010510:	7ebb      	ldrb	r3, [r7, #26]
 8010512:	f003 0304 	and.w	r3, r3, #4
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <lwip_netconn_do_writemore+0xbe>
 801051a:	2301      	movs	r3, #1
 801051c:	e000      	b.n	8010520 <lwip_netconn_do_writemore+0xc0>
 801051e:	2300      	movs	r3, #0
 8010520:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a1b      	ldr	r3, [r3, #32]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6a1b      	ldr	r3, [r3, #32]
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	4413      	add	r3, r2
 8010532:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6a1b      	ldr	r3, [r3, #32]
 8010538:	689b      	ldr	r3, [r3, #8]
 801053a:	685a      	ldr	r2, [r3, #4]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6a1b      	ldr	r3, [r3, #32]
 8010540:	691b      	ldr	r3, [r3, #16]
 8010542:	1ad3      	subs	r3, r2, r3
 8010544:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801054c:	d307      	bcc.n	801055e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801054e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010552:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010554:	7ebb      	ldrb	r3, [r7, #26]
 8010556:	f043 0302 	orr.w	r3, r3, #2
 801055a:	76bb      	strb	r3, [r7, #26]
 801055c:	e001      	b.n	8010562 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	685b      	ldr	r3, [r3, #4]
 8010566:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801056a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801056c:	89fa      	ldrh	r2, [r7, #14]
 801056e:	8bbb      	ldrh	r3, [r7, #28]
 8010570:	429a      	cmp	r2, r3
 8010572:	d216      	bcs.n	80105a2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010574:	89fb      	ldrh	r3, [r7, #14]
 8010576:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010578:	7e3b      	ldrb	r3, [r7, #24]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d00d      	beq.n	801059a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801057e:	8bbb      	ldrh	r3, [r7, #28]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d10e      	bne.n	80105a2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6a1b      	ldr	r3, [r3, #32]
 8010588:	699b      	ldr	r3, [r3, #24]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d102      	bne.n	8010594 <lwip_netconn_do_writemore+0x134>
 801058e:	f06f 0306 	mvn.w	r3, #6
 8010592:	e000      	b.n	8010596 <lwip_netconn_do_writemore+0x136>
 8010594:	2300      	movs	r3, #0
 8010596:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010598:	e07d      	b.n	8010696 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801059a:	7ebb      	ldrb	r3, [r7, #26]
 801059c:	f043 0302 	orr.w	r3, r3, #2
 80105a0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6a1b      	ldr	r3, [r3, #32]
 80105a6:	691a      	ldr	r2, [r3, #16]
 80105a8:	8bbb      	ldrh	r3, [r7, #28]
 80105aa:	441a      	add	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6a1b      	ldr	r3, [r3, #32]
 80105b0:	689b      	ldr	r3, [r3, #8]
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d906      	bls.n	80105c6 <lwip_netconn_do_writemore+0x166>
 80105b8:	4b45      	ldr	r3, [pc, #276]	; (80106d0 <lwip_netconn_do_writemore+0x270>)
 80105ba:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80105be:	494c      	ldr	r1, [pc, #304]	; (80106f0 <lwip_netconn_do_writemore+0x290>)
 80105c0:	4845      	ldr	r0, [pc, #276]	; (80106d8 <lwip_netconn_do_writemore+0x278>)
 80105c2:	f00f f97f 	bl	801f8c4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80105c6:	8bbb      	ldrh	r3, [r7, #28]
 80105c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d103      	bne.n	80105d8 <lwip_netconn_do_writemore+0x178>
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105d6:	d209      	bcs.n	80105ec <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80105dc:	8bba      	ldrh	r2, [r7, #28]
 80105de:	429a      	cmp	r2, r3
 80105e0:	d10b      	bne.n	80105fa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6a1b      	ldr	r3, [r3, #32]
 80105e6:	899b      	ldrh	r3, [r3, #12]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d906      	bls.n	80105fa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80105ec:	2301      	movs	r3, #1
 80105ee:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80105f0:	7ebb      	ldrb	r3, [r7, #26]
 80105f2:	f043 0302 	orr.w	r3, r3, #2
 80105f6:	76bb      	strb	r3, [r7, #26]
 80105f8:	e001      	b.n	80105fe <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80105fa:	2300      	movs	r3, #0
 80105fc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6858      	ldr	r0, [r3, #4]
 8010602:	7ebb      	ldrb	r3, [r7, #26]
 8010604:	8bba      	ldrh	r2, [r7, #28]
 8010606:	6979      	ldr	r1, [r7, #20]
 8010608:	f007 f872 	bl	80176f0 <tcp_write>
 801060c:	4603      	mov	r3, r0
 801060e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010610:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d12c      	bne.n	8010672 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6a1b      	ldr	r3, [r3, #32]
 801061c:	6999      	ldr	r1, [r3, #24]
 801061e:	8bba      	ldrh	r2, [r7, #28]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6a1b      	ldr	r3, [r3, #32]
 8010624:	440a      	add	r2, r1
 8010626:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6a1b      	ldr	r3, [r3, #32]
 801062c:	6919      	ldr	r1, [r3, #16]
 801062e:	8bba      	ldrh	r2, [r7, #28]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6a1b      	ldr	r3, [r3, #32]
 8010634:	440a      	add	r2, r1
 8010636:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6a1b      	ldr	r3, [r3, #32]
 801063c:	691a      	ldr	r2, [r3, #16]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6a1b      	ldr	r3, [r3, #32]
 8010642:	689b      	ldr	r3, [r3, #8]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	429a      	cmp	r2, r3
 8010648:	d113      	bne.n	8010672 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6a1b      	ldr	r3, [r3, #32]
 801064e:	899a      	ldrh	r2, [r3, #12]
 8010650:	3a01      	subs	r2, #1
 8010652:	b292      	uxth	r2, r2
 8010654:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6a1b      	ldr	r3, [r3, #32]
 801065a:	899b      	ldrh	r3, [r3, #12]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d008      	beq.n	8010672 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6a1b      	ldr	r3, [r3, #32]
 8010664:	689a      	ldr	r2, [r3, #8]
 8010666:	3208      	adds	r2, #8
 8010668:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6a1b      	ldr	r3, [r3, #32]
 801066e:	2200      	movs	r2, #0
 8010670:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010672:	7e7b      	ldrb	r3, [r7, #25]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d004      	beq.n	8010682 <lwip_netconn_do_writemore+0x222>
 8010678:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801067c:	2b00      	cmp	r3, #0
 801067e:	f43f af50 	beq.w	8010522 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010682:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d004      	beq.n	8010694 <lwip_netconn_do_writemore+0x234>
 801068a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801068e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010692:	d146      	bne.n	8010722 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010694:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010696:	7e3b      	ldrb	r3, [r7, #24]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d02b      	beq.n	80106f4 <lwip_netconn_do_writemore+0x294>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6a1b      	ldr	r3, [r3, #32]
 80106a0:	699a      	ldr	r2, [r3, #24]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6a1b      	ldr	r3, [r3, #32]
 80106a6:	695b      	ldr	r3, [r3, #20]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d223      	bcs.n	80106f4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d005      	beq.n	80106c0 <lwip_netconn_do_writemore+0x260>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b8:	2200      	movs	r2, #0
 80106ba:	2103      	movs	r1, #3
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	7f1b      	ldrb	r3, [r3, #28]
 80106c4:	f043 0310 	orr.w	r3, r3, #16
 80106c8:	b2da      	uxtb	r2, r3
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	771a      	strb	r2, [r3, #28]
 80106ce:	e028      	b.n	8010722 <lwip_netconn_do_writemore+0x2c2>
 80106d0:	08021914 	.word	0x08021914
 80106d4:	08021a6c 	.word	0x08021a6c
 80106d8:	08021958 	.word	0x08021958
 80106dc:	08021d74 	.word	0x08021d74
 80106e0:	08021a7c 	.word	0x08021a7c
 80106e4:	08021d94 	.word	0x08021d94
 80106e8:	08021dac 	.word	0x08021dac
 80106ec:	08021dec 	.word	0x08021dec
 80106f0:	08021e14 	.word	0x08021e14
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80106fc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8010700:	d305      	bcc.n	801070e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801070a:	2b04      	cmp	r3, #4
 801070c:	d909      	bls.n	8010722 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010712:	2b00      	cmp	r3, #0
 8010714:	d005      	beq.n	8010722 <lwip_netconn_do_writemore+0x2c2>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801071a:	2200      	movs	r2, #0
 801071c:	2103      	movs	r1, #3
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010722:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d11d      	bne.n	8010766 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	699a      	ldr	r2, [r3, #24]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6a1b      	ldr	r3, [r3, #32]
 8010734:	695b      	ldr	r3, [r3, #20]
 8010736:	429a      	cmp	r2, r3
 8010738:	d002      	beq.n	8010740 <lwip_netconn_do_writemore+0x2e0>
 801073a:	7e3b      	ldrb	r3, [r7, #24]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d001      	beq.n	8010744 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010740:	2301      	movs	r3, #1
 8010742:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	4618      	mov	r0, r3
 801074a:	f007 fdbb 	bl	80182c4 <tcp_output>
 801074e:	4603      	mov	r3, r0
 8010750:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010752:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010756:	f113 0f04 	cmn.w	r3, #4
 801075a:	d12c      	bne.n	80107b6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801075c:	7b3b      	ldrb	r3, [r7, #12]
 801075e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010760:	2301      	movs	r3, #1
 8010762:	76fb      	strb	r3, [r7, #27]
 8010764:	e027      	b.n	80107b6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010766:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801076a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801076e:	d120      	bne.n	80107b2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	4618      	mov	r0, r3
 8010776:	f007 fda5 	bl	80182c4 <tcp_output>
 801077a:	4603      	mov	r3, r0
 801077c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801077e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010782:	f113 0f04 	cmn.w	r3, #4
 8010786:	d104      	bne.n	8010792 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010788:	7b7b      	ldrb	r3, [r7, #13]
 801078a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801078c:	2301      	movs	r3, #1
 801078e:	76fb      	strb	r3, [r7, #27]
 8010790:	e011      	b.n	80107b6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010792:	7e3b      	ldrb	r3, [r7, #24]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d00e      	beq.n	80107b6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6a1b      	ldr	r3, [r3, #32]
 801079c:	699b      	ldr	r3, [r3, #24]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d102      	bne.n	80107a8 <lwip_netconn_do_writemore+0x348>
 80107a2:	f06f 0306 	mvn.w	r3, #6
 80107a6:	e000      	b.n	80107aa <lwip_netconn_do_writemore+0x34a>
 80107a8:	2300      	movs	r3, #0
 80107aa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80107ac:	2301      	movs	r3, #1
 80107ae:	76fb      	strb	r3, [r7, #27]
 80107b0:	e001      	b.n	80107b6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80107b2:	2301      	movs	r3, #1
 80107b4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80107b6:	7efb      	ldrb	r3, [r7, #27]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d015      	beq.n	80107e8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6a1b      	ldr	r3, [r3, #32]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	330c      	adds	r3, #12
 80107c4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a1b      	ldr	r3, [r3, #32]
 80107ca:	7ffa      	ldrb	r2, [r7, #31]
 80107cc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2200      	movs	r2, #0
 80107d8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80107da:	78fb      	ldrb	r3, [r7, #3]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d006      	beq.n	80107ee <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80107e0:	68b8      	ldr	r0, [r7, #8]
 80107e2:	f00d fddb 	bl	801e39c <sys_sem_signal>
 80107e6:	e002      	b.n	80107ee <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80107e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107ec:	e000      	b.n	80107f0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80107ee:	2300      	movs	r3, #0
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3720      	adds	r7, #32
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4618      	mov	r0, r3
 801080a:	f7fe fd1c 	bl	800f246 <netconn_err>
 801080e:	4603      	mov	r3, r0
 8010810:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d166      	bne.n	80108e8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010824:	2b10      	cmp	r3, #16
 8010826:	d15d      	bne.n	80108e4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	785b      	ldrb	r3, [r3, #1]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010832:	23fb      	movs	r3, #251	; 0xfb
 8010834:	73fb      	strb	r3, [r7, #15]
 8010836:	e057      	b.n	80108e8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d04d      	beq.n	80108de <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	2201      	movs	r2, #1
 8010848:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	6a1b      	ldr	r3, [r3, #32]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d006      	beq.n	8010862 <lwip_netconn_do_write+0x6a>
 8010854:	4b28      	ldr	r3, [pc, #160]	; (80108f8 <lwip_netconn_do_write+0x100>)
 8010856:	f240 7223 	movw	r2, #1827	; 0x723
 801085a:	4928      	ldr	r1, [pc, #160]	; (80108fc <lwip_netconn_do_write+0x104>)
 801085c:	4828      	ldr	r0, [pc, #160]	; (8010900 <lwip_netconn_do_write+0x108>)
 801085e:	f00f f831 	bl	801f8c4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	695b      	ldr	r3, [r3, #20]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d106      	bne.n	8010878 <lwip_netconn_do_write+0x80>
 801086a:	4b23      	ldr	r3, [pc, #140]	; (80108f8 <lwip_netconn_do_write+0x100>)
 801086c:	f240 7224 	movw	r2, #1828	; 0x724
 8010870:	4924      	ldr	r1, [pc, #144]	; (8010904 <lwip_netconn_do_write+0x10c>)
 8010872:	4823      	ldr	r0, [pc, #140]	; (8010900 <lwip_netconn_do_write+0x108>)
 8010874:	f00f f826 	bl	801f8c4 <iprintf>
        msg->conn->current_msg = msg;
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	68ba      	ldr	r2, [r7, #8]
 801087e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2100      	movs	r1, #0
 8010886:	4618      	mov	r0, r3
 8010888:	f7ff fdea 	bl	8010460 <lwip_netconn_do_writemore>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d02e      	beq.n	80108f0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	785b      	ldrb	r3, [r3, #1]
 8010898:	2b01      	cmp	r3, #1
 801089a:	d006      	beq.n	80108aa <lwip_netconn_do_write+0xb2>
 801089c:	4b16      	ldr	r3, [pc, #88]	; (80108f8 <lwip_netconn_do_write+0x100>)
 801089e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80108a2:	4919      	ldr	r1, [pc, #100]	; (8010908 <lwip_netconn_do_write+0x110>)
 80108a4:	4816      	ldr	r0, [pc, #88]	; (8010900 <lwip_netconn_do_write+0x108>)
 80108a6:	f00f f80d 	bl	801f8c4 <iprintf>
          UNLOCK_TCPIP_CORE();
 80108aa:	4818      	ldr	r0, [pc, #96]	; (801090c <lwip_netconn_do_write+0x114>)
 80108ac:	f00d fde7 	bl	801e47e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	330c      	adds	r3, #12
 80108b6:	2100      	movs	r1, #0
 80108b8:	4618      	mov	r0, r3
 80108ba:	f00d fd3e 	bl	801e33a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80108be:	4813      	ldr	r0, [pc, #76]	; (801090c <lwip_netconn_do_write+0x114>)
 80108c0:	f00d fdce 	bl	801e460 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	785b      	ldrb	r3, [r3, #1]
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d110      	bne.n	80108f0 <lwip_netconn_do_write+0xf8>
 80108ce:	4b0a      	ldr	r3, [pc, #40]	; (80108f8 <lwip_netconn_do_write+0x100>)
 80108d0:	f240 722c 	movw	r2, #1836	; 0x72c
 80108d4:	490c      	ldr	r1, [pc, #48]	; (8010908 <lwip_netconn_do_write+0x110>)
 80108d6:	480a      	ldr	r0, [pc, #40]	; (8010900 <lwip_netconn_do_write+0x108>)
 80108d8:	f00e fff4 	bl	801f8c4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80108dc:	e008      	b.n	80108f0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80108de:	23f5      	movs	r3, #245	; 0xf5
 80108e0:	73fb      	strb	r3, [r7, #15]
 80108e2:	e001      	b.n	80108e8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80108e4:	23fa      	movs	r3, #250	; 0xfa
 80108e6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	7bfa      	ldrb	r2, [r7, #15]
 80108ec:	711a      	strb	r2, [r3, #4]
 80108ee:	e000      	b.n	80108f2 <lwip_netconn_do_write+0xfa>
        return;
 80108f0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80108f2:	3710      	adds	r7, #16
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	08021914 	.word	0x08021914
 80108fc:	08021cb8 	.word	0x08021cb8
 8010900:	08021958 	.word	0x08021958
 8010904:	08021e40 	.word	0x08021e40
 8010908:	08021cd4 	.word	0x08021cd4
 801090c:	2000ca50 	.word	0x2000ca50

08010910 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	785b      	ldrb	r3, [r3, #1]
 8010922:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d069      	beq.n	8010a02 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010938:	2b10      	cmp	r3, #16
 801093a:	d162      	bne.n	8010a02 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010940:	2b03      	cmp	r3, #3
 8010942:	d002      	beq.n	801094a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010944:	7afb      	ldrb	r3, [r7, #11]
 8010946:	2b02      	cmp	r3, #2
 8010948:	d05b      	beq.n	8010a02 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801094a:	7afb      	ldrb	r3, [r7, #11]
 801094c:	2b03      	cmp	r3, #3
 801094e:	d103      	bne.n	8010958 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	22f5      	movs	r2, #245	; 0xf5
 8010954:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010956:	e059      	b.n	8010a0c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010958:	7afb      	ldrb	r3, [r7, #11]
 801095a:	2b01      	cmp	r3, #1
 801095c:	d103      	bne.n	8010966 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	22fb      	movs	r2, #251	; 0xfb
 8010962:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010964:	e052      	b.n	8010a0c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	7a1b      	ldrb	r3, [r3, #8]
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	2b00      	cmp	r3, #0
 8010970:	d004      	beq.n	801097c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	4618      	mov	r0, r3
 8010978:	f7ff f99e 	bl	800fcb8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6a1b      	ldr	r3, [r3, #32]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d006      	beq.n	8010994 <lwip_netconn_do_close+0x84>
 8010986:	4b23      	ldr	r3, [pc, #140]	; (8010a14 <lwip_netconn_do_close+0x104>)
 8010988:	f240 72bd 	movw	r2, #1981	; 0x7bd
 801098c:	4922      	ldr	r1, [pc, #136]	; (8010a18 <lwip_netconn_do_close+0x108>)
 801098e:	4823      	ldr	r0, [pc, #140]	; (8010a1c <lwip_netconn_do_close+0x10c>)
 8010990:	f00e ff98 	bl	801f8c4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	2204      	movs	r2, #4
 801099a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68fa      	ldr	r2, [r7, #12]
 80109a2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	2100      	movs	r1, #0
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7ff fa02 	bl	800fdb4 <lwip_netconn_do_close_internal>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d029      	beq.n	8010a0a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	785b      	ldrb	r3, [r3, #1]
 80109bc:	2b04      	cmp	r3, #4
 80109be:	d006      	beq.n	80109ce <lwip_netconn_do_close+0xbe>
 80109c0:	4b14      	ldr	r3, [pc, #80]	; (8010a14 <lwip_netconn_do_close+0x104>)
 80109c2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80109c6:	4916      	ldr	r1, [pc, #88]	; (8010a20 <lwip_netconn_do_close+0x110>)
 80109c8:	4814      	ldr	r0, [pc, #80]	; (8010a1c <lwip_netconn_do_close+0x10c>)
 80109ca:	f00e ff7b 	bl	801f8c4 <iprintf>
        UNLOCK_TCPIP_CORE();
 80109ce:	4815      	ldr	r0, [pc, #84]	; (8010a24 <lwip_netconn_do_close+0x114>)
 80109d0:	f00d fd55 	bl	801e47e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	330c      	adds	r3, #12
 80109da:	2100      	movs	r1, #0
 80109dc:	4618      	mov	r0, r3
 80109de:	f00d fcac 	bl	801e33a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80109e2:	4810      	ldr	r0, [pc, #64]	; (8010a24 <lwip_netconn_do_close+0x114>)
 80109e4:	f00d fd3c 	bl	801e460 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	785b      	ldrb	r3, [r3, #1]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d00b      	beq.n	8010a0a <lwip_netconn_do_close+0xfa>
 80109f2:	4b08      	ldr	r3, [pc, #32]	; (8010a14 <lwip_netconn_do_close+0x104>)
 80109f4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80109f8:	4909      	ldr	r1, [pc, #36]	; (8010a20 <lwip_netconn_do_close+0x110>)
 80109fa:	4808      	ldr	r0, [pc, #32]	; (8010a1c <lwip_netconn_do_close+0x10c>)
 80109fc:	f00e ff62 	bl	801f8c4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010a00:	e003      	b.n	8010a0a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	22f5      	movs	r2, #245	; 0xf5
 8010a06:	711a      	strb	r2, [r3, #4]
 8010a08:	e000      	b.n	8010a0c <lwip_netconn_do_close+0xfc>
      return;
 8010a0a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	08021914 	.word	0x08021914
 8010a18:	08021cb8 	.word	0x08021cb8
 8010a1c:	08021958 	.word	0x08021958
 8010a20:	08021cd4 	.word	0x08021cd4
 8010a24:	2000ca50 	.word	0x2000ca50

08010a28 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d013      	beq.n	8010a5e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00b      	beq.n	8010a56 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	4618      	mov	r0, r3
 8010a44:	f002 f86a 	bl	8012b1c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	605a      	str	r2, [r3, #4]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	685a      	ldr	r2, [r3, #4]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8010a56:	6879      	ldr	r1, [r7, #4]
 8010a58:	2006      	movs	r0, #6
 8010a5a:	f001 f977 	bl	8011d4c <memp_free>
  }
}
 8010a5e:	bf00      	nop
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
	...

08010a68 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	db02      	blt.n	8010a80 <tryget_socket_unconn_nouse+0x18>
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2b03      	cmp	r3, #3
 8010a7e:	dd01      	ble.n	8010a84 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8010a80:	2300      	movs	r3, #0
 8010a82:	e003      	b.n	8010a8c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	011b      	lsls	r3, r3, #4
 8010a88:	4a03      	ldr	r2, [pc, #12]	; (8010a98 <tryget_socket_unconn_nouse+0x30>)
 8010a8a:	4413      	add	r3, r2
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3714      	adds	r7, #20
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr
 8010a98:	2000ca04 	.word	0x2000ca04

08010a9c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f7ff ffdf 	bl	8010a68 <tryget_socket_unconn_nouse>
 8010aaa:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8010aac:	68fb      	ldr	r3, [r7, #12]
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3710      	adds	r7, #16
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b084      	sub	sp, #16
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f7ff ffec 	bl	8010a9c <tryget_socket_unconn>
 8010ac4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d005      	beq.n	8010ad8 <tryget_socket+0x22>
    if (sock->conn) {
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <tryget_socket+0x22>
      return sock;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	e000      	b.n	8010ada <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8010ad8:	2300      	movs	r3, #0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
	...

08010ae4 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b084      	sub	sp, #16
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f7ff ffe2 	bl	8010ab6 <tryget_socket>
 8010af2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d104      	bne.n	8010b04 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8010afa:	4b05      	ldr	r3, [pc, #20]	; (8010b10 <get_socket+0x2c>)
 8010afc:	2209      	movs	r2, #9
 8010afe:	601a      	str	r2, [r3, #0]
    return NULL;
 8010b00:	2300      	movs	r3, #0
 8010b02:	e000      	b.n	8010b06 <get_socket+0x22>
  }
  return sock;
 8010b04:	68fb      	ldr	r3, [r7, #12]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	20010944 	.word	0x20010944

08010b14 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2b20      	cmp	r3, #32
 8010b20:	d009      	beq.n	8010b36 <lwip_sockopt_to_ipopt+0x22>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2b20      	cmp	r3, #32
 8010b26:	dc0c      	bgt.n	8010b42 <lwip_sockopt_to_ipopt+0x2e>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b04      	cmp	r3, #4
 8010b2c:	d007      	beq.n	8010b3e <lwip_sockopt_to_ipopt+0x2a>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2b08      	cmp	r3, #8
 8010b32:	d002      	beq.n	8010b3a <lwip_sockopt_to_ipopt+0x26>
 8010b34:	e005      	b.n	8010b42 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 8010b36:	2320      	movs	r3, #32
 8010b38:	e00b      	b.n	8010b52 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 8010b3a:	2308      	movs	r3, #8
 8010b3c:	e009      	b.n	8010b52 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 8010b3e:	2304      	movs	r3, #4
 8010b40:	e007      	b.n	8010b52 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 8010b42:	4b06      	ldr	r3, [pc, #24]	; (8010b5c <lwip_sockopt_to_ipopt+0x48>)
 8010b44:	f640 3239 	movw	r2, #2873	; 0xb39
 8010b48:	4905      	ldr	r1, [pc, #20]	; (8010b60 <lwip_sockopt_to_ipopt+0x4c>)
 8010b4a:	4806      	ldr	r0, [pc, #24]	; (8010b64 <lwip_sockopt_to_ipopt+0x50>)
 8010b4c:	f00e feba 	bl	801f8c4 <iprintf>
    return 0;
 8010b50:	2300      	movs	r3, #0
  }
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	08021e6c 	.word	0x08021e6c
 8010b60:	080221f8 	.word	0x080221f8
 8010b64:	08021ec0 	.word	0x08021ec0

08010b68 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b08a      	sub	sp, #40	; 0x28
 8010b6c:	af02      	add	r7, sp, #8
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	607a      	str	r2, [r7, #4]
 8010b74:	603b      	str	r3, [r7, #0]
  int err = 0;
 8010b76:	2300      	movs	r3, #0
 8010b78:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f7ff ffb2 	bl	8010ae4 <get_socket>
 8010b80:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 8010b82:	69bb      	ldr	r3, [r7, #24]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d102      	bne.n	8010b8e <lwip_setsockopt+0x26>
    return -1;
 8010b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b8c:	e02b      	b.n	8010be6 <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d10a      	bne.n	8010baa <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 8010b94:	230e      	movs	r3, #14
 8010b96:	613b      	str	r3, [r7, #16]
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d002      	beq.n	8010ba4 <lwip_setsockopt+0x3c>
 8010b9e:	4a14      	ldr	r2, [pc, #80]	; (8010bf0 <lwip_setsockopt+0x88>)
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ba8:	e01d      	b.n	8010be6 <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 8010baa:	4812      	ldr	r0, [pc, #72]	; (8010bf4 <lwip_setsockopt+0x8c>)
 8010bac:	f00d fc58 	bl	801e460 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 8010bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	687a      	ldr	r2, [r7, #4]
 8010bb8:	68b9      	ldr	r1, [r7, #8]
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f000 f81c 	bl	8010bf8 <lwip_setsockopt_impl>
 8010bc0:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 8010bc2:	480c      	ldr	r0, [pc, #48]	; (8010bf4 <lwip_setsockopt+0x8c>)
 8010bc4:	f00d fc5b 	bl	801e47e <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	617b      	str	r3, [r7, #20]
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d002      	beq.n	8010bd8 <lwip_setsockopt+0x70>
 8010bd2:	4a07      	ldr	r2, [pc, #28]	; (8010bf0 <lwip_setsockopt+0x88>)
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d002      	beq.n	8010be4 <lwip_setsockopt+0x7c>
 8010bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010be2:	e000      	b.n	8010be6 <lwip_setsockopt+0x7e>
 8010be4:	2300      	movs	r3, #0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3720      	adds	r7, #32
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	20010944 	.word	0x20010944
 8010bf4:	2000ca50 	.word	0x2000ca50

08010bf8 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b088      	sub	sp, #32
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
 8010c04:	603b      	str	r3, [r7, #0]
  int err = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	f7ff ff53 	bl	8010ab6 <tryget_socket>
 8010c10:	6178      	str	r0, [r7, #20]
  if (!sock) {
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d101      	bne.n	8010c1c <lwip_setsockopt_impl+0x24>
    return EBADF;
 8010c18:	2309      	movs	r3, #9
 8010c1a:	e187      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d015      	beq.n	8010c52 <lwip_setsockopt_impl+0x5a>
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c2c:	f280 817a 	bge.w	8010f24 <lwip_setsockopt_impl+0x32c>
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	2bff      	cmp	r3, #255	; 0xff
 8010c34:	f000 8172 	beq.w	8010f1c <lwip_setsockopt_impl+0x324>
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	2bff      	cmp	r3, #255	; 0xff
 8010c3c:	f300 8172 	bgt.w	8010f24 <lwip_setsockopt_impl+0x32c>
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	f000 80e0 	beq.w	8010e08 <lwip_setsockopt_impl+0x210>
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	2b06      	cmp	r3, #6
 8010c4c:	f000 8116 	beq.w	8010e7c <lwip_setsockopt_impl+0x284>
 8010c50:	e168      	b.n	8010f24 <lwip_setsockopt_impl+0x32c>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f241 020b 	movw	r2, #4107	; 0x100b
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	f000 8091 	beq.w	8010d80 <lwip_setsockopt_impl+0x188>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f241 020b 	movw	r2, #4107	; 0x100b
 8010c64:	4293      	cmp	r3, r2
 8010c66:	f300 80cb 	bgt.w	8010e00 <lwip_setsockopt_impl+0x208>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f241 020a 	movw	r2, #4106	; 0x100a
 8010c70:	4293      	cmp	r3, r2
 8010c72:	d050      	beq.n	8010d16 <lwip_setsockopt_impl+0x11e>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f241 020a 	movw	r2, #4106	; 0x100a
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	f300 80c0 	bgt.w	8010e00 <lwip_setsockopt_impl+0x208>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2b08      	cmp	r3, #8
 8010c84:	d003      	beq.n	8010c8e <lwip_setsockopt_impl+0x96>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2b20      	cmp	r3, #32
 8010c8a:	f040 80b9 	bne.w	8010e00 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2b20      	cmp	r3, #32
 8010c92:	d108      	bne.n	8010ca6 <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 8010c9e:	2b20      	cmp	r3, #32
 8010ca0:	d001      	beq.n	8010ca6 <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 8010ca2:	235c      	movs	r3, #92	; 0x5c
 8010ca4:	e142      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f7ff ff34 	bl	8010b14 <lwip_sockopt_to_ipopt>
 8010cac:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8010cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb0:	2b03      	cmp	r3, #3
 8010cb2:	d801      	bhi.n	8010cb8 <lwip_setsockopt_impl+0xc0>
 8010cb4:	2316      	movs	r3, #22
 8010cb6:	e139      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d004      	beq.n	8010cca <lwip_setsockopt_impl+0xd2>
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d101      	bne.n	8010cce <lwip_setsockopt_impl+0xd6>
 8010cca:	2316      	movs	r3, #22
 8010ccc:	e12e      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
          if (*(const int *)optval) {
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d00e      	beq.n	8010cf4 <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	7a5b      	ldrb	r3, [r3, #9]
 8010cde:	b25a      	sxtb	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	b25b      	sxtb	r3, r3
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	b25a      	sxtb	r2, r3
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	b2d2      	uxtb	r2, r2
 8010cf0:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 8010cf2:	e088      	b.n	8010e06 <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	7a5b      	ldrb	r3, [r3, #9]
 8010cfc:	b25a      	sxtb	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	b25b      	sxtb	r3, r3
 8010d02:	43db      	mvns	r3, r3
 8010d04:	b25b      	sxtb	r3, r3
 8010d06:	4013      	ands	r3, r2
 8010d08:	b25a      	sxtb	r2, r3
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	b2d2      	uxtb	r2, r2
 8010d12:	725a      	strb	r2, [r3, #9]
          break;
 8010d14:	e077      	b.n	8010e06 <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 8010d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d18:	2b03      	cmp	r3, #3
 8010d1a:	d801      	bhi.n	8010d20 <lwip_setsockopt_impl+0x128>
 8010d1c:	2316      	movs	r3, #22
 8010d1e:	e105      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d004      	beq.n	8010d32 <lwip_setsockopt_impl+0x13a>
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d101      	bne.n	8010d36 <lwip_setsockopt_impl+0x13e>
 8010d32:	2316      	movs	r3, #22
 8010d34:	e0fa      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d40:	2b20      	cmp	r3, #32
 8010d42:	d001      	beq.n	8010d48 <lwip_setsockopt_impl+0x150>
 8010d44:	235c      	movs	r3, #92	; 0x5c
 8010d46:	e0f1      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d00b      	beq.n	8010d68 <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	7c1a      	ldrb	r2, [r3, #16]
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	f042 0201 	orr.w	r2, r2, #1
 8010d62:	b2d2      	uxtb	r2, r2
 8010d64:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 8010d66:	e04e      	b.n	8010e06 <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	7c1a      	ldrb	r2, [r3, #16]
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	f022 0201 	bic.w	r2, r2, #1
 8010d7a:	b2d2      	uxtb	r2, r2
 8010d7c:	741a      	strb	r2, [r3, #16]
          break;
 8010d7e:	e042      	b.n	8010e06 <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 8010d80:	2300      	movs	r3, #0
 8010d82:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 8010d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d86:	2b05      	cmp	r3, #5
 8010d88:	d801      	bhi.n	8010d8e <lwip_setsockopt_impl+0x196>
 8010d8a:	2316      	movs	r3, #22
 8010d8c:	e0ce      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d101      	bne.n	8010d9a <lwip_setsockopt_impl+0x1a2>
 8010d96:	2316      	movs	r3, #22
 8010d98:	e0c8      	b.n	8010f2c <lwip_setsockopt_impl+0x334>

          iface = (const struct ifreq *)optval;
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d009      	beq.n	8010dba <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f001 fb17 	bl	80123dc <netif_find>
 8010dae:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d101      	bne.n	8010dba <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 8010db6:	2313      	movs	r3, #19
 8010db8:	e0b8      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010dc4:	2b10      	cmp	r3, #16
 8010dc6:	d002      	beq.n	8010dce <lwip_setsockopt_impl+0x1d6>
 8010dc8:	2b20      	cmp	r3, #32
 8010dca:	d008      	beq.n	8010dde <lwip_setsockopt_impl+0x1e6>
 8010dcc:	e00f      	b.n	8010dee <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	69b9      	ldr	r1, [r7, #24]
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f002 fd44 	bl	8013864 <tcp_bind_netif>
              break;
 8010ddc:	e00f      	b.n	8010dfe <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	69b9      	ldr	r1, [r7, #24]
 8010de6:	4618      	mov	r0, r3
 8010de8:	f008 ff00 	bl	8019bec <udp_bind_netif>
              break;
 8010dec:	e007      	b.n	8010dfe <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 8010dee:	4b51      	ldr	r3, [pc, #324]	; (8010f34 <lwip_setsockopt_impl+0x33c>)
 8010df0:	f640 527d 	movw	r2, #3453	; 0xd7d
 8010df4:	4950      	ldr	r1, [pc, #320]	; (8010f38 <lwip_setsockopt_impl+0x340>)
 8010df6:	4851      	ldr	r0, [pc, #324]	; (8010f3c <lwip_setsockopt_impl+0x344>)
 8010df8:	f00e fd64 	bl	801f8c4 <iprintf>
              break;
 8010dfc:	bf00      	nop
          }
        }
        break;
 8010dfe:	e002      	b.n	8010e06 <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010e00:	235c      	movs	r3, #92	; 0x5c
 8010e02:	61fb      	str	r3, [r7, #28]
          break;
 8010e04:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010e06:	e090      	b.n	8010f2a <lwip_setsockopt_impl+0x332>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d01a      	beq.n	8010e44 <lwip_setsockopt_impl+0x24c>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2b02      	cmp	r3, #2
 8010e12:	d12f      	bne.n	8010e74 <lwip_setsockopt_impl+0x27c>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8010e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e16:	2b03      	cmp	r3, #3
 8010e18:	d801      	bhi.n	8010e1e <lwip_setsockopt_impl+0x226>
 8010e1a:	2316      	movs	r3, #22
 8010e1c:	e086      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d004      	beq.n	8010e30 <lwip_setsockopt_impl+0x238>
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <lwip_setsockopt_impl+0x23c>
 8010e30:	2316      	movs	r3, #22
 8010e32:	e07b      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	b2d2      	uxtb	r2, r2
 8010e40:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 8010e42:	e01a      	b.n	8010e7a <lwip_setsockopt_impl+0x282>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8010e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e46:	2b03      	cmp	r3, #3
 8010e48:	d801      	bhi.n	8010e4e <lwip_setsockopt_impl+0x256>
 8010e4a:	2316      	movs	r3, #22
 8010e4c:	e06e      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d004      	beq.n	8010e60 <lwip_setsockopt_impl+0x268>
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d101      	bne.n	8010e64 <lwip_setsockopt_impl+0x26c>
 8010e60:	2316      	movs	r3, #22
 8010e62:	e063      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	b2d2      	uxtb	r2, r2
 8010e70:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 8010e72:	e002      	b.n	8010e7a <lwip_setsockopt_impl+0x282>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010e74:	235c      	movs	r3, #92	; 0x5c
 8010e76:	61fb      	str	r3, [r7, #28]
          break;
 8010e78:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010e7a:	e056      	b.n	8010f2a <lwip_setsockopt_impl+0x332>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 8010e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7e:	2b03      	cmp	r3, #3
 8010e80:	d801      	bhi.n	8010e86 <lwip_setsockopt_impl+0x28e>
 8010e82:	2316      	movs	r3, #22
 8010e84:	e052      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d004      	beq.n	8010e98 <lwip_setsockopt_impl+0x2a0>
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d101      	bne.n	8010e9c <lwip_setsockopt_impl+0x2a4>
 8010e98:	2316      	movs	r3, #22
 8010e9a:	e047      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ea6:	2b10      	cmp	r3, #16
 8010ea8:	d001      	beq.n	8010eae <lwip_setsockopt_impl+0x2b6>
 8010eaa:	235c      	movs	r3, #92	; 0x5c
 8010eac:	e03e      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	7d1b      	ldrb	r3, [r3, #20]
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d101      	bne.n	8010ebe <lwip_setsockopt_impl+0x2c6>
        done_socket(sock);
        return EINVAL;
 8010eba:	2316      	movs	r3, #22
 8010ebc:	e036      	b.n	8010f2c <lwip_setsockopt_impl+0x334>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d003      	beq.n	8010ecc <lwip_setsockopt_impl+0x2d4>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2b02      	cmp	r3, #2
 8010ec8:	d01c      	beq.n	8010f04 <lwip_setsockopt_impl+0x30c>
 8010eca:	e023      	b.n	8010f14 <lwip_setsockopt_impl+0x31c>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d00b      	beq.n	8010eec <lwip_setsockopt_impl+0x2f4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	8b5a      	ldrh	r2, [r3, #26]
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010ee6:	b292      	uxth	r2, r2
 8010ee8:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 8010eea:	e016      	b.n	8010f1a <lwip_setsockopt_impl+0x322>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	8b5a      	ldrh	r2, [r3, #26]
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010efe:	b292      	uxth	r2, r2
 8010f00:	835a      	strh	r2, [r3, #26]
          break;
 8010f02:	e00a      	b.n	8010f1a <lwip_setsockopt_impl+0x322>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 8010f12:	e002      	b.n	8010f1a <lwip_setsockopt_impl+0x322>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010f14:	235c      	movs	r3, #92	; 0x5c
 8010f16:	61fb      	str	r3, [r7, #28]
          break;
 8010f18:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010f1a:	e006      	b.n	8010f2a <lwip_setsockopt_impl+0x332>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010f1c:	235c      	movs	r3, #92	; 0x5c
 8010f1e:	61fb      	str	r3, [r7, #28]
          break;
 8010f20:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010f22:	e002      	b.n	8010f2a <lwip_setsockopt_impl+0x332>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 8010f24:	235c      	movs	r3, #92	; 0x5c
 8010f26:	61fb      	str	r3, [r7, #28]
      break;
 8010f28:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 8010f2a:	69fb      	ldr	r3, [r7, #28]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3720      	adds	r7, #32
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	08021e6c 	.word	0x08021e6c
 8010f38:	08022210 	.word	0x08022210
 8010f3c:	08021ec0 	.word	0x08021ec0

08010f40 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010f4a:	f008 fa73 	bl	8019434 <sys_timeouts_sleeptime>
 8010f4e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f56:	d10b      	bne.n	8010f70 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010f58:	4813      	ldr	r0, [pc, #76]	; (8010fa8 <tcpip_timeouts_mbox_fetch+0x68>)
 8010f5a:	f00d fa90 	bl	801e47e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010f5e:	2200      	movs	r2, #0
 8010f60:	6839      	ldr	r1, [r7, #0]
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f00d f948 	bl	801e1f8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010f68:	480f      	ldr	r0, [pc, #60]	; (8010fa8 <tcpip_timeouts_mbox_fetch+0x68>)
 8010f6a:	f00d fa79 	bl	801e460 <sys_mutex_lock>
    return;
 8010f6e:	e018      	b.n	8010fa2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d102      	bne.n	8010f7c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010f76:	f008 fa23 	bl	80193c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010f7a:	e7e6      	b.n	8010f4a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010f7c:	480a      	ldr	r0, [pc, #40]	; (8010fa8 <tcpip_timeouts_mbox_fetch+0x68>)
 8010f7e:	f00d fa7e 	bl	801e47e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	6839      	ldr	r1, [r7, #0]
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f00d f936 	bl	801e1f8 <sys_arch_mbox_fetch>
 8010f8c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010f8e:	4806      	ldr	r0, [pc, #24]	; (8010fa8 <tcpip_timeouts_mbox_fetch+0x68>)
 8010f90:	f00d fa66 	bl	801e460 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f9a:	d102      	bne.n	8010fa2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010f9c:	f008 fa10 	bl	80193c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010fa0:	e7d3      	b.n	8010f4a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010fa2:	3710      	adds	r7, #16
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	2000ca50 	.word	0x2000ca50

08010fac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010fb4:	4810      	ldr	r0, [pc, #64]	; (8010ff8 <tcpip_thread+0x4c>)
 8010fb6:	f00d fa53 	bl	801e460 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010fba:	4b10      	ldr	r3, [pc, #64]	; (8010ffc <tcpip_thread+0x50>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d005      	beq.n	8010fce <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010fc2:	4b0e      	ldr	r3, [pc, #56]	; (8010ffc <tcpip_thread+0x50>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	4a0e      	ldr	r2, [pc, #56]	; (8011000 <tcpip_thread+0x54>)
 8010fc8:	6812      	ldr	r2, [r2, #0]
 8010fca:	4610      	mov	r0, r2
 8010fcc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010fce:	f107 030c 	add.w	r3, r7, #12
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	480b      	ldr	r0, [pc, #44]	; (8011004 <tcpip_thread+0x58>)
 8010fd6:	f7ff ffb3 	bl	8010f40 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d106      	bne.n	8010fee <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010fe0:	4b09      	ldr	r3, [pc, #36]	; (8011008 <tcpip_thread+0x5c>)
 8010fe2:	2291      	movs	r2, #145	; 0x91
 8010fe4:	4909      	ldr	r1, [pc, #36]	; (801100c <tcpip_thread+0x60>)
 8010fe6:	480a      	ldr	r0, [pc, #40]	; (8011010 <tcpip_thread+0x64>)
 8010fe8:	f00e fc6c 	bl	801f8c4 <iprintf>
      continue;
 8010fec:	e003      	b.n	8010ff6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f000 f80f 	bl	8011014 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010ff6:	e7ea      	b.n	8010fce <tcpip_thread+0x22>
 8010ff8:	2000ca50 	.word	0x2000ca50
 8010ffc:	2000ca44 	.word	0x2000ca44
 8011000:	2000ca48 	.word	0x2000ca48
 8011004:	2000ca4c 	.word	0x2000ca4c
 8011008:	0802223c 	.word	0x0802223c
 801100c:	0802226c 	.word	0x0802226c
 8011010:	0802228c 	.word	0x0802228c

08011014 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	2b02      	cmp	r3, #2
 8011022:	d026      	beq.n	8011072 <tcpip_thread_handle_msg+0x5e>
 8011024:	2b02      	cmp	r3, #2
 8011026:	dc2b      	bgt.n	8011080 <tcpip_thread_handle_msg+0x6c>
 8011028:	2b00      	cmp	r3, #0
 801102a:	d002      	beq.n	8011032 <tcpip_thread_handle_msg+0x1e>
 801102c:	2b01      	cmp	r3, #1
 801102e:	d015      	beq.n	801105c <tcpip_thread_handle_msg+0x48>
 8011030:	e026      	b.n	8011080 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	68db      	ldr	r3, [r3, #12]
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	6850      	ldr	r0, [r2, #4]
 801103a:	687a      	ldr	r2, [r7, #4]
 801103c:	6892      	ldr	r2, [r2, #8]
 801103e:	4611      	mov	r1, r2
 8011040:	4798      	blx	r3
 8011042:	4603      	mov	r3, r0
 8011044:	2b00      	cmp	r3, #0
 8011046:	d004      	beq.n	8011052 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	4618      	mov	r0, r3
 801104e:	f001 fd65 	bl	8012b1c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011052:	6879      	ldr	r1, [r7, #4]
 8011054:	2009      	movs	r0, #9
 8011056:	f000 fe79 	bl	8011d4c <memp_free>
      break;
 801105a:	e018      	b.n	801108e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	687a      	ldr	r2, [r7, #4]
 8011062:	6892      	ldr	r2, [r2, #8]
 8011064:	4610      	mov	r0, r2
 8011066:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011068:	6879      	ldr	r1, [r7, #4]
 801106a:	2008      	movs	r0, #8
 801106c:	f000 fe6e 	bl	8011d4c <memp_free>
      break;
 8011070:	e00d      	b.n	801108e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	687a      	ldr	r2, [r7, #4]
 8011078:	6892      	ldr	r2, [r2, #8]
 801107a:	4610      	mov	r0, r2
 801107c:	4798      	blx	r3
      break;
 801107e:	e006      	b.n	801108e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011080:	4b05      	ldr	r3, [pc, #20]	; (8011098 <tcpip_thread_handle_msg+0x84>)
 8011082:	22cf      	movs	r2, #207	; 0xcf
 8011084:	4905      	ldr	r1, [pc, #20]	; (801109c <tcpip_thread_handle_msg+0x88>)
 8011086:	4806      	ldr	r0, [pc, #24]	; (80110a0 <tcpip_thread_handle_msg+0x8c>)
 8011088:	f00e fc1c 	bl	801f8c4 <iprintf>
      break;
 801108c:	bf00      	nop
  }
}
 801108e:	bf00      	nop
 8011090:	3708      	adds	r7, #8
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop
 8011098:	0802223c 	.word	0x0802223c
 801109c:	0802226c 	.word	0x0802226c
 80110a0:	0802228c 	.word	0x0802228c

080110a4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b086      	sub	sp, #24
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80110b0:	481a      	ldr	r0, [pc, #104]	; (801111c <tcpip_inpkt+0x78>)
 80110b2:	f00d f8fc 	bl	801e2ae <sys_mbox_valid>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d105      	bne.n	80110c8 <tcpip_inpkt+0x24>
 80110bc:	4b18      	ldr	r3, [pc, #96]	; (8011120 <tcpip_inpkt+0x7c>)
 80110be:	22fc      	movs	r2, #252	; 0xfc
 80110c0:	4918      	ldr	r1, [pc, #96]	; (8011124 <tcpip_inpkt+0x80>)
 80110c2:	4819      	ldr	r0, [pc, #100]	; (8011128 <tcpip_inpkt+0x84>)
 80110c4:	f00e fbfe 	bl	801f8c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80110c8:	2009      	movs	r0, #9
 80110ca:	f000 fdc9 	bl	8011c60 <memp_malloc>
 80110ce:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d102      	bne.n	80110dc <tcpip_inpkt+0x38>
    return ERR_MEM;
 80110d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110da:	e01a      	b.n	8011112 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	2200      	movs	r2, #0
 80110e0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	68ba      	ldr	r2, [r7, #8]
 80110ec:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	687a      	ldr	r2, [r7, #4]
 80110f2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80110f4:	6979      	ldr	r1, [r7, #20]
 80110f6:	4809      	ldr	r0, [pc, #36]	; (801111c <tcpip_inpkt+0x78>)
 80110f8:	f00d f864 	bl	801e1c4 <sys_mbox_trypost>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d006      	beq.n	8011110 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011102:	6979      	ldr	r1, [r7, #20]
 8011104:	2009      	movs	r0, #9
 8011106:	f000 fe21 	bl	8011d4c <memp_free>
    return ERR_MEM;
 801110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801110e:	e000      	b.n	8011112 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011110:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011112:	4618      	mov	r0, r3
 8011114:	3718      	adds	r7, #24
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	2000ca4c 	.word	0x2000ca4c
 8011120:	0802223c 	.word	0x0802223c
 8011124:	080222b4 	.word	0x080222b4
 8011128:	0802228c 	.word	0x0802228c

0801112c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801113c:	f003 0318 	and.w	r3, r3, #24
 8011140:	2b00      	cmp	r3, #0
 8011142:	d006      	beq.n	8011152 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011144:	4a08      	ldr	r2, [pc, #32]	; (8011168 <tcpip_input+0x3c>)
 8011146:	6839      	ldr	r1, [r7, #0]
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f7ff ffab 	bl	80110a4 <tcpip_inpkt>
 801114e:	4603      	mov	r3, r0
 8011150:	e005      	b.n	801115e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011152:	4a06      	ldr	r2, [pc, #24]	; (801116c <tcpip_input+0x40>)
 8011154:	6839      	ldr	r1, [r7, #0]
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f7ff ffa4 	bl	80110a4 <tcpip_inpkt>
 801115c:	4603      	mov	r3, r0
}
 801115e:	4618      	mov	r0, r3
 8011160:	3708      	adds	r7, #8
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	0801dfb1 	.word	0x0801dfb1
 801116c:	0801ce7d 	.word	0x0801ce7d

08011170 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801117a:	4819      	ldr	r0, [pc, #100]	; (80111e0 <tcpip_try_callback+0x70>)
 801117c:	f00d f897 	bl	801e2ae <sys_mbox_valid>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d106      	bne.n	8011194 <tcpip_try_callback+0x24>
 8011186:	4b17      	ldr	r3, [pc, #92]	; (80111e4 <tcpip_try_callback+0x74>)
 8011188:	f240 125d 	movw	r2, #349	; 0x15d
 801118c:	4916      	ldr	r1, [pc, #88]	; (80111e8 <tcpip_try_callback+0x78>)
 801118e:	4817      	ldr	r0, [pc, #92]	; (80111ec <tcpip_try_callback+0x7c>)
 8011190:	f00e fb98 	bl	801f8c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011194:	2008      	movs	r0, #8
 8011196:	f000 fd63 	bl	8011c60 <memp_malloc>
 801119a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d102      	bne.n	80111a8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80111a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111a6:	e017      	b.n	80111d8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	2201      	movs	r2, #1
 80111ac:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	683a      	ldr	r2, [r7, #0]
 80111b8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80111ba:	68f9      	ldr	r1, [r7, #12]
 80111bc:	4808      	ldr	r0, [pc, #32]	; (80111e0 <tcpip_try_callback+0x70>)
 80111be:	f00d f801 	bl	801e1c4 <sys_mbox_trypost>
 80111c2:	4603      	mov	r3, r0
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d006      	beq.n	80111d6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80111c8:	68f9      	ldr	r1, [r7, #12]
 80111ca:	2008      	movs	r0, #8
 80111cc:	f000 fdbe 	bl	8011d4c <memp_free>
    return ERR_MEM;
 80111d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111d4:	e000      	b.n	80111d8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80111d6:	2300      	movs	r3, #0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3710      	adds	r7, #16
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	2000ca4c 	.word	0x2000ca4c
 80111e4:	0802223c 	.word	0x0802223c
 80111e8:	080222b4 	.word	0x080222b4
 80111ec:	0802228c 	.word	0x0802228c

080111f0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80111fc:	4806      	ldr	r0, [pc, #24]	; (8011218 <tcpip_send_msg_wait_sem+0x28>)
 80111fe:	f00d f92f 	bl	801e460 <sys_mutex_lock>
  fn(apimsg);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	68b8      	ldr	r0, [r7, #8]
 8011206:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8011208:	4803      	ldr	r0, [pc, #12]	; (8011218 <tcpip_send_msg_wait_sem+0x28>)
 801120a:	f00d f938 	bl	801e47e <sys_mutex_unlock>
  return ERR_OK;
 801120e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8011210:	4618      	mov	r0, r3
 8011212:	3710      	adds	r7, #16
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}
 8011218:	2000ca50 	.word	0x2000ca50

0801121c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af02      	add	r7, sp, #8
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011226:	f000 f871 	bl	801130c <lwip_init>

  tcpip_init_done = initfunc;
 801122a:	4a17      	ldr	r2, [pc, #92]	; (8011288 <tcpip_init+0x6c>)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011230:	4a16      	ldr	r2, [pc, #88]	; (801128c <tcpip_init+0x70>)
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011236:	2106      	movs	r1, #6
 8011238:	4815      	ldr	r0, [pc, #84]	; (8011290 <tcpip_init+0x74>)
 801123a:	f00c ff8f 	bl	801e15c <sys_mbox_new>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d006      	beq.n	8011252 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011244:	4b13      	ldr	r3, [pc, #76]	; (8011294 <tcpip_init+0x78>)
 8011246:	f240 2261 	movw	r2, #609	; 0x261
 801124a:	4913      	ldr	r1, [pc, #76]	; (8011298 <tcpip_init+0x7c>)
 801124c:	4813      	ldr	r0, [pc, #76]	; (801129c <tcpip_init+0x80>)
 801124e:	f00e fb39 	bl	801f8c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011252:	4813      	ldr	r0, [pc, #76]	; (80112a0 <tcpip_init+0x84>)
 8011254:	f00d f8e8 	bl	801e428 <sys_mutex_new>
 8011258:	4603      	mov	r3, r0
 801125a:	2b00      	cmp	r3, #0
 801125c:	d006      	beq.n	801126c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801125e:	4b0d      	ldr	r3, [pc, #52]	; (8011294 <tcpip_init+0x78>)
 8011260:	f240 2265 	movw	r2, #613	; 0x265
 8011264:	490f      	ldr	r1, [pc, #60]	; (80112a4 <tcpip_init+0x88>)
 8011266:	480d      	ldr	r0, [pc, #52]	; (801129c <tcpip_init+0x80>)
 8011268:	f00e fb2c 	bl	801f8c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801126c:	2300      	movs	r3, #0
 801126e:	9300      	str	r3, [sp, #0]
 8011270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011274:	2200      	movs	r2, #0
 8011276:	490c      	ldr	r1, [pc, #48]	; (80112a8 <tcpip_init+0x8c>)
 8011278:	480c      	ldr	r0, [pc, #48]	; (80112ac <tcpip_init+0x90>)
 801127a:	f00d f90d 	bl	801e498 <sys_thread_new>
}
 801127e:	bf00      	nop
 8011280:	3708      	adds	r7, #8
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	2000ca44 	.word	0x2000ca44
 801128c:	2000ca48 	.word	0x2000ca48
 8011290:	2000ca4c 	.word	0x2000ca4c
 8011294:	0802223c 	.word	0x0802223c
 8011298:	080222c4 	.word	0x080222c4
 801129c:	0802228c 	.word	0x0802228c
 80112a0:	2000ca50 	.word	0x2000ca50
 80112a4:	080222e8 	.word	0x080222e8
 80112a8:	08010fad 	.word	0x08010fad
 80112ac:	0802230c 	.word	0x0802230c

080112b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	4603      	mov	r3, r0
 80112b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80112ba:	88fb      	ldrh	r3, [r7, #6]
 80112bc:	021b      	lsls	r3, r3, #8
 80112be:	b21a      	sxth	r2, r3
 80112c0:	88fb      	ldrh	r3, [r7, #6]
 80112c2:	0a1b      	lsrs	r3, r3, #8
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	b21b      	sxth	r3, r3
 80112c8:	4313      	orrs	r3, r2
 80112ca:	b21b      	sxth	r3, r3
 80112cc:	b29b      	uxth	r3, r3
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	370c      	adds	r7, #12
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr

080112da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80112da:	b480      	push	{r7}
 80112dc:	b083      	sub	sp, #12
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	061a      	lsls	r2, r3, #24
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	021b      	lsls	r3, r3, #8
 80112ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80112ee:	431a      	orrs	r2, r3
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	0a1b      	lsrs	r3, r3, #8
 80112f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80112f8:	431a      	orrs	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	0e1b      	lsrs	r3, r3, #24
 80112fe:	4313      	orrs	r3, r2
}
 8011300:	4618      	mov	r0, r3
 8011302:	370c      	adds	r7, #12
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr

0801130c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b082      	sub	sp, #8
 8011310:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011312:	2300      	movs	r3, #0
 8011314:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011316:	f00d f879 	bl	801e40c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801131a:	f000 f8d5 	bl	80114c8 <mem_init>
  memp_init();
 801131e:	f000 fc31 	bl	8011b84 <memp_init>
  pbuf_init();
  netif_init();
 8011322:	f000 fd3d 	bl	8011da0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011326:	f008 f8bd 	bl	80194a4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801132a:	f001 fea1 	bl	8013070 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801132e:	f007 ffff 	bl	8019330 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011332:	bf00      	nop
 8011334:	3708      	adds	r7, #8
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
	...

0801133c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	4603      	mov	r3, r0
 8011344:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011346:	4b05      	ldr	r3, [pc, #20]	; (801135c <ptr_to_mem+0x20>)
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	88fb      	ldrh	r3, [r7, #6]
 801134c:	4413      	add	r3, r2
}
 801134e:	4618      	mov	r0, r3
 8011350:	370c      	adds	r7, #12
 8011352:	46bd      	mov	sp, r7
 8011354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	2000d0c0 	.word	0x2000d0c0

08011360 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011368:	4b05      	ldr	r3, [pc, #20]	; (8011380 <mem_to_ptr+0x20>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	1ad3      	subs	r3, r2, r3
 8011370:	b29b      	uxth	r3, r3
}
 8011372:	4618      	mov	r0, r3
 8011374:	370c      	adds	r7, #12
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr
 801137e:	bf00      	nop
 8011380:	2000d0c0 	.word	0x2000d0c0

08011384 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011384:	b590      	push	{r4, r7, lr}
 8011386:	b085      	sub	sp, #20
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801138c:	4b45      	ldr	r3, [pc, #276]	; (80114a4 <plug_holes+0x120>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	429a      	cmp	r2, r3
 8011394:	d206      	bcs.n	80113a4 <plug_holes+0x20>
 8011396:	4b44      	ldr	r3, [pc, #272]	; (80114a8 <plug_holes+0x124>)
 8011398:	f240 12df 	movw	r2, #479	; 0x1df
 801139c:	4943      	ldr	r1, [pc, #268]	; (80114ac <plug_holes+0x128>)
 801139e:	4844      	ldr	r0, [pc, #272]	; (80114b0 <plug_holes+0x12c>)
 80113a0:	f00e fa90 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80113a4:	4b43      	ldr	r3, [pc, #268]	; (80114b4 <plug_holes+0x130>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d306      	bcc.n	80113bc <plug_holes+0x38>
 80113ae:	4b3e      	ldr	r3, [pc, #248]	; (80114a8 <plug_holes+0x124>)
 80113b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80113b4:	4940      	ldr	r1, [pc, #256]	; (80114b8 <plug_holes+0x134>)
 80113b6:	483e      	ldr	r0, [pc, #248]	; (80114b0 <plug_holes+0x12c>)
 80113b8:	f00e fa84 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	791b      	ldrb	r3, [r3, #4]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d006      	beq.n	80113d2 <plug_holes+0x4e>
 80113c4:	4b38      	ldr	r3, [pc, #224]	; (80114a8 <plug_holes+0x124>)
 80113c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80113ca:	493c      	ldr	r1, [pc, #240]	; (80114bc <plug_holes+0x138>)
 80113cc:	4838      	ldr	r0, [pc, #224]	; (80114b0 <plug_holes+0x12c>)
 80113ce:	f00e fa79 	bl	801f8c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	881b      	ldrh	r3, [r3, #0]
 80113d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80113da:	d906      	bls.n	80113ea <plug_holes+0x66>
 80113dc:	4b32      	ldr	r3, [pc, #200]	; (80114a8 <plug_holes+0x124>)
 80113de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80113e2:	4937      	ldr	r1, [pc, #220]	; (80114c0 <plug_holes+0x13c>)
 80113e4:	4832      	ldr	r0, [pc, #200]	; (80114b0 <plug_holes+0x12c>)
 80113e6:	f00e fa6d 	bl	801f8c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	881b      	ldrh	r3, [r3, #0]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7ff ffa4 	bl	801133c <ptr_to_mem>
 80113f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80113f6:	687a      	ldr	r2, [r7, #4]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d024      	beq.n	8011448 <plug_holes+0xc4>
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	791b      	ldrb	r3, [r3, #4]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d120      	bne.n	8011448 <plug_holes+0xc4>
 8011406:	4b2b      	ldr	r3, [pc, #172]	; (80114b4 <plug_holes+0x130>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	68fa      	ldr	r2, [r7, #12]
 801140c:	429a      	cmp	r2, r3
 801140e:	d01b      	beq.n	8011448 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011410:	4b2c      	ldr	r3, [pc, #176]	; (80114c4 <plug_holes+0x140>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	68fa      	ldr	r2, [r7, #12]
 8011416:	429a      	cmp	r2, r3
 8011418:	d102      	bne.n	8011420 <plug_holes+0x9c>
      lfree = mem;
 801141a:	4a2a      	ldr	r2, [pc, #168]	; (80114c4 <plug_holes+0x140>)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	881a      	ldrh	r2, [r3, #0]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	881b      	ldrh	r3, [r3, #0]
 801142c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011430:	d00a      	beq.n	8011448 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	4618      	mov	r0, r3
 8011438:	f7ff ff80 	bl	801133c <ptr_to_mem>
 801143c:	4604      	mov	r4, r0
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f7ff ff8e 	bl	8011360 <mem_to_ptr>
 8011444:	4603      	mov	r3, r0
 8011446:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	885b      	ldrh	r3, [r3, #2]
 801144c:	4618      	mov	r0, r3
 801144e:	f7ff ff75 	bl	801133c <ptr_to_mem>
 8011452:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011454:	68ba      	ldr	r2, [r7, #8]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	429a      	cmp	r2, r3
 801145a:	d01f      	beq.n	801149c <plug_holes+0x118>
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	791b      	ldrb	r3, [r3, #4]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d11b      	bne.n	801149c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011464:	4b17      	ldr	r3, [pc, #92]	; (80114c4 <plug_holes+0x140>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	687a      	ldr	r2, [r7, #4]
 801146a:	429a      	cmp	r2, r3
 801146c:	d102      	bne.n	8011474 <plug_holes+0xf0>
      lfree = pmem;
 801146e:	4a15      	ldr	r2, [pc, #84]	; (80114c4 <plug_holes+0x140>)
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	881a      	ldrh	r2, [r3, #0]
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	881b      	ldrh	r3, [r3, #0]
 8011480:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011484:	d00a      	beq.n	801149c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	881b      	ldrh	r3, [r3, #0]
 801148a:	4618      	mov	r0, r3
 801148c:	f7ff ff56 	bl	801133c <ptr_to_mem>
 8011490:	4604      	mov	r4, r0
 8011492:	68b8      	ldr	r0, [r7, #8]
 8011494:	f7ff ff64 	bl	8011360 <mem_to_ptr>
 8011498:	4603      	mov	r3, r0
 801149a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801149c:	bf00      	nop
 801149e:	3714      	adds	r7, #20
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd90      	pop	{r4, r7, pc}
 80114a4:	2000d0c0 	.word	0x2000d0c0
 80114a8:	0802231c 	.word	0x0802231c
 80114ac:	0802234c 	.word	0x0802234c
 80114b0:	08022364 	.word	0x08022364
 80114b4:	2000d0c4 	.word	0x2000d0c4
 80114b8:	0802238c 	.word	0x0802238c
 80114bc:	080223a8 	.word	0x080223a8
 80114c0:	080223c4 	.word	0x080223c4
 80114c4:	2000d0cc 	.word	0x2000d0cc

080114c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80114ce:	4b1f      	ldr	r3, [pc, #124]	; (801154c <mem_init+0x84>)
 80114d0:	3303      	adds	r3, #3
 80114d2:	f023 0303 	bic.w	r3, r3, #3
 80114d6:	461a      	mov	r2, r3
 80114d8:	4b1d      	ldr	r3, [pc, #116]	; (8011550 <mem_init+0x88>)
 80114da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80114dc:	4b1c      	ldr	r3, [pc, #112]	; (8011550 <mem_init+0x88>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80114e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2200      	movs	r2, #0
 80114ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2200      	movs	r2, #0
 80114f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80114f6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80114fa:	f7ff ff1f 	bl	801133c <ptr_to_mem>
 80114fe:	4603      	mov	r3, r0
 8011500:	4a14      	ldr	r2, [pc, #80]	; (8011554 <mem_init+0x8c>)
 8011502:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011504:	4b13      	ldr	r3, [pc, #76]	; (8011554 <mem_init+0x8c>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2201      	movs	r2, #1
 801150a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801150c:	4b11      	ldr	r3, [pc, #68]	; (8011554 <mem_init+0x8c>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011514:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011516:	4b0f      	ldr	r3, [pc, #60]	; (8011554 <mem_init+0x8c>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801151e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011520:	4b0b      	ldr	r3, [pc, #44]	; (8011550 <mem_init+0x88>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	4a0c      	ldr	r2, [pc, #48]	; (8011558 <mem_init+0x90>)
 8011526:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011528:	480c      	ldr	r0, [pc, #48]	; (801155c <mem_init+0x94>)
 801152a:	f00c ff7d 	bl	801e428 <sys_mutex_new>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d006      	beq.n	8011542 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011534:	4b0a      	ldr	r3, [pc, #40]	; (8011560 <mem_init+0x98>)
 8011536:	f240 221f 	movw	r2, #543	; 0x21f
 801153a:	490a      	ldr	r1, [pc, #40]	; (8011564 <mem_init+0x9c>)
 801153c:	480a      	ldr	r0, [pc, #40]	; (8011568 <mem_init+0xa0>)
 801153e:	f00e f9c1 	bl	801f8c4 <iprintf>
  }
}
 8011542:	bf00      	nop
 8011544:	3708      	adds	r7, #8
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	2000ca6c 	.word	0x2000ca6c
 8011550:	2000d0c0 	.word	0x2000d0c0
 8011554:	2000d0c4 	.word	0x2000d0c4
 8011558:	2000d0cc 	.word	0x2000d0cc
 801155c:	2000d0c8 	.word	0x2000d0c8
 8011560:	0802231c 	.word	0x0802231c
 8011564:	080223f0 	.word	0x080223f0
 8011568:	08022364 	.word	0x08022364

0801156c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b086      	sub	sp, #24
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7ff fef3 	bl	8011360 <mem_to_ptr>
 801157a:	4603      	mov	r3, r0
 801157c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	881b      	ldrh	r3, [r3, #0]
 8011582:	4618      	mov	r0, r3
 8011584:	f7ff feda 	bl	801133c <ptr_to_mem>
 8011588:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	885b      	ldrh	r3, [r3, #2]
 801158e:	4618      	mov	r0, r3
 8011590:	f7ff fed4 	bl	801133c <ptr_to_mem>
 8011594:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	881b      	ldrh	r3, [r3, #0]
 801159a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801159e:	d818      	bhi.n	80115d2 <mem_link_valid+0x66>
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	885b      	ldrh	r3, [r3, #2]
 80115a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80115a8:	d813      	bhi.n	80115d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80115ae:	8afa      	ldrh	r2, [r7, #22]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d004      	beq.n	80115be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	881b      	ldrh	r3, [r3, #0]
 80115b8:	8afa      	ldrh	r2, [r7, #22]
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d109      	bne.n	80115d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80115be:	4b08      	ldr	r3, [pc, #32]	; (80115e0 <mem_link_valid+0x74>)
 80115c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80115c2:	693a      	ldr	r2, [r7, #16]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d006      	beq.n	80115d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	885b      	ldrh	r3, [r3, #2]
 80115cc:	8afa      	ldrh	r2, [r7, #22]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d001      	beq.n	80115d6 <mem_link_valid+0x6a>
    return 0;
 80115d2:	2300      	movs	r3, #0
 80115d4:	e000      	b.n	80115d8 <mem_link_valid+0x6c>
  }
  return 1;
 80115d6:	2301      	movs	r3, #1
}
 80115d8:	4618      	mov	r0, r3
 80115da:	3718      	adds	r7, #24
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}
 80115e0:	2000d0c4 	.word	0x2000d0c4

080115e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b088      	sub	sp, #32
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d070      	beq.n	80116d4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f003 0303 	and.w	r3, r3, #3
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d00d      	beq.n	8011618 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80115fc:	4b37      	ldr	r3, [pc, #220]	; (80116dc <mem_free+0xf8>)
 80115fe:	f240 2273 	movw	r2, #627	; 0x273
 8011602:	4937      	ldr	r1, [pc, #220]	; (80116e0 <mem_free+0xfc>)
 8011604:	4837      	ldr	r0, [pc, #220]	; (80116e4 <mem_free+0x100>)
 8011606:	f00e f95d 	bl	801f8c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801160a:	f00c ff6b 	bl	801e4e4 <sys_arch_protect>
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f00c ff75 	bl	801e500 <sys_arch_unprotect>
    return;
 8011616:	e05e      	b.n	80116d6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	3b08      	subs	r3, #8
 801161c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801161e:	4b32      	ldr	r3, [pc, #200]	; (80116e8 <mem_free+0x104>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	69fa      	ldr	r2, [r7, #28]
 8011624:	429a      	cmp	r2, r3
 8011626:	d306      	bcc.n	8011636 <mem_free+0x52>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f103 020c 	add.w	r2, r3, #12
 801162e:	4b2f      	ldr	r3, [pc, #188]	; (80116ec <mem_free+0x108>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	429a      	cmp	r2, r3
 8011634:	d90d      	bls.n	8011652 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011636:	4b29      	ldr	r3, [pc, #164]	; (80116dc <mem_free+0xf8>)
 8011638:	f240 227f 	movw	r2, #639	; 0x27f
 801163c:	492c      	ldr	r1, [pc, #176]	; (80116f0 <mem_free+0x10c>)
 801163e:	4829      	ldr	r0, [pc, #164]	; (80116e4 <mem_free+0x100>)
 8011640:	f00e f940 	bl	801f8c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011644:	f00c ff4e 	bl	801e4e4 <sys_arch_protect>
 8011648:	6138      	str	r0, [r7, #16]
 801164a:	6938      	ldr	r0, [r7, #16]
 801164c:	f00c ff58 	bl	801e500 <sys_arch_unprotect>
    return;
 8011650:	e041      	b.n	80116d6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011652:	4828      	ldr	r0, [pc, #160]	; (80116f4 <mem_free+0x110>)
 8011654:	f00c ff04 	bl	801e460 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	791b      	ldrb	r3, [r3, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d110      	bne.n	8011682 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011660:	4b1e      	ldr	r3, [pc, #120]	; (80116dc <mem_free+0xf8>)
 8011662:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011666:	4924      	ldr	r1, [pc, #144]	; (80116f8 <mem_free+0x114>)
 8011668:	481e      	ldr	r0, [pc, #120]	; (80116e4 <mem_free+0x100>)
 801166a:	f00e f92b 	bl	801f8c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801166e:	4821      	ldr	r0, [pc, #132]	; (80116f4 <mem_free+0x110>)
 8011670:	f00c ff05 	bl	801e47e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011674:	f00c ff36 	bl	801e4e4 <sys_arch_protect>
 8011678:	6178      	str	r0, [r7, #20]
 801167a:	6978      	ldr	r0, [r7, #20]
 801167c:	f00c ff40 	bl	801e500 <sys_arch_unprotect>
    return;
 8011680:	e029      	b.n	80116d6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011682:	69f8      	ldr	r0, [r7, #28]
 8011684:	f7ff ff72 	bl	801156c <mem_link_valid>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	d110      	bne.n	80116b0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801168e:	4b13      	ldr	r3, [pc, #76]	; (80116dc <mem_free+0xf8>)
 8011690:	f240 2295 	movw	r2, #661	; 0x295
 8011694:	4919      	ldr	r1, [pc, #100]	; (80116fc <mem_free+0x118>)
 8011696:	4813      	ldr	r0, [pc, #76]	; (80116e4 <mem_free+0x100>)
 8011698:	f00e f914 	bl	801f8c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801169c:	4815      	ldr	r0, [pc, #84]	; (80116f4 <mem_free+0x110>)
 801169e:	f00c feee 	bl	801e47e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80116a2:	f00c ff1f 	bl	801e4e4 <sys_arch_protect>
 80116a6:	61b8      	str	r0, [r7, #24]
 80116a8:	69b8      	ldr	r0, [r7, #24]
 80116aa:	f00c ff29 	bl	801e500 <sys_arch_unprotect>
    return;
 80116ae:	e012      	b.n	80116d6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80116b0:	69fb      	ldr	r3, [r7, #28]
 80116b2:	2200      	movs	r2, #0
 80116b4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80116b6:	4b12      	ldr	r3, [pc, #72]	; (8011700 <mem_free+0x11c>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	69fa      	ldr	r2, [r7, #28]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d202      	bcs.n	80116c6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80116c0:	4a0f      	ldr	r2, [pc, #60]	; (8011700 <mem_free+0x11c>)
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80116c6:	69f8      	ldr	r0, [r7, #28]
 80116c8:	f7ff fe5c 	bl	8011384 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80116cc:	4809      	ldr	r0, [pc, #36]	; (80116f4 <mem_free+0x110>)
 80116ce:	f00c fed6 	bl	801e47e <sys_mutex_unlock>
 80116d2:	e000      	b.n	80116d6 <mem_free+0xf2>
    return;
 80116d4:	bf00      	nop
}
 80116d6:	3720      	adds	r7, #32
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd80      	pop	{r7, pc}
 80116dc:	0802231c 	.word	0x0802231c
 80116e0:	0802240c 	.word	0x0802240c
 80116e4:	08022364 	.word	0x08022364
 80116e8:	2000d0c0 	.word	0x2000d0c0
 80116ec:	2000d0c4 	.word	0x2000d0c4
 80116f0:	08022430 	.word	0x08022430
 80116f4:	2000d0c8 	.word	0x2000d0c8
 80116f8:	0802244c 	.word	0x0802244c
 80116fc:	08022474 	.word	0x08022474
 8011700:	2000d0cc 	.word	0x2000d0cc

08011704 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b088      	sub	sp, #32
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	460b      	mov	r3, r1
 801170e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011710:	887b      	ldrh	r3, [r7, #2]
 8011712:	3303      	adds	r3, #3
 8011714:	b29b      	uxth	r3, r3
 8011716:	f023 0303 	bic.w	r3, r3, #3
 801171a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801171c:	8bfb      	ldrh	r3, [r7, #30]
 801171e:	2b0b      	cmp	r3, #11
 8011720:	d801      	bhi.n	8011726 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011722:	230c      	movs	r3, #12
 8011724:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011726:	8bfb      	ldrh	r3, [r7, #30]
 8011728:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801172c:	d803      	bhi.n	8011736 <mem_trim+0x32>
 801172e:	8bfa      	ldrh	r2, [r7, #30]
 8011730:	887b      	ldrh	r3, [r7, #2]
 8011732:	429a      	cmp	r2, r3
 8011734:	d201      	bcs.n	801173a <mem_trim+0x36>
    return NULL;
 8011736:	2300      	movs	r3, #0
 8011738:	e0d8      	b.n	80118ec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801173a:	4b6e      	ldr	r3, [pc, #440]	; (80118f4 <mem_trim+0x1f0>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	687a      	ldr	r2, [r7, #4]
 8011740:	429a      	cmp	r2, r3
 8011742:	d304      	bcc.n	801174e <mem_trim+0x4a>
 8011744:	4b6c      	ldr	r3, [pc, #432]	; (80118f8 <mem_trim+0x1f4>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	687a      	ldr	r2, [r7, #4]
 801174a:	429a      	cmp	r2, r3
 801174c:	d306      	bcc.n	801175c <mem_trim+0x58>
 801174e:	4b6b      	ldr	r3, [pc, #428]	; (80118fc <mem_trim+0x1f8>)
 8011750:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011754:	496a      	ldr	r1, [pc, #424]	; (8011900 <mem_trim+0x1fc>)
 8011756:	486b      	ldr	r0, [pc, #428]	; (8011904 <mem_trim+0x200>)
 8011758:	f00e f8b4 	bl	801f8c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801175c:	4b65      	ldr	r3, [pc, #404]	; (80118f4 <mem_trim+0x1f0>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	429a      	cmp	r2, r3
 8011764:	d304      	bcc.n	8011770 <mem_trim+0x6c>
 8011766:	4b64      	ldr	r3, [pc, #400]	; (80118f8 <mem_trim+0x1f4>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	429a      	cmp	r2, r3
 801176e:	d307      	bcc.n	8011780 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011770:	f00c feb8 	bl	801e4e4 <sys_arch_protect>
 8011774:	60b8      	str	r0, [r7, #8]
 8011776:	68b8      	ldr	r0, [r7, #8]
 8011778:	f00c fec2 	bl	801e500 <sys_arch_unprotect>
    return rmem;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	e0b5      	b.n	80118ec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	3b08      	subs	r3, #8
 8011784:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011786:	69b8      	ldr	r0, [r7, #24]
 8011788:	f7ff fdea 	bl	8011360 <mem_to_ptr>
 801178c:	4603      	mov	r3, r0
 801178e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	881a      	ldrh	r2, [r3, #0]
 8011794:	8afb      	ldrh	r3, [r7, #22]
 8011796:	1ad3      	subs	r3, r2, r3
 8011798:	b29b      	uxth	r3, r3
 801179a:	3b08      	subs	r3, #8
 801179c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801179e:	8bfa      	ldrh	r2, [r7, #30]
 80117a0:	8abb      	ldrh	r3, [r7, #20]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d906      	bls.n	80117b4 <mem_trim+0xb0>
 80117a6:	4b55      	ldr	r3, [pc, #340]	; (80118fc <mem_trim+0x1f8>)
 80117a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80117ac:	4956      	ldr	r1, [pc, #344]	; (8011908 <mem_trim+0x204>)
 80117ae:	4855      	ldr	r0, [pc, #340]	; (8011904 <mem_trim+0x200>)
 80117b0:	f00e f888 	bl	801f8c4 <iprintf>
  if (newsize > size) {
 80117b4:	8bfa      	ldrh	r2, [r7, #30]
 80117b6:	8abb      	ldrh	r3, [r7, #20]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d901      	bls.n	80117c0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80117bc:	2300      	movs	r3, #0
 80117be:	e095      	b.n	80118ec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80117c0:	8bfa      	ldrh	r2, [r7, #30]
 80117c2:	8abb      	ldrh	r3, [r7, #20]
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d101      	bne.n	80117cc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	e08f      	b.n	80118ec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80117cc:	484f      	ldr	r0, [pc, #316]	; (801190c <mem_trim+0x208>)
 80117ce:	f00c fe47 	bl	801e460 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80117d2:	69bb      	ldr	r3, [r7, #24]
 80117d4:	881b      	ldrh	r3, [r3, #0]
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7ff fdb0 	bl	801133c <ptr_to_mem>
 80117dc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	791b      	ldrb	r3, [r3, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d13f      	bne.n	8011866 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	881b      	ldrh	r3, [r3, #0]
 80117ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80117ee:	d106      	bne.n	80117fe <mem_trim+0xfa>
 80117f0:	4b42      	ldr	r3, [pc, #264]	; (80118fc <mem_trim+0x1f8>)
 80117f2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80117f6:	4946      	ldr	r1, [pc, #280]	; (8011910 <mem_trim+0x20c>)
 80117f8:	4842      	ldr	r0, [pc, #264]	; (8011904 <mem_trim+0x200>)
 80117fa:	f00e f863 	bl	801f8c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011804:	8afa      	ldrh	r2, [r7, #22]
 8011806:	8bfb      	ldrh	r3, [r7, #30]
 8011808:	4413      	add	r3, r2
 801180a:	b29b      	uxth	r3, r3
 801180c:	3308      	adds	r3, #8
 801180e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011810:	4b40      	ldr	r3, [pc, #256]	; (8011914 <mem_trim+0x210>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	693a      	ldr	r2, [r7, #16]
 8011816:	429a      	cmp	r2, r3
 8011818:	d106      	bne.n	8011828 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801181a:	89fb      	ldrh	r3, [r7, #14]
 801181c:	4618      	mov	r0, r3
 801181e:	f7ff fd8d 	bl	801133c <ptr_to_mem>
 8011822:	4603      	mov	r3, r0
 8011824:	4a3b      	ldr	r2, [pc, #236]	; (8011914 <mem_trim+0x210>)
 8011826:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011828:	89fb      	ldrh	r3, [r7, #14]
 801182a:	4618      	mov	r0, r3
 801182c:	f7ff fd86 	bl	801133c <ptr_to_mem>
 8011830:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	2200      	movs	r2, #0
 8011836:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	89ba      	ldrh	r2, [r7, #12]
 801183c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	8afa      	ldrh	r2, [r7, #22]
 8011842:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011844:	69bb      	ldr	r3, [r7, #24]
 8011846:	89fa      	ldrh	r2, [r7, #14]
 8011848:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	881b      	ldrh	r3, [r3, #0]
 801184e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011852:	d047      	beq.n	80118e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	881b      	ldrh	r3, [r3, #0]
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff fd6f 	bl	801133c <ptr_to_mem>
 801185e:	4602      	mov	r2, r0
 8011860:	89fb      	ldrh	r3, [r7, #14]
 8011862:	8053      	strh	r3, [r2, #2]
 8011864:	e03e      	b.n	80118e4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011866:	8bfb      	ldrh	r3, [r7, #30]
 8011868:	f103 0214 	add.w	r2, r3, #20
 801186c:	8abb      	ldrh	r3, [r7, #20]
 801186e:	429a      	cmp	r2, r3
 8011870:	d838      	bhi.n	80118e4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011872:	8afa      	ldrh	r2, [r7, #22]
 8011874:	8bfb      	ldrh	r3, [r7, #30]
 8011876:	4413      	add	r3, r2
 8011878:	b29b      	uxth	r3, r3
 801187a:	3308      	adds	r3, #8
 801187c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801187e:	69bb      	ldr	r3, [r7, #24]
 8011880:	881b      	ldrh	r3, [r3, #0]
 8011882:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011886:	d106      	bne.n	8011896 <mem_trim+0x192>
 8011888:	4b1c      	ldr	r3, [pc, #112]	; (80118fc <mem_trim+0x1f8>)
 801188a:	f240 3216 	movw	r2, #790	; 0x316
 801188e:	4920      	ldr	r1, [pc, #128]	; (8011910 <mem_trim+0x20c>)
 8011890:	481c      	ldr	r0, [pc, #112]	; (8011904 <mem_trim+0x200>)
 8011892:	f00e f817 	bl	801f8c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011896:	89fb      	ldrh	r3, [r7, #14]
 8011898:	4618      	mov	r0, r3
 801189a:	f7ff fd4f 	bl	801133c <ptr_to_mem>
 801189e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80118a0:	4b1c      	ldr	r3, [pc, #112]	; (8011914 <mem_trim+0x210>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	693a      	ldr	r2, [r7, #16]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d202      	bcs.n	80118b0 <mem_trim+0x1ac>
      lfree = mem2;
 80118aa:	4a1a      	ldr	r2, [pc, #104]	; (8011914 <mem_trim+0x210>)
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	2200      	movs	r2, #0
 80118b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80118b6:	69bb      	ldr	r3, [r7, #24]
 80118b8:	881a      	ldrh	r2, [r3, #0]
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80118be:	693b      	ldr	r3, [r7, #16]
 80118c0:	8afa      	ldrh	r2, [r7, #22]
 80118c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	89fa      	ldrh	r2, [r7, #14]
 80118c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	881b      	ldrh	r3, [r3, #0]
 80118ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80118d2:	d007      	beq.n	80118e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80118d4:	693b      	ldr	r3, [r7, #16]
 80118d6:	881b      	ldrh	r3, [r3, #0]
 80118d8:	4618      	mov	r0, r3
 80118da:	f7ff fd2f 	bl	801133c <ptr_to_mem>
 80118de:	4602      	mov	r2, r0
 80118e0:	89fb      	ldrh	r3, [r7, #14]
 80118e2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80118e4:	4809      	ldr	r0, [pc, #36]	; (801190c <mem_trim+0x208>)
 80118e6:	f00c fdca 	bl	801e47e <sys_mutex_unlock>
  return rmem;
 80118ea:	687b      	ldr	r3, [r7, #4]
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3720      	adds	r7, #32
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	2000d0c0 	.word	0x2000d0c0
 80118f8:	2000d0c4 	.word	0x2000d0c4
 80118fc:	0802231c 	.word	0x0802231c
 8011900:	080224a8 	.word	0x080224a8
 8011904:	08022364 	.word	0x08022364
 8011908:	080224c0 	.word	0x080224c0
 801190c:	2000d0c8 	.word	0x2000d0c8
 8011910:	080224e0 	.word	0x080224e0
 8011914:	2000d0cc 	.word	0x2000d0cc

08011918 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b088      	sub	sp, #32
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011922:	88fb      	ldrh	r3, [r7, #6]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d101      	bne.n	801192c <mem_malloc+0x14>
    return NULL;
 8011928:	2300      	movs	r3, #0
 801192a:	e0e2      	b.n	8011af2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801192c:	88fb      	ldrh	r3, [r7, #6]
 801192e:	3303      	adds	r3, #3
 8011930:	b29b      	uxth	r3, r3
 8011932:	f023 0303 	bic.w	r3, r3, #3
 8011936:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011938:	8bbb      	ldrh	r3, [r7, #28]
 801193a:	2b0b      	cmp	r3, #11
 801193c:	d801      	bhi.n	8011942 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801193e:	230c      	movs	r3, #12
 8011940:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011942:	8bbb      	ldrh	r3, [r7, #28]
 8011944:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011948:	d803      	bhi.n	8011952 <mem_malloc+0x3a>
 801194a:	8bba      	ldrh	r2, [r7, #28]
 801194c:	88fb      	ldrh	r3, [r7, #6]
 801194e:	429a      	cmp	r2, r3
 8011950:	d201      	bcs.n	8011956 <mem_malloc+0x3e>
    return NULL;
 8011952:	2300      	movs	r3, #0
 8011954:	e0cd      	b.n	8011af2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011956:	4869      	ldr	r0, [pc, #420]	; (8011afc <mem_malloc+0x1e4>)
 8011958:	f00c fd82 	bl	801e460 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801195c:	4b68      	ldr	r3, [pc, #416]	; (8011b00 <mem_malloc+0x1e8>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4618      	mov	r0, r3
 8011962:	f7ff fcfd 	bl	8011360 <mem_to_ptr>
 8011966:	4603      	mov	r3, r0
 8011968:	83fb      	strh	r3, [r7, #30]
 801196a:	e0b7      	b.n	8011adc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801196c:	8bfb      	ldrh	r3, [r7, #30]
 801196e:	4618      	mov	r0, r3
 8011970:	f7ff fce4 	bl	801133c <ptr_to_mem>
 8011974:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	791b      	ldrb	r3, [r3, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	f040 80a7 	bne.w	8011ace <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	881b      	ldrh	r3, [r3, #0]
 8011984:	461a      	mov	r2, r3
 8011986:	8bfb      	ldrh	r3, [r7, #30]
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	f1a3 0208 	sub.w	r2, r3, #8
 801198e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011990:	429a      	cmp	r2, r3
 8011992:	f0c0 809c 	bcc.w	8011ace <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	881b      	ldrh	r3, [r3, #0]
 801199a:	461a      	mov	r2, r3
 801199c:	8bfb      	ldrh	r3, [r7, #30]
 801199e:	1ad3      	subs	r3, r2, r3
 80119a0:	f1a3 0208 	sub.w	r2, r3, #8
 80119a4:	8bbb      	ldrh	r3, [r7, #28]
 80119a6:	3314      	adds	r3, #20
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d333      	bcc.n	8011a14 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80119ac:	8bfa      	ldrh	r2, [r7, #30]
 80119ae:	8bbb      	ldrh	r3, [r7, #28]
 80119b0:	4413      	add	r3, r2
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	3308      	adds	r3, #8
 80119b6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80119b8:	8a7b      	ldrh	r3, [r7, #18]
 80119ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80119be:	d106      	bne.n	80119ce <mem_malloc+0xb6>
 80119c0:	4b50      	ldr	r3, [pc, #320]	; (8011b04 <mem_malloc+0x1ec>)
 80119c2:	f240 3287 	movw	r2, #903	; 0x387
 80119c6:	4950      	ldr	r1, [pc, #320]	; (8011b08 <mem_malloc+0x1f0>)
 80119c8:	4850      	ldr	r0, [pc, #320]	; (8011b0c <mem_malloc+0x1f4>)
 80119ca:	f00d ff7b 	bl	801f8c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80119ce:	8a7b      	ldrh	r3, [r7, #18]
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7ff fcb3 	bl	801133c <ptr_to_mem>
 80119d6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2200      	movs	r2, #0
 80119dc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	881a      	ldrh	r2, [r3, #0]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	8bfa      	ldrh	r2, [r7, #30]
 80119ea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	8a7a      	ldrh	r2, [r7, #18]
 80119f0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	2201      	movs	r2, #1
 80119f6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	881b      	ldrh	r3, [r3, #0]
 80119fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a00:	d00b      	beq.n	8011a1a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7ff fc98 	bl	801133c <ptr_to_mem>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	8a7b      	ldrh	r3, [r7, #18]
 8011a10:	8053      	strh	r3, [r2, #2]
 8011a12:	e002      	b.n	8011a1a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	2201      	movs	r2, #1
 8011a18:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011a1a:	4b39      	ldr	r3, [pc, #228]	; (8011b00 <mem_malloc+0x1e8>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	697a      	ldr	r2, [r7, #20]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d127      	bne.n	8011a74 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011a24:	4b36      	ldr	r3, [pc, #216]	; (8011b00 <mem_malloc+0x1e8>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011a2a:	e005      	b.n	8011a38 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011a2c:	69bb      	ldr	r3, [r7, #24]
 8011a2e:	881b      	ldrh	r3, [r3, #0]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff fc83 	bl	801133c <ptr_to_mem>
 8011a36:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011a38:	69bb      	ldr	r3, [r7, #24]
 8011a3a:	791b      	ldrb	r3, [r3, #4]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d004      	beq.n	8011a4a <mem_malloc+0x132>
 8011a40:	4b33      	ldr	r3, [pc, #204]	; (8011b10 <mem_malloc+0x1f8>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	69ba      	ldr	r2, [r7, #24]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d1f0      	bne.n	8011a2c <mem_malloc+0x114>
          }
          lfree = cur;
 8011a4a:	4a2d      	ldr	r2, [pc, #180]	; (8011b00 <mem_malloc+0x1e8>)
 8011a4c:	69bb      	ldr	r3, [r7, #24]
 8011a4e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011a50:	4b2b      	ldr	r3, [pc, #172]	; (8011b00 <mem_malloc+0x1e8>)
 8011a52:	681a      	ldr	r2, [r3, #0]
 8011a54:	4b2e      	ldr	r3, [pc, #184]	; (8011b10 <mem_malloc+0x1f8>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d00b      	beq.n	8011a74 <mem_malloc+0x15c>
 8011a5c:	4b28      	ldr	r3, [pc, #160]	; (8011b00 <mem_malloc+0x1e8>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	791b      	ldrb	r3, [r3, #4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d006      	beq.n	8011a74 <mem_malloc+0x15c>
 8011a66:	4b27      	ldr	r3, [pc, #156]	; (8011b04 <mem_malloc+0x1ec>)
 8011a68:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011a6c:	4929      	ldr	r1, [pc, #164]	; (8011b14 <mem_malloc+0x1fc>)
 8011a6e:	4827      	ldr	r0, [pc, #156]	; (8011b0c <mem_malloc+0x1f4>)
 8011a70:	f00d ff28 	bl	801f8c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011a74:	4821      	ldr	r0, [pc, #132]	; (8011afc <mem_malloc+0x1e4>)
 8011a76:	f00c fd02 	bl	801e47e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011a7a:	8bba      	ldrh	r2, [r7, #28]
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	4413      	add	r3, r2
 8011a80:	3308      	adds	r3, #8
 8011a82:	4a23      	ldr	r2, [pc, #140]	; (8011b10 <mem_malloc+0x1f8>)
 8011a84:	6812      	ldr	r2, [r2, #0]
 8011a86:	4293      	cmp	r3, r2
 8011a88:	d906      	bls.n	8011a98 <mem_malloc+0x180>
 8011a8a:	4b1e      	ldr	r3, [pc, #120]	; (8011b04 <mem_malloc+0x1ec>)
 8011a8c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011a90:	4921      	ldr	r1, [pc, #132]	; (8011b18 <mem_malloc+0x200>)
 8011a92:	481e      	ldr	r0, [pc, #120]	; (8011b0c <mem_malloc+0x1f4>)
 8011a94:	f00d ff16 	bl	801f8c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	f003 0303 	and.w	r3, r3, #3
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d006      	beq.n	8011ab0 <mem_malloc+0x198>
 8011aa2:	4b18      	ldr	r3, [pc, #96]	; (8011b04 <mem_malloc+0x1ec>)
 8011aa4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011aa8:	491c      	ldr	r1, [pc, #112]	; (8011b1c <mem_malloc+0x204>)
 8011aaa:	4818      	ldr	r0, [pc, #96]	; (8011b0c <mem_malloc+0x1f4>)
 8011aac:	f00d ff0a 	bl	801f8c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	f003 0303 	and.w	r3, r3, #3
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d006      	beq.n	8011ac8 <mem_malloc+0x1b0>
 8011aba:	4b12      	ldr	r3, [pc, #72]	; (8011b04 <mem_malloc+0x1ec>)
 8011abc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011ac0:	4917      	ldr	r1, [pc, #92]	; (8011b20 <mem_malloc+0x208>)
 8011ac2:	4812      	ldr	r0, [pc, #72]	; (8011b0c <mem_malloc+0x1f4>)
 8011ac4:	f00d fefe 	bl	801f8c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	3308      	adds	r3, #8
 8011acc:	e011      	b.n	8011af2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011ace:	8bfb      	ldrh	r3, [r7, #30]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7ff fc33 	bl	801133c <ptr_to_mem>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011adc:	8bfa      	ldrh	r2, [r7, #30]
 8011ade:	8bbb      	ldrh	r3, [r7, #28]
 8011ae0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	f4ff af41 	bcc.w	801196c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011aea:	4804      	ldr	r0, [pc, #16]	; (8011afc <mem_malloc+0x1e4>)
 8011aec:	f00c fcc7 	bl	801e47e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3720      	adds	r7, #32
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	2000d0c8 	.word	0x2000d0c8
 8011b00:	2000d0cc 	.word	0x2000d0cc
 8011b04:	0802231c 	.word	0x0802231c
 8011b08:	080224e0 	.word	0x080224e0
 8011b0c:	08022364 	.word	0x08022364
 8011b10:	2000d0c4 	.word	0x2000d0c4
 8011b14:	080224f4 	.word	0x080224f4
 8011b18:	08022510 	.word	0x08022510
 8011b1c:	08022540 	.word	0x08022540
 8011b20:	08022570 	.word	0x08022570

08011b24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b085      	sub	sp, #20
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	689b      	ldr	r3, [r3, #8]
 8011b30:	2200      	movs	r2, #0
 8011b32:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	3303      	adds	r3, #3
 8011b3a:	f023 0303 	bic.w	r3, r3, #3
 8011b3e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011b40:	2300      	movs	r3, #0
 8011b42:	60fb      	str	r3, [r7, #12]
 8011b44:	e011      	b.n	8011b6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	689b      	ldr	r3, [r3, #8]
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	689b      	ldr	r3, [r3, #8]
 8011b54:	68ba      	ldr	r2, [r7, #8]
 8011b56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	881b      	ldrh	r3, [r3, #0]
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	4413      	add	r3, r2
 8011b62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	3301      	adds	r3, #1
 8011b68:	60fb      	str	r3, [r7, #12]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	885b      	ldrh	r3, [r3, #2]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	4293      	cmp	r3, r2
 8011b74:	dbe7      	blt.n	8011b46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011b76:	bf00      	nop
 8011b78:	bf00      	nop
 8011b7a:	3714      	adds	r7, #20
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	80fb      	strh	r3, [r7, #6]
 8011b8e:	e009      	b.n	8011ba4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011b90:	88fb      	ldrh	r3, [r7, #6]
 8011b92:	4a08      	ldr	r2, [pc, #32]	; (8011bb4 <memp_init+0x30>)
 8011b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7ff ffc3 	bl	8011b24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011b9e:	88fb      	ldrh	r3, [r7, #6]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	80fb      	strh	r3, [r7, #6]
 8011ba4:	88fb      	ldrh	r3, [r7, #6]
 8011ba6:	2b0c      	cmp	r3, #12
 8011ba8:	d9f2      	bls.n	8011b90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011baa:	bf00      	nop
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	08025214 	.word	0x08025214

08011bb8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b084      	sub	sp, #16
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011bc0:	f00c fc90 	bl	801e4e4 <sys_arch_protect>
 8011bc4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d015      	beq.n	8011c00 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	689b      	ldr	r3, [r3, #8]
 8011bd8:	68ba      	ldr	r2, [r7, #8]
 8011bda:	6812      	ldr	r2, [r2, #0]
 8011bdc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	f003 0303 	and.w	r3, r3, #3
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d006      	beq.n	8011bf6 <do_memp_malloc_pool+0x3e>
 8011be8:	4b09      	ldr	r3, [pc, #36]	; (8011c10 <do_memp_malloc_pool+0x58>)
 8011bea:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011bee:	4909      	ldr	r1, [pc, #36]	; (8011c14 <do_memp_malloc_pool+0x5c>)
 8011bf0:	4809      	ldr	r0, [pc, #36]	; (8011c18 <do_memp_malloc_pool+0x60>)
 8011bf2:	f00d fe67 	bl	801f8c4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011bf6:	68f8      	ldr	r0, [r7, #12]
 8011bf8:	f00c fc82 	bl	801e500 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	e003      	b.n	8011c08 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011c00:	68f8      	ldr	r0, [r7, #12]
 8011c02:	f00c fc7d 	bl	801e500 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011c06:	2300      	movs	r3, #0
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3710      	adds	r7, #16
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}
 8011c10:	08022594 	.word	0x08022594
 8011c14:	080225c4 	.word	0x080225c4
 8011c18:	080225e8 	.word	0x080225e8

08011c1c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <memp_malloc_pool+0x1c>
 8011c2a:	4b0a      	ldr	r3, [pc, #40]	; (8011c54 <memp_malloc_pool+0x38>)
 8011c2c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011c30:	4909      	ldr	r1, [pc, #36]	; (8011c58 <memp_malloc_pool+0x3c>)
 8011c32:	480a      	ldr	r0, [pc, #40]	; (8011c5c <memp_malloc_pool+0x40>)
 8011c34:	f00d fe46 	bl	801f8c4 <iprintf>
  if (desc == NULL) {
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d101      	bne.n	8011c42 <memp_malloc_pool+0x26>
    return NULL;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	e003      	b.n	8011c4a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f7ff ffb8 	bl	8011bb8 <do_memp_malloc_pool>
 8011c48:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	08022594 	.word	0x08022594
 8011c58:	08022610 	.word	0x08022610
 8011c5c:	080225e8 	.word	0x080225e8

08011c60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b084      	sub	sp, #16
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	4603      	mov	r3, r0
 8011c68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011c6a:	79fb      	ldrb	r3, [r7, #7]
 8011c6c:	2b0c      	cmp	r3, #12
 8011c6e:	d908      	bls.n	8011c82 <memp_malloc+0x22>
 8011c70:	4b0a      	ldr	r3, [pc, #40]	; (8011c9c <memp_malloc+0x3c>)
 8011c72:	f240 1257 	movw	r2, #343	; 0x157
 8011c76:	490a      	ldr	r1, [pc, #40]	; (8011ca0 <memp_malloc+0x40>)
 8011c78:	480a      	ldr	r0, [pc, #40]	; (8011ca4 <memp_malloc+0x44>)
 8011c7a:	f00d fe23 	bl	801f8c4 <iprintf>
 8011c7e:	2300      	movs	r3, #0
 8011c80:	e008      	b.n	8011c94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011c82:	79fb      	ldrb	r3, [r7, #7]
 8011c84:	4a08      	ldr	r2, [pc, #32]	; (8011ca8 <memp_malloc+0x48>)
 8011c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7ff ff94 	bl	8011bb8 <do_memp_malloc_pool>
 8011c90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011c92:	68fb      	ldr	r3, [r7, #12]
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3710      	adds	r7, #16
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	08022594 	.word	0x08022594
 8011ca0:	08022624 	.word	0x08022624
 8011ca4:	080225e8 	.word	0x080225e8
 8011ca8:	08025214 	.word	0x08025214

08011cac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	f003 0303 	and.w	r3, r3, #3
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d006      	beq.n	8011cce <do_memp_free_pool+0x22>
 8011cc0:	4b0d      	ldr	r3, [pc, #52]	; (8011cf8 <do_memp_free_pool+0x4c>)
 8011cc2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011cc6:	490d      	ldr	r1, [pc, #52]	; (8011cfc <do_memp_free_pool+0x50>)
 8011cc8:	480d      	ldr	r0, [pc, #52]	; (8011d00 <do_memp_free_pool+0x54>)
 8011cca:	f00d fdfb 	bl	801f8c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011cd2:	f00c fc07 	bl	801e4e4 <sys_arch_protect>
 8011cd6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	68fa      	ldr	r2, [r7, #12]
 8011ce8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011cea:	68b8      	ldr	r0, [r7, #8]
 8011cec:	f00c fc08 	bl	801e500 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011cf0:	bf00      	nop
 8011cf2:	3710      	adds	r7, #16
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	08022594 	.word	0x08022594
 8011cfc:	08022644 	.word	0x08022644
 8011d00:	080225e8 	.word	0x080225e8

08011d04 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d106      	bne.n	8011d22 <memp_free_pool+0x1e>
 8011d14:	4b0a      	ldr	r3, [pc, #40]	; (8011d40 <memp_free_pool+0x3c>)
 8011d16:	f240 1295 	movw	r2, #405	; 0x195
 8011d1a:	490a      	ldr	r1, [pc, #40]	; (8011d44 <memp_free_pool+0x40>)
 8011d1c:	480a      	ldr	r0, [pc, #40]	; (8011d48 <memp_free_pool+0x44>)
 8011d1e:	f00d fdd1 	bl	801f8c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d007      	beq.n	8011d38 <memp_free_pool+0x34>
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d004      	beq.n	8011d38 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011d2e:	6839      	ldr	r1, [r7, #0]
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f7ff ffbb 	bl	8011cac <do_memp_free_pool>
 8011d36:	e000      	b.n	8011d3a <memp_free_pool+0x36>
    return;
 8011d38:	bf00      	nop
}
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	08022594 	.word	0x08022594
 8011d44:	08022610 	.word	0x08022610
 8011d48:	080225e8 	.word	0x080225e8

08011d4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	4603      	mov	r3, r0
 8011d54:	6039      	str	r1, [r7, #0]
 8011d56:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011d58:	79fb      	ldrb	r3, [r7, #7]
 8011d5a:	2b0c      	cmp	r3, #12
 8011d5c:	d907      	bls.n	8011d6e <memp_free+0x22>
 8011d5e:	4b0c      	ldr	r3, [pc, #48]	; (8011d90 <memp_free+0x44>)
 8011d60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011d64:	490b      	ldr	r1, [pc, #44]	; (8011d94 <memp_free+0x48>)
 8011d66:	480c      	ldr	r0, [pc, #48]	; (8011d98 <memp_free+0x4c>)
 8011d68:	f00d fdac 	bl	801f8c4 <iprintf>
 8011d6c:	e00c      	b.n	8011d88 <memp_free+0x3c>

  if (mem == NULL) {
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d008      	beq.n	8011d86 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011d74:	79fb      	ldrb	r3, [r7, #7]
 8011d76:	4a09      	ldr	r2, [pc, #36]	; (8011d9c <memp_free+0x50>)
 8011d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d7c:	6839      	ldr	r1, [r7, #0]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7ff ff94 	bl	8011cac <do_memp_free_pool>
 8011d84:	e000      	b.n	8011d88 <memp_free+0x3c>
    return;
 8011d86:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011d88:	3708      	adds	r7, #8
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	08022594 	.word	0x08022594
 8011d94:	08022664 	.word	0x08022664
 8011d98:	080225e8 	.word	0x080225e8
 8011d9c:	08025214 	.word	0x08025214

08011da0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011da0:	b480      	push	{r7}
 8011da2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011da4:	bf00      	nop
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr
	...

08011db0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b086      	sub	sp, #24
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
 8011dbc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d108      	bne.n	8011dd6 <netif_add+0x26>
 8011dc4:	4b5b      	ldr	r3, [pc, #364]	; (8011f34 <netif_add+0x184>)
 8011dc6:	f240 1227 	movw	r2, #295	; 0x127
 8011dca:	495b      	ldr	r1, [pc, #364]	; (8011f38 <netif_add+0x188>)
 8011dcc:	485b      	ldr	r0, [pc, #364]	; (8011f3c <netif_add+0x18c>)
 8011dce:	f00d fd79 	bl	801f8c4 <iprintf>
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	e0a9      	b.n	8011f2a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d108      	bne.n	8011dee <netif_add+0x3e>
 8011ddc:	4b55      	ldr	r3, [pc, #340]	; (8011f34 <netif_add+0x184>)
 8011dde:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011de2:	4957      	ldr	r1, [pc, #348]	; (8011f40 <netif_add+0x190>)
 8011de4:	4855      	ldr	r0, [pc, #340]	; (8011f3c <netif_add+0x18c>)
 8011de6:	f00d fd6d 	bl	801f8c4 <iprintf>
 8011dea:	2300      	movs	r3, #0
 8011dec:	e09d      	b.n	8011f2a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d101      	bne.n	8011df8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011df4:	4b53      	ldr	r3, [pc, #332]	; (8011f44 <netif_add+0x194>)
 8011df6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d101      	bne.n	8011e02 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011dfe:	4b51      	ldr	r3, [pc, #324]	; (8011f44 <netif_add+0x194>)
 8011e00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d101      	bne.n	8011e0c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011e08:	4b4e      	ldr	r3, [pc, #312]	; (8011f44 <netif_add+0x194>)
 8011e0a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2200      	movs	r2, #0
 8011e16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	4a49      	ldr	r2, [pc, #292]	; (8011f48 <netif_add+0x198>)
 8011e22:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	2200      	movs	r2, #0
 8011e28:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	3324      	adds	r3, #36	; 0x24
 8011e36:	2204      	movs	r2, #4
 8011e38:	2100      	movs	r1, #0
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f00d fe98 	bl	801fb70 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2200      	movs	r2, #0
 8011e44:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	6a3a      	ldr	r2, [r7, #32]
 8011e4a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011e4c:	4b3f      	ldr	r3, [pc, #252]	; (8011f4c <netif_add+0x19c>)
 8011e4e:	781a      	ldrb	r2, [r3, #0]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e5a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	687a      	ldr	r2, [r7, #4]
 8011e60:	68b9      	ldr	r1, [r7, #8]
 8011e62:	68f8      	ldr	r0, [r7, #12]
 8011e64:	f000 f914 	bl	8012090 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	4798      	blx	r3
 8011e6e:	4603      	mov	r3, r0
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d001      	beq.n	8011e78 <netif_add+0xc8>
    return NULL;
 8011e74:	2300      	movs	r3, #0
 8011e76:	e058      	b.n	8011f2a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011e7e:	2bff      	cmp	r3, #255	; 0xff
 8011e80:	d103      	bne.n	8011e8a <netif_add+0xda>
        netif->num = 0;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2200      	movs	r2, #0
 8011e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011e8e:	4b30      	ldr	r3, [pc, #192]	; (8011f50 <netif_add+0x1a0>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	617b      	str	r3, [r7, #20]
 8011e94:	e02b      	b.n	8011eee <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011e96:	697a      	ldr	r2, [r7, #20]
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d106      	bne.n	8011eac <netif_add+0xfc>
 8011e9e:	4b25      	ldr	r3, [pc, #148]	; (8011f34 <netif_add+0x184>)
 8011ea0:	f240 128b 	movw	r2, #395	; 0x18b
 8011ea4:	492b      	ldr	r1, [pc, #172]	; (8011f54 <netif_add+0x1a4>)
 8011ea6:	4825      	ldr	r0, [pc, #148]	; (8011f3c <netif_add+0x18c>)
 8011ea8:	f00d fd0c 	bl	801f8c4 <iprintf>
        num_netifs++;
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	3301      	adds	r3, #1
 8011eb0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	2bff      	cmp	r3, #255	; 0xff
 8011eb6:	dd06      	ble.n	8011ec6 <netif_add+0x116>
 8011eb8:	4b1e      	ldr	r3, [pc, #120]	; (8011f34 <netif_add+0x184>)
 8011eba:	f240 128d 	movw	r2, #397	; 0x18d
 8011ebe:	4926      	ldr	r1, [pc, #152]	; (8011f58 <netif_add+0x1a8>)
 8011ec0:	481e      	ldr	r0, [pc, #120]	; (8011f3c <netif_add+0x18c>)
 8011ec2:	f00d fcff 	bl	801f8c4 <iprintf>
        if (netif2->num == netif->num) {
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d108      	bne.n	8011ee8 <netif_add+0x138>
          netif->num++;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011edc:	3301      	adds	r3, #1
 8011ede:	b2da      	uxtb	r2, r3
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8011ee6:	e005      	b.n	8011ef4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	617b      	str	r3, [r7, #20]
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d1d0      	bne.n	8011e96 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1be      	bne.n	8011e78 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f00:	2bfe      	cmp	r3, #254	; 0xfe
 8011f02:	d103      	bne.n	8011f0c <netif_add+0x15c>
    netif_num = 0;
 8011f04:	4b11      	ldr	r3, [pc, #68]	; (8011f4c <netif_add+0x19c>)
 8011f06:	2200      	movs	r2, #0
 8011f08:	701a      	strb	r2, [r3, #0]
 8011f0a:	e006      	b.n	8011f1a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f12:	3301      	adds	r3, #1
 8011f14:	b2da      	uxtb	r2, r3
 8011f16:	4b0d      	ldr	r3, [pc, #52]	; (8011f4c <netif_add+0x19c>)
 8011f18:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011f1a:	4b0d      	ldr	r3, [pc, #52]	; (8011f50 <netif_add+0x1a0>)
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011f22:	4a0b      	ldr	r2, [pc, #44]	; (8011f50 <netif_add+0x1a0>)
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011f28:	68fb      	ldr	r3, [r7, #12]
}
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	3718      	adds	r7, #24
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	08022680 	.word	0x08022680
 8011f38:	08022714 	.word	0x08022714
 8011f3c:	080226d0 	.word	0x080226d0
 8011f40:	08022730 	.word	0x08022730
 8011f44:	08025298 	.word	0x08025298
 8011f48:	08012373 	.word	0x08012373
 8011f4c:	200101c4 	.word	0x200101c4
 8011f50:	200101bc 	.word	0x200101bc
 8011f54:	08022754 	.word	0x08022754
 8011f58:	08022768 	.word	0x08022768

08011f5c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011f66:	6839      	ldr	r1, [r7, #0]
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f002 feb5 	bl	8014cd8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011f6e:	6839      	ldr	r1, [r7, #0]
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f007 ff49 	bl	8019e08 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011f76:	bf00      	nop
 8011f78:	3708      	adds	r7, #8
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}
	...

08011f80 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b086      	sub	sp, #24
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d106      	bne.n	8011fa0 <netif_do_set_ipaddr+0x20>
 8011f92:	4b1d      	ldr	r3, [pc, #116]	; (8012008 <netif_do_set_ipaddr+0x88>)
 8011f94:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011f98:	491c      	ldr	r1, [pc, #112]	; (801200c <netif_do_set_ipaddr+0x8c>)
 8011f9a:	481d      	ldr	r0, [pc, #116]	; (8012010 <netif_do_set_ipaddr+0x90>)
 8011f9c:	f00d fc92 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d106      	bne.n	8011fb4 <netif_do_set_ipaddr+0x34>
 8011fa6:	4b18      	ldr	r3, [pc, #96]	; (8012008 <netif_do_set_ipaddr+0x88>)
 8011fa8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011fac:	4917      	ldr	r1, [pc, #92]	; (801200c <netif_do_set_ipaddr+0x8c>)
 8011fae:	4818      	ldr	r0, [pc, #96]	; (8012010 <netif_do_set_ipaddr+0x90>)
 8011fb0:	f00d fc88 	bl	801f8c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	3304      	adds	r3, #4
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d01c      	beq.n	8011ffc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	3304      	adds	r3, #4
 8011fcc:	681a      	ldr	r2, [r3, #0]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011fd2:	f107 0314 	add.w	r3, r7, #20
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f7ff ffbf 	bl	8011f5c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d002      	beq.n	8011fea <netif_do_set_ipaddr+0x6a>
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	e000      	b.n	8011fec <netif_do_set_ipaddr+0x6c>
 8011fea:	2300      	movs	r3, #0
 8011fec:	68fa      	ldr	r2, [r7, #12]
 8011fee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011ff0:	2101      	movs	r1, #1
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f000 f8d2 	bl	801219c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e000      	b.n	8011ffe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3718      	adds	r7, #24
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	08022680 	.word	0x08022680
 801200c:	08022798 	.word	0x08022798
 8012010:	080226d0 	.word	0x080226d0

08012014 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012014:	b480      	push	{r7}
 8012016:	b085      	sub	sp, #20
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	3308      	adds	r3, #8
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	429a      	cmp	r2, r3
 801202c:	d00a      	beq.n	8012044 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d002      	beq.n	801203a <netif_do_set_netmask+0x26>
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	e000      	b.n	801203c <netif_do_set_netmask+0x28>
 801203a:	2300      	movs	r3, #0
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012040:	2301      	movs	r3, #1
 8012042:	e000      	b.n	8012046 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	3714      	adds	r7, #20
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr

08012052 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012052:	b480      	push	{r7}
 8012054:	b085      	sub	sp, #20
 8012056:	af00      	add	r7, sp, #0
 8012058:	60f8      	str	r0, [r7, #12]
 801205a:	60b9      	str	r1, [r7, #8]
 801205c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	330c      	adds	r3, #12
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	429a      	cmp	r2, r3
 801206a:	d00a      	beq.n	8012082 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d002      	beq.n	8012078 <netif_do_set_gw+0x26>
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	e000      	b.n	801207a <netif_do_set_gw+0x28>
 8012078:	2300      	movs	r3, #0
 801207a:	68fa      	ldr	r2, [r7, #12]
 801207c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801207e:	2301      	movs	r3, #1
 8012080:	e000      	b.n	8012084 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012082:	2300      	movs	r3, #0
}
 8012084:	4618      	mov	r0, r3
 8012086:	3714      	adds	r7, #20
 8012088:	46bd      	mov	sp, r7
 801208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208e:	4770      	bx	lr

08012090 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b088      	sub	sp, #32
 8012094:	af00      	add	r7, sp, #0
 8012096:	60f8      	str	r0, [r7, #12]
 8012098:	60b9      	str	r1, [r7, #8]
 801209a:	607a      	str	r2, [r7, #4]
 801209c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801209e:	2300      	movs	r3, #0
 80120a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80120a2:	2300      	movs	r3, #0
 80120a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d101      	bne.n	80120b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80120ac:	4b1c      	ldr	r3, [pc, #112]	; (8012120 <netif_set_addr+0x90>)
 80120ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d101      	bne.n	80120ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80120b6:	4b1a      	ldr	r3, [pc, #104]	; (8012120 <netif_set_addr+0x90>)
 80120b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d101      	bne.n	80120c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80120c0:	4b17      	ldr	r3, [pc, #92]	; (8012120 <netif_set_addr+0x90>)
 80120c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d003      	beq.n	80120d2 <netif_set_addr+0x42>
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d101      	bne.n	80120d6 <netif_set_addr+0x46>
 80120d2:	2301      	movs	r3, #1
 80120d4:	e000      	b.n	80120d8 <netif_set_addr+0x48>
 80120d6:	2300      	movs	r3, #0
 80120d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d006      	beq.n	80120ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80120e0:	f107 0310 	add.w	r3, r7, #16
 80120e4:	461a      	mov	r2, r3
 80120e6:	68b9      	ldr	r1, [r7, #8]
 80120e8:	68f8      	ldr	r0, [r7, #12]
 80120ea:	f7ff ff49 	bl	8011f80 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80120ee:	69fa      	ldr	r2, [r7, #28]
 80120f0:	6879      	ldr	r1, [r7, #4]
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f7ff ff8e 	bl	8012014 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80120f8:	69ba      	ldr	r2, [r7, #24]
 80120fa:	6839      	ldr	r1, [r7, #0]
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	f7ff ffa8 	bl	8012052 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d106      	bne.n	8012116 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012108:	f107 0310 	add.w	r3, r7, #16
 801210c:	461a      	mov	r2, r3
 801210e:	68b9      	ldr	r1, [r7, #8]
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f7ff ff35 	bl	8011f80 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012116:	bf00      	nop
 8012118:	3720      	adds	r7, #32
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	08025298 	.word	0x08025298

08012124 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012124:	b480      	push	{r7}
 8012126:	b083      	sub	sp, #12
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801212c:	4a04      	ldr	r2, [pc, #16]	; (8012140 <netif_set_default+0x1c>)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012132:	bf00      	nop
 8012134:	370c      	adds	r7, #12
 8012136:	46bd      	mov	sp, r7
 8012138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213c:	4770      	bx	lr
 801213e:	bf00      	nop
 8012140:	200101c0 	.word	0x200101c0

08012144 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b082      	sub	sp, #8
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d107      	bne.n	8012162 <netif_set_up+0x1e>
 8012152:	4b0f      	ldr	r3, [pc, #60]	; (8012190 <netif_set_up+0x4c>)
 8012154:	f44f 7254 	mov.w	r2, #848	; 0x350
 8012158:	490e      	ldr	r1, [pc, #56]	; (8012194 <netif_set_up+0x50>)
 801215a:	480f      	ldr	r0, [pc, #60]	; (8012198 <netif_set_up+0x54>)
 801215c:	f00d fbb2 	bl	801f8c4 <iprintf>
 8012160:	e013      	b.n	801218a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012168:	f003 0301 	and.w	r3, r3, #1
 801216c:	2b00      	cmp	r3, #0
 801216e:	d10c      	bne.n	801218a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012176:	f043 0301 	orr.w	r3, r3, #1
 801217a:	b2da      	uxtb	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012182:	2103      	movs	r1, #3
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 f809 	bl	801219c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	08022680 	.word	0x08022680
 8012194:	08022808 	.word	0x08022808
 8012198:	080226d0 	.word	0x080226d0

0801219c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b082      	sub	sp, #8
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	460b      	mov	r3, r1
 80121a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d106      	bne.n	80121bc <netif_issue_reports+0x20>
 80121ae:	4b18      	ldr	r3, [pc, #96]	; (8012210 <netif_issue_reports+0x74>)
 80121b0:	f240 326d 	movw	r2, #877	; 0x36d
 80121b4:	4917      	ldr	r1, [pc, #92]	; (8012214 <netif_issue_reports+0x78>)
 80121b6:	4818      	ldr	r0, [pc, #96]	; (8012218 <netif_issue_reports+0x7c>)
 80121b8:	f00d fb84 	bl	801f8c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80121c2:	f003 0304 	and.w	r3, r3, #4
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d01e      	beq.n	8012208 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80121d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d017      	beq.n	8012208 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80121d8:	78fb      	ldrb	r3, [r7, #3]
 80121da:	f003 0301 	and.w	r3, r3, #1
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d013      	beq.n	801220a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	3304      	adds	r3, #4
 80121e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d00e      	beq.n	801220a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80121f2:	f003 0308 	and.w	r3, r3, #8
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d007      	beq.n	801220a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	3304      	adds	r3, #4
 80121fe:	4619      	mov	r1, r3
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f00a fc01 	bl	801ca08 <etharp_request>
 8012206:	e000      	b.n	801220a <netif_issue_reports+0x6e>
    return;
 8012208:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801220a:	3708      	adds	r7, #8
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	08022680 	.word	0x08022680
 8012214:	08022824 	.word	0x08022824
 8012218:	080226d0 	.word	0x080226d0

0801221c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d107      	bne.n	801223a <netif_set_down+0x1e>
 801222a:	4b12      	ldr	r3, [pc, #72]	; (8012274 <netif_set_down+0x58>)
 801222c:	f240 329b 	movw	r2, #923	; 0x39b
 8012230:	4911      	ldr	r1, [pc, #68]	; (8012278 <netif_set_down+0x5c>)
 8012232:	4812      	ldr	r0, [pc, #72]	; (801227c <netif_set_down+0x60>)
 8012234:	f00d fb46 	bl	801f8c4 <iprintf>
 8012238:	e019      	b.n	801226e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012240:	f003 0301 	and.w	r3, r3, #1
 8012244:	2b00      	cmp	r3, #0
 8012246:	d012      	beq.n	801226e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801224e:	f023 0301 	bic.w	r3, r3, #1
 8012252:	b2da      	uxtb	r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012260:	f003 0308 	and.w	r3, r3, #8
 8012264:	2b00      	cmp	r3, #0
 8012266:	d002      	beq.n	801226e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f009 ff87 	bl	801c17c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801226e:	3708      	adds	r7, #8
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	08022680 	.word	0x08022680
 8012278:	08022848 	.word	0x08022848
 801227c:	080226d0 	.word	0x080226d0

08012280 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d107      	bne.n	801229e <netif_set_link_up+0x1e>
 801228e:	4b15      	ldr	r3, [pc, #84]	; (80122e4 <netif_set_link_up+0x64>)
 8012290:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012294:	4914      	ldr	r1, [pc, #80]	; (80122e8 <netif_set_link_up+0x68>)
 8012296:	4815      	ldr	r0, [pc, #84]	; (80122ec <netif_set_link_up+0x6c>)
 8012298:	f00d fb14 	bl	801f8c4 <iprintf>
 801229c:	e01e      	b.n	80122dc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80122a4:	f003 0304 	and.w	r3, r3, #4
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d117      	bne.n	80122dc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80122b2:	f043 0304 	orr.w	r3, r3, #4
 80122b6:	b2da      	uxtb	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f008 f9cc 	bl	801a65c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80122c4:	2103      	movs	r1, #3
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f7ff ff68 	bl	801219c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	69db      	ldr	r3, [r3, #28]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d003      	beq.n	80122dc <netif_set_link_up+0x5c>
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	69db      	ldr	r3, [r3, #28]
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80122dc:	3708      	adds	r7, #8
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	08022680 	.word	0x08022680
 80122e8:	08022868 	.word	0x08022868
 80122ec:	080226d0 	.word	0x080226d0

080122f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d107      	bne.n	801230e <netif_set_link_down+0x1e>
 80122fe:	4b11      	ldr	r3, [pc, #68]	; (8012344 <netif_set_link_down+0x54>)
 8012300:	f240 4206 	movw	r2, #1030	; 0x406
 8012304:	4910      	ldr	r1, [pc, #64]	; (8012348 <netif_set_link_down+0x58>)
 8012306:	4811      	ldr	r0, [pc, #68]	; (801234c <netif_set_link_down+0x5c>)
 8012308:	f00d fadc 	bl	801f8c4 <iprintf>
 801230c:	e017      	b.n	801233e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012314:	f003 0304 	and.w	r3, r3, #4
 8012318:	2b00      	cmp	r3, #0
 801231a:	d010      	beq.n	801233e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012322:	f023 0304 	bic.w	r3, r3, #4
 8012326:	b2da      	uxtb	r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	69db      	ldr	r3, [r3, #28]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d003      	beq.n	801233e <netif_set_link_down+0x4e>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	69db      	ldr	r3, [r3, #28]
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801233e:	3708      	adds	r7, #8
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	08022680 	.word	0x08022680
 8012348:	0802288c 	.word	0x0802288c
 801234c:	080226d0 	.word	0x080226d0

08012350 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d002      	beq.n	8012366 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	683a      	ldr	r2, [r7, #0]
 8012364:	61da      	str	r2, [r3, #28]
  }
}
 8012366:	bf00      	nop
 8012368:	370c      	adds	r7, #12
 801236a:	46bd      	mov	sp, r7
 801236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012370:	4770      	bx	lr

08012372 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012372:	b480      	push	{r7}
 8012374:	b085      	sub	sp, #20
 8012376:	af00      	add	r7, sp, #0
 8012378:	60f8      	str	r0, [r7, #12]
 801237a:	60b9      	str	r1, [r7, #8]
 801237c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801237e:	f06f 030b 	mvn.w	r3, #11
}
 8012382:	4618      	mov	r0, r3
 8012384:	3714      	adds	r7, #20
 8012386:	46bd      	mov	sp, r7
 8012388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238c:	4770      	bx	lr
	...

08012390 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012390:	b480      	push	{r7}
 8012392:	b085      	sub	sp, #20
 8012394:	af00      	add	r7, sp, #0
 8012396:	4603      	mov	r3, r0
 8012398:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801239a:	79fb      	ldrb	r3, [r7, #7]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d013      	beq.n	80123c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80123a0:	4b0d      	ldr	r3, [pc, #52]	; (80123d8 <netif_get_by_index+0x48>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	60fb      	str	r3, [r7, #12]
 80123a6:	e00c      	b.n	80123c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80123ae:	3301      	adds	r3, #1
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	79fa      	ldrb	r2, [r7, #7]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d101      	bne.n	80123bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	e006      	b.n	80123ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	60fb      	str	r3, [r7, #12]
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d1ef      	bne.n	80123a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80123c8:	2300      	movs	r3, #0
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3714      	adds	r7, #20
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop
 80123d8:	200101bc 	.word	0x200101bc

080123dc <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d101      	bne.n	80123ee <netif_find+0x12>
    return NULL;
 80123ea:	2300      	movs	r3, #0
 80123ec:	e028      	b.n	8012440 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	3302      	adds	r3, #2
 80123f2:	4618      	mov	r0, r3
 80123f4:	f00d f808 	bl	801f408 <atoi>
 80123f8:	4603      	mov	r3, r0
 80123fa:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 80123fc:	4b12      	ldr	r3, [pc, #72]	; (8012448 <netif_find+0x6c>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	60fb      	str	r3, [r7, #12]
 8012402:	e019      	b.n	8012438 <netif_find+0x5c>
    if (num == netif->num &&
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801240a:	7afa      	ldrb	r2, [r7, #11]
 801240c:	429a      	cmp	r2, r3
 801240e:	d110      	bne.n	8012432 <netif_find+0x56>
        name[0] == netif->name[0] &&
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	781a      	ldrb	r2, [r3, #0]
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if (num == netif->num &&
 801241a:	429a      	cmp	r2, r3
 801241c:	d109      	bne.n	8012432 <netif_find+0x56>
        name[1] == netif->name[1]) {
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	3301      	adds	r3, #1
 8012422:	781a      	ldrb	r2, [r3, #0]
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
        name[0] == netif->name[0] &&
 801242a:	429a      	cmp	r2, r3
 801242c:	d101      	bne.n	8012432 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	e006      	b.n	8012440 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	60fb      	str	r3, [r7, #12]
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d1e2      	bne.n	8012404 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 801243e:	2300      	movs	r3, #0
}
 8012440:	4618      	mov	r0, r3
 8012442:	3710      	adds	r7, #16
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}
 8012448:	200101bc 	.word	0x200101bc

0801244c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012452:	f00c f847 	bl	801e4e4 <sys_arch_protect>
 8012456:	6038      	str	r0, [r7, #0]
 8012458:	4b0d      	ldr	r3, [pc, #52]	; (8012490 <pbuf_free_ooseq+0x44>)
 801245a:	2200      	movs	r2, #0
 801245c:	701a      	strb	r2, [r3, #0]
 801245e:	6838      	ldr	r0, [r7, #0]
 8012460:	f00c f84e 	bl	801e500 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012464:	4b0b      	ldr	r3, [pc, #44]	; (8012494 <pbuf_free_ooseq+0x48>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	607b      	str	r3, [r7, #4]
 801246a:	e00a      	b.n	8012482 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012470:	2b00      	cmp	r3, #0
 8012472:	d003      	beq.n	801247c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f002 fc6d 	bl	8014d54 <tcp_free_ooseq>
      return;
 801247a:	e005      	b.n	8012488 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	607b      	str	r3, [r7, #4]
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d1f1      	bne.n	801246c <pbuf_free_ooseq+0x20>
    }
  }
}
 8012488:	3708      	adds	r7, #8
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
 801248e:	bf00      	nop
 8012490:	200101c5 	.word	0x200101c5
 8012494:	200101d4 	.word	0x200101d4

08012498 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80124a0:	f7ff ffd4 	bl	801244c <pbuf_free_ooseq>
}
 80124a4:	bf00      	nop
 80124a6:	3708      	adds	r7, #8
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80124b2:	f00c f817 	bl	801e4e4 <sys_arch_protect>
 80124b6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80124b8:	4b0f      	ldr	r3, [pc, #60]	; (80124f8 <pbuf_pool_is_empty+0x4c>)
 80124ba:	781b      	ldrb	r3, [r3, #0]
 80124bc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80124be:	4b0e      	ldr	r3, [pc, #56]	; (80124f8 <pbuf_pool_is_empty+0x4c>)
 80124c0:	2201      	movs	r2, #1
 80124c2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f00c f81b 	bl	801e500 <sys_arch_unprotect>

  if (!queued) {
 80124ca:	78fb      	ldrb	r3, [r7, #3]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d10f      	bne.n	80124f0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80124d0:	2100      	movs	r1, #0
 80124d2:	480a      	ldr	r0, [pc, #40]	; (80124fc <pbuf_pool_is_empty+0x50>)
 80124d4:	f7fe fe4c 	bl	8011170 <tcpip_try_callback>
 80124d8:	4603      	mov	r3, r0
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d008      	beq.n	80124f0 <pbuf_pool_is_empty+0x44>
 80124de:	f00c f801 	bl	801e4e4 <sys_arch_protect>
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	4b04      	ldr	r3, [pc, #16]	; (80124f8 <pbuf_pool_is_empty+0x4c>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	701a      	strb	r2, [r3, #0]
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f00c f808 	bl	801e500 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80124f0:	bf00      	nop
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	200101c5 	.word	0x200101c5
 80124fc:	08012499 	.word	0x08012499

08012500 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012500:	b480      	push	{r7}
 8012502:	b085      	sub	sp, #20
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	4611      	mov	r1, r2
 801250c:	461a      	mov	r2, r3
 801250e:	460b      	mov	r3, r1
 8012510:	80fb      	strh	r3, [r7, #6]
 8012512:	4613      	mov	r3, r2
 8012514:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	2200      	movs	r2, #0
 801251a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	68ba      	ldr	r2, [r7, #8]
 8012520:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	88fa      	ldrh	r2, [r7, #6]
 8012526:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	88ba      	ldrh	r2, [r7, #4]
 801252c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801252e:	8b3b      	ldrh	r3, [r7, #24]
 8012530:	b2da      	uxtb	r2, r3
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	7f3a      	ldrb	r2, [r7, #28]
 801253a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2201      	movs	r2, #1
 8012540:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	2200      	movs	r2, #0
 8012546:	73da      	strb	r2, [r3, #15]
}
 8012548:	bf00      	nop
 801254a:	3714      	adds	r7, #20
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr

08012554 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b08c      	sub	sp, #48	; 0x30
 8012558:	af02      	add	r7, sp, #8
 801255a:	4603      	mov	r3, r0
 801255c:	71fb      	strb	r3, [r7, #7]
 801255e:	460b      	mov	r3, r1
 8012560:	80bb      	strh	r3, [r7, #4]
 8012562:	4613      	mov	r3, r2
 8012564:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012566:	79fb      	ldrb	r3, [r7, #7]
 8012568:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801256a:	887b      	ldrh	r3, [r7, #2]
 801256c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012570:	d07f      	beq.n	8012672 <pbuf_alloc+0x11e>
 8012572:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012576:	f300 80c8 	bgt.w	801270a <pbuf_alloc+0x1b6>
 801257a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801257e:	d010      	beq.n	80125a2 <pbuf_alloc+0x4e>
 8012580:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012584:	f300 80c1 	bgt.w	801270a <pbuf_alloc+0x1b6>
 8012588:	2b01      	cmp	r3, #1
 801258a:	d002      	beq.n	8012592 <pbuf_alloc+0x3e>
 801258c:	2b41      	cmp	r3, #65	; 0x41
 801258e:	f040 80bc 	bne.w	801270a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012592:	887a      	ldrh	r2, [r7, #2]
 8012594:	88bb      	ldrh	r3, [r7, #4]
 8012596:	4619      	mov	r1, r3
 8012598:	2000      	movs	r0, #0
 801259a:	f000 f8d1 	bl	8012740 <pbuf_alloc_reference>
 801259e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80125a0:	e0bd      	b.n	801271e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80125a2:	2300      	movs	r3, #0
 80125a4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80125a6:	2300      	movs	r3, #0
 80125a8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80125aa:	88bb      	ldrh	r3, [r7, #4]
 80125ac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80125ae:	200c      	movs	r0, #12
 80125b0:	f7ff fb56 	bl	8011c60 <memp_malloc>
 80125b4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d109      	bne.n	80125d0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80125bc:	f7ff ff76 	bl	80124ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80125c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d002      	beq.n	80125cc <pbuf_alloc+0x78>
            pbuf_free(p);
 80125c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125c8:	f000 faa8 	bl	8012b1c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80125cc:	2300      	movs	r3, #0
 80125ce:	e0a7      	b.n	8012720 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80125d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125d2:	3303      	adds	r3, #3
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	f023 0303 	bic.w	r3, r3, #3
 80125da:	b29b      	uxth	r3, r3
 80125dc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	8b7a      	ldrh	r2, [r7, #26]
 80125e4:	4293      	cmp	r3, r2
 80125e6:	bf28      	it	cs
 80125e8:	4613      	movcs	r3, r2
 80125ea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80125ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125ee:	3310      	adds	r3, #16
 80125f0:	693a      	ldr	r2, [r7, #16]
 80125f2:	4413      	add	r3, r2
 80125f4:	3303      	adds	r3, #3
 80125f6:	f023 0303 	bic.w	r3, r3, #3
 80125fa:	4618      	mov	r0, r3
 80125fc:	89f9      	ldrh	r1, [r7, #14]
 80125fe:	8b7a      	ldrh	r2, [r7, #26]
 8012600:	2300      	movs	r3, #0
 8012602:	9301      	str	r3, [sp, #4]
 8012604:	887b      	ldrh	r3, [r7, #2]
 8012606:	9300      	str	r3, [sp, #0]
 8012608:	460b      	mov	r3, r1
 801260a:	4601      	mov	r1, r0
 801260c:	6938      	ldr	r0, [r7, #16]
 801260e:	f7ff ff77 	bl	8012500 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	f003 0303 	and.w	r3, r3, #3
 801261a:	2b00      	cmp	r3, #0
 801261c:	d006      	beq.n	801262c <pbuf_alloc+0xd8>
 801261e:	4b42      	ldr	r3, [pc, #264]	; (8012728 <pbuf_alloc+0x1d4>)
 8012620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012624:	4941      	ldr	r1, [pc, #260]	; (801272c <pbuf_alloc+0x1d8>)
 8012626:	4842      	ldr	r0, [pc, #264]	; (8012730 <pbuf_alloc+0x1dc>)
 8012628:	f00d f94c 	bl	801f8c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801262c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801262e:	3303      	adds	r3, #3
 8012630:	f023 0303 	bic.w	r3, r3, #3
 8012634:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012638:	d106      	bne.n	8012648 <pbuf_alloc+0xf4>
 801263a:	4b3b      	ldr	r3, [pc, #236]	; (8012728 <pbuf_alloc+0x1d4>)
 801263c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012640:	493c      	ldr	r1, [pc, #240]	; (8012734 <pbuf_alloc+0x1e0>)
 8012642:	483b      	ldr	r0, [pc, #236]	; (8012730 <pbuf_alloc+0x1dc>)
 8012644:	f00d f93e 	bl	801f8c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264a:	2b00      	cmp	r3, #0
 801264c:	d102      	bne.n	8012654 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	627b      	str	r3, [r7, #36]	; 0x24
 8012652:	e002      	b.n	801265a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	693a      	ldr	r2, [r7, #16]
 8012658:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801265e:	8b7a      	ldrh	r2, [r7, #26]
 8012660:	89fb      	ldrh	r3, [r7, #14]
 8012662:	1ad3      	subs	r3, r2, r3
 8012664:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012666:	2300      	movs	r3, #0
 8012668:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801266a:	8b7b      	ldrh	r3, [r7, #26]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d19e      	bne.n	80125ae <pbuf_alloc+0x5a>
      break;
 8012670:	e055      	b.n	801271e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012672:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012674:	3303      	adds	r3, #3
 8012676:	b29b      	uxth	r3, r3
 8012678:	f023 0303 	bic.w	r3, r3, #3
 801267c:	b29a      	uxth	r2, r3
 801267e:	88bb      	ldrh	r3, [r7, #4]
 8012680:	3303      	adds	r3, #3
 8012682:	b29b      	uxth	r3, r3
 8012684:	f023 0303 	bic.w	r3, r3, #3
 8012688:	b29b      	uxth	r3, r3
 801268a:	4413      	add	r3, r2
 801268c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801268e:	8b3b      	ldrh	r3, [r7, #24]
 8012690:	3310      	adds	r3, #16
 8012692:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012694:	8b3a      	ldrh	r2, [r7, #24]
 8012696:	88bb      	ldrh	r3, [r7, #4]
 8012698:	3303      	adds	r3, #3
 801269a:	f023 0303 	bic.w	r3, r3, #3
 801269e:	429a      	cmp	r2, r3
 80126a0:	d306      	bcc.n	80126b0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80126a2:	8afa      	ldrh	r2, [r7, #22]
 80126a4:	88bb      	ldrh	r3, [r7, #4]
 80126a6:	3303      	adds	r3, #3
 80126a8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80126ac:	429a      	cmp	r2, r3
 80126ae:	d201      	bcs.n	80126b4 <pbuf_alloc+0x160>
        return NULL;
 80126b0:	2300      	movs	r3, #0
 80126b2:	e035      	b.n	8012720 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80126b4:	8afb      	ldrh	r3, [r7, #22]
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7ff f92e 	bl	8011918 <mem_malloc>
 80126bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80126be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d101      	bne.n	80126c8 <pbuf_alloc+0x174>
        return NULL;
 80126c4:	2300      	movs	r3, #0
 80126c6:	e02b      	b.n	8012720 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80126c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126ca:	3310      	adds	r3, #16
 80126cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126ce:	4413      	add	r3, r2
 80126d0:	3303      	adds	r3, #3
 80126d2:	f023 0303 	bic.w	r3, r3, #3
 80126d6:	4618      	mov	r0, r3
 80126d8:	88b9      	ldrh	r1, [r7, #4]
 80126da:	88ba      	ldrh	r2, [r7, #4]
 80126dc:	2300      	movs	r3, #0
 80126de:	9301      	str	r3, [sp, #4]
 80126e0:	887b      	ldrh	r3, [r7, #2]
 80126e2:	9300      	str	r3, [sp, #0]
 80126e4:	460b      	mov	r3, r1
 80126e6:	4601      	mov	r1, r0
 80126e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126ea:	f7ff ff09 	bl	8012500 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80126ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	f003 0303 	and.w	r3, r3, #3
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d010      	beq.n	801271c <pbuf_alloc+0x1c8>
 80126fa:	4b0b      	ldr	r3, [pc, #44]	; (8012728 <pbuf_alloc+0x1d4>)
 80126fc:	f44f 7291 	mov.w	r2, #290	; 0x122
 8012700:	490d      	ldr	r1, [pc, #52]	; (8012738 <pbuf_alloc+0x1e4>)
 8012702:	480b      	ldr	r0, [pc, #44]	; (8012730 <pbuf_alloc+0x1dc>)
 8012704:	f00d f8de 	bl	801f8c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012708:	e008      	b.n	801271c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801270a:	4b07      	ldr	r3, [pc, #28]	; (8012728 <pbuf_alloc+0x1d4>)
 801270c:	f240 1227 	movw	r2, #295	; 0x127
 8012710:	490a      	ldr	r1, [pc, #40]	; (801273c <pbuf_alloc+0x1e8>)
 8012712:	4807      	ldr	r0, [pc, #28]	; (8012730 <pbuf_alloc+0x1dc>)
 8012714:	f00d f8d6 	bl	801f8c4 <iprintf>
      return NULL;
 8012718:	2300      	movs	r3, #0
 801271a:	e001      	b.n	8012720 <pbuf_alloc+0x1cc>
      break;
 801271c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012720:	4618      	mov	r0, r3
 8012722:	3728      	adds	r7, #40	; 0x28
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	080228b0 	.word	0x080228b0
 801272c:	080228e0 	.word	0x080228e0
 8012730:	08022910 	.word	0x08022910
 8012734:	08022938 	.word	0x08022938
 8012738:	0802296c 	.word	0x0802296c
 801273c:	08022998 	.word	0x08022998

08012740 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b086      	sub	sp, #24
 8012744:	af02      	add	r7, sp, #8
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	460b      	mov	r3, r1
 801274a:	807b      	strh	r3, [r7, #2]
 801274c:	4613      	mov	r3, r2
 801274e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012750:	883b      	ldrh	r3, [r7, #0]
 8012752:	2b41      	cmp	r3, #65	; 0x41
 8012754:	d009      	beq.n	801276a <pbuf_alloc_reference+0x2a>
 8012756:	883b      	ldrh	r3, [r7, #0]
 8012758:	2b01      	cmp	r3, #1
 801275a:	d006      	beq.n	801276a <pbuf_alloc_reference+0x2a>
 801275c:	4b0f      	ldr	r3, [pc, #60]	; (801279c <pbuf_alloc_reference+0x5c>)
 801275e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012762:	490f      	ldr	r1, [pc, #60]	; (80127a0 <pbuf_alloc_reference+0x60>)
 8012764:	480f      	ldr	r0, [pc, #60]	; (80127a4 <pbuf_alloc_reference+0x64>)
 8012766:	f00d f8ad 	bl	801f8c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801276a:	200b      	movs	r0, #11
 801276c:	f7ff fa78 	bl	8011c60 <memp_malloc>
 8012770:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d101      	bne.n	801277c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012778:	2300      	movs	r3, #0
 801277a:	e00b      	b.n	8012794 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801277c:	8879      	ldrh	r1, [r7, #2]
 801277e:	887a      	ldrh	r2, [r7, #2]
 8012780:	2300      	movs	r3, #0
 8012782:	9301      	str	r3, [sp, #4]
 8012784:	883b      	ldrh	r3, [r7, #0]
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	460b      	mov	r3, r1
 801278a:	6879      	ldr	r1, [r7, #4]
 801278c:	68f8      	ldr	r0, [r7, #12]
 801278e:	f7ff feb7 	bl	8012500 <pbuf_init_alloced_pbuf>
  return p;
 8012792:	68fb      	ldr	r3, [r7, #12]
}
 8012794:	4618      	mov	r0, r3
 8012796:	3710      	adds	r7, #16
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	080228b0 	.word	0x080228b0
 80127a0:	080229b4 	.word	0x080229b4
 80127a4:	08022910 	.word	0x08022910

080127a8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b088      	sub	sp, #32
 80127ac:	af02      	add	r7, sp, #8
 80127ae:	607b      	str	r3, [r7, #4]
 80127b0:	4603      	mov	r3, r0
 80127b2:	73fb      	strb	r3, [r7, #15]
 80127b4:	460b      	mov	r3, r1
 80127b6:	81bb      	strh	r3, [r7, #12]
 80127b8:	4613      	mov	r3, r2
 80127ba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80127bc:	7bfb      	ldrb	r3, [r7, #15]
 80127be:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80127c0:	8a7b      	ldrh	r3, [r7, #18]
 80127c2:	3303      	adds	r3, #3
 80127c4:	f023 0203 	bic.w	r2, r3, #3
 80127c8:	89bb      	ldrh	r3, [r7, #12]
 80127ca:	441a      	add	r2, r3
 80127cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d901      	bls.n	80127d6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80127d2:	2300      	movs	r3, #0
 80127d4:	e018      	b.n	8012808 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80127d6:	6a3b      	ldr	r3, [r7, #32]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d007      	beq.n	80127ec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80127dc:	8a7b      	ldrh	r3, [r7, #18]
 80127de:	3303      	adds	r3, #3
 80127e0:	f023 0303 	bic.w	r3, r3, #3
 80127e4:	6a3a      	ldr	r2, [r7, #32]
 80127e6:	4413      	add	r3, r2
 80127e8:	617b      	str	r3, [r7, #20]
 80127ea:	e001      	b.n	80127f0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80127ec:	2300      	movs	r3, #0
 80127ee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	89b9      	ldrh	r1, [r7, #12]
 80127f4:	89ba      	ldrh	r2, [r7, #12]
 80127f6:	2302      	movs	r3, #2
 80127f8:	9301      	str	r3, [sp, #4]
 80127fa:	897b      	ldrh	r3, [r7, #10]
 80127fc:	9300      	str	r3, [sp, #0]
 80127fe:	460b      	mov	r3, r1
 8012800:	6979      	ldr	r1, [r7, #20]
 8012802:	f7ff fe7d 	bl	8012500 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012806:	687b      	ldr	r3, [r7, #4]
}
 8012808:	4618      	mov	r0, r3
 801280a:	3718      	adds	r7, #24
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	460b      	mov	r3, r1
 801281a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d106      	bne.n	8012830 <pbuf_realloc+0x20>
 8012822:	4b3a      	ldr	r3, [pc, #232]	; (801290c <pbuf_realloc+0xfc>)
 8012824:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012828:	4939      	ldr	r1, [pc, #228]	; (8012910 <pbuf_realloc+0x100>)
 801282a:	483a      	ldr	r0, [pc, #232]	; (8012914 <pbuf_realloc+0x104>)
 801282c:	f00d f84a 	bl	801f8c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	891b      	ldrh	r3, [r3, #8]
 8012834:	887a      	ldrh	r2, [r7, #2]
 8012836:	429a      	cmp	r2, r3
 8012838:	d263      	bcs.n	8012902 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	891a      	ldrh	r2, [r3, #8]
 801283e:	887b      	ldrh	r3, [r7, #2]
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012844:	887b      	ldrh	r3, [r7, #2]
 8012846:	817b      	strh	r3, [r7, #10]
  q = p;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801284c:	e018      	b.n	8012880 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	895b      	ldrh	r3, [r3, #10]
 8012852:	897a      	ldrh	r2, [r7, #10]
 8012854:	1ad3      	subs	r3, r2, r3
 8012856:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	891a      	ldrh	r2, [r3, #8]
 801285c:	893b      	ldrh	r3, [r7, #8]
 801285e:	1ad3      	subs	r3, r2, r3
 8012860:	b29a      	uxth	r2, r3
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d106      	bne.n	8012880 <pbuf_realloc+0x70>
 8012872:	4b26      	ldr	r3, [pc, #152]	; (801290c <pbuf_realloc+0xfc>)
 8012874:	f240 12af 	movw	r2, #431	; 0x1af
 8012878:	4927      	ldr	r1, [pc, #156]	; (8012918 <pbuf_realloc+0x108>)
 801287a:	4826      	ldr	r0, [pc, #152]	; (8012914 <pbuf_realloc+0x104>)
 801287c:	f00d f822 	bl	801f8c4 <iprintf>
  while (rem_len > q->len) {
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	895b      	ldrh	r3, [r3, #10]
 8012884:	897a      	ldrh	r2, [r7, #10]
 8012886:	429a      	cmp	r2, r3
 8012888:	d8e1      	bhi.n	801284e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	7b1b      	ldrb	r3, [r3, #12]
 801288e:	f003 030f 	and.w	r3, r3, #15
 8012892:	2b00      	cmp	r3, #0
 8012894:	d121      	bne.n	80128da <pbuf_realloc+0xca>
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	895b      	ldrh	r3, [r3, #10]
 801289a:	897a      	ldrh	r2, [r7, #10]
 801289c:	429a      	cmp	r2, r3
 801289e:	d01c      	beq.n	80128da <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	7b5b      	ldrb	r3, [r3, #13]
 80128a4:	f003 0302 	and.w	r3, r3, #2
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d116      	bne.n	80128da <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	685a      	ldr	r2, [r3, #4]
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	1ad3      	subs	r3, r2, r3
 80128b4:	b29a      	uxth	r2, r3
 80128b6:	897b      	ldrh	r3, [r7, #10]
 80128b8:	4413      	add	r3, r2
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	4619      	mov	r1, r3
 80128be:	68f8      	ldr	r0, [r7, #12]
 80128c0:	f7fe ff20 	bl	8011704 <mem_trim>
 80128c4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d106      	bne.n	80128da <pbuf_realloc+0xca>
 80128cc:	4b0f      	ldr	r3, [pc, #60]	; (801290c <pbuf_realloc+0xfc>)
 80128ce:	f240 12bd 	movw	r2, #445	; 0x1bd
 80128d2:	4912      	ldr	r1, [pc, #72]	; (801291c <pbuf_realloc+0x10c>)
 80128d4:	480f      	ldr	r0, [pc, #60]	; (8012914 <pbuf_realloc+0x104>)
 80128d6:	f00c fff5 	bl	801f8c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	897a      	ldrh	r2, [r7, #10]
 80128de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	895a      	ldrh	r2, [r3, #10]
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d004      	beq.n	80128fa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4618      	mov	r0, r3
 80128f6:	f000 f911 	bl	8012b1c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2200      	movs	r2, #0
 80128fe:	601a      	str	r2, [r3, #0]
 8012900:	e000      	b.n	8012904 <pbuf_realloc+0xf4>
    return;
 8012902:	bf00      	nop

}
 8012904:	3710      	adds	r7, #16
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	080228b0 	.word	0x080228b0
 8012910:	080229c8 	.word	0x080229c8
 8012914:	08022910 	.word	0x08022910
 8012918:	080229e0 	.word	0x080229e0
 801291c:	080229f8 	.word	0x080229f8

08012920 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b086      	sub	sp, #24
 8012924:	af00      	add	r7, sp, #0
 8012926:	60f8      	str	r0, [r7, #12]
 8012928:	60b9      	str	r1, [r7, #8]
 801292a:	4613      	mov	r3, r2
 801292c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d106      	bne.n	8012942 <pbuf_add_header_impl+0x22>
 8012934:	4b2b      	ldr	r3, [pc, #172]	; (80129e4 <pbuf_add_header_impl+0xc4>)
 8012936:	f240 12df 	movw	r2, #479	; 0x1df
 801293a:	492b      	ldr	r1, [pc, #172]	; (80129e8 <pbuf_add_header_impl+0xc8>)
 801293c:	482b      	ldr	r0, [pc, #172]	; (80129ec <pbuf_add_header_impl+0xcc>)
 801293e:	f00c ffc1 	bl	801f8c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d003      	beq.n	8012950 <pbuf_add_header_impl+0x30>
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801294e:	d301      	bcc.n	8012954 <pbuf_add_header_impl+0x34>
    return 1;
 8012950:	2301      	movs	r3, #1
 8012952:	e043      	b.n	80129dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d101      	bne.n	801295e <pbuf_add_header_impl+0x3e>
    return 0;
 801295a:	2300      	movs	r3, #0
 801295c:	e03e      	b.n	80129dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	891a      	ldrh	r2, [r3, #8]
 8012966:	8a7b      	ldrh	r3, [r7, #18]
 8012968:	4413      	add	r3, r2
 801296a:	b29b      	uxth	r3, r3
 801296c:	8a7a      	ldrh	r2, [r7, #18]
 801296e:	429a      	cmp	r2, r3
 8012970:	d901      	bls.n	8012976 <pbuf_add_header_impl+0x56>
    return 1;
 8012972:	2301      	movs	r3, #1
 8012974:	e032      	b.n	80129dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	7b1b      	ldrb	r3, [r3, #12]
 801297a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801297c:	8a3b      	ldrh	r3, [r7, #16]
 801297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012982:	2b00      	cmp	r3, #0
 8012984:	d00c      	beq.n	80129a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	685a      	ldr	r2, [r3, #4]
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	425b      	negs	r3, r3
 801298e:	4413      	add	r3, r2
 8012990:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	3310      	adds	r3, #16
 8012996:	697a      	ldr	r2, [r7, #20]
 8012998:	429a      	cmp	r2, r3
 801299a:	d20d      	bcs.n	80129b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801299c:	2301      	movs	r3, #1
 801299e:	e01d      	b.n	80129dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80129a0:	79fb      	ldrb	r3, [r7, #7]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d006      	beq.n	80129b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	685a      	ldr	r2, [r3, #4]
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	425b      	negs	r3, r3
 80129ae:	4413      	add	r3, r2
 80129b0:	617b      	str	r3, [r7, #20]
 80129b2:	e001      	b.n	80129b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80129b4:	2301      	movs	r3, #1
 80129b6:	e011      	b.n	80129dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	697a      	ldr	r2, [r7, #20]
 80129bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	895a      	ldrh	r2, [r3, #10]
 80129c2:	8a7b      	ldrh	r3, [r7, #18]
 80129c4:	4413      	add	r3, r2
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	891a      	ldrh	r2, [r3, #8]
 80129d0:	8a7b      	ldrh	r3, [r7, #18]
 80129d2:	4413      	add	r3, r2
 80129d4:	b29a      	uxth	r2, r3
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	811a      	strh	r2, [r3, #8]


  return 0;
 80129da:	2300      	movs	r3, #0
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3718      	adds	r7, #24
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}
 80129e4:	080228b0 	.word	0x080228b0
 80129e8:	08022a14 	.word	0x08022a14
 80129ec:	08022910 	.word	0x08022910

080129f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80129fa:	2200      	movs	r2, #0
 80129fc:	6839      	ldr	r1, [r7, #0]
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f7ff ff8e 	bl	8012920 <pbuf_add_header_impl>
 8012a04:	4603      	mov	r3, r0
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3708      	adds	r7, #8
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
	...

08012a10 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b084      	sub	sp, #16
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d106      	bne.n	8012a2e <pbuf_remove_header+0x1e>
 8012a20:	4b20      	ldr	r3, [pc, #128]	; (8012aa4 <pbuf_remove_header+0x94>)
 8012a22:	f240 224b 	movw	r2, #587	; 0x24b
 8012a26:	4920      	ldr	r1, [pc, #128]	; (8012aa8 <pbuf_remove_header+0x98>)
 8012a28:	4820      	ldr	r0, [pc, #128]	; (8012aac <pbuf_remove_header+0x9c>)
 8012a2a:	f00c ff4b 	bl	801f8c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d003      	beq.n	8012a3c <pbuf_remove_header+0x2c>
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a3a:	d301      	bcc.n	8012a40 <pbuf_remove_header+0x30>
    return 1;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	e02c      	b.n	8012a9a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d101      	bne.n	8012a4a <pbuf_remove_header+0x3a>
    return 0;
 8012a46:	2300      	movs	r3, #0
 8012a48:	e027      	b.n	8012a9a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	895b      	ldrh	r3, [r3, #10]
 8012a52:	89fa      	ldrh	r2, [r7, #14]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d908      	bls.n	8012a6a <pbuf_remove_header+0x5a>
 8012a58:	4b12      	ldr	r3, [pc, #72]	; (8012aa4 <pbuf_remove_header+0x94>)
 8012a5a:	f240 2255 	movw	r2, #597	; 0x255
 8012a5e:	4914      	ldr	r1, [pc, #80]	; (8012ab0 <pbuf_remove_header+0xa0>)
 8012a60:	4812      	ldr	r0, [pc, #72]	; (8012aac <pbuf_remove_header+0x9c>)
 8012a62:	f00c ff2f 	bl	801f8c4 <iprintf>
 8012a66:	2301      	movs	r3, #1
 8012a68:	e017      	b.n	8012a9a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	685a      	ldr	r2, [r3, #4]
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	441a      	add	r2, r3
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	895a      	ldrh	r2, [r3, #10]
 8012a80:	89fb      	ldrh	r3, [r7, #14]
 8012a82:	1ad3      	subs	r3, r2, r3
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	891a      	ldrh	r2, [r3, #8]
 8012a8e:	89fb      	ldrh	r3, [r7, #14]
 8012a90:	1ad3      	subs	r3, r2, r3
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012a98:	2300      	movs	r3, #0
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3710      	adds	r7, #16
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	080228b0 	.word	0x080228b0
 8012aa8:	08022a14 	.word	0x08022a14
 8012aac:	08022910 	.word	0x08022910
 8012ab0:	08022a20 	.word	0x08022a20

08012ab4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	460b      	mov	r3, r1
 8012abe:	807b      	strh	r3, [r7, #2]
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012ac4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	da08      	bge.n	8012ade <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012acc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ad0:	425b      	negs	r3, r3
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7ff ff9b 	bl	8012a10 <pbuf_remove_header>
 8012ada:	4603      	mov	r3, r0
 8012adc:	e007      	b.n	8012aee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012ade:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ae2:	787a      	ldrb	r2, [r7, #1]
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f7ff ff1a 	bl	8012920 <pbuf_add_header_impl>
 8012aec:	4603      	mov	r3, r0
  }
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3708      	adds	r7, #8
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012af6:	b580      	push	{r7, lr}
 8012af8:	b082      	sub	sp, #8
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
 8012afe:	460b      	mov	r3, r1
 8012b00:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012b02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012b06:	2201      	movs	r2, #1
 8012b08:	4619      	mov	r1, r3
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f7ff ffd2 	bl	8012ab4 <pbuf_header_impl>
 8012b10:	4603      	mov	r3, r0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3708      	adds	r7, #8
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
	...

08012b1c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b088      	sub	sp, #32
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d10b      	bne.n	8012b42 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d106      	bne.n	8012b3e <pbuf_free+0x22>
 8012b30:	4b3b      	ldr	r3, [pc, #236]	; (8012c20 <pbuf_free+0x104>)
 8012b32:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012b36:	493b      	ldr	r1, [pc, #236]	; (8012c24 <pbuf_free+0x108>)
 8012b38:	483b      	ldr	r0, [pc, #236]	; (8012c28 <pbuf_free+0x10c>)
 8012b3a:	f00c fec3 	bl	801f8c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e069      	b.n	8012c16 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012b42:	2300      	movs	r3, #0
 8012b44:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012b46:	e062      	b.n	8012c0e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012b48:	f00b fccc 	bl	801e4e4 <sys_arch_protect>
 8012b4c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	7b9b      	ldrb	r3, [r3, #14]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d106      	bne.n	8012b64 <pbuf_free+0x48>
 8012b56:	4b32      	ldr	r3, [pc, #200]	; (8012c20 <pbuf_free+0x104>)
 8012b58:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012b5c:	4933      	ldr	r1, [pc, #204]	; (8012c2c <pbuf_free+0x110>)
 8012b5e:	4832      	ldr	r0, [pc, #200]	; (8012c28 <pbuf_free+0x10c>)
 8012b60:	f00c feb0 	bl	801f8c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	7b9b      	ldrb	r3, [r3, #14]
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	b2da      	uxtb	r2, r3
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	739a      	strb	r2, [r3, #14]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	7b9b      	ldrb	r3, [r3, #14]
 8012b74:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012b76:	69b8      	ldr	r0, [r7, #24]
 8012b78:	f00b fcc2 	bl	801e500 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012b7c:	7dfb      	ldrb	r3, [r7, #23]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d143      	bne.n	8012c0a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	7b1b      	ldrb	r3, [r3, #12]
 8012b8c:	f003 030f 	and.w	r3, r3, #15
 8012b90:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	7b5b      	ldrb	r3, [r3, #13]
 8012b96:	f003 0302 	and.w	r3, r3, #2
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d011      	beq.n	8012bc2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	691b      	ldr	r3, [r3, #16]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d106      	bne.n	8012bb8 <pbuf_free+0x9c>
 8012baa:	4b1d      	ldr	r3, [pc, #116]	; (8012c20 <pbuf_free+0x104>)
 8012bac:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012bb0:	491f      	ldr	r1, [pc, #124]	; (8012c30 <pbuf_free+0x114>)
 8012bb2:	481d      	ldr	r0, [pc, #116]	; (8012c28 <pbuf_free+0x10c>)
 8012bb4:	f00c fe86 	bl	801f8c4 <iprintf>
        pc->custom_free_function(p);
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	691b      	ldr	r3, [r3, #16]
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	4798      	blx	r3
 8012bc0:	e01d      	b.n	8012bfe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012bc2:	7bfb      	ldrb	r3, [r7, #15]
 8012bc4:	2b02      	cmp	r3, #2
 8012bc6:	d104      	bne.n	8012bd2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012bc8:	6879      	ldr	r1, [r7, #4]
 8012bca:	200c      	movs	r0, #12
 8012bcc:	f7ff f8be 	bl	8011d4c <memp_free>
 8012bd0:	e015      	b.n	8012bfe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012bd2:	7bfb      	ldrb	r3, [r7, #15]
 8012bd4:	2b01      	cmp	r3, #1
 8012bd6:	d104      	bne.n	8012be2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012bd8:	6879      	ldr	r1, [r7, #4]
 8012bda:	200b      	movs	r0, #11
 8012bdc:	f7ff f8b6 	bl	8011d4c <memp_free>
 8012be0:	e00d      	b.n	8012bfe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012be2:	7bfb      	ldrb	r3, [r7, #15]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d103      	bne.n	8012bf0 <pbuf_free+0xd4>
          mem_free(p);
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f7fe fcfb 	bl	80115e4 <mem_free>
 8012bee:	e006      	b.n	8012bfe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012bf0:	4b0b      	ldr	r3, [pc, #44]	; (8012c20 <pbuf_free+0x104>)
 8012bf2:	f240 320f 	movw	r2, #783	; 0x30f
 8012bf6:	490f      	ldr	r1, [pc, #60]	; (8012c34 <pbuf_free+0x118>)
 8012bf8:	480b      	ldr	r0, [pc, #44]	; (8012c28 <pbuf_free+0x10c>)
 8012bfa:	f00c fe63 	bl	801f8c4 <iprintf>
        }
      }
      count++;
 8012bfe:	7ffb      	ldrb	r3, [r7, #31]
 8012c00:	3301      	adds	r3, #1
 8012c02:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	607b      	str	r3, [r7, #4]
 8012c08:	e001      	b.n	8012c0e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d199      	bne.n	8012b48 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012c14:	7ffb      	ldrb	r3, [r7, #31]
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	3720      	adds	r7, #32
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	080228b0 	.word	0x080228b0
 8012c24:	08022a14 	.word	0x08022a14
 8012c28:	08022910 	.word	0x08022910
 8012c2c:	08022a40 	.word	0x08022a40
 8012c30:	08022a58 	.word	0x08022a58
 8012c34:	08022a7c 	.word	0x08022a7c

08012c38 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b085      	sub	sp, #20
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012c40:	2300      	movs	r3, #0
 8012c42:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012c44:	e005      	b.n	8012c52 <pbuf_clen+0x1a>
    ++len;
 8012c46:	89fb      	ldrh	r3, [r7, #14]
 8012c48:	3301      	adds	r3, #1
 8012c4a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d1f6      	bne.n	8012c46 <pbuf_clen+0xe>
  }
  return len;
 8012c58:	89fb      	ldrh	r3, [r7, #14]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3714      	adds	r7, #20
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c64:	4770      	bx	lr
	...

08012c68 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d016      	beq.n	8012ca4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012c76:	f00b fc35 	bl	801e4e4 <sys_arch_protect>
 8012c7a:	60f8      	str	r0, [r7, #12]
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	7b9b      	ldrb	r3, [r3, #14]
 8012c80:	3301      	adds	r3, #1
 8012c82:	b2da      	uxtb	r2, r3
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	739a      	strb	r2, [r3, #14]
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f00b fc39 	bl	801e500 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	7b9b      	ldrb	r3, [r3, #14]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d106      	bne.n	8012ca4 <pbuf_ref+0x3c>
 8012c96:	4b05      	ldr	r3, [pc, #20]	; (8012cac <pbuf_ref+0x44>)
 8012c98:	f240 3242 	movw	r2, #834	; 0x342
 8012c9c:	4904      	ldr	r1, [pc, #16]	; (8012cb0 <pbuf_ref+0x48>)
 8012c9e:	4805      	ldr	r0, [pc, #20]	; (8012cb4 <pbuf_ref+0x4c>)
 8012ca0:	f00c fe10 	bl	801f8c4 <iprintf>
  }
}
 8012ca4:	bf00      	nop
 8012ca6:	3710      	adds	r7, #16
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	080228b0 	.word	0x080228b0
 8012cb0:	08022a90 	.word	0x08022a90
 8012cb4:	08022910 	.word	0x08022910

08012cb8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d002      	beq.n	8012cce <pbuf_cat+0x16>
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d107      	bne.n	8012cde <pbuf_cat+0x26>
 8012cce:	4b20      	ldr	r3, [pc, #128]	; (8012d50 <pbuf_cat+0x98>)
 8012cd0:	f240 3259 	movw	r2, #857	; 0x359
 8012cd4:	491f      	ldr	r1, [pc, #124]	; (8012d54 <pbuf_cat+0x9c>)
 8012cd6:	4820      	ldr	r0, [pc, #128]	; (8012d58 <pbuf_cat+0xa0>)
 8012cd8:	f00c fdf4 	bl	801f8c4 <iprintf>
 8012cdc:	e034      	b.n	8012d48 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	60fb      	str	r3, [r7, #12]
 8012ce2:	e00a      	b.n	8012cfa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	891a      	ldrh	r2, [r3, #8]
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	891b      	ldrh	r3, [r3, #8]
 8012cec:	4413      	add	r3, r2
 8012cee:	b29a      	uxth	r2, r3
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	60fb      	str	r3, [r7, #12]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d1f0      	bne.n	8012ce4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	891a      	ldrh	r2, [r3, #8]
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	895b      	ldrh	r3, [r3, #10]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d006      	beq.n	8012d1c <pbuf_cat+0x64>
 8012d0e:	4b10      	ldr	r3, [pc, #64]	; (8012d50 <pbuf_cat+0x98>)
 8012d10:	f240 3262 	movw	r2, #866	; 0x362
 8012d14:	4911      	ldr	r1, [pc, #68]	; (8012d5c <pbuf_cat+0xa4>)
 8012d16:	4810      	ldr	r0, [pc, #64]	; (8012d58 <pbuf_cat+0xa0>)
 8012d18:	f00c fdd4 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d006      	beq.n	8012d32 <pbuf_cat+0x7a>
 8012d24:	4b0a      	ldr	r3, [pc, #40]	; (8012d50 <pbuf_cat+0x98>)
 8012d26:	f240 3263 	movw	r2, #867	; 0x363
 8012d2a:	490d      	ldr	r1, [pc, #52]	; (8012d60 <pbuf_cat+0xa8>)
 8012d2c:	480a      	ldr	r0, [pc, #40]	; (8012d58 <pbuf_cat+0xa0>)
 8012d2e:	f00c fdc9 	bl	801f8c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	891a      	ldrh	r2, [r3, #8]
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	891b      	ldrh	r3, [r3, #8]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	b29a      	uxth	r2, r3
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	683a      	ldr	r2, [r7, #0]
 8012d46:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012d48:	3710      	adds	r7, #16
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	080228b0 	.word	0x080228b0
 8012d54:	08022aa4 	.word	0x08022aa4
 8012d58:	08022910 	.word	0x08022910
 8012d5c:	08022adc 	.word	0x08022adc
 8012d60:	08022b0c 	.word	0x08022b0c

08012d64 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012d6e:	6839      	ldr	r1, [r7, #0]
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f7ff ffa1 	bl	8012cb8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8012d76:	6838      	ldr	r0, [r7, #0]
 8012d78:	f7ff ff76 	bl	8012c68 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012d7c:	bf00      	nop
 8012d7e:	3708      	adds	r7, #8
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b086      	sub	sp, #24
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	617b      	str	r3, [r7, #20]
 8012d92:	2300      	movs	r3, #0
 8012d94:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d008      	beq.n	8012dae <pbuf_copy+0x2a>
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d005      	beq.n	8012dae <pbuf_copy+0x2a>
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	891a      	ldrh	r2, [r3, #8]
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	891b      	ldrh	r3, [r3, #8]
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d209      	bcs.n	8012dc2 <pbuf_copy+0x3e>
 8012dae:	4b57      	ldr	r3, [pc, #348]	; (8012f0c <pbuf_copy+0x188>)
 8012db0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012db4:	4956      	ldr	r1, [pc, #344]	; (8012f10 <pbuf_copy+0x18c>)
 8012db6:	4857      	ldr	r0, [pc, #348]	; (8012f14 <pbuf_copy+0x190>)
 8012db8:	f00c fd84 	bl	801f8c4 <iprintf>
 8012dbc:	f06f 030f 	mvn.w	r3, #15
 8012dc0:	e09f      	b.n	8012f02 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	895b      	ldrh	r3, [r3, #10]
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	1ad2      	subs	r2, r2, r3
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	895b      	ldrh	r3, [r3, #10]
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	1acb      	subs	r3, r1, r3
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d306      	bcc.n	8012de8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	895b      	ldrh	r3, [r3, #10]
 8012dde:	461a      	mov	r2, r3
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	1ad3      	subs	r3, r2, r3
 8012de4:	60fb      	str	r3, [r7, #12]
 8012de6:	e005      	b.n	8012df4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	895b      	ldrh	r3, [r3, #10]
 8012dec:	461a      	mov	r2, r3
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	1ad3      	subs	r3, r2, r3
 8012df2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	685a      	ldr	r2, [r3, #4]
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	18d0      	adds	r0, r2, r3
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	685a      	ldr	r2, [r3, #4]
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	4413      	add	r3, r2
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	4619      	mov	r1, r3
 8012e08:	f00c ffc1 	bl	801fd8e <memcpy>
    offset_to += len;
 8012e0c:	697a      	ldr	r2, [r7, #20]
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	4413      	add	r3, r2
 8012e12:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012e14:	693a      	ldr	r2, [r7, #16]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	4413      	add	r3, r2
 8012e1a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	895b      	ldrh	r3, [r3, #10]
 8012e20:	461a      	mov	r2, r3
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	4293      	cmp	r3, r2
 8012e26:	d906      	bls.n	8012e36 <pbuf_copy+0xb2>
 8012e28:	4b38      	ldr	r3, [pc, #224]	; (8012f0c <pbuf_copy+0x188>)
 8012e2a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012e2e:	493a      	ldr	r1, [pc, #232]	; (8012f18 <pbuf_copy+0x194>)
 8012e30:	4838      	ldr	r0, [pc, #224]	; (8012f14 <pbuf_copy+0x190>)
 8012e32:	f00c fd47 	bl	801f8c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	895b      	ldrh	r3, [r3, #10]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	d906      	bls.n	8012e50 <pbuf_copy+0xcc>
 8012e42:	4b32      	ldr	r3, [pc, #200]	; (8012f0c <pbuf_copy+0x188>)
 8012e44:	f240 32da 	movw	r2, #986	; 0x3da
 8012e48:	4934      	ldr	r1, [pc, #208]	; (8012f1c <pbuf_copy+0x198>)
 8012e4a:	4832      	ldr	r0, [pc, #200]	; (8012f14 <pbuf_copy+0x190>)
 8012e4c:	f00c fd3a 	bl	801f8c4 <iprintf>
    if (offset_from >= p_from->len) {
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	895b      	ldrh	r3, [r3, #10]
 8012e54:	461a      	mov	r2, r3
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d304      	bcc.n	8012e66 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	895b      	ldrh	r3, [r3, #10]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	d114      	bne.n	8012e9c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012e72:	2300      	movs	r3, #0
 8012e74:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d10c      	bne.n	8012e9c <pbuf_copy+0x118>
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d009      	beq.n	8012e9c <pbuf_copy+0x118>
 8012e88:	4b20      	ldr	r3, [pc, #128]	; (8012f0c <pbuf_copy+0x188>)
 8012e8a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012e8e:	4924      	ldr	r1, [pc, #144]	; (8012f20 <pbuf_copy+0x19c>)
 8012e90:	4820      	ldr	r0, [pc, #128]	; (8012f14 <pbuf_copy+0x190>)
 8012e92:	f00c fd17 	bl	801f8c4 <iprintf>
 8012e96:	f06f 030f 	mvn.w	r3, #15
 8012e9a:	e032      	b.n	8012f02 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d013      	beq.n	8012eca <pbuf_copy+0x146>
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	895a      	ldrh	r2, [r3, #10]
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	891b      	ldrh	r3, [r3, #8]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d10d      	bne.n	8012eca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d009      	beq.n	8012eca <pbuf_copy+0x146>
 8012eb6:	4b15      	ldr	r3, [pc, #84]	; (8012f0c <pbuf_copy+0x188>)
 8012eb8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012ebc:	4919      	ldr	r1, [pc, #100]	; (8012f24 <pbuf_copy+0x1a0>)
 8012ebe:	4815      	ldr	r0, [pc, #84]	; (8012f14 <pbuf_copy+0x190>)
 8012ec0:	f00c fd00 	bl	801f8c4 <iprintf>
 8012ec4:	f06f 0305 	mvn.w	r3, #5
 8012ec8:	e01b      	b.n	8012f02 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d013      	beq.n	8012ef8 <pbuf_copy+0x174>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	895a      	ldrh	r2, [r3, #10]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	891b      	ldrh	r3, [r3, #8]
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d10d      	bne.n	8012ef8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d009      	beq.n	8012ef8 <pbuf_copy+0x174>
 8012ee4:	4b09      	ldr	r3, [pc, #36]	; (8012f0c <pbuf_copy+0x188>)
 8012ee6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012eea:	490e      	ldr	r1, [pc, #56]	; (8012f24 <pbuf_copy+0x1a0>)
 8012eec:	4809      	ldr	r0, [pc, #36]	; (8012f14 <pbuf_copy+0x190>)
 8012eee:	f00c fce9 	bl	801f8c4 <iprintf>
 8012ef2:	f06f 0305 	mvn.w	r3, #5
 8012ef6:	e004      	b.n	8012f02 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f47f af61 	bne.w	8012dc2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012f00:	2300      	movs	r3, #0
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3718      	adds	r7, #24
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	080228b0 	.word	0x080228b0
 8012f10:	08022b58 	.word	0x08022b58
 8012f14:	08022910 	.word	0x08022910
 8012f18:	08022b88 	.word	0x08022b88
 8012f1c:	08022ba0 	.word	0x08022ba0
 8012f20:	08022bbc 	.word	0x08022bbc
 8012f24:	08022bcc 	.word	0x08022bcc

08012f28 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b088      	sub	sp, #32
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	60b9      	str	r1, [r7, #8]
 8012f32:	4611      	mov	r1, r2
 8012f34:	461a      	mov	r2, r3
 8012f36:	460b      	mov	r3, r1
 8012f38:	80fb      	strh	r3, [r7, #6]
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012f42:	2300      	movs	r3, #0
 8012f44:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d108      	bne.n	8012f5e <pbuf_copy_partial+0x36>
 8012f4c:	4b2b      	ldr	r3, [pc, #172]	; (8012ffc <pbuf_copy_partial+0xd4>)
 8012f4e:	f240 420a 	movw	r2, #1034	; 0x40a
 8012f52:	492b      	ldr	r1, [pc, #172]	; (8013000 <pbuf_copy_partial+0xd8>)
 8012f54:	482b      	ldr	r0, [pc, #172]	; (8013004 <pbuf_copy_partial+0xdc>)
 8012f56:	f00c fcb5 	bl	801f8c4 <iprintf>
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e04a      	b.n	8012ff4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d108      	bne.n	8012f76 <pbuf_copy_partial+0x4e>
 8012f64:	4b25      	ldr	r3, [pc, #148]	; (8012ffc <pbuf_copy_partial+0xd4>)
 8012f66:	f240 420b 	movw	r2, #1035	; 0x40b
 8012f6a:	4927      	ldr	r1, [pc, #156]	; (8013008 <pbuf_copy_partial+0xe0>)
 8012f6c:	4825      	ldr	r0, [pc, #148]	; (8013004 <pbuf_copy_partial+0xdc>)
 8012f6e:	f00c fca9 	bl	801f8c4 <iprintf>
 8012f72:	2300      	movs	r3, #0
 8012f74:	e03e      	b.n	8012ff4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	61fb      	str	r3, [r7, #28]
 8012f7a:	e034      	b.n	8012fe6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012f7c:	88bb      	ldrh	r3, [r7, #4]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d00a      	beq.n	8012f98 <pbuf_copy_partial+0x70>
 8012f82:	69fb      	ldr	r3, [r7, #28]
 8012f84:	895b      	ldrh	r3, [r3, #10]
 8012f86:	88ba      	ldrh	r2, [r7, #4]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d305      	bcc.n	8012f98 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012f8c:	69fb      	ldr	r3, [r7, #28]
 8012f8e:	895b      	ldrh	r3, [r3, #10]
 8012f90:	88ba      	ldrh	r2, [r7, #4]
 8012f92:	1ad3      	subs	r3, r2, r3
 8012f94:	80bb      	strh	r3, [r7, #4]
 8012f96:	e023      	b.n	8012fe0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012f98:	69fb      	ldr	r3, [r7, #28]
 8012f9a:	895a      	ldrh	r2, [r3, #10]
 8012f9c:	88bb      	ldrh	r3, [r7, #4]
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012fa2:	8b3a      	ldrh	r2, [r7, #24]
 8012fa4:	88fb      	ldrh	r3, [r7, #6]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d901      	bls.n	8012fae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012faa:	88fb      	ldrh	r3, [r7, #6]
 8012fac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012fae:	8b7b      	ldrh	r3, [r7, #26]
 8012fb0:	68ba      	ldr	r2, [r7, #8]
 8012fb2:	18d0      	adds	r0, r2, r3
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	685a      	ldr	r2, [r3, #4]
 8012fb8:	88bb      	ldrh	r3, [r7, #4]
 8012fba:	4413      	add	r3, r2
 8012fbc:	8b3a      	ldrh	r2, [r7, #24]
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	f00c fee5 	bl	801fd8e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012fc4:	8afa      	ldrh	r2, [r7, #22]
 8012fc6:	8b3b      	ldrh	r3, [r7, #24]
 8012fc8:	4413      	add	r3, r2
 8012fca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012fcc:	8b7a      	ldrh	r2, [r7, #26]
 8012fce:	8b3b      	ldrh	r3, [r7, #24]
 8012fd0:	4413      	add	r3, r2
 8012fd2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012fd4:	88fa      	ldrh	r2, [r7, #6]
 8012fd6:	8b3b      	ldrh	r3, [r7, #24]
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012fe0:	69fb      	ldr	r3, [r7, #28]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	61fb      	str	r3, [r7, #28]
 8012fe6:	88fb      	ldrh	r3, [r7, #6]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d002      	beq.n	8012ff2 <pbuf_copy_partial+0xca>
 8012fec:	69fb      	ldr	r3, [r7, #28]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d1c4      	bne.n	8012f7c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012ff2:	8afb      	ldrh	r3, [r7, #22]
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3720      	adds	r7, #32
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}
 8012ffc:	080228b0 	.word	0x080228b0
 8013000:	08022bf8 	.word	0x08022bf8
 8013004:	08022910 	.word	0x08022910
 8013008:	08022c18 	.word	0x08022c18

0801300c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
 8013012:	4603      	mov	r3, r0
 8013014:	603a      	str	r2, [r7, #0]
 8013016:	71fb      	strb	r3, [r7, #7]
 8013018:	460b      	mov	r3, r1
 801301a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	8919      	ldrh	r1, [r3, #8]
 8013020:	88ba      	ldrh	r2, [r7, #4]
 8013022:	79fb      	ldrb	r3, [r7, #7]
 8013024:	4618      	mov	r0, r3
 8013026:	f7ff fa95 	bl	8012554 <pbuf_alloc>
 801302a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d101      	bne.n	8013036 <pbuf_clone+0x2a>
    return NULL;
 8013032:	2300      	movs	r3, #0
 8013034:	e011      	b.n	801305a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013036:	6839      	ldr	r1, [r7, #0]
 8013038:	68f8      	ldr	r0, [r7, #12]
 801303a:	f7ff fea3 	bl	8012d84 <pbuf_copy>
 801303e:	4603      	mov	r3, r0
 8013040:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8013042:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d006      	beq.n	8013058 <pbuf_clone+0x4c>
 801304a:	4b06      	ldr	r3, [pc, #24]	; (8013064 <pbuf_clone+0x58>)
 801304c:	f240 5224 	movw	r2, #1316	; 0x524
 8013050:	4905      	ldr	r1, [pc, #20]	; (8013068 <pbuf_clone+0x5c>)
 8013052:	4806      	ldr	r0, [pc, #24]	; (801306c <pbuf_clone+0x60>)
 8013054:	f00c fc36 	bl	801f8c4 <iprintf>
  return q;
 8013058:	68fb      	ldr	r3, [r7, #12]
}
 801305a:	4618      	mov	r0, r3
 801305c:	3710      	adds	r7, #16
 801305e:	46bd      	mov	sp, r7
 8013060:	bd80      	pop	{r7, pc}
 8013062:	bf00      	nop
 8013064:	080228b0 	.word	0x080228b0
 8013068:	08022d24 	.word	0x08022d24
 801306c:	08022910 	.word	0x08022910

08013070 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013070:	b580      	push	{r7, lr}
 8013072:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013074:	f00c fa88 	bl	801f588 <rand>
 8013078:	4603      	mov	r3, r0
 801307a:	b29b      	uxth	r3, r3
 801307c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013080:	b29b      	uxth	r3, r3
 8013082:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013086:	b29a      	uxth	r2, r3
 8013088:	4b01      	ldr	r3, [pc, #4]	; (8013090 <tcp_init+0x20>)
 801308a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801308c:	bf00      	nop
 801308e:	bd80      	pop	{r7, pc}
 8013090:	20000024 	.word	0x20000024

08013094 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	7d1b      	ldrb	r3, [r3, #20]
 80130a0:	2b01      	cmp	r3, #1
 80130a2:	d105      	bne.n	80130b0 <tcp_free+0x1c>
 80130a4:	4b06      	ldr	r3, [pc, #24]	; (80130c0 <tcp_free+0x2c>)
 80130a6:	22d4      	movs	r2, #212	; 0xd4
 80130a8:	4906      	ldr	r1, [pc, #24]	; (80130c4 <tcp_free+0x30>)
 80130aa:	4807      	ldr	r0, [pc, #28]	; (80130c8 <tcp_free+0x34>)
 80130ac:	f00c fc0a 	bl	801f8c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80130b0:	6879      	ldr	r1, [r7, #4]
 80130b2:	2001      	movs	r0, #1
 80130b4:	f7fe fe4a 	bl	8011d4c <memp_free>
}
 80130b8:	bf00      	nop
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	08022db0 	.word	0x08022db0
 80130c4:	08022de0 	.word	0x08022de0
 80130c8:	08022df4 	.word	0x08022df4

080130cc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	7d1b      	ldrb	r3, [r3, #20]
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d105      	bne.n	80130e8 <tcp_free_listen+0x1c>
 80130dc:	4b06      	ldr	r3, [pc, #24]	; (80130f8 <tcp_free_listen+0x2c>)
 80130de:	22df      	movs	r2, #223	; 0xdf
 80130e0:	4906      	ldr	r1, [pc, #24]	; (80130fc <tcp_free_listen+0x30>)
 80130e2:	4807      	ldr	r0, [pc, #28]	; (8013100 <tcp_free_listen+0x34>)
 80130e4:	f00c fbee 	bl	801f8c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80130e8:	6879      	ldr	r1, [r7, #4]
 80130ea:	2002      	movs	r0, #2
 80130ec:	f7fe fe2e 	bl	8011d4c <memp_free>
}
 80130f0:	bf00      	nop
 80130f2:	3708      	adds	r7, #8
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}
 80130f8:	08022db0 	.word	0x08022db0
 80130fc:	08022e1c 	.word	0x08022e1c
 8013100:	08022df4 	.word	0x08022df4

08013104 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013108:	f001 f8c0 	bl	801428c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801310c:	4b07      	ldr	r3, [pc, #28]	; (801312c <tcp_tmr+0x28>)
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	3301      	adds	r3, #1
 8013112:	b2da      	uxtb	r2, r3
 8013114:	4b05      	ldr	r3, [pc, #20]	; (801312c <tcp_tmr+0x28>)
 8013116:	701a      	strb	r2, [r3, #0]
 8013118:	4b04      	ldr	r3, [pc, #16]	; (801312c <tcp_tmr+0x28>)
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	f003 0301 	and.w	r3, r3, #1
 8013120:	2b00      	cmp	r3, #0
 8013122:	d001      	beq.n	8013128 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013124:	f000 fd72 	bl	8013c0c <tcp_slowtmr>
  }
}
 8013128:	bf00      	nop
 801312a:	bd80      	pop	{r7, pc}
 801312c:	200101dd 	.word	0x200101dd

08013130 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d105      	bne.n	801314c <tcp_remove_listener+0x1c>
 8013140:	4b0d      	ldr	r3, [pc, #52]	; (8013178 <tcp_remove_listener+0x48>)
 8013142:	22ff      	movs	r2, #255	; 0xff
 8013144:	490d      	ldr	r1, [pc, #52]	; (801317c <tcp_remove_listener+0x4c>)
 8013146:	480e      	ldr	r0, [pc, #56]	; (8013180 <tcp_remove_listener+0x50>)
 8013148:	f00c fbbc 	bl	801f8c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	60fb      	str	r3, [r7, #12]
 8013150:	e00a      	b.n	8013168 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013156:	683a      	ldr	r2, [r7, #0]
 8013158:	429a      	cmp	r2, r3
 801315a:	d102      	bne.n	8013162 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	2200      	movs	r2, #0
 8013160:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	60fb      	str	r3, [r7, #12]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d1f1      	bne.n	8013152 <tcp_remove_listener+0x22>
    }
  }
}
 801316e:	bf00      	nop
 8013170:	bf00      	nop
 8013172:	3710      	adds	r7, #16
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}
 8013178:	08022db0 	.word	0x08022db0
 801317c:	08022e38 	.word	0x08022e38
 8013180:	08022df4 	.word	0x08022df4

08013184 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b084      	sub	sp, #16
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d106      	bne.n	80131a0 <tcp_listen_closed+0x1c>
 8013192:	4b14      	ldr	r3, [pc, #80]	; (80131e4 <tcp_listen_closed+0x60>)
 8013194:	f240 1211 	movw	r2, #273	; 0x111
 8013198:	4913      	ldr	r1, [pc, #76]	; (80131e8 <tcp_listen_closed+0x64>)
 801319a:	4814      	ldr	r0, [pc, #80]	; (80131ec <tcp_listen_closed+0x68>)
 801319c:	f00c fb92 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	7d1b      	ldrb	r3, [r3, #20]
 80131a4:	2b01      	cmp	r3, #1
 80131a6:	d006      	beq.n	80131b6 <tcp_listen_closed+0x32>
 80131a8:	4b0e      	ldr	r3, [pc, #56]	; (80131e4 <tcp_listen_closed+0x60>)
 80131aa:	f44f 7289 	mov.w	r2, #274	; 0x112
 80131ae:	4910      	ldr	r1, [pc, #64]	; (80131f0 <tcp_listen_closed+0x6c>)
 80131b0:	480e      	ldr	r0, [pc, #56]	; (80131ec <tcp_listen_closed+0x68>)
 80131b2:	f00c fb87 	bl	801f8c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80131b6:	2301      	movs	r3, #1
 80131b8:	60fb      	str	r3, [r7, #12]
 80131ba:	e00b      	b.n	80131d4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80131bc:	4a0d      	ldr	r2, [pc, #52]	; (80131f4 <tcp_listen_closed+0x70>)
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	6879      	ldr	r1, [r7, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7ff ffb1 	bl	8013130 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	3301      	adds	r3, #1
 80131d2:	60fb      	str	r3, [r7, #12]
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	2b03      	cmp	r3, #3
 80131d8:	d9f0      	bls.n	80131bc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80131da:	bf00      	nop
 80131dc:	bf00      	nop
 80131de:	3710      	adds	r7, #16
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}
 80131e4:	08022db0 	.word	0x08022db0
 80131e8:	08022e60 	.word	0x08022e60
 80131ec:	08022df4 	.word	0x08022df4
 80131f0:	08022e6c 	.word	0x08022e6c
 80131f4:	08025260 	.word	0x08025260

080131f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80131f8:	b5b0      	push	{r4, r5, r7, lr}
 80131fa:	b088      	sub	sp, #32
 80131fc:	af04      	add	r7, sp, #16
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	460b      	mov	r3, r1
 8013202:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d106      	bne.n	8013218 <tcp_close_shutdown+0x20>
 801320a:	4b63      	ldr	r3, [pc, #396]	; (8013398 <tcp_close_shutdown+0x1a0>)
 801320c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013210:	4962      	ldr	r1, [pc, #392]	; (801339c <tcp_close_shutdown+0x1a4>)
 8013212:	4863      	ldr	r0, [pc, #396]	; (80133a0 <tcp_close_shutdown+0x1a8>)
 8013214:	f00c fb56 	bl	801f8c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013218:	78fb      	ldrb	r3, [r7, #3]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d066      	beq.n	80132ec <tcp_close_shutdown+0xf4>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	7d1b      	ldrb	r3, [r3, #20]
 8013222:	2b04      	cmp	r3, #4
 8013224:	d003      	beq.n	801322e <tcp_close_shutdown+0x36>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	7d1b      	ldrb	r3, [r3, #20]
 801322a:	2b07      	cmp	r3, #7
 801322c:	d15e      	bne.n	80132ec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013232:	2b00      	cmp	r3, #0
 8013234:	d104      	bne.n	8013240 <tcp_close_shutdown+0x48>
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801323a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801323e:	d055      	beq.n	80132ec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	8b5b      	ldrh	r3, [r3, #26]
 8013244:	f003 0310 	and.w	r3, r3, #16
 8013248:	2b00      	cmp	r3, #0
 801324a:	d106      	bne.n	801325a <tcp_close_shutdown+0x62>
 801324c:	4b52      	ldr	r3, [pc, #328]	; (8013398 <tcp_close_shutdown+0x1a0>)
 801324e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013252:	4954      	ldr	r1, [pc, #336]	; (80133a4 <tcp_close_shutdown+0x1ac>)
 8013254:	4852      	ldr	r0, [pc, #328]	; (80133a0 <tcp_close_shutdown+0x1a8>)
 8013256:	f00c fb35 	bl	801f8c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013262:	687d      	ldr	r5, [r7, #4]
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	3304      	adds	r3, #4
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	8ad2      	ldrh	r2, [r2, #22]
 801326c:	6879      	ldr	r1, [r7, #4]
 801326e:	8b09      	ldrh	r1, [r1, #24]
 8013270:	9102      	str	r1, [sp, #8]
 8013272:	9201      	str	r2, [sp, #4]
 8013274:	9300      	str	r3, [sp, #0]
 8013276:	462b      	mov	r3, r5
 8013278:	4622      	mov	r2, r4
 801327a:	4601      	mov	r1, r0
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f005 fdd5 	bl	8018e2c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f001 fbb2 	bl	80149ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013288:	4b47      	ldr	r3, [pc, #284]	; (80133a8 <tcp_close_shutdown+0x1b0>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	429a      	cmp	r2, r3
 8013290:	d105      	bne.n	801329e <tcp_close_shutdown+0xa6>
 8013292:	4b45      	ldr	r3, [pc, #276]	; (80133a8 <tcp_close_shutdown+0x1b0>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	68db      	ldr	r3, [r3, #12]
 8013298:	4a43      	ldr	r2, [pc, #268]	; (80133a8 <tcp_close_shutdown+0x1b0>)
 801329a:	6013      	str	r3, [r2, #0]
 801329c:	e013      	b.n	80132c6 <tcp_close_shutdown+0xce>
 801329e:	4b42      	ldr	r3, [pc, #264]	; (80133a8 <tcp_close_shutdown+0x1b0>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	60fb      	str	r3, [r7, #12]
 80132a4:	e00c      	b.n	80132c0 <tcp_close_shutdown+0xc8>
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	68db      	ldr	r3, [r3, #12]
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	429a      	cmp	r2, r3
 80132ae:	d104      	bne.n	80132ba <tcp_close_shutdown+0xc2>
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	68da      	ldr	r2, [r3, #12]
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	60da      	str	r2, [r3, #12]
 80132b8:	e005      	b.n	80132c6 <tcp_close_shutdown+0xce>
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	68db      	ldr	r3, [r3, #12]
 80132be:	60fb      	str	r3, [r7, #12]
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d1ef      	bne.n	80132a6 <tcp_close_shutdown+0xae>
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2200      	movs	r2, #0
 80132ca:	60da      	str	r2, [r3, #12]
 80132cc:	4b37      	ldr	r3, [pc, #220]	; (80133ac <tcp_close_shutdown+0x1b4>)
 80132ce:	2201      	movs	r2, #1
 80132d0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80132d2:	4b37      	ldr	r3, [pc, #220]	; (80133b0 <tcp_close_shutdown+0x1b8>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d102      	bne.n	80132e2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80132dc:	f004 f84a 	bl	8017374 <tcp_trigger_input_pcb_close>
 80132e0:	e002      	b.n	80132e8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f7ff fed6 	bl	8013094 <tcp_free>
      }
      return ERR_OK;
 80132e8:	2300      	movs	r3, #0
 80132ea:	e050      	b.n	801338e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	7d1b      	ldrb	r3, [r3, #20]
 80132f0:	2b02      	cmp	r3, #2
 80132f2:	d03b      	beq.n	801336c <tcp_close_shutdown+0x174>
 80132f4:	2b02      	cmp	r3, #2
 80132f6:	dc44      	bgt.n	8013382 <tcp_close_shutdown+0x18a>
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d002      	beq.n	8013302 <tcp_close_shutdown+0x10a>
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d02a      	beq.n	8013356 <tcp_close_shutdown+0x15e>
 8013300:	e03f      	b.n	8013382 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	8adb      	ldrh	r3, [r3, #22]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d021      	beq.n	801334e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801330a:	4b2a      	ldr	r3, [pc, #168]	; (80133b4 <tcp_close_shutdown+0x1bc>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	429a      	cmp	r2, r3
 8013312:	d105      	bne.n	8013320 <tcp_close_shutdown+0x128>
 8013314:	4b27      	ldr	r3, [pc, #156]	; (80133b4 <tcp_close_shutdown+0x1bc>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	68db      	ldr	r3, [r3, #12]
 801331a:	4a26      	ldr	r2, [pc, #152]	; (80133b4 <tcp_close_shutdown+0x1bc>)
 801331c:	6013      	str	r3, [r2, #0]
 801331e:	e013      	b.n	8013348 <tcp_close_shutdown+0x150>
 8013320:	4b24      	ldr	r3, [pc, #144]	; (80133b4 <tcp_close_shutdown+0x1bc>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	60bb      	str	r3, [r7, #8]
 8013326:	e00c      	b.n	8013342 <tcp_close_shutdown+0x14a>
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	68db      	ldr	r3, [r3, #12]
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	429a      	cmp	r2, r3
 8013330:	d104      	bne.n	801333c <tcp_close_shutdown+0x144>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	68da      	ldr	r2, [r3, #12]
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	60da      	str	r2, [r3, #12]
 801333a:	e005      	b.n	8013348 <tcp_close_shutdown+0x150>
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	60bb      	str	r3, [r7, #8]
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d1ef      	bne.n	8013328 <tcp_close_shutdown+0x130>
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2200      	movs	r2, #0
 801334c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f7ff fea0 	bl	8013094 <tcp_free>
      break;
 8013354:	e01a      	b.n	801338c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff ff14 	bl	8013184 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801335c:	6879      	ldr	r1, [r7, #4]
 801335e:	4816      	ldr	r0, [pc, #88]	; (80133b8 <tcp_close_shutdown+0x1c0>)
 8013360:	f001 fb94 	bl	8014a8c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f7ff feb1 	bl	80130cc <tcp_free_listen>
      break;
 801336a:	e00f      	b.n	801338c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801336c:	6879      	ldr	r1, [r7, #4]
 801336e:	480e      	ldr	r0, [pc, #56]	; (80133a8 <tcp_close_shutdown+0x1b0>)
 8013370:	f001 fb8c 	bl	8014a8c <tcp_pcb_remove>
 8013374:	4b0d      	ldr	r3, [pc, #52]	; (80133ac <tcp_close_shutdown+0x1b4>)
 8013376:	2201      	movs	r2, #1
 8013378:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f7ff fe8a 	bl	8013094 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013380:	e004      	b.n	801338c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f000 f81a 	bl	80133bc <tcp_close_shutdown_fin>
 8013388:	4603      	mov	r3, r0
 801338a:	e000      	b.n	801338e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801338c:	2300      	movs	r3, #0
}
 801338e:	4618      	mov	r0, r3
 8013390:	3710      	adds	r7, #16
 8013392:	46bd      	mov	sp, r7
 8013394:	bdb0      	pop	{r4, r5, r7, pc}
 8013396:	bf00      	nop
 8013398:	08022db0 	.word	0x08022db0
 801339c:	08022e84 	.word	0x08022e84
 80133a0:	08022df4 	.word	0x08022df4
 80133a4:	08022ea4 	.word	0x08022ea4
 80133a8:	200101d4 	.word	0x200101d4
 80133ac:	200101dc 	.word	0x200101dc
 80133b0:	20010214 	.word	0x20010214
 80133b4:	200101cc 	.word	0x200101cc
 80133b8:	200101d0 	.word	0x200101d0

080133bc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b084      	sub	sp, #16
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d106      	bne.n	80133d8 <tcp_close_shutdown_fin+0x1c>
 80133ca:	4b2e      	ldr	r3, [pc, #184]	; (8013484 <tcp_close_shutdown_fin+0xc8>)
 80133cc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80133d0:	492d      	ldr	r1, [pc, #180]	; (8013488 <tcp_close_shutdown_fin+0xcc>)
 80133d2:	482e      	ldr	r0, [pc, #184]	; (801348c <tcp_close_shutdown_fin+0xd0>)
 80133d4:	f00c fa76 	bl	801f8c4 <iprintf>

  switch (pcb->state) {
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	7d1b      	ldrb	r3, [r3, #20]
 80133dc:	2b07      	cmp	r3, #7
 80133de:	d020      	beq.n	8013422 <tcp_close_shutdown_fin+0x66>
 80133e0:	2b07      	cmp	r3, #7
 80133e2:	dc2b      	bgt.n	801343c <tcp_close_shutdown_fin+0x80>
 80133e4:	2b03      	cmp	r3, #3
 80133e6:	d002      	beq.n	80133ee <tcp_close_shutdown_fin+0x32>
 80133e8:	2b04      	cmp	r3, #4
 80133ea:	d00d      	beq.n	8013408 <tcp_close_shutdown_fin+0x4c>
 80133ec:	e026      	b.n	801343c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80133ee:	6878      	ldr	r0, [r7, #4]
 80133f0:	f004 fe2a 	bl	8018048 <tcp_send_fin>
 80133f4:	4603      	mov	r3, r0
 80133f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80133f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d11f      	bne.n	8013440 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2205      	movs	r2, #5
 8013404:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013406:	e01b      	b.n	8013440 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f004 fe1d 	bl	8018048 <tcp_send_fin>
 801340e:	4603      	mov	r3, r0
 8013410:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d114      	bne.n	8013444 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2205      	movs	r2, #5
 801341e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013420:	e010      	b.n	8013444 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013422:	6878      	ldr	r0, [r7, #4]
 8013424:	f004 fe10 	bl	8018048 <tcp_send_fin>
 8013428:	4603      	mov	r3, r0
 801342a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801342c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d109      	bne.n	8013448 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2209      	movs	r2, #9
 8013438:	751a      	strb	r2, [r3, #20]
      }
      break;
 801343a:	e005      	b.n	8013448 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801343c:	2300      	movs	r3, #0
 801343e:	e01c      	b.n	801347a <tcp_close_shutdown_fin+0xbe>
      break;
 8013440:	bf00      	nop
 8013442:	e002      	b.n	801344a <tcp_close_shutdown_fin+0x8e>
      break;
 8013444:	bf00      	nop
 8013446:	e000      	b.n	801344a <tcp_close_shutdown_fin+0x8e>
      break;
 8013448:	bf00      	nop
  }

  if (err == ERR_OK) {
 801344a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d103      	bne.n	801345a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	f004 ff36 	bl	80182c4 <tcp_output>
 8013458:	e00d      	b.n	8013476 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801345e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013462:	d108      	bne.n	8013476 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	8b5b      	ldrh	r3, [r3, #26]
 8013468:	f043 0308 	orr.w	r3, r3, #8
 801346c:	b29a      	uxth	r2, r3
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013472:	2300      	movs	r3, #0
 8013474:	e001      	b.n	801347a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013476:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	08022db0 	.word	0x08022db0
 8013488:	08022e60 	.word	0x08022e60
 801348c:	08022df4 	.word	0x08022df4

08013490 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b082      	sub	sp, #8
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d109      	bne.n	80134b2 <tcp_close+0x22>
 801349e:	4b0f      	ldr	r3, [pc, #60]	; (80134dc <tcp_close+0x4c>)
 80134a0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80134a4:	490e      	ldr	r1, [pc, #56]	; (80134e0 <tcp_close+0x50>)
 80134a6:	480f      	ldr	r0, [pc, #60]	; (80134e4 <tcp_close+0x54>)
 80134a8:	f00c fa0c 	bl	801f8c4 <iprintf>
 80134ac:	f06f 030f 	mvn.w	r3, #15
 80134b0:	e00f      	b.n	80134d2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	7d1b      	ldrb	r3, [r3, #20]
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d006      	beq.n	80134c8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	8b5b      	ldrh	r3, [r3, #26]
 80134be:	f043 0310 	orr.w	r3, r3, #16
 80134c2:	b29a      	uxth	r2, r3
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80134c8:	2101      	movs	r1, #1
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f7ff fe94 	bl	80131f8 <tcp_close_shutdown>
 80134d0:	4603      	mov	r3, r0
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3708      	adds	r7, #8
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	08022db0 	.word	0x08022db0
 80134e0:	08022ec0 	.word	0x08022ec0
 80134e4:	08022df4 	.word	0x08022df4

080134e8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b084      	sub	sp, #16
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	60b9      	str	r1, [r7, #8]
 80134f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d109      	bne.n	801350e <tcp_shutdown+0x26>
 80134fa:	4b26      	ldr	r3, [pc, #152]	; (8013594 <tcp_shutdown+0xac>)
 80134fc:	f240 2207 	movw	r2, #519	; 0x207
 8013500:	4925      	ldr	r1, [pc, #148]	; (8013598 <tcp_shutdown+0xb0>)
 8013502:	4826      	ldr	r0, [pc, #152]	; (801359c <tcp_shutdown+0xb4>)
 8013504:	f00c f9de 	bl	801f8c4 <iprintf>
 8013508:	f06f 030f 	mvn.w	r3, #15
 801350c:	e03d      	b.n	801358a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	7d1b      	ldrb	r3, [r3, #20]
 8013512:	2b01      	cmp	r3, #1
 8013514:	d102      	bne.n	801351c <tcp_shutdown+0x34>
    return ERR_CONN;
 8013516:	f06f 030a 	mvn.w	r3, #10
 801351a:	e036      	b.n	801358a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d01b      	beq.n	801355a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	8b5b      	ldrh	r3, [r3, #26]
 8013526:	f043 0310 	orr.w	r3, r3, #16
 801352a:	b29a      	uxth	r2, r3
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d005      	beq.n	8013542 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013536:	2101      	movs	r1, #1
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f7ff fe5d 	bl	80131f8 <tcp_close_shutdown>
 801353e:	4603      	mov	r3, r0
 8013540:	e023      	b.n	801358a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013546:	2b00      	cmp	r3, #0
 8013548:	d007      	beq.n	801355a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801354e:	4618      	mov	r0, r3
 8013550:	f7ff fae4 	bl	8012b1c <pbuf_free>
      pcb->refused_data = NULL;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	2200      	movs	r2, #0
 8013558:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d013      	beq.n	8013588 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	7d1b      	ldrb	r3, [r3, #20]
 8013564:	2b04      	cmp	r3, #4
 8013566:	dc02      	bgt.n	801356e <tcp_shutdown+0x86>
 8013568:	2b03      	cmp	r3, #3
 801356a:	da02      	bge.n	8013572 <tcp_shutdown+0x8a>
 801356c:	e009      	b.n	8013582 <tcp_shutdown+0x9a>
 801356e:	2b07      	cmp	r3, #7
 8013570:	d107      	bne.n	8013582 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	b2db      	uxtb	r3, r3
 8013576:	4619      	mov	r1, r3
 8013578:	68f8      	ldr	r0, [r7, #12]
 801357a:	f7ff fe3d 	bl	80131f8 <tcp_close_shutdown>
 801357e:	4603      	mov	r3, r0
 8013580:	e003      	b.n	801358a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8013582:	f06f 030a 	mvn.w	r3, #10
 8013586:	e000      	b.n	801358a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013588:	2300      	movs	r3, #0
}
 801358a:	4618      	mov	r0, r3
 801358c:	3710      	adds	r7, #16
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	08022db0 	.word	0x08022db0
 8013598:	08022ed8 	.word	0x08022ed8
 801359c:	08022df4 	.word	0x08022df4

080135a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b08e      	sub	sp, #56	; 0x38
 80135a4:	af04      	add	r7, sp, #16
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d107      	bne.n	80135c0 <tcp_abandon+0x20>
 80135b0:	4b52      	ldr	r3, [pc, #328]	; (80136fc <tcp_abandon+0x15c>)
 80135b2:	f240 223d 	movw	r2, #573	; 0x23d
 80135b6:	4952      	ldr	r1, [pc, #328]	; (8013700 <tcp_abandon+0x160>)
 80135b8:	4852      	ldr	r0, [pc, #328]	; (8013704 <tcp_abandon+0x164>)
 80135ba:	f00c f983 	bl	801f8c4 <iprintf>
 80135be:	e099      	b.n	80136f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	7d1b      	ldrb	r3, [r3, #20]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d106      	bne.n	80135d6 <tcp_abandon+0x36>
 80135c8:	4b4c      	ldr	r3, [pc, #304]	; (80136fc <tcp_abandon+0x15c>)
 80135ca:	f44f 7210 	mov.w	r2, #576	; 0x240
 80135ce:	494e      	ldr	r1, [pc, #312]	; (8013708 <tcp_abandon+0x168>)
 80135d0:	484c      	ldr	r0, [pc, #304]	; (8013704 <tcp_abandon+0x164>)
 80135d2:	f00c f977 	bl	801f8c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	7d1b      	ldrb	r3, [r3, #20]
 80135da:	2b0a      	cmp	r3, #10
 80135dc:	d107      	bne.n	80135ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80135de:	6879      	ldr	r1, [r7, #4]
 80135e0:	484a      	ldr	r0, [pc, #296]	; (801370c <tcp_abandon+0x16c>)
 80135e2:	f001 fa53 	bl	8014a8c <tcp_pcb_remove>
    tcp_free(pcb);
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f7ff fd54 	bl	8013094 <tcp_free>
 80135ec:	e082      	b.n	80136f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80135ee:	2300      	movs	r3, #0
 80135f0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80135f2:	2300      	movs	r3, #0
 80135f4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013600:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013608:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	691b      	ldr	r3, [r3, #16]
 801360e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	7d1b      	ldrb	r3, [r3, #20]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d126      	bne.n	8013666 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	8adb      	ldrh	r3, [r3, #22]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d02e      	beq.n	801367e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013620:	4b3b      	ldr	r3, [pc, #236]	; (8013710 <tcp_abandon+0x170>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	687a      	ldr	r2, [r7, #4]
 8013626:	429a      	cmp	r2, r3
 8013628:	d105      	bne.n	8013636 <tcp_abandon+0x96>
 801362a:	4b39      	ldr	r3, [pc, #228]	; (8013710 <tcp_abandon+0x170>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	4a37      	ldr	r2, [pc, #220]	; (8013710 <tcp_abandon+0x170>)
 8013632:	6013      	str	r3, [r2, #0]
 8013634:	e013      	b.n	801365e <tcp_abandon+0xbe>
 8013636:	4b36      	ldr	r3, [pc, #216]	; (8013710 <tcp_abandon+0x170>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	61fb      	str	r3, [r7, #28]
 801363c:	e00c      	b.n	8013658 <tcp_abandon+0xb8>
 801363e:	69fb      	ldr	r3, [r7, #28]
 8013640:	68db      	ldr	r3, [r3, #12]
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	429a      	cmp	r2, r3
 8013646:	d104      	bne.n	8013652 <tcp_abandon+0xb2>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	68da      	ldr	r2, [r3, #12]
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	60da      	str	r2, [r3, #12]
 8013650:	e005      	b.n	801365e <tcp_abandon+0xbe>
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	68db      	ldr	r3, [r3, #12]
 8013656:	61fb      	str	r3, [r7, #28]
 8013658:	69fb      	ldr	r3, [r7, #28]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d1ef      	bne.n	801363e <tcp_abandon+0x9e>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2200      	movs	r2, #0
 8013662:	60da      	str	r2, [r3, #12]
 8013664:	e00b      	b.n	801367e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	8adb      	ldrh	r3, [r3, #22]
 801366e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013670:	6879      	ldr	r1, [r7, #4]
 8013672:	4828      	ldr	r0, [pc, #160]	; (8013714 <tcp_abandon+0x174>)
 8013674:	f001 fa0a 	bl	8014a8c <tcp_pcb_remove>
 8013678:	4b27      	ldr	r3, [pc, #156]	; (8013718 <tcp_abandon+0x178>)
 801367a:	2201      	movs	r2, #1
 801367c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013682:	2b00      	cmp	r3, #0
 8013684:	d004      	beq.n	8013690 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801368a:	4618      	mov	r0, r3
 801368c:	f000 fede 	bl	801444c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013694:	2b00      	cmp	r3, #0
 8013696:	d004      	beq.n	80136a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801369c:	4618      	mov	r0, r3
 801369e:	f000 fed5 	bl	801444c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d004      	beq.n	80136b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136ae:	4618      	mov	r0, r3
 80136b0:	f000 fecc 	bl	801444c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80136b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d00e      	beq.n	80136d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80136ba:	6879      	ldr	r1, [r7, #4]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	3304      	adds	r3, #4
 80136c0:	687a      	ldr	r2, [r7, #4]
 80136c2:	8b12      	ldrh	r2, [r2, #24]
 80136c4:	9202      	str	r2, [sp, #8]
 80136c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80136c8:	9201      	str	r2, [sp, #4]
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	460b      	mov	r3, r1
 80136ce:	697a      	ldr	r2, [r7, #20]
 80136d0:	69b9      	ldr	r1, [r7, #24]
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f005 fbaa 	bl	8018e2c <tcp_rst>
    }
    last_state = pcb->state;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	7d1b      	ldrb	r3, [r3, #20]
 80136dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f7ff fcd8 	bl	8013094 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d004      	beq.n	80136f4 <tcp_abandon+0x154>
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	f06f 010c 	mvn.w	r1, #12
 80136f0:	68f8      	ldr	r0, [r7, #12]
 80136f2:	4798      	blx	r3
  }
}
 80136f4:	3728      	adds	r7, #40	; 0x28
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	08022db0 	.word	0x08022db0
 8013700:	08022ef4 	.word	0x08022ef4
 8013704:	08022df4 	.word	0x08022df4
 8013708:	08022f10 	.word	0x08022f10
 801370c:	200101d8 	.word	0x200101d8
 8013710:	200101cc 	.word	0x200101cc
 8013714:	200101d4 	.word	0x200101d4
 8013718:	200101dc 	.word	0x200101dc

0801371c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013724:	2101      	movs	r1, #1
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7ff ff3a 	bl	80135a0 <tcp_abandon>
}
 801372c:	bf00      	nop
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b088      	sub	sp, #32
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	4613      	mov	r3, r2
 8013740:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013742:	2304      	movs	r3, #4
 8013744:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d101      	bne.n	8013750 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801374c:	4b3e      	ldr	r3, [pc, #248]	; (8013848 <tcp_bind+0x114>)
 801374e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d109      	bne.n	801376a <tcp_bind+0x36>
 8013756:	4b3d      	ldr	r3, [pc, #244]	; (801384c <tcp_bind+0x118>)
 8013758:	f240 22a9 	movw	r2, #681	; 0x2a9
 801375c:	493c      	ldr	r1, [pc, #240]	; (8013850 <tcp_bind+0x11c>)
 801375e:	483d      	ldr	r0, [pc, #244]	; (8013854 <tcp_bind+0x120>)
 8013760:	f00c f8b0 	bl	801f8c4 <iprintf>
 8013764:	f06f 030f 	mvn.w	r3, #15
 8013768:	e06a      	b.n	8013840 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	7d1b      	ldrb	r3, [r3, #20]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d009      	beq.n	8013786 <tcp_bind+0x52>
 8013772:	4b36      	ldr	r3, [pc, #216]	; (801384c <tcp_bind+0x118>)
 8013774:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013778:	4937      	ldr	r1, [pc, #220]	; (8013858 <tcp_bind+0x124>)
 801377a:	4836      	ldr	r0, [pc, #216]	; (8013854 <tcp_bind+0x120>)
 801377c:	f00c f8a2 	bl	801f8c4 <iprintf>
 8013780:	f06f 0305 	mvn.w	r3, #5
 8013784:	e05c      	b.n	8013840 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013786:	88fb      	ldrh	r3, [r7, #6]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d109      	bne.n	80137a0 <tcp_bind+0x6c>
    port = tcp_new_port();
 801378c:	f000 f9f8 	bl	8013b80 <tcp_new_port>
 8013790:	4603      	mov	r3, r0
 8013792:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013794:	88fb      	ldrh	r3, [r7, #6]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d135      	bne.n	8013806 <tcp_bind+0xd2>
      return ERR_BUF;
 801379a:	f06f 0301 	mvn.w	r3, #1
 801379e:	e04f      	b.n	8013840 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80137a0:	2300      	movs	r3, #0
 80137a2:	61fb      	str	r3, [r7, #28]
 80137a4:	e02b      	b.n	80137fe <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80137a6:	4a2d      	ldr	r2, [pc, #180]	; (801385c <tcp_bind+0x128>)
 80137a8:	69fb      	ldr	r3, [r7, #28]
 80137aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	61bb      	str	r3, [r7, #24]
 80137b2:	e01e      	b.n	80137f2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80137b4:	69bb      	ldr	r3, [r7, #24]
 80137b6:	8adb      	ldrh	r3, [r3, #22]
 80137b8:	88fa      	ldrh	r2, [r7, #6]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d116      	bne.n	80137ec <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80137be:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d010      	beq.n	80137e6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d00c      	beq.n	80137e6 <tcp_bind+0xb2>
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d009      	beq.n	80137e6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d005      	beq.n	80137e6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80137da:	69bb      	ldr	r3, [r7, #24]
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d102      	bne.n	80137ec <tcp_bind+0xb8>
              return ERR_USE;
 80137e6:	f06f 0307 	mvn.w	r3, #7
 80137ea:	e029      	b.n	8013840 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80137ec:	69bb      	ldr	r3, [r7, #24]
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	61bb      	str	r3, [r7, #24]
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d1dd      	bne.n	80137b4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80137f8:	69fb      	ldr	r3, [r7, #28]
 80137fa:	3301      	adds	r3, #1
 80137fc:	61fb      	str	r3, [r7, #28]
 80137fe:	69fa      	ldr	r2, [r7, #28]
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	429a      	cmp	r2, r3
 8013804:	dbcf      	blt.n	80137a6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d00c      	beq.n	8013826 <tcp_bind+0xf2>
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d008      	beq.n	8013826 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d002      	beq.n	8013820 <tcp_bind+0xec>
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	e000      	b.n	8013822 <tcp_bind+0xee>
 8013820:	2300      	movs	r3, #0
 8013822:	68fa      	ldr	r2, [r7, #12]
 8013824:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	88fa      	ldrh	r2, [r7, #6]
 801382a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801382c:	4b0c      	ldr	r3, [pc, #48]	; (8013860 <tcp_bind+0x12c>)
 801382e:	681a      	ldr	r2, [r3, #0]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	60da      	str	r2, [r3, #12]
 8013834:	4a0a      	ldr	r2, [pc, #40]	; (8013860 <tcp_bind+0x12c>)
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	6013      	str	r3, [r2, #0]
 801383a:	f005 fcb9 	bl	80191b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801383e:	2300      	movs	r3, #0
}
 8013840:	4618      	mov	r0, r3
 8013842:	3720      	adds	r7, #32
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	08025298 	.word	0x08025298
 801384c:	08022db0 	.word	0x08022db0
 8013850:	08022f44 	.word	0x08022f44
 8013854:	08022df4 	.word	0x08022df4
 8013858:	08022f5c 	.word	0x08022f5c
 801385c:	08025260 	.word	0x08025260
 8013860:	200101cc 	.word	0x200101cc

08013864 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d007      	beq.n	8013884 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801387a:	3301      	adds	r3, #1
 801387c:	b2da      	uxtb	r2, r3
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8013882:	e002      	b.n	801388a <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2200      	movs	r2, #0
 8013888:	721a      	strb	r2, [r3, #8]
}
 801388a:	bf00      	nop
 801388c:	370c      	adds	r7, #12
 801388e:	46bd      	mov	sp, r7
 8013890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013894:	4770      	bx	lr
	...

08013898 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b084      	sub	sp, #16
 801389c:	af00      	add	r7, sp, #0
 801389e:	60f8      	str	r0, [r7, #12]
 80138a0:	60b9      	str	r1, [r7, #8]
 80138a2:	4613      	mov	r3, r2
 80138a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d106      	bne.n	80138ba <tcp_accept_null+0x22>
 80138ac:	4b07      	ldr	r3, [pc, #28]	; (80138cc <tcp_accept_null+0x34>)
 80138ae:	f240 320f 	movw	r2, #783	; 0x30f
 80138b2:	4907      	ldr	r1, [pc, #28]	; (80138d0 <tcp_accept_null+0x38>)
 80138b4:	4807      	ldr	r0, [pc, #28]	; (80138d4 <tcp_accept_null+0x3c>)
 80138b6:	f00c f805 	bl	801f8c4 <iprintf>

  tcp_abort(pcb);
 80138ba:	68b8      	ldr	r0, [r7, #8]
 80138bc:	f7ff ff2e 	bl	801371c <tcp_abort>

  return ERR_ABRT;
 80138c0:	f06f 030c 	mvn.w	r3, #12
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3710      	adds	r7, #16
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	08022db0 	.word	0x08022db0
 80138d0:	08022f84 	.word	0x08022f84
 80138d4:	08022df4 	.word	0x08022df4

080138d8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b088      	sub	sp, #32
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	460b      	mov	r3, r1
 80138e2:	607a      	str	r2, [r7, #4]
 80138e4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80138e6:	2300      	movs	r3, #0
 80138e8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d109      	bne.n	8013904 <tcp_listen_with_backlog_and_err+0x2c>
 80138f0:	4b47      	ldr	r3, [pc, #284]	; (8013a10 <tcp_listen_with_backlog_and_err+0x138>)
 80138f2:	f240 3259 	movw	r2, #857	; 0x359
 80138f6:	4947      	ldr	r1, [pc, #284]	; (8013a14 <tcp_listen_with_backlog_and_err+0x13c>)
 80138f8:	4847      	ldr	r0, [pc, #284]	; (8013a18 <tcp_listen_with_backlog_and_err+0x140>)
 80138fa:	f00b ffe3 	bl	801f8c4 <iprintf>
 80138fe:	23f0      	movs	r3, #240	; 0xf0
 8013900:	76fb      	strb	r3, [r7, #27]
 8013902:	e079      	b.n	80139f8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	7d1b      	ldrb	r3, [r3, #20]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d009      	beq.n	8013920 <tcp_listen_with_backlog_and_err+0x48>
 801390c:	4b40      	ldr	r3, [pc, #256]	; (8013a10 <tcp_listen_with_backlog_and_err+0x138>)
 801390e:	f240 325a 	movw	r2, #858	; 0x35a
 8013912:	4942      	ldr	r1, [pc, #264]	; (8013a1c <tcp_listen_with_backlog_and_err+0x144>)
 8013914:	4840      	ldr	r0, [pc, #256]	; (8013a18 <tcp_listen_with_backlog_and_err+0x140>)
 8013916:	f00b ffd5 	bl	801f8c4 <iprintf>
 801391a:	23f1      	movs	r3, #241	; 0xf1
 801391c:	76fb      	strb	r3, [r7, #27]
 801391e:	e06b      	b.n	80139f8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	7d1b      	ldrb	r3, [r3, #20]
 8013924:	2b01      	cmp	r3, #1
 8013926:	d104      	bne.n	8013932 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801392c:	23f7      	movs	r3, #247	; 0xf7
 801392e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013930:	e062      	b.n	80139f8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013932:	2002      	movs	r0, #2
 8013934:	f7fe f994 	bl	8011c60 <memp_malloc>
 8013938:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801393a:	69fb      	ldr	r3, [r7, #28]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d102      	bne.n	8013946 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013940:	23ff      	movs	r3, #255	; 0xff
 8013942:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013944:	e058      	b.n	80139f8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	691a      	ldr	r2, [r3, #16]
 801394a:	69fb      	ldr	r3, [r7, #28]
 801394c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	8ada      	ldrh	r2, [r3, #22]
 8013952:	69fb      	ldr	r3, [r7, #28]
 8013954:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	2201      	movs	r2, #1
 801395a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	7d5a      	ldrb	r2, [r3, #21]
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	7a5a      	ldrb	r2, [r3, #9]
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801396c:	69fb      	ldr	r3, [r7, #28]
 801396e:	2200      	movs	r2, #0
 8013970:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	7ada      	ldrb	r2, [r3, #11]
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	7a9a      	ldrb	r2, [r3, #10]
 801397e:	69fb      	ldr	r3, [r7, #28]
 8013980:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	69fb      	ldr	r3, [r7, #28]
 8013988:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	8adb      	ldrh	r3, [r3, #22]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d021      	beq.n	80139d6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013992:	4b23      	ldr	r3, [pc, #140]	; (8013a20 <tcp_listen_with_backlog_and_err+0x148>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	68fa      	ldr	r2, [r7, #12]
 8013998:	429a      	cmp	r2, r3
 801399a:	d105      	bne.n	80139a8 <tcp_listen_with_backlog_and_err+0xd0>
 801399c:	4b20      	ldr	r3, [pc, #128]	; (8013a20 <tcp_listen_with_backlog_and_err+0x148>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	68db      	ldr	r3, [r3, #12]
 80139a2:	4a1f      	ldr	r2, [pc, #124]	; (8013a20 <tcp_listen_with_backlog_and_err+0x148>)
 80139a4:	6013      	str	r3, [r2, #0]
 80139a6:	e013      	b.n	80139d0 <tcp_listen_with_backlog_and_err+0xf8>
 80139a8:	4b1d      	ldr	r3, [pc, #116]	; (8013a20 <tcp_listen_with_backlog_and_err+0x148>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	617b      	str	r3, [r7, #20]
 80139ae:	e00c      	b.n	80139ca <tcp_listen_with_backlog_and_err+0xf2>
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	68db      	ldr	r3, [r3, #12]
 80139b4:	68fa      	ldr	r2, [r7, #12]
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d104      	bne.n	80139c4 <tcp_listen_with_backlog_and_err+0xec>
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	68da      	ldr	r2, [r3, #12]
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	60da      	str	r2, [r3, #12]
 80139c2:	e005      	b.n	80139d0 <tcp_listen_with_backlog_and_err+0xf8>
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	68db      	ldr	r3, [r3, #12]
 80139c8:	617b      	str	r3, [r7, #20]
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1ef      	bne.n	80139b0 <tcp_listen_with_backlog_and_err+0xd8>
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	2200      	movs	r2, #0
 80139d4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80139d6:	68f8      	ldr	r0, [r7, #12]
 80139d8:	f7ff fb5c 	bl	8013094 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80139dc:	69fb      	ldr	r3, [r7, #28]
 80139de:	4a11      	ldr	r2, [pc, #68]	; (8013a24 <tcp_listen_with_backlog_and_err+0x14c>)
 80139e0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80139e2:	4b11      	ldr	r3, [pc, #68]	; (8013a28 <tcp_listen_with_backlog_and_err+0x150>)
 80139e4:	681a      	ldr	r2, [r3, #0]
 80139e6:	69fb      	ldr	r3, [r7, #28]
 80139e8:	60da      	str	r2, [r3, #12]
 80139ea:	4a0f      	ldr	r2, [pc, #60]	; (8013a28 <tcp_listen_with_backlog_and_err+0x150>)
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	6013      	str	r3, [r2, #0]
 80139f0:	f005 fbde 	bl	80191b0 <tcp_timer_needed>
  res = ERR_OK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d002      	beq.n	8013a04 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	7efa      	ldrb	r2, [r7, #27]
 8013a02:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013a04:	69fb      	ldr	r3, [r7, #28]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3720      	adds	r7, #32
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}
 8013a0e:	bf00      	nop
 8013a10:	08022db0 	.word	0x08022db0
 8013a14:	08022fa4 	.word	0x08022fa4
 8013a18:	08022df4 	.word	0x08022df4
 8013a1c:	08022fd4 	.word	0x08022fd4
 8013a20:	200101cc 	.word	0x200101cc
 8013a24:	08013899 	.word	0x08013899
 8013a28:	200101d0 	.word	0x200101d0

08013a2c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b084      	sub	sp, #16
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d106      	bne.n	8013a48 <tcp_update_rcv_ann_wnd+0x1c>
 8013a3a:	4b25      	ldr	r3, [pc, #148]	; (8013ad0 <tcp_update_rcv_ann_wnd+0xa4>)
 8013a3c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013a40:	4924      	ldr	r1, [pc, #144]	; (8013ad4 <tcp_update_rcv_ann_wnd+0xa8>)
 8013a42:	4825      	ldr	r0, [pc, #148]	; (8013ad8 <tcp_update_rcv_ann_wnd+0xac>)
 8013a44:	f00b ff3e 	bl	801f8c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a4c:	687a      	ldr	r2, [r7, #4]
 8013a4e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013a50:	4413      	add	r3, r2
 8013a52:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a58:	687a      	ldr	r2, [r7, #4]
 8013a5a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013a5c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013a60:	bf28      	it	cs
 8013a62:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013a66:	b292      	uxth	r2, r2
 8013a68:	4413      	add	r3, r2
 8013a6a:	68fa      	ldr	r2, [r7, #12]
 8013a6c:	1ad3      	subs	r3, r2, r3
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	db08      	blt.n	8013a84 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a7e:	68fa      	ldr	r2, [r7, #12]
 8013a80:	1ad3      	subs	r3, r2, r3
 8013a82:	e020      	b.n	8013ac6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a8c:	1ad3      	subs	r3, r2, r3
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	dd03      	ble.n	8013a9a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2200      	movs	r2, #0
 8013a96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013a98:	e014      	b.n	8013ac4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa2:	1ad3      	subs	r3, r2, r3
 8013aa4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013aac:	d306      	bcc.n	8013abc <tcp_update_rcv_ann_wnd+0x90>
 8013aae:	4b08      	ldr	r3, [pc, #32]	; (8013ad0 <tcp_update_rcv_ann_wnd+0xa4>)
 8013ab0:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013ab4:	4909      	ldr	r1, [pc, #36]	; (8013adc <tcp_update_rcv_ann_wnd+0xb0>)
 8013ab6:	4808      	ldr	r0, [pc, #32]	; (8013ad8 <tcp_update_rcv_ann_wnd+0xac>)
 8013ab8:	f00b ff04 	bl	801f8c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013ac4:	2300      	movs	r3, #0
  }
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3710      	adds	r7, #16
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	08022db0 	.word	0x08022db0
 8013ad4:	0802300c 	.word	0x0802300c
 8013ad8:	08022df4 	.word	0x08022df4
 8013adc:	08023030 	.word	0x08023030

08013ae0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b084      	sub	sp, #16
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
 8013ae8:	460b      	mov	r3, r1
 8013aea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d107      	bne.n	8013b02 <tcp_recved+0x22>
 8013af2:	4b1f      	ldr	r3, [pc, #124]	; (8013b70 <tcp_recved+0x90>)
 8013af4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013af8:	491e      	ldr	r1, [pc, #120]	; (8013b74 <tcp_recved+0x94>)
 8013afa:	481f      	ldr	r0, [pc, #124]	; (8013b78 <tcp_recved+0x98>)
 8013afc:	f00b fee2 	bl	801f8c4 <iprintf>
 8013b00:	e032      	b.n	8013b68 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	7d1b      	ldrb	r3, [r3, #20]
 8013b06:	2b01      	cmp	r3, #1
 8013b08:	d106      	bne.n	8013b18 <tcp_recved+0x38>
 8013b0a:	4b19      	ldr	r3, [pc, #100]	; (8013b70 <tcp_recved+0x90>)
 8013b0c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013b10:	491a      	ldr	r1, [pc, #104]	; (8013b7c <tcp_recved+0x9c>)
 8013b12:	4819      	ldr	r0, [pc, #100]	; (8013b78 <tcp_recved+0x98>)
 8013b14:	f00b fed6 	bl	801f8c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013b1c:	887b      	ldrh	r3, [r7, #2]
 8013b1e:	4413      	add	r3, r2
 8013b20:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013b22:	89fb      	ldrh	r3, [r7, #14]
 8013b24:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013b28:	d804      	bhi.n	8013b34 <tcp_recved+0x54>
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b2e:	89fa      	ldrh	r2, [r7, #14]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d204      	bcs.n	8013b3e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013b3a:	851a      	strh	r2, [r3, #40]	; 0x28
 8013b3c:	e002      	b.n	8013b44 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	89fa      	ldrh	r2, [r7, #14]
 8013b42:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7ff ff71 	bl	8013a2c <tcp_update_rcv_ann_wnd>
 8013b4a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013b52:	d309      	bcc.n	8013b68 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	8b5b      	ldrh	r3, [r3, #26]
 8013b58:	f043 0302 	orr.w	r3, r3, #2
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f004 fbae 	bl	80182c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013b68:	3710      	adds	r7, #16
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}
 8013b6e:	bf00      	nop
 8013b70:	08022db0 	.word	0x08022db0
 8013b74:	0802304c 	.word	0x0802304c
 8013b78:	08022df4 	.word	0x08022df4
 8013b7c:	08023064 	.word	0x08023064

08013b80 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013b80:	b480      	push	{r7}
 8013b82:	b083      	sub	sp, #12
 8013b84:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013b86:	2300      	movs	r3, #0
 8013b88:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013b8a:	4b1e      	ldr	r3, [pc, #120]	; (8013c04 <tcp_new_port+0x84>)
 8013b8c:	881b      	ldrh	r3, [r3, #0]
 8013b8e:	3301      	adds	r3, #1
 8013b90:	b29a      	uxth	r2, r3
 8013b92:	4b1c      	ldr	r3, [pc, #112]	; (8013c04 <tcp_new_port+0x84>)
 8013b94:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013b96:	4b1b      	ldr	r3, [pc, #108]	; (8013c04 <tcp_new_port+0x84>)
 8013b98:	881b      	ldrh	r3, [r3, #0]
 8013b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b9e:	4293      	cmp	r3, r2
 8013ba0:	d103      	bne.n	8013baa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013ba2:	4b18      	ldr	r3, [pc, #96]	; (8013c04 <tcp_new_port+0x84>)
 8013ba4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013ba8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013baa:	2300      	movs	r3, #0
 8013bac:	71fb      	strb	r3, [r7, #7]
 8013bae:	e01e      	b.n	8013bee <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013bb0:	79fb      	ldrb	r3, [r7, #7]
 8013bb2:	4a15      	ldr	r2, [pc, #84]	; (8013c08 <tcp_new_port+0x88>)
 8013bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	603b      	str	r3, [r7, #0]
 8013bbc:	e011      	b.n	8013be2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	8ada      	ldrh	r2, [r3, #22]
 8013bc2:	4b10      	ldr	r3, [pc, #64]	; (8013c04 <tcp_new_port+0x84>)
 8013bc4:	881b      	ldrh	r3, [r3, #0]
 8013bc6:	429a      	cmp	r2, r3
 8013bc8:	d108      	bne.n	8013bdc <tcp_new_port+0x5c>
        n++;
 8013bca:	88bb      	ldrh	r3, [r7, #4]
 8013bcc:	3301      	adds	r3, #1
 8013bce:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013bd0:	88bb      	ldrh	r3, [r7, #4]
 8013bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013bd6:	d3d8      	bcc.n	8013b8a <tcp_new_port+0xa>
          return 0;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	e00d      	b.n	8013bf8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	603b      	str	r3, [r7, #0]
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d1ea      	bne.n	8013bbe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013be8:	79fb      	ldrb	r3, [r7, #7]
 8013bea:	3301      	adds	r3, #1
 8013bec:	71fb      	strb	r3, [r7, #7]
 8013bee:	79fb      	ldrb	r3, [r7, #7]
 8013bf0:	2b03      	cmp	r3, #3
 8013bf2:	d9dd      	bls.n	8013bb0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013bf4:	4b03      	ldr	r3, [pc, #12]	; (8013c04 <tcp_new_port+0x84>)
 8013bf6:	881b      	ldrh	r3, [r3, #0]
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	370c      	adds	r7, #12
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr
 8013c04:	20000024 	.word	0x20000024
 8013c08:	08025260 	.word	0x08025260

08013c0c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013c0c:	b5b0      	push	{r4, r5, r7, lr}
 8013c0e:	b090      	sub	sp, #64	; 0x40
 8013c10:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013c12:	2300      	movs	r3, #0
 8013c14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013c18:	4b94      	ldr	r3, [pc, #592]	; (8013e6c <tcp_slowtmr+0x260>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	3301      	adds	r3, #1
 8013c1e:	4a93      	ldr	r2, [pc, #588]	; (8013e6c <tcp_slowtmr+0x260>)
 8013c20:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013c22:	4b93      	ldr	r3, [pc, #588]	; (8013e70 <tcp_slowtmr+0x264>)
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	3301      	adds	r3, #1
 8013c28:	b2da      	uxtb	r2, r3
 8013c2a:	4b91      	ldr	r3, [pc, #580]	; (8013e70 <tcp_slowtmr+0x264>)
 8013c2c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013c32:	4b90      	ldr	r3, [pc, #576]	; (8013e74 <tcp_slowtmr+0x268>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013c38:	e29f      	b.n	801417a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3c:	7d1b      	ldrb	r3, [r3, #20]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d106      	bne.n	8013c50 <tcp_slowtmr+0x44>
 8013c42:	4b8d      	ldr	r3, [pc, #564]	; (8013e78 <tcp_slowtmr+0x26c>)
 8013c44:	f240 42be 	movw	r2, #1214	; 0x4be
 8013c48:	498c      	ldr	r1, [pc, #560]	; (8013e7c <tcp_slowtmr+0x270>)
 8013c4a:	488d      	ldr	r0, [pc, #564]	; (8013e80 <tcp_slowtmr+0x274>)
 8013c4c:	f00b fe3a 	bl	801f8c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c52:	7d1b      	ldrb	r3, [r3, #20]
 8013c54:	2b01      	cmp	r3, #1
 8013c56:	d106      	bne.n	8013c66 <tcp_slowtmr+0x5a>
 8013c58:	4b87      	ldr	r3, [pc, #540]	; (8013e78 <tcp_slowtmr+0x26c>)
 8013c5a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013c5e:	4989      	ldr	r1, [pc, #548]	; (8013e84 <tcp_slowtmr+0x278>)
 8013c60:	4887      	ldr	r0, [pc, #540]	; (8013e80 <tcp_slowtmr+0x274>)
 8013c62:	f00b fe2f 	bl	801f8c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c68:	7d1b      	ldrb	r3, [r3, #20]
 8013c6a:	2b0a      	cmp	r3, #10
 8013c6c:	d106      	bne.n	8013c7c <tcp_slowtmr+0x70>
 8013c6e:	4b82      	ldr	r3, [pc, #520]	; (8013e78 <tcp_slowtmr+0x26c>)
 8013c70:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013c74:	4984      	ldr	r1, [pc, #528]	; (8013e88 <tcp_slowtmr+0x27c>)
 8013c76:	4882      	ldr	r0, [pc, #520]	; (8013e80 <tcp_slowtmr+0x274>)
 8013c78:	f00b fe24 	bl	801f8c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c7e:	7f9a      	ldrb	r2, [r3, #30]
 8013c80:	4b7b      	ldr	r3, [pc, #492]	; (8013e70 <tcp_slowtmr+0x264>)
 8013c82:	781b      	ldrb	r3, [r3, #0]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d105      	bne.n	8013c94 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013c92:	e272      	b.n	801417a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013c94:	4b76      	ldr	r3, [pc, #472]	; (8013e70 <tcp_slowtmr+0x264>)
 8013c96:	781a      	ldrb	r2, [r3, #0]
 8013c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c9a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013caa:	7d1b      	ldrb	r3, [r3, #20]
 8013cac:	2b02      	cmp	r3, #2
 8013cae:	d10a      	bne.n	8013cc6 <tcp_slowtmr+0xba>
 8013cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cb6:	2b05      	cmp	r3, #5
 8013cb8:	d905      	bls.n	8013cc6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013cc4:	e11e      	b.n	8013f04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ccc:	2b0b      	cmp	r3, #11
 8013cce:	d905      	bls.n	8013cdc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013cda:	e113      	b.n	8013f04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d075      	beq.n	8013dd2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d006      	beq.n	8013cfc <tcp_slowtmr+0xf0>
 8013cee:	4b62      	ldr	r3, [pc, #392]	; (8013e78 <tcp_slowtmr+0x26c>)
 8013cf0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013cf4:	4965      	ldr	r1, [pc, #404]	; (8013e8c <tcp_slowtmr+0x280>)
 8013cf6:	4862      	ldr	r0, [pc, #392]	; (8013e80 <tcp_slowtmr+0x274>)
 8013cf8:	f00b fde4 	bl	801f8c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d106      	bne.n	8013d12 <tcp_slowtmr+0x106>
 8013d04:	4b5c      	ldr	r3, [pc, #368]	; (8013e78 <tcp_slowtmr+0x26c>)
 8013d06:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013d0a:	4961      	ldr	r1, [pc, #388]	; (8013e90 <tcp_slowtmr+0x284>)
 8013d0c:	485c      	ldr	r0, [pc, #368]	; (8013e80 <tcp_slowtmr+0x274>)
 8013d0e:	f00b fdd9 	bl	801f8c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d14:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013d18:	2b0b      	cmp	r3, #11
 8013d1a:	d905      	bls.n	8013d28 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d20:	3301      	adds	r3, #1
 8013d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d26:	e0ed      	b.n	8013f04 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013d2e:	3b01      	subs	r3, #1
 8013d30:	4a58      	ldr	r2, [pc, #352]	; (8013e94 <tcp_slowtmr+0x288>)
 8013d32:	5cd3      	ldrb	r3, [r2, r3]
 8013d34:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013d3c:	7c7a      	ldrb	r2, [r7, #17]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d907      	bls.n	8013d52 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013d48:	3301      	adds	r3, #1
 8013d4a:	b2da      	uxtb	r2, r3
 8013d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d4e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013d58:	7c7a      	ldrb	r2, [r7, #17]
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	f200 80d2 	bhi.w	8013f04 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013d60:	2301      	movs	r3, #1
 8013d62:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d108      	bne.n	8013d80 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013d6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d70:	f005 f950 	bl	8019014 <tcp_zero_window_probe>
 8013d74:	4603      	mov	r3, r0
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d014      	beq.n	8013da4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	623b      	str	r3, [r7, #32]
 8013d7e:	e011      	b.n	8013da4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d86:	4619      	mov	r1, r3
 8013d88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d8a:	f004 f815 	bl	8017db8 <tcp_split_unsent_seg>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d107      	bne.n	8013da4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013d94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d96:	f004 fa95 	bl	80182c4 <tcp_output>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d101      	bne.n	8013da4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013da0:	2300      	movs	r3, #0
 8013da2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013da4:	6a3b      	ldr	r3, [r7, #32]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	f000 80ac 	beq.w	8013f04 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dae:	2200      	movs	r2, #0
 8013db0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013db6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013dba:	2b06      	cmp	r3, #6
 8013dbc:	f200 80a2 	bhi.w	8013f04 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	b2da      	uxtb	r2, r3
 8013dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dcc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013dd0:	e098      	b.n	8013f04 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	db0f      	blt.n	8013dfc <tcp_slowtmr+0x1f0>
 8013ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dde:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013de2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013de6:	4293      	cmp	r3, r2
 8013de8:	d008      	beq.n	8013dfc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8013dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	3301      	adds	r3, #1
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	b21a      	sxth	r2, r3
 8013df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dfa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dfe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e04:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	db7b      	blt.n	8013f04 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e0e:	f004 fd4d 	bl	80188ac <tcp_rexmit_rto_prepare>
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d007      	beq.n	8013e28 <tcp_slowtmr+0x21c>
 8013e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d171      	bne.n	8013f04 <tcp_slowtmr+0x2f8>
 8013e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d06d      	beq.n	8013f04 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2a:	7d1b      	ldrb	r3, [r3, #20]
 8013e2c:	2b02      	cmp	r3, #2
 8013e2e:	d03a      	beq.n	8013ea6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e36:	2b0c      	cmp	r3, #12
 8013e38:	bf28      	it	cs
 8013e3a:	230c      	movcs	r3, #12
 8013e3c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013e44:	10db      	asrs	r3, r3, #3
 8013e46:	b21b      	sxth	r3, r3
 8013e48:	461a      	mov	r2, r3
 8013e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013e50:	4413      	add	r3, r2
 8013e52:	7efa      	ldrb	r2, [r7, #27]
 8013e54:	4910      	ldr	r1, [pc, #64]	; (8013e98 <tcp_slowtmr+0x28c>)
 8013e56:	5c8a      	ldrb	r2, [r1, r2]
 8013e58:	4093      	lsls	r3, r2
 8013e5a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013e62:	4293      	cmp	r3, r2
 8013e64:	dc1a      	bgt.n	8013e9c <tcp_slowtmr+0x290>
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	b21a      	sxth	r2, r3
 8013e6a:	e019      	b.n	8013ea0 <tcp_slowtmr+0x294>
 8013e6c:	200101c8 	.word	0x200101c8
 8013e70:	200101de 	.word	0x200101de
 8013e74:	200101d4 	.word	0x200101d4
 8013e78:	08022db0 	.word	0x08022db0
 8013e7c:	080230f4 	.word	0x080230f4
 8013e80:	08022df4 	.word	0x08022df4
 8013e84:	08023120 	.word	0x08023120
 8013e88:	0802314c 	.word	0x0802314c
 8013e8c:	0802317c 	.word	0x0802317c
 8013e90:	080231b0 	.word	0x080231b0
 8013e94:	08025258 	.word	0x08025258
 8013e98:	08025248 	.word	0x08025248
 8013e9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	bf28      	it	cs
 8013ebc:	4613      	movcs	r3, r2
 8013ebe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013ec0:	8a7b      	ldrh	r3, [r7, #18]
 8013ec2:	085b      	lsrs	r3, r3, #1
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ece:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ed6:	005b      	lsls	r3, r3, #1
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d206      	bcs.n	8013eec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ee2:	005b      	lsls	r3, r3, #1
 8013ee4:	b29a      	uxth	r2, r3
 8013ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef8:	2200      	movs	r2, #0
 8013efa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8013efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013f00:	f004 fd44 	bl	801898c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f06:	7d1b      	ldrb	r3, [r3, #20]
 8013f08:	2b06      	cmp	r3, #6
 8013f0a:	d111      	bne.n	8013f30 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0e:	8b5b      	ldrh	r3, [r3, #26]
 8013f10:	f003 0310 	and.w	r3, r3, #16
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d00b      	beq.n	8013f30 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013f18:	4b9d      	ldr	r3, [pc, #628]	; (8014190 <tcp_slowtmr+0x584>)
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1e:	6a1b      	ldr	r3, [r3, #32]
 8013f20:	1ad3      	subs	r3, r2, r3
 8013f22:	2b28      	cmp	r3, #40	; 0x28
 8013f24:	d904      	bls.n	8013f30 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8013f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f32:	7a5b      	ldrb	r3, [r3, #9]
 8013f34:	f003 0308 	and.w	r3, r3, #8
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d04c      	beq.n	8013fd6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f3e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013f40:	2b04      	cmp	r3, #4
 8013f42:	d003      	beq.n	8013f4c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f46:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013f48:	2b07      	cmp	r3, #7
 8013f4a:	d144      	bne.n	8013fd6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013f4c:	4b90      	ldr	r3, [pc, #576]	; (8014190 <tcp_slowtmr+0x584>)
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f52:	6a1b      	ldr	r3, [r3, #32]
 8013f54:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013f5c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8013f60:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8013f64:	498b      	ldr	r1, [pc, #556]	; (8014194 <tcp_slowtmr+0x588>)
 8013f66:	fba1 1303 	umull	r1, r3, r1, r3
 8013f6a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d90a      	bls.n	8013f86 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f74:	3301      	adds	r3, #1
 8013f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8013f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f7e:	3301      	adds	r3, #1
 8013f80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013f84:	e027      	b.n	8013fd6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013f86:	4b82      	ldr	r3, [pc, #520]	; (8014190 <tcp_slowtmr+0x584>)
 8013f88:	681a      	ldr	r2, [r3, #0]
 8013f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f8c:	6a1b      	ldr	r3, [r3, #32]
 8013f8e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f92:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	4b7e      	ldr	r3, [pc, #504]	; (8014198 <tcp_slowtmr+0x58c>)
 8013fa0:	fb00 f303 	mul.w	r3, r0, r3
 8013fa4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013fa6:	497b      	ldr	r1, [pc, #492]	; (8014194 <tcp_slowtmr+0x588>)
 8013fa8:	fba1 1303 	umull	r1, r3, r1, r3
 8013fac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d911      	bls.n	8013fd6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fb4:	f004 ffee 	bl	8018f94 <tcp_keepalive>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8013fbe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d107      	bne.n	8013fd6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8013fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013fcc:	3301      	adds	r3, #1
 8013fce:	b2da      	uxtb	r2, r3
 8013fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8013fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d011      	beq.n	8014002 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013fde:	4b6c      	ldr	r3, [pc, #432]	; (8014190 <tcp_slowtmr+0x584>)
 8013fe0:	681a      	ldr	r2, [r3, #0]
 8013fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe4:	6a1b      	ldr	r3, [r3, #32]
 8013fe6:	1ad2      	subs	r2, r2, r3
 8013fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013fee:	4619      	mov	r1, r3
 8013ff0:	460b      	mov	r3, r1
 8013ff2:	005b      	lsls	r3, r3, #1
 8013ff4:	440b      	add	r3, r1
 8013ff6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d302      	bcc.n	8014002 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8013ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ffe:	f000 fea9 	bl	8014d54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8014002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014004:	7d1b      	ldrb	r3, [r3, #20]
 8014006:	2b03      	cmp	r3, #3
 8014008:	d10b      	bne.n	8014022 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801400a:	4b61      	ldr	r3, [pc, #388]	; (8014190 <tcp_slowtmr+0x584>)
 801400c:	681a      	ldr	r2, [r3, #0]
 801400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014010:	6a1b      	ldr	r3, [r3, #32]
 8014012:	1ad3      	subs	r3, r2, r3
 8014014:	2b28      	cmp	r3, #40	; 0x28
 8014016:	d904      	bls.n	8014022 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8014018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801401c:	3301      	adds	r3, #1
 801401e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8014022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014024:	7d1b      	ldrb	r3, [r3, #20]
 8014026:	2b09      	cmp	r3, #9
 8014028:	d10b      	bne.n	8014042 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801402a:	4b59      	ldr	r3, [pc, #356]	; (8014190 <tcp_slowtmr+0x584>)
 801402c:	681a      	ldr	r2, [r3, #0]
 801402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014030:	6a1b      	ldr	r3, [r3, #32]
 8014032:	1ad3      	subs	r3, r2, r3
 8014034:	2bf0      	cmp	r3, #240	; 0xf0
 8014036:	d904      	bls.n	8014042 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8014038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801403c:	3301      	adds	r3, #1
 801403e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014046:	2b00      	cmp	r3, #0
 8014048:	d060      	beq.n	801410c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014050:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8014052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014054:	f000 fcca 	bl	80149ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8014058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801405a:	2b00      	cmp	r3, #0
 801405c:	d010      	beq.n	8014080 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801405e:	4b4f      	ldr	r3, [pc, #316]	; (801419c <tcp_slowtmr+0x590>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014064:	429a      	cmp	r2, r3
 8014066:	d106      	bne.n	8014076 <tcp_slowtmr+0x46a>
 8014068:	4b4d      	ldr	r3, [pc, #308]	; (80141a0 <tcp_slowtmr+0x594>)
 801406a:	f240 526d 	movw	r2, #1389	; 0x56d
 801406e:	494d      	ldr	r1, [pc, #308]	; (80141a4 <tcp_slowtmr+0x598>)
 8014070:	484d      	ldr	r0, [pc, #308]	; (80141a8 <tcp_slowtmr+0x59c>)
 8014072:	f00b fc27 	bl	801f8c4 <iprintf>
        prev->next = pcb->next;
 8014076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014078:	68da      	ldr	r2, [r3, #12]
 801407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407c:	60da      	str	r2, [r3, #12]
 801407e:	e00f      	b.n	80140a0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014080:	4b46      	ldr	r3, [pc, #280]	; (801419c <tcp_slowtmr+0x590>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014086:	429a      	cmp	r2, r3
 8014088:	d006      	beq.n	8014098 <tcp_slowtmr+0x48c>
 801408a:	4b45      	ldr	r3, [pc, #276]	; (80141a0 <tcp_slowtmr+0x594>)
 801408c:	f240 5271 	movw	r2, #1393	; 0x571
 8014090:	4946      	ldr	r1, [pc, #280]	; (80141ac <tcp_slowtmr+0x5a0>)
 8014092:	4845      	ldr	r0, [pc, #276]	; (80141a8 <tcp_slowtmr+0x59c>)
 8014094:	f00b fc16 	bl	801f8c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801409a:	68db      	ldr	r3, [r3, #12]
 801409c:	4a3f      	ldr	r2, [pc, #252]	; (801419c <tcp_slowtmr+0x590>)
 801409e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80140a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d013      	beq.n	80140d0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80140a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80140ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80140b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80140b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b4:	3304      	adds	r3, #4
 80140b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140b8:	8ad2      	ldrh	r2, [r2, #22]
 80140ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80140bc:	8b09      	ldrh	r1, [r1, #24]
 80140be:	9102      	str	r1, [sp, #8]
 80140c0:	9201      	str	r2, [sp, #4]
 80140c2:	9300      	str	r3, [sp, #0]
 80140c4:	462b      	mov	r3, r5
 80140c6:	4622      	mov	r2, r4
 80140c8:	4601      	mov	r1, r0
 80140ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140cc:	f004 feae 	bl	8018e2c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80140d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d2:	691b      	ldr	r3, [r3, #16]
 80140d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80140d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d8:	7d1b      	ldrb	r3, [r3, #20]
 80140da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80140dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80140e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e2:	68db      	ldr	r3, [r3, #12]
 80140e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80140e6:	6838      	ldr	r0, [r7, #0]
 80140e8:	f7fe ffd4 	bl	8013094 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80140ec:	4b30      	ldr	r3, [pc, #192]	; (80141b0 <tcp_slowtmr+0x5a4>)
 80140ee:	2200      	movs	r2, #0
 80140f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d004      	beq.n	8014102 <tcp_slowtmr+0x4f6>
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	f06f 010c 	mvn.w	r1, #12
 80140fe:	68b8      	ldr	r0, [r7, #8]
 8014100:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014102:	4b2b      	ldr	r3, [pc, #172]	; (80141b0 <tcp_slowtmr+0x5a4>)
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d037      	beq.n	801417a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801410a:	e590      	b.n	8013c2e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801410e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014112:	68db      	ldr	r3, [r3, #12]
 8014114:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8014116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014118:	7f1b      	ldrb	r3, [r3, #28]
 801411a:	3301      	adds	r3, #1
 801411c:	b2da      	uxtb	r2, r3
 801411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014120:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014124:	7f1a      	ldrb	r2, [r3, #28]
 8014126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014128:	7f5b      	ldrb	r3, [r3, #29]
 801412a:	429a      	cmp	r2, r3
 801412c:	d325      	bcc.n	801417a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014130:	2200      	movs	r2, #0
 8014132:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8014134:	4b1e      	ldr	r3, [pc, #120]	; (80141b0 <tcp_slowtmr+0x5a4>)
 8014136:	2200      	movs	r2, #0
 8014138:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014140:	2b00      	cmp	r3, #0
 8014142:	d00b      	beq.n	801415c <tcp_slowtmr+0x550>
 8014144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801414a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801414c:	6912      	ldr	r2, [r2, #16]
 801414e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014150:	4610      	mov	r0, r2
 8014152:	4798      	blx	r3
 8014154:	4603      	mov	r3, r0
 8014156:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801415a:	e002      	b.n	8014162 <tcp_slowtmr+0x556>
 801415c:	2300      	movs	r3, #0
 801415e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8014162:	4b13      	ldr	r3, [pc, #76]	; (80141b0 <tcp_slowtmr+0x5a4>)
 8014164:	781b      	ldrb	r3, [r3, #0]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d000      	beq.n	801416c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801416a:	e560      	b.n	8013c2e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801416c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014170:	2b00      	cmp	r3, #0
 8014172:	d102      	bne.n	801417a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8014174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014176:	f004 f8a5 	bl	80182c4 <tcp_output>
  while (pcb != NULL) {
 801417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801417c:	2b00      	cmp	r3, #0
 801417e:	f47f ad5c 	bne.w	8013c3a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014182:	2300      	movs	r3, #0
 8014184:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8014186:	4b0b      	ldr	r3, [pc, #44]	; (80141b4 <tcp_slowtmr+0x5a8>)
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801418c:	e067      	b.n	801425e <tcp_slowtmr+0x652>
 801418e:	bf00      	nop
 8014190:	200101c8 	.word	0x200101c8
 8014194:	10624dd3 	.word	0x10624dd3
 8014198:	000124f8 	.word	0x000124f8
 801419c:	200101d4 	.word	0x200101d4
 80141a0:	08022db0 	.word	0x08022db0
 80141a4:	080231e8 	.word	0x080231e8
 80141a8:	08022df4 	.word	0x08022df4
 80141ac:	08023214 	.word	0x08023214
 80141b0:	200101dc 	.word	0x200101dc
 80141b4:	200101d8 	.word	0x200101d8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80141b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ba:	7d1b      	ldrb	r3, [r3, #20]
 80141bc:	2b0a      	cmp	r3, #10
 80141be:	d006      	beq.n	80141ce <tcp_slowtmr+0x5c2>
 80141c0:	4b2b      	ldr	r3, [pc, #172]	; (8014270 <tcp_slowtmr+0x664>)
 80141c2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80141c6:	492b      	ldr	r1, [pc, #172]	; (8014274 <tcp_slowtmr+0x668>)
 80141c8:	482b      	ldr	r0, [pc, #172]	; (8014278 <tcp_slowtmr+0x66c>)
 80141ca:	f00b fb7b 	bl	801f8c4 <iprintf>
    pcb_remove = 0;
 80141ce:	2300      	movs	r3, #0
 80141d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80141d4:	4b29      	ldr	r3, [pc, #164]	; (801427c <tcp_slowtmr+0x670>)
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141da:	6a1b      	ldr	r3, [r3, #32]
 80141dc:	1ad3      	subs	r3, r2, r3
 80141de:	2bf0      	cmp	r3, #240	; 0xf0
 80141e0:	d904      	bls.n	80141ec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80141e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141e6:	3301      	adds	r3, #1
 80141e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80141ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d02f      	beq.n	8014254 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80141f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141f6:	f000 fbf9 	bl	80149ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80141fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d010      	beq.n	8014222 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014200:	4b1f      	ldr	r3, [pc, #124]	; (8014280 <tcp_slowtmr+0x674>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014206:	429a      	cmp	r2, r3
 8014208:	d106      	bne.n	8014218 <tcp_slowtmr+0x60c>
 801420a:	4b19      	ldr	r3, [pc, #100]	; (8014270 <tcp_slowtmr+0x664>)
 801420c:	f240 52af 	movw	r2, #1455	; 0x5af
 8014210:	491c      	ldr	r1, [pc, #112]	; (8014284 <tcp_slowtmr+0x678>)
 8014212:	4819      	ldr	r0, [pc, #100]	; (8014278 <tcp_slowtmr+0x66c>)
 8014214:	f00b fb56 	bl	801f8c4 <iprintf>
        prev->next = pcb->next;
 8014218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421a:	68da      	ldr	r2, [r3, #12]
 801421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421e:	60da      	str	r2, [r3, #12]
 8014220:	e00f      	b.n	8014242 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014222:	4b17      	ldr	r3, [pc, #92]	; (8014280 <tcp_slowtmr+0x674>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014228:	429a      	cmp	r2, r3
 801422a:	d006      	beq.n	801423a <tcp_slowtmr+0x62e>
 801422c:	4b10      	ldr	r3, [pc, #64]	; (8014270 <tcp_slowtmr+0x664>)
 801422e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8014232:	4915      	ldr	r1, [pc, #84]	; (8014288 <tcp_slowtmr+0x67c>)
 8014234:	4810      	ldr	r0, [pc, #64]	; (8014278 <tcp_slowtmr+0x66c>)
 8014236:	f00b fb45 	bl	801f8c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801423c:	68db      	ldr	r3, [r3, #12]
 801423e:	4a10      	ldr	r2, [pc, #64]	; (8014280 <tcp_slowtmr+0x674>)
 8014240:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014244:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801424c:	69f8      	ldr	r0, [r7, #28]
 801424e:	f7fe ff21 	bl	8013094 <tcp_free>
 8014252:	e004      	b.n	801425e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014256:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014260:	2b00      	cmp	r3, #0
 8014262:	d1a9      	bne.n	80141b8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8014264:	bf00      	nop
 8014266:	bf00      	nop
 8014268:	3730      	adds	r7, #48	; 0x30
 801426a:	46bd      	mov	sp, r7
 801426c:	bdb0      	pop	{r4, r5, r7, pc}
 801426e:	bf00      	nop
 8014270:	08022db0 	.word	0x08022db0
 8014274:	08023240 	.word	0x08023240
 8014278:	08022df4 	.word	0x08022df4
 801427c:	200101c8 	.word	0x200101c8
 8014280:	200101d8 	.word	0x200101d8
 8014284:	08023270 	.word	0x08023270
 8014288:	08023298 	.word	0x08023298

0801428c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b082      	sub	sp, #8
 8014290:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014292:	4b2d      	ldr	r3, [pc, #180]	; (8014348 <tcp_fasttmr+0xbc>)
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	3301      	adds	r3, #1
 8014298:	b2da      	uxtb	r2, r3
 801429a:	4b2b      	ldr	r3, [pc, #172]	; (8014348 <tcp_fasttmr+0xbc>)
 801429c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801429e:	4b2b      	ldr	r3, [pc, #172]	; (801434c <tcp_fasttmr+0xc0>)
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80142a4:	e048      	b.n	8014338 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	7f9a      	ldrb	r2, [r3, #30]
 80142aa:	4b27      	ldr	r3, [pc, #156]	; (8014348 <tcp_fasttmr+0xbc>)
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d03f      	beq.n	8014332 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80142b2:	4b25      	ldr	r3, [pc, #148]	; (8014348 <tcp_fasttmr+0xbc>)
 80142b4:	781a      	ldrb	r2, [r3, #0]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	8b5b      	ldrh	r3, [r3, #26]
 80142be:	f003 0301 	and.w	r3, r3, #1
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d010      	beq.n	80142e8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	8b5b      	ldrh	r3, [r3, #26]
 80142ca:	f043 0302 	orr.w	r3, r3, #2
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f003 fff5 	bl	80182c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	8b5b      	ldrh	r3, [r3, #26]
 80142de:	f023 0303 	bic.w	r3, r3, #3
 80142e2:	b29a      	uxth	r2, r3
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	8b5b      	ldrh	r3, [r3, #26]
 80142ec:	f003 0308 	and.w	r3, r3, #8
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d009      	beq.n	8014308 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	8b5b      	ldrh	r3, [r3, #26]
 80142f8:	f023 0308 	bic.w	r3, r3, #8
 80142fc:	b29a      	uxth	r2, r3
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ff f85a 	bl	80133bc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	68db      	ldr	r3, [r3, #12]
 801430c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014312:	2b00      	cmp	r3, #0
 8014314:	d00a      	beq.n	801432c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014316:	4b0e      	ldr	r3, [pc, #56]	; (8014350 <tcp_fasttmr+0xc4>)
 8014318:	2200      	movs	r2, #0
 801431a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f000 f819 	bl	8014354 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014322:	4b0b      	ldr	r3, [pc, #44]	; (8014350 <tcp_fasttmr+0xc4>)
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d000      	beq.n	801432c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801432a:	e7b8      	b.n	801429e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	607b      	str	r3, [r7, #4]
 8014330:	e002      	b.n	8014338 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d1b3      	bne.n	80142a6 <tcp_fasttmr+0x1a>
    }
  }
}
 801433e:	bf00      	nop
 8014340:	bf00      	nop
 8014342:	3708      	adds	r7, #8
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}
 8014348:	200101de 	.word	0x200101de
 801434c:	200101d4 	.word	0x200101d4
 8014350:	200101dc 	.word	0x200101dc

08014354 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014354:	b590      	push	{r4, r7, lr}
 8014356:	b085      	sub	sp, #20
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d109      	bne.n	8014376 <tcp_process_refused_data+0x22>
 8014362:	4b37      	ldr	r3, [pc, #220]	; (8014440 <tcp_process_refused_data+0xec>)
 8014364:	f240 6209 	movw	r2, #1545	; 0x609
 8014368:	4936      	ldr	r1, [pc, #216]	; (8014444 <tcp_process_refused_data+0xf0>)
 801436a:	4837      	ldr	r0, [pc, #220]	; (8014448 <tcp_process_refused_data+0xf4>)
 801436c:	f00b faaa 	bl	801f8c4 <iprintf>
 8014370:	f06f 030f 	mvn.w	r3, #15
 8014374:	e060      	b.n	8014438 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801437a:	7b5b      	ldrb	r3, [r3, #13]
 801437c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014382:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2200      	movs	r2, #0
 8014388:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014390:	2b00      	cmp	r3, #0
 8014392:	d00b      	beq.n	80143ac <tcp_process_refused_data+0x58>
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6918      	ldr	r0, [r3, #16]
 801439e:	2300      	movs	r3, #0
 80143a0:	68ba      	ldr	r2, [r7, #8]
 80143a2:	6879      	ldr	r1, [r7, #4]
 80143a4:	47a0      	blx	r4
 80143a6:	4603      	mov	r3, r0
 80143a8:	73fb      	strb	r3, [r7, #15]
 80143aa:	e007      	b.n	80143bc <tcp_process_refused_data+0x68>
 80143ac:	2300      	movs	r3, #0
 80143ae:	68ba      	ldr	r2, [r7, #8]
 80143b0:	6879      	ldr	r1, [r7, #4]
 80143b2:	2000      	movs	r0, #0
 80143b4:	f000 f8a4 	bl	8014500 <tcp_recv_null>
 80143b8:	4603      	mov	r3, r0
 80143ba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80143bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d12a      	bne.n	801441a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80143c4:	7bbb      	ldrb	r3, [r7, #14]
 80143c6:	f003 0320 	and.w	r3, r3, #32
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d033      	beq.n	8014436 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80143d6:	d005      	beq.n	80143e4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143dc:	3301      	adds	r3, #1
 80143de:	b29a      	uxth	r2, r3
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d00b      	beq.n	8014406 <tcp_process_refused_data+0xb2>
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	6918      	ldr	r0, [r3, #16]
 80143f8:	2300      	movs	r3, #0
 80143fa:	2200      	movs	r2, #0
 80143fc:	6879      	ldr	r1, [r7, #4]
 80143fe:	47a0      	blx	r4
 8014400:	4603      	mov	r3, r0
 8014402:	73fb      	strb	r3, [r7, #15]
 8014404:	e001      	b.n	801440a <tcp_process_refused_data+0xb6>
 8014406:	2300      	movs	r3, #0
 8014408:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801440a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801440e:	f113 0f0d 	cmn.w	r3, #13
 8014412:	d110      	bne.n	8014436 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014414:	f06f 030c 	mvn.w	r3, #12
 8014418:	e00e      	b.n	8014438 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801441a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801441e:	f113 0f0d 	cmn.w	r3, #13
 8014422:	d102      	bne.n	801442a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014424:	f06f 030c 	mvn.w	r3, #12
 8014428:	e006      	b.n	8014438 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	68ba      	ldr	r2, [r7, #8]
 801442e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014430:	f06f 0304 	mvn.w	r3, #4
 8014434:	e000      	b.n	8014438 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014436:	2300      	movs	r3, #0
}
 8014438:	4618      	mov	r0, r3
 801443a:	3714      	adds	r7, #20
 801443c:	46bd      	mov	sp, r7
 801443e:	bd90      	pop	{r4, r7, pc}
 8014440:	08022db0 	.word	0x08022db0
 8014444:	080232c0 	.word	0x080232c0
 8014448:	08022df4 	.word	0x08022df4

0801444c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b084      	sub	sp, #16
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014454:	e007      	b.n	8014466 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f000 f80a 	bl	8014476 <tcp_seg_free>
    seg = next;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d1f4      	bne.n	8014456 <tcp_segs_free+0xa>
  }
}
 801446c:	bf00      	nop
 801446e:	bf00      	nop
 8014470:	3710      	adds	r7, #16
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}

08014476 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014476:	b580      	push	{r7, lr}
 8014478:	b082      	sub	sp, #8
 801447a:	af00      	add	r7, sp, #0
 801447c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d00c      	beq.n	801449e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	685b      	ldr	r3, [r3, #4]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d004      	beq.n	8014496 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	4618      	mov	r0, r3
 8014492:	f7fe fb43 	bl	8012b1c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014496:	6879      	ldr	r1, [r7, #4]
 8014498:	2003      	movs	r0, #3
 801449a:	f7fd fc57 	bl	8011d4c <memp_free>
  }
}
 801449e:	bf00      	nop
 80144a0:	3708      	adds	r7, #8
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
	...

080144a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d106      	bne.n	80144c4 <tcp_seg_copy+0x1c>
 80144b6:	4b0f      	ldr	r3, [pc, #60]	; (80144f4 <tcp_seg_copy+0x4c>)
 80144b8:	f240 6282 	movw	r2, #1666	; 0x682
 80144bc:	490e      	ldr	r1, [pc, #56]	; (80144f8 <tcp_seg_copy+0x50>)
 80144be:	480f      	ldr	r0, [pc, #60]	; (80144fc <tcp_seg_copy+0x54>)
 80144c0:	f00b fa00 	bl	801f8c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80144c4:	2003      	movs	r0, #3
 80144c6:	f7fd fbcb 	bl	8011c60 <memp_malloc>
 80144ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d101      	bne.n	80144d6 <tcp_seg_copy+0x2e>
    return NULL;
 80144d2:	2300      	movs	r3, #0
 80144d4:	e00a      	b.n	80144ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80144d6:	2210      	movs	r2, #16
 80144d8:	6879      	ldr	r1, [r7, #4]
 80144da:	68f8      	ldr	r0, [r7, #12]
 80144dc:	f00b fc57 	bl	801fd8e <memcpy>
  pbuf_ref(cseg->p);
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	685b      	ldr	r3, [r3, #4]
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7fe fbbf 	bl	8012c68 <pbuf_ref>
  return cseg;
 80144ea:	68fb      	ldr	r3, [r7, #12]
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	3710      	adds	r7, #16
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}
 80144f4:	08022db0 	.word	0x08022db0
 80144f8:	08023304 	.word	0x08023304
 80144fc:	08022df4 	.word	0x08022df4

08014500 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b084      	sub	sp, #16
 8014504:	af00      	add	r7, sp, #0
 8014506:	60f8      	str	r0, [r7, #12]
 8014508:	60b9      	str	r1, [r7, #8]
 801450a:	607a      	str	r2, [r7, #4]
 801450c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d109      	bne.n	8014528 <tcp_recv_null+0x28>
 8014514:	4b12      	ldr	r3, [pc, #72]	; (8014560 <tcp_recv_null+0x60>)
 8014516:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801451a:	4912      	ldr	r1, [pc, #72]	; (8014564 <tcp_recv_null+0x64>)
 801451c:	4812      	ldr	r0, [pc, #72]	; (8014568 <tcp_recv_null+0x68>)
 801451e:	f00b f9d1 	bl	801f8c4 <iprintf>
 8014522:	f06f 030f 	mvn.w	r3, #15
 8014526:	e016      	b.n	8014556 <tcp_recv_null+0x56>

  if (p != NULL) {
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d009      	beq.n	8014542 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	891b      	ldrh	r3, [r3, #8]
 8014532:	4619      	mov	r1, r3
 8014534:	68b8      	ldr	r0, [r7, #8]
 8014536:	f7ff fad3 	bl	8013ae0 <tcp_recved>
    pbuf_free(p);
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f7fe faee 	bl	8012b1c <pbuf_free>
 8014540:	e008      	b.n	8014554 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d104      	bne.n	8014554 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801454a:	68b8      	ldr	r0, [r7, #8]
 801454c:	f7fe ffa0 	bl	8013490 <tcp_close>
 8014550:	4603      	mov	r3, r0
 8014552:	e000      	b.n	8014556 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014554:	2300      	movs	r3, #0
}
 8014556:	4618      	mov	r0, r3
 8014558:	3710      	adds	r7, #16
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	08022db0 	.word	0x08022db0
 8014564:	08023320 	.word	0x08023320
 8014568:	08022df4 	.word	0x08022df4

0801456c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b086      	sub	sp, #24
 8014570:	af00      	add	r7, sp, #0
 8014572:	4603      	mov	r3, r0
 8014574:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801457a:	2b00      	cmp	r3, #0
 801457c:	db01      	blt.n	8014582 <tcp_kill_prio+0x16>
 801457e:	79fb      	ldrb	r3, [r7, #7]
 8014580:	e000      	b.n	8014584 <tcp_kill_prio+0x18>
 8014582:	237f      	movs	r3, #127	; 0x7f
 8014584:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014586:	7afb      	ldrb	r3, [r7, #11]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d034      	beq.n	80145f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801458c:	7afb      	ldrb	r3, [r7, #11]
 801458e:	3b01      	subs	r3, #1
 8014590:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014592:	2300      	movs	r3, #0
 8014594:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014596:	2300      	movs	r3, #0
 8014598:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801459a:	4b19      	ldr	r3, [pc, #100]	; (8014600 <tcp_kill_prio+0x94>)
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	617b      	str	r3, [r7, #20]
 80145a0:	e01f      	b.n	80145e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	7d5b      	ldrb	r3, [r3, #21]
 80145a6:	7afa      	ldrb	r2, [r7, #11]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d80c      	bhi.n	80145c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80145ac:	697b      	ldr	r3, [r7, #20]
 80145ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80145b0:	7afa      	ldrb	r2, [r7, #11]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d112      	bne.n	80145dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80145b6:	4b13      	ldr	r3, [pc, #76]	; (8014604 <tcp_kill_prio+0x98>)
 80145b8:	681a      	ldr	r2, [r3, #0]
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	6a1b      	ldr	r3, [r3, #32]
 80145be:	1ad3      	subs	r3, r2, r3
 80145c0:	68fa      	ldr	r2, [r7, #12]
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d80a      	bhi.n	80145dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80145c6:	4b0f      	ldr	r3, [pc, #60]	; (8014604 <tcp_kill_prio+0x98>)
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	6a1b      	ldr	r3, [r3, #32]
 80145ce:	1ad3      	subs	r3, r2, r3
 80145d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	7d5b      	ldrb	r3, [r3, #21]
 80145da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	617b      	str	r3, [r7, #20]
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d1dc      	bne.n	80145a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d004      	beq.n	80145f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80145ee:	6938      	ldr	r0, [r7, #16]
 80145f0:	f7ff f894 	bl	801371c <tcp_abort>
 80145f4:	e000      	b.n	80145f8 <tcp_kill_prio+0x8c>
    return;
 80145f6:	bf00      	nop
  }
}
 80145f8:	3718      	adds	r7, #24
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	200101d4 	.word	0x200101d4
 8014604:	200101c8 	.word	0x200101c8

08014608 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b086      	sub	sp, #24
 801460c:	af00      	add	r7, sp, #0
 801460e:	4603      	mov	r3, r0
 8014610:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014612:	79fb      	ldrb	r3, [r7, #7]
 8014614:	2b08      	cmp	r3, #8
 8014616:	d009      	beq.n	801462c <tcp_kill_state+0x24>
 8014618:	79fb      	ldrb	r3, [r7, #7]
 801461a:	2b09      	cmp	r3, #9
 801461c:	d006      	beq.n	801462c <tcp_kill_state+0x24>
 801461e:	4b1a      	ldr	r3, [pc, #104]	; (8014688 <tcp_kill_state+0x80>)
 8014620:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014624:	4919      	ldr	r1, [pc, #100]	; (801468c <tcp_kill_state+0x84>)
 8014626:	481a      	ldr	r0, [pc, #104]	; (8014690 <tcp_kill_state+0x88>)
 8014628:	f00b f94c 	bl	801f8c4 <iprintf>

  inactivity = 0;
 801462c:	2300      	movs	r3, #0
 801462e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014630:	2300      	movs	r3, #0
 8014632:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014634:	4b17      	ldr	r3, [pc, #92]	; (8014694 <tcp_kill_state+0x8c>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	617b      	str	r3, [r7, #20]
 801463a:	e017      	b.n	801466c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801463c:	697b      	ldr	r3, [r7, #20]
 801463e:	7d1b      	ldrb	r3, [r3, #20]
 8014640:	79fa      	ldrb	r2, [r7, #7]
 8014642:	429a      	cmp	r2, r3
 8014644:	d10f      	bne.n	8014666 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014646:	4b14      	ldr	r3, [pc, #80]	; (8014698 <tcp_kill_state+0x90>)
 8014648:	681a      	ldr	r2, [r3, #0]
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	6a1b      	ldr	r3, [r3, #32]
 801464e:	1ad3      	subs	r3, r2, r3
 8014650:	68fa      	ldr	r2, [r7, #12]
 8014652:	429a      	cmp	r2, r3
 8014654:	d807      	bhi.n	8014666 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014656:	4b10      	ldr	r3, [pc, #64]	; (8014698 <tcp_kill_state+0x90>)
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	697b      	ldr	r3, [r7, #20]
 801465c:	6a1b      	ldr	r3, [r3, #32]
 801465e:	1ad3      	subs	r3, r2, r3
 8014660:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014666:	697b      	ldr	r3, [r7, #20]
 8014668:	68db      	ldr	r3, [r3, #12]
 801466a:	617b      	str	r3, [r7, #20]
 801466c:	697b      	ldr	r3, [r7, #20]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d1e4      	bne.n	801463c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d003      	beq.n	8014680 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014678:	2100      	movs	r1, #0
 801467a:	6938      	ldr	r0, [r7, #16]
 801467c:	f7fe ff90 	bl	80135a0 <tcp_abandon>
  }
}
 8014680:	bf00      	nop
 8014682:	3718      	adds	r7, #24
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}
 8014688:	08022db0 	.word	0x08022db0
 801468c:	0802333c 	.word	0x0802333c
 8014690:	08022df4 	.word	0x08022df4
 8014694:	200101d4 	.word	0x200101d4
 8014698:	200101c8 	.word	0x200101c8

0801469c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b084      	sub	sp, #16
 80146a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80146a2:	2300      	movs	r3, #0
 80146a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80146a6:	2300      	movs	r3, #0
 80146a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80146aa:	4b12      	ldr	r3, [pc, #72]	; (80146f4 <tcp_kill_timewait+0x58>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	60fb      	str	r3, [r7, #12]
 80146b0:	e012      	b.n	80146d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80146b2:	4b11      	ldr	r3, [pc, #68]	; (80146f8 <tcp_kill_timewait+0x5c>)
 80146b4:	681a      	ldr	r2, [r3, #0]
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	6a1b      	ldr	r3, [r3, #32]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d807      	bhi.n	80146d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80146c2:	4b0d      	ldr	r3, [pc, #52]	; (80146f8 <tcp_kill_timewait+0x5c>)
 80146c4:	681a      	ldr	r2, [r3, #0]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	6a1b      	ldr	r3, [r3, #32]
 80146ca:	1ad3      	subs	r3, r2, r3
 80146cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	60fb      	str	r3, [r7, #12]
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d1e9      	bne.n	80146b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d002      	beq.n	80146ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80146e4:	68b8      	ldr	r0, [r7, #8]
 80146e6:	f7ff f819 	bl	801371c <tcp_abort>
  }
}
 80146ea:	bf00      	nop
 80146ec:	3710      	adds	r7, #16
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}
 80146f2:	bf00      	nop
 80146f4:	200101d8 	.word	0x200101d8
 80146f8:	200101c8 	.word	0x200101c8

080146fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b082      	sub	sp, #8
 8014700:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014702:	4b10      	ldr	r3, [pc, #64]	; (8014744 <tcp_handle_closepend+0x48>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014708:	e014      	b.n	8014734 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	8b5b      	ldrh	r3, [r3, #26]
 8014714:	f003 0308 	and.w	r3, r3, #8
 8014718:	2b00      	cmp	r3, #0
 801471a:	d009      	beq.n	8014730 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8b5b      	ldrh	r3, [r3, #26]
 8014720:	f023 0308 	bic.w	r3, r3, #8
 8014724:	b29a      	uxth	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f7fe fe46 	bl	80133bc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d1e7      	bne.n	801470a <tcp_handle_closepend+0xe>
  }
}
 801473a:	bf00      	nop
 801473c:	bf00      	nop
 801473e:	3708      	adds	r7, #8
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	200101d4 	.word	0x200101d4

08014748 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b084      	sub	sp, #16
 801474c:	af00      	add	r7, sp, #0
 801474e:	4603      	mov	r3, r0
 8014750:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014752:	2001      	movs	r0, #1
 8014754:	f7fd fa84 	bl	8011c60 <memp_malloc>
 8014758:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d126      	bne.n	80147ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014760:	f7ff ffcc 	bl	80146fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014764:	f7ff ff9a 	bl	801469c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014768:	2001      	movs	r0, #1
 801476a:	f7fd fa79 	bl	8011c60 <memp_malloc>
 801476e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d11b      	bne.n	80147ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014776:	2009      	movs	r0, #9
 8014778:	f7ff ff46 	bl	8014608 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801477c:	2001      	movs	r0, #1
 801477e:	f7fd fa6f 	bl	8011c60 <memp_malloc>
 8014782:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d111      	bne.n	80147ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801478a:	2008      	movs	r0, #8
 801478c:	f7ff ff3c 	bl	8014608 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014790:	2001      	movs	r0, #1
 8014792:	f7fd fa65 	bl	8011c60 <memp_malloc>
 8014796:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d107      	bne.n	80147ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801479e:	79fb      	ldrb	r3, [r7, #7]
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7ff fee3 	bl	801456c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80147a6:	2001      	movs	r0, #1
 80147a8:	f7fd fa5a 	bl	8011c60 <memp_malloc>
 80147ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d03f      	beq.n	8014834 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80147b4:	229c      	movs	r2, #156	; 0x9c
 80147b6:	2100      	movs	r1, #0
 80147b8:	68f8      	ldr	r0, [r7, #12]
 80147ba:	f00b f9d9 	bl	801fb70 <memset>
    pcb->prio = prio;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	79fa      	ldrb	r2, [r7, #7]
 80147c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80147ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80147d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	22ff      	movs	r2, #255	; 0xff
 80147e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80147ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	2206      	movs	r2, #6
 80147f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2206      	movs	r2, #6
 80147f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014800:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	2201      	movs	r2, #1
 8014806:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801480a:	4b0d      	ldr	r3, [pc, #52]	; (8014840 <tcp_alloc+0xf8>)
 801480c:	681a      	ldr	r2, [r3, #0]
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014812:	4b0c      	ldr	r3, [pc, #48]	; (8014844 <tcp_alloc+0xfc>)
 8014814:	781a      	ldrb	r2, [r3, #0]
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014820:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	4a08      	ldr	r2, [pc, #32]	; (8014848 <tcp_alloc+0x100>)
 8014828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	4a07      	ldr	r2, [pc, #28]	; (801484c <tcp_alloc+0x104>)
 8014830:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014834:	68fb      	ldr	r3, [r7, #12]
}
 8014836:	4618      	mov	r0, r3
 8014838:	3710      	adds	r7, #16
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	200101c8 	.word	0x200101c8
 8014844:	200101de 	.word	0x200101de
 8014848:	08014501 	.word	0x08014501
 801484c:	006ddd00 	.word	0x006ddd00

08014850 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b084      	sub	sp, #16
 8014854:	af00      	add	r7, sp, #0
 8014856:	4603      	mov	r3, r0
 8014858:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801485a:	2040      	movs	r0, #64	; 0x40
 801485c:	f7ff ff74 	bl	8014748 <tcp_alloc>
 8014860:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014862:	68fb      	ldr	r3, [r7, #12]
}
 8014864:	4618      	mov	r0, r3
 8014866:	3710      	adds	r7, #16
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801486c:	b480      	push	{r7}
 801486e:	b083      	sub	sp, #12
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d002      	beq.n	8014882 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	683a      	ldr	r2, [r7, #0]
 8014880:	611a      	str	r2, [r3, #16]
  }
}
 8014882:	bf00      	nop
 8014884:	370c      	adds	r7, #12
 8014886:	46bd      	mov	sp, r7
 8014888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488c:	4770      	bx	lr
	...

08014890 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	b082      	sub	sp, #8
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d00e      	beq.n	80148be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	7d1b      	ldrb	r3, [r3, #20]
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d106      	bne.n	80148b6 <tcp_recv+0x26>
 80148a8:	4b07      	ldr	r3, [pc, #28]	; (80148c8 <tcp_recv+0x38>)
 80148aa:	f240 72df 	movw	r2, #2015	; 0x7df
 80148ae:	4907      	ldr	r1, [pc, #28]	; (80148cc <tcp_recv+0x3c>)
 80148b0:	4807      	ldr	r0, [pc, #28]	; (80148d0 <tcp_recv+0x40>)
 80148b2:	f00b f807 	bl	801f8c4 <iprintf>
    pcb->recv = recv;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	683a      	ldr	r2, [r7, #0]
 80148ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80148be:	bf00      	nop
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	08022db0 	.word	0x08022db0
 80148cc:	0802334c 	.word	0x0802334c
 80148d0:	08022df4 	.word	0x08022df4

080148d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d00e      	beq.n	8014902 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	7d1b      	ldrb	r3, [r3, #20]
 80148e8:	2b01      	cmp	r3, #1
 80148ea:	d106      	bne.n	80148fa <tcp_sent+0x26>
 80148ec:	4b07      	ldr	r3, [pc, #28]	; (801490c <tcp_sent+0x38>)
 80148ee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80148f2:	4907      	ldr	r1, [pc, #28]	; (8014910 <tcp_sent+0x3c>)
 80148f4:	4807      	ldr	r0, [pc, #28]	; (8014914 <tcp_sent+0x40>)
 80148f6:	f00a ffe5 	bl	801f8c4 <iprintf>
    pcb->sent = sent;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	683a      	ldr	r2, [r7, #0]
 80148fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014902:	bf00      	nop
 8014904:	3708      	adds	r7, #8
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}
 801490a:	bf00      	nop
 801490c:	08022db0 	.word	0x08022db0
 8014910:	08023374 	.word	0x08023374
 8014914:	08022df4 	.word	0x08022df4

08014918 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d00e      	beq.n	8014946 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	7d1b      	ldrb	r3, [r3, #20]
 801492c:	2b01      	cmp	r3, #1
 801492e:	d106      	bne.n	801493e <tcp_err+0x26>
 8014930:	4b07      	ldr	r3, [pc, #28]	; (8014950 <tcp_err+0x38>)
 8014932:	f640 020d 	movw	r2, #2061	; 0x80d
 8014936:	4907      	ldr	r1, [pc, #28]	; (8014954 <tcp_err+0x3c>)
 8014938:	4807      	ldr	r0, [pc, #28]	; (8014958 <tcp_err+0x40>)
 801493a:	f00a ffc3 	bl	801f8c4 <iprintf>
    pcb->errf = err;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	683a      	ldr	r2, [r7, #0]
 8014942:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014946:	bf00      	nop
 8014948:	3708      	adds	r7, #8
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	bf00      	nop
 8014950:	08022db0 	.word	0x08022db0
 8014954:	0802339c 	.word	0x0802339c
 8014958:	08022df4 	.word	0x08022df4

0801495c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801495c:	b480      	push	{r7}
 801495e:	b085      	sub	sp, #20
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
 8014964:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d008      	beq.n	801497e <tcp_accept+0x22>
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	7d1b      	ldrb	r3, [r3, #20]
 8014970:	2b01      	cmp	r3, #1
 8014972:	d104      	bne.n	801497e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	683a      	ldr	r2, [r7, #0]
 801497c:	619a      	str	r2, [r3, #24]
  }
}
 801497e:	bf00      	nop
 8014980:	3714      	adds	r7, #20
 8014982:	46bd      	mov	sp, r7
 8014984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014988:	4770      	bx	lr
	...

0801498c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	4613      	mov	r3, r2
 8014998:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d107      	bne.n	80149b0 <tcp_poll+0x24>
 80149a0:	4b0e      	ldr	r3, [pc, #56]	; (80149dc <tcp_poll+0x50>)
 80149a2:	f640 023d 	movw	r2, #2109	; 0x83d
 80149a6:	490e      	ldr	r1, [pc, #56]	; (80149e0 <tcp_poll+0x54>)
 80149a8:	480e      	ldr	r0, [pc, #56]	; (80149e4 <tcp_poll+0x58>)
 80149aa:	f00a ff8b 	bl	801f8c4 <iprintf>
 80149ae:	e011      	b.n	80149d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	7d1b      	ldrb	r3, [r3, #20]
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d106      	bne.n	80149c6 <tcp_poll+0x3a>
 80149b8:	4b08      	ldr	r3, [pc, #32]	; (80149dc <tcp_poll+0x50>)
 80149ba:	f640 023e 	movw	r2, #2110	; 0x83e
 80149be:	490a      	ldr	r1, [pc, #40]	; (80149e8 <tcp_poll+0x5c>)
 80149c0:	4808      	ldr	r0, [pc, #32]	; (80149e4 <tcp_poll+0x58>)
 80149c2:	f00a ff7f 	bl	801f8c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	68ba      	ldr	r2, [r7, #8]
 80149ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	79fa      	ldrb	r2, [r7, #7]
 80149d2:	775a      	strb	r2, [r3, #29]
}
 80149d4:	3710      	adds	r7, #16
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
 80149da:	bf00      	nop
 80149dc:	08022db0 	.word	0x08022db0
 80149e0:	080233c4 	.word	0x080233c4
 80149e4:	08022df4 	.word	0x08022df4
 80149e8:	080233dc 	.word	0x080233dc

080149ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b082      	sub	sp, #8
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d107      	bne.n	8014a0a <tcp_pcb_purge+0x1e>
 80149fa:	4b21      	ldr	r3, [pc, #132]	; (8014a80 <tcp_pcb_purge+0x94>)
 80149fc:	f640 0251 	movw	r2, #2129	; 0x851
 8014a00:	4920      	ldr	r1, [pc, #128]	; (8014a84 <tcp_pcb_purge+0x98>)
 8014a02:	4821      	ldr	r0, [pc, #132]	; (8014a88 <tcp_pcb_purge+0x9c>)
 8014a04:	f00a ff5e 	bl	801f8c4 <iprintf>
 8014a08:	e037      	b.n	8014a7a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	7d1b      	ldrb	r3, [r3, #20]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d033      	beq.n	8014a7a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014a16:	2b0a      	cmp	r3, #10
 8014a18:	d02f      	beq.n	8014a7a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d02b      	beq.n	8014a7a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d007      	beq.n	8014a3a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7fe f874 	bl	8012b1c <pbuf_free>
      pcb->refused_data = NULL;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2200      	movs	r2, #0
 8014a38:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d002      	beq.n	8014a48 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 f986 	bl	8014d54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014a4e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7ff fcf9 	bl	801444c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f7ff fcf4 	bl	801444c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	2200      	movs	r2, #0
 8014a68:	66da      	str	r2, [r3, #108]	; 0x6c
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	2200      	movs	r2, #0
 8014a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014a7a:	3708      	adds	r7, #8
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	08022db0 	.word	0x08022db0
 8014a84:	080233fc 	.word	0x080233fc
 8014a88:	08022df4 	.word	0x08022df4

08014a8c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d106      	bne.n	8014aaa <tcp_pcb_remove+0x1e>
 8014a9c:	4b3e      	ldr	r3, [pc, #248]	; (8014b98 <tcp_pcb_remove+0x10c>)
 8014a9e:	f640 0283 	movw	r2, #2179	; 0x883
 8014aa2:	493e      	ldr	r1, [pc, #248]	; (8014b9c <tcp_pcb_remove+0x110>)
 8014aa4:	483e      	ldr	r0, [pc, #248]	; (8014ba0 <tcp_pcb_remove+0x114>)
 8014aa6:	f00a ff0d 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d106      	bne.n	8014abe <tcp_pcb_remove+0x32>
 8014ab0:	4b39      	ldr	r3, [pc, #228]	; (8014b98 <tcp_pcb_remove+0x10c>)
 8014ab2:	f640 0284 	movw	r2, #2180	; 0x884
 8014ab6:	493b      	ldr	r1, [pc, #236]	; (8014ba4 <tcp_pcb_remove+0x118>)
 8014ab8:	4839      	ldr	r0, [pc, #228]	; (8014ba0 <tcp_pcb_remove+0x114>)
 8014aba:	f00a ff03 	bl	801f8c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	683a      	ldr	r2, [r7, #0]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d105      	bne.n	8014ad4 <tcp_pcb_remove+0x48>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	68da      	ldr	r2, [r3, #12]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	601a      	str	r2, [r3, #0]
 8014ad2:	e013      	b.n	8014afc <tcp_pcb_remove+0x70>
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	60fb      	str	r3, [r7, #12]
 8014ada:	e00c      	b.n	8014af6 <tcp_pcb_remove+0x6a>
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	683a      	ldr	r2, [r7, #0]
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d104      	bne.n	8014af0 <tcp_pcb_remove+0x64>
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	68da      	ldr	r2, [r3, #12]
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	60da      	str	r2, [r3, #12]
 8014aee:	e005      	b.n	8014afc <tcp_pcb_remove+0x70>
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	68db      	ldr	r3, [r3, #12]
 8014af4:	60fb      	str	r3, [r7, #12]
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d1ef      	bne.n	8014adc <tcp_pcb_remove+0x50>
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	2200      	movs	r2, #0
 8014b00:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014b02:	6838      	ldr	r0, [r7, #0]
 8014b04:	f7ff ff72 	bl	80149ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	7d1b      	ldrb	r3, [r3, #20]
 8014b0c:	2b0a      	cmp	r3, #10
 8014b0e:	d013      	beq.n	8014b38 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014b14:	2b01      	cmp	r3, #1
 8014b16:	d00f      	beq.n	8014b38 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014b18:	683b      	ldr	r3, [r7, #0]
 8014b1a:	8b5b      	ldrh	r3, [r3, #26]
 8014b1c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d009      	beq.n	8014b38 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	8b5b      	ldrh	r3, [r3, #26]
 8014b28:	f043 0302 	orr.w	r3, r3, #2
 8014b2c:	b29a      	uxth	r2, r3
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014b32:	6838      	ldr	r0, [r7, #0]
 8014b34:	f003 fbc6 	bl	80182c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	7d1b      	ldrb	r3, [r3, #20]
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	d020      	beq.n	8014b82 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d006      	beq.n	8014b56 <tcp_pcb_remove+0xca>
 8014b48:	4b13      	ldr	r3, [pc, #76]	; (8014b98 <tcp_pcb_remove+0x10c>)
 8014b4a:	f640 0293 	movw	r2, #2195	; 0x893
 8014b4e:	4916      	ldr	r1, [pc, #88]	; (8014ba8 <tcp_pcb_remove+0x11c>)
 8014b50:	4813      	ldr	r0, [pc, #76]	; (8014ba0 <tcp_pcb_remove+0x114>)
 8014b52:	f00a feb7 	bl	801f8c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d006      	beq.n	8014b6c <tcp_pcb_remove+0xe0>
 8014b5e:	4b0e      	ldr	r3, [pc, #56]	; (8014b98 <tcp_pcb_remove+0x10c>)
 8014b60:	f640 0294 	movw	r2, #2196	; 0x894
 8014b64:	4911      	ldr	r1, [pc, #68]	; (8014bac <tcp_pcb_remove+0x120>)
 8014b66:	480e      	ldr	r0, [pc, #56]	; (8014ba0 <tcp_pcb_remove+0x114>)
 8014b68:	f00a feac 	bl	801f8c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d006      	beq.n	8014b82 <tcp_pcb_remove+0xf6>
 8014b74:	4b08      	ldr	r3, [pc, #32]	; (8014b98 <tcp_pcb_remove+0x10c>)
 8014b76:	f640 0296 	movw	r2, #2198	; 0x896
 8014b7a:	490d      	ldr	r1, [pc, #52]	; (8014bb0 <tcp_pcb_remove+0x124>)
 8014b7c:	4808      	ldr	r0, [pc, #32]	; (8014ba0 <tcp_pcb_remove+0x114>)
 8014b7e:	f00a fea1 	bl	801f8c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	2200      	movs	r2, #0
 8014b86:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014b8e:	bf00      	nop
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
 8014b96:	bf00      	nop
 8014b98:	08022db0 	.word	0x08022db0
 8014b9c:	08023418 	.word	0x08023418
 8014ba0:	08022df4 	.word	0x08022df4
 8014ba4:	08023434 	.word	0x08023434
 8014ba8:	08023454 	.word	0x08023454
 8014bac:	0802346c 	.word	0x0802346c
 8014bb0:	08023488 	.word	0x08023488

08014bb4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b082      	sub	sp, #8
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d106      	bne.n	8014bd0 <tcp_next_iss+0x1c>
 8014bc2:	4b0a      	ldr	r3, [pc, #40]	; (8014bec <tcp_next_iss+0x38>)
 8014bc4:	f640 02af 	movw	r2, #2223	; 0x8af
 8014bc8:	4909      	ldr	r1, [pc, #36]	; (8014bf0 <tcp_next_iss+0x3c>)
 8014bca:	480a      	ldr	r0, [pc, #40]	; (8014bf4 <tcp_next_iss+0x40>)
 8014bcc:	f00a fe7a 	bl	801f8c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014bd0:	4b09      	ldr	r3, [pc, #36]	; (8014bf8 <tcp_next_iss+0x44>)
 8014bd2:	681a      	ldr	r2, [r3, #0]
 8014bd4:	4b09      	ldr	r3, [pc, #36]	; (8014bfc <tcp_next_iss+0x48>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	4413      	add	r3, r2
 8014bda:	4a07      	ldr	r2, [pc, #28]	; (8014bf8 <tcp_next_iss+0x44>)
 8014bdc:	6013      	str	r3, [r2, #0]
  return iss;
 8014bde:	4b06      	ldr	r3, [pc, #24]	; (8014bf8 <tcp_next_iss+0x44>)
 8014be0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014be2:	4618      	mov	r0, r3
 8014be4:	3708      	adds	r7, #8
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	08022db0 	.word	0x08022db0
 8014bf0:	080234a0 	.word	0x080234a0
 8014bf4:	08022df4 	.word	0x08022df4
 8014bf8:	20000028 	.word	0x20000028
 8014bfc:	200101c8 	.word	0x200101c8

08014c00 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b086      	sub	sp, #24
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	4603      	mov	r3, r0
 8014c08:	60b9      	str	r1, [r7, #8]
 8014c0a:	607a      	str	r2, [r7, #4]
 8014c0c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d106      	bne.n	8014c22 <tcp_eff_send_mss_netif+0x22>
 8014c14:	4b14      	ldr	r3, [pc, #80]	; (8014c68 <tcp_eff_send_mss_netif+0x68>)
 8014c16:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014c1a:	4914      	ldr	r1, [pc, #80]	; (8014c6c <tcp_eff_send_mss_netif+0x6c>)
 8014c1c:	4814      	ldr	r0, [pc, #80]	; (8014c70 <tcp_eff_send_mss_netif+0x70>)
 8014c1e:	f00a fe51 	bl	801f8c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014c22:	68bb      	ldr	r3, [r7, #8]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d101      	bne.n	8014c2c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014c28:	89fb      	ldrh	r3, [r7, #14]
 8014c2a:	e019      	b.n	8014c60 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c30:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014c32:	8afb      	ldrh	r3, [r7, #22]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d012      	beq.n	8014c5e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014c38:	2328      	movs	r3, #40	; 0x28
 8014c3a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014c3c:	8afa      	ldrh	r2, [r7, #22]
 8014c3e:	8abb      	ldrh	r3, [r7, #20]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d904      	bls.n	8014c4e <tcp_eff_send_mss_netif+0x4e>
 8014c44:	8afa      	ldrh	r2, [r7, #22]
 8014c46:	8abb      	ldrh	r3, [r7, #20]
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	b29b      	uxth	r3, r3
 8014c4c:	e000      	b.n	8014c50 <tcp_eff_send_mss_netif+0x50>
 8014c4e:	2300      	movs	r3, #0
 8014c50:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014c52:	8a7a      	ldrh	r2, [r7, #18]
 8014c54:	89fb      	ldrh	r3, [r7, #14]
 8014c56:	4293      	cmp	r3, r2
 8014c58:	bf28      	it	cs
 8014c5a:	4613      	movcs	r3, r2
 8014c5c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014c5e:	89fb      	ldrh	r3, [r7, #14]
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3718      	adds	r7, #24
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}
 8014c68:	08022db0 	.word	0x08022db0
 8014c6c:	080234bc 	.word	0x080234bc
 8014c70:	08022df4 	.word	0x08022df4

08014c74 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b084      	sub	sp, #16
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d119      	bne.n	8014cbc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014c88:	4b10      	ldr	r3, [pc, #64]	; (8014ccc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014c8a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014c8e:	4910      	ldr	r1, [pc, #64]	; (8014cd0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014c90:	4810      	ldr	r0, [pc, #64]	; (8014cd4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014c92:	f00a fe17 	bl	801f8c4 <iprintf>

  while (pcb != NULL) {
 8014c96:	e011      	b.n	8014cbc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	681a      	ldr	r2, [r3, #0]
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d108      	bne.n	8014cb6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014caa:	68f8      	ldr	r0, [r7, #12]
 8014cac:	f7fe fd36 	bl	801371c <tcp_abort>
      pcb = next;
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	60fb      	str	r3, [r7, #12]
 8014cb4:	e002      	b.n	8014cbc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d1ea      	bne.n	8014c98 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014cc2:	bf00      	nop
 8014cc4:	bf00      	nop
 8014cc6:	3710      	adds	r7, #16
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	08022db0 	.word	0x08022db0
 8014cd0:	080234e4 	.word	0x080234e4
 8014cd4:	08022df4 	.word	0x08022df4

08014cd8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d02a      	beq.n	8014d3e <tcp_netif_ip_addr_changed+0x66>
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d026      	beq.n	8014d3e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014cf0:	4b15      	ldr	r3, [pc, #84]	; (8014d48 <tcp_netif_ip_addr_changed+0x70>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f7ff ffbc 	bl	8014c74 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014cfc:	4b13      	ldr	r3, [pc, #76]	; (8014d4c <tcp_netif_ip_addr_changed+0x74>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4619      	mov	r1, r3
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f7ff ffb6 	bl	8014c74 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d017      	beq.n	8014d3e <tcp_netif_ip_addr_changed+0x66>
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d013      	beq.n	8014d3e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014d16:	4b0e      	ldr	r3, [pc, #56]	; (8014d50 <tcp_netif_ip_addr_changed+0x78>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	60fb      	str	r3, [r7, #12]
 8014d1c:	e00c      	b.n	8014d38 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	681a      	ldr	r2, [r3, #0]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d103      	bne.n	8014d32 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	681a      	ldr	r2, [r3, #0]
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	68db      	ldr	r3, [r3, #12]
 8014d36:	60fb      	str	r3, [r7, #12]
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d1ef      	bne.n	8014d1e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014d3e:	bf00      	nop
 8014d40:	3710      	adds	r7, #16
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	bf00      	nop
 8014d48:	200101d4 	.word	0x200101d4
 8014d4c:	200101cc 	.word	0x200101cc
 8014d50:	200101d0 	.word	0x200101d0

08014d54 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b082      	sub	sp, #8
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d007      	beq.n	8014d74 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7ff fb6f 	bl	801444c <tcp_segs_free>
    pcb->ooseq = NULL;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2200      	movs	r2, #0
 8014d72:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014d74:	bf00      	nop
 8014d76:	3708      	adds	r7, #8
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}

08014d7c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014d7c:	b590      	push	{r4, r7, lr}
 8014d7e:	b08d      	sub	sp, #52	; 0x34
 8014d80:	af04      	add	r7, sp, #16
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d105      	bne.n	8014d98 <tcp_input+0x1c>
 8014d8c:	4b9b      	ldr	r3, [pc, #620]	; (8014ffc <tcp_input+0x280>)
 8014d8e:	2283      	movs	r2, #131	; 0x83
 8014d90:	499b      	ldr	r1, [pc, #620]	; (8015000 <tcp_input+0x284>)
 8014d92:	489c      	ldr	r0, [pc, #624]	; (8015004 <tcp_input+0x288>)
 8014d94:	f00a fd96 	bl	801f8c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	4a9a      	ldr	r2, [pc, #616]	; (8015008 <tcp_input+0x28c>)
 8014d9e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	895b      	ldrh	r3, [r3, #10]
 8014da4:	2b13      	cmp	r3, #19
 8014da6:	f240 83d1 	bls.w	801554c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014daa:	4b98      	ldr	r3, [pc, #608]	; (801500c <tcp_input+0x290>)
 8014dac:	695b      	ldr	r3, [r3, #20]
 8014dae:	4a97      	ldr	r2, [pc, #604]	; (801500c <tcp_input+0x290>)
 8014db0:	6812      	ldr	r2, [r2, #0]
 8014db2:	4611      	mov	r1, r2
 8014db4:	4618      	mov	r0, r3
 8014db6:	f008 fa7b 	bl	801d2b0 <ip4_addr_isbroadcast_u32>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	f040 83c7 	bne.w	8015550 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014dc2:	4b92      	ldr	r3, [pc, #584]	; (801500c <tcp_input+0x290>)
 8014dc4:	695b      	ldr	r3, [r3, #20]
 8014dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014dca:	2be0      	cmp	r3, #224	; 0xe0
 8014dcc:	f000 83c0 	beq.w	8015550 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014dd0:	4b8d      	ldr	r3, [pc, #564]	; (8015008 <tcp_input+0x28c>)
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	899b      	ldrh	r3, [r3, #12]
 8014dd6:	b29b      	uxth	r3, r3
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7fc fa69 	bl	80112b0 <lwip_htons>
 8014dde:	4603      	mov	r3, r0
 8014de0:	0b1b      	lsrs	r3, r3, #12
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	009b      	lsls	r3, r3, #2
 8014de8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014dea:	7cbb      	ldrb	r3, [r7, #18]
 8014dec:	2b13      	cmp	r3, #19
 8014dee:	f240 83b1 	bls.w	8015554 <tcp_input+0x7d8>
 8014df2:	7cbb      	ldrb	r3, [r7, #18]
 8014df4:	b29a      	uxth	r2, r3
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	891b      	ldrh	r3, [r3, #8]
 8014dfa:	429a      	cmp	r2, r3
 8014dfc:	f200 83aa 	bhi.w	8015554 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014e00:	7cbb      	ldrb	r3, [r7, #18]
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	3b14      	subs	r3, #20
 8014e06:	b29a      	uxth	r2, r3
 8014e08:	4b81      	ldr	r3, [pc, #516]	; (8015010 <tcp_input+0x294>)
 8014e0a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014e0c:	4b81      	ldr	r3, [pc, #516]	; (8015014 <tcp_input+0x298>)
 8014e0e:	2200      	movs	r2, #0
 8014e10:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	895a      	ldrh	r2, [r3, #10]
 8014e16:	7cbb      	ldrb	r3, [r7, #18]
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d309      	bcc.n	8014e32 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014e1e:	4b7c      	ldr	r3, [pc, #496]	; (8015010 <tcp_input+0x294>)
 8014e20:	881a      	ldrh	r2, [r3, #0]
 8014e22:	4b7d      	ldr	r3, [pc, #500]	; (8015018 <tcp_input+0x29c>)
 8014e24:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014e26:	7cbb      	ldrb	r3, [r7, #18]
 8014e28:	4619      	mov	r1, r3
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f7fd fdf0 	bl	8012a10 <pbuf_remove_header>
 8014e30:	e04e      	b.n	8014ed0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d105      	bne.n	8014e46 <tcp_input+0xca>
 8014e3a:	4b70      	ldr	r3, [pc, #448]	; (8014ffc <tcp_input+0x280>)
 8014e3c:	22c2      	movs	r2, #194	; 0xc2
 8014e3e:	4977      	ldr	r1, [pc, #476]	; (801501c <tcp_input+0x2a0>)
 8014e40:	4870      	ldr	r0, [pc, #448]	; (8015004 <tcp_input+0x288>)
 8014e42:	f00a fd3f 	bl	801f8c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014e46:	2114      	movs	r1, #20
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f7fd fde1 	bl	8012a10 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	895a      	ldrh	r2, [r3, #10]
 8014e52:	4b71      	ldr	r3, [pc, #452]	; (8015018 <tcp_input+0x29c>)
 8014e54:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014e56:	4b6e      	ldr	r3, [pc, #440]	; (8015010 <tcp_input+0x294>)
 8014e58:	881a      	ldrh	r2, [r3, #0]
 8014e5a:	4b6f      	ldr	r3, [pc, #444]	; (8015018 <tcp_input+0x29c>)
 8014e5c:	881b      	ldrh	r3, [r3, #0]
 8014e5e:	1ad3      	subs	r3, r2, r3
 8014e60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014e62:	4b6d      	ldr	r3, [pc, #436]	; (8015018 <tcp_input+0x29c>)
 8014e64:	881b      	ldrh	r3, [r3, #0]
 8014e66:	4619      	mov	r1, r3
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	f7fd fdd1 	bl	8012a10 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	895b      	ldrh	r3, [r3, #10]
 8014e74:	8a3a      	ldrh	r2, [r7, #16]
 8014e76:	429a      	cmp	r2, r3
 8014e78:	f200 836e 	bhi.w	8015558 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	685b      	ldr	r3, [r3, #4]
 8014e82:	4a64      	ldr	r2, [pc, #400]	; (8015014 <tcp_input+0x298>)
 8014e84:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	8a3a      	ldrh	r2, [r7, #16]
 8014e8c:	4611      	mov	r1, r2
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7fd fdbe 	bl	8012a10 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	891a      	ldrh	r2, [r3, #8]
 8014e98:	8a3b      	ldrh	r3, [r7, #16]
 8014e9a:	1ad3      	subs	r3, r2, r3
 8014e9c:	b29a      	uxth	r2, r3
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	895b      	ldrh	r3, [r3, #10]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d005      	beq.n	8014eb6 <tcp_input+0x13a>
 8014eaa:	4b54      	ldr	r3, [pc, #336]	; (8014ffc <tcp_input+0x280>)
 8014eac:	22df      	movs	r2, #223	; 0xdf
 8014eae:	495c      	ldr	r1, [pc, #368]	; (8015020 <tcp_input+0x2a4>)
 8014eb0:	4854      	ldr	r0, [pc, #336]	; (8015004 <tcp_input+0x288>)
 8014eb2:	f00a fd07 	bl	801f8c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	891a      	ldrh	r2, [r3, #8]
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	891b      	ldrh	r3, [r3, #8]
 8014ec0:	429a      	cmp	r2, r3
 8014ec2:	d005      	beq.n	8014ed0 <tcp_input+0x154>
 8014ec4:	4b4d      	ldr	r3, [pc, #308]	; (8014ffc <tcp_input+0x280>)
 8014ec6:	22e0      	movs	r2, #224	; 0xe0
 8014ec8:	4956      	ldr	r1, [pc, #344]	; (8015024 <tcp_input+0x2a8>)
 8014eca:	484e      	ldr	r0, [pc, #312]	; (8015004 <tcp_input+0x288>)
 8014ecc:	f00a fcfa 	bl	801f8c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014ed0:	4b4d      	ldr	r3, [pc, #308]	; (8015008 <tcp_input+0x28c>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	881b      	ldrh	r3, [r3, #0]
 8014ed6:	b29b      	uxth	r3, r3
 8014ed8:	4a4b      	ldr	r2, [pc, #300]	; (8015008 <tcp_input+0x28c>)
 8014eda:	6814      	ldr	r4, [r2, #0]
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7fc f9e7 	bl	80112b0 <lwip_htons>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014ee6:	4b48      	ldr	r3, [pc, #288]	; (8015008 <tcp_input+0x28c>)
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	885b      	ldrh	r3, [r3, #2]
 8014eec:	b29b      	uxth	r3, r3
 8014eee:	4a46      	ldr	r2, [pc, #280]	; (8015008 <tcp_input+0x28c>)
 8014ef0:	6814      	ldr	r4, [r2, #0]
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7fc f9dc 	bl	80112b0 <lwip_htons>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014efc:	4b42      	ldr	r3, [pc, #264]	; (8015008 <tcp_input+0x28c>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	685b      	ldr	r3, [r3, #4]
 8014f02:	4a41      	ldr	r2, [pc, #260]	; (8015008 <tcp_input+0x28c>)
 8014f04:	6814      	ldr	r4, [r2, #0]
 8014f06:	4618      	mov	r0, r3
 8014f08:	f7fc f9e7 	bl	80112da <lwip_htonl>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	6063      	str	r3, [r4, #4]
 8014f10:	6863      	ldr	r3, [r4, #4]
 8014f12:	4a45      	ldr	r2, [pc, #276]	; (8015028 <tcp_input+0x2ac>)
 8014f14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014f16:	4b3c      	ldr	r3, [pc, #240]	; (8015008 <tcp_input+0x28c>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	689b      	ldr	r3, [r3, #8]
 8014f1c:	4a3a      	ldr	r2, [pc, #232]	; (8015008 <tcp_input+0x28c>)
 8014f1e:	6814      	ldr	r4, [r2, #0]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7fc f9da 	bl	80112da <lwip_htonl>
 8014f26:	4603      	mov	r3, r0
 8014f28:	60a3      	str	r3, [r4, #8]
 8014f2a:	68a3      	ldr	r3, [r4, #8]
 8014f2c:	4a3f      	ldr	r2, [pc, #252]	; (801502c <tcp_input+0x2b0>)
 8014f2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014f30:	4b35      	ldr	r3, [pc, #212]	; (8015008 <tcp_input+0x28c>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	89db      	ldrh	r3, [r3, #14]
 8014f36:	b29b      	uxth	r3, r3
 8014f38:	4a33      	ldr	r2, [pc, #204]	; (8015008 <tcp_input+0x28c>)
 8014f3a:	6814      	ldr	r4, [r2, #0]
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f7fc f9b7 	bl	80112b0 <lwip_htons>
 8014f42:	4603      	mov	r3, r0
 8014f44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014f46:	4b30      	ldr	r3, [pc, #192]	; (8015008 <tcp_input+0x28c>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	899b      	ldrh	r3, [r3, #12]
 8014f4c:	b29b      	uxth	r3, r3
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f7fc f9ae 	bl	80112b0 <lwip_htons>
 8014f54:	4603      	mov	r3, r0
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f5c:	b2da      	uxtb	r2, r3
 8014f5e:	4b34      	ldr	r3, [pc, #208]	; (8015030 <tcp_input+0x2b4>)
 8014f60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	891a      	ldrh	r2, [r3, #8]
 8014f66:	4b33      	ldr	r3, [pc, #204]	; (8015034 <tcp_input+0x2b8>)
 8014f68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014f6a:	4b31      	ldr	r3, [pc, #196]	; (8015030 <tcp_input+0x2b4>)
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	f003 0303 	and.w	r3, r3, #3
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d00c      	beq.n	8014f90 <tcp_input+0x214>
    tcplen++;
 8014f76:	4b2f      	ldr	r3, [pc, #188]	; (8015034 <tcp_input+0x2b8>)
 8014f78:	881b      	ldrh	r3, [r3, #0]
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	b29a      	uxth	r2, r3
 8014f7e:	4b2d      	ldr	r3, [pc, #180]	; (8015034 <tcp_input+0x2b8>)
 8014f80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	891a      	ldrh	r2, [r3, #8]
 8014f86:	4b2b      	ldr	r3, [pc, #172]	; (8015034 <tcp_input+0x2b8>)
 8014f88:	881b      	ldrh	r3, [r3, #0]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	f200 82e6 	bhi.w	801555c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014f90:	2300      	movs	r3, #0
 8014f92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f94:	4b28      	ldr	r3, [pc, #160]	; (8015038 <tcp_input+0x2bc>)
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	61fb      	str	r3, [r7, #28]
 8014f9a:	e09d      	b.n	80150d8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	7d1b      	ldrb	r3, [r3, #20]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d105      	bne.n	8014fb0 <tcp_input+0x234>
 8014fa4:	4b15      	ldr	r3, [pc, #84]	; (8014ffc <tcp_input+0x280>)
 8014fa6:	22fb      	movs	r2, #251	; 0xfb
 8014fa8:	4924      	ldr	r1, [pc, #144]	; (801503c <tcp_input+0x2c0>)
 8014faa:	4816      	ldr	r0, [pc, #88]	; (8015004 <tcp_input+0x288>)
 8014fac:	f00a fc8a 	bl	801f8c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014fb0:	69fb      	ldr	r3, [r7, #28]
 8014fb2:	7d1b      	ldrb	r3, [r3, #20]
 8014fb4:	2b0a      	cmp	r3, #10
 8014fb6:	d105      	bne.n	8014fc4 <tcp_input+0x248>
 8014fb8:	4b10      	ldr	r3, [pc, #64]	; (8014ffc <tcp_input+0x280>)
 8014fba:	22fc      	movs	r2, #252	; 0xfc
 8014fbc:	4920      	ldr	r1, [pc, #128]	; (8015040 <tcp_input+0x2c4>)
 8014fbe:	4811      	ldr	r0, [pc, #68]	; (8015004 <tcp_input+0x288>)
 8014fc0:	f00a fc80 	bl	801f8c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	7d1b      	ldrb	r3, [r3, #20]
 8014fc8:	2b01      	cmp	r3, #1
 8014fca:	d105      	bne.n	8014fd8 <tcp_input+0x25c>
 8014fcc:	4b0b      	ldr	r3, [pc, #44]	; (8014ffc <tcp_input+0x280>)
 8014fce:	22fd      	movs	r2, #253	; 0xfd
 8014fd0:	491c      	ldr	r1, [pc, #112]	; (8015044 <tcp_input+0x2c8>)
 8014fd2:	480c      	ldr	r0, [pc, #48]	; (8015004 <tcp_input+0x288>)
 8014fd4:	f00a fc76 	bl	801f8c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014fd8:	69fb      	ldr	r3, [r7, #28]
 8014fda:	7a1b      	ldrb	r3, [r3, #8]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d033      	beq.n	8015048 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014fe0:	69fb      	ldr	r3, [r7, #28]
 8014fe2:	7a1a      	ldrb	r2, [r3, #8]
 8014fe4:	4b09      	ldr	r3, [pc, #36]	; (801500c <tcp_input+0x290>)
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014fec:	3301      	adds	r3, #1
 8014fee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d029      	beq.n	8015048 <tcp_input+0x2cc>
      prev = pcb;
 8014ff4:	69fb      	ldr	r3, [r7, #28]
 8014ff6:	61bb      	str	r3, [r7, #24]
      continue;
 8014ff8:	e06b      	b.n	80150d2 <tcp_input+0x356>
 8014ffa:	bf00      	nop
 8014ffc:	08023518 	.word	0x08023518
 8015000:	0802354c 	.word	0x0802354c
 8015004:	08023564 	.word	0x08023564
 8015008:	200101f0 	.word	0x200101f0
 801500c:	2000ca54 	.word	0x2000ca54
 8015010:	200101f4 	.word	0x200101f4
 8015014:	200101f8 	.word	0x200101f8
 8015018:	200101f6 	.word	0x200101f6
 801501c:	0802358c 	.word	0x0802358c
 8015020:	0802359c 	.word	0x0802359c
 8015024:	080235a8 	.word	0x080235a8
 8015028:	20010200 	.word	0x20010200
 801502c:	20010204 	.word	0x20010204
 8015030:	2001020c 	.word	0x2001020c
 8015034:	2001020a 	.word	0x2001020a
 8015038:	200101d4 	.word	0x200101d4
 801503c:	080235c8 	.word	0x080235c8
 8015040:	080235f0 	.word	0x080235f0
 8015044:	0802361c 	.word	0x0802361c
    }

    if (pcb->remote_port == tcphdr->src &&
 8015048:	69fb      	ldr	r3, [r7, #28]
 801504a:	8b1a      	ldrh	r2, [r3, #24]
 801504c:	4b72      	ldr	r3, [pc, #456]	; (8015218 <tcp_input+0x49c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	881b      	ldrh	r3, [r3, #0]
 8015052:	b29b      	uxth	r3, r3
 8015054:	429a      	cmp	r2, r3
 8015056:	d13a      	bne.n	80150ce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	8ada      	ldrh	r2, [r3, #22]
 801505c:	4b6e      	ldr	r3, [pc, #440]	; (8015218 <tcp_input+0x49c>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	885b      	ldrh	r3, [r3, #2]
 8015062:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015064:	429a      	cmp	r2, r3
 8015066:	d132      	bne.n	80150ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015068:	69fb      	ldr	r3, [r7, #28]
 801506a:	685a      	ldr	r2, [r3, #4]
 801506c:	4b6b      	ldr	r3, [pc, #428]	; (801521c <tcp_input+0x4a0>)
 801506e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015070:	429a      	cmp	r2, r3
 8015072:	d12c      	bne.n	80150ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015074:	69fb      	ldr	r3, [r7, #28]
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	4b68      	ldr	r3, [pc, #416]	; (801521c <tcp_input+0x4a0>)
 801507a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801507c:	429a      	cmp	r2, r3
 801507e:	d126      	bne.n	80150ce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015080:	69fb      	ldr	r3, [r7, #28]
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	69fa      	ldr	r2, [r7, #28]
 8015086:	429a      	cmp	r2, r3
 8015088:	d106      	bne.n	8015098 <tcp_input+0x31c>
 801508a:	4b65      	ldr	r3, [pc, #404]	; (8015220 <tcp_input+0x4a4>)
 801508c:	f240 120d 	movw	r2, #269	; 0x10d
 8015090:	4964      	ldr	r1, [pc, #400]	; (8015224 <tcp_input+0x4a8>)
 8015092:	4865      	ldr	r0, [pc, #404]	; (8015228 <tcp_input+0x4ac>)
 8015094:	f00a fc16 	bl	801f8c4 <iprintf>
      if (prev != NULL) {
 8015098:	69bb      	ldr	r3, [r7, #24]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d00a      	beq.n	80150b4 <tcp_input+0x338>
        prev->next = pcb->next;
 801509e:	69fb      	ldr	r3, [r7, #28]
 80150a0:	68da      	ldr	r2, [r3, #12]
 80150a2:	69bb      	ldr	r3, [r7, #24]
 80150a4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80150a6:	4b61      	ldr	r3, [pc, #388]	; (801522c <tcp_input+0x4b0>)
 80150a8:	681a      	ldr	r2, [r3, #0]
 80150aa:	69fb      	ldr	r3, [r7, #28]
 80150ac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80150ae:	4a5f      	ldr	r2, [pc, #380]	; (801522c <tcp_input+0x4b0>)
 80150b0:	69fb      	ldr	r3, [r7, #28]
 80150b2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80150b4:	69fb      	ldr	r3, [r7, #28]
 80150b6:	68db      	ldr	r3, [r3, #12]
 80150b8:	69fa      	ldr	r2, [r7, #28]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d111      	bne.n	80150e2 <tcp_input+0x366>
 80150be:	4b58      	ldr	r3, [pc, #352]	; (8015220 <tcp_input+0x4a4>)
 80150c0:	f240 1215 	movw	r2, #277	; 0x115
 80150c4:	495a      	ldr	r1, [pc, #360]	; (8015230 <tcp_input+0x4b4>)
 80150c6:	4858      	ldr	r0, [pc, #352]	; (8015228 <tcp_input+0x4ac>)
 80150c8:	f00a fbfc 	bl	801f8c4 <iprintf>
      break;
 80150cc:	e009      	b.n	80150e2 <tcp_input+0x366>
    }
    prev = pcb;
 80150ce:	69fb      	ldr	r3, [r7, #28]
 80150d0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80150d2:	69fb      	ldr	r3, [r7, #28]
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	61fb      	str	r3, [r7, #28]
 80150d8:	69fb      	ldr	r3, [r7, #28]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	f47f af5e 	bne.w	8014f9c <tcp_input+0x220>
 80150e0:	e000      	b.n	80150e4 <tcp_input+0x368>
      break;
 80150e2:	bf00      	nop
  }

  if (pcb == NULL) {
 80150e4:	69fb      	ldr	r3, [r7, #28]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	f040 80aa 	bne.w	8015240 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80150ec:	4b51      	ldr	r3, [pc, #324]	; (8015234 <tcp_input+0x4b8>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	61fb      	str	r3, [r7, #28]
 80150f2:	e03f      	b.n	8015174 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80150f4:	69fb      	ldr	r3, [r7, #28]
 80150f6:	7d1b      	ldrb	r3, [r3, #20]
 80150f8:	2b0a      	cmp	r3, #10
 80150fa:	d006      	beq.n	801510a <tcp_input+0x38e>
 80150fc:	4b48      	ldr	r3, [pc, #288]	; (8015220 <tcp_input+0x4a4>)
 80150fe:	f240 121f 	movw	r2, #287	; 0x11f
 8015102:	494d      	ldr	r1, [pc, #308]	; (8015238 <tcp_input+0x4bc>)
 8015104:	4848      	ldr	r0, [pc, #288]	; (8015228 <tcp_input+0x4ac>)
 8015106:	f00a fbdd 	bl	801f8c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	7a1b      	ldrb	r3, [r3, #8]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d009      	beq.n	8015126 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015112:	69fb      	ldr	r3, [r7, #28]
 8015114:	7a1a      	ldrb	r2, [r3, #8]
 8015116:	4b41      	ldr	r3, [pc, #260]	; (801521c <tcp_input+0x4a0>)
 8015118:	685b      	ldr	r3, [r3, #4]
 801511a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801511e:	3301      	adds	r3, #1
 8015120:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015122:	429a      	cmp	r2, r3
 8015124:	d122      	bne.n	801516c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015126:	69fb      	ldr	r3, [r7, #28]
 8015128:	8b1a      	ldrh	r2, [r3, #24]
 801512a:	4b3b      	ldr	r3, [pc, #236]	; (8015218 <tcp_input+0x49c>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	881b      	ldrh	r3, [r3, #0]
 8015130:	b29b      	uxth	r3, r3
 8015132:	429a      	cmp	r2, r3
 8015134:	d11b      	bne.n	801516e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	8ada      	ldrh	r2, [r3, #22]
 801513a:	4b37      	ldr	r3, [pc, #220]	; (8015218 <tcp_input+0x49c>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	885b      	ldrh	r3, [r3, #2]
 8015140:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8015142:	429a      	cmp	r2, r3
 8015144:	d113      	bne.n	801516e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015146:	69fb      	ldr	r3, [r7, #28]
 8015148:	685a      	ldr	r2, [r3, #4]
 801514a:	4b34      	ldr	r3, [pc, #208]	; (801521c <tcp_input+0x4a0>)
 801514c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801514e:	429a      	cmp	r2, r3
 8015150:	d10d      	bne.n	801516e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015152:	69fb      	ldr	r3, [r7, #28]
 8015154:	681a      	ldr	r2, [r3, #0]
 8015156:	4b31      	ldr	r3, [pc, #196]	; (801521c <tcp_input+0x4a0>)
 8015158:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801515a:	429a      	cmp	r2, r3
 801515c:	d107      	bne.n	801516e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801515e:	69f8      	ldr	r0, [r7, #28]
 8015160:	f000 fb56 	bl	8015810 <tcp_timewait_input>
        }
        pbuf_free(p);
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	f7fd fcd9 	bl	8012b1c <pbuf_free>
        return;
 801516a:	e1fd      	b.n	8015568 <tcp_input+0x7ec>
        continue;
 801516c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801516e:	69fb      	ldr	r3, [r7, #28]
 8015170:	68db      	ldr	r3, [r3, #12]
 8015172:	61fb      	str	r3, [r7, #28]
 8015174:	69fb      	ldr	r3, [r7, #28]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d1bc      	bne.n	80150f4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801517a:	2300      	movs	r3, #0
 801517c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801517e:	4b2f      	ldr	r3, [pc, #188]	; (801523c <tcp_input+0x4c0>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	617b      	str	r3, [r7, #20]
 8015184:	e02a      	b.n	80151dc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	7a1b      	ldrb	r3, [r3, #8]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d00c      	beq.n	80151a8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801518e:	697b      	ldr	r3, [r7, #20]
 8015190:	7a1a      	ldrb	r2, [r3, #8]
 8015192:	4b22      	ldr	r3, [pc, #136]	; (801521c <tcp_input+0x4a0>)
 8015194:	685b      	ldr	r3, [r3, #4]
 8015196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801519a:	3301      	adds	r3, #1
 801519c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801519e:	429a      	cmp	r2, r3
 80151a0:	d002      	beq.n	80151a8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	61bb      	str	r3, [r7, #24]
        continue;
 80151a6:	e016      	b.n	80151d6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80151a8:	697b      	ldr	r3, [r7, #20]
 80151aa:	8ada      	ldrh	r2, [r3, #22]
 80151ac:	4b1a      	ldr	r3, [pc, #104]	; (8015218 <tcp_input+0x49c>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	885b      	ldrh	r3, [r3, #2]
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d10c      	bne.n	80151d2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	4b17      	ldr	r3, [pc, #92]	; (801521c <tcp_input+0x4a0>)
 80151be:	695b      	ldr	r3, [r3, #20]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d00f      	beq.n	80151e4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80151c4:	697b      	ldr	r3, [r7, #20]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d00d      	beq.n	80151e6 <tcp_input+0x46a>
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d009      	beq.n	80151e6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80151d2:	697b      	ldr	r3, [r7, #20]
 80151d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	68db      	ldr	r3, [r3, #12]
 80151da:	617b      	str	r3, [r7, #20]
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d1d1      	bne.n	8015186 <tcp_input+0x40a>
 80151e2:	e000      	b.n	80151e6 <tcp_input+0x46a>
            break;
 80151e4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d029      	beq.n	8015240 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80151ec:	69bb      	ldr	r3, [r7, #24]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d00a      	beq.n	8015208 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80151f2:	697b      	ldr	r3, [r7, #20]
 80151f4:	68da      	ldr	r2, [r3, #12]
 80151f6:	69bb      	ldr	r3, [r7, #24]
 80151f8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80151fa:	4b10      	ldr	r3, [pc, #64]	; (801523c <tcp_input+0x4c0>)
 80151fc:	681a      	ldr	r2, [r3, #0]
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8015202:	4a0e      	ldr	r2, [pc, #56]	; (801523c <tcp_input+0x4c0>)
 8015204:	697b      	ldr	r3, [r7, #20]
 8015206:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015208:	6978      	ldr	r0, [r7, #20]
 801520a:	f000 fa03 	bl	8015614 <tcp_listen_input>
      }
      pbuf_free(p);
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f7fd fc84 	bl	8012b1c <pbuf_free>
      return;
 8015214:	e1a8      	b.n	8015568 <tcp_input+0x7ec>
 8015216:	bf00      	nop
 8015218:	200101f0 	.word	0x200101f0
 801521c:	2000ca54 	.word	0x2000ca54
 8015220:	08023518 	.word	0x08023518
 8015224:	08023644 	.word	0x08023644
 8015228:	08023564 	.word	0x08023564
 801522c:	200101d4 	.word	0x200101d4
 8015230:	08023670 	.word	0x08023670
 8015234:	200101d8 	.word	0x200101d8
 8015238:	0802369c 	.word	0x0802369c
 801523c:	200101d0 	.word	0x200101d0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8015240:	69fb      	ldr	r3, [r7, #28]
 8015242:	2b00      	cmp	r3, #0
 8015244:	f000 8158 	beq.w	80154f8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015248:	4b95      	ldr	r3, [pc, #596]	; (80154a0 <tcp_input+0x724>)
 801524a:	2200      	movs	r2, #0
 801524c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	891a      	ldrh	r2, [r3, #8]
 8015252:	4b93      	ldr	r3, [pc, #588]	; (80154a0 <tcp_input+0x724>)
 8015254:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015256:	4a92      	ldr	r2, [pc, #584]	; (80154a0 <tcp_input+0x724>)
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801525c:	4b91      	ldr	r3, [pc, #580]	; (80154a4 <tcp_input+0x728>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	4a8f      	ldr	r2, [pc, #572]	; (80154a0 <tcp_input+0x724>)
 8015262:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015264:	4b90      	ldr	r3, [pc, #576]	; (80154a8 <tcp_input+0x72c>)
 8015266:	2200      	movs	r2, #0
 8015268:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801526a:	4b90      	ldr	r3, [pc, #576]	; (80154ac <tcp_input+0x730>)
 801526c:	2200      	movs	r2, #0
 801526e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015270:	4b8f      	ldr	r3, [pc, #572]	; (80154b0 <tcp_input+0x734>)
 8015272:	2200      	movs	r2, #0
 8015274:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015276:	4b8f      	ldr	r3, [pc, #572]	; (80154b4 <tcp_input+0x738>)
 8015278:	781b      	ldrb	r3, [r3, #0]
 801527a:	f003 0308 	and.w	r3, r3, #8
 801527e:	2b00      	cmp	r3, #0
 8015280:	d006      	beq.n	8015290 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	7b5b      	ldrb	r3, [r3, #13]
 8015286:	f043 0301 	orr.w	r3, r3, #1
 801528a:	b2da      	uxtb	r2, r3
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015290:	69fb      	ldr	r3, [r7, #28]
 8015292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015294:	2b00      	cmp	r3, #0
 8015296:	d017      	beq.n	80152c8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015298:	69f8      	ldr	r0, [r7, #28]
 801529a:	f7ff f85b 	bl	8014354 <tcp_process_refused_data>
 801529e:	4603      	mov	r3, r0
 80152a0:	f113 0f0d 	cmn.w	r3, #13
 80152a4:	d007      	beq.n	80152b6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80152a6:	69fb      	ldr	r3, [r7, #28]
 80152a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d00c      	beq.n	80152c8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80152ae:	4b82      	ldr	r3, [pc, #520]	; (80154b8 <tcp_input+0x73c>)
 80152b0:	881b      	ldrh	r3, [r3, #0]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d008      	beq.n	80152c8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80152b6:	69fb      	ldr	r3, [r7, #28]
 80152b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f040 80e3 	bne.w	8015486 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80152c0:	69f8      	ldr	r0, [r7, #28]
 80152c2:	f003 fe05 	bl	8018ed0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80152c6:	e0de      	b.n	8015486 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80152c8:	4a7c      	ldr	r2, [pc, #496]	; (80154bc <tcp_input+0x740>)
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80152ce:	69f8      	ldr	r0, [r7, #28]
 80152d0:	f000 fb18 	bl	8015904 <tcp_process>
 80152d4:	4603      	mov	r3, r0
 80152d6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80152d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80152dc:	f113 0f0d 	cmn.w	r3, #13
 80152e0:	f000 80d3 	beq.w	801548a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80152e4:	4b71      	ldr	r3, [pc, #452]	; (80154ac <tcp_input+0x730>)
 80152e6:	781b      	ldrb	r3, [r3, #0]
 80152e8:	f003 0308 	and.w	r3, r3, #8
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d015      	beq.n	801531c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d008      	beq.n	801530c <tcp_input+0x590>
 80152fa:	69fb      	ldr	r3, [r7, #28]
 80152fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015300:	69fa      	ldr	r2, [r7, #28]
 8015302:	6912      	ldr	r2, [r2, #16]
 8015304:	f06f 010d 	mvn.w	r1, #13
 8015308:	4610      	mov	r0, r2
 801530a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801530c:	69f9      	ldr	r1, [r7, #28]
 801530e:	486c      	ldr	r0, [pc, #432]	; (80154c0 <tcp_input+0x744>)
 8015310:	f7ff fbbc 	bl	8014a8c <tcp_pcb_remove>
        tcp_free(pcb);
 8015314:	69f8      	ldr	r0, [r7, #28]
 8015316:	f7fd febd 	bl	8013094 <tcp_free>
 801531a:	e0da      	b.n	80154d2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801531c:	2300      	movs	r3, #0
 801531e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015320:	4b63      	ldr	r3, [pc, #396]	; (80154b0 <tcp_input+0x734>)
 8015322:	881b      	ldrh	r3, [r3, #0]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d01d      	beq.n	8015364 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015328:	4b61      	ldr	r3, [pc, #388]	; (80154b0 <tcp_input+0x734>)
 801532a:	881b      	ldrh	r3, [r3, #0]
 801532c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801532e:	69fb      	ldr	r3, [r7, #28]
 8015330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015334:	2b00      	cmp	r3, #0
 8015336:	d00a      	beq.n	801534e <tcp_input+0x5d2>
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801533e:	69fa      	ldr	r2, [r7, #28]
 8015340:	6910      	ldr	r0, [r2, #16]
 8015342:	89fa      	ldrh	r2, [r7, #14]
 8015344:	69f9      	ldr	r1, [r7, #28]
 8015346:	4798      	blx	r3
 8015348:	4603      	mov	r3, r0
 801534a:	74fb      	strb	r3, [r7, #19]
 801534c:	e001      	b.n	8015352 <tcp_input+0x5d6>
 801534e:	2300      	movs	r3, #0
 8015350:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015352:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015356:	f113 0f0d 	cmn.w	r3, #13
 801535a:	f000 8098 	beq.w	801548e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801535e:	4b54      	ldr	r3, [pc, #336]	; (80154b0 <tcp_input+0x734>)
 8015360:	2200      	movs	r2, #0
 8015362:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015364:	69f8      	ldr	r0, [r7, #28]
 8015366:	f000 f915 	bl	8015594 <tcp_input_delayed_close>
 801536a:	4603      	mov	r3, r0
 801536c:	2b00      	cmp	r3, #0
 801536e:	f040 8090 	bne.w	8015492 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015372:	4b4d      	ldr	r3, [pc, #308]	; (80154a8 <tcp_input+0x72c>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d041      	beq.n	80153fe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801537e:	2b00      	cmp	r3, #0
 8015380:	d006      	beq.n	8015390 <tcp_input+0x614>
 8015382:	4b50      	ldr	r3, [pc, #320]	; (80154c4 <tcp_input+0x748>)
 8015384:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015388:	494f      	ldr	r1, [pc, #316]	; (80154c8 <tcp_input+0x74c>)
 801538a:	4850      	ldr	r0, [pc, #320]	; (80154cc <tcp_input+0x750>)
 801538c:	f00a fa9a 	bl	801f8c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015390:	69fb      	ldr	r3, [r7, #28]
 8015392:	8b5b      	ldrh	r3, [r3, #26]
 8015394:	f003 0310 	and.w	r3, r3, #16
 8015398:	2b00      	cmp	r3, #0
 801539a:	d008      	beq.n	80153ae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801539c:	4b42      	ldr	r3, [pc, #264]	; (80154a8 <tcp_input+0x72c>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7fd fbbb 	bl	8012b1c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80153a6:	69f8      	ldr	r0, [r7, #28]
 80153a8:	f7fe f9b8 	bl	801371c <tcp_abort>
            goto aborted;
 80153ac:	e091      	b.n	80154d2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d00c      	beq.n	80153d2 <tcp_input+0x656>
 80153b8:	69fb      	ldr	r3, [r7, #28]
 80153ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	6918      	ldr	r0, [r3, #16]
 80153c2:	4b39      	ldr	r3, [pc, #228]	; (80154a8 <tcp_input+0x72c>)
 80153c4:	681a      	ldr	r2, [r3, #0]
 80153c6:	2300      	movs	r3, #0
 80153c8:	69f9      	ldr	r1, [r7, #28]
 80153ca:	47a0      	blx	r4
 80153cc:	4603      	mov	r3, r0
 80153ce:	74fb      	strb	r3, [r7, #19]
 80153d0:	e008      	b.n	80153e4 <tcp_input+0x668>
 80153d2:	4b35      	ldr	r3, [pc, #212]	; (80154a8 <tcp_input+0x72c>)
 80153d4:	681a      	ldr	r2, [r3, #0]
 80153d6:	2300      	movs	r3, #0
 80153d8:	69f9      	ldr	r1, [r7, #28]
 80153da:	2000      	movs	r0, #0
 80153dc:	f7ff f890 	bl	8014500 <tcp_recv_null>
 80153e0:	4603      	mov	r3, r0
 80153e2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80153e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80153e8:	f113 0f0d 	cmn.w	r3, #13
 80153ec:	d053      	beq.n	8015496 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80153ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d003      	beq.n	80153fe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80153f6:	4b2c      	ldr	r3, [pc, #176]	; (80154a8 <tcp_input+0x72c>)
 80153f8:	681a      	ldr	r2, [r3, #0]
 80153fa:	69fb      	ldr	r3, [r7, #28]
 80153fc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80153fe:	4b2b      	ldr	r3, [pc, #172]	; (80154ac <tcp_input+0x730>)
 8015400:	781b      	ldrb	r3, [r3, #0]
 8015402:	f003 0320 	and.w	r3, r3, #32
 8015406:	2b00      	cmp	r3, #0
 8015408:	d030      	beq.n	801546c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801540a:	69fb      	ldr	r3, [r7, #28]
 801540c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801540e:	2b00      	cmp	r3, #0
 8015410:	d009      	beq.n	8015426 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015412:	69fb      	ldr	r3, [r7, #28]
 8015414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015416:	7b5a      	ldrb	r2, [r3, #13]
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801541c:	f042 0220 	orr.w	r2, r2, #32
 8015420:	b2d2      	uxtb	r2, r2
 8015422:	735a      	strb	r2, [r3, #13]
 8015424:	e022      	b.n	801546c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801542a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801542e:	d005      	beq.n	801543c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015434:	3301      	adds	r3, #1
 8015436:	b29a      	uxth	r2, r3
 8015438:	69fb      	ldr	r3, [r7, #28]
 801543a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801543c:	69fb      	ldr	r3, [r7, #28]
 801543e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015442:	2b00      	cmp	r3, #0
 8015444:	d00b      	beq.n	801545e <tcp_input+0x6e2>
 8015446:	69fb      	ldr	r3, [r7, #28]
 8015448:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	6918      	ldr	r0, [r3, #16]
 8015450:	2300      	movs	r3, #0
 8015452:	2200      	movs	r2, #0
 8015454:	69f9      	ldr	r1, [r7, #28]
 8015456:	47a0      	blx	r4
 8015458:	4603      	mov	r3, r0
 801545a:	74fb      	strb	r3, [r7, #19]
 801545c:	e001      	b.n	8015462 <tcp_input+0x6e6>
 801545e:	2300      	movs	r3, #0
 8015460:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015462:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015466:	f113 0f0d 	cmn.w	r3, #13
 801546a:	d016      	beq.n	801549a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801546c:	4b13      	ldr	r3, [pc, #76]	; (80154bc <tcp_input+0x740>)
 801546e:	2200      	movs	r2, #0
 8015470:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015472:	69f8      	ldr	r0, [r7, #28]
 8015474:	f000 f88e 	bl	8015594 <tcp_input_delayed_close>
 8015478:	4603      	mov	r3, r0
 801547a:	2b00      	cmp	r3, #0
 801547c:	d128      	bne.n	80154d0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801547e:	69f8      	ldr	r0, [r7, #28]
 8015480:	f002 ff20 	bl	80182c4 <tcp_output>
 8015484:	e025      	b.n	80154d2 <tcp_input+0x756>
        goto aborted;
 8015486:	bf00      	nop
 8015488:	e023      	b.n	80154d2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801548a:	bf00      	nop
 801548c:	e021      	b.n	80154d2 <tcp_input+0x756>
              goto aborted;
 801548e:	bf00      	nop
 8015490:	e01f      	b.n	80154d2 <tcp_input+0x756>
          goto aborted;
 8015492:	bf00      	nop
 8015494:	e01d      	b.n	80154d2 <tcp_input+0x756>
            goto aborted;
 8015496:	bf00      	nop
 8015498:	e01b      	b.n	80154d2 <tcp_input+0x756>
              goto aborted;
 801549a:	bf00      	nop
 801549c:	e019      	b.n	80154d2 <tcp_input+0x756>
 801549e:	bf00      	nop
 80154a0:	200101e0 	.word	0x200101e0
 80154a4:	200101f0 	.word	0x200101f0
 80154a8:	20010210 	.word	0x20010210
 80154ac:	2001020d 	.word	0x2001020d
 80154b0:	20010208 	.word	0x20010208
 80154b4:	2001020c 	.word	0x2001020c
 80154b8:	2001020a 	.word	0x2001020a
 80154bc:	20010214 	.word	0x20010214
 80154c0:	200101d4 	.word	0x200101d4
 80154c4:	08023518 	.word	0x08023518
 80154c8:	080236cc 	.word	0x080236cc
 80154cc:	08023564 	.word	0x08023564
          goto aborted;
 80154d0:	bf00      	nop
    tcp_input_pcb = NULL;
 80154d2:	4b27      	ldr	r3, [pc, #156]	; (8015570 <tcp_input+0x7f4>)
 80154d4:	2200      	movs	r2, #0
 80154d6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80154d8:	4b26      	ldr	r3, [pc, #152]	; (8015574 <tcp_input+0x7f8>)
 80154da:	2200      	movs	r2, #0
 80154dc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80154de:	4b26      	ldr	r3, [pc, #152]	; (8015578 <tcp_input+0x7fc>)
 80154e0:	685b      	ldr	r3, [r3, #4]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d03f      	beq.n	8015566 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80154e6:	4b24      	ldr	r3, [pc, #144]	; (8015578 <tcp_input+0x7fc>)
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7fd fb16 	bl	8012b1c <pbuf_free>
      inseg.p = NULL;
 80154f0:	4b21      	ldr	r3, [pc, #132]	; (8015578 <tcp_input+0x7fc>)
 80154f2:	2200      	movs	r2, #0
 80154f4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80154f6:	e036      	b.n	8015566 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80154f8:	4b20      	ldr	r3, [pc, #128]	; (801557c <tcp_input+0x800>)
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	899b      	ldrh	r3, [r3, #12]
 80154fe:	b29b      	uxth	r3, r3
 8015500:	4618      	mov	r0, r3
 8015502:	f7fb fed5 	bl	80112b0 <lwip_htons>
 8015506:	4603      	mov	r3, r0
 8015508:	b2db      	uxtb	r3, r3
 801550a:	f003 0304 	and.w	r3, r3, #4
 801550e:	2b00      	cmp	r3, #0
 8015510:	d118      	bne.n	8015544 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015512:	4b1b      	ldr	r3, [pc, #108]	; (8015580 <tcp_input+0x804>)
 8015514:	6819      	ldr	r1, [r3, #0]
 8015516:	4b1b      	ldr	r3, [pc, #108]	; (8015584 <tcp_input+0x808>)
 8015518:	881b      	ldrh	r3, [r3, #0]
 801551a:	461a      	mov	r2, r3
 801551c:	4b1a      	ldr	r3, [pc, #104]	; (8015588 <tcp_input+0x80c>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015522:	4b16      	ldr	r3, [pc, #88]	; (801557c <tcp_input+0x800>)
 8015524:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015526:	885b      	ldrh	r3, [r3, #2]
 8015528:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801552a:	4a14      	ldr	r2, [pc, #80]	; (801557c <tcp_input+0x800>)
 801552c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801552e:	8812      	ldrh	r2, [r2, #0]
 8015530:	b292      	uxth	r2, r2
 8015532:	9202      	str	r2, [sp, #8]
 8015534:	9301      	str	r3, [sp, #4]
 8015536:	4b15      	ldr	r3, [pc, #84]	; (801558c <tcp_input+0x810>)
 8015538:	9300      	str	r3, [sp, #0]
 801553a:	4b15      	ldr	r3, [pc, #84]	; (8015590 <tcp_input+0x814>)
 801553c:	4602      	mov	r2, r0
 801553e:	2000      	movs	r0, #0
 8015540:	f003 fc74 	bl	8018e2c <tcp_rst>
    pbuf_free(p);
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f7fd fae9 	bl	8012b1c <pbuf_free>
  return;
 801554a:	e00c      	b.n	8015566 <tcp_input+0x7ea>
    goto dropped;
 801554c:	bf00      	nop
 801554e:	e006      	b.n	801555e <tcp_input+0x7e2>
    goto dropped;
 8015550:	bf00      	nop
 8015552:	e004      	b.n	801555e <tcp_input+0x7e2>
    goto dropped;
 8015554:	bf00      	nop
 8015556:	e002      	b.n	801555e <tcp_input+0x7e2>
      goto dropped;
 8015558:	bf00      	nop
 801555a:	e000      	b.n	801555e <tcp_input+0x7e2>
      goto dropped;
 801555c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f7fd fadc 	bl	8012b1c <pbuf_free>
 8015564:	e000      	b.n	8015568 <tcp_input+0x7ec>
  return;
 8015566:	bf00      	nop
}
 8015568:	3724      	adds	r7, #36	; 0x24
 801556a:	46bd      	mov	sp, r7
 801556c:	bd90      	pop	{r4, r7, pc}
 801556e:	bf00      	nop
 8015570:	20010214 	.word	0x20010214
 8015574:	20010210 	.word	0x20010210
 8015578:	200101e0 	.word	0x200101e0
 801557c:	200101f0 	.word	0x200101f0
 8015580:	20010204 	.word	0x20010204
 8015584:	2001020a 	.word	0x2001020a
 8015588:	20010200 	.word	0x20010200
 801558c:	2000ca64 	.word	0x2000ca64
 8015590:	2000ca68 	.word	0x2000ca68

08015594 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d106      	bne.n	80155b0 <tcp_input_delayed_close+0x1c>
 80155a2:	4b17      	ldr	r3, [pc, #92]	; (8015600 <tcp_input_delayed_close+0x6c>)
 80155a4:	f240 225a 	movw	r2, #602	; 0x25a
 80155a8:	4916      	ldr	r1, [pc, #88]	; (8015604 <tcp_input_delayed_close+0x70>)
 80155aa:	4817      	ldr	r0, [pc, #92]	; (8015608 <tcp_input_delayed_close+0x74>)
 80155ac:	f00a f98a 	bl	801f8c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80155b0:	4b16      	ldr	r3, [pc, #88]	; (801560c <tcp_input_delayed_close+0x78>)
 80155b2:	781b      	ldrb	r3, [r3, #0]
 80155b4:	f003 0310 	and.w	r3, r3, #16
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d01c      	beq.n	80155f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	8b5b      	ldrh	r3, [r3, #26]
 80155c0:	f003 0310 	and.w	r3, r3, #16
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d10d      	bne.n	80155e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d008      	beq.n	80155e4 <tcp_input_delayed_close+0x50>
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80155d8:	687a      	ldr	r2, [r7, #4]
 80155da:	6912      	ldr	r2, [r2, #16]
 80155dc:	f06f 010e 	mvn.w	r1, #14
 80155e0:	4610      	mov	r0, r2
 80155e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80155e4:	6879      	ldr	r1, [r7, #4]
 80155e6:	480a      	ldr	r0, [pc, #40]	; (8015610 <tcp_input_delayed_close+0x7c>)
 80155e8:	f7ff fa50 	bl	8014a8c <tcp_pcb_remove>
    tcp_free(pcb);
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f7fd fd51 	bl	8013094 <tcp_free>
    return 1;
 80155f2:	2301      	movs	r3, #1
 80155f4:	e000      	b.n	80155f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80155f6:	2300      	movs	r3, #0
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3708      	adds	r7, #8
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}
 8015600:	08023518 	.word	0x08023518
 8015604:	080236e8 	.word	0x080236e8
 8015608:	08023564 	.word	0x08023564
 801560c:	2001020d 	.word	0x2001020d
 8015610:	200101d4 	.word	0x200101d4

08015614 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015614:	b590      	push	{r4, r7, lr}
 8015616:	b08b      	sub	sp, #44	; 0x2c
 8015618:	af04      	add	r7, sp, #16
 801561a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801561c:	4b6f      	ldr	r3, [pc, #444]	; (80157dc <tcp_listen_input+0x1c8>)
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	f003 0304 	and.w	r3, r3, #4
 8015624:	2b00      	cmp	r3, #0
 8015626:	f040 80d2 	bne.w	80157ce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d106      	bne.n	801563e <tcp_listen_input+0x2a>
 8015630:	4b6b      	ldr	r3, [pc, #428]	; (80157e0 <tcp_listen_input+0x1cc>)
 8015632:	f240 2281 	movw	r2, #641	; 0x281
 8015636:	496b      	ldr	r1, [pc, #428]	; (80157e4 <tcp_listen_input+0x1d0>)
 8015638:	486b      	ldr	r0, [pc, #428]	; (80157e8 <tcp_listen_input+0x1d4>)
 801563a:	f00a f943 	bl	801f8c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801563e:	4b67      	ldr	r3, [pc, #412]	; (80157dc <tcp_listen_input+0x1c8>)
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	f003 0310 	and.w	r3, r3, #16
 8015646:	2b00      	cmp	r3, #0
 8015648:	d019      	beq.n	801567e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801564a:	4b68      	ldr	r3, [pc, #416]	; (80157ec <tcp_listen_input+0x1d8>)
 801564c:	6819      	ldr	r1, [r3, #0]
 801564e:	4b68      	ldr	r3, [pc, #416]	; (80157f0 <tcp_listen_input+0x1dc>)
 8015650:	881b      	ldrh	r3, [r3, #0]
 8015652:	461a      	mov	r2, r3
 8015654:	4b67      	ldr	r3, [pc, #412]	; (80157f4 <tcp_listen_input+0x1e0>)
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801565a:	4b67      	ldr	r3, [pc, #412]	; (80157f8 <tcp_listen_input+0x1e4>)
 801565c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801565e:	885b      	ldrh	r3, [r3, #2]
 8015660:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015662:	4a65      	ldr	r2, [pc, #404]	; (80157f8 <tcp_listen_input+0x1e4>)
 8015664:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015666:	8812      	ldrh	r2, [r2, #0]
 8015668:	b292      	uxth	r2, r2
 801566a:	9202      	str	r2, [sp, #8]
 801566c:	9301      	str	r3, [sp, #4]
 801566e:	4b63      	ldr	r3, [pc, #396]	; (80157fc <tcp_listen_input+0x1e8>)
 8015670:	9300      	str	r3, [sp, #0]
 8015672:	4b63      	ldr	r3, [pc, #396]	; (8015800 <tcp_listen_input+0x1ec>)
 8015674:	4602      	mov	r2, r0
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f003 fbd8 	bl	8018e2c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801567c:	e0a9      	b.n	80157d2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801567e:	4b57      	ldr	r3, [pc, #348]	; (80157dc <tcp_listen_input+0x1c8>)
 8015680:	781b      	ldrb	r3, [r3, #0]
 8015682:	f003 0302 	and.w	r3, r3, #2
 8015686:	2b00      	cmp	r3, #0
 8015688:	f000 80a3 	beq.w	80157d2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	7d5b      	ldrb	r3, [r3, #21]
 8015690:	4618      	mov	r0, r3
 8015692:	f7ff f859 	bl	8014748 <tcp_alloc>
 8015696:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015698:	697b      	ldr	r3, [r7, #20]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d111      	bne.n	80156c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	699b      	ldr	r3, [r3, #24]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d00a      	beq.n	80156bc <tcp_listen_input+0xa8>
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	699b      	ldr	r3, [r3, #24]
 80156aa:	687a      	ldr	r2, [r7, #4]
 80156ac:	6910      	ldr	r0, [r2, #16]
 80156ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80156b2:	2100      	movs	r1, #0
 80156b4:	4798      	blx	r3
 80156b6:	4603      	mov	r3, r0
 80156b8:	73bb      	strb	r3, [r7, #14]
      return;
 80156ba:	e08b      	b.n	80157d4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80156bc:	23f0      	movs	r3, #240	; 0xf0
 80156be:	73bb      	strb	r3, [r7, #14]
      return;
 80156c0:	e088      	b.n	80157d4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80156c2:	4b50      	ldr	r3, [pc, #320]	; (8015804 <tcp_listen_input+0x1f0>)
 80156c4:	695a      	ldr	r2, [r3, #20]
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80156ca:	4b4e      	ldr	r3, [pc, #312]	; (8015804 <tcp_listen_input+0x1f0>)
 80156cc:	691a      	ldr	r2, [r3, #16]
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	8ada      	ldrh	r2, [r3, #22]
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80156da:	4b47      	ldr	r3, [pc, #284]	; (80157f8 <tcp_listen_input+0x1e4>)
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	881b      	ldrh	r3, [r3, #0]
 80156e0:	b29a      	uxth	r2, r3
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	2203      	movs	r2, #3
 80156ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80156ec:	4b41      	ldr	r3, [pc, #260]	; (80157f4 <tcp_listen_input+0x1e0>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	1c5a      	adds	r2, r3, #1
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80156fe:	6978      	ldr	r0, [r7, #20]
 8015700:	f7ff fa58 	bl	8014bb4 <tcp_next_iss>
 8015704:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	693a      	ldr	r2, [r7, #16]
 801570a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	693a      	ldr	r2, [r7, #16]
 8015710:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	693a      	ldr	r2, [r7, #16]
 8015716:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	693a      	ldr	r2, [r7, #16]
 801571c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801571e:	4b35      	ldr	r3, [pc, #212]	; (80157f4 <tcp_listen_input+0x1e0>)
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	1e5a      	subs	r2, r3, #1
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	691a      	ldr	r2, [r3, #16]
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	7a5b      	ldrb	r3, [r3, #9]
 801573a:	f003 030c 	and.w	r3, r3, #12
 801573e:	b2da      	uxtb	r2, r3
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	7a1a      	ldrb	r2, [r3, #8]
 8015748:	697b      	ldr	r3, [r7, #20]
 801574a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801574c:	4b2e      	ldr	r3, [pc, #184]	; (8015808 <tcp_listen_input+0x1f4>)
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	60da      	str	r2, [r3, #12]
 8015754:	4a2c      	ldr	r2, [pc, #176]	; (8015808 <tcp_listen_input+0x1f4>)
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	6013      	str	r3, [r2, #0]
 801575a:	f003 fd29 	bl	80191b0 <tcp_timer_needed>
 801575e:	4b2b      	ldr	r3, [pc, #172]	; (801580c <tcp_listen_input+0x1f8>)
 8015760:	2201      	movs	r2, #1
 8015762:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015764:	6978      	ldr	r0, [r7, #20]
 8015766:	f001 fd8f 	bl	8017288 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801576a:	4b23      	ldr	r3, [pc, #140]	; (80157f8 <tcp_listen_input+0x1e4>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	89db      	ldrh	r3, [r3, #14]
 8015770:	b29a      	uxth	r2, r3
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015778:	697b      	ldr	r3, [r7, #20]
 801577a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	3304      	adds	r3, #4
 801578c:	4618      	mov	r0, r3
 801578e:	f007 fadb 	bl	801cd48 <ip4_route>
 8015792:	4601      	mov	r1, r0
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	3304      	adds	r3, #4
 8015798:	461a      	mov	r2, r3
 801579a:	4620      	mov	r0, r4
 801579c:	f7ff fa30 	bl	8014c00 <tcp_eff_send_mss_netif>
 80157a0:	4603      	mov	r3, r0
 80157a2:	461a      	mov	r2, r3
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80157a8:	2112      	movs	r1, #18
 80157aa:	6978      	ldr	r0, [r7, #20]
 80157ac:	f002 fc9c 	bl	80180e8 <tcp_enqueue_flags>
 80157b0:	4603      	mov	r3, r0
 80157b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80157b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d004      	beq.n	80157c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80157bc:	2100      	movs	r1, #0
 80157be:	6978      	ldr	r0, [r7, #20]
 80157c0:	f7fd feee 	bl	80135a0 <tcp_abandon>
      return;
 80157c4:	e006      	b.n	80157d4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80157c6:	6978      	ldr	r0, [r7, #20]
 80157c8:	f002 fd7c 	bl	80182c4 <tcp_output>
  return;
 80157cc:	e001      	b.n	80157d2 <tcp_listen_input+0x1be>
    return;
 80157ce:	bf00      	nop
 80157d0:	e000      	b.n	80157d4 <tcp_listen_input+0x1c0>
  return;
 80157d2:	bf00      	nop
}
 80157d4:	371c      	adds	r7, #28
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd90      	pop	{r4, r7, pc}
 80157da:	bf00      	nop
 80157dc:	2001020c 	.word	0x2001020c
 80157e0:	08023518 	.word	0x08023518
 80157e4:	08023710 	.word	0x08023710
 80157e8:	08023564 	.word	0x08023564
 80157ec:	20010204 	.word	0x20010204
 80157f0:	2001020a 	.word	0x2001020a
 80157f4:	20010200 	.word	0x20010200
 80157f8:	200101f0 	.word	0x200101f0
 80157fc:	2000ca64 	.word	0x2000ca64
 8015800:	2000ca68 	.word	0x2000ca68
 8015804:	2000ca54 	.word	0x2000ca54
 8015808:	200101d4 	.word	0x200101d4
 801580c:	200101dc 	.word	0x200101dc

08015810 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b086      	sub	sp, #24
 8015814:	af04      	add	r7, sp, #16
 8015816:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015818:	4b2f      	ldr	r3, [pc, #188]	; (80158d8 <tcp_timewait_input+0xc8>)
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	f003 0304 	and.w	r3, r3, #4
 8015820:	2b00      	cmp	r3, #0
 8015822:	d153      	bne.n	80158cc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d106      	bne.n	8015838 <tcp_timewait_input+0x28>
 801582a:	4b2c      	ldr	r3, [pc, #176]	; (80158dc <tcp_timewait_input+0xcc>)
 801582c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015830:	492b      	ldr	r1, [pc, #172]	; (80158e0 <tcp_timewait_input+0xd0>)
 8015832:	482c      	ldr	r0, [pc, #176]	; (80158e4 <tcp_timewait_input+0xd4>)
 8015834:	f00a f846 	bl	801f8c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015838:	4b27      	ldr	r3, [pc, #156]	; (80158d8 <tcp_timewait_input+0xc8>)
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	f003 0302 	and.w	r3, r3, #2
 8015840:	2b00      	cmp	r3, #0
 8015842:	d02a      	beq.n	801589a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015844:	4b28      	ldr	r3, [pc, #160]	; (80158e8 <tcp_timewait_input+0xd8>)
 8015846:	681a      	ldr	r2, [r3, #0]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801584c:	1ad3      	subs	r3, r2, r3
 801584e:	2b00      	cmp	r3, #0
 8015850:	db2d      	blt.n	80158ae <tcp_timewait_input+0x9e>
 8015852:	4b25      	ldr	r3, [pc, #148]	; (80158e8 <tcp_timewait_input+0xd8>)
 8015854:	681a      	ldr	r2, [r3, #0]
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801585a:	6879      	ldr	r1, [r7, #4]
 801585c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801585e:	440b      	add	r3, r1
 8015860:	1ad3      	subs	r3, r2, r3
 8015862:	2b00      	cmp	r3, #0
 8015864:	dc23      	bgt.n	80158ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015866:	4b21      	ldr	r3, [pc, #132]	; (80158ec <tcp_timewait_input+0xdc>)
 8015868:	6819      	ldr	r1, [r3, #0]
 801586a:	4b21      	ldr	r3, [pc, #132]	; (80158f0 <tcp_timewait_input+0xe0>)
 801586c:	881b      	ldrh	r3, [r3, #0]
 801586e:	461a      	mov	r2, r3
 8015870:	4b1d      	ldr	r3, [pc, #116]	; (80158e8 <tcp_timewait_input+0xd8>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015876:	4b1f      	ldr	r3, [pc, #124]	; (80158f4 <tcp_timewait_input+0xe4>)
 8015878:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801587a:	885b      	ldrh	r3, [r3, #2]
 801587c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801587e:	4a1d      	ldr	r2, [pc, #116]	; (80158f4 <tcp_timewait_input+0xe4>)
 8015880:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015882:	8812      	ldrh	r2, [r2, #0]
 8015884:	b292      	uxth	r2, r2
 8015886:	9202      	str	r2, [sp, #8]
 8015888:	9301      	str	r3, [sp, #4]
 801588a:	4b1b      	ldr	r3, [pc, #108]	; (80158f8 <tcp_timewait_input+0xe8>)
 801588c:	9300      	str	r3, [sp, #0]
 801588e:	4b1b      	ldr	r3, [pc, #108]	; (80158fc <tcp_timewait_input+0xec>)
 8015890:	4602      	mov	r2, r0
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f003 faca 	bl	8018e2c <tcp_rst>
      return;
 8015898:	e01b      	b.n	80158d2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801589a:	4b0f      	ldr	r3, [pc, #60]	; (80158d8 <tcp_timewait_input+0xc8>)
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	f003 0301 	and.w	r3, r3, #1
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d003      	beq.n	80158ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80158a6:	4b16      	ldr	r3, [pc, #88]	; (8015900 <tcp_timewait_input+0xf0>)
 80158a8:	681a      	ldr	r2, [r3, #0]
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80158ae:	4b10      	ldr	r3, [pc, #64]	; (80158f0 <tcp_timewait_input+0xe0>)
 80158b0:	881b      	ldrh	r3, [r3, #0]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d00c      	beq.n	80158d0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	8b5b      	ldrh	r3, [r3, #26]
 80158ba:	f043 0302 	orr.w	r3, r3, #2
 80158be:	b29a      	uxth	r2, r3
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f002 fcfd 	bl	80182c4 <tcp_output>
  }
  return;
 80158ca:	e001      	b.n	80158d0 <tcp_timewait_input+0xc0>
    return;
 80158cc:	bf00      	nop
 80158ce:	e000      	b.n	80158d2 <tcp_timewait_input+0xc2>
  return;
 80158d0:	bf00      	nop
}
 80158d2:	3708      	adds	r7, #8
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	2001020c 	.word	0x2001020c
 80158dc:	08023518 	.word	0x08023518
 80158e0:	08023730 	.word	0x08023730
 80158e4:	08023564 	.word	0x08023564
 80158e8:	20010200 	.word	0x20010200
 80158ec:	20010204 	.word	0x20010204
 80158f0:	2001020a 	.word	0x2001020a
 80158f4:	200101f0 	.word	0x200101f0
 80158f8:	2000ca64 	.word	0x2000ca64
 80158fc:	2000ca68 	.word	0x2000ca68
 8015900:	200101c8 	.word	0x200101c8

08015904 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015904:	b590      	push	{r4, r7, lr}
 8015906:	b08d      	sub	sp, #52	; 0x34
 8015908:	af04      	add	r7, sp, #16
 801590a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801590c:	2300      	movs	r3, #0
 801590e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015910:	2300      	movs	r3, #0
 8015912:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d106      	bne.n	8015928 <tcp_process+0x24>
 801591a:	4b9d      	ldr	r3, [pc, #628]	; (8015b90 <tcp_process+0x28c>)
 801591c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015920:	499c      	ldr	r1, [pc, #624]	; (8015b94 <tcp_process+0x290>)
 8015922:	489d      	ldr	r0, [pc, #628]	; (8015b98 <tcp_process+0x294>)
 8015924:	f009 ffce 	bl	801f8c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015928:	4b9c      	ldr	r3, [pc, #624]	; (8015b9c <tcp_process+0x298>)
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	f003 0304 	and.w	r3, r3, #4
 8015930:	2b00      	cmp	r3, #0
 8015932:	d04e      	beq.n	80159d2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	7d1b      	ldrb	r3, [r3, #20]
 8015938:	2b02      	cmp	r3, #2
 801593a:	d108      	bne.n	801594e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015940:	4b97      	ldr	r3, [pc, #604]	; (8015ba0 <tcp_process+0x29c>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	429a      	cmp	r2, r3
 8015946:	d123      	bne.n	8015990 <tcp_process+0x8c>
        acceptable = 1;
 8015948:	2301      	movs	r3, #1
 801594a:	76fb      	strb	r3, [r7, #27]
 801594c:	e020      	b.n	8015990 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015952:	4b94      	ldr	r3, [pc, #592]	; (8015ba4 <tcp_process+0x2a0>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	429a      	cmp	r2, r3
 8015958:	d102      	bne.n	8015960 <tcp_process+0x5c>
        acceptable = 1;
 801595a:	2301      	movs	r3, #1
 801595c:	76fb      	strb	r3, [r7, #27]
 801595e:	e017      	b.n	8015990 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015960:	4b90      	ldr	r3, [pc, #576]	; (8015ba4 <tcp_process+0x2a0>)
 8015962:	681a      	ldr	r2, [r3, #0]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015968:	1ad3      	subs	r3, r2, r3
 801596a:	2b00      	cmp	r3, #0
 801596c:	db10      	blt.n	8015990 <tcp_process+0x8c>
 801596e:	4b8d      	ldr	r3, [pc, #564]	; (8015ba4 <tcp_process+0x2a0>)
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015976:	6879      	ldr	r1, [r7, #4]
 8015978:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801597a:	440b      	add	r3, r1
 801597c:	1ad3      	subs	r3, r2, r3
 801597e:	2b00      	cmp	r3, #0
 8015980:	dc06      	bgt.n	8015990 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	8b5b      	ldrh	r3, [r3, #26]
 8015986:	f043 0302 	orr.w	r3, r3, #2
 801598a:	b29a      	uxth	r2, r3
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015990:	7efb      	ldrb	r3, [r7, #27]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d01b      	beq.n	80159ce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	7d1b      	ldrb	r3, [r3, #20]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d106      	bne.n	80159ac <tcp_process+0xa8>
 801599e:	4b7c      	ldr	r3, [pc, #496]	; (8015b90 <tcp_process+0x28c>)
 80159a0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80159a4:	4980      	ldr	r1, [pc, #512]	; (8015ba8 <tcp_process+0x2a4>)
 80159a6:	487c      	ldr	r0, [pc, #496]	; (8015b98 <tcp_process+0x294>)
 80159a8:	f009 ff8c 	bl	801f8c4 <iprintf>
      recv_flags |= TF_RESET;
 80159ac:	4b7f      	ldr	r3, [pc, #508]	; (8015bac <tcp_process+0x2a8>)
 80159ae:	781b      	ldrb	r3, [r3, #0]
 80159b0:	f043 0308 	orr.w	r3, r3, #8
 80159b4:	b2da      	uxtb	r2, r3
 80159b6:	4b7d      	ldr	r3, [pc, #500]	; (8015bac <tcp_process+0x2a8>)
 80159b8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	8b5b      	ldrh	r3, [r3, #26]
 80159be:	f023 0301 	bic.w	r3, r3, #1
 80159c2:	b29a      	uxth	r2, r3
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80159c8:	f06f 030d 	mvn.w	r3, #13
 80159cc:	e37a      	b.n	80160c4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80159ce:	2300      	movs	r3, #0
 80159d0:	e378      	b.n	80160c4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80159d2:	4b72      	ldr	r3, [pc, #456]	; (8015b9c <tcp_process+0x298>)
 80159d4:	781b      	ldrb	r3, [r3, #0]
 80159d6:	f003 0302 	and.w	r3, r3, #2
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d010      	beq.n	8015a00 <tcp_process+0xfc>
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	7d1b      	ldrb	r3, [r3, #20]
 80159e2:	2b02      	cmp	r3, #2
 80159e4:	d00c      	beq.n	8015a00 <tcp_process+0xfc>
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	7d1b      	ldrb	r3, [r3, #20]
 80159ea:	2b03      	cmp	r3, #3
 80159ec:	d008      	beq.n	8015a00 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	8b5b      	ldrh	r3, [r3, #26]
 80159f2:	f043 0302 	orr.w	r3, r3, #2
 80159f6:	b29a      	uxth	r2, r3
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80159fc:	2300      	movs	r3, #0
 80159fe:	e361      	b.n	80160c4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	8b5b      	ldrh	r3, [r3, #26]
 8015a04:	f003 0310 	and.w	r3, r3, #16
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d103      	bne.n	8015a14 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015a0c:	4b68      	ldr	r3, [pc, #416]	; (8015bb0 <tcp_process+0x2ac>)
 8015a0e:	681a      	ldr	r2, [r3, #0]
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	2200      	movs	r2, #0
 8015a18:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	2200      	movs	r2, #0
 8015a20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015a24:	6878      	ldr	r0, [r7, #4]
 8015a26:	f001 fc2f 	bl	8017288 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	7d1b      	ldrb	r3, [r3, #20]
 8015a2e:	3b02      	subs	r3, #2
 8015a30:	2b07      	cmp	r3, #7
 8015a32:	f200 8337 	bhi.w	80160a4 <tcp_process+0x7a0>
 8015a36:	a201      	add	r2, pc, #4	; (adr r2, 8015a3c <tcp_process+0x138>)
 8015a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a3c:	08015a5d 	.word	0x08015a5d
 8015a40:	08015c8d 	.word	0x08015c8d
 8015a44:	08015e05 	.word	0x08015e05
 8015a48:	08015e2f 	.word	0x08015e2f
 8015a4c:	08015f53 	.word	0x08015f53
 8015a50:	08015e05 	.word	0x08015e05
 8015a54:	08015fdf 	.word	0x08015fdf
 8015a58:	0801606f 	.word	0x0801606f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015a5c:	4b4f      	ldr	r3, [pc, #316]	; (8015b9c <tcp_process+0x298>)
 8015a5e:	781b      	ldrb	r3, [r3, #0]
 8015a60:	f003 0310 	and.w	r3, r3, #16
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	f000 80e4 	beq.w	8015c32 <tcp_process+0x32e>
 8015a6a:	4b4c      	ldr	r3, [pc, #304]	; (8015b9c <tcp_process+0x298>)
 8015a6c:	781b      	ldrb	r3, [r3, #0]
 8015a6e:	f003 0302 	and.w	r3, r3, #2
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	f000 80dd 	beq.w	8015c32 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a7c:	1c5a      	adds	r2, r3, #1
 8015a7e:	4b48      	ldr	r3, [pc, #288]	; (8015ba0 <tcp_process+0x29c>)
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	429a      	cmp	r2, r3
 8015a84:	f040 80d5 	bne.w	8015c32 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015a88:	4b46      	ldr	r3, [pc, #280]	; (8015ba4 <tcp_process+0x2a0>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	1c5a      	adds	r2, r3, #1
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015a9a:	4b41      	ldr	r3, [pc, #260]	; (8015ba0 <tcp_process+0x29c>)
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015aa2:	4b44      	ldr	r3, [pc, #272]	; (8015bb4 <tcp_process+0x2b0>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	89db      	ldrh	r3, [r3, #14]
 8015aa8:	b29a      	uxth	r2, r3
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015abc:	4b39      	ldr	r3, [pc, #228]	; (8015ba4 <tcp_process+0x2a0>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	1e5a      	subs	r2, r3, #1
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	2204      	movs	r2, #4
 8015aca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	3304      	adds	r3, #4
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f007 f937 	bl	801cd48 <ip4_route>
 8015ada:	4601      	mov	r1, r0
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	3304      	adds	r3, #4
 8015ae0:	461a      	mov	r2, r3
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	f7ff f88c 	bl	8014c00 <tcp_eff_send_mss_netif>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	461a      	mov	r2, r3
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015af4:	009a      	lsls	r2, r3, #2
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015afa:	005b      	lsls	r3, r3, #1
 8015afc:	f241 111c 	movw	r1, #4380	; 0x111c
 8015b00:	428b      	cmp	r3, r1
 8015b02:	bf38      	it	cc
 8015b04:	460b      	movcc	r3, r1
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d204      	bcs.n	8015b14 <tcp_process+0x210>
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	e00d      	b.n	8015b30 <tcp_process+0x22c>
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b18:	005b      	lsls	r3, r3, #1
 8015b1a:	f241 121c 	movw	r2, #4380	; 0x111c
 8015b1e:	4293      	cmp	r3, r2
 8015b20:	d904      	bls.n	8015b2c <tcp_process+0x228>
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b26:	005b      	lsls	r3, r3, #1
 8015b28:	b29b      	uxth	r3, r3
 8015b2a:	e001      	b.n	8015b30 <tcp_process+0x22c>
 8015b2c:	f241 131c 	movw	r3, #4380	; 0x111c
 8015b30:	687a      	ldr	r2, [r7, #4]
 8015b32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d106      	bne.n	8015b4e <tcp_process+0x24a>
 8015b40:	4b13      	ldr	r3, [pc, #76]	; (8015b90 <tcp_process+0x28c>)
 8015b42:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015b46:	491c      	ldr	r1, [pc, #112]	; (8015bb8 <tcp_process+0x2b4>)
 8015b48:	4813      	ldr	r0, [pc, #76]	; (8015b98 <tcp_process+0x294>)
 8015b4a:	f009 febb 	bl	801f8c4 <iprintf>
        --pcb->snd_queuelen;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015b54:	3b01      	subs	r3, #1
 8015b56:	b29a      	uxth	r2, r3
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b62:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015b64:	69fb      	ldr	r3, [r7, #28]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d12a      	bne.n	8015bc0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b6e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015b70:	69fb      	ldr	r3, [r7, #28]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d106      	bne.n	8015b84 <tcp_process+0x280>
 8015b76:	4b06      	ldr	r3, [pc, #24]	; (8015b90 <tcp_process+0x28c>)
 8015b78:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015b7c:	490f      	ldr	r1, [pc, #60]	; (8015bbc <tcp_process+0x2b8>)
 8015b7e:	4806      	ldr	r0, [pc, #24]	; (8015b98 <tcp_process+0x294>)
 8015b80:	f009 fea0 	bl	801f8c4 <iprintf>
          pcb->unsent = rseg->next;
 8015b84:	69fb      	ldr	r3, [r7, #28]
 8015b86:	681a      	ldr	r2, [r3, #0]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	66da      	str	r2, [r3, #108]	; 0x6c
 8015b8c:	e01c      	b.n	8015bc8 <tcp_process+0x2c4>
 8015b8e:	bf00      	nop
 8015b90:	08023518 	.word	0x08023518
 8015b94:	08023750 	.word	0x08023750
 8015b98:	08023564 	.word	0x08023564
 8015b9c:	2001020c 	.word	0x2001020c
 8015ba0:	20010204 	.word	0x20010204
 8015ba4:	20010200 	.word	0x20010200
 8015ba8:	0802376c 	.word	0x0802376c
 8015bac:	2001020d 	.word	0x2001020d
 8015bb0:	200101c8 	.word	0x200101c8
 8015bb4:	200101f0 	.word	0x200101f0
 8015bb8:	0802378c 	.word	0x0802378c
 8015bbc:	080237a4 	.word	0x080237a4
        } else {
          pcb->unacked = rseg->next;
 8015bc0:	69fb      	ldr	r3, [r7, #28]
 8015bc2:	681a      	ldr	r2, [r3, #0]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015bc8:	69f8      	ldr	r0, [r7, #28]
 8015bca:	f7fe fc54 	bl	8014476 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d104      	bne.n	8015be0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bdc:	861a      	strh	r2, [r3, #48]	; 0x30
 8015bde:	e006      	b.n	8015bee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2200      	movs	r2, #0
 8015be4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	2200      	movs	r2, #0
 8015bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d00a      	beq.n	8015c0e <tcp_process+0x30a>
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015bfe:	687a      	ldr	r2, [r7, #4]
 8015c00:	6910      	ldr	r0, [r2, #16]
 8015c02:	2200      	movs	r2, #0
 8015c04:	6879      	ldr	r1, [r7, #4]
 8015c06:	4798      	blx	r3
 8015c08:	4603      	mov	r3, r0
 8015c0a:	76bb      	strb	r3, [r7, #26]
 8015c0c:	e001      	b.n	8015c12 <tcp_process+0x30e>
 8015c0e:	2300      	movs	r3, #0
 8015c10:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015c12:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015c16:	f113 0f0d 	cmn.w	r3, #13
 8015c1a:	d102      	bne.n	8015c22 <tcp_process+0x31e>
          return ERR_ABRT;
 8015c1c:	f06f 030c 	mvn.w	r3, #12
 8015c20:	e250      	b.n	80160c4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	8b5b      	ldrh	r3, [r3, #26]
 8015c26:	f043 0302 	orr.w	r3, r3, #2
 8015c2a:	b29a      	uxth	r2, r3
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015c30:	e23a      	b.n	80160a8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015c32:	4b98      	ldr	r3, [pc, #608]	; (8015e94 <tcp_process+0x590>)
 8015c34:	781b      	ldrb	r3, [r3, #0]
 8015c36:	f003 0310 	and.w	r3, r3, #16
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	f000 8234 	beq.w	80160a8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c40:	4b95      	ldr	r3, [pc, #596]	; (8015e98 <tcp_process+0x594>)
 8015c42:	6819      	ldr	r1, [r3, #0]
 8015c44:	4b95      	ldr	r3, [pc, #596]	; (8015e9c <tcp_process+0x598>)
 8015c46:	881b      	ldrh	r3, [r3, #0]
 8015c48:	461a      	mov	r2, r3
 8015c4a:	4b95      	ldr	r3, [pc, #596]	; (8015ea0 <tcp_process+0x59c>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c50:	4b94      	ldr	r3, [pc, #592]	; (8015ea4 <tcp_process+0x5a0>)
 8015c52:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c54:	885b      	ldrh	r3, [r3, #2]
 8015c56:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c58:	4a92      	ldr	r2, [pc, #584]	; (8015ea4 <tcp_process+0x5a0>)
 8015c5a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c5c:	8812      	ldrh	r2, [r2, #0]
 8015c5e:	b292      	uxth	r2, r2
 8015c60:	9202      	str	r2, [sp, #8]
 8015c62:	9301      	str	r3, [sp, #4]
 8015c64:	4b90      	ldr	r3, [pc, #576]	; (8015ea8 <tcp_process+0x5a4>)
 8015c66:	9300      	str	r3, [sp, #0]
 8015c68:	4b90      	ldr	r3, [pc, #576]	; (8015eac <tcp_process+0x5a8>)
 8015c6a:	4602      	mov	r2, r0
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f003 f8dd 	bl	8018e2c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015c78:	2b05      	cmp	r3, #5
 8015c7a:	f200 8215 	bhi.w	80160a8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2200      	movs	r2, #0
 8015c82:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f002 fea9 	bl	80189dc <tcp_rexmit_rto>
      break;
 8015c8a:	e20d      	b.n	80160a8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015c8c:	4b81      	ldr	r3, [pc, #516]	; (8015e94 <tcp_process+0x590>)
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	f003 0310 	and.w	r3, r3, #16
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	f000 80a1 	beq.w	8015ddc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015c9a:	4b7f      	ldr	r3, [pc, #508]	; (8015e98 <tcp_process+0x594>)
 8015c9c:	681a      	ldr	r2, [r3, #0]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ca2:	1ad3      	subs	r3, r2, r3
 8015ca4:	3b01      	subs	r3, #1
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	db7e      	blt.n	8015da8 <tcp_process+0x4a4>
 8015caa:	4b7b      	ldr	r3, [pc, #492]	; (8015e98 <tcp_process+0x594>)
 8015cac:	681a      	ldr	r2, [r3, #0]
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015cb2:	1ad3      	subs	r3, r2, r3
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	dc77      	bgt.n	8015da8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2204      	movs	r2, #4
 8015cbc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d102      	bne.n	8015ccc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015cc6:	23fa      	movs	r3, #250	; 0xfa
 8015cc8:	76bb      	strb	r3, [r7, #26]
 8015cca:	e01d      	b.n	8015d08 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015cd0:	699b      	ldr	r3, [r3, #24]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d106      	bne.n	8015ce4 <tcp_process+0x3e0>
 8015cd6:	4b76      	ldr	r3, [pc, #472]	; (8015eb0 <tcp_process+0x5ac>)
 8015cd8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015cdc:	4975      	ldr	r1, [pc, #468]	; (8015eb4 <tcp_process+0x5b0>)
 8015cde:	4876      	ldr	r0, [pc, #472]	; (8015eb8 <tcp_process+0x5b4>)
 8015ce0:	f009 fdf0 	bl	801f8c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015ce8:	699b      	ldr	r3, [r3, #24]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d00a      	beq.n	8015d04 <tcp_process+0x400>
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015cf2:	699b      	ldr	r3, [r3, #24]
 8015cf4:	687a      	ldr	r2, [r7, #4]
 8015cf6:	6910      	ldr	r0, [r2, #16]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	6879      	ldr	r1, [r7, #4]
 8015cfc:	4798      	blx	r3
 8015cfe:	4603      	mov	r3, r0
 8015d00:	76bb      	strb	r3, [r7, #26]
 8015d02:	e001      	b.n	8015d08 <tcp_process+0x404>
 8015d04:	23f0      	movs	r3, #240	; 0xf0
 8015d06:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015d08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d00a      	beq.n	8015d26 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015d10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015d14:	f113 0f0d 	cmn.w	r3, #13
 8015d18:	d002      	beq.n	8015d20 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015d1a:	6878      	ldr	r0, [r7, #4]
 8015d1c:	f7fd fcfe 	bl	801371c <tcp_abort>
            }
            return ERR_ABRT;
 8015d20:	f06f 030c 	mvn.w	r3, #12
 8015d24:	e1ce      	b.n	80160c4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f000 fae0 	bl	80162ec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015d2c:	4b63      	ldr	r3, [pc, #396]	; (8015ebc <tcp_process+0x5b8>)
 8015d2e:	881b      	ldrh	r3, [r3, #0]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d005      	beq.n	8015d40 <tcp_process+0x43c>
            recv_acked--;
 8015d34:	4b61      	ldr	r3, [pc, #388]	; (8015ebc <tcp_process+0x5b8>)
 8015d36:	881b      	ldrh	r3, [r3, #0]
 8015d38:	3b01      	subs	r3, #1
 8015d3a:	b29a      	uxth	r2, r3
 8015d3c:	4b5f      	ldr	r3, [pc, #380]	; (8015ebc <tcp_process+0x5b8>)
 8015d3e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d44:	009a      	lsls	r2, r3, #2
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d4a:	005b      	lsls	r3, r3, #1
 8015d4c:	f241 111c 	movw	r1, #4380	; 0x111c
 8015d50:	428b      	cmp	r3, r1
 8015d52:	bf38      	it	cc
 8015d54:	460b      	movcc	r3, r1
 8015d56:	429a      	cmp	r2, r3
 8015d58:	d204      	bcs.n	8015d64 <tcp_process+0x460>
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d5e:	009b      	lsls	r3, r3, #2
 8015d60:	b29b      	uxth	r3, r3
 8015d62:	e00d      	b.n	8015d80 <tcp_process+0x47c>
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d68:	005b      	lsls	r3, r3, #1
 8015d6a:	f241 121c 	movw	r2, #4380	; 0x111c
 8015d6e:	4293      	cmp	r3, r2
 8015d70:	d904      	bls.n	8015d7c <tcp_process+0x478>
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d76:	005b      	lsls	r3, r3, #1
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	e001      	b.n	8015d80 <tcp_process+0x47c>
 8015d7c:	f241 131c 	movw	r3, #4380	; 0x111c
 8015d80:	687a      	ldr	r2, [r7, #4]
 8015d82:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015d86:	4b4e      	ldr	r3, [pc, #312]	; (8015ec0 <tcp_process+0x5bc>)
 8015d88:	781b      	ldrb	r3, [r3, #0]
 8015d8a:	f003 0320 	and.w	r3, r3, #32
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d037      	beq.n	8015e02 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	8b5b      	ldrh	r3, [r3, #26]
 8015d96:	f043 0302 	orr.w	r3, r3, #2
 8015d9a:	b29a      	uxth	r2, r3
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	2207      	movs	r2, #7
 8015da4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015da6:	e02c      	b.n	8015e02 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015da8:	4b3b      	ldr	r3, [pc, #236]	; (8015e98 <tcp_process+0x594>)
 8015daa:	6819      	ldr	r1, [r3, #0]
 8015dac:	4b3b      	ldr	r3, [pc, #236]	; (8015e9c <tcp_process+0x598>)
 8015dae:	881b      	ldrh	r3, [r3, #0]
 8015db0:	461a      	mov	r2, r3
 8015db2:	4b3b      	ldr	r3, [pc, #236]	; (8015ea0 <tcp_process+0x59c>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015db8:	4b3a      	ldr	r3, [pc, #232]	; (8015ea4 <tcp_process+0x5a0>)
 8015dba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015dbc:	885b      	ldrh	r3, [r3, #2]
 8015dbe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015dc0:	4a38      	ldr	r2, [pc, #224]	; (8015ea4 <tcp_process+0x5a0>)
 8015dc2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015dc4:	8812      	ldrh	r2, [r2, #0]
 8015dc6:	b292      	uxth	r2, r2
 8015dc8:	9202      	str	r2, [sp, #8]
 8015dca:	9301      	str	r3, [sp, #4]
 8015dcc:	4b36      	ldr	r3, [pc, #216]	; (8015ea8 <tcp_process+0x5a4>)
 8015dce:	9300      	str	r3, [sp, #0]
 8015dd0:	4b36      	ldr	r3, [pc, #216]	; (8015eac <tcp_process+0x5a8>)
 8015dd2:	4602      	mov	r2, r0
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f003 f829 	bl	8018e2c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015dda:	e167      	b.n	80160ac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015ddc:	4b2d      	ldr	r3, [pc, #180]	; (8015e94 <tcp_process+0x590>)
 8015dde:	781b      	ldrb	r3, [r3, #0]
 8015de0:	f003 0302 	and.w	r3, r3, #2
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	f000 8161 	beq.w	80160ac <tcp_process+0x7a8>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dee:	1e5a      	subs	r2, r3, #1
 8015df0:	4b2b      	ldr	r3, [pc, #172]	; (8015ea0 <tcp_process+0x59c>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	f040 8159 	bne.w	80160ac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f002 fe10 	bl	8018a20 <tcp_rexmit>
      break;
 8015e00:	e154      	b.n	80160ac <tcp_process+0x7a8>
 8015e02:	e153      	b.n	80160ac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f000 fa71 	bl	80162ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015e0a:	4b2d      	ldr	r3, [pc, #180]	; (8015ec0 <tcp_process+0x5bc>)
 8015e0c:	781b      	ldrb	r3, [r3, #0]
 8015e0e:	f003 0320 	and.w	r3, r3, #32
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	f000 814c 	beq.w	80160b0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	8b5b      	ldrh	r3, [r3, #26]
 8015e1c:	f043 0302 	orr.w	r3, r3, #2
 8015e20:	b29a      	uxth	r2, r3
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2207      	movs	r2, #7
 8015e2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015e2c:	e140      	b.n	80160b0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f000 fa5c 	bl	80162ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015e34:	4b22      	ldr	r3, [pc, #136]	; (8015ec0 <tcp_process+0x5bc>)
 8015e36:	781b      	ldrb	r3, [r3, #0]
 8015e38:	f003 0320 	and.w	r3, r3, #32
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d071      	beq.n	8015f24 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015e40:	4b14      	ldr	r3, [pc, #80]	; (8015e94 <tcp_process+0x590>)
 8015e42:	781b      	ldrb	r3, [r3, #0]
 8015e44:	f003 0310 	and.w	r3, r3, #16
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d060      	beq.n	8015f0e <tcp_process+0x60a>
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015e50:	4b11      	ldr	r3, [pc, #68]	; (8015e98 <tcp_process+0x594>)
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d15a      	bne.n	8015f0e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d156      	bne.n	8015f0e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	8b5b      	ldrh	r3, [r3, #26]
 8015e64:	f043 0302 	orr.w	r3, r3, #2
 8015e68:	b29a      	uxth	r2, r3
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f7fe fdbc 	bl	80149ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015e74:	4b13      	ldr	r3, [pc, #76]	; (8015ec4 <tcp_process+0x5c0>)
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	429a      	cmp	r2, r3
 8015e7c:	d105      	bne.n	8015e8a <tcp_process+0x586>
 8015e7e:	4b11      	ldr	r3, [pc, #68]	; (8015ec4 <tcp_process+0x5c0>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	4a0f      	ldr	r2, [pc, #60]	; (8015ec4 <tcp_process+0x5c0>)
 8015e86:	6013      	str	r3, [r2, #0]
 8015e88:	e02e      	b.n	8015ee8 <tcp_process+0x5e4>
 8015e8a:	4b0e      	ldr	r3, [pc, #56]	; (8015ec4 <tcp_process+0x5c0>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	617b      	str	r3, [r7, #20]
 8015e90:	e027      	b.n	8015ee2 <tcp_process+0x5de>
 8015e92:	bf00      	nop
 8015e94:	2001020c 	.word	0x2001020c
 8015e98:	20010204 	.word	0x20010204
 8015e9c:	2001020a 	.word	0x2001020a
 8015ea0:	20010200 	.word	0x20010200
 8015ea4:	200101f0 	.word	0x200101f0
 8015ea8:	2000ca64 	.word	0x2000ca64
 8015eac:	2000ca68 	.word	0x2000ca68
 8015eb0:	08023518 	.word	0x08023518
 8015eb4:	080237b8 	.word	0x080237b8
 8015eb8:	08023564 	.word	0x08023564
 8015ebc:	20010208 	.word	0x20010208
 8015ec0:	2001020d 	.word	0x2001020d
 8015ec4:	200101d4 	.word	0x200101d4
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	687a      	ldr	r2, [r7, #4]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d104      	bne.n	8015edc <tcp_process+0x5d8>
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	68da      	ldr	r2, [r3, #12]
 8015ed6:	697b      	ldr	r3, [r7, #20]
 8015ed8:	60da      	str	r2, [r3, #12]
 8015eda:	e005      	b.n	8015ee8 <tcp_process+0x5e4>
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	68db      	ldr	r3, [r3, #12]
 8015ee0:	617b      	str	r3, [r7, #20]
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d1ef      	bne.n	8015ec8 <tcp_process+0x5c4>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2200      	movs	r2, #0
 8015eec:	60da      	str	r2, [r3, #12]
 8015eee:	4b77      	ldr	r3, [pc, #476]	; (80160cc <tcp_process+0x7c8>)
 8015ef0:	2201      	movs	r2, #1
 8015ef2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	220a      	movs	r2, #10
 8015ef8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015efa:	4b75      	ldr	r3, [pc, #468]	; (80160d0 <tcp_process+0x7cc>)
 8015efc:	681a      	ldr	r2, [r3, #0]
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	60da      	str	r2, [r3, #12]
 8015f02:	4a73      	ldr	r2, [pc, #460]	; (80160d0 <tcp_process+0x7cc>)
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	6013      	str	r3, [r2, #0]
 8015f08:	f003 f952 	bl	80191b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015f0c:	e0d2      	b.n	80160b4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	8b5b      	ldrh	r3, [r3, #26]
 8015f12:	f043 0302 	orr.w	r3, r3, #2
 8015f16:	b29a      	uxth	r2, r3
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2208      	movs	r2, #8
 8015f20:	751a      	strb	r2, [r3, #20]
      break;
 8015f22:	e0c7      	b.n	80160b4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015f24:	4b6b      	ldr	r3, [pc, #428]	; (80160d4 <tcp_process+0x7d0>)
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	f003 0310 	and.w	r3, r3, #16
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	f000 80c1 	beq.w	80160b4 <tcp_process+0x7b0>
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f36:	4b68      	ldr	r3, [pc, #416]	; (80160d8 <tcp_process+0x7d4>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	f040 80ba 	bne.w	80160b4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	f040 80b5 	bne.w	80160b4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	2206      	movs	r2, #6
 8015f4e:	751a      	strb	r2, [r3, #20]
      break;
 8015f50:	e0b0      	b.n	80160b4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f000 f9ca 	bl	80162ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015f58:	4b60      	ldr	r3, [pc, #384]	; (80160dc <tcp_process+0x7d8>)
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	f003 0320 	and.w	r3, r3, #32
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	f000 80a9 	beq.w	80160b8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	8b5b      	ldrh	r3, [r3, #26]
 8015f6a:	f043 0302 	orr.w	r3, r3, #2
 8015f6e:	b29a      	uxth	r2, r3
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f7fe fd39 	bl	80149ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015f7a:	4b59      	ldr	r3, [pc, #356]	; (80160e0 <tcp_process+0x7dc>)
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	687a      	ldr	r2, [r7, #4]
 8015f80:	429a      	cmp	r2, r3
 8015f82:	d105      	bne.n	8015f90 <tcp_process+0x68c>
 8015f84:	4b56      	ldr	r3, [pc, #344]	; (80160e0 <tcp_process+0x7dc>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	68db      	ldr	r3, [r3, #12]
 8015f8a:	4a55      	ldr	r2, [pc, #340]	; (80160e0 <tcp_process+0x7dc>)
 8015f8c:	6013      	str	r3, [r2, #0]
 8015f8e:	e013      	b.n	8015fb8 <tcp_process+0x6b4>
 8015f90:	4b53      	ldr	r3, [pc, #332]	; (80160e0 <tcp_process+0x7dc>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	613b      	str	r3, [r7, #16]
 8015f96:	e00c      	b.n	8015fb2 <tcp_process+0x6ae>
 8015f98:	693b      	ldr	r3, [r7, #16]
 8015f9a:	68db      	ldr	r3, [r3, #12]
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d104      	bne.n	8015fac <tcp_process+0x6a8>
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	68da      	ldr	r2, [r3, #12]
 8015fa6:	693b      	ldr	r3, [r7, #16]
 8015fa8:	60da      	str	r2, [r3, #12]
 8015faa:	e005      	b.n	8015fb8 <tcp_process+0x6b4>
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	68db      	ldr	r3, [r3, #12]
 8015fb0:	613b      	str	r3, [r7, #16]
 8015fb2:	693b      	ldr	r3, [r7, #16]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d1ef      	bne.n	8015f98 <tcp_process+0x694>
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2200      	movs	r2, #0
 8015fbc:	60da      	str	r2, [r3, #12]
 8015fbe:	4b43      	ldr	r3, [pc, #268]	; (80160cc <tcp_process+0x7c8>)
 8015fc0:	2201      	movs	r2, #1
 8015fc2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	220a      	movs	r2, #10
 8015fc8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015fca:	4b41      	ldr	r3, [pc, #260]	; (80160d0 <tcp_process+0x7cc>)
 8015fcc:	681a      	ldr	r2, [r3, #0]
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	60da      	str	r2, [r3, #12]
 8015fd2:	4a3f      	ldr	r2, [pc, #252]	; (80160d0 <tcp_process+0x7cc>)
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6013      	str	r3, [r2, #0]
 8015fd8:	f003 f8ea 	bl	80191b0 <tcp_timer_needed>
      }
      break;
 8015fdc:	e06c      	b.n	80160b8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f000 f984 	bl	80162ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015fe4:	4b3b      	ldr	r3, [pc, #236]	; (80160d4 <tcp_process+0x7d0>)
 8015fe6:	781b      	ldrb	r3, [r3, #0]
 8015fe8:	f003 0310 	and.w	r3, r3, #16
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d065      	beq.n	80160bc <tcp_process+0x7b8>
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015ff4:	4b38      	ldr	r3, [pc, #224]	; (80160d8 <tcp_process+0x7d4>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d15f      	bne.n	80160bc <tcp_process+0x7b8>
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016000:	2b00      	cmp	r3, #0
 8016002:	d15b      	bne.n	80160bc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f7fe fcf1 	bl	80149ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801600a:	4b35      	ldr	r3, [pc, #212]	; (80160e0 <tcp_process+0x7dc>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	687a      	ldr	r2, [r7, #4]
 8016010:	429a      	cmp	r2, r3
 8016012:	d105      	bne.n	8016020 <tcp_process+0x71c>
 8016014:	4b32      	ldr	r3, [pc, #200]	; (80160e0 <tcp_process+0x7dc>)
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	68db      	ldr	r3, [r3, #12]
 801601a:	4a31      	ldr	r2, [pc, #196]	; (80160e0 <tcp_process+0x7dc>)
 801601c:	6013      	str	r3, [r2, #0]
 801601e:	e013      	b.n	8016048 <tcp_process+0x744>
 8016020:	4b2f      	ldr	r3, [pc, #188]	; (80160e0 <tcp_process+0x7dc>)
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	60fb      	str	r3, [r7, #12]
 8016026:	e00c      	b.n	8016042 <tcp_process+0x73e>
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	68db      	ldr	r3, [r3, #12]
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	429a      	cmp	r2, r3
 8016030:	d104      	bne.n	801603c <tcp_process+0x738>
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	68da      	ldr	r2, [r3, #12]
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	60da      	str	r2, [r3, #12]
 801603a:	e005      	b.n	8016048 <tcp_process+0x744>
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	68db      	ldr	r3, [r3, #12]
 8016040:	60fb      	str	r3, [r7, #12]
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d1ef      	bne.n	8016028 <tcp_process+0x724>
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2200      	movs	r2, #0
 801604c:	60da      	str	r2, [r3, #12]
 801604e:	4b1f      	ldr	r3, [pc, #124]	; (80160cc <tcp_process+0x7c8>)
 8016050:	2201      	movs	r2, #1
 8016052:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	220a      	movs	r2, #10
 8016058:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801605a:	4b1d      	ldr	r3, [pc, #116]	; (80160d0 <tcp_process+0x7cc>)
 801605c:	681a      	ldr	r2, [r3, #0]
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	60da      	str	r2, [r3, #12]
 8016062:	4a1b      	ldr	r2, [pc, #108]	; (80160d0 <tcp_process+0x7cc>)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	6013      	str	r3, [r2, #0]
 8016068:	f003 f8a2 	bl	80191b0 <tcp_timer_needed>
      }
      break;
 801606c:	e026      	b.n	80160bc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f000 f93c 	bl	80162ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016074:	4b17      	ldr	r3, [pc, #92]	; (80160d4 <tcp_process+0x7d0>)
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	f003 0310 	and.w	r3, r3, #16
 801607c:	2b00      	cmp	r3, #0
 801607e:	d01f      	beq.n	80160c0 <tcp_process+0x7bc>
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016084:	4b14      	ldr	r3, [pc, #80]	; (80160d8 <tcp_process+0x7d4>)
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	429a      	cmp	r2, r3
 801608a:	d119      	bne.n	80160c0 <tcp_process+0x7bc>
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016090:	2b00      	cmp	r3, #0
 8016092:	d115      	bne.n	80160c0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016094:	4b11      	ldr	r3, [pc, #68]	; (80160dc <tcp_process+0x7d8>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	f043 0310 	orr.w	r3, r3, #16
 801609c:	b2da      	uxtb	r2, r3
 801609e:	4b0f      	ldr	r3, [pc, #60]	; (80160dc <tcp_process+0x7d8>)
 80160a0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80160a2:	e00d      	b.n	80160c0 <tcp_process+0x7bc>
    default:
      break;
 80160a4:	bf00      	nop
 80160a6:	e00c      	b.n	80160c2 <tcp_process+0x7be>
      break;
 80160a8:	bf00      	nop
 80160aa:	e00a      	b.n	80160c2 <tcp_process+0x7be>
      break;
 80160ac:	bf00      	nop
 80160ae:	e008      	b.n	80160c2 <tcp_process+0x7be>
      break;
 80160b0:	bf00      	nop
 80160b2:	e006      	b.n	80160c2 <tcp_process+0x7be>
      break;
 80160b4:	bf00      	nop
 80160b6:	e004      	b.n	80160c2 <tcp_process+0x7be>
      break;
 80160b8:	bf00      	nop
 80160ba:	e002      	b.n	80160c2 <tcp_process+0x7be>
      break;
 80160bc:	bf00      	nop
 80160be:	e000      	b.n	80160c2 <tcp_process+0x7be>
      break;
 80160c0:	bf00      	nop
  }
  return ERR_OK;
 80160c2:	2300      	movs	r3, #0
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	3724      	adds	r7, #36	; 0x24
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd90      	pop	{r4, r7, pc}
 80160cc:	200101dc 	.word	0x200101dc
 80160d0:	200101d8 	.word	0x200101d8
 80160d4:	2001020c 	.word	0x2001020c
 80160d8:	20010204 	.word	0x20010204
 80160dc:	2001020d 	.word	0x2001020d
 80160e0:	200101d4 	.word	0x200101d4

080160e4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80160e4:	b590      	push	{r4, r7, lr}
 80160e6:	b085      	sub	sp, #20
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
 80160ec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d106      	bne.n	8016102 <tcp_oos_insert_segment+0x1e>
 80160f4:	4b3b      	ldr	r3, [pc, #236]	; (80161e4 <tcp_oos_insert_segment+0x100>)
 80160f6:	f240 421f 	movw	r2, #1055	; 0x41f
 80160fa:	493b      	ldr	r1, [pc, #236]	; (80161e8 <tcp_oos_insert_segment+0x104>)
 80160fc:	483b      	ldr	r0, [pc, #236]	; (80161ec <tcp_oos_insert_segment+0x108>)
 80160fe:	f009 fbe1 	bl	801f8c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	68db      	ldr	r3, [r3, #12]
 8016106:	899b      	ldrh	r3, [r3, #12]
 8016108:	b29b      	uxth	r3, r3
 801610a:	4618      	mov	r0, r3
 801610c:	f7fb f8d0 	bl	80112b0 <lwip_htons>
 8016110:	4603      	mov	r3, r0
 8016112:	b2db      	uxtb	r3, r3
 8016114:	f003 0301 	and.w	r3, r3, #1
 8016118:	2b00      	cmp	r3, #0
 801611a:	d028      	beq.n	801616e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801611c:	6838      	ldr	r0, [r7, #0]
 801611e:	f7fe f995 	bl	801444c <tcp_segs_free>
    next = NULL;
 8016122:	2300      	movs	r3, #0
 8016124:	603b      	str	r3, [r7, #0]
 8016126:	e056      	b.n	80161d6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	68db      	ldr	r3, [r3, #12]
 801612c:	899b      	ldrh	r3, [r3, #12]
 801612e:	b29b      	uxth	r3, r3
 8016130:	4618      	mov	r0, r3
 8016132:	f7fb f8bd 	bl	80112b0 <lwip_htons>
 8016136:	4603      	mov	r3, r0
 8016138:	b2db      	uxtb	r3, r3
 801613a:	f003 0301 	and.w	r3, r3, #1
 801613e:	2b00      	cmp	r3, #0
 8016140:	d00d      	beq.n	801615e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	68db      	ldr	r3, [r3, #12]
 8016146:	899b      	ldrh	r3, [r3, #12]
 8016148:	b29c      	uxth	r4, r3
 801614a:	2001      	movs	r0, #1
 801614c:	f7fb f8b0 	bl	80112b0 <lwip_htons>
 8016150:	4603      	mov	r3, r0
 8016152:	461a      	mov	r2, r3
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	68db      	ldr	r3, [r3, #12]
 8016158:	4322      	orrs	r2, r4
 801615a:	b292      	uxth	r2, r2
 801615c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016162:	683b      	ldr	r3, [r7, #0]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016168:	68f8      	ldr	r0, [r7, #12]
 801616a:	f7fe f984 	bl	8014476 <tcp_seg_free>
    while (next &&
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d00e      	beq.n	8016192 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	891b      	ldrh	r3, [r3, #8]
 8016178:	461a      	mov	r2, r3
 801617a:	4b1d      	ldr	r3, [pc, #116]	; (80161f0 <tcp_oos_insert_segment+0x10c>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	441a      	add	r2, r3
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	68db      	ldr	r3, [r3, #12]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	6839      	ldr	r1, [r7, #0]
 8016188:	8909      	ldrh	r1, [r1, #8]
 801618a:	440b      	add	r3, r1
 801618c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801618e:	2b00      	cmp	r3, #0
 8016190:	daca      	bge.n	8016128 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d01e      	beq.n	80161d6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	891b      	ldrh	r3, [r3, #8]
 801619c:	461a      	mov	r2, r3
 801619e:	4b14      	ldr	r3, [pc, #80]	; (80161f0 <tcp_oos_insert_segment+0x10c>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	441a      	add	r2, r3
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	68db      	ldr	r3, [r3, #12]
 80161a8:	685b      	ldr	r3, [r3, #4]
 80161aa:	1ad3      	subs	r3, r2, r3
    if (next &&
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	dd12      	ble.n	80161d6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	68db      	ldr	r3, [r3, #12]
 80161b4:	685b      	ldr	r3, [r3, #4]
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	4b0d      	ldr	r3, [pc, #52]	; (80161f0 <tcp_oos_insert_segment+0x10c>)
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	b29b      	uxth	r3, r3
 80161be:	1ad3      	subs	r3, r2, r3
 80161c0:	b29a      	uxth	r2, r3
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	685a      	ldr	r2, [r3, #4]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	891b      	ldrh	r3, [r3, #8]
 80161ce:	4619      	mov	r1, r3
 80161d0:	4610      	mov	r0, r2
 80161d2:	f7fc fb1d 	bl	8012810 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	683a      	ldr	r2, [r7, #0]
 80161da:	601a      	str	r2, [r3, #0]
}
 80161dc:	bf00      	nop
 80161de:	3714      	adds	r7, #20
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd90      	pop	{r4, r7, pc}
 80161e4:	08023518 	.word	0x08023518
 80161e8:	080237d8 	.word	0x080237d8
 80161ec:	08023564 	.word	0x08023564
 80161f0:	20010200 	.word	0x20010200

080161f4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80161f4:	b5b0      	push	{r4, r5, r7, lr}
 80161f6:	b086      	sub	sp, #24
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	60b9      	str	r1, [r7, #8]
 80161fe:	607a      	str	r2, [r7, #4]
 8016200:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016202:	e03e      	b.n	8016282 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	685b      	ldr	r3, [r3, #4]
 8016212:	4618      	mov	r0, r3
 8016214:	f7fc fd10 	bl	8012c38 <pbuf_clen>
 8016218:	4603      	mov	r3, r0
 801621a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016222:	8a7a      	ldrh	r2, [r7, #18]
 8016224:	429a      	cmp	r2, r3
 8016226:	d906      	bls.n	8016236 <tcp_free_acked_segments+0x42>
 8016228:	4b2a      	ldr	r3, [pc, #168]	; (80162d4 <tcp_free_acked_segments+0xe0>)
 801622a:	f240 4257 	movw	r2, #1111	; 0x457
 801622e:	492a      	ldr	r1, [pc, #168]	; (80162d8 <tcp_free_acked_segments+0xe4>)
 8016230:	482a      	ldr	r0, [pc, #168]	; (80162dc <tcp_free_acked_segments+0xe8>)
 8016232:	f009 fb47 	bl	801f8c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801623c:	8a7b      	ldrh	r3, [r7, #18]
 801623e:	1ad3      	subs	r3, r2, r3
 8016240:	b29a      	uxth	r2, r3
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016248:	697b      	ldr	r3, [r7, #20]
 801624a:	891a      	ldrh	r2, [r3, #8]
 801624c:	4b24      	ldr	r3, [pc, #144]	; (80162e0 <tcp_free_acked_segments+0xec>)
 801624e:	881b      	ldrh	r3, [r3, #0]
 8016250:	4413      	add	r3, r2
 8016252:	b29a      	uxth	r2, r3
 8016254:	4b22      	ldr	r3, [pc, #136]	; (80162e0 <tcp_free_acked_segments+0xec>)
 8016256:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016258:	6978      	ldr	r0, [r7, #20]
 801625a:	f7fe f90c 	bl	8014476 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016264:	2b00      	cmp	r3, #0
 8016266:	d00c      	beq.n	8016282 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016268:	68bb      	ldr	r3, [r7, #8]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d109      	bne.n	8016282 <tcp_free_acked_segments+0x8e>
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d106      	bne.n	8016282 <tcp_free_acked_segments+0x8e>
 8016274:	4b17      	ldr	r3, [pc, #92]	; (80162d4 <tcp_free_acked_segments+0xe0>)
 8016276:	f240 4261 	movw	r2, #1121	; 0x461
 801627a:	491a      	ldr	r1, [pc, #104]	; (80162e4 <tcp_free_acked_segments+0xf0>)
 801627c:	4817      	ldr	r0, [pc, #92]	; (80162dc <tcp_free_acked_segments+0xe8>)
 801627e:	f009 fb21 	bl	801f8c4 <iprintf>
  while (seg_list != NULL &&
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d020      	beq.n	80162ca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	68db      	ldr	r3, [r3, #12]
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	4618      	mov	r0, r3
 8016290:	f7fb f823 	bl	80112da <lwip_htonl>
 8016294:	4604      	mov	r4, r0
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	891b      	ldrh	r3, [r3, #8]
 801629a:	461d      	mov	r5, r3
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	899b      	ldrh	r3, [r3, #12]
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7fb f803 	bl	80112b0 <lwip_htons>
 80162aa:	4603      	mov	r3, r0
 80162ac:	b2db      	uxtb	r3, r3
 80162ae:	f003 0303 	and.w	r3, r3, #3
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d001      	beq.n	80162ba <tcp_free_acked_segments+0xc6>
 80162b6:	2301      	movs	r3, #1
 80162b8:	e000      	b.n	80162bc <tcp_free_acked_segments+0xc8>
 80162ba:	2300      	movs	r3, #0
 80162bc:	442b      	add	r3, r5
 80162be:	18e2      	adds	r2, r4, r3
 80162c0:	4b09      	ldr	r3, [pc, #36]	; (80162e8 <tcp_free_acked_segments+0xf4>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	dd9c      	ble.n	8016204 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80162ca:	68bb      	ldr	r3, [r7, #8]
}
 80162cc:	4618      	mov	r0, r3
 80162ce:	3718      	adds	r7, #24
 80162d0:	46bd      	mov	sp, r7
 80162d2:	bdb0      	pop	{r4, r5, r7, pc}
 80162d4:	08023518 	.word	0x08023518
 80162d8:	08023800 	.word	0x08023800
 80162dc:	08023564 	.word	0x08023564
 80162e0:	20010208 	.word	0x20010208
 80162e4:	08023828 	.word	0x08023828
 80162e8:	20010204 	.word	0x20010204

080162ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80162ec:	b5b0      	push	{r4, r5, r7, lr}
 80162ee:	b094      	sub	sp, #80	; 0x50
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80162f4:	2300      	movs	r3, #0
 80162f6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d106      	bne.n	801630c <tcp_receive+0x20>
 80162fe:	4b91      	ldr	r3, [pc, #580]	; (8016544 <tcp_receive+0x258>)
 8016300:	f240 427b 	movw	r2, #1147	; 0x47b
 8016304:	4990      	ldr	r1, [pc, #576]	; (8016548 <tcp_receive+0x25c>)
 8016306:	4891      	ldr	r0, [pc, #580]	; (801654c <tcp_receive+0x260>)
 8016308:	f009 fadc 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	7d1b      	ldrb	r3, [r3, #20]
 8016310:	2b03      	cmp	r3, #3
 8016312:	d806      	bhi.n	8016322 <tcp_receive+0x36>
 8016314:	4b8b      	ldr	r3, [pc, #556]	; (8016544 <tcp_receive+0x258>)
 8016316:	f240 427c 	movw	r2, #1148	; 0x47c
 801631a:	498d      	ldr	r1, [pc, #564]	; (8016550 <tcp_receive+0x264>)
 801631c:	488b      	ldr	r0, [pc, #556]	; (801654c <tcp_receive+0x260>)
 801631e:	f009 fad1 	bl	801f8c4 <iprintf>

  if (flags & TCP_ACK) {
 8016322:	4b8c      	ldr	r3, [pc, #560]	; (8016554 <tcp_receive+0x268>)
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	f003 0310 	and.w	r3, r3, #16
 801632a:	2b00      	cmp	r3, #0
 801632c:	f000 8264 	beq.w	80167f8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016336:	461a      	mov	r2, r3
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801633c:	4413      	add	r3, r2
 801633e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016344:	4b84      	ldr	r3, [pc, #528]	; (8016558 <tcp_receive+0x26c>)
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	1ad3      	subs	r3, r2, r3
 801634a:	2b00      	cmp	r3, #0
 801634c:	db1b      	blt.n	8016386 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016352:	4b81      	ldr	r3, [pc, #516]	; (8016558 <tcp_receive+0x26c>)
 8016354:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016356:	429a      	cmp	r2, r3
 8016358:	d106      	bne.n	8016368 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801635e:	4b7f      	ldr	r3, [pc, #508]	; (801655c <tcp_receive+0x270>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	1ad3      	subs	r3, r2, r3
 8016364:	2b00      	cmp	r3, #0
 8016366:	db0e      	blt.n	8016386 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801636c:	4b7b      	ldr	r3, [pc, #492]	; (801655c <tcp_receive+0x270>)
 801636e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016370:	429a      	cmp	r2, r3
 8016372:	d125      	bne.n	80163c0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016374:	4b7a      	ldr	r3, [pc, #488]	; (8016560 <tcp_receive+0x274>)
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	89db      	ldrh	r3, [r3, #14]
 801637a:	b29a      	uxth	r2, r3
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016382:	429a      	cmp	r2, r3
 8016384:	d91c      	bls.n	80163c0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016386:	4b76      	ldr	r3, [pc, #472]	; (8016560 <tcp_receive+0x274>)
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	89db      	ldrh	r3, [r3, #14]
 801638c:	b29a      	uxth	r2, r3
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80163a0:	429a      	cmp	r2, r3
 80163a2:	d205      	bcs.n	80163b0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80163b0:	4b69      	ldr	r3, [pc, #420]	; (8016558 <tcp_receive+0x26c>)
 80163b2:	681a      	ldr	r2, [r3, #0]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80163b8:	4b68      	ldr	r3, [pc, #416]	; (801655c <tcp_receive+0x270>)
 80163ba:	681a      	ldr	r2, [r3, #0]
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80163c0:	4b66      	ldr	r3, [pc, #408]	; (801655c <tcp_receive+0x270>)
 80163c2:	681a      	ldr	r2, [r3, #0]
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163c8:	1ad3      	subs	r3, r2, r3
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	dc58      	bgt.n	8016480 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80163ce:	4b65      	ldr	r3, [pc, #404]	; (8016564 <tcp_receive+0x278>)
 80163d0:	881b      	ldrh	r3, [r3, #0]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d14b      	bne.n	801646e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163da:	687a      	ldr	r2, [r7, #4]
 80163dc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80163e0:	4413      	add	r3, r2
 80163e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d142      	bne.n	801646e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	db3d      	blt.n	801646e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80163f6:	4b59      	ldr	r3, [pc, #356]	; (801655c <tcp_receive+0x270>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d137      	bne.n	801646e <tcp_receive+0x182>
              found_dupack = 1;
 80163fe:	2301      	movs	r3, #1
 8016400:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016408:	2bff      	cmp	r3, #255	; 0xff
 801640a:	d007      	beq.n	801641c <tcp_receive+0x130>
                ++pcb->dupacks;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016412:	3301      	adds	r3, #1
 8016414:	b2da      	uxtb	r2, r3
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016422:	2b03      	cmp	r3, #3
 8016424:	d91b      	bls.n	801645e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016430:	4413      	add	r3, r2
 8016432:	b29a      	uxth	r2, r3
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801643a:	429a      	cmp	r2, r3
 801643c:	d30a      	bcc.n	8016454 <tcp_receive+0x168>
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016448:	4413      	add	r3, r2
 801644a:	b29a      	uxth	r2, r3
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016452:	e004      	b.n	801645e <tcp_receive+0x172>
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801645a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016464:	2b02      	cmp	r3, #2
 8016466:	d902      	bls.n	801646e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f002 fb45 	bl	8018af8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801646e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016470:	2b00      	cmp	r3, #0
 8016472:	f040 8161 	bne.w	8016738 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2200      	movs	r2, #0
 801647a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801647e:	e15b      	b.n	8016738 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016480:	4b36      	ldr	r3, [pc, #216]	; (801655c <tcp_receive+0x270>)
 8016482:	681a      	ldr	r2, [r3, #0]
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016488:	1ad3      	subs	r3, r2, r3
 801648a:	3b01      	subs	r3, #1
 801648c:	2b00      	cmp	r3, #0
 801648e:	f2c0 814e 	blt.w	801672e <tcp_receive+0x442>
 8016492:	4b32      	ldr	r3, [pc, #200]	; (801655c <tcp_receive+0x270>)
 8016494:	681a      	ldr	r2, [r3, #0]
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801649a:	1ad3      	subs	r3, r2, r3
 801649c:	2b00      	cmp	r3, #0
 801649e:	f300 8146 	bgt.w	801672e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	8b5b      	ldrh	r3, [r3, #26]
 80164a6:	f003 0304 	and.w	r3, r3, #4
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d010      	beq.n	80164d0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	8b5b      	ldrh	r3, [r3, #26]
 80164b2:	f023 0304 	bic.w	r3, r3, #4
 80164b6:	b29a      	uxth	r2, r3
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	2200      	movs	r2, #0
 80164cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2200      	movs	r2, #0
 80164d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80164de:	10db      	asrs	r3, r3, #3
 80164e0:	b21b      	sxth	r3, r3
 80164e2:	b29a      	uxth	r2, r3
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80164ea:	b29b      	uxth	r3, r3
 80164ec:	4413      	add	r3, r2
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	b21a      	sxth	r2, r3
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80164f8:	4b18      	ldr	r3, [pc, #96]	; (801655c <tcp_receive+0x270>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	b29a      	uxth	r2, r3
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016502:	b29b      	uxth	r3, r3
 8016504:	1ad3      	subs	r3, r2, r3
 8016506:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2200      	movs	r2, #0
 801650c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016510:	4b12      	ldr	r3, [pc, #72]	; (801655c <tcp_receive+0x270>)
 8016512:	681a      	ldr	r2, [r3, #0]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	7d1b      	ldrb	r3, [r3, #20]
 801651c:	2b03      	cmp	r3, #3
 801651e:	f240 8097 	bls.w	8016650 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801652e:	429a      	cmp	r2, r3
 8016530:	d245      	bcs.n	80165be <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	8b5b      	ldrh	r3, [r3, #26]
 8016536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801653a:	2b00      	cmp	r3, #0
 801653c:	d014      	beq.n	8016568 <tcp_receive+0x27c>
 801653e:	2301      	movs	r3, #1
 8016540:	e013      	b.n	801656a <tcp_receive+0x27e>
 8016542:	bf00      	nop
 8016544:	08023518 	.word	0x08023518
 8016548:	08023848 	.word	0x08023848
 801654c:	08023564 	.word	0x08023564
 8016550:	08023864 	.word	0x08023864
 8016554:	2001020c 	.word	0x2001020c
 8016558:	20010200 	.word	0x20010200
 801655c:	20010204 	.word	0x20010204
 8016560:	200101f0 	.word	0x200101f0
 8016564:	2001020a 	.word	0x2001020a
 8016568:	2302      	movs	r3, #2
 801656a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801656e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016572:	b29a      	uxth	r2, r3
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016578:	fb12 f303 	smulbb	r3, r2, r3
 801657c:	b29b      	uxth	r3, r3
 801657e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016580:	4293      	cmp	r3, r2
 8016582:	bf28      	it	cs
 8016584:	4613      	movcs	r3, r2
 8016586:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801658e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016590:	4413      	add	r3, r2
 8016592:	b29a      	uxth	r2, r3
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801659a:	429a      	cmp	r2, r3
 801659c:	d309      	bcc.n	80165b2 <tcp_receive+0x2c6>
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80165a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80165a6:	4413      	add	r3, r2
 80165a8:	b29a      	uxth	r2, r3
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80165b0:	e04e      	b.n	8016650 <tcp_receive+0x364>
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80165b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80165bc:	e048      	b.n	8016650 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80165c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80165c6:	4413      	add	r3, r2
 80165c8:	b29a      	uxth	r2, r3
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d309      	bcc.n	80165e8 <tcp_receive+0x2fc>
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80165da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80165dc:	4413      	add	r3, r2
 80165de:	b29a      	uxth	r2, r3
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80165e6:	e004      	b.n	80165f2 <tcp_receive+0x306>
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80165ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80165fe:	429a      	cmp	r2, r3
 8016600:	d326      	bcc.n	8016650 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801660e:	1ad3      	subs	r3, r2, r3
 8016610:	b29a      	uxth	r2, r3
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016622:	4413      	add	r3, r2
 8016624:	b29a      	uxth	r2, r3
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801662c:	429a      	cmp	r2, r3
 801662e:	d30a      	bcc.n	8016646 <tcp_receive+0x35a>
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801663a:	4413      	add	r3, r2
 801663c:	b29a      	uxth	r2, r3
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016644:	e004      	b.n	8016650 <tcp_receive+0x364>
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801664c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016658:	4a98      	ldr	r2, [pc, #608]	; (80168bc <tcp_receive+0x5d0>)
 801665a:	6878      	ldr	r0, [r7, #4]
 801665c:	f7ff fdca 	bl	80161f4 <tcp_free_acked_segments>
 8016660:	4602      	mov	r2, r0
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801666e:	4a94      	ldr	r2, [pc, #592]	; (80168c0 <tcp_receive+0x5d4>)
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f7ff fdbf 	bl	80161f4 <tcp_free_acked_segments>
 8016676:	4602      	mov	r2, r0
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016680:	2b00      	cmp	r3, #0
 8016682:	d104      	bne.n	801668e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801668a:	861a      	strh	r2, [r3, #48]	; 0x30
 801668c:	e002      	b.n	8016694 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2200      	movs	r2, #0
 8016692:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2200      	movs	r2, #0
 8016698:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d103      	bne.n	80166aa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2200      	movs	r2, #0
 80166a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80166b0:	4b84      	ldr	r3, [pc, #528]	; (80168c4 <tcp_receive+0x5d8>)
 80166b2:	881b      	ldrh	r3, [r3, #0]
 80166b4:	4413      	add	r3, r2
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	8b5b      	ldrh	r3, [r3, #26]
 80166c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d035      	beq.n	8016736 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d118      	bne.n	8016704 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d00c      	beq.n	80166f4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166e2:	68db      	ldr	r3, [r3, #12]
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	4618      	mov	r0, r3
 80166e8:	f7fa fdf7 	bl	80112da <lwip_htonl>
 80166ec:	4603      	mov	r3, r0
 80166ee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	dc20      	bgt.n	8016736 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	8b5b      	ldrh	r3, [r3, #26]
 80166f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80166fc:	b29a      	uxth	r2, r3
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016702:	e018      	b.n	8016736 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801670c:	68db      	ldr	r3, [r3, #12]
 801670e:	685b      	ldr	r3, [r3, #4]
 8016710:	4618      	mov	r0, r3
 8016712:	f7fa fde2 	bl	80112da <lwip_htonl>
 8016716:	4603      	mov	r3, r0
 8016718:	1ae3      	subs	r3, r4, r3
 801671a:	2b00      	cmp	r3, #0
 801671c:	dc0b      	bgt.n	8016736 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	8b5b      	ldrh	r3, [r3, #26]
 8016722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016726:	b29a      	uxth	r2, r3
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801672c:	e003      	b.n	8016736 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f002 fbce 	bl	8018ed0 <tcp_send_empty_ack>
 8016734:	e000      	b.n	8016738 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016736:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801673c:	2b00      	cmp	r3, #0
 801673e:	d05b      	beq.n	80167f8 <tcp_receive+0x50c>
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016744:	4b60      	ldr	r3, [pc, #384]	; (80168c8 <tcp_receive+0x5dc>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	1ad3      	subs	r3, r2, r3
 801674a:	2b00      	cmp	r3, #0
 801674c:	da54      	bge.n	80167f8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801674e:	4b5f      	ldr	r3, [pc, #380]	; (80168cc <tcp_receive+0x5e0>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	b29a      	uxth	r2, r3
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016758:	b29b      	uxth	r3, r3
 801675a:	1ad3      	subs	r3, r2, r3
 801675c:	b29b      	uxth	r3, r3
 801675e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016762:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801676c:	10db      	asrs	r3, r3, #3
 801676e:	b21b      	sxth	r3, r3
 8016770:	b29b      	uxth	r3, r3
 8016772:	1ad3      	subs	r3, r2, r3
 8016774:	b29b      	uxth	r3, r3
 8016776:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016780:	b29a      	uxth	r2, r3
 8016782:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016786:	4413      	add	r3, r2
 8016788:	b29b      	uxth	r3, r3
 801678a:	b21a      	sxth	r2, r3
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016790:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016794:	2b00      	cmp	r3, #0
 8016796:	da05      	bge.n	80167a4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801679c:	425b      	negs	r3, r3
 801679e:	b29b      	uxth	r3, r3
 80167a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80167a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80167ae:	109b      	asrs	r3, r3, #2
 80167b0:	b21b      	sxth	r3, r3
 80167b2:	b29b      	uxth	r3, r3
 80167b4:	1ad3      	subs	r3, r2, r3
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80167c2:	b29a      	uxth	r2, r3
 80167c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80167c8:	4413      	add	r3, r2
 80167ca:	b29b      	uxth	r3, r3
 80167cc:	b21a      	sxth	r2, r3
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80167d8:	10db      	asrs	r3, r3, #3
 80167da:	b21b      	sxth	r3, r3
 80167dc:	b29a      	uxth	r2, r3
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80167e4:	b29b      	uxth	r3, r3
 80167e6:	4413      	add	r3, r2
 80167e8:	b29b      	uxth	r3, r3
 80167ea:	b21a      	sxth	r2, r3
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2200      	movs	r2, #0
 80167f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80167f8:	4b35      	ldr	r3, [pc, #212]	; (80168d0 <tcp_receive+0x5e4>)
 80167fa:	881b      	ldrh	r3, [r3, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	f000 84e2 	beq.w	80171c6 <tcp_receive+0xeda>
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	7d1b      	ldrb	r3, [r3, #20]
 8016806:	2b06      	cmp	r3, #6
 8016808:	f200 84dd 	bhi.w	80171c6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016810:	4b30      	ldr	r3, [pc, #192]	; (80168d4 <tcp_receive+0x5e8>)
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	1ad3      	subs	r3, r2, r3
 8016816:	3b01      	subs	r3, #1
 8016818:	2b00      	cmp	r3, #0
 801681a:	f2c0 808f 	blt.w	801693c <tcp_receive+0x650>
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016822:	4b2b      	ldr	r3, [pc, #172]	; (80168d0 <tcp_receive+0x5e4>)
 8016824:	881b      	ldrh	r3, [r3, #0]
 8016826:	4619      	mov	r1, r3
 8016828:	4b2a      	ldr	r3, [pc, #168]	; (80168d4 <tcp_receive+0x5e8>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	440b      	add	r3, r1
 801682e:	1ad3      	subs	r3, r2, r3
 8016830:	3301      	adds	r3, #1
 8016832:	2b00      	cmp	r3, #0
 8016834:	f300 8082 	bgt.w	801693c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016838:	4b27      	ldr	r3, [pc, #156]	; (80168d8 <tcp_receive+0x5ec>)
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016842:	4b24      	ldr	r3, [pc, #144]	; (80168d4 <tcp_receive+0x5e8>)
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	1ad3      	subs	r3, r2, r3
 8016848:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801684a:	4b23      	ldr	r3, [pc, #140]	; (80168d8 <tcp_receive+0x5ec>)
 801684c:	685b      	ldr	r3, [r3, #4]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d106      	bne.n	8016860 <tcp_receive+0x574>
 8016852:	4b22      	ldr	r3, [pc, #136]	; (80168dc <tcp_receive+0x5f0>)
 8016854:	f240 5294 	movw	r2, #1428	; 0x594
 8016858:	4921      	ldr	r1, [pc, #132]	; (80168e0 <tcp_receive+0x5f4>)
 801685a:	4822      	ldr	r0, [pc, #136]	; (80168e4 <tcp_receive+0x5f8>)
 801685c:	f009 f832 	bl	801f8c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016862:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016866:	4293      	cmp	r3, r2
 8016868:	d906      	bls.n	8016878 <tcp_receive+0x58c>
 801686a:	4b1c      	ldr	r3, [pc, #112]	; (80168dc <tcp_receive+0x5f0>)
 801686c:	f240 5295 	movw	r2, #1429	; 0x595
 8016870:	491d      	ldr	r1, [pc, #116]	; (80168e8 <tcp_receive+0x5fc>)
 8016872:	481c      	ldr	r0, [pc, #112]	; (80168e4 <tcp_receive+0x5f8>)
 8016874:	f009 f826 	bl	801f8c4 <iprintf>
      off = (u16_t)off32;
 8016878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801687a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801687e:	4b16      	ldr	r3, [pc, #88]	; (80168d8 <tcp_receive+0x5ec>)
 8016880:	685b      	ldr	r3, [r3, #4]
 8016882:	891b      	ldrh	r3, [r3, #8]
 8016884:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016888:	429a      	cmp	r2, r3
 801688a:	d906      	bls.n	801689a <tcp_receive+0x5ae>
 801688c:	4b13      	ldr	r3, [pc, #76]	; (80168dc <tcp_receive+0x5f0>)
 801688e:	f240 5297 	movw	r2, #1431	; 0x597
 8016892:	4916      	ldr	r1, [pc, #88]	; (80168ec <tcp_receive+0x600>)
 8016894:	4813      	ldr	r0, [pc, #76]	; (80168e4 <tcp_receive+0x5f8>)
 8016896:	f009 f815 	bl	801f8c4 <iprintf>
      inseg.len -= off;
 801689a:	4b0f      	ldr	r3, [pc, #60]	; (80168d8 <tcp_receive+0x5ec>)
 801689c:	891a      	ldrh	r2, [r3, #8]
 801689e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80168a2:	1ad3      	subs	r3, r2, r3
 80168a4:	b29a      	uxth	r2, r3
 80168a6:	4b0c      	ldr	r3, [pc, #48]	; (80168d8 <tcp_receive+0x5ec>)
 80168a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80168aa:	4b0b      	ldr	r3, [pc, #44]	; (80168d8 <tcp_receive+0x5ec>)
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	891a      	ldrh	r2, [r3, #8]
 80168b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80168b4:	1ad3      	subs	r3, r2, r3
 80168b6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80168b8:	e02a      	b.n	8016910 <tcp_receive+0x624>
 80168ba:	bf00      	nop
 80168bc:	08023880 	.word	0x08023880
 80168c0:	08023888 	.word	0x08023888
 80168c4:	20010208 	.word	0x20010208
 80168c8:	20010204 	.word	0x20010204
 80168cc:	200101c8 	.word	0x200101c8
 80168d0:	2001020a 	.word	0x2001020a
 80168d4:	20010200 	.word	0x20010200
 80168d8:	200101e0 	.word	0x200101e0
 80168dc:	08023518 	.word	0x08023518
 80168e0:	08023890 	.word	0x08023890
 80168e4:	08023564 	.word	0x08023564
 80168e8:	080238a0 	.word	0x080238a0
 80168ec:	080238b0 	.word	0x080238b0
        off -= p->len;
 80168f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168f2:	895b      	ldrh	r3, [r3, #10]
 80168f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80168f8:	1ad3      	subs	r3, r2, r3
 80168fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80168fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016900:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016902:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016906:	2200      	movs	r2, #0
 8016908:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801690a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016912:	895b      	ldrh	r3, [r3, #10]
 8016914:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016918:	429a      	cmp	r2, r3
 801691a:	d8e9      	bhi.n	80168f0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801691c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016920:	4619      	mov	r1, r3
 8016922:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016924:	f7fc f874 	bl	8012a10 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801692c:	4a91      	ldr	r2, [pc, #580]	; (8016b74 <tcp_receive+0x888>)
 801692e:	6013      	str	r3, [r2, #0]
 8016930:	4b91      	ldr	r3, [pc, #580]	; (8016b78 <tcp_receive+0x88c>)
 8016932:	68db      	ldr	r3, [r3, #12]
 8016934:	4a8f      	ldr	r2, [pc, #572]	; (8016b74 <tcp_receive+0x888>)
 8016936:	6812      	ldr	r2, [r2, #0]
 8016938:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801693a:	e00d      	b.n	8016958 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801693c:	4b8d      	ldr	r3, [pc, #564]	; (8016b74 <tcp_receive+0x888>)
 801693e:	681a      	ldr	r2, [r3, #0]
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016944:	1ad3      	subs	r3, r2, r3
 8016946:	2b00      	cmp	r3, #0
 8016948:	da06      	bge.n	8016958 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	8b5b      	ldrh	r3, [r3, #26]
 801694e:	f043 0302 	orr.w	r3, r3, #2
 8016952:	b29a      	uxth	r2, r3
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016958:	4b86      	ldr	r3, [pc, #536]	; (8016b74 <tcp_receive+0x888>)
 801695a:	681a      	ldr	r2, [r3, #0]
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016960:	1ad3      	subs	r3, r2, r3
 8016962:	2b00      	cmp	r3, #0
 8016964:	f2c0 842a 	blt.w	80171bc <tcp_receive+0xed0>
 8016968:	4b82      	ldr	r3, [pc, #520]	; (8016b74 <tcp_receive+0x888>)
 801696a:	681a      	ldr	r2, [r3, #0]
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016970:	6879      	ldr	r1, [r7, #4]
 8016972:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016974:	440b      	add	r3, r1
 8016976:	1ad3      	subs	r3, r2, r3
 8016978:	3301      	adds	r3, #1
 801697a:	2b00      	cmp	r3, #0
 801697c:	f300 841e 	bgt.w	80171bc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016984:	4b7b      	ldr	r3, [pc, #492]	; (8016b74 <tcp_receive+0x888>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	429a      	cmp	r2, r3
 801698a:	f040 829a 	bne.w	8016ec2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801698e:	4b7a      	ldr	r3, [pc, #488]	; (8016b78 <tcp_receive+0x88c>)
 8016990:	891c      	ldrh	r4, [r3, #8]
 8016992:	4b79      	ldr	r3, [pc, #484]	; (8016b78 <tcp_receive+0x88c>)
 8016994:	68db      	ldr	r3, [r3, #12]
 8016996:	899b      	ldrh	r3, [r3, #12]
 8016998:	b29b      	uxth	r3, r3
 801699a:	4618      	mov	r0, r3
 801699c:	f7fa fc88 	bl	80112b0 <lwip_htons>
 80169a0:	4603      	mov	r3, r0
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	f003 0303 	and.w	r3, r3, #3
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d001      	beq.n	80169b0 <tcp_receive+0x6c4>
 80169ac:	2301      	movs	r3, #1
 80169ae:	e000      	b.n	80169b2 <tcp_receive+0x6c6>
 80169b0:	2300      	movs	r3, #0
 80169b2:	4423      	add	r3, r4
 80169b4:	b29a      	uxth	r2, r3
 80169b6:	4b71      	ldr	r3, [pc, #452]	; (8016b7c <tcp_receive+0x890>)
 80169b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80169be:	4b6f      	ldr	r3, [pc, #444]	; (8016b7c <tcp_receive+0x890>)
 80169c0:	881b      	ldrh	r3, [r3, #0]
 80169c2:	429a      	cmp	r2, r3
 80169c4:	d275      	bcs.n	8016ab2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80169c6:	4b6c      	ldr	r3, [pc, #432]	; (8016b78 <tcp_receive+0x88c>)
 80169c8:	68db      	ldr	r3, [r3, #12]
 80169ca:	899b      	ldrh	r3, [r3, #12]
 80169cc:	b29b      	uxth	r3, r3
 80169ce:	4618      	mov	r0, r3
 80169d0:	f7fa fc6e 	bl	80112b0 <lwip_htons>
 80169d4:	4603      	mov	r3, r0
 80169d6:	b2db      	uxtb	r3, r3
 80169d8:	f003 0301 	and.w	r3, r3, #1
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d01f      	beq.n	8016a20 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80169e0:	4b65      	ldr	r3, [pc, #404]	; (8016b78 <tcp_receive+0x88c>)
 80169e2:	68db      	ldr	r3, [r3, #12]
 80169e4:	899b      	ldrh	r3, [r3, #12]
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	b21b      	sxth	r3, r3
 80169ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80169ee:	b21c      	sxth	r4, r3
 80169f0:	4b61      	ldr	r3, [pc, #388]	; (8016b78 <tcp_receive+0x88c>)
 80169f2:	68db      	ldr	r3, [r3, #12]
 80169f4:	899b      	ldrh	r3, [r3, #12]
 80169f6:	b29b      	uxth	r3, r3
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7fa fc59 	bl	80112b0 <lwip_htons>
 80169fe:	4603      	mov	r3, r0
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016a08:	b29b      	uxth	r3, r3
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f7fa fc50 	bl	80112b0 <lwip_htons>
 8016a10:	4603      	mov	r3, r0
 8016a12:	b21b      	sxth	r3, r3
 8016a14:	4323      	orrs	r3, r4
 8016a16:	b21a      	sxth	r2, r3
 8016a18:	4b57      	ldr	r3, [pc, #348]	; (8016b78 <tcp_receive+0x88c>)
 8016a1a:	68db      	ldr	r3, [r3, #12]
 8016a1c:	b292      	uxth	r2, r2
 8016a1e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016a24:	4b54      	ldr	r3, [pc, #336]	; (8016b78 <tcp_receive+0x88c>)
 8016a26:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016a28:	4b53      	ldr	r3, [pc, #332]	; (8016b78 <tcp_receive+0x88c>)
 8016a2a:	68db      	ldr	r3, [r3, #12]
 8016a2c:	899b      	ldrh	r3, [r3, #12]
 8016a2e:	b29b      	uxth	r3, r3
 8016a30:	4618      	mov	r0, r3
 8016a32:	f7fa fc3d 	bl	80112b0 <lwip_htons>
 8016a36:	4603      	mov	r3, r0
 8016a38:	b2db      	uxtb	r3, r3
 8016a3a:	f003 0302 	and.w	r3, r3, #2
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d005      	beq.n	8016a4e <tcp_receive+0x762>
            inseg.len -= 1;
 8016a42:	4b4d      	ldr	r3, [pc, #308]	; (8016b78 <tcp_receive+0x88c>)
 8016a44:	891b      	ldrh	r3, [r3, #8]
 8016a46:	3b01      	subs	r3, #1
 8016a48:	b29a      	uxth	r2, r3
 8016a4a:	4b4b      	ldr	r3, [pc, #300]	; (8016b78 <tcp_receive+0x88c>)
 8016a4c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016a4e:	4b4a      	ldr	r3, [pc, #296]	; (8016b78 <tcp_receive+0x88c>)
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	4a49      	ldr	r2, [pc, #292]	; (8016b78 <tcp_receive+0x88c>)
 8016a54:	8912      	ldrh	r2, [r2, #8]
 8016a56:	4611      	mov	r1, r2
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7fb fed9 	bl	8012810 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016a5e:	4b46      	ldr	r3, [pc, #280]	; (8016b78 <tcp_receive+0x88c>)
 8016a60:	891c      	ldrh	r4, [r3, #8]
 8016a62:	4b45      	ldr	r3, [pc, #276]	; (8016b78 <tcp_receive+0x88c>)
 8016a64:	68db      	ldr	r3, [r3, #12]
 8016a66:	899b      	ldrh	r3, [r3, #12]
 8016a68:	b29b      	uxth	r3, r3
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7fa fc20 	bl	80112b0 <lwip_htons>
 8016a70:	4603      	mov	r3, r0
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	f003 0303 	and.w	r3, r3, #3
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d001      	beq.n	8016a80 <tcp_receive+0x794>
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	e000      	b.n	8016a82 <tcp_receive+0x796>
 8016a80:	2300      	movs	r3, #0
 8016a82:	4423      	add	r3, r4
 8016a84:	b29a      	uxth	r2, r3
 8016a86:	4b3d      	ldr	r3, [pc, #244]	; (8016b7c <tcp_receive+0x890>)
 8016a88:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016a8a:	4b3c      	ldr	r3, [pc, #240]	; (8016b7c <tcp_receive+0x890>)
 8016a8c:	881b      	ldrh	r3, [r3, #0]
 8016a8e:	461a      	mov	r2, r3
 8016a90:	4b38      	ldr	r3, [pc, #224]	; (8016b74 <tcp_receive+0x888>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	441a      	add	r2, r3
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a9a:	6879      	ldr	r1, [r7, #4]
 8016a9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016a9e:	440b      	add	r3, r1
 8016aa0:	429a      	cmp	r2, r3
 8016aa2:	d006      	beq.n	8016ab2 <tcp_receive+0x7c6>
 8016aa4:	4b36      	ldr	r3, [pc, #216]	; (8016b80 <tcp_receive+0x894>)
 8016aa6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8016aaa:	4936      	ldr	r1, [pc, #216]	; (8016b84 <tcp_receive+0x898>)
 8016aac:	4836      	ldr	r0, [pc, #216]	; (8016b88 <tcp_receive+0x89c>)
 8016aae:	f008 ff09 	bl	801f8c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	f000 80e7 	beq.w	8016c8a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016abc:	4b2e      	ldr	r3, [pc, #184]	; (8016b78 <tcp_receive+0x88c>)
 8016abe:	68db      	ldr	r3, [r3, #12]
 8016ac0:	899b      	ldrh	r3, [r3, #12]
 8016ac2:	b29b      	uxth	r3, r3
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f7fa fbf3 	bl	80112b0 <lwip_htons>
 8016aca:	4603      	mov	r3, r0
 8016acc:	b2db      	uxtb	r3, r3
 8016ace:	f003 0301 	and.w	r3, r3, #1
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d010      	beq.n	8016af8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016ad6:	e00a      	b.n	8016aee <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016adc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ae2:	681a      	ldr	r2, [r3, #0]
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016ae8:	68f8      	ldr	r0, [r7, #12]
 8016aea:	f7fd fcc4 	bl	8014476 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d1f0      	bne.n	8016ad8 <tcp_receive+0x7ec>
 8016af6:	e0c8      	b.n	8016c8a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016afc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016afe:	e052      	b.n	8016ba6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b02:	68db      	ldr	r3, [r3, #12]
 8016b04:	899b      	ldrh	r3, [r3, #12]
 8016b06:	b29b      	uxth	r3, r3
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f7fa fbd1 	bl	80112b0 <lwip_htons>
 8016b0e:	4603      	mov	r3, r0
 8016b10:	b2db      	uxtb	r3, r3
 8016b12:	f003 0301 	and.w	r3, r3, #1
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d03d      	beq.n	8016b96 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016b1a:	4b17      	ldr	r3, [pc, #92]	; (8016b78 <tcp_receive+0x88c>)
 8016b1c:	68db      	ldr	r3, [r3, #12]
 8016b1e:	899b      	ldrh	r3, [r3, #12]
 8016b20:	b29b      	uxth	r3, r3
 8016b22:	4618      	mov	r0, r3
 8016b24:	f7fa fbc4 	bl	80112b0 <lwip_htons>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	b2db      	uxtb	r3, r3
 8016b2c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d130      	bne.n	8016b96 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016b34:	4b10      	ldr	r3, [pc, #64]	; (8016b78 <tcp_receive+0x88c>)
 8016b36:	68db      	ldr	r3, [r3, #12]
 8016b38:	899b      	ldrh	r3, [r3, #12]
 8016b3a:	b29c      	uxth	r4, r3
 8016b3c:	2001      	movs	r0, #1
 8016b3e:	f7fa fbb7 	bl	80112b0 <lwip_htons>
 8016b42:	4603      	mov	r3, r0
 8016b44:	461a      	mov	r2, r3
 8016b46:	4b0c      	ldr	r3, [pc, #48]	; (8016b78 <tcp_receive+0x88c>)
 8016b48:	68db      	ldr	r3, [r3, #12]
 8016b4a:	4322      	orrs	r2, r4
 8016b4c:	b292      	uxth	r2, r2
 8016b4e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016b50:	4b09      	ldr	r3, [pc, #36]	; (8016b78 <tcp_receive+0x88c>)
 8016b52:	891c      	ldrh	r4, [r3, #8]
 8016b54:	4b08      	ldr	r3, [pc, #32]	; (8016b78 <tcp_receive+0x88c>)
 8016b56:	68db      	ldr	r3, [r3, #12]
 8016b58:	899b      	ldrh	r3, [r3, #12]
 8016b5a:	b29b      	uxth	r3, r3
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7fa fba7 	bl	80112b0 <lwip_htons>
 8016b62:	4603      	mov	r3, r0
 8016b64:	b2db      	uxtb	r3, r3
 8016b66:	f003 0303 	and.w	r3, r3, #3
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d00e      	beq.n	8016b8c <tcp_receive+0x8a0>
 8016b6e:	2301      	movs	r3, #1
 8016b70:	e00d      	b.n	8016b8e <tcp_receive+0x8a2>
 8016b72:	bf00      	nop
 8016b74:	20010200 	.word	0x20010200
 8016b78:	200101e0 	.word	0x200101e0
 8016b7c:	2001020a 	.word	0x2001020a
 8016b80:	08023518 	.word	0x08023518
 8016b84:	080238c0 	.word	0x080238c0
 8016b88:	08023564 	.word	0x08023564
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	4423      	add	r3, r4
 8016b90:	b29a      	uxth	r2, r3
 8016b92:	4b98      	ldr	r3, [pc, #608]	; (8016df4 <tcp_receive+0xb08>)
 8016b94:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b98:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016ba0:	6938      	ldr	r0, [r7, #16]
 8016ba2:	f7fd fc68 	bl	8014476 <tcp_seg_free>
            while (next &&
 8016ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d00e      	beq.n	8016bca <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016bac:	4b91      	ldr	r3, [pc, #580]	; (8016df4 <tcp_receive+0xb08>)
 8016bae:	881b      	ldrh	r3, [r3, #0]
 8016bb0:	461a      	mov	r2, r3
 8016bb2:	4b91      	ldr	r3, [pc, #580]	; (8016df8 <tcp_receive+0xb0c>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	441a      	add	r2, r3
 8016bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bba:	68db      	ldr	r3, [r3, #12]
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016bc0:	8909      	ldrh	r1, [r1, #8]
 8016bc2:	440b      	add	r3, r1
 8016bc4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	da9a      	bge.n	8016b00 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d059      	beq.n	8016c84 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016bd0:	4b88      	ldr	r3, [pc, #544]	; (8016df4 <tcp_receive+0xb08>)
 8016bd2:	881b      	ldrh	r3, [r3, #0]
 8016bd4:	461a      	mov	r2, r3
 8016bd6:	4b88      	ldr	r3, [pc, #544]	; (8016df8 <tcp_receive+0xb0c>)
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	441a      	add	r2, r3
 8016bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bde:	68db      	ldr	r3, [r3, #12]
 8016be0:	685b      	ldr	r3, [r3, #4]
 8016be2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	dd4d      	ble.n	8016c84 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bea:	68db      	ldr	r3, [r3, #12]
 8016bec:	685b      	ldr	r3, [r3, #4]
 8016bee:	b29a      	uxth	r2, r3
 8016bf0:	4b81      	ldr	r3, [pc, #516]	; (8016df8 <tcp_receive+0xb0c>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	1ad3      	subs	r3, r2, r3
 8016bf8:	b29a      	uxth	r2, r3
 8016bfa:	4b80      	ldr	r3, [pc, #512]	; (8016dfc <tcp_receive+0xb10>)
 8016bfc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016bfe:	4b7f      	ldr	r3, [pc, #508]	; (8016dfc <tcp_receive+0xb10>)
 8016c00:	68db      	ldr	r3, [r3, #12]
 8016c02:	899b      	ldrh	r3, [r3, #12]
 8016c04:	b29b      	uxth	r3, r3
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7fa fb52 	bl	80112b0 <lwip_htons>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	b2db      	uxtb	r3, r3
 8016c10:	f003 0302 	and.w	r3, r3, #2
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d005      	beq.n	8016c24 <tcp_receive+0x938>
                inseg.len -= 1;
 8016c18:	4b78      	ldr	r3, [pc, #480]	; (8016dfc <tcp_receive+0xb10>)
 8016c1a:	891b      	ldrh	r3, [r3, #8]
 8016c1c:	3b01      	subs	r3, #1
 8016c1e:	b29a      	uxth	r2, r3
 8016c20:	4b76      	ldr	r3, [pc, #472]	; (8016dfc <tcp_receive+0xb10>)
 8016c22:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016c24:	4b75      	ldr	r3, [pc, #468]	; (8016dfc <tcp_receive+0xb10>)
 8016c26:	685b      	ldr	r3, [r3, #4]
 8016c28:	4a74      	ldr	r2, [pc, #464]	; (8016dfc <tcp_receive+0xb10>)
 8016c2a:	8912      	ldrh	r2, [r2, #8]
 8016c2c:	4611      	mov	r1, r2
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7fb fdee 	bl	8012810 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016c34:	4b71      	ldr	r3, [pc, #452]	; (8016dfc <tcp_receive+0xb10>)
 8016c36:	891c      	ldrh	r4, [r3, #8]
 8016c38:	4b70      	ldr	r3, [pc, #448]	; (8016dfc <tcp_receive+0xb10>)
 8016c3a:	68db      	ldr	r3, [r3, #12]
 8016c3c:	899b      	ldrh	r3, [r3, #12]
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7fa fb35 	bl	80112b0 <lwip_htons>
 8016c46:	4603      	mov	r3, r0
 8016c48:	b2db      	uxtb	r3, r3
 8016c4a:	f003 0303 	and.w	r3, r3, #3
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d001      	beq.n	8016c56 <tcp_receive+0x96a>
 8016c52:	2301      	movs	r3, #1
 8016c54:	e000      	b.n	8016c58 <tcp_receive+0x96c>
 8016c56:	2300      	movs	r3, #0
 8016c58:	4423      	add	r3, r4
 8016c5a:	b29a      	uxth	r2, r3
 8016c5c:	4b65      	ldr	r3, [pc, #404]	; (8016df4 <tcp_receive+0xb08>)
 8016c5e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016c60:	4b64      	ldr	r3, [pc, #400]	; (8016df4 <tcp_receive+0xb08>)
 8016c62:	881b      	ldrh	r3, [r3, #0]
 8016c64:	461a      	mov	r2, r3
 8016c66:	4b64      	ldr	r3, [pc, #400]	; (8016df8 <tcp_receive+0xb0c>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	441a      	add	r2, r3
 8016c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c6e:	68db      	ldr	r3, [r3, #12]
 8016c70:	685b      	ldr	r3, [r3, #4]
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d006      	beq.n	8016c84 <tcp_receive+0x998>
 8016c76:	4b62      	ldr	r3, [pc, #392]	; (8016e00 <tcp_receive+0xb14>)
 8016c78:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016c7c:	4961      	ldr	r1, [pc, #388]	; (8016e04 <tcp_receive+0xb18>)
 8016c7e:	4862      	ldr	r0, [pc, #392]	; (8016e08 <tcp_receive+0xb1c>)
 8016c80:	f008 fe20 	bl	801f8c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016c88:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016c8a:	4b5a      	ldr	r3, [pc, #360]	; (8016df4 <tcp_receive+0xb08>)
 8016c8c:	881b      	ldrh	r3, [r3, #0]
 8016c8e:	461a      	mov	r2, r3
 8016c90:	4b59      	ldr	r3, [pc, #356]	; (8016df8 <tcp_receive+0xb0c>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	441a      	add	r2, r3
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016c9e:	4b55      	ldr	r3, [pc, #340]	; (8016df4 <tcp_receive+0xb08>)
 8016ca0:	881b      	ldrh	r3, [r3, #0]
 8016ca2:	429a      	cmp	r2, r3
 8016ca4:	d206      	bcs.n	8016cb4 <tcp_receive+0x9c8>
 8016ca6:	4b56      	ldr	r3, [pc, #344]	; (8016e00 <tcp_receive+0xb14>)
 8016ca8:	f240 6207 	movw	r2, #1543	; 0x607
 8016cac:	4957      	ldr	r1, [pc, #348]	; (8016e0c <tcp_receive+0xb20>)
 8016cae:	4856      	ldr	r0, [pc, #344]	; (8016e08 <tcp_receive+0xb1c>)
 8016cb0:	f008 fe08 	bl	801f8c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016cb8:	4b4e      	ldr	r3, [pc, #312]	; (8016df4 <tcp_receive+0xb08>)
 8016cba:	881b      	ldrh	r3, [r3, #0]
 8016cbc:	1ad3      	subs	r3, r2, r3
 8016cbe:	b29a      	uxth	r2, r3
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f7fc feb1 	bl	8013a2c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016cca:	4b4c      	ldr	r3, [pc, #304]	; (8016dfc <tcp_receive+0xb10>)
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	891b      	ldrh	r3, [r3, #8]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d006      	beq.n	8016ce2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8016cd4:	4b49      	ldr	r3, [pc, #292]	; (8016dfc <tcp_receive+0xb10>)
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	4a4d      	ldr	r2, [pc, #308]	; (8016e10 <tcp_receive+0xb24>)
 8016cda:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016cdc:	4b47      	ldr	r3, [pc, #284]	; (8016dfc <tcp_receive+0xb10>)
 8016cde:	2200      	movs	r2, #0
 8016ce0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016ce2:	4b46      	ldr	r3, [pc, #280]	; (8016dfc <tcp_receive+0xb10>)
 8016ce4:	68db      	ldr	r3, [r3, #12]
 8016ce6:	899b      	ldrh	r3, [r3, #12]
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7fa fae0 	bl	80112b0 <lwip_htons>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	b2db      	uxtb	r3, r3
 8016cf4:	f003 0301 	and.w	r3, r3, #1
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	f000 80b8 	beq.w	8016e6e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016cfe:	4b45      	ldr	r3, [pc, #276]	; (8016e14 <tcp_receive+0xb28>)
 8016d00:	781b      	ldrb	r3, [r3, #0]
 8016d02:	f043 0320 	orr.w	r3, r3, #32
 8016d06:	b2da      	uxtb	r2, r3
 8016d08:	4b42      	ldr	r3, [pc, #264]	; (8016e14 <tcp_receive+0xb28>)
 8016d0a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016d0c:	e0af      	b.n	8016e6e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d12:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016d18:	68db      	ldr	r3, [r3, #12]
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	4a36      	ldr	r2, [pc, #216]	; (8016df8 <tcp_receive+0xb0c>)
 8016d1e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016d20:	68bb      	ldr	r3, [r7, #8]
 8016d22:	891b      	ldrh	r3, [r3, #8]
 8016d24:	461c      	mov	r4, r3
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	68db      	ldr	r3, [r3, #12]
 8016d2a:	899b      	ldrh	r3, [r3, #12]
 8016d2c:	b29b      	uxth	r3, r3
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7fa fabe 	bl	80112b0 <lwip_htons>
 8016d34:	4603      	mov	r3, r0
 8016d36:	b2db      	uxtb	r3, r3
 8016d38:	f003 0303 	and.w	r3, r3, #3
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d001      	beq.n	8016d44 <tcp_receive+0xa58>
 8016d40:	2301      	movs	r3, #1
 8016d42:	e000      	b.n	8016d46 <tcp_receive+0xa5a>
 8016d44:	2300      	movs	r3, #0
 8016d46:	191a      	adds	r2, r3, r4
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d4c:	441a      	add	r2, r3
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d56:	461c      	mov	r4, r3
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	891b      	ldrh	r3, [r3, #8]
 8016d5c:	461d      	mov	r5, r3
 8016d5e:	68bb      	ldr	r3, [r7, #8]
 8016d60:	68db      	ldr	r3, [r3, #12]
 8016d62:	899b      	ldrh	r3, [r3, #12]
 8016d64:	b29b      	uxth	r3, r3
 8016d66:	4618      	mov	r0, r3
 8016d68:	f7fa faa2 	bl	80112b0 <lwip_htons>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	f003 0303 	and.w	r3, r3, #3
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d001      	beq.n	8016d7c <tcp_receive+0xa90>
 8016d78:	2301      	movs	r3, #1
 8016d7a:	e000      	b.n	8016d7e <tcp_receive+0xa92>
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	442b      	add	r3, r5
 8016d80:	429c      	cmp	r4, r3
 8016d82:	d206      	bcs.n	8016d92 <tcp_receive+0xaa6>
 8016d84:	4b1e      	ldr	r3, [pc, #120]	; (8016e00 <tcp_receive+0xb14>)
 8016d86:	f240 622b 	movw	r2, #1579	; 0x62b
 8016d8a:	4923      	ldr	r1, [pc, #140]	; (8016e18 <tcp_receive+0xb2c>)
 8016d8c:	481e      	ldr	r0, [pc, #120]	; (8016e08 <tcp_receive+0xb1c>)
 8016d8e:	f008 fd99 	bl	801f8c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016d92:	68bb      	ldr	r3, [r7, #8]
 8016d94:	891b      	ldrh	r3, [r3, #8]
 8016d96:	461c      	mov	r4, r3
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	899b      	ldrh	r3, [r3, #12]
 8016d9e:	b29b      	uxth	r3, r3
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7fa fa85 	bl	80112b0 <lwip_htons>
 8016da6:	4603      	mov	r3, r0
 8016da8:	b2db      	uxtb	r3, r3
 8016daa:	f003 0303 	and.w	r3, r3, #3
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d001      	beq.n	8016db6 <tcp_receive+0xaca>
 8016db2:	2301      	movs	r3, #1
 8016db4:	e000      	b.n	8016db8 <tcp_receive+0xacc>
 8016db6:	2300      	movs	r3, #0
 8016db8:	1919      	adds	r1, r3, r4
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016dbe:	b28b      	uxth	r3, r1
 8016dc0:	1ad3      	subs	r3, r2, r3
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f7fc fe2f 	bl	8013a2c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	685b      	ldr	r3, [r3, #4]
 8016dd2:	891b      	ldrh	r3, [r3, #8]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d028      	beq.n	8016e2a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016dd8:	4b0d      	ldr	r3, [pc, #52]	; (8016e10 <tcp_receive+0xb24>)
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d01d      	beq.n	8016e1c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016de0:	4b0b      	ldr	r3, [pc, #44]	; (8016e10 <tcp_receive+0xb24>)
 8016de2:	681a      	ldr	r2, [r3, #0]
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	4619      	mov	r1, r3
 8016dea:	4610      	mov	r0, r2
 8016dec:	f7fb ff64 	bl	8012cb8 <pbuf_cat>
 8016df0:	e018      	b.n	8016e24 <tcp_receive+0xb38>
 8016df2:	bf00      	nop
 8016df4:	2001020a 	.word	0x2001020a
 8016df8:	20010200 	.word	0x20010200
 8016dfc:	200101e0 	.word	0x200101e0
 8016e00:	08023518 	.word	0x08023518
 8016e04:	080238f8 	.word	0x080238f8
 8016e08:	08023564 	.word	0x08023564
 8016e0c:	08023934 	.word	0x08023934
 8016e10:	20010210 	.word	0x20010210
 8016e14:	2001020d 	.word	0x2001020d
 8016e18:	08023954 	.word	0x08023954
            } else {
              recv_data = cseg->p;
 8016e1c:	68bb      	ldr	r3, [r7, #8]
 8016e1e:	685b      	ldr	r3, [r3, #4]
 8016e20:	4a70      	ldr	r2, [pc, #448]	; (8016fe4 <tcp_receive+0xcf8>)
 8016e22:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016e24:	68bb      	ldr	r3, [r7, #8]
 8016e26:	2200      	movs	r2, #0
 8016e28:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016e2a:	68bb      	ldr	r3, [r7, #8]
 8016e2c:	68db      	ldr	r3, [r3, #12]
 8016e2e:	899b      	ldrh	r3, [r3, #12]
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	4618      	mov	r0, r3
 8016e34:	f7fa fa3c 	bl	80112b0 <lwip_htons>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	b2db      	uxtb	r3, r3
 8016e3c:	f003 0301 	and.w	r3, r3, #1
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d00d      	beq.n	8016e60 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016e44:	4b68      	ldr	r3, [pc, #416]	; (8016fe8 <tcp_receive+0xcfc>)
 8016e46:	781b      	ldrb	r3, [r3, #0]
 8016e48:	f043 0320 	orr.w	r3, r3, #32
 8016e4c:	b2da      	uxtb	r2, r3
 8016e4e:	4b66      	ldr	r3, [pc, #408]	; (8016fe8 <tcp_receive+0xcfc>)
 8016e50:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	7d1b      	ldrb	r3, [r3, #20]
 8016e56:	2b04      	cmp	r3, #4
 8016e58:	d102      	bne.n	8016e60 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	2207      	movs	r2, #7
 8016e5e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	681a      	ldr	r2, [r3, #0]
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016e68:	68b8      	ldr	r0, [r7, #8]
 8016e6a:	f7fd fb04 	bl	8014476 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d008      	beq.n	8016e88 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e7a:	68db      	ldr	r3, [r3, #12]
 8016e7c:	685a      	ldr	r2, [r3, #4]
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8016e82:	429a      	cmp	r2, r3
 8016e84:	f43f af43 	beq.w	8016d0e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	8b5b      	ldrh	r3, [r3, #26]
 8016e8c:	f003 0301 	and.w	r3, r3, #1
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d00e      	beq.n	8016eb2 <tcp_receive+0xbc6>
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	8b5b      	ldrh	r3, [r3, #26]
 8016e98:	f023 0301 	bic.w	r3, r3, #1
 8016e9c:	b29a      	uxth	r2, r3
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	835a      	strh	r2, [r3, #26]
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	8b5b      	ldrh	r3, [r3, #26]
 8016ea6:	f043 0302 	orr.w	r3, r3, #2
 8016eaa:	b29a      	uxth	r2, r3
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016eb0:	e188      	b.n	80171c4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	8b5b      	ldrh	r3, [r3, #26]
 8016eb6:	f043 0301 	orr.w	r3, r3, #1
 8016eba:	b29a      	uxth	r2, r3
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016ec0:	e180      	b.n	80171c4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d106      	bne.n	8016ed8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016eca:	4848      	ldr	r0, [pc, #288]	; (8016fec <tcp_receive+0xd00>)
 8016ecc:	f7fd faec 	bl	80144a8 <tcp_seg_copy>
 8016ed0:	4602      	mov	r2, r0
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	675a      	str	r2, [r3, #116]	; 0x74
 8016ed6:	e16d      	b.n	80171b4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8016ee2:	e157      	b.n	8017194 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	685a      	ldr	r2, [r3, #4]
 8016eea:	4b41      	ldr	r3, [pc, #260]	; (8016ff0 <tcp_receive+0xd04>)
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	429a      	cmp	r2, r3
 8016ef0:	d11d      	bne.n	8016f2e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016ef2:	4b3e      	ldr	r3, [pc, #248]	; (8016fec <tcp_receive+0xd00>)
 8016ef4:	891a      	ldrh	r2, [r3, #8]
 8016ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef8:	891b      	ldrh	r3, [r3, #8]
 8016efa:	429a      	cmp	r2, r3
 8016efc:	f240 814f 	bls.w	801719e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016f00:	483a      	ldr	r0, [pc, #232]	; (8016fec <tcp_receive+0xd00>)
 8016f02:	f7fd fad1 	bl	80144a8 <tcp_seg_copy>
 8016f06:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016f08:	697b      	ldr	r3, [r7, #20]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	f000 8149 	beq.w	80171a2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8016f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d003      	beq.n	8016f1e <tcp_receive+0xc32>
                    prev->next = cseg;
 8016f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f18:	697a      	ldr	r2, [r7, #20]
 8016f1a:	601a      	str	r2, [r3, #0]
 8016f1c:	e002      	b.n	8016f24 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	697a      	ldr	r2, [r7, #20]
 8016f22:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016f24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016f26:	6978      	ldr	r0, [r7, #20]
 8016f28:	f7ff f8dc 	bl	80160e4 <tcp_oos_insert_segment>
                }
                break;
 8016f2c:	e139      	b.n	80171a2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d117      	bne.n	8016f64 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016f34:	4b2e      	ldr	r3, [pc, #184]	; (8016ff0 <tcp_receive+0xd04>)
 8016f36:	681a      	ldr	r2, [r3, #0]
 8016f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3a:	68db      	ldr	r3, [r3, #12]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	1ad3      	subs	r3, r2, r3
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	da57      	bge.n	8016ff4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016f44:	4829      	ldr	r0, [pc, #164]	; (8016fec <tcp_receive+0xd00>)
 8016f46:	f7fd faaf 	bl	80144a8 <tcp_seg_copy>
 8016f4a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016f4c:	69bb      	ldr	r3, [r7, #24]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	f000 8129 	beq.w	80171a6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	69ba      	ldr	r2, [r7, #24]
 8016f58:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016f5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016f5c:	69b8      	ldr	r0, [r7, #24]
 8016f5e:	f7ff f8c1 	bl	80160e4 <tcp_oos_insert_segment>
                  }
                  break;
 8016f62:	e120      	b.n	80171a6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016f64:	4b22      	ldr	r3, [pc, #136]	; (8016ff0 <tcp_receive+0xd04>)
 8016f66:	681a      	ldr	r2, [r3, #0]
 8016f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f6a:	68db      	ldr	r3, [r3, #12]
 8016f6c:	685b      	ldr	r3, [r3, #4]
 8016f6e:	1ad3      	subs	r3, r2, r3
 8016f70:	3b01      	subs	r3, #1
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	db3e      	blt.n	8016ff4 <tcp_receive+0xd08>
 8016f76:	4b1e      	ldr	r3, [pc, #120]	; (8016ff0 <tcp_receive+0xd04>)
 8016f78:	681a      	ldr	r2, [r3, #0]
 8016f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f7c:	68db      	ldr	r3, [r3, #12]
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	1ad3      	subs	r3, r2, r3
 8016f82:	3301      	adds	r3, #1
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	dc35      	bgt.n	8016ff4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016f88:	4818      	ldr	r0, [pc, #96]	; (8016fec <tcp_receive+0xd00>)
 8016f8a:	f7fd fa8d 	bl	80144a8 <tcp_seg_copy>
 8016f8e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016f90:	69fb      	ldr	r3, [r7, #28]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	f000 8109 	beq.w	80171aa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f9a:	68db      	ldr	r3, [r3, #12]
 8016f9c:	685b      	ldr	r3, [r3, #4]
 8016f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016fa0:	8912      	ldrh	r2, [r2, #8]
 8016fa2:	441a      	add	r2, r3
 8016fa4:	4b12      	ldr	r3, [pc, #72]	; (8016ff0 <tcp_receive+0xd04>)
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	1ad3      	subs	r3, r2, r3
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	dd12      	ble.n	8016fd4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016fae:	4b10      	ldr	r3, [pc, #64]	; (8016ff0 <tcp_receive+0xd04>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	b29a      	uxth	r2, r3
 8016fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fb6:	68db      	ldr	r3, [r3, #12]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	1ad3      	subs	r3, r2, r3
 8016fbe:	b29a      	uxth	r2, r3
 8016fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fc2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fc6:	685a      	ldr	r2, [r3, #4]
 8016fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fca:	891b      	ldrh	r3, [r3, #8]
 8016fcc:	4619      	mov	r1, r3
 8016fce:	4610      	mov	r0, r2
 8016fd0:	f7fb fc1e 	bl	8012810 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fd6:	69fa      	ldr	r2, [r7, #28]
 8016fd8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016fda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016fdc:	69f8      	ldr	r0, [r7, #28]
 8016fde:	f7ff f881 	bl	80160e4 <tcp_oos_insert_segment>
                  }
                  break;
 8016fe2:	e0e2      	b.n	80171aa <tcp_receive+0xebe>
 8016fe4:	20010210 	.word	0x20010210
 8016fe8:	2001020d 	.word	0x2001020d
 8016fec:	200101e0 	.word	0x200101e0
 8016ff0:	20010200 	.word	0x20010200
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ff6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	f040 80c6 	bne.w	801718e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017002:	4b80      	ldr	r3, [pc, #512]	; (8017204 <tcp_receive+0xf18>)
 8017004:	681a      	ldr	r2, [r3, #0]
 8017006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017008:	68db      	ldr	r3, [r3, #12]
 801700a:	685b      	ldr	r3, [r3, #4]
 801700c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801700e:	2b00      	cmp	r3, #0
 8017010:	f340 80bd 	ble.w	801718e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017016:	68db      	ldr	r3, [r3, #12]
 8017018:	899b      	ldrh	r3, [r3, #12]
 801701a:	b29b      	uxth	r3, r3
 801701c:	4618      	mov	r0, r3
 801701e:	f7fa f947 	bl	80112b0 <lwip_htons>
 8017022:	4603      	mov	r3, r0
 8017024:	b2db      	uxtb	r3, r3
 8017026:	f003 0301 	and.w	r3, r3, #1
 801702a:	2b00      	cmp	r3, #0
 801702c:	f040 80bf 	bne.w	80171ae <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017030:	4875      	ldr	r0, [pc, #468]	; (8017208 <tcp_receive+0xf1c>)
 8017032:	f7fd fa39 	bl	80144a8 <tcp_seg_copy>
 8017036:	4602      	mov	r2, r0
 8017038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801703a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	2b00      	cmp	r3, #0
 8017042:	f000 80b6 	beq.w	80171b2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8017046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017048:	68db      	ldr	r3, [r3, #12]
 801704a:	685b      	ldr	r3, [r3, #4]
 801704c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801704e:	8912      	ldrh	r2, [r2, #8]
 8017050:	441a      	add	r2, r3
 8017052:	4b6c      	ldr	r3, [pc, #432]	; (8017204 <tcp_receive+0xf18>)
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	1ad3      	subs	r3, r2, r3
 8017058:	2b00      	cmp	r3, #0
 801705a:	dd12      	ble.n	8017082 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801705c:	4b69      	ldr	r3, [pc, #420]	; (8017204 <tcp_receive+0xf18>)
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	b29a      	uxth	r2, r3
 8017062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017064:	68db      	ldr	r3, [r3, #12]
 8017066:	685b      	ldr	r3, [r3, #4]
 8017068:	b29b      	uxth	r3, r3
 801706a:	1ad3      	subs	r3, r2, r3
 801706c:	b29a      	uxth	r2, r3
 801706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017070:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017074:	685a      	ldr	r2, [r3, #4]
 8017076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017078:	891b      	ldrh	r3, [r3, #8]
 801707a:	4619      	mov	r1, r3
 801707c:	4610      	mov	r0, r2
 801707e:	f7fb fbc7 	bl	8012810 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8017082:	4b62      	ldr	r3, [pc, #392]	; (801720c <tcp_receive+0xf20>)
 8017084:	881b      	ldrh	r3, [r3, #0]
 8017086:	461a      	mov	r2, r3
 8017088:	4b5e      	ldr	r3, [pc, #376]	; (8017204 <tcp_receive+0xf18>)
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	441a      	add	r2, r3
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017092:	6879      	ldr	r1, [r7, #4]
 8017094:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017096:	440b      	add	r3, r1
 8017098:	1ad3      	subs	r3, r2, r3
 801709a:	2b00      	cmp	r3, #0
 801709c:	f340 8089 	ble.w	80171b2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80170a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	68db      	ldr	r3, [r3, #12]
 80170a6:	899b      	ldrh	r3, [r3, #12]
 80170a8:	b29b      	uxth	r3, r3
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7fa f900 	bl	80112b0 <lwip_htons>
 80170b0:	4603      	mov	r3, r0
 80170b2:	b2db      	uxtb	r3, r3
 80170b4:	f003 0301 	and.w	r3, r3, #1
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d022      	beq.n	8017102 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80170bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	68db      	ldr	r3, [r3, #12]
 80170c2:	899b      	ldrh	r3, [r3, #12]
 80170c4:	b29b      	uxth	r3, r3
 80170c6:	b21b      	sxth	r3, r3
 80170c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80170cc:	b21c      	sxth	r4, r3
 80170ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	68db      	ldr	r3, [r3, #12]
 80170d4:	899b      	ldrh	r3, [r3, #12]
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	4618      	mov	r0, r3
 80170da:	f7fa f8e9 	bl	80112b0 <lwip_htons>
 80170de:	4603      	mov	r3, r0
 80170e0:	b2db      	uxtb	r3, r3
 80170e2:	b29b      	uxth	r3, r3
 80170e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80170e8:	b29b      	uxth	r3, r3
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7fa f8e0 	bl	80112b0 <lwip_htons>
 80170f0:	4603      	mov	r3, r0
 80170f2:	b21b      	sxth	r3, r3
 80170f4:	4323      	orrs	r3, r4
 80170f6:	b21a      	sxth	r2, r3
 80170f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	68db      	ldr	r3, [r3, #12]
 80170fe:	b292      	uxth	r2, r2
 8017100:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017106:	b29a      	uxth	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801710c:	4413      	add	r3, r2
 801710e:	b299      	uxth	r1, r3
 8017110:	4b3c      	ldr	r3, [pc, #240]	; (8017204 <tcp_receive+0xf18>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	b29a      	uxth	r2, r3
 8017116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	1a8a      	subs	r2, r1, r2
 801711c:	b292      	uxth	r2, r2
 801711e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	685a      	ldr	r2, [r3, #4]
 8017126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	891b      	ldrh	r3, [r3, #8]
 801712c:	4619      	mov	r1, r3
 801712e:	4610      	mov	r0, r2
 8017130:	f7fb fb6e 	bl	8012810 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	891c      	ldrh	r4, [r3, #8]
 801713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	68db      	ldr	r3, [r3, #12]
 8017140:	899b      	ldrh	r3, [r3, #12]
 8017142:	b29b      	uxth	r3, r3
 8017144:	4618      	mov	r0, r3
 8017146:	f7fa f8b3 	bl	80112b0 <lwip_htons>
 801714a:	4603      	mov	r3, r0
 801714c:	b2db      	uxtb	r3, r3
 801714e:	f003 0303 	and.w	r3, r3, #3
 8017152:	2b00      	cmp	r3, #0
 8017154:	d001      	beq.n	801715a <tcp_receive+0xe6e>
 8017156:	2301      	movs	r3, #1
 8017158:	e000      	b.n	801715c <tcp_receive+0xe70>
 801715a:	2300      	movs	r3, #0
 801715c:	4423      	add	r3, r4
 801715e:	b29a      	uxth	r2, r3
 8017160:	4b2a      	ldr	r3, [pc, #168]	; (801720c <tcp_receive+0xf20>)
 8017162:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017164:	4b29      	ldr	r3, [pc, #164]	; (801720c <tcp_receive+0xf20>)
 8017166:	881b      	ldrh	r3, [r3, #0]
 8017168:	461a      	mov	r2, r3
 801716a:	4b26      	ldr	r3, [pc, #152]	; (8017204 <tcp_receive+0xf18>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	441a      	add	r2, r3
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017174:	6879      	ldr	r1, [r7, #4]
 8017176:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017178:	440b      	add	r3, r1
 801717a:	429a      	cmp	r2, r3
 801717c:	d019      	beq.n	80171b2 <tcp_receive+0xec6>
 801717e:	4b24      	ldr	r3, [pc, #144]	; (8017210 <tcp_receive+0xf24>)
 8017180:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8017184:	4923      	ldr	r1, [pc, #140]	; (8017214 <tcp_receive+0xf28>)
 8017186:	4824      	ldr	r0, [pc, #144]	; (8017218 <tcp_receive+0xf2c>)
 8017188:	f008 fb9c 	bl	801f8c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801718c:	e011      	b.n	80171b2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	63bb      	str	r3, [r7, #56]	; 0x38
 8017194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017196:	2b00      	cmp	r3, #0
 8017198:	f47f aea4 	bne.w	8016ee4 <tcp_receive+0xbf8>
 801719c:	e00a      	b.n	80171b4 <tcp_receive+0xec8>
                break;
 801719e:	bf00      	nop
 80171a0:	e008      	b.n	80171b4 <tcp_receive+0xec8>
                break;
 80171a2:	bf00      	nop
 80171a4:	e006      	b.n	80171b4 <tcp_receive+0xec8>
                  break;
 80171a6:	bf00      	nop
 80171a8:	e004      	b.n	80171b4 <tcp_receive+0xec8>
                  break;
 80171aa:	bf00      	nop
 80171ac:	e002      	b.n	80171b4 <tcp_receive+0xec8>
                  break;
 80171ae:	bf00      	nop
 80171b0:	e000      	b.n	80171b4 <tcp_receive+0xec8>
                break;
 80171b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f001 fe8b 	bl	8018ed0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80171ba:	e003      	b.n	80171c4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80171bc:	6878      	ldr	r0, [r7, #4]
 80171be:	f001 fe87 	bl	8018ed0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80171c2:	e01a      	b.n	80171fa <tcp_receive+0xf0e>
 80171c4:	e019      	b.n	80171fa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80171c6:	4b0f      	ldr	r3, [pc, #60]	; (8017204 <tcp_receive+0xf18>)
 80171c8:	681a      	ldr	r2, [r3, #0]
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171ce:	1ad3      	subs	r3, r2, r3
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	db0a      	blt.n	80171ea <tcp_receive+0xefe>
 80171d4:	4b0b      	ldr	r3, [pc, #44]	; (8017204 <tcp_receive+0xf18>)
 80171d6:	681a      	ldr	r2, [r3, #0]
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171dc:	6879      	ldr	r1, [r7, #4]
 80171de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80171e0:	440b      	add	r3, r1
 80171e2:	1ad3      	subs	r3, r2, r3
 80171e4:	3301      	adds	r3, #1
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	dd07      	ble.n	80171fa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	8b5b      	ldrh	r3, [r3, #26]
 80171ee:	f043 0302 	orr.w	r3, r3, #2
 80171f2:	b29a      	uxth	r2, r3
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80171f8:	e7ff      	b.n	80171fa <tcp_receive+0xf0e>
 80171fa:	bf00      	nop
 80171fc:	3750      	adds	r7, #80	; 0x50
 80171fe:	46bd      	mov	sp, r7
 8017200:	bdb0      	pop	{r4, r5, r7, pc}
 8017202:	bf00      	nop
 8017204:	20010200 	.word	0x20010200
 8017208:	200101e0 	.word	0x200101e0
 801720c:	2001020a 	.word	0x2001020a
 8017210:	08023518 	.word	0x08023518
 8017214:	080238c0 	.word	0x080238c0
 8017218:	08023564 	.word	0x08023564

0801721c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017222:	4b15      	ldr	r3, [pc, #84]	; (8017278 <tcp_get_next_optbyte+0x5c>)
 8017224:	881b      	ldrh	r3, [r3, #0]
 8017226:	1c5a      	adds	r2, r3, #1
 8017228:	b291      	uxth	r1, r2
 801722a:	4a13      	ldr	r2, [pc, #76]	; (8017278 <tcp_get_next_optbyte+0x5c>)
 801722c:	8011      	strh	r1, [r2, #0]
 801722e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017230:	4b12      	ldr	r3, [pc, #72]	; (801727c <tcp_get_next_optbyte+0x60>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d004      	beq.n	8017242 <tcp_get_next_optbyte+0x26>
 8017238:	4b11      	ldr	r3, [pc, #68]	; (8017280 <tcp_get_next_optbyte+0x64>)
 801723a:	881b      	ldrh	r3, [r3, #0]
 801723c:	88fa      	ldrh	r2, [r7, #6]
 801723e:	429a      	cmp	r2, r3
 8017240:	d208      	bcs.n	8017254 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017242:	4b10      	ldr	r3, [pc, #64]	; (8017284 <tcp_get_next_optbyte+0x68>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	3314      	adds	r3, #20
 8017248:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801724a:	88fb      	ldrh	r3, [r7, #6]
 801724c:	683a      	ldr	r2, [r7, #0]
 801724e:	4413      	add	r3, r2
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	e00b      	b.n	801726c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017254:	88fb      	ldrh	r3, [r7, #6]
 8017256:	b2da      	uxtb	r2, r3
 8017258:	4b09      	ldr	r3, [pc, #36]	; (8017280 <tcp_get_next_optbyte+0x64>)
 801725a:	881b      	ldrh	r3, [r3, #0]
 801725c:	b2db      	uxtb	r3, r3
 801725e:	1ad3      	subs	r3, r2, r3
 8017260:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017262:	4b06      	ldr	r3, [pc, #24]	; (801727c <tcp_get_next_optbyte+0x60>)
 8017264:	681a      	ldr	r2, [r3, #0]
 8017266:	797b      	ldrb	r3, [r7, #5]
 8017268:	4413      	add	r3, r2
 801726a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801726c:	4618      	mov	r0, r3
 801726e:	370c      	adds	r7, #12
 8017270:	46bd      	mov	sp, r7
 8017272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017276:	4770      	bx	lr
 8017278:	200101fc 	.word	0x200101fc
 801727c:	200101f8 	.word	0x200101f8
 8017280:	200101f6 	.word	0x200101f6
 8017284:	200101f0 	.word	0x200101f0

08017288 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b084      	sub	sp, #16
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d106      	bne.n	80172a4 <tcp_parseopt+0x1c>
 8017296:	4b32      	ldr	r3, [pc, #200]	; (8017360 <tcp_parseopt+0xd8>)
 8017298:	f240 727d 	movw	r2, #1917	; 0x77d
 801729c:	4931      	ldr	r1, [pc, #196]	; (8017364 <tcp_parseopt+0xdc>)
 801729e:	4832      	ldr	r0, [pc, #200]	; (8017368 <tcp_parseopt+0xe0>)
 80172a0:	f008 fb10 	bl	801f8c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80172a4:	4b31      	ldr	r3, [pc, #196]	; (801736c <tcp_parseopt+0xe4>)
 80172a6:	881b      	ldrh	r3, [r3, #0]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d055      	beq.n	8017358 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80172ac:	4b30      	ldr	r3, [pc, #192]	; (8017370 <tcp_parseopt+0xe8>)
 80172ae:	2200      	movs	r2, #0
 80172b0:	801a      	strh	r2, [r3, #0]
 80172b2:	e045      	b.n	8017340 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80172b4:	f7ff ffb2 	bl	801721c <tcp_get_next_optbyte>
 80172b8:	4603      	mov	r3, r0
 80172ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80172bc:	7bfb      	ldrb	r3, [r7, #15]
 80172be:	2b02      	cmp	r3, #2
 80172c0:	d006      	beq.n	80172d0 <tcp_parseopt+0x48>
 80172c2:	2b02      	cmp	r3, #2
 80172c4:	dc2b      	bgt.n	801731e <tcp_parseopt+0x96>
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d041      	beq.n	801734e <tcp_parseopt+0xc6>
 80172ca:	2b01      	cmp	r3, #1
 80172cc:	d127      	bne.n	801731e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80172ce:	e037      	b.n	8017340 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80172d0:	f7ff ffa4 	bl	801721c <tcp_get_next_optbyte>
 80172d4:	4603      	mov	r3, r0
 80172d6:	2b04      	cmp	r3, #4
 80172d8:	d13b      	bne.n	8017352 <tcp_parseopt+0xca>
 80172da:	4b25      	ldr	r3, [pc, #148]	; (8017370 <tcp_parseopt+0xe8>)
 80172dc:	881b      	ldrh	r3, [r3, #0]
 80172de:	3301      	adds	r3, #1
 80172e0:	4a22      	ldr	r2, [pc, #136]	; (801736c <tcp_parseopt+0xe4>)
 80172e2:	8812      	ldrh	r2, [r2, #0]
 80172e4:	4293      	cmp	r3, r2
 80172e6:	da34      	bge.n	8017352 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80172e8:	f7ff ff98 	bl	801721c <tcp_get_next_optbyte>
 80172ec:	4603      	mov	r3, r0
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	021b      	lsls	r3, r3, #8
 80172f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80172f4:	f7ff ff92 	bl	801721c <tcp_get_next_optbyte>
 80172f8:	4603      	mov	r3, r0
 80172fa:	b29a      	uxth	r2, r3
 80172fc:	89bb      	ldrh	r3, [r7, #12]
 80172fe:	4313      	orrs	r3, r2
 8017300:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017302:	89bb      	ldrh	r3, [r7, #12]
 8017304:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017308:	d804      	bhi.n	8017314 <tcp_parseopt+0x8c>
 801730a:	89bb      	ldrh	r3, [r7, #12]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d001      	beq.n	8017314 <tcp_parseopt+0x8c>
 8017310:	89ba      	ldrh	r2, [r7, #12]
 8017312:	e001      	b.n	8017318 <tcp_parseopt+0x90>
 8017314:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801731c:	e010      	b.n	8017340 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801731e:	f7ff ff7d 	bl	801721c <tcp_get_next_optbyte>
 8017322:	4603      	mov	r3, r0
 8017324:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017326:	7afb      	ldrb	r3, [r7, #11]
 8017328:	2b01      	cmp	r3, #1
 801732a:	d914      	bls.n	8017356 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801732c:	7afb      	ldrb	r3, [r7, #11]
 801732e:	b29a      	uxth	r2, r3
 8017330:	4b0f      	ldr	r3, [pc, #60]	; (8017370 <tcp_parseopt+0xe8>)
 8017332:	881b      	ldrh	r3, [r3, #0]
 8017334:	4413      	add	r3, r2
 8017336:	b29b      	uxth	r3, r3
 8017338:	3b02      	subs	r3, #2
 801733a:	b29a      	uxth	r2, r3
 801733c:	4b0c      	ldr	r3, [pc, #48]	; (8017370 <tcp_parseopt+0xe8>)
 801733e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017340:	4b0b      	ldr	r3, [pc, #44]	; (8017370 <tcp_parseopt+0xe8>)
 8017342:	881a      	ldrh	r2, [r3, #0]
 8017344:	4b09      	ldr	r3, [pc, #36]	; (801736c <tcp_parseopt+0xe4>)
 8017346:	881b      	ldrh	r3, [r3, #0]
 8017348:	429a      	cmp	r2, r3
 801734a:	d3b3      	bcc.n	80172b4 <tcp_parseopt+0x2c>
 801734c:	e004      	b.n	8017358 <tcp_parseopt+0xd0>
          return;
 801734e:	bf00      	nop
 8017350:	e002      	b.n	8017358 <tcp_parseopt+0xd0>
            return;
 8017352:	bf00      	nop
 8017354:	e000      	b.n	8017358 <tcp_parseopt+0xd0>
            return;
 8017356:	bf00      	nop
      }
    }
  }
}
 8017358:	3710      	adds	r7, #16
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}
 801735e:	bf00      	nop
 8017360:	08023518 	.word	0x08023518
 8017364:	0802397c 	.word	0x0802397c
 8017368:	08023564 	.word	0x08023564
 801736c:	200101f4 	.word	0x200101f4
 8017370:	200101fc 	.word	0x200101fc

08017374 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017374:	b480      	push	{r7}
 8017376:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017378:	4b05      	ldr	r3, [pc, #20]	; (8017390 <tcp_trigger_input_pcb_close+0x1c>)
 801737a:	781b      	ldrb	r3, [r3, #0]
 801737c:	f043 0310 	orr.w	r3, r3, #16
 8017380:	b2da      	uxtb	r2, r3
 8017382:	4b03      	ldr	r3, [pc, #12]	; (8017390 <tcp_trigger_input_pcb_close+0x1c>)
 8017384:	701a      	strb	r2, [r3, #0]
}
 8017386:	bf00      	nop
 8017388:	46bd      	mov	sp, r7
 801738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738e:	4770      	bx	lr
 8017390:	2001020d 	.word	0x2001020d

08017394 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b084      	sub	sp, #16
 8017398:	af00      	add	r7, sp, #0
 801739a:	60f8      	str	r0, [r7, #12]
 801739c:	60b9      	str	r1, [r7, #8]
 801739e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d00a      	beq.n	80173bc <tcp_route+0x28>
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	7a1b      	ldrb	r3, [r3, #8]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d006      	beq.n	80173bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	7a1b      	ldrb	r3, [r3, #8]
 80173b2:	4618      	mov	r0, r3
 80173b4:	f7fa ffec 	bl	8012390 <netif_get_by_index>
 80173b8:	4603      	mov	r3, r0
 80173ba:	e003      	b.n	80173c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f005 fcc3 	bl	801cd48 <ip4_route>
 80173c2:	4603      	mov	r3, r0
  }
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3710      	adds	r7, #16
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80173cc:	b590      	push	{r4, r7, lr}
 80173ce:	b087      	sub	sp, #28
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	603b      	str	r3, [r7, #0]
 80173d8:	4613      	mov	r3, r2
 80173da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d105      	bne.n	80173ee <tcp_create_segment+0x22>
 80173e2:	4b44      	ldr	r3, [pc, #272]	; (80174f4 <tcp_create_segment+0x128>)
 80173e4:	22a3      	movs	r2, #163	; 0xa3
 80173e6:	4944      	ldr	r1, [pc, #272]	; (80174f8 <tcp_create_segment+0x12c>)
 80173e8:	4844      	ldr	r0, [pc, #272]	; (80174fc <tcp_create_segment+0x130>)
 80173ea:	f008 fa6b 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80173ee:	68bb      	ldr	r3, [r7, #8]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d105      	bne.n	8017400 <tcp_create_segment+0x34>
 80173f4:	4b3f      	ldr	r3, [pc, #252]	; (80174f4 <tcp_create_segment+0x128>)
 80173f6:	22a4      	movs	r2, #164	; 0xa4
 80173f8:	4941      	ldr	r1, [pc, #260]	; (8017500 <tcp_create_segment+0x134>)
 80173fa:	4840      	ldr	r0, [pc, #256]	; (80174fc <tcp_create_segment+0x130>)
 80173fc:	f008 fa62 	bl	801f8c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017400:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017404:	009b      	lsls	r3, r3, #2
 8017406:	b2db      	uxtb	r3, r3
 8017408:	f003 0304 	and.w	r3, r3, #4
 801740c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801740e:	2003      	movs	r0, #3
 8017410:	f7fa fc26 	bl	8011c60 <memp_malloc>
 8017414:	6138      	str	r0, [r7, #16]
 8017416:	693b      	ldr	r3, [r7, #16]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d104      	bne.n	8017426 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801741c:	68b8      	ldr	r0, [r7, #8]
 801741e:	f7fb fb7d 	bl	8012b1c <pbuf_free>
    return NULL;
 8017422:	2300      	movs	r3, #0
 8017424:	e061      	b.n	80174ea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801742c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	2200      	movs	r2, #0
 8017432:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017434:	693b      	ldr	r3, [r7, #16]
 8017436:	68ba      	ldr	r2, [r7, #8]
 8017438:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	891a      	ldrh	r2, [r3, #8]
 801743e:	7dfb      	ldrb	r3, [r7, #23]
 8017440:	b29b      	uxth	r3, r3
 8017442:	429a      	cmp	r2, r3
 8017444:	d205      	bcs.n	8017452 <tcp_create_segment+0x86>
 8017446:	4b2b      	ldr	r3, [pc, #172]	; (80174f4 <tcp_create_segment+0x128>)
 8017448:	22b0      	movs	r2, #176	; 0xb0
 801744a:	492e      	ldr	r1, [pc, #184]	; (8017504 <tcp_create_segment+0x138>)
 801744c:	482b      	ldr	r0, [pc, #172]	; (80174fc <tcp_create_segment+0x130>)
 801744e:	f008 fa39 	bl	801f8c4 <iprintf>
  seg->len = p->tot_len - optlen;
 8017452:	68bb      	ldr	r3, [r7, #8]
 8017454:	891a      	ldrh	r2, [r3, #8]
 8017456:	7dfb      	ldrb	r3, [r7, #23]
 8017458:	b29b      	uxth	r3, r3
 801745a:	1ad3      	subs	r3, r2, r3
 801745c:	b29a      	uxth	r2, r3
 801745e:	693b      	ldr	r3, [r7, #16]
 8017460:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017462:	2114      	movs	r1, #20
 8017464:	68b8      	ldr	r0, [r7, #8]
 8017466:	f7fb fac3 	bl	80129f0 <pbuf_add_header>
 801746a:	4603      	mov	r3, r0
 801746c:	2b00      	cmp	r3, #0
 801746e:	d004      	beq.n	801747a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017470:	6938      	ldr	r0, [r7, #16]
 8017472:	f7fd f800 	bl	8014476 <tcp_seg_free>
    return NULL;
 8017476:	2300      	movs	r3, #0
 8017478:	e037      	b.n	80174ea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801747a:	693b      	ldr	r3, [r7, #16]
 801747c:	685b      	ldr	r3, [r3, #4]
 801747e:	685a      	ldr	r2, [r3, #4]
 8017480:	693b      	ldr	r3, [r7, #16]
 8017482:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	8ada      	ldrh	r2, [r3, #22]
 8017488:	693b      	ldr	r3, [r7, #16]
 801748a:	68dc      	ldr	r4, [r3, #12]
 801748c:	4610      	mov	r0, r2
 801748e:	f7f9 ff0f 	bl	80112b0 <lwip_htons>
 8017492:	4603      	mov	r3, r0
 8017494:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	8b1a      	ldrh	r2, [r3, #24]
 801749a:	693b      	ldr	r3, [r7, #16]
 801749c:	68dc      	ldr	r4, [r3, #12]
 801749e:	4610      	mov	r0, r2
 80174a0:	f7f9 ff06 	bl	80112b0 <lwip_htons>
 80174a4:	4603      	mov	r3, r0
 80174a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80174a8:	693b      	ldr	r3, [r7, #16]
 80174aa:	68dc      	ldr	r4, [r3, #12]
 80174ac:	6838      	ldr	r0, [r7, #0]
 80174ae:	f7f9 ff14 	bl	80112da <lwip_htonl>
 80174b2:	4603      	mov	r3, r0
 80174b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80174b6:	7dfb      	ldrb	r3, [r7, #23]
 80174b8:	089b      	lsrs	r3, r3, #2
 80174ba:	b2db      	uxtb	r3, r3
 80174bc:	b29b      	uxth	r3, r3
 80174be:	3305      	adds	r3, #5
 80174c0:	b29b      	uxth	r3, r3
 80174c2:	031b      	lsls	r3, r3, #12
 80174c4:	b29a      	uxth	r2, r3
 80174c6:	79fb      	ldrb	r3, [r7, #7]
 80174c8:	b29b      	uxth	r3, r3
 80174ca:	4313      	orrs	r3, r2
 80174cc:	b29a      	uxth	r2, r3
 80174ce:	693b      	ldr	r3, [r7, #16]
 80174d0:	68dc      	ldr	r4, [r3, #12]
 80174d2:	4610      	mov	r0, r2
 80174d4:	f7f9 feec 	bl	80112b0 <lwip_htons>
 80174d8:	4603      	mov	r3, r0
 80174da:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80174dc:	693b      	ldr	r3, [r7, #16]
 80174de:	68db      	ldr	r3, [r3, #12]
 80174e0:	2200      	movs	r2, #0
 80174e2:	749a      	strb	r2, [r3, #18]
 80174e4:	2200      	movs	r2, #0
 80174e6:	74da      	strb	r2, [r3, #19]
  return seg;
 80174e8:	693b      	ldr	r3, [r7, #16]
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	371c      	adds	r7, #28
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd90      	pop	{r4, r7, pc}
 80174f2:	bf00      	nop
 80174f4:	08023998 	.word	0x08023998
 80174f8:	080239cc 	.word	0x080239cc
 80174fc:	080239ec 	.word	0x080239ec
 8017500:	08023a14 	.word	0x08023a14
 8017504:	08023a38 	.word	0x08023a38

08017508 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b086      	sub	sp, #24
 801750c:	af00      	add	r7, sp, #0
 801750e:	607b      	str	r3, [r7, #4]
 8017510:	4603      	mov	r3, r0
 8017512:	73fb      	strb	r3, [r7, #15]
 8017514:	460b      	mov	r3, r1
 8017516:	81bb      	strh	r3, [r7, #12]
 8017518:	4613      	mov	r3, r2
 801751a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801751c:	89bb      	ldrh	r3, [r7, #12]
 801751e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d105      	bne.n	8017532 <tcp_pbuf_prealloc+0x2a>
 8017526:	4b30      	ldr	r3, [pc, #192]	; (80175e8 <tcp_pbuf_prealloc+0xe0>)
 8017528:	22e8      	movs	r2, #232	; 0xe8
 801752a:	4930      	ldr	r1, [pc, #192]	; (80175ec <tcp_pbuf_prealloc+0xe4>)
 801752c:	4830      	ldr	r0, [pc, #192]	; (80175f0 <tcp_pbuf_prealloc+0xe8>)
 801752e:	f008 f9c9 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017532:	6a3b      	ldr	r3, [r7, #32]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d105      	bne.n	8017544 <tcp_pbuf_prealloc+0x3c>
 8017538:	4b2b      	ldr	r3, [pc, #172]	; (80175e8 <tcp_pbuf_prealloc+0xe0>)
 801753a:	22e9      	movs	r2, #233	; 0xe9
 801753c:	492d      	ldr	r1, [pc, #180]	; (80175f4 <tcp_pbuf_prealloc+0xec>)
 801753e:	482c      	ldr	r0, [pc, #176]	; (80175f0 <tcp_pbuf_prealloc+0xe8>)
 8017540:	f008 f9c0 	bl	801f8c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017544:	89ba      	ldrh	r2, [r7, #12]
 8017546:	897b      	ldrh	r3, [r7, #10]
 8017548:	429a      	cmp	r2, r3
 801754a:	d221      	bcs.n	8017590 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801754c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017550:	f003 0302 	and.w	r3, r3, #2
 8017554:	2b00      	cmp	r3, #0
 8017556:	d111      	bne.n	801757c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017558:	6a3b      	ldr	r3, [r7, #32]
 801755a:	8b5b      	ldrh	r3, [r3, #26]
 801755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017560:	2b00      	cmp	r3, #0
 8017562:	d115      	bne.n	8017590 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017564:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017568:	2b00      	cmp	r3, #0
 801756a:	d007      	beq.n	801757c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801756c:	6a3b      	ldr	r3, [r7, #32]
 801756e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8017570:	2b00      	cmp	r3, #0
 8017572:	d103      	bne.n	801757c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017574:	6a3b      	ldr	r3, [r7, #32]
 8017576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8017578:	2b00      	cmp	r3, #0
 801757a:	d009      	beq.n	8017590 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801757c:	89bb      	ldrh	r3, [r7, #12]
 801757e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8017582:	f023 0203 	bic.w	r2, r3, #3
 8017586:	897b      	ldrh	r3, [r7, #10]
 8017588:	4293      	cmp	r3, r2
 801758a:	bf28      	it	cs
 801758c:	4613      	movcs	r3, r2
 801758e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017590:	8af9      	ldrh	r1, [r7, #22]
 8017592:	7bfb      	ldrb	r3, [r7, #15]
 8017594:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017598:	4618      	mov	r0, r3
 801759a:	f7fa ffdb 	bl	8012554 <pbuf_alloc>
 801759e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80175a0:	693b      	ldr	r3, [r7, #16]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d101      	bne.n	80175aa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80175a6:	2300      	movs	r3, #0
 80175a8:	e019      	b.n	80175de <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80175aa:	693b      	ldr	r3, [r7, #16]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d006      	beq.n	80175c0 <tcp_pbuf_prealloc+0xb8>
 80175b2:	4b0d      	ldr	r3, [pc, #52]	; (80175e8 <tcp_pbuf_prealloc+0xe0>)
 80175b4:	f240 120b 	movw	r2, #267	; 0x10b
 80175b8:	490f      	ldr	r1, [pc, #60]	; (80175f8 <tcp_pbuf_prealloc+0xf0>)
 80175ba:	480d      	ldr	r0, [pc, #52]	; (80175f0 <tcp_pbuf_prealloc+0xe8>)
 80175bc:	f008 f982 	bl	801f8c4 <iprintf>
  *oversize = p->len - length;
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	895a      	ldrh	r2, [r3, #10]
 80175c4:	89bb      	ldrh	r3, [r7, #12]
 80175c6:	1ad3      	subs	r3, r2, r3
 80175c8:	b29a      	uxth	r2, r3
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80175ce:	693b      	ldr	r3, [r7, #16]
 80175d0:	89ba      	ldrh	r2, [r7, #12]
 80175d2:	811a      	strh	r2, [r3, #8]
 80175d4:	693b      	ldr	r3, [r7, #16]
 80175d6:	891a      	ldrh	r2, [r3, #8]
 80175d8:	693b      	ldr	r3, [r7, #16]
 80175da:	815a      	strh	r2, [r3, #10]
  return p;
 80175dc:	693b      	ldr	r3, [r7, #16]
}
 80175de:	4618      	mov	r0, r3
 80175e0:	3718      	adds	r7, #24
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}
 80175e6:	bf00      	nop
 80175e8:	08023998 	.word	0x08023998
 80175ec:	08023a50 	.word	0x08023a50
 80175f0:	080239ec 	.word	0x080239ec
 80175f4:	08023a74 	.word	0x08023a74
 80175f8:	08023a94 	.word	0x08023a94

080175fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b082      	sub	sp, #8
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
 8017604:	460b      	mov	r3, r1
 8017606:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d106      	bne.n	801761c <tcp_write_checks+0x20>
 801760e:	4b33      	ldr	r3, [pc, #204]	; (80176dc <tcp_write_checks+0xe0>)
 8017610:	f240 1233 	movw	r2, #307	; 0x133
 8017614:	4932      	ldr	r1, [pc, #200]	; (80176e0 <tcp_write_checks+0xe4>)
 8017616:	4833      	ldr	r0, [pc, #204]	; (80176e4 <tcp_write_checks+0xe8>)
 8017618:	f008 f954 	bl	801f8c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	7d1b      	ldrb	r3, [r3, #20]
 8017620:	2b04      	cmp	r3, #4
 8017622:	d00e      	beq.n	8017642 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017628:	2b07      	cmp	r3, #7
 801762a:	d00a      	beq.n	8017642 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017630:	2b02      	cmp	r3, #2
 8017632:	d006      	beq.n	8017642 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017638:	2b03      	cmp	r3, #3
 801763a:	d002      	beq.n	8017642 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801763c:	f06f 030a 	mvn.w	r3, #10
 8017640:	e048      	b.n	80176d4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017642:	887b      	ldrh	r3, [r7, #2]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d101      	bne.n	801764c <tcp_write_checks+0x50>
    return ERR_OK;
 8017648:	2300      	movs	r3, #0
 801764a:	e043      	b.n	80176d4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017652:	887a      	ldrh	r2, [r7, #2]
 8017654:	429a      	cmp	r2, r3
 8017656:	d909      	bls.n	801766c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	8b5b      	ldrh	r3, [r3, #26]
 801765c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017660:	b29a      	uxth	r2, r3
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801766a:	e033      	b.n	80176d4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017672:	2b08      	cmp	r3, #8
 8017674:	d909      	bls.n	801768a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	8b5b      	ldrh	r3, [r3, #26]
 801767a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801767e:	b29a      	uxth	r2, r3
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017688:	e024      	b.n	80176d4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017690:	2b00      	cmp	r3, #0
 8017692:	d00f      	beq.n	80176b4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017698:	2b00      	cmp	r3, #0
 801769a:	d11a      	bne.n	80176d2 <tcp_write_checks+0xd6>
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d116      	bne.n	80176d2 <tcp_write_checks+0xd6>
 80176a4:	4b0d      	ldr	r3, [pc, #52]	; (80176dc <tcp_write_checks+0xe0>)
 80176a6:	f240 1255 	movw	r2, #341	; 0x155
 80176aa:	490f      	ldr	r1, [pc, #60]	; (80176e8 <tcp_write_checks+0xec>)
 80176ac:	480d      	ldr	r0, [pc, #52]	; (80176e4 <tcp_write_checks+0xe8>)
 80176ae:	f008 f909 	bl	801f8c4 <iprintf>
 80176b2:	e00e      	b.n	80176d2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d103      	bne.n	80176c4 <tcp_write_checks+0xc8>
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d006      	beq.n	80176d2 <tcp_write_checks+0xd6>
 80176c4:	4b05      	ldr	r3, [pc, #20]	; (80176dc <tcp_write_checks+0xe0>)
 80176c6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80176ca:	4908      	ldr	r1, [pc, #32]	; (80176ec <tcp_write_checks+0xf0>)
 80176cc:	4805      	ldr	r0, [pc, #20]	; (80176e4 <tcp_write_checks+0xe8>)
 80176ce:	f008 f8f9 	bl	801f8c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80176d2:	2300      	movs	r3, #0
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	3708      	adds	r7, #8
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	08023998 	.word	0x08023998
 80176e0:	08023aa8 	.word	0x08023aa8
 80176e4:	080239ec 	.word	0x080239ec
 80176e8:	08023ac8 	.word	0x08023ac8
 80176ec:	08023b04 	.word	0x08023b04

080176f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80176f0:	b590      	push	{r4, r7, lr}
 80176f2:	b09b      	sub	sp, #108	; 0x6c
 80176f4:	af04      	add	r7, sp, #16
 80176f6:	60f8      	str	r0, [r7, #12]
 80176f8:	60b9      	str	r1, [r7, #8]
 80176fa:	4611      	mov	r1, r2
 80176fc:	461a      	mov	r2, r3
 80176fe:	460b      	mov	r3, r1
 8017700:	80fb      	strh	r3, [r7, #6]
 8017702:	4613      	mov	r3, r2
 8017704:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017706:	2300      	movs	r3, #0
 8017708:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801770a:	2300      	movs	r3, #0
 801770c:	653b      	str	r3, [r7, #80]	; 0x50
 801770e:	2300      	movs	r3, #0
 8017710:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017712:	2300      	movs	r3, #0
 8017714:	64bb      	str	r3, [r7, #72]	; 0x48
 8017716:	2300      	movs	r3, #0
 8017718:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801771a:	2300      	movs	r3, #0
 801771c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017720:	2300      	movs	r3, #0
 8017722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017726:	2300      	movs	r3, #0
 8017728:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801772a:	2300      	movs	r3, #0
 801772c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801772e:	2300      	movs	r3, #0
 8017730:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d109      	bne.n	801774c <tcp_write+0x5c>
 8017738:	4ba4      	ldr	r3, [pc, #656]	; (80179cc <tcp_write+0x2dc>)
 801773a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801773e:	49a4      	ldr	r1, [pc, #656]	; (80179d0 <tcp_write+0x2e0>)
 8017740:	48a4      	ldr	r0, [pc, #656]	; (80179d4 <tcp_write+0x2e4>)
 8017742:	f008 f8bf 	bl	801f8c4 <iprintf>
 8017746:	f06f 030f 	mvn.w	r3, #15
 801774a:	e32a      	b.n	8017da2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017752:	085b      	lsrs	r3, r3, #1
 8017754:	b29a      	uxth	r2, r3
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801775a:	4293      	cmp	r3, r2
 801775c:	bf28      	it	cs
 801775e:	4613      	movcs	r3, r2
 8017760:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017764:	2b00      	cmp	r3, #0
 8017766:	d102      	bne.n	801776e <tcp_write+0x7e>
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801776c:	e000      	b.n	8017770 <tcp_write+0x80>
 801776e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017770:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017772:	68bb      	ldr	r3, [r7, #8]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d109      	bne.n	801778c <tcp_write+0x9c>
 8017778:	4b94      	ldr	r3, [pc, #592]	; (80179cc <tcp_write+0x2dc>)
 801777a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801777e:	4996      	ldr	r1, [pc, #600]	; (80179d8 <tcp_write+0x2e8>)
 8017780:	4894      	ldr	r0, [pc, #592]	; (80179d4 <tcp_write+0x2e4>)
 8017782:	f008 f89f 	bl	801f8c4 <iprintf>
 8017786:	f06f 030f 	mvn.w	r3, #15
 801778a:	e30a      	b.n	8017da2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801778c:	88fb      	ldrh	r3, [r7, #6]
 801778e:	4619      	mov	r1, r3
 8017790:	68f8      	ldr	r0, [r7, #12]
 8017792:	f7ff ff33 	bl	80175fc <tcp_write_checks>
 8017796:	4603      	mov	r3, r0
 8017798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801779c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d002      	beq.n	80177aa <tcp_write+0xba>
    return err;
 80177a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80177a8:	e2fb      	b.n	8017da2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80177b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80177b4:	2300      	movs	r3, #0
 80177b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177be:	2b00      	cmp	r3, #0
 80177c0:	f000 80f6 	beq.w	80179b0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177c8:	653b      	str	r3, [r7, #80]	; 0x50
 80177ca:	e002      	b.n	80177d2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80177cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80177d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d1f8      	bne.n	80177cc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80177da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177dc:	7a9b      	ldrb	r3, [r3, #10]
 80177de:	009b      	lsls	r3, r3, #2
 80177e0:	b29b      	uxth	r3, r3
 80177e2:	f003 0304 	and.w	r3, r3, #4
 80177e6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80177e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80177ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177ec:	891b      	ldrh	r3, [r3, #8]
 80177ee:	4619      	mov	r1, r3
 80177f0:	8c3b      	ldrh	r3, [r7, #32]
 80177f2:	440b      	add	r3, r1
 80177f4:	429a      	cmp	r2, r3
 80177f6:	da06      	bge.n	8017806 <tcp_write+0x116>
 80177f8:	4b74      	ldr	r3, [pc, #464]	; (80179cc <tcp_write+0x2dc>)
 80177fa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80177fe:	4977      	ldr	r1, [pc, #476]	; (80179dc <tcp_write+0x2ec>)
 8017800:	4874      	ldr	r0, [pc, #464]	; (80179d4 <tcp_write+0x2e4>)
 8017802:	f008 f85f 	bl	801f8c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017808:	891a      	ldrh	r2, [r3, #8]
 801780a:	8c3b      	ldrh	r3, [r7, #32]
 801780c:	4413      	add	r3, r2
 801780e:	b29b      	uxth	r3, r3
 8017810:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017812:	1ad3      	subs	r3, r2, r3
 8017814:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801781c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801781e:	8a7b      	ldrh	r3, [r7, #18]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d026      	beq.n	8017872 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017824:	8a7b      	ldrh	r3, [r7, #18]
 8017826:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017828:	429a      	cmp	r2, r3
 801782a:	d206      	bcs.n	801783a <tcp_write+0x14a>
 801782c:	4b67      	ldr	r3, [pc, #412]	; (80179cc <tcp_write+0x2dc>)
 801782e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017832:	496b      	ldr	r1, [pc, #428]	; (80179e0 <tcp_write+0x2f0>)
 8017834:	4867      	ldr	r0, [pc, #412]	; (80179d4 <tcp_write+0x2e4>)
 8017836:	f008 f845 	bl	801f8c4 <iprintf>
      seg = last_unsent;
 801783a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801783c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801783e:	8a7b      	ldrh	r3, [r7, #18]
 8017840:	88fa      	ldrh	r2, [r7, #6]
 8017842:	4293      	cmp	r3, r2
 8017844:	bf28      	it	cs
 8017846:	4613      	movcs	r3, r2
 8017848:	b29b      	uxth	r3, r3
 801784a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801784c:	4293      	cmp	r3, r2
 801784e:	bf28      	it	cs
 8017850:	4613      	movcs	r3, r2
 8017852:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017854:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017858:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801785a:	4413      	add	r3, r2
 801785c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017860:	8a7a      	ldrh	r2, [r7, #18]
 8017862:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017864:	1ad3      	subs	r3, r2, r3
 8017866:	b29b      	uxth	r3, r3
 8017868:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801786a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801786c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801786e:	1ad3      	subs	r3, r2, r3
 8017870:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017872:	8a7b      	ldrh	r3, [r7, #18]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d00b      	beq.n	8017890 <tcp_write+0x1a0>
 8017878:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801787c:	88fb      	ldrh	r3, [r7, #6]
 801787e:	429a      	cmp	r2, r3
 8017880:	d006      	beq.n	8017890 <tcp_write+0x1a0>
 8017882:	4b52      	ldr	r3, [pc, #328]	; (80179cc <tcp_write+0x2dc>)
 8017884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017888:	4956      	ldr	r1, [pc, #344]	; (80179e4 <tcp_write+0x2f4>)
 801788a:	4852      	ldr	r0, [pc, #328]	; (80179d4 <tcp_write+0x2e4>)
 801788c:	f008 f81a 	bl	801f8c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017890:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017894:	88fb      	ldrh	r3, [r7, #6]
 8017896:	429a      	cmp	r2, r3
 8017898:	f080 8167 	bcs.w	8017b6a <tcp_write+0x47a>
 801789c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801789e:	2b00      	cmp	r3, #0
 80178a0:	f000 8163 	beq.w	8017b6a <tcp_write+0x47a>
 80178a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178a6:	891b      	ldrh	r3, [r3, #8]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	f000 815e 	beq.w	8017b6a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80178ae:	88fa      	ldrh	r2, [r7, #6]
 80178b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80178b4:	1ad2      	subs	r2, r2, r3
 80178b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80178b8:	4293      	cmp	r3, r2
 80178ba:	bfa8      	it	ge
 80178bc:	4613      	movge	r3, r2
 80178be:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80178c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178c2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80178c4:	797b      	ldrb	r3, [r7, #5]
 80178c6:	f003 0301 	and.w	r3, r3, #1
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d027      	beq.n	801791e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80178ce:	f107 0012 	add.w	r0, r7, #18
 80178d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80178d4:	8bf9      	ldrh	r1, [r7, #30]
 80178d6:	2301      	movs	r3, #1
 80178d8:	9302      	str	r3, [sp, #8]
 80178da:	797b      	ldrb	r3, [r7, #5]
 80178dc:	9301      	str	r3, [sp, #4]
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	9300      	str	r3, [sp, #0]
 80178e2:	4603      	mov	r3, r0
 80178e4:	2000      	movs	r0, #0
 80178e6:	f7ff fe0f 	bl	8017508 <tcp_pbuf_prealloc>
 80178ea:	6578      	str	r0, [r7, #84]	; 0x54
 80178ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	f000 8225 	beq.w	8017d3e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80178f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80178f6:	6858      	ldr	r0, [r3, #4]
 80178f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80178fc:	68ba      	ldr	r2, [r7, #8]
 80178fe:	4413      	add	r3, r2
 8017900:	8bfa      	ldrh	r2, [r7, #30]
 8017902:	4619      	mov	r1, r3
 8017904:	f008 fa43 	bl	801fd8e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017908:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801790a:	f7fb f995 	bl	8012c38 <pbuf_clen>
 801790e:	4603      	mov	r3, r0
 8017910:	461a      	mov	r2, r3
 8017912:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017916:	4413      	add	r3, r2
 8017918:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801791c:	e041      	b.n	80179a2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801791e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017920:	685b      	ldr	r3, [r3, #4]
 8017922:	637b      	str	r3, [r7, #52]	; 0x34
 8017924:	e002      	b.n	801792c <tcp_write+0x23c>
 8017926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	637b      	str	r3, [r7, #52]	; 0x34
 801792c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d1f8      	bne.n	8017926 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017936:	7b1b      	ldrb	r3, [r3, #12]
 8017938:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801793c:	2b00      	cmp	r3, #0
 801793e:	d115      	bne.n	801796c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017942:	685b      	ldr	r3, [r3, #4]
 8017944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017946:	8952      	ldrh	r2, [r2, #10]
 8017948:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801794a:	68ba      	ldr	r2, [r7, #8]
 801794c:	429a      	cmp	r2, r3
 801794e:	d10d      	bne.n	801796c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017950:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017954:	2b00      	cmp	r3, #0
 8017956:	d006      	beq.n	8017966 <tcp_write+0x276>
 8017958:	4b1c      	ldr	r3, [pc, #112]	; (80179cc <tcp_write+0x2dc>)
 801795a:	f240 2231 	movw	r2, #561	; 0x231
 801795e:	4922      	ldr	r1, [pc, #136]	; (80179e8 <tcp_write+0x2f8>)
 8017960:	481c      	ldr	r0, [pc, #112]	; (80179d4 <tcp_write+0x2e4>)
 8017962:	f007 ffaf 	bl	801f8c4 <iprintf>
          extendlen = seglen;
 8017966:	8bfb      	ldrh	r3, [r7, #30]
 8017968:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801796a:	e01a      	b.n	80179a2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801796c:	8bfb      	ldrh	r3, [r7, #30]
 801796e:	2201      	movs	r2, #1
 8017970:	4619      	mov	r1, r3
 8017972:	2000      	movs	r0, #0
 8017974:	f7fa fdee 	bl	8012554 <pbuf_alloc>
 8017978:	6578      	str	r0, [r7, #84]	; 0x54
 801797a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801797c:	2b00      	cmp	r3, #0
 801797e:	f000 81e0 	beq.w	8017d42 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017982:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017986:	68ba      	ldr	r2, [r7, #8]
 8017988:	441a      	add	r2, r3
 801798a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801798c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801798e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017990:	f7fb f952 	bl	8012c38 <pbuf_clen>
 8017994:	4603      	mov	r3, r0
 8017996:	461a      	mov	r2, r3
 8017998:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801799c:	4413      	add	r3, r2
 801799e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80179a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80179a6:	8bfb      	ldrh	r3, [r7, #30]
 80179a8:	4413      	add	r3, r2
 80179aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80179ae:	e0dc      	b.n	8017b6a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	f000 80d7 	beq.w	8017b6a <tcp_write+0x47a>
 80179bc:	4b03      	ldr	r3, [pc, #12]	; (80179cc <tcp_write+0x2dc>)
 80179be:	f240 224a 	movw	r2, #586	; 0x24a
 80179c2:	490a      	ldr	r1, [pc, #40]	; (80179ec <tcp_write+0x2fc>)
 80179c4:	4803      	ldr	r0, [pc, #12]	; (80179d4 <tcp_write+0x2e4>)
 80179c6:	f007 ff7d 	bl	801f8c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80179ca:	e0ce      	b.n	8017b6a <tcp_write+0x47a>
 80179cc:	08023998 	.word	0x08023998
 80179d0:	08023b38 	.word	0x08023b38
 80179d4:	080239ec 	.word	0x080239ec
 80179d8:	08023b50 	.word	0x08023b50
 80179dc:	08023b84 	.word	0x08023b84
 80179e0:	08023b9c 	.word	0x08023b9c
 80179e4:	08023bbc 	.word	0x08023bbc
 80179e8:	08023bdc 	.word	0x08023bdc
 80179ec:	08023c08 	.word	0x08023c08
    struct pbuf *p;
    u16_t left = len - pos;
 80179f0:	88fa      	ldrh	r2, [r7, #6]
 80179f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80179f6:	1ad3      	subs	r3, r2, r3
 80179f8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80179fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80179fe:	b29b      	uxth	r3, r3
 8017a00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a02:	1ad3      	subs	r3, r2, r3
 8017a04:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017a06:	8b7a      	ldrh	r2, [r7, #26]
 8017a08:	8bbb      	ldrh	r3, [r7, #28]
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	bf28      	it	cs
 8017a0e:	4613      	movcs	r3, r2
 8017a10:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017a12:	797b      	ldrb	r3, [r7, #5]
 8017a14:	f003 0301 	and.w	r3, r3, #1
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d036      	beq.n	8017a8a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017a1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017a20:	b29a      	uxth	r2, r3
 8017a22:	8b3b      	ldrh	r3, [r7, #24]
 8017a24:	4413      	add	r3, r2
 8017a26:	b299      	uxth	r1, r3
 8017a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	bf0c      	ite	eq
 8017a2e:	2301      	moveq	r3, #1
 8017a30:	2300      	movne	r3, #0
 8017a32:	b2db      	uxtb	r3, r3
 8017a34:	f107 0012 	add.w	r0, r7, #18
 8017a38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a3a:	9302      	str	r3, [sp, #8]
 8017a3c:	797b      	ldrb	r3, [r7, #5]
 8017a3e:	9301      	str	r3, [sp, #4]
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	9300      	str	r3, [sp, #0]
 8017a44:	4603      	mov	r3, r0
 8017a46:	2036      	movs	r0, #54	; 0x36
 8017a48:	f7ff fd5e 	bl	8017508 <tcp_pbuf_prealloc>
 8017a4c:	6338      	str	r0, [r7, #48]	; 0x30
 8017a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	f000 8178 	beq.w	8017d46 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a58:	895b      	ldrh	r3, [r3, #10]
 8017a5a:	8b3a      	ldrh	r2, [r7, #24]
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d906      	bls.n	8017a6e <tcp_write+0x37e>
 8017a60:	4b8c      	ldr	r3, [pc, #560]	; (8017c94 <tcp_write+0x5a4>)
 8017a62:	f240 2266 	movw	r2, #614	; 0x266
 8017a66:	498c      	ldr	r1, [pc, #560]	; (8017c98 <tcp_write+0x5a8>)
 8017a68:	488c      	ldr	r0, [pc, #560]	; (8017c9c <tcp_write+0x5ac>)
 8017a6a:	f007 ff2b 	bl	801f8c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a70:	685a      	ldr	r2, [r3, #4]
 8017a72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017a76:	18d0      	adds	r0, r2, r3
 8017a78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a7c:	68ba      	ldr	r2, [r7, #8]
 8017a7e:	4413      	add	r3, r2
 8017a80:	8b3a      	ldrh	r2, [r7, #24]
 8017a82:	4619      	mov	r1, r3
 8017a84:	f008 f983 	bl	801fd8e <memcpy>
 8017a88:	e02f      	b.n	8017aea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017a8a:	8a7b      	ldrh	r3, [r7, #18]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d006      	beq.n	8017a9e <tcp_write+0x3ae>
 8017a90:	4b80      	ldr	r3, [pc, #512]	; (8017c94 <tcp_write+0x5a4>)
 8017a92:	f240 2271 	movw	r2, #625	; 0x271
 8017a96:	4982      	ldr	r1, [pc, #520]	; (8017ca0 <tcp_write+0x5b0>)
 8017a98:	4880      	ldr	r0, [pc, #512]	; (8017c9c <tcp_write+0x5ac>)
 8017a9a:	f007 ff13 	bl	801f8c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017a9e:	8b3b      	ldrh	r3, [r7, #24]
 8017aa0:	2201      	movs	r2, #1
 8017aa2:	4619      	mov	r1, r3
 8017aa4:	2036      	movs	r0, #54	; 0x36
 8017aa6:	f7fa fd55 	bl	8012554 <pbuf_alloc>
 8017aaa:	6178      	str	r0, [r7, #20]
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	f000 814b 	beq.w	8017d4a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017ab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ab8:	68ba      	ldr	r2, [r7, #8]
 8017aba:	441a      	add	r2, r3
 8017abc:	697b      	ldr	r3, [r7, #20]
 8017abe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017ac0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017ac4:	b29b      	uxth	r3, r3
 8017ac6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017aca:	4619      	mov	r1, r3
 8017acc:	2036      	movs	r0, #54	; 0x36
 8017ace:	f7fa fd41 	bl	8012554 <pbuf_alloc>
 8017ad2:	6338      	str	r0, [r7, #48]	; 0x30
 8017ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d103      	bne.n	8017ae2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017ada:	6978      	ldr	r0, [r7, #20]
 8017adc:	f7fb f81e 	bl	8012b1c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017ae0:	e136      	b.n	8017d50 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017ae2:	6979      	ldr	r1, [r7, #20]
 8017ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ae6:	f7fb f8e7 	bl	8012cb8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017aec:	f7fb f8a4 	bl	8012c38 <pbuf_clen>
 8017af0:	4603      	mov	r3, r0
 8017af2:	461a      	mov	r2, r3
 8017af4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017af8:	4413      	add	r3, r2
 8017afa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017afe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017b02:	2b09      	cmp	r3, #9
 8017b04:	d903      	bls.n	8017b0e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b08:	f7fb f808 	bl	8012b1c <pbuf_free>
      goto memerr;
 8017b0c:	e120      	b.n	8017d50 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017b12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b16:	441a      	add	r2, r3
 8017b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b1c:	9300      	str	r3, [sp, #0]
 8017b1e:	4613      	mov	r3, r2
 8017b20:	2200      	movs	r2, #0
 8017b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017b24:	68f8      	ldr	r0, [r7, #12]
 8017b26:	f7ff fc51 	bl	80173cc <tcp_create_segment>
 8017b2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	f000 810d 	beq.w	8017d4e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d102      	bne.n	8017b40 <tcp_write+0x450>
      queue = seg;
 8017b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8017b3e:	e00c      	b.n	8017b5a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d106      	bne.n	8017b54 <tcp_write+0x464>
 8017b46:	4b53      	ldr	r3, [pc, #332]	; (8017c94 <tcp_write+0x5a4>)
 8017b48:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017b4c:	4955      	ldr	r1, [pc, #340]	; (8017ca4 <tcp_write+0x5b4>)
 8017b4e:	4853      	ldr	r0, [pc, #332]	; (8017c9c <tcp_write+0x5ac>)
 8017b50:	f007 feb8 	bl	801f8c4 <iprintf>
      prev_seg->next = seg;
 8017b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017b58:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b5c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017b5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b62:	8b3b      	ldrh	r3, [r7, #24]
 8017b64:	4413      	add	r3, r2
 8017b66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8017b6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017b6e:	88fb      	ldrh	r3, [r7, #6]
 8017b70:	429a      	cmp	r2, r3
 8017b72:	f4ff af3d 	bcc.w	80179f0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017b76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d02c      	beq.n	8017bd6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b82:	e01e      	b.n	8017bc2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b86:	891a      	ldrh	r2, [r3, #8]
 8017b88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017b8a:	4413      	add	r3, r2
 8017b8c:	b29a      	uxth	r2, r3
 8017b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b90:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d110      	bne.n	8017bbc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ba0:	8952      	ldrh	r2, [r2, #10]
 8017ba2:	4413      	add	r3, r2
 8017ba4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017ba6:	68b9      	ldr	r1, [r7, #8]
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f008 f8f0 	bl	801fd8e <memcpy>
        p->len += oversize_used;
 8017bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb0:	895a      	ldrh	r2, [r3, #10]
 8017bb2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017bb4:	4413      	add	r3, r2
 8017bb6:	b29a      	uxth	r2, r3
 8017bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d1dd      	bne.n	8017b84 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bca:	891a      	ldrh	r2, [r3, #8]
 8017bcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017bce:	4413      	add	r3, r2
 8017bd0:	b29a      	uxth	r2, r3
 8017bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bd4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017bd6:	8a7a      	ldrh	r2, [r7, #18]
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d018      	beq.n	8017c16 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d106      	bne.n	8017bf8 <tcp_write+0x508>
 8017bea:	4b2a      	ldr	r3, [pc, #168]	; (8017c94 <tcp_write+0x5a4>)
 8017bec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017bf0:	492d      	ldr	r1, [pc, #180]	; (8017ca8 <tcp_write+0x5b8>)
 8017bf2:	482a      	ldr	r0, [pc, #168]	; (8017c9c <tcp_write+0x5ac>)
 8017bf4:	f007 fe66 	bl	801f8c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bfa:	685b      	ldr	r3, [r3, #4]
 8017bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017bfe:	4618      	mov	r0, r3
 8017c00:	f7fb f85a 	bl	8012cb8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c06:	891a      	ldrh	r2, [r3, #8]
 8017c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c0a:	891b      	ldrh	r3, [r3, #8]
 8017c0c:	4413      	add	r3, r2
 8017c0e:	b29a      	uxth	r2, r3
 8017c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c12:	811a      	strh	r2, [r3, #8]
 8017c14:	e037      	b.n	8017c86 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017c16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d034      	beq.n	8017c86 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d003      	beq.n	8017c2a <tcp_write+0x53a>
 8017c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c24:	685b      	ldr	r3, [r3, #4]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d106      	bne.n	8017c38 <tcp_write+0x548>
 8017c2a:	4b1a      	ldr	r3, [pc, #104]	; (8017c94 <tcp_write+0x5a4>)
 8017c2c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017c30:	491e      	ldr	r1, [pc, #120]	; (8017cac <tcp_write+0x5bc>)
 8017c32:	481a      	ldr	r0, [pc, #104]	; (8017c9c <tcp_write+0x5ac>)
 8017c34:	f007 fe46 	bl	801f8c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c3a:	685b      	ldr	r3, [r3, #4]
 8017c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c3e:	e009      	b.n	8017c54 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c42:	891a      	ldrh	r2, [r3, #8]
 8017c44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c46:	4413      	add	r3, r2
 8017c48:	b29a      	uxth	r2, r3
 8017c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8017c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d1f1      	bne.n	8017c40 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c5e:	891a      	ldrh	r2, [r3, #8]
 8017c60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c62:	4413      	add	r3, r2
 8017c64:	b29a      	uxth	r2, r3
 8017c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c68:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6c:	895a      	ldrh	r2, [r3, #10]
 8017c6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c70:	4413      	add	r3, r2
 8017c72:	b29a      	uxth	r2, r3
 8017c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c76:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c7a:	891a      	ldrh	r2, [r3, #8]
 8017c7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c7e:	4413      	add	r3, r2
 8017c80:	b29a      	uxth	r2, r3
 8017c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c84:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d111      	bne.n	8017cb0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017c90:	66da      	str	r2, [r3, #108]	; 0x6c
 8017c92:	e010      	b.n	8017cb6 <tcp_write+0x5c6>
 8017c94:	08023998 	.word	0x08023998
 8017c98:	08023c38 	.word	0x08023c38
 8017c9c:	080239ec 	.word	0x080239ec
 8017ca0:	08023c78 	.word	0x08023c78
 8017ca4:	08023c88 	.word	0x08023c88
 8017ca8:	08023c9c 	.word	0x08023c9c
 8017cac:	08023cd4 	.word	0x08023cd4
  } else {
    last_unsent->next = queue;
 8017cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017cb4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017cba:	88fb      	ldrh	r3, [r7, #6]
 8017cbc:	441a      	add	r2, r3
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017cc8:	88fb      	ldrh	r3, [r7, #6]
 8017cca:	1ad3      	subs	r3, r2, r3
 8017ccc:	b29a      	uxth	r2, r3
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017cda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d00e      	beq.n	8017d06 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d10a      	bne.n	8017d06 <tcp_write+0x616>
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d106      	bne.n	8017d06 <tcp_write+0x616>
 8017cf8:	4b2c      	ldr	r3, [pc, #176]	; (8017dac <tcp_write+0x6bc>)
 8017cfa:	f240 3212 	movw	r2, #786	; 0x312
 8017cfe:	492c      	ldr	r1, [pc, #176]	; (8017db0 <tcp_write+0x6c0>)
 8017d00:	482c      	ldr	r0, [pc, #176]	; (8017db4 <tcp_write+0x6c4>)
 8017d02:	f007 fddf 	bl	801f8c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d016      	beq.n	8017d3a <tcp_write+0x64a>
 8017d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d0e:	68db      	ldr	r3, [r3, #12]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d012      	beq.n	8017d3a <tcp_write+0x64a>
 8017d14:	797b      	ldrb	r3, [r7, #5]
 8017d16:	f003 0302 	and.w	r3, r3, #2
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d10d      	bne.n	8017d3a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d20:	68db      	ldr	r3, [r3, #12]
 8017d22:	899b      	ldrh	r3, [r3, #12]
 8017d24:	b29c      	uxth	r4, r3
 8017d26:	2008      	movs	r0, #8
 8017d28:	f7f9 fac2 	bl	80112b0 <lwip_htons>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	461a      	mov	r2, r3
 8017d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d32:	68db      	ldr	r3, [r3, #12]
 8017d34:	4322      	orrs	r2, r4
 8017d36:	b292      	uxth	r2, r2
 8017d38:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	e031      	b.n	8017da2 <tcp_write+0x6b2>
          goto memerr;
 8017d3e:	bf00      	nop
 8017d40:	e006      	b.n	8017d50 <tcp_write+0x660>
            goto memerr;
 8017d42:	bf00      	nop
 8017d44:	e004      	b.n	8017d50 <tcp_write+0x660>
        goto memerr;
 8017d46:	bf00      	nop
 8017d48:	e002      	b.n	8017d50 <tcp_write+0x660>
        goto memerr;
 8017d4a:	bf00      	nop
 8017d4c:	e000      	b.n	8017d50 <tcp_write+0x660>
      goto memerr;
 8017d4e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	8b5b      	ldrh	r3, [r3, #26]
 8017d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d58:	b29a      	uxth	r2, r3
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d002      	beq.n	8017d6a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017d64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017d66:	f7fa fed9 	bl	8012b1c <pbuf_free>
  }
  if (queue != NULL) {
 8017d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d002      	beq.n	8017d76 <tcp_write+0x686>
    tcp_segs_free(queue);
 8017d70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017d72:	f7fc fb6b 	bl	801444c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d00e      	beq.n	8017d9e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d10a      	bne.n	8017d9e <tcp_write+0x6ae>
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d106      	bne.n	8017d9e <tcp_write+0x6ae>
 8017d90:	4b06      	ldr	r3, [pc, #24]	; (8017dac <tcp_write+0x6bc>)
 8017d92:	f240 3227 	movw	r2, #807	; 0x327
 8017d96:	4906      	ldr	r1, [pc, #24]	; (8017db0 <tcp_write+0x6c0>)
 8017d98:	4806      	ldr	r0, [pc, #24]	; (8017db4 <tcp_write+0x6c4>)
 8017d9a:	f007 fd93 	bl	801f8c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017da2:	4618      	mov	r0, r3
 8017da4:	375c      	adds	r7, #92	; 0x5c
 8017da6:	46bd      	mov	sp, r7
 8017da8:	bd90      	pop	{r4, r7, pc}
 8017daa:	bf00      	nop
 8017dac:	08023998 	.word	0x08023998
 8017db0:	08023d0c 	.word	0x08023d0c
 8017db4:	080239ec 	.word	0x080239ec

08017db8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017db8:	b590      	push	{r4, r7, lr}
 8017dba:	b08b      	sub	sp, #44	; 0x2c
 8017dbc:	af02      	add	r7, sp, #8
 8017dbe:	6078      	str	r0, [r7, #4]
 8017dc0:	460b      	mov	r3, r1
 8017dc2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	61fb      	str	r3, [r7, #28]
 8017dc8:	2300      	movs	r3, #0
 8017dca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d106      	bne.n	8017de4 <tcp_split_unsent_seg+0x2c>
 8017dd6:	4b95      	ldr	r3, [pc, #596]	; (801802c <tcp_split_unsent_seg+0x274>)
 8017dd8:	f240 324b 	movw	r2, #843	; 0x34b
 8017ddc:	4994      	ldr	r1, [pc, #592]	; (8018030 <tcp_split_unsent_seg+0x278>)
 8017dde:	4895      	ldr	r0, [pc, #596]	; (8018034 <tcp_split_unsent_seg+0x27c>)
 8017de0:	f007 fd70 	bl	801f8c4 <iprintf>

  useg = pcb->unsent;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017de8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d102      	bne.n	8017df6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017df4:	e116      	b.n	8018024 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017df6:	887b      	ldrh	r3, [r7, #2]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d109      	bne.n	8017e10 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017dfc:	4b8b      	ldr	r3, [pc, #556]	; (801802c <tcp_split_unsent_seg+0x274>)
 8017dfe:	f240 3253 	movw	r2, #851	; 0x353
 8017e02:	498d      	ldr	r1, [pc, #564]	; (8018038 <tcp_split_unsent_seg+0x280>)
 8017e04:	488b      	ldr	r0, [pc, #556]	; (8018034 <tcp_split_unsent_seg+0x27c>)
 8017e06:	f007 fd5d 	bl	801f8c4 <iprintf>
    return ERR_VAL;
 8017e0a:	f06f 0305 	mvn.w	r3, #5
 8017e0e:	e109      	b.n	8018024 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	891b      	ldrh	r3, [r3, #8]
 8017e14:	887a      	ldrh	r2, [r7, #2]
 8017e16:	429a      	cmp	r2, r3
 8017e18:	d301      	bcc.n	8017e1e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	e102      	b.n	8018024 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e22:	887a      	ldrh	r2, [r7, #2]
 8017e24:	429a      	cmp	r2, r3
 8017e26:	d906      	bls.n	8017e36 <tcp_split_unsent_seg+0x7e>
 8017e28:	4b80      	ldr	r3, [pc, #512]	; (801802c <tcp_split_unsent_seg+0x274>)
 8017e2a:	f240 325b 	movw	r2, #859	; 0x35b
 8017e2e:	4983      	ldr	r1, [pc, #524]	; (801803c <tcp_split_unsent_seg+0x284>)
 8017e30:	4880      	ldr	r0, [pc, #512]	; (8018034 <tcp_split_unsent_seg+0x27c>)
 8017e32:	f007 fd47 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017e36:	697b      	ldr	r3, [r7, #20]
 8017e38:	891b      	ldrh	r3, [r3, #8]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d106      	bne.n	8017e4c <tcp_split_unsent_seg+0x94>
 8017e3e:	4b7b      	ldr	r3, [pc, #492]	; (801802c <tcp_split_unsent_seg+0x274>)
 8017e40:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017e44:	497e      	ldr	r1, [pc, #504]	; (8018040 <tcp_split_unsent_seg+0x288>)
 8017e46:	487b      	ldr	r0, [pc, #492]	; (8018034 <tcp_split_unsent_seg+0x27c>)
 8017e48:	f007 fd3c 	bl	801f8c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	7a9b      	ldrb	r3, [r3, #10]
 8017e50:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017e52:	7bfb      	ldrb	r3, [r7, #15]
 8017e54:	009b      	lsls	r3, r3, #2
 8017e56:	b2db      	uxtb	r3, r3
 8017e58:	f003 0304 	and.w	r3, r3, #4
 8017e5c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017e5e:	697b      	ldr	r3, [r7, #20]
 8017e60:	891a      	ldrh	r2, [r3, #8]
 8017e62:	887b      	ldrh	r3, [r7, #2]
 8017e64:	1ad3      	subs	r3, r2, r3
 8017e66:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017e68:	7bbb      	ldrb	r3, [r7, #14]
 8017e6a:	b29a      	uxth	r2, r3
 8017e6c:	89bb      	ldrh	r3, [r7, #12]
 8017e6e:	4413      	add	r3, r2
 8017e70:	b29b      	uxth	r3, r3
 8017e72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e76:	4619      	mov	r1, r3
 8017e78:	2036      	movs	r0, #54	; 0x36
 8017e7a:	f7fa fb6b 	bl	8012554 <pbuf_alloc>
 8017e7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017e80:	693b      	ldr	r3, [r7, #16]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	f000 80b7 	beq.w	8017ff6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017e88:	697b      	ldr	r3, [r7, #20]
 8017e8a:	685b      	ldr	r3, [r3, #4]
 8017e8c:	891a      	ldrh	r2, [r3, #8]
 8017e8e:	697b      	ldr	r3, [r7, #20]
 8017e90:	891b      	ldrh	r3, [r3, #8]
 8017e92:	1ad3      	subs	r3, r2, r3
 8017e94:	b29a      	uxth	r2, r3
 8017e96:	887b      	ldrh	r3, [r7, #2]
 8017e98:	4413      	add	r3, r2
 8017e9a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017e9c:	697b      	ldr	r3, [r7, #20]
 8017e9e:	6858      	ldr	r0, [r3, #4]
 8017ea0:	693b      	ldr	r3, [r7, #16]
 8017ea2:	685a      	ldr	r2, [r3, #4]
 8017ea4:	7bbb      	ldrb	r3, [r7, #14]
 8017ea6:	18d1      	adds	r1, r2, r3
 8017ea8:	897b      	ldrh	r3, [r7, #10]
 8017eaa:	89ba      	ldrh	r2, [r7, #12]
 8017eac:	f7fb f83c 	bl	8012f28 <pbuf_copy_partial>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	461a      	mov	r2, r3
 8017eb4:	89bb      	ldrh	r3, [r7, #12]
 8017eb6:	4293      	cmp	r3, r2
 8017eb8:	f040 809f 	bne.w	8017ffa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017ebc:	697b      	ldr	r3, [r7, #20]
 8017ebe:	68db      	ldr	r3, [r3, #12]
 8017ec0:	899b      	ldrh	r3, [r3, #12]
 8017ec2:	b29b      	uxth	r3, r3
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7f9 f9f3 	bl	80112b0 <lwip_htons>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	b2db      	uxtb	r3, r3
 8017ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ed2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8017ed8:	7efb      	ldrb	r3, [r7, #27]
 8017eda:	f003 0308 	and.w	r3, r3, #8
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d007      	beq.n	8017ef2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017ee2:	7efb      	ldrb	r3, [r7, #27]
 8017ee4:	f023 0308 	bic.w	r3, r3, #8
 8017ee8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017eea:	7ebb      	ldrb	r3, [r7, #26]
 8017eec:	f043 0308 	orr.w	r3, r3, #8
 8017ef0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017ef2:	7efb      	ldrb	r3, [r7, #27]
 8017ef4:	f003 0301 	and.w	r3, r3, #1
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d007      	beq.n	8017f0c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017efc:	7efb      	ldrb	r3, [r7, #27]
 8017efe:	f023 0301 	bic.w	r3, r3, #1
 8017f02:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017f04:	7ebb      	ldrb	r3, [r7, #26]
 8017f06:	f043 0301 	orr.w	r3, r3, #1
 8017f0a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	68db      	ldr	r3, [r3, #12]
 8017f10:	685b      	ldr	r3, [r3, #4]
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7f9 f9e1 	bl	80112da <lwip_htonl>
 8017f18:	4602      	mov	r2, r0
 8017f1a:	887b      	ldrh	r3, [r7, #2]
 8017f1c:	18d1      	adds	r1, r2, r3
 8017f1e:	7eba      	ldrb	r2, [r7, #26]
 8017f20:	7bfb      	ldrb	r3, [r7, #15]
 8017f22:	9300      	str	r3, [sp, #0]
 8017f24:	460b      	mov	r3, r1
 8017f26:	6939      	ldr	r1, [r7, #16]
 8017f28:	6878      	ldr	r0, [r7, #4]
 8017f2a:	f7ff fa4f 	bl	80173cc <tcp_create_segment>
 8017f2e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017f30:	69fb      	ldr	r3, [r7, #28]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d063      	beq.n	8017ffe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	685b      	ldr	r3, [r3, #4]
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	f7fa fe7c 	bl	8012c38 <pbuf_clen>
 8017f40:	4603      	mov	r3, r0
 8017f42:	461a      	mov	r2, r3
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017f4a:	1a9b      	subs	r3, r3, r2
 8017f4c:	b29a      	uxth	r2, r3
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	6858      	ldr	r0, [r3, #4]
 8017f58:	697b      	ldr	r3, [r7, #20]
 8017f5a:	685b      	ldr	r3, [r3, #4]
 8017f5c:	891a      	ldrh	r2, [r3, #8]
 8017f5e:	89bb      	ldrh	r3, [r7, #12]
 8017f60:	1ad3      	subs	r3, r2, r3
 8017f62:	b29b      	uxth	r3, r3
 8017f64:	4619      	mov	r1, r3
 8017f66:	f7fa fc53 	bl	8012810 <pbuf_realloc>
  useg->len -= remainder;
 8017f6a:	697b      	ldr	r3, [r7, #20]
 8017f6c:	891a      	ldrh	r2, [r3, #8]
 8017f6e:	89bb      	ldrh	r3, [r7, #12]
 8017f70:	1ad3      	subs	r3, r2, r3
 8017f72:	b29a      	uxth	r2, r3
 8017f74:	697b      	ldr	r3, [r7, #20]
 8017f76:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017f78:	697b      	ldr	r3, [r7, #20]
 8017f7a:	68db      	ldr	r3, [r3, #12]
 8017f7c:	899b      	ldrh	r3, [r3, #12]
 8017f7e:	b29c      	uxth	r4, r3
 8017f80:	7efb      	ldrb	r3, [r7, #27]
 8017f82:	b29b      	uxth	r3, r3
 8017f84:	4618      	mov	r0, r3
 8017f86:	f7f9 f993 	bl	80112b0 <lwip_htons>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	461a      	mov	r2, r3
 8017f8e:	697b      	ldr	r3, [r7, #20]
 8017f90:	68db      	ldr	r3, [r3, #12]
 8017f92:	4322      	orrs	r2, r4
 8017f94:	b292      	uxth	r2, r2
 8017f96:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017f98:	697b      	ldr	r3, [r7, #20]
 8017f9a:	685b      	ldr	r3, [r3, #4]
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	f7fa fe4b 	bl	8012c38 <pbuf_clen>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	461a      	mov	r2, r3
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017fac:	4413      	add	r3, r2
 8017fae:	b29a      	uxth	r2, r3
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017fb6:	69fb      	ldr	r3, [r7, #28]
 8017fb8:	685b      	ldr	r3, [r3, #4]
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f7fa fe3c 	bl	8012c38 <pbuf_clen>
 8017fc0:	4603      	mov	r3, r0
 8017fc2:	461a      	mov	r2, r3
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017fca:	4413      	add	r3, r2
 8017fcc:	b29a      	uxth	r2, r3
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017fd4:	697b      	ldr	r3, [r7, #20]
 8017fd6:	681a      	ldr	r2, [r3, #0]
 8017fd8:	69fb      	ldr	r3, [r7, #28]
 8017fda:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017fdc:	697b      	ldr	r3, [r7, #20]
 8017fde:	69fa      	ldr	r2, [r7, #28]
 8017fe0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017fe2:	69fb      	ldr	r3, [r7, #28]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d103      	bne.n	8017ff2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	2200      	movs	r2, #0
 8017fee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	e016      	b.n	8018024 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017ff6:	bf00      	nop
 8017ff8:	e002      	b.n	8018000 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017ffa:	bf00      	nop
 8017ffc:	e000      	b.n	8018000 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017ffe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018000:	69fb      	ldr	r3, [r7, #28]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d006      	beq.n	8018014 <tcp_split_unsent_seg+0x25c>
 8018006:	4b09      	ldr	r3, [pc, #36]	; (801802c <tcp_split_unsent_seg+0x274>)
 8018008:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801800c:	490d      	ldr	r1, [pc, #52]	; (8018044 <tcp_split_unsent_seg+0x28c>)
 801800e:	4809      	ldr	r0, [pc, #36]	; (8018034 <tcp_split_unsent_seg+0x27c>)
 8018010:	f007 fc58 	bl	801f8c4 <iprintf>
  if (p != NULL) {
 8018014:	693b      	ldr	r3, [r7, #16]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d002      	beq.n	8018020 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801801a:	6938      	ldr	r0, [r7, #16]
 801801c:	f7fa fd7e 	bl	8012b1c <pbuf_free>
  }

  return ERR_MEM;
 8018020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018024:	4618      	mov	r0, r3
 8018026:	3724      	adds	r7, #36	; 0x24
 8018028:	46bd      	mov	sp, r7
 801802a:	bd90      	pop	{r4, r7, pc}
 801802c:	08023998 	.word	0x08023998
 8018030:	08023d2c 	.word	0x08023d2c
 8018034:	080239ec 	.word	0x080239ec
 8018038:	08023d50 	.word	0x08023d50
 801803c:	08023d74 	.word	0x08023d74
 8018040:	08023d84 	.word	0x08023d84
 8018044:	08023d94 	.word	0x08023d94

08018048 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018048:	b590      	push	{r4, r7, lr}
 801804a:	b085      	sub	sp, #20
 801804c:	af00      	add	r7, sp, #0
 801804e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d106      	bne.n	8018064 <tcp_send_fin+0x1c>
 8018056:	4b21      	ldr	r3, [pc, #132]	; (80180dc <tcp_send_fin+0x94>)
 8018058:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801805c:	4920      	ldr	r1, [pc, #128]	; (80180e0 <tcp_send_fin+0x98>)
 801805e:	4821      	ldr	r0, [pc, #132]	; (80180e4 <tcp_send_fin+0x9c>)
 8018060:	f007 fc30 	bl	801f8c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018068:	2b00      	cmp	r3, #0
 801806a:	d02e      	beq.n	80180ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018070:	60fb      	str	r3, [r7, #12]
 8018072:	e002      	b.n	801807a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d1f8      	bne.n	8018074 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	68db      	ldr	r3, [r3, #12]
 8018086:	899b      	ldrh	r3, [r3, #12]
 8018088:	b29b      	uxth	r3, r3
 801808a:	4618      	mov	r0, r3
 801808c:	f7f9 f910 	bl	80112b0 <lwip_htons>
 8018090:	4603      	mov	r3, r0
 8018092:	b2db      	uxtb	r3, r3
 8018094:	f003 0307 	and.w	r3, r3, #7
 8018098:	2b00      	cmp	r3, #0
 801809a:	d116      	bne.n	80180ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	68db      	ldr	r3, [r3, #12]
 80180a0:	899b      	ldrh	r3, [r3, #12]
 80180a2:	b29c      	uxth	r4, r3
 80180a4:	2001      	movs	r0, #1
 80180a6:	f7f9 f903 	bl	80112b0 <lwip_htons>
 80180aa:	4603      	mov	r3, r0
 80180ac:	461a      	mov	r2, r3
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	68db      	ldr	r3, [r3, #12]
 80180b2:	4322      	orrs	r2, r4
 80180b4:	b292      	uxth	r2, r2
 80180b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	8b5b      	ldrh	r3, [r3, #26]
 80180bc:	f043 0320 	orr.w	r3, r3, #32
 80180c0:	b29a      	uxth	r2, r3
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80180c6:	2300      	movs	r3, #0
 80180c8:	e004      	b.n	80180d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80180ca:	2101      	movs	r1, #1
 80180cc:	6878      	ldr	r0, [r7, #4]
 80180ce:	f000 f80b 	bl	80180e8 <tcp_enqueue_flags>
 80180d2:	4603      	mov	r3, r0
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	3714      	adds	r7, #20
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd90      	pop	{r4, r7, pc}
 80180dc:	08023998 	.word	0x08023998
 80180e0:	08023da0 	.word	0x08023da0
 80180e4:	080239ec 	.word	0x080239ec

080180e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b08a      	sub	sp, #40	; 0x28
 80180ec:	af02      	add	r7, sp, #8
 80180ee:	6078      	str	r0, [r7, #4]
 80180f0:	460b      	mov	r3, r1
 80180f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80180f4:	2300      	movs	r3, #0
 80180f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80180f8:	2300      	movs	r3, #0
 80180fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80180fc:	78fb      	ldrb	r3, [r7, #3]
 80180fe:	f003 0303 	and.w	r3, r3, #3
 8018102:	2b00      	cmp	r3, #0
 8018104:	d106      	bne.n	8018114 <tcp_enqueue_flags+0x2c>
 8018106:	4b67      	ldr	r3, [pc, #412]	; (80182a4 <tcp_enqueue_flags+0x1bc>)
 8018108:	f240 4211 	movw	r2, #1041	; 0x411
 801810c:	4966      	ldr	r1, [pc, #408]	; (80182a8 <tcp_enqueue_flags+0x1c0>)
 801810e:	4867      	ldr	r0, [pc, #412]	; (80182ac <tcp_enqueue_flags+0x1c4>)
 8018110:	f007 fbd8 	bl	801f8c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d106      	bne.n	8018128 <tcp_enqueue_flags+0x40>
 801811a:	4b62      	ldr	r3, [pc, #392]	; (80182a4 <tcp_enqueue_flags+0x1bc>)
 801811c:	f240 4213 	movw	r2, #1043	; 0x413
 8018120:	4963      	ldr	r1, [pc, #396]	; (80182b0 <tcp_enqueue_flags+0x1c8>)
 8018122:	4862      	ldr	r0, [pc, #392]	; (80182ac <tcp_enqueue_flags+0x1c4>)
 8018124:	f007 fbce 	bl	801f8c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018128:	78fb      	ldrb	r3, [r7, #3]
 801812a:	f003 0302 	and.w	r3, r3, #2
 801812e:	2b00      	cmp	r3, #0
 8018130:	d001      	beq.n	8018136 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018132:	2301      	movs	r3, #1
 8018134:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018136:	7ffb      	ldrb	r3, [r7, #31]
 8018138:	009b      	lsls	r3, r3, #2
 801813a:	b2db      	uxtb	r3, r3
 801813c:	f003 0304 	and.w	r3, r3, #4
 8018140:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018142:	7dfb      	ldrb	r3, [r7, #23]
 8018144:	b29b      	uxth	r3, r3
 8018146:	f44f 7220 	mov.w	r2, #640	; 0x280
 801814a:	4619      	mov	r1, r3
 801814c:	2036      	movs	r0, #54	; 0x36
 801814e:	f7fa fa01 	bl	8012554 <pbuf_alloc>
 8018152:	6138      	str	r0, [r7, #16]
 8018154:	693b      	ldr	r3, [r7, #16]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d109      	bne.n	801816e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	8b5b      	ldrh	r3, [r3, #26]
 801815e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018162:	b29a      	uxth	r2, r3
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801816c:	e095      	b.n	801829a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	895a      	ldrh	r2, [r3, #10]
 8018172:	7dfb      	ldrb	r3, [r7, #23]
 8018174:	b29b      	uxth	r3, r3
 8018176:	429a      	cmp	r2, r3
 8018178:	d206      	bcs.n	8018188 <tcp_enqueue_flags+0xa0>
 801817a:	4b4a      	ldr	r3, [pc, #296]	; (80182a4 <tcp_enqueue_flags+0x1bc>)
 801817c:	f240 4239 	movw	r2, #1081	; 0x439
 8018180:	494c      	ldr	r1, [pc, #304]	; (80182b4 <tcp_enqueue_flags+0x1cc>)
 8018182:	484a      	ldr	r0, [pc, #296]	; (80182ac <tcp_enqueue_flags+0x1c4>)
 8018184:	f007 fb9e 	bl	801f8c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801818c:	78fa      	ldrb	r2, [r7, #3]
 801818e:	7ffb      	ldrb	r3, [r7, #31]
 8018190:	9300      	str	r3, [sp, #0]
 8018192:	460b      	mov	r3, r1
 8018194:	6939      	ldr	r1, [r7, #16]
 8018196:	6878      	ldr	r0, [r7, #4]
 8018198:	f7ff f918 	bl	80173cc <tcp_create_segment>
 801819c:	60f8      	str	r0, [r7, #12]
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d109      	bne.n	80181b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	8b5b      	ldrh	r3, [r3, #26]
 80181a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80181ac:	b29a      	uxth	r2, r3
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80181b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80181b6:	e070      	b.n	801829a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	68db      	ldr	r3, [r3, #12]
 80181bc:	f003 0303 	and.w	r3, r3, #3
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d006      	beq.n	80181d2 <tcp_enqueue_flags+0xea>
 80181c4:	4b37      	ldr	r3, [pc, #220]	; (80182a4 <tcp_enqueue_flags+0x1bc>)
 80181c6:	f240 4242 	movw	r2, #1090	; 0x442
 80181ca:	493b      	ldr	r1, [pc, #236]	; (80182b8 <tcp_enqueue_flags+0x1d0>)
 80181cc:	4837      	ldr	r0, [pc, #220]	; (80182ac <tcp_enqueue_flags+0x1c4>)
 80181ce:	f007 fb79 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	891b      	ldrh	r3, [r3, #8]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d006      	beq.n	80181e8 <tcp_enqueue_flags+0x100>
 80181da:	4b32      	ldr	r3, [pc, #200]	; (80182a4 <tcp_enqueue_flags+0x1bc>)
 80181dc:	f240 4243 	movw	r2, #1091	; 0x443
 80181e0:	4936      	ldr	r1, [pc, #216]	; (80182bc <tcp_enqueue_flags+0x1d4>)
 80181e2:	4832      	ldr	r0, [pc, #200]	; (80182ac <tcp_enqueue_flags+0x1c4>)
 80181e4:	f007 fb6e 	bl	801f8c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d103      	bne.n	80181f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	68fa      	ldr	r2, [r7, #12]
 80181f4:	66da      	str	r2, [r3, #108]	; 0x6c
 80181f6:	e00d      	b.n	8018214 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181fc:	61bb      	str	r3, [r7, #24]
 80181fe:	e002      	b.n	8018206 <tcp_enqueue_flags+0x11e>
 8018200:	69bb      	ldr	r3, [r7, #24]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	61bb      	str	r3, [r7, #24]
 8018206:	69bb      	ldr	r3, [r7, #24]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d1f8      	bne.n	8018200 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	68fa      	ldr	r2, [r7, #12]
 8018212:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2200      	movs	r2, #0
 8018218:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801821c:	78fb      	ldrb	r3, [r7, #3]
 801821e:	f003 0302 	and.w	r3, r3, #2
 8018222:	2b00      	cmp	r3, #0
 8018224:	d104      	bne.n	8018230 <tcp_enqueue_flags+0x148>
 8018226:	78fb      	ldrb	r3, [r7, #3]
 8018228:	f003 0301 	and.w	r3, r3, #1
 801822c:	2b00      	cmp	r3, #0
 801822e:	d004      	beq.n	801823a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018234:	1c5a      	adds	r2, r3, #1
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801823a:	78fb      	ldrb	r3, [r7, #3]
 801823c:	f003 0301 	and.w	r3, r3, #1
 8018240:	2b00      	cmp	r3, #0
 8018242:	d006      	beq.n	8018252 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	8b5b      	ldrh	r3, [r3, #26]
 8018248:	f043 0320 	orr.w	r3, r3, #32
 801824c:	b29a      	uxth	r2, r3
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	685b      	ldr	r3, [r3, #4]
 8018256:	4618      	mov	r0, r3
 8018258:	f7fa fcee 	bl	8012c38 <pbuf_clen>
 801825c:	4603      	mov	r3, r0
 801825e:	461a      	mov	r2, r3
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018266:	4413      	add	r3, r2
 8018268:	b29a      	uxth	r2, r3
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018276:	2b00      	cmp	r3, #0
 8018278:	d00e      	beq.n	8018298 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801827e:	2b00      	cmp	r3, #0
 8018280:	d10a      	bne.n	8018298 <tcp_enqueue_flags+0x1b0>
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018286:	2b00      	cmp	r3, #0
 8018288:	d106      	bne.n	8018298 <tcp_enqueue_flags+0x1b0>
 801828a:	4b06      	ldr	r3, [pc, #24]	; (80182a4 <tcp_enqueue_flags+0x1bc>)
 801828c:	f240 4265 	movw	r2, #1125	; 0x465
 8018290:	490b      	ldr	r1, [pc, #44]	; (80182c0 <tcp_enqueue_flags+0x1d8>)
 8018292:	4806      	ldr	r0, [pc, #24]	; (80182ac <tcp_enqueue_flags+0x1c4>)
 8018294:	f007 fb16 	bl	801f8c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018298:	2300      	movs	r3, #0
}
 801829a:	4618      	mov	r0, r3
 801829c:	3720      	adds	r7, #32
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}
 80182a2:	bf00      	nop
 80182a4:	08023998 	.word	0x08023998
 80182a8:	08023dbc 	.word	0x08023dbc
 80182ac:	080239ec 	.word	0x080239ec
 80182b0:	08023e14 	.word	0x08023e14
 80182b4:	08023e34 	.word	0x08023e34
 80182b8:	08023e70 	.word	0x08023e70
 80182bc:	08023e88 	.word	0x08023e88
 80182c0:	08023eb4 	.word	0x08023eb4

080182c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80182c4:	b5b0      	push	{r4, r5, r7, lr}
 80182c6:	b08a      	sub	sp, #40	; 0x28
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d106      	bne.n	80182e0 <tcp_output+0x1c>
 80182d2:	4b8a      	ldr	r3, [pc, #552]	; (80184fc <tcp_output+0x238>)
 80182d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80182d8:	4989      	ldr	r1, [pc, #548]	; (8018500 <tcp_output+0x23c>)
 80182da:	488a      	ldr	r0, [pc, #552]	; (8018504 <tcp_output+0x240>)
 80182dc:	f007 faf2 	bl	801f8c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	7d1b      	ldrb	r3, [r3, #20]
 80182e4:	2b01      	cmp	r3, #1
 80182e6:	d106      	bne.n	80182f6 <tcp_output+0x32>
 80182e8:	4b84      	ldr	r3, [pc, #528]	; (80184fc <tcp_output+0x238>)
 80182ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80182ee:	4986      	ldr	r1, [pc, #536]	; (8018508 <tcp_output+0x244>)
 80182f0:	4884      	ldr	r0, [pc, #528]	; (8018504 <tcp_output+0x240>)
 80182f2:	f007 fae7 	bl	801f8c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80182f6:	4b85      	ldr	r3, [pc, #532]	; (801850c <tcp_output+0x248>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	687a      	ldr	r2, [r7, #4]
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d101      	bne.n	8018304 <tcp_output+0x40>
    return ERR_OK;
 8018300:	2300      	movs	r3, #0
 8018302:	e1ce      	b.n	80186a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018310:	4293      	cmp	r3, r2
 8018312:	bf28      	it	cs
 8018314:	4613      	movcs	r3, r2
 8018316:	b29b      	uxth	r3, r3
 8018318:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801831e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8018320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018322:	2b00      	cmp	r3, #0
 8018324:	d10b      	bne.n	801833e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	8b5b      	ldrh	r3, [r3, #26]
 801832a:	f003 0302 	and.w	r3, r3, #2
 801832e:	2b00      	cmp	r3, #0
 8018330:	f000 81aa 	beq.w	8018688 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f000 fdcb 	bl	8018ed0 <tcp_send_empty_ack>
 801833a:	4603      	mov	r3, r0
 801833c:	e1b1      	b.n	80186a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801833e:	6879      	ldr	r1, [r7, #4]
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	3304      	adds	r3, #4
 8018344:	461a      	mov	r2, r3
 8018346:	6878      	ldr	r0, [r7, #4]
 8018348:	f7ff f824 	bl	8017394 <tcp_route>
 801834c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801834e:	697b      	ldr	r3, [r7, #20]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d102      	bne.n	801835a <tcp_output+0x96>
    return ERR_RTE;
 8018354:	f06f 0303 	mvn.w	r3, #3
 8018358:	e1a3      	b.n	80186a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d003      	beq.n	8018368 <tcp_output+0xa4>
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d111      	bne.n	801838c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018368:	697b      	ldr	r3, [r7, #20]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d002      	beq.n	8018374 <tcp_output+0xb0>
 801836e:	697b      	ldr	r3, [r7, #20]
 8018370:	3304      	adds	r3, #4
 8018372:	e000      	b.n	8018376 <tcp_output+0xb2>
 8018374:	2300      	movs	r3, #0
 8018376:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018378:	693b      	ldr	r3, [r7, #16]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d102      	bne.n	8018384 <tcp_output+0xc0>
      return ERR_RTE;
 801837e:	f06f 0303 	mvn.w	r3, #3
 8018382:	e18e      	b.n	80186a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018384:	693b      	ldr	r3, [r7, #16]
 8018386:	681a      	ldr	r2, [r3, #0]
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801838e:	68db      	ldr	r3, [r3, #12]
 8018390:	685b      	ldr	r3, [r3, #4]
 8018392:	4618      	mov	r0, r3
 8018394:	f7f8 ffa1 	bl	80112da <lwip_htonl>
 8018398:	4602      	mov	r2, r0
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801839e:	1ad3      	subs	r3, r2, r3
 80183a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183a2:	8912      	ldrh	r2, [r2, #8]
 80183a4:	4413      	add	r3, r2
 80183a6:	69ba      	ldr	r2, [r7, #24]
 80183a8:	429a      	cmp	r2, r3
 80183aa:	d227      	bcs.n	80183fc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80183b2:	461a      	mov	r2, r3
 80183b4:	69bb      	ldr	r3, [r7, #24]
 80183b6:	4293      	cmp	r3, r2
 80183b8:	d114      	bne.n	80183e4 <tcp_output+0x120>
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d110      	bne.n	80183e4 <tcp_output+0x120>
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d10b      	bne.n	80183e4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2200      	movs	r2, #0
 80183d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	2201      	movs	r2, #1
 80183d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	2200      	movs	r2, #0
 80183e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	8b5b      	ldrh	r3, [r3, #26]
 80183e8:	f003 0302 	and.w	r3, r3, #2
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	f000 814d 	beq.w	801868c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80183f2:	6878      	ldr	r0, [r7, #4]
 80183f4:	f000 fd6c 	bl	8018ed0 <tcp_send_empty_ack>
 80183f8:	4603      	mov	r3, r0
 80183fa:	e152      	b.n	80186a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	2200      	movs	r2, #0
 8018400:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018408:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801840a:	6a3b      	ldr	r3, [r7, #32]
 801840c:	2b00      	cmp	r3, #0
 801840e:	f000 811c 	beq.w	801864a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018412:	e002      	b.n	801841a <tcp_output+0x156>
 8018414:	6a3b      	ldr	r3, [r7, #32]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	623b      	str	r3, [r7, #32]
 801841a:	6a3b      	ldr	r3, [r7, #32]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d1f8      	bne.n	8018414 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018422:	e112      	b.n	801864a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018426:	68db      	ldr	r3, [r3, #12]
 8018428:	899b      	ldrh	r3, [r3, #12]
 801842a:	b29b      	uxth	r3, r3
 801842c:	4618      	mov	r0, r3
 801842e:	f7f8 ff3f 	bl	80112b0 <lwip_htons>
 8018432:	4603      	mov	r3, r0
 8018434:	b2db      	uxtb	r3, r3
 8018436:	f003 0304 	and.w	r3, r3, #4
 801843a:	2b00      	cmp	r3, #0
 801843c:	d006      	beq.n	801844c <tcp_output+0x188>
 801843e:	4b2f      	ldr	r3, [pc, #188]	; (80184fc <tcp_output+0x238>)
 8018440:	f240 5236 	movw	r2, #1334	; 0x536
 8018444:	4932      	ldr	r1, [pc, #200]	; (8018510 <tcp_output+0x24c>)
 8018446:	482f      	ldr	r0, [pc, #188]	; (8018504 <tcp_output+0x240>)
 8018448:	f007 fa3c 	bl	801f8c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018450:	2b00      	cmp	r3, #0
 8018452:	d01f      	beq.n	8018494 <tcp_output+0x1d0>
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	8b5b      	ldrh	r3, [r3, #26]
 8018458:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801845c:	2b00      	cmp	r3, #0
 801845e:	d119      	bne.n	8018494 <tcp_output+0x1d0>
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018464:	2b00      	cmp	r3, #0
 8018466:	d00b      	beq.n	8018480 <tcp_output+0x1bc>
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d110      	bne.n	8018494 <tcp_output+0x1d0>
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018476:	891a      	ldrh	r2, [r3, #8]
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801847c:	429a      	cmp	r2, r3
 801847e:	d209      	bcs.n	8018494 <tcp_output+0x1d0>
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018486:	2b00      	cmp	r3, #0
 8018488:	d004      	beq.n	8018494 <tcp_output+0x1d0>
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018490:	2b08      	cmp	r3, #8
 8018492:	d901      	bls.n	8018498 <tcp_output+0x1d4>
 8018494:	2301      	movs	r3, #1
 8018496:	e000      	b.n	801849a <tcp_output+0x1d6>
 8018498:	2300      	movs	r3, #0
 801849a:	2b00      	cmp	r3, #0
 801849c:	d106      	bne.n	80184ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	8b5b      	ldrh	r3, [r3, #26]
 80184a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	f000 80e4 	beq.w	8018674 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	7d1b      	ldrb	r3, [r3, #20]
 80184b0:	2b02      	cmp	r3, #2
 80184b2:	d00d      	beq.n	80184d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80184b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184b6:	68db      	ldr	r3, [r3, #12]
 80184b8:	899b      	ldrh	r3, [r3, #12]
 80184ba:	b29c      	uxth	r4, r3
 80184bc:	2010      	movs	r0, #16
 80184be:	f7f8 fef7 	bl	80112b0 <lwip_htons>
 80184c2:	4603      	mov	r3, r0
 80184c4:	461a      	mov	r2, r3
 80184c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c8:	68db      	ldr	r3, [r3, #12]
 80184ca:	4322      	orrs	r2, r4
 80184cc:	b292      	uxth	r2, r2
 80184ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80184d0:	697a      	ldr	r2, [r7, #20]
 80184d2:	6879      	ldr	r1, [r7, #4]
 80184d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184d6:	f000 f909 	bl	80186ec <tcp_output_segment>
 80184da:	4603      	mov	r3, r0
 80184dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80184de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d016      	beq.n	8018514 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	8b5b      	ldrh	r3, [r3, #26]
 80184ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80184ee:	b29a      	uxth	r2, r3
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	835a      	strh	r2, [r3, #26]
      return err;
 80184f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80184f8:	e0d3      	b.n	80186a2 <tcp_output+0x3de>
 80184fa:	bf00      	nop
 80184fc:	08023998 	.word	0x08023998
 8018500:	08023edc 	.word	0x08023edc
 8018504:	080239ec 	.word	0x080239ec
 8018508:	08023ef4 	.word	0x08023ef4
 801850c:	20010214 	.word	0x20010214
 8018510:	08023f1c 	.word	0x08023f1c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018516:	681a      	ldr	r2, [r3, #0]
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	7d1b      	ldrb	r3, [r3, #20]
 8018520:	2b02      	cmp	r3, #2
 8018522:	d006      	beq.n	8018532 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	8b5b      	ldrh	r3, [r3, #26]
 8018528:	f023 0303 	bic.w	r3, r3, #3
 801852c:	b29a      	uxth	r2, r3
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018534:	68db      	ldr	r3, [r3, #12]
 8018536:	685b      	ldr	r3, [r3, #4]
 8018538:	4618      	mov	r0, r3
 801853a:	f7f8 fece 	bl	80112da <lwip_htonl>
 801853e:	4604      	mov	r4, r0
 8018540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018542:	891b      	ldrh	r3, [r3, #8]
 8018544:	461d      	mov	r5, r3
 8018546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018548:	68db      	ldr	r3, [r3, #12]
 801854a:	899b      	ldrh	r3, [r3, #12]
 801854c:	b29b      	uxth	r3, r3
 801854e:	4618      	mov	r0, r3
 8018550:	f7f8 feae 	bl	80112b0 <lwip_htons>
 8018554:	4603      	mov	r3, r0
 8018556:	b2db      	uxtb	r3, r3
 8018558:	f003 0303 	and.w	r3, r3, #3
 801855c:	2b00      	cmp	r3, #0
 801855e:	d001      	beq.n	8018564 <tcp_output+0x2a0>
 8018560:	2301      	movs	r3, #1
 8018562:	e000      	b.n	8018566 <tcp_output+0x2a2>
 8018564:	2300      	movs	r3, #0
 8018566:	442b      	add	r3, r5
 8018568:	4423      	add	r3, r4
 801856a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018570:	68bb      	ldr	r3, [r7, #8]
 8018572:	1ad3      	subs	r3, r2, r3
 8018574:	2b00      	cmp	r3, #0
 8018576:	da02      	bge.n	801857e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	68ba      	ldr	r2, [r7, #8]
 801857c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018580:	891b      	ldrh	r3, [r3, #8]
 8018582:	461c      	mov	r4, r3
 8018584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018586:	68db      	ldr	r3, [r3, #12]
 8018588:	899b      	ldrh	r3, [r3, #12]
 801858a:	b29b      	uxth	r3, r3
 801858c:	4618      	mov	r0, r3
 801858e:	f7f8 fe8f 	bl	80112b0 <lwip_htons>
 8018592:	4603      	mov	r3, r0
 8018594:	b2db      	uxtb	r3, r3
 8018596:	f003 0303 	and.w	r3, r3, #3
 801859a:	2b00      	cmp	r3, #0
 801859c:	d001      	beq.n	80185a2 <tcp_output+0x2de>
 801859e:	2301      	movs	r3, #1
 80185a0:	e000      	b.n	80185a4 <tcp_output+0x2e0>
 80185a2:	2300      	movs	r3, #0
 80185a4:	4423      	add	r3, r4
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d049      	beq.n	801863e <tcp_output+0x37a>
      seg->next = NULL;
 80185aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185ac:	2200      	movs	r2, #0
 80185ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d105      	bne.n	80185c4 <tcp_output+0x300>
        pcb->unacked = seg;
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80185bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80185be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c0:	623b      	str	r3, [r7, #32]
 80185c2:	e03f      	b.n	8018644 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80185c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c6:	68db      	ldr	r3, [r3, #12]
 80185c8:	685b      	ldr	r3, [r3, #4]
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7f8 fe85 	bl	80112da <lwip_htonl>
 80185d0:	4604      	mov	r4, r0
 80185d2:	6a3b      	ldr	r3, [r7, #32]
 80185d4:	68db      	ldr	r3, [r3, #12]
 80185d6:	685b      	ldr	r3, [r3, #4]
 80185d8:	4618      	mov	r0, r3
 80185da:	f7f8 fe7e 	bl	80112da <lwip_htonl>
 80185de:	4603      	mov	r3, r0
 80185e0:	1ae3      	subs	r3, r4, r3
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	da24      	bge.n	8018630 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	3370      	adds	r3, #112	; 0x70
 80185ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80185ec:	e002      	b.n	80185f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80185ee:	69fb      	ldr	r3, [r7, #28]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80185f4:	69fb      	ldr	r3, [r7, #28]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d011      	beq.n	8018620 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80185fc:	69fb      	ldr	r3, [r7, #28]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	68db      	ldr	r3, [r3, #12]
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	4618      	mov	r0, r3
 8018606:	f7f8 fe68 	bl	80112da <lwip_htonl>
 801860a:	4604      	mov	r4, r0
 801860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801860e:	68db      	ldr	r3, [r3, #12]
 8018610:	685b      	ldr	r3, [r3, #4]
 8018612:	4618      	mov	r0, r3
 8018614:	f7f8 fe61 	bl	80112da <lwip_htonl>
 8018618:	4603      	mov	r3, r0
 801861a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801861c:	2b00      	cmp	r3, #0
 801861e:	dbe6      	blt.n	80185ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018620:	69fb      	ldr	r3, [r7, #28]
 8018622:	681a      	ldr	r2, [r3, #0]
 8018624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018626:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018628:	69fb      	ldr	r3, [r7, #28]
 801862a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801862c:	601a      	str	r2, [r3, #0]
 801862e:	e009      	b.n	8018644 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018630:	6a3b      	ldr	r3, [r7, #32]
 8018632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018634:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018636:	6a3b      	ldr	r3, [r7, #32]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	623b      	str	r3, [r7, #32]
 801863c:	e002      	b.n	8018644 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801863e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018640:	f7fb ff19 	bl	8014476 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018648:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801864c:	2b00      	cmp	r3, #0
 801864e:	d012      	beq.n	8018676 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018652:	68db      	ldr	r3, [r3, #12]
 8018654:	685b      	ldr	r3, [r3, #4]
 8018656:	4618      	mov	r0, r3
 8018658:	f7f8 fe3f 	bl	80112da <lwip_htonl>
 801865c:	4602      	mov	r2, r0
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018662:	1ad3      	subs	r3, r2, r3
 8018664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018666:	8912      	ldrh	r2, [r2, #8]
 8018668:	4413      	add	r3, r2
  while (seg != NULL &&
 801866a:	69ba      	ldr	r2, [r7, #24]
 801866c:	429a      	cmp	r2, r3
 801866e:	f4bf aed9 	bcs.w	8018424 <tcp_output+0x160>
 8018672:	e000      	b.n	8018676 <tcp_output+0x3b2>
      break;
 8018674:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801867a:	2b00      	cmp	r3, #0
 801867c:	d108      	bne.n	8018690 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2200      	movs	r2, #0
 8018682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8018686:	e004      	b.n	8018692 <tcp_output+0x3ce>
    goto output_done;
 8018688:	bf00      	nop
 801868a:	e002      	b.n	8018692 <tcp_output+0x3ce>
    goto output_done;
 801868c:	bf00      	nop
 801868e:	e000      	b.n	8018692 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018690:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	8b5b      	ldrh	r3, [r3, #26]
 8018696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801869a:	b29a      	uxth	r2, r3
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80186a0:	2300      	movs	r3, #0
}
 80186a2:	4618      	mov	r0, r3
 80186a4:	3728      	adds	r7, #40	; 0x28
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bdb0      	pop	{r4, r5, r7, pc}
 80186aa:	bf00      	nop

080186ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b082      	sub	sp, #8
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d106      	bne.n	80186c8 <tcp_output_segment_busy+0x1c>
 80186ba:	4b09      	ldr	r3, [pc, #36]	; (80186e0 <tcp_output_segment_busy+0x34>)
 80186bc:	f240 529a 	movw	r2, #1434	; 0x59a
 80186c0:	4908      	ldr	r1, [pc, #32]	; (80186e4 <tcp_output_segment_busy+0x38>)
 80186c2:	4809      	ldr	r0, [pc, #36]	; (80186e8 <tcp_output_segment_busy+0x3c>)
 80186c4:	f007 f8fe 	bl	801f8c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	685b      	ldr	r3, [r3, #4]
 80186cc:	7b9b      	ldrb	r3, [r3, #14]
 80186ce:	2b01      	cmp	r3, #1
 80186d0:	d001      	beq.n	80186d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80186d2:	2301      	movs	r3, #1
 80186d4:	e000      	b.n	80186d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80186d6:	2300      	movs	r3, #0
}
 80186d8:	4618      	mov	r0, r3
 80186da:	3708      	adds	r7, #8
 80186dc:	46bd      	mov	sp, r7
 80186de:	bd80      	pop	{r7, pc}
 80186e0:	08023998 	.word	0x08023998
 80186e4:	08023f34 	.word	0x08023f34
 80186e8:	080239ec 	.word	0x080239ec

080186ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80186ec:	b5b0      	push	{r4, r5, r7, lr}
 80186ee:	b08c      	sub	sp, #48	; 0x30
 80186f0:	af04      	add	r7, sp, #16
 80186f2:	60f8      	str	r0, [r7, #12]
 80186f4:	60b9      	str	r1, [r7, #8]
 80186f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d106      	bne.n	801870c <tcp_output_segment+0x20>
 80186fe:	4b64      	ldr	r3, [pc, #400]	; (8018890 <tcp_output_segment+0x1a4>)
 8018700:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018704:	4963      	ldr	r1, [pc, #396]	; (8018894 <tcp_output_segment+0x1a8>)
 8018706:	4864      	ldr	r0, [pc, #400]	; (8018898 <tcp_output_segment+0x1ac>)
 8018708:	f007 f8dc 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801870c:	68bb      	ldr	r3, [r7, #8]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d106      	bne.n	8018720 <tcp_output_segment+0x34>
 8018712:	4b5f      	ldr	r3, [pc, #380]	; (8018890 <tcp_output_segment+0x1a4>)
 8018714:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018718:	4960      	ldr	r1, [pc, #384]	; (801889c <tcp_output_segment+0x1b0>)
 801871a:	485f      	ldr	r0, [pc, #380]	; (8018898 <tcp_output_segment+0x1ac>)
 801871c:	f007 f8d2 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	2b00      	cmp	r3, #0
 8018724:	d106      	bne.n	8018734 <tcp_output_segment+0x48>
 8018726:	4b5a      	ldr	r3, [pc, #360]	; (8018890 <tcp_output_segment+0x1a4>)
 8018728:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801872c:	495c      	ldr	r1, [pc, #368]	; (80188a0 <tcp_output_segment+0x1b4>)
 801872e:	485a      	ldr	r0, [pc, #360]	; (8018898 <tcp_output_segment+0x1ac>)
 8018730:	f007 f8c8 	bl	801f8c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018734:	68f8      	ldr	r0, [r7, #12]
 8018736:	f7ff ffb9 	bl	80186ac <tcp_output_segment_busy>
 801873a:	4603      	mov	r3, r0
 801873c:	2b00      	cmp	r3, #0
 801873e:	d001      	beq.n	8018744 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018740:	2300      	movs	r3, #0
 8018742:	e0a1      	b.n	8018888 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018744:	68bb      	ldr	r3, [r7, #8]
 8018746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	68dc      	ldr	r4, [r3, #12]
 801874c:	4610      	mov	r0, r2
 801874e:	f7f8 fdc4 	bl	80112da <lwip_htonl>
 8018752:	4603      	mov	r3, r0
 8018754:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	68dc      	ldr	r4, [r3, #12]
 801875e:	4610      	mov	r0, r2
 8018760:	f7f8 fda6 	bl	80112b0 <lwip_htons>
 8018764:	4603      	mov	r3, r0
 8018766:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018768:	68bb      	ldr	r3, [r7, #8]
 801876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801876c:	68ba      	ldr	r2, [r7, #8]
 801876e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018770:	441a      	add	r2, r3
 8018772:	68bb      	ldr	r3, [r7, #8]
 8018774:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	68db      	ldr	r3, [r3, #12]
 801877a:	3314      	adds	r3, #20
 801877c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	7a9b      	ldrb	r3, [r3, #10]
 8018782:	f003 0301 	and.w	r3, r3, #1
 8018786:	2b00      	cmp	r3, #0
 8018788:	d015      	beq.n	80187b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801878a:	68bb      	ldr	r3, [r7, #8]
 801878c:	3304      	adds	r3, #4
 801878e:	461a      	mov	r2, r3
 8018790:	6879      	ldr	r1, [r7, #4]
 8018792:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018796:	f7fc fa33 	bl	8014c00 <tcp_eff_send_mss_netif>
 801879a:	4603      	mov	r3, r0
 801879c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801879e:	8b7b      	ldrh	r3, [r7, #26]
 80187a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80187a4:	4618      	mov	r0, r3
 80187a6:	f7f8 fd98 	bl	80112da <lwip_htonl>
 80187aa:	4602      	mov	r2, r0
 80187ac:	69fb      	ldr	r3, [r7, #28]
 80187ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80187b0:	69fb      	ldr	r3, [r7, #28]
 80187b2:	3304      	adds	r3, #4
 80187b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80187bc:	2b00      	cmp	r3, #0
 80187be:	da02      	bge.n	80187c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	2200      	movs	r2, #0
 80187c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80187c6:	68bb      	ldr	r3, [r7, #8]
 80187c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d10c      	bne.n	80187e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80187ce:	4b35      	ldr	r3, [pc, #212]	; (80188a4 <tcp_output_segment+0x1b8>)
 80187d0:	681a      	ldr	r2, [r3, #0]
 80187d2:	68bb      	ldr	r3, [r7, #8]
 80187d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	68db      	ldr	r3, [r3, #12]
 80187da:	685b      	ldr	r3, [r3, #4]
 80187dc:	4618      	mov	r0, r3
 80187de:	f7f8 fd7c 	bl	80112da <lwip_htonl>
 80187e2:	4602      	mov	r2, r0
 80187e4:	68bb      	ldr	r3, [r7, #8]
 80187e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	68da      	ldr	r2, [r3, #12]
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	685b      	ldr	r3, [r3, #4]
 80187f0:	685b      	ldr	r3, [r3, #4]
 80187f2:	1ad3      	subs	r3, r2, r3
 80187f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	685b      	ldr	r3, [r3, #4]
 80187fa:	8959      	ldrh	r1, [r3, #10]
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	685b      	ldr	r3, [r3, #4]
 8018800:	8b3a      	ldrh	r2, [r7, #24]
 8018802:	1a8a      	subs	r2, r1, r2
 8018804:	b292      	uxth	r2, r2
 8018806:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	685b      	ldr	r3, [r3, #4]
 801880c:	8919      	ldrh	r1, [r3, #8]
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	685b      	ldr	r3, [r3, #4]
 8018812:	8b3a      	ldrh	r2, [r7, #24]
 8018814:	1a8a      	subs	r2, r1, r2
 8018816:	b292      	uxth	r2, r2
 8018818:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	685b      	ldr	r3, [r3, #4]
 801881e:	68fa      	ldr	r2, [r7, #12]
 8018820:	68d2      	ldr	r2, [r2, #12]
 8018822:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	68db      	ldr	r3, [r3, #12]
 8018828:	2200      	movs	r2, #0
 801882a:	741a      	strb	r2, [r3, #16]
 801882c:	2200      	movs	r2, #0
 801882e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	68da      	ldr	r2, [r3, #12]
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	7a9b      	ldrb	r3, [r3, #10]
 8018838:	f003 0301 	and.w	r3, r3, #1
 801883c:	2b00      	cmp	r3, #0
 801883e:	d001      	beq.n	8018844 <tcp_output_segment+0x158>
 8018840:	2318      	movs	r3, #24
 8018842:	e000      	b.n	8018846 <tcp_output_segment+0x15a>
 8018844:	2314      	movs	r3, #20
 8018846:	4413      	add	r3, r2
 8018848:	69fa      	ldr	r2, [r7, #28]
 801884a:	429a      	cmp	r2, r3
 801884c:	d006      	beq.n	801885c <tcp_output_segment+0x170>
 801884e:	4b10      	ldr	r3, [pc, #64]	; (8018890 <tcp_output_segment+0x1a4>)
 8018850:	f240 621c 	movw	r2, #1564	; 0x61c
 8018854:	4914      	ldr	r1, [pc, #80]	; (80188a8 <tcp_output_segment+0x1bc>)
 8018856:	4810      	ldr	r0, [pc, #64]	; (8018898 <tcp_output_segment+0x1ac>)
 8018858:	f007 f834 	bl	801f8c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	6858      	ldr	r0, [r3, #4]
 8018860:	68b9      	ldr	r1, [r7, #8]
 8018862:	68bb      	ldr	r3, [r7, #8]
 8018864:	1d1c      	adds	r4, r3, #4
 8018866:	68bb      	ldr	r3, [r7, #8]
 8018868:	7add      	ldrb	r5, [r3, #11]
 801886a:	68bb      	ldr	r3, [r7, #8]
 801886c:	7a9b      	ldrb	r3, [r3, #10]
 801886e:	687a      	ldr	r2, [r7, #4]
 8018870:	9202      	str	r2, [sp, #8]
 8018872:	2206      	movs	r2, #6
 8018874:	9201      	str	r2, [sp, #4]
 8018876:	9300      	str	r3, [sp, #0]
 8018878:	462b      	mov	r3, r5
 801887a:	4622      	mov	r2, r4
 801887c:	f004 fc40 	bl	801d100 <ip4_output_if>
 8018880:	4603      	mov	r3, r0
 8018882:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018884:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018888:	4618      	mov	r0, r3
 801888a:	3720      	adds	r7, #32
 801888c:	46bd      	mov	sp, r7
 801888e:	bdb0      	pop	{r4, r5, r7, pc}
 8018890:	08023998 	.word	0x08023998
 8018894:	08023f5c 	.word	0x08023f5c
 8018898:	080239ec 	.word	0x080239ec
 801889c:	08023f7c 	.word	0x08023f7c
 80188a0:	08023f9c 	.word	0x08023f9c
 80188a4:	200101c8 	.word	0x200101c8
 80188a8:	08023fc0 	.word	0x08023fc0

080188ac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80188ac:	b5b0      	push	{r4, r5, r7, lr}
 80188ae:	b084      	sub	sp, #16
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d106      	bne.n	80188c8 <tcp_rexmit_rto_prepare+0x1c>
 80188ba:	4b31      	ldr	r3, [pc, #196]	; (8018980 <tcp_rexmit_rto_prepare+0xd4>)
 80188bc:	f240 6263 	movw	r2, #1635	; 0x663
 80188c0:	4930      	ldr	r1, [pc, #192]	; (8018984 <tcp_rexmit_rto_prepare+0xd8>)
 80188c2:	4831      	ldr	r0, [pc, #196]	; (8018988 <tcp_rexmit_rto_prepare+0xdc>)
 80188c4:	f006 fffe 	bl	801f8c4 <iprintf>

  if (pcb->unacked == NULL) {
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d102      	bne.n	80188d6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80188d0:	f06f 0305 	mvn.w	r3, #5
 80188d4:	e050      	b.n	8018978 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188da:	60fb      	str	r3, [r7, #12]
 80188dc:	e00b      	b.n	80188f6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80188de:	68f8      	ldr	r0, [r7, #12]
 80188e0:	f7ff fee4 	bl	80186ac <tcp_output_segment_busy>
 80188e4:	4603      	mov	r3, r0
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d002      	beq.n	80188f0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80188ea:	f06f 0305 	mvn.w	r3, #5
 80188ee:	e043      	b.n	8018978 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	60fb      	str	r3, [r7, #12]
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d1ef      	bne.n	80188de <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80188fe:	68f8      	ldr	r0, [r7, #12]
 8018900:	f7ff fed4 	bl	80186ac <tcp_output_segment_busy>
 8018904:	4603      	mov	r3, r0
 8018906:	2b00      	cmp	r3, #0
 8018908:	d002      	beq.n	8018910 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801890a:	f06f 0305 	mvn.w	r3, #5
 801890e:	e033      	b.n	8018978 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2200      	movs	r2, #0
 8018924:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	8b5b      	ldrh	r3, [r3, #26]
 801892a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801892e:	b29a      	uxth	r2, r3
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	68db      	ldr	r3, [r3, #12]
 8018938:	685b      	ldr	r3, [r3, #4]
 801893a:	4618      	mov	r0, r3
 801893c:	f7f8 fccd 	bl	80112da <lwip_htonl>
 8018940:	4604      	mov	r4, r0
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	891b      	ldrh	r3, [r3, #8]
 8018946:	461d      	mov	r5, r3
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	68db      	ldr	r3, [r3, #12]
 801894c:	899b      	ldrh	r3, [r3, #12]
 801894e:	b29b      	uxth	r3, r3
 8018950:	4618      	mov	r0, r3
 8018952:	f7f8 fcad 	bl	80112b0 <lwip_htons>
 8018956:	4603      	mov	r3, r0
 8018958:	b2db      	uxtb	r3, r3
 801895a:	f003 0303 	and.w	r3, r3, #3
 801895e:	2b00      	cmp	r3, #0
 8018960:	d001      	beq.n	8018966 <tcp_rexmit_rto_prepare+0xba>
 8018962:	2301      	movs	r3, #1
 8018964:	e000      	b.n	8018968 <tcp_rexmit_rto_prepare+0xbc>
 8018966:	2300      	movs	r3, #0
 8018968:	442b      	add	r3, r5
 801896a:	18e2      	adds	r2, r4, r3
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	2200      	movs	r2, #0
 8018974:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018976:	2300      	movs	r3, #0
}
 8018978:	4618      	mov	r0, r3
 801897a:	3710      	adds	r7, #16
 801897c:	46bd      	mov	sp, r7
 801897e:	bdb0      	pop	{r4, r5, r7, pc}
 8018980:	08023998 	.word	0x08023998
 8018984:	08023fd4 	.word	0x08023fd4
 8018988:	080239ec 	.word	0x080239ec

0801898c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801898c:	b580      	push	{r7, lr}
 801898e:	b082      	sub	sp, #8
 8018990:	af00      	add	r7, sp, #0
 8018992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d106      	bne.n	80189a8 <tcp_rexmit_rto_commit+0x1c>
 801899a:	4b0d      	ldr	r3, [pc, #52]	; (80189d0 <tcp_rexmit_rto_commit+0x44>)
 801899c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80189a0:	490c      	ldr	r1, [pc, #48]	; (80189d4 <tcp_rexmit_rto_commit+0x48>)
 80189a2:	480d      	ldr	r0, [pc, #52]	; (80189d8 <tcp_rexmit_rto_commit+0x4c>)
 80189a4:	f006 ff8e 	bl	801f8c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80189ae:	2bff      	cmp	r3, #255	; 0xff
 80189b0:	d007      	beq.n	80189c2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80189b8:	3301      	adds	r3, #1
 80189ba:	b2da      	uxtb	r2, r3
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80189c2:	6878      	ldr	r0, [r7, #4]
 80189c4:	f7ff fc7e 	bl	80182c4 <tcp_output>
}
 80189c8:	bf00      	nop
 80189ca:	3708      	adds	r7, #8
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bd80      	pop	{r7, pc}
 80189d0:	08023998 	.word	0x08023998
 80189d4:	08023ff8 	.word	0x08023ff8
 80189d8:	080239ec 	.word	0x080239ec

080189dc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b082      	sub	sp, #8
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d106      	bne.n	80189f8 <tcp_rexmit_rto+0x1c>
 80189ea:	4b0a      	ldr	r3, [pc, #40]	; (8018a14 <tcp_rexmit_rto+0x38>)
 80189ec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80189f0:	4909      	ldr	r1, [pc, #36]	; (8018a18 <tcp_rexmit_rto+0x3c>)
 80189f2:	480a      	ldr	r0, [pc, #40]	; (8018a1c <tcp_rexmit_rto+0x40>)
 80189f4:	f006 ff66 	bl	801f8c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80189f8:	6878      	ldr	r0, [r7, #4]
 80189fa:	f7ff ff57 	bl	80188ac <tcp_rexmit_rto_prepare>
 80189fe:	4603      	mov	r3, r0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d102      	bne.n	8018a0a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018a04:	6878      	ldr	r0, [r7, #4]
 8018a06:	f7ff ffc1 	bl	801898c <tcp_rexmit_rto_commit>
  }
}
 8018a0a:	bf00      	nop
 8018a0c:	3708      	adds	r7, #8
 8018a0e:	46bd      	mov	sp, r7
 8018a10:	bd80      	pop	{r7, pc}
 8018a12:	bf00      	nop
 8018a14:	08023998 	.word	0x08023998
 8018a18:	0802401c 	.word	0x0802401c
 8018a1c:	080239ec 	.word	0x080239ec

08018a20 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018a20:	b590      	push	{r4, r7, lr}
 8018a22:	b085      	sub	sp, #20
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d106      	bne.n	8018a3c <tcp_rexmit+0x1c>
 8018a2e:	4b2f      	ldr	r3, [pc, #188]	; (8018aec <tcp_rexmit+0xcc>)
 8018a30:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018a34:	492e      	ldr	r1, [pc, #184]	; (8018af0 <tcp_rexmit+0xd0>)
 8018a36:	482f      	ldr	r0, [pc, #188]	; (8018af4 <tcp_rexmit+0xd4>)
 8018a38:	f006 ff44 	bl	801f8c4 <iprintf>

  if (pcb->unacked == NULL) {
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d102      	bne.n	8018a4a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018a44:	f06f 0305 	mvn.w	r3, #5
 8018a48:	e04c      	b.n	8018ae4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a4e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018a50:	68b8      	ldr	r0, [r7, #8]
 8018a52:	f7ff fe2b 	bl	80186ac <tcp_output_segment_busy>
 8018a56:	4603      	mov	r3, r0
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d002      	beq.n	8018a62 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018a5c:	f06f 0305 	mvn.w	r3, #5
 8018a60:	e040      	b.n	8018ae4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018a62:	68bb      	ldr	r3, [r7, #8]
 8018a64:	681a      	ldr	r2, [r3, #0]
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	336c      	adds	r3, #108	; 0x6c
 8018a6e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018a70:	e002      	b.n	8018a78 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d011      	beq.n	8018aa4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	68db      	ldr	r3, [r3, #12]
 8018a86:	685b      	ldr	r3, [r3, #4]
 8018a88:	4618      	mov	r0, r3
 8018a8a:	f7f8 fc26 	bl	80112da <lwip_htonl>
 8018a8e:	4604      	mov	r4, r0
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	68db      	ldr	r3, [r3, #12]
 8018a94:	685b      	ldr	r3, [r3, #4]
 8018a96:	4618      	mov	r0, r3
 8018a98:	f7f8 fc1f 	bl	80112da <lwip_htonl>
 8018a9c:	4603      	mov	r3, r0
 8018a9e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	dbe6      	blt.n	8018a72 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	681a      	ldr	r2, [r3, #0]
 8018aa8:	68bb      	ldr	r3, [r7, #8]
 8018aaa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	68ba      	ldr	r2, [r7, #8]
 8018ab0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018ab2:	68bb      	ldr	r3, [r7, #8]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d103      	bne.n	8018ac2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	2200      	movs	r2, #0
 8018abe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018ac8:	2bff      	cmp	r3, #255	; 0xff
 8018aca:	d007      	beq.n	8018adc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018ad2:	3301      	adds	r3, #1
 8018ad4:	b2da      	uxtb	r2, r3
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	2200      	movs	r2, #0
 8018ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018ae2:	2300      	movs	r3, #0
}
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	3714      	adds	r7, #20
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	bd90      	pop	{r4, r7, pc}
 8018aec:	08023998 	.word	0x08023998
 8018af0:	08024038 	.word	0x08024038
 8018af4:	080239ec 	.word	0x080239ec

08018af8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018af8:	b580      	push	{r7, lr}
 8018afa:	b082      	sub	sp, #8
 8018afc:	af00      	add	r7, sp, #0
 8018afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d106      	bne.n	8018b14 <tcp_rexmit_fast+0x1c>
 8018b06:	4b2a      	ldr	r3, [pc, #168]	; (8018bb0 <tcp_rexmit_fast+0xb8>)
 8018b08:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018b0c:	4929      	ldr	r1, [pc, #164]	; (8018bb4 <tcp_rexmit_fast+0xbc>)
 8018b0e:	482a      	ldr	r0, [pc, #168]	; (8018bb8 <tcp_rexmit_fast+0xc0>)
 8018b10:	f006 fed8 	bl	801f8c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d044      	beq.n	8018ba6 <tcp_rexmit_fast+0xae>
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	8b5b      	ldrh	r3, [r3, #26]
 8018b20:	f003 0304 	and.w	r3, r3, #4
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d13e      	bne.n	8018ba6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018b28:	6878      	ldr	r0, [r7, #4]
 8018b2a:	f7ff ff79 	bl	8018a20 <tcp_rexmit>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d138      	bne.n	8018ba6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018b40:	4293      	cmp	r3, r2
 8018b42:	bf28      	it	cs
 8018b44:	4613      	movcs	r3, r2
 8018b46:	b29b      	uxth	r3, r3
 8018b48:	0fda      	lsrs	r2, r3, #31
 8018b4a:	4413      	add	r3, r2
 8018b4c:	105b      	asrs	r3, r3, #1
 8018b4e:	b29a      	uxth	r2, r3
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018b5c:	461a      	mov	r2, r3
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b62:	005b      	lsls	r3, r3, #1
 8018b64:	429a      	cmp	r2, r3
 8018b66:	d206      	bcs.n	8018b76 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b6c:	005b      	lsls	r3, r3, #1
 8018b6e:	b29a      	uxth	r2, r3
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018b80:	4619      	mov	r1, r3
 8018b82:	0049      	lsls	r1, r1, #1
 8018b84:	440b      	add	r3, r1
 8018b86:	b29b      	uxth	r3, r3
 8018b88:	4413      	add	r3, r2
 8018b8a:	b29a      	uxth	r2, r3
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	8b5b      	ldrh	r3, [r3, #26]
 8018b96:	f043 0304 	orr.w	r3, r3, #4
 8018b9a:	b29a      	uxth	r2, r3
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	2200      	movs	r2, #0
 8018ba4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018ba6:	bf00      	nop
 8018ba8:	3708      	adds	r7, #8
 8018baa:	46bd      	mov	sp, r7
 8018bac:	bd80      	pop	{r7, pc}
 8018bae:	bf00      	nop
 8018bb0:	08023998 	.word	0x08023998
 8018bb4:	08024050 	.word	0x08024050
 8018bb8:	080239ec 	.word	0x080239ec

08018bbc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b086      	sub	sp, #24
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	60f8      	str	r0, [r7, #12]
 8018bc4:	607b      	str	r3, [r7, #4]
 8018bc6:	460b      	mov	r3, r1
 8018bc8:	817b      	strh	r3, [r7, #10]
 8018bca:	4613      	mov	r3, r2
 8018bcc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018bce:	897a      	ldrh	r2, [r7, #10]
 8018bd0:	893b      	ldrh	r3, [r7, #8]
 8018bd2:	4413      	add	r3, r2
 8018bd4:	b29b      	uxth	r3, r3
 8018bd6:	3314      	adds	r3, #20
 8018bd8:	b29b      	uxth	r3, r3
 8018bda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018bde:	4619      	mov	r1, r3
 8018be0:	2022      	movs	r0, #34	; 0x22
 8018be2:	f7f9 fcb7 	bl	8012554 <pbuf_alloc>
 8018be6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018be8:	697b      	ldr	r3, [r7, #20]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d04d      	beq.n	8018c8a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018bee:	897b      	ldrh	r3, [r7, #10]
 8018bf0:	3313      	adds	r3, #19
 8018bf2:	697a      	ldr	r2, [r7, #20]
 8018bf4:	8952      	ldrh	r2, [r2, #10]
 8018bf6:	4293      	cmp	r3, r2
 8018bf8:	db06      	blt.n	8018c08 <tcp_output_alloc_header_common+0x4c>
 8018bfa:	4b26      	ldr	r3, [pc, #152]	; (8018c94 <tcp_output_alloc_header_common+0xd8>)
 8018bfc:	f240 7223 	movw	r2, #1827	; 0x723
 8018c00:	4925      	ldr	r1, [pc, #148]	; (8018c98 <tcp_output_alloc_header_common+0xdc>)
 8018c02:	4826      	ldr	r0, [pc, #152]	; (8018c9c <tcp_output_alloc_header_common+0xe0>)
 8018c04:	f006 fe5e 	bl	801f8c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018c08:	697b      	ldr	r3, [r7, #20]
 8018c0a:	685b      	ldr	r3, [r3, #4]
 8018c0c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018c0e:	8c3b      	ldrh	r3, [r7, #32]
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7f8 fb4d 	bl	80112b0 <lwip_htons>
 8018c16:	4603      	mov	r3, r0
 8018c18:	461a      	mov	r2, r3
 8018c1a:	693b      	ldr	r3, [r7, #16]
 8018c1c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c20:	4618      	mov	r0, r3
 8018c22:	f7f8 fb45 	bl	80112b0 <lwip_htons>
 8018c26:	4603      	mov	r3, r0
 8018c28:	461a      	mov	r2, r3
 8018c2a:	693b      	ldr	r3, [r7, #16]
 8018c2c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018c2e:	693b      	ldr	r3, [r7, #16]
 8018c30:	687a      	ldr	r2, [r7, #4]
 8018c32:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018c34:	68f8      	ldr	r0, [r7, #12]
 8018c36:	f7f8 fb50 	bl	80112da <lwip_htonl>
 8018c3a:	4602      	mov	r2, r0
 8018c3c:	693b      	ldr	r3, [r7, #16]
 8018c3e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018c40:	897b      	ldrh	r3, [r7, #10]
 8018c42:	089b      	lsrs	r3, r3, #2
 8018c44:	b29b      	uxth	r3, r3
 8018c46:	3305      	adds	r3, #5
 8018c48:	b29b      	uxth	r3, r3
 8018c4a:	031b      	lsls	r3, r3, #12
 8018c4c:	b29a      	uxth	r2, r3
 8018c4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018c52:	b29b      	uxth	r3, r3
 8018c54:	4313      	orrs	r3, r2
 8018c56:	b29b      	uxth	r3, r3
 8018c58:	4618      	mov	r0, r3
 8018c5a:	f7f8 fb29 	bl	80112b0 <lwip_htons>
 8018c5e:	4603      	mov	r3, r0
 8018c60:	461a      	mov	r2, r3
 8018c62:	693b      	ldr	r3, [r7, #16]
 8018c64:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018c66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018c68:	4618      	mov	r0, r3
 8018c6a:	f7f8 fb21 	bl	80112b0 <lwip_htons>
 8018c6e:	4603      	mov	r3, r0
 8018c70:	461a      	mov	r2, r3
 8018c72:	693b      	ldr	r3, [r7, #16]
 8018c74:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018c76:	693b      	ldr	r3, [r7, #16]
 8018c78:	2200      	movs	r2, #0
 8018c7a:	741a      	strb	r2, [r3, #16]
 8018c7c:	2200      	movs	r2, #0
 8018c7e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018c80:	693b      	ldr	r3, [r7, #16]
 8018c82:	2200      	movs	r2, #0
 8018c84:	749a      	strb	r2, [r3, #18]
 8018c86:	2200      	movs	r2, #0
 8018c88:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018c8a:	697b      	ldr	r3, [r7, #20]
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3718      	adds	r7, #24
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bd80      	pop	{r7, pc}
 8018c94:	08023998 	.word	0x08023998
 8018c98:	08024070 	.word	0x08024070
 8018c9c:	080239ec 	.word	0x080239ec

08018ca0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018ca0:	b5b0      	push	{r4, r5, r7, lr}
 8018ca2:	b08a      	sub	sp, #40	; 0x28
 8018ca4:	af04      	add	r7, sp, #16
 8018ca6:	60f8      	str	r0, [r7, #12]
 8018ca8:	607b      	str	r3, [r7, #4]
 8018caa:	460b      	mov	r3, r1
 8018cac:	817b      	strh	r3, [r7, #10]
 8018cae:	4613      	mov	r3, r2
 8018cb0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d106      	bne.n	8018cc6 <tcp_output_alloc_header+0x26>
 8018cb8:	4b15      	ldr	r3, [pc, #84]	; (8018d10 <tcp_output_alloc_header+0x70>)
 8018cba:	f240 7242 	movw	r2, #1858	; 0x742
 8018cbe:	4915      	ldr	r1, [pc, #84]	; (8018d14 <tcp_output_alloc_header+0x74>)
 8018cc0:	4815      	ldr	r0, [pc, #84]	; (8018d18 <tcp_output_alloc_header+0x78>)
 8018cc2:	f006 fdff 	bl	801f8c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	8adb      	ldrh	r3, [r3, #22]
 8018cce:	68fa      	ldr	r2, [r7, #12]
 8018cd0:	8b12      	ldrh	r2, [r2, #24]
 8018cd2:	68f9      	ldr	r1, [r7, #12]
 8018cd4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018cd6:	893d      	ldrh	r5, [r7, #8]
 8018cd8:	897c      	ldrh	r4, [r7, #10]
 8018cda:	9103      	str	r1, [sp, #12]
 8018cdc:	2110      	movs	r1, #16
 8018cde:	9102      	str	r1, [sp, #8]
 8018ce0:	9201      	str	r2, [sp, #4]
 8018ce2:	9300      	str	r3, [sp, #0]
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	462a      	mov	r2, r5
 8018ce8:	4621      	mov	r1, r4
 8018cea:	f7ff ff67 	bl	8018bbc <tcp_output_alloc_header_common>
 8018cee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d006      	beq.n	8018d04 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cfa:	68fa      	ldr	r2, [r7, #12]
 8018cfc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018cfe:	441a      	add	r2, r3
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018d04:	697b      	ldr	r3, [r7, #20]
}
 8018d06:	4618      	mov	r0, r3
 8018d08:	3718      	adds	r7, #24
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8018d0e:	bf00      	nop
 8018d10:	08023998 	.word	0x08023998
 8018d14:	080240a0 	.word	0x080240a0
 8018d18:	080239ec 	.word	0x080239ec

08018d1c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b088      	sub	sp, #32
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	60f8      	str	r0, [r7, #12]
 8018d24:	60b9      	str	r1, [r7, #8]
 8018d26:	4611      	mov	r1, r2
 8018d28:	461a      	mov	r2, r3
 8018d2a:	460b      	mov	r3, r1
 8018d2c:	71fb      	strb	r3, [r7, #7]
 8018d2e:	4613      	mov	r3, r2
 8018d30:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018d32:	2300      	movs	r3, #0
 8018d34:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d106      	bne.n	8018d4a <tcp_output_fill_options+0x2e>
 8018d3c:	4b12      	ldr	r3, [pc, #72]	; (8018d88 <tcp_output_fill_options+0x6c>)
 8018d3e:	f240 7256 	movw	r2, #1878	; 0x756
 8018d42:	4912      	ldr	r1, [pc, #72]	; (8018d8c <tcp_output_fill_options+0x70>)
 8018d44:	4812      	ldr	r0, [pc, #72]	; (8018d90 <tcp_output_fill_options+0x74>)
 8018d46:	f006 fdbd 	bl	801f8c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018d4a:	68bb      	ldr	r3, [r7, #8]
 8018d4c:	685b      	ldr	r3, [r3, #4]
 8018d4e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018d50:	69bb      	ldr	r3, [r7, #24]
 8018d52:	3314      	adds	r3, #20
 8018d54:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018d56:	8bfb      	ldrh	r3, [r7, #30]
 8018d58:	009b      	lsls	r3, r3, #2
 8018d5a:	461a      	mov	r2, r3
 8018d5c:	79fb      	ldrb	r3, [r7, #7]
 8018d5e:	009b      	lsls	r3, r3, #2
 8018d60:	f003 0304 	and.w	r3, r3, #4
 8018d64:	4413      	add	r3, r2
 8018d66:	3314      	adds	r3, #20
 8018d68:	69ba      	ldr	r2, [r7, #24]
 8018d6a:	4413      	add	r3, r2
 8018d6c:	697a      	ldr	r2, [r7, #20]
 8018d6e:	429a      	cmp	r2, r3
 8018d70:	d006      	beq.n	8018d80 <tcp_output_fill_options+0x64>
 8018d72:	4b05      	ldr	r3, [pc, #20]	; (8018d88 <tcp_output_fill_options+0x6c>)
 8018d74:	f240 7275 	movw	r2, #1909	; 0x775
 8018d78:	4906      	ldr	r1, [pc, #24]	; (8018d94 <tcp_output_fill_options+0x78>)
 8018d7a:	4805      	ldr	r0, [pc, #20]	; (8018d90 <tcp_output_fill_options+0x74>)
 8018d7c:	f006 fda2 	bl	801f8c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018d80:	bf00      	nop
 8018d82:	3720      	adds	r7, #32
 8018d84:	46bd      	mov	sp, r7
 8018d86:	bd80      	pop	{r7, pc}
 8018d88:	08023998 	.word	0x08023998
 8018d8c:	080240c8 	.word	0x080240c8
 8018d90:	080239ec 	.word	0x080239ec
 8018d94:	08023fc0 	.word	0x08023fc0

08018d98 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b08a      	sub	sp, #40	; 0x28
 8018d9c:	af04      	add	r7, sp, #16
 8018d9e:	60f8      	str	r0, [r7, #12]
 8018da0:	60b9      	str	r1, [r7, #8]
 8018da2:	607a      	str	r2, [r7, #4]
 8018da4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018da6:	68bb      	ldr	r3, [r7, #8]
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d106      	bne.n	8018dba <tcp_output_control_segment+0x22>
 8018dac:	4b1c      	ldr	r3, [pc, #112]	; (8018e20 <tcp_output_control_segment+0x88>)
 8018dae:	f240 7287 	movw	r2, #1927	; 0x787
 8018db2:	491c      	ldr	r1, [pc, #112]	; (8018e24 <tcp_output_control_segment+0x8c>)
 8018db4:	481c      	ldr	r0, [pc, #112]	; (8018e28 <tcp_output_control_segment+0x90>)
 8018db6:	f006 fd85 	bl	801f8c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018dba:	683a      	ldr	r2, [r7, #0]
 8018dbc:	6879      	ldr	r1, [r7, #4]
 8018dbe:	68f8      	ldr	r0, [r7, #12]
 8018dc0:	f7fe fae8 	bl	8017394 <tcp_route>
 8018dc4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018dc6:	693b      	ldr	r3, [r7, #16]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d102      	bne.n	8018dd2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018dcc:	23fc      	movs	r3, #252	; 0xfc
 8018dce:	75fb      	strb	r3, [r7, #23]
 8018dd0:	e01c      	b.n	8018e0c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d006      	beq.n	8018de6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	7adb      	ldrb	r3, [r3, #11]
 8018ddc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	7a9b      	ldrb	r3, [r3, #10]
 8018de2:	757b      	strb	r3, [r7, #21]
 8018de4:	e003      	b.n	8018dee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018de6:	23ff      	movs	r3, #255	; 0xff
 8018de8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018dea:	2300      	movs	r3, #0
 8018dec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018dee:	7dba      	ldrb	r2, [r7, #22]
 8018df0:	693b      	ldr	r3, [r7, #16]
 8018df2:	9302      	str	r3, [sp, #8]
 8018df4:	2306      	movs	r3, #6
 8018df6:	9301      	str	r3, [sp, #4]
 8018df8:	7d7b      	ldrb	r3, [r7, #21]
 8018dfa:	9300      	str	r3, [sp, #0]
 8018dfc:	4613      	mov	r3, r2
 8018dfe:	683a      	ldr	r2, [r7, #0]
 8018e00:	6879      	ldr	r1, [r7, #4]
 8018e02:	68b8      	ldr	r0, [r7, #8]
 8018e04:	f004 f97c 	bl	801d100 <ip4_output_if>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018e0c:	68b8      	ldr	r0, [r7, #8]
 8018e0e:	f7f9 fe85 	bl	8012b1c <pbuf_free>
  return err;
 8018e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018e16:	4618      	mov	r0, r3
 8018e18:	3718      	adds	r7, #24
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bd80      	pop	{r7, pc}
 8018e1e:	bf00      	nop
 8018e20:	08023998 	.word	0x08023998
 8018e24:	080240f0 	.word	0x080240f0
 8018e28:	080239ec 	.word	0x080239ec

08018e2c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018e2c:	b590      	push	{r4, r7, lr}
 8018e2e:	b08b      	sub	sp, #44	; 0x2c
 8018e30:	af04      	add	r7, sp, #16
 8018e32:	60f8      	str	r0, [r7, #12]
 8018e34:	60b9      	str	r1, [r7, #8]
 8018e36:	607a      	str	r2, [r7, #4]
 8018e38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018e3a:	683b      	ldr	r3, [r7, #0]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d106      	bne.n	8018e4e <tcp_rst+0x22>
 8018e40:	4b1f      	ldr	r3, [pc, #124]	; (8018ec0 <tcp_rst+0x94>)
 8018e42:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8018e46:	491f      	ldr	r1, [pc, #124]	; (8018ec4 <tcp_rst+0x98>)
 8018e48:	481f      	ldr	r0, [pc, #124]	; (8018ec8 <tcp_rst+0x9c>)
 8018e4a:	f006 fd3b 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d106      	bne.n	8018e62 <tcp_rst+0x36>
 8018e54:	4b1a      	ldr	r3, [pc, #104]	; (8018ec0 <tcp_rst+0x94>)
 8018e56:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8018e5a:	491c      	ldr	r1, [pc, #112]	; (8018ecc <tcp_rst+0xa0>)
 8018e5c:	481a      	ldr	r0, [pc, #104]	; (8018ec8 <tcp_rst+0x9c>)
 8018e5e:	f006 fd31 	bl	801f8c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018e62:	2300      	movs	r3, #0
 8018e64:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018e66:	f246 0308 	movw	r3, #24584	; 0x6008
 8018e6a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018e6c:	7dfb      	ldrb	r3, [r7, #23]
 8018e6e:	b29c      	uxth	r4, r3
 8018e70:	68b8      	ldr	r0, [r7, #8]
 8018e72:	f7f8 fa32 	bl	80112da <lwip_htonl>
 8018e76:	4602      	mov	r2, r0
 8018e78:	8abb      	ldrh	r3, [r7, #20]
 8018e7a:	9303      	str	r3, [sp, #12]
 8018e7c:	2314      	movs	r3, #20
 8018e7e:	9302      	str	r3, [sp, #8]
 8018e80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018e82:	9301      	str	r3, [sp, #4]
 8018e84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018e86:	9300      	str	r3, [sp, #0]
 8018e88:	4613      	mov	r3, r2
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	4621      	mov	r1, r4
 8018e8e:	6878      	ldr	r0, [r7, #4]
 8018e90:	f7ff fe94 	bl	8018bbc <tcp_output_alloc_header_common>
 8018e94:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018e96:	693b      	ldr	r3, [r7, #16]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d00c      	beq.n	8018eb6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018e9c:	7dfb      	ldrb	r3, [r7, #23]
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	6939      	ldr	r1, [r7, #16]
 8018ea2:	68f8      	ldr	r0, [r7, #12]
 8018ea4:	f7ff ff3a 	bl	8018d1c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eaa:	683a      	ldr	r2, [r7, #0]
 8018eac:	6939      	ldr	r1, [r7, #16]
 8018eae:	68f8      	ldr	r0, [r7, #12]
 8018eb0:	f7ff ff72 	bl	8018d98 <tcp_output_control_segment>
 8018eb4:	e000      	b.n	8018eb8 <tcp_rst+0x8c>
    return;
 8018eb6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018eb8:	371c      	adds	r7, #28
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd90      	pop	{r4, r7, pc}
 8018ebe:	bf00      	nop
 8018ec0:	08023998 	.word	0x08023998
 8018ec4:	0802411c 	.word	0x0802411c
 8018ec8:	080239ec 	.word	0x080239ec
 8018ecc:	08024138 	.word	0x08024138

08018ed0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018ed0:	b590      	push	{r4, r7, lr}
 8018ed2:	b087      	sub	sp, #28
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018edc:	2300      	movs	r3, #0
 8018ede:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d106      	bne.n	8018ef4 <tcp_send_empty_ack+0x24>
 8018ee6:	4b28      	ldr	r3, [pc, #160]	; (8018f88 <tcp_send_empty_ack+0xb8>)
 8018ee8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018eec:	4927      	ldr	r1, [pc, #156]	; (8018f8c <tcp_send_empty_ack+0xbc>)
 8018eee:	4828      	ldr	r0, [pc, #160]	; (8018f90 <tcp_send_empty_ack+0xc0>)
 8018ef0:	f006 fce8 	bl	801f8c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018ef4:	7dfb      	ldrb	r3, [r7, #23]
 8018ef6:	009b      	lsls	r3, r3, #2
 8018ef8:	b2db      	uxtb	r3, r3
 8018efa:	f003 0304 	and.w	r3, r3, #4
 8018efe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018f00:	7d7b      	ldrb	r3, [r7, #21]
 8018f02:	b29c      	uxth	r4, r3
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f7f8 f9e6 	bl	80112da <lwip_htonl>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	2200      	movs	r2, #0
 8018f12:	4621      	mov	r1, r4
 8018f14:	6878      	ldr	r0, [r7, #4]
 8018f16:	f7ff fec3 	bl	8018ca0 <tcp_output_alloc_header>
 8018f1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018f1c:	693b      	ldr	r3, [r7, #16]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d109      	bne.n	8018f36 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	8b5b      	ldrh	r3, [r3, #26]
 8018f26:	f043 0303 	orr.w	r3, r3, #3
 8018f2a:	b29a      	uxth	r2, r3
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018f30:	f06f 0301 	mvn.w	r3, #1
 8018f34:	e023      	b.n	8018f7e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018f36:	7dbb      	ldrb	r3, [r7, #22]
 8018f38:	7dfa      	ldrb	r2, [r7, #23]
 8018f3a:	6939      	ldr	r1, [r7, #16]
 8018f3c:	6878      	ldr	r0, [r7, #4]
 8018f3e:	f7ff feed 	bl	8018d1c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018f42:	687a      	ldr	r2, [r7, #4]
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	3304      	adds	r3, #4
 8018f48:	6939      	ldr	r1, [r7, #16]
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f7ff ff24 	bl	8018d98 <tcp_output_control_segment>
 8018f50:	4603      	mov	r3, r0
 8018f52:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d007      	beq.n	8018f6c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	8b5b      	ldrh	r3, [r3, #26]
 8018f60:	f043 0303 	orr.w	r3, r3, #3
 8018f64:	b29a      	uxth	r2, r3
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	835a      	strh	r2, [r3, #26]
 8018f6a:	e006      	b.n	8018f7a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	8b5b      	ldrh	r3, [r3, #26]
 8018f70:	f023 0303 	bic.w	r3, r3, #3
 8018f74:	b29a      	uxth	r2, r3
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018f7e:	4618      	mov	r0, r3
 8018f80:	371c      	adds	r7, #28
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bd90      	pop	{r4, r7, pc}
 8018f86:	bf00      	nop
 8018f88:	08023998 	.word	0x08023998
 8018f8c:	08024154 	.word	0x08024154
 8018f90:	080239ec 	.word	0x080239ec

08018f94 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018f94:	b590      	push	{r4, r7, lr}
 8018f96:	b087      	sub	sp, #28
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d106      	bne.n	8018fb4 <tcp_keepalive+0x20>
 8018fa6:	4b18      	ldr	r3, [pc, #96]	; (8019008 <tcp_keepalive+0x74>)
 8018fa8:	f640 0224 	movw	r2, #2084	; 0x824
 8018fac:	4917      	ldr	r1, [pc, #92]	; (801900c <tcp_keepalive+0x78>)
 8018fae:	4818      	ldr	r0, [pc, #96]	; (8019010 <tcp_keepalive+0x7c>)
 8018fb0:	f006 fc88 	bl	801f8c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018fb4:	7dfb      	ldrb	r3, [r7, #23]
 8018fb6:	b29c      	uxth	r4, r3
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fbc:	3b01      	subs	r3, #1
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7f8 f98b 	bl	80112da <lwip_htonl>
 8018fc4:	4603      	mov	r3, r0
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	4621      	mov	r1, r4
 8018fca:	6878      	ldr	r0, [r7, #4]
 8018fcc:	f7ff fe68 	bl	8018ca0 <tcp_output_alloc_header>
 8018fd0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018fd2:	693b      	ldr	r3, [r7, #16]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d102      	bne.n	8018fde <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018fdc:	e010      	b.n	8019000 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018fde:	7dfb      	ldrb	r3, [r7, #23]
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	6939      	ldr	r1, [r7, #16]
 8018fe4:	6878      	ldr	r0, [r7, #4]
 8018fe6:	f7ff fe99 	bl	8018d1c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018fea:	687a      	ldr	r2, [r7, #4]
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	3304      	adds	r3, #4
 8018ff0:	6939      	ldr	r1, [r7, #16]
 8018ff2:	6878      	ldr	r0, [r7, #4]
 8018ff4:	f7ff fed0 	bl	8018d98 <tcp_output_control_segment>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019000:	4618      	mov	r0, r3
 8019002:	371c      	adds	r7, #28
 8019004:	46bd      	mov	sp, r7
 8019006:	bd90      	pop	{r4, r7, pc}
 8019008:	08023998 	.word	0x08023998
 801900c:	08024174 	.word	0x08024174
 8019010:	080239ec 	.word	0x080239ec

08019014 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019014:	b590      	push	{r4, r7, lr}
 8019016:	b08b      	sub	sp, #44	; 0x2c
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801901c:	2300      	movs	r3, #0
 801901e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d106      	bne.n	8019036 <tcp_zero_window_probe+0x22>
 8019028:	4b4c      	ldr	r3, [pc, #304]	; (801915c <tcp_zero_window_probe+0x148>)
 801902a:	f640 024f 	movw	r2, #2127	; 0x84f
 801902e:	494c      	ldr	r1, [pc, #304]	; (8019160 <tcp_zero_window_probe+0x14c>)
 8019030:	484c      	ldr	r0, [pc, #304]	; (8019164 <tcp_zero_window_probe+0x150>)
 8019032:	f006 fc47 	bl	801f8c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801903a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801903c:	6a3b      	ldr	r3, [r7, #32]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d101      	bne.n	8019046 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019042:	2300      	movs	r3, #0
 8019044:	e086      	b.n	8019154 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801904c:	2bff      	cmp	r3, #255	; 0xff
 801904e:	d007      	beq.n	8019060 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019056:	3301      	adds	r3, #1
 8019058:	b2da      	uxtb	r2, r3
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019060:	6a3b      	ldr	r3, [r7, #32]
 8019062:	68db      	ldr	r3, [r3, #12]
 8019064:	899b      	ldrh	r3, [r3, #12]
 8019066:	b29b      	uxth	r3, r3
 8019068:	4618      	mov	r0, r3
 801906a:	f7f8 f921 	bl	80112b0 <lwip_htons>
 801906e:	4603      	mov	r3, r0
 8019070:	b2db      	uxtb	r3, r3
 8019072:	f003 0301 	and.w	r3, r3, #1
 8019076:	2b00      	cmp	r3, #0
 8019078:	d005      	beq.n	8019086 <tcp_zero_window_probe+0x72>
 801907a:	6a3b      	ldr	r3, [r7, #32]
 801907c:	891b      	ldrh	r3, [r3, #8]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d101      	bne.n	8019086 <tcp_zero_window_probe+0x72>
 8019082:	2301      	movs	r3, #1
 8019084:	e000      	b.n	8019088 <tcp_zero_window_probe+0x74>
 8019086:	2300      	movs	r3, #0
 8019088:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801908a:	7ffb      	ldrb	r3, [r7, #31]
 801908c:	2b00      	cmp	r3, #0
 801908e:	bf0c      	ite	eq
 8019090:	2301      	moveq	r3, #1
 8019092:	2300      	movne	r3, #0
 8019094:	b2db      	uxtb	r3, r3
 8019096:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801909c:	b299      	uxth	r1, r3
 801909e:	6a3b      	ldr	r3, [r7, #32]
 80190a0:	68db      	ldr	r3, [r3, #12]
 80190a2:	685b      	ldr	r3, [r3, #4]
 80190a4:	8bba      	ldrh	r2, [r7, #28]
 80190a6:	6878      	ldr	r0, [r7, #4]
 80190a8:	f7ff fdfa 	bl	8018ca0 <tcp_output_alloc_header>
 80190ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80190ae:	69bb      	ldr	r3, [r7, #24]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d102      	bne.n	80190ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80190b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80190b8:	e04c      	b.n	8019154 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80190ba:	69bb      	ldr	r3, [r7, #24]
 80190bc:	685b      	ldr	r3, [r3, #4]
 80190be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80190c0:	7ffb      	ldrb	r3, [r7, #31]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d011      	beq.n	80190ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80190c6:	697b      	ldr	r3, [r7, #20]
 80190c8:	899b      	ldrh	r3, [r3, #12]
 80190ca:	b29b      	uxth	r3, r3
 80190cc:	b21b      	sxth	r3, r3
 80190ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80190d2:	b21c      	sxth	r4, r3
 80190d4:	2011      	movs	r0, #17
 80190d6:	f7f8 f8eb 	bl	80112b0 <lwip_htons>
 80190da:	4603      	mov	r3, r0
 80190dc:	b21b      	sxth	r3, r3
 80190de:	4323      	orrs	r3, r4
 80190e0:	b21b      	sxth	r3, r3
 80190e2:	b29a      	uxth	r2, r3
 80190e4:	697b      	ldr	r3, [r7, #20]
 80190e6:	819a      	strh	r2, [r3, #12]
 80190e8:	e010      	b.n	801910c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80190ea:	69bb      	ldr	r3, [r7, #24]
 80190ec:	685b      	ldr	r3, [r3, #4]
 80190ee:	3314      	adds	r3, #20
 80190f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80190f2:	6a3b      	ldr	r3, [r7, #32]
 80190f4:	6858      	ldr	r0, [r3, #4]
 80190f6:	6a3b      	ldr	r3, [r7, #32]
 80190f8:	685b      	ldr	r3, [r3, #4]
 80190fa:	891a      	ldrh	r2, [r3, #8]
 80190fc:	6a3b      	ldr	r3, [r7, #32]
 80190fe:	891b      	ldrh	r3, [r3, #8]
 8019100:	1ad3      	subs	r3, r2, r3
 8019102:	b29b      	uxth	r3, r3
 8019104:	2201      	movs	r2, #1
 8019106:	6939      	ldr	r1, [r7, #16]
 8019108:	f7f9 ff0e 	bl	8012f28 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801910c:	6a3b      	ldr	r3, [r7, #32]
 801910e:	68db      	ldr	r3, [r3, #12]
 8019110:	685b      	ldr	r3, [r3, #4]
 8019112:	4618      	mov	r0, r3
 8019114:	f7f8 f8e1 	bl	80112da <lwip_htonl>
 8019118:	4603      	mov	r3, r0
 801911a:	3301      	adds	r3, #1
 801911c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	1ad3      	subs	r3, r2, r3
 8019126:	2b00      	cmp	r3, #0
 8019128:	da02      	bge.n	8019130 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	68fa      	ldr	r2, [r7, #12]
 801912e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019134:	2200      	movs	r2, #0
 8019136:	69b9      	ldr	r1, [r7, #24]
 8019138:	6878      	ldr	r0, [r7, #4]
 801913a:	f7ff fdef 	bl	8018d1c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801913e:	687a      	ldr	r2, [r7, #4]
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	3304      	adds	r3, #4
 8019144:	69b9      	ldr	r1, [r7, #24]
 8019146:	6878      	ldr	r0, [r7, #4]
 8019148:	f7ff fe26 	bl	8018d98 <tcp_output_control_segment>
 801914c:	4603      	mov	r3, r0
 801914e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019150:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019154:	4618      	mov	r0, r3
 8019156:	372c      	adds	r7, #44	; 0x2c
 8019158:	46bd      	mov	sp, r7
 801915a:	bd90      	pop	{r4, r7, pc}
 801915c:	08023998 	.word	0x08023998
 8019160:	08024190 	.word	0x08024190
 8019164:	080239ec 	.word	0x080239ec

08019168 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b082      	sub	sp, #8
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019170:	f7f9 ffc8 	bl	8013104 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019174:	4b0a      	ldr	r3, [pc, #40]	; (80191a0 <tcpip_tcp_timer+0x38>)
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d103      	bne.n	8019184 <tcpip_tcp_timer+0x1c>
 801917c:	4b09      	ldr	r3, [pc, #36]	; (80191a4 <tcpip_tcp_timer+0x3c>)
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	2b00      	cmp	r3, #0
 8019182:	d005      	beq.n	8019190 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019184:	2200      	movs	r2, #0
 8019186:	4908      	ldr	r1, [pc, #32]	; (80191a8 <tcpip_tcp_timer+0x40>)
 8019188:	20fa      	movs	r0, #250	; 0xfa
 801918a:	f000 f8f3 	bl	8019374 <sys_timeout>
 801918e:	e003      	b.n	8019198 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019190:	4b06      	ldr	r3, [pc, #24]	; (80191ac <tcpip_tcp_timer+0x44>)
 8019192:	2200      	movs	r2, #0
 8019194:	601a      	str	r2, [r3, #0]
  }
}
 8019196:	bf00      	nop
 8019198:	bf00      	nop
 801919a:	3708      	adds	r7, #8
 801919c:	46bd      	mov	sp, r7
 801919e:	bd80      	pop	{r7, pc}
 80191a0:	200101d4 	.word	0x200101d4
 80191a4:	200101d8 	.word	0x200101d8
 80191a8:	08019169 	.word	0x08019169
 80191ac:	20010220 	.word	0x20010220

080191b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80191b4:	4b0a      	ldr	r3, [pc, #40]	; (80191e0 <tcp_timer_needed+0x30>)
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d10f      	bne.n	80191dc <tcp_timer_needed+0x2c>
 80191bc:	4b09      	ldr	r3, [pc, #36]	; (80191e4 <tcp_timer_needed+0x34>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d103      	bne.n	80191cc <tcp_timer_needed+0x1c>
 80191c4:	4b08      	ldr	r3, [pc, #32]	; (80191e8 <tcp_timer_needed+0x38>)
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d007      	beq.n	80191dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80191cc:	4b04      	ldr	r3, [pc, #16]	; (80191e0 <tcp_timer_needed+0x30>)
 80191ce:	2201      	movs	r2, #1
 80191d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80191d2:	2200      	movs	r2, #0
 80191d4:	4905      	ldr	r1, [pc, #20]	; (80191ec <tcp_timer_needed+0x3c>)
 80191d6:	20fa      	movs	r0, #250	; 0xfa
 80191d8:	f000 f8cc 	bl	8019374 <sys_timeout>
  }
}
 80191dc:	bf00      	nop
 80191de:	bd80      	pop	{r7, pc}
 80191e0:	20010220 	.word	0x20010220
 80191e4:	200101d4 	.word	0x200101d4
 80191e8:	200101d8 	.word	0x200101d8
 80191ec:	08019169 	.word	0x08019169

080191f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	b086      	sub	sp, #24
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	60f8      	str	r0, [r7, #12]
 80191f8:	60b9      	str	r1, [r7, #8]
 80191fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80191fc:	200a      	movs	r0, #10
 80191fe:	f7f8 fd2f 	bl	8011c60 <memp_malloc>
 8019202:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019204:	693b      	ldr	r3, [r7, #16]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d109      	bne.n	801921e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801920a:	693b      	ldr	r3, [r7, #16]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d151      	bne.n	80192b4 <sys_timeout_abs+0xc4>
 8019210:	4b2a      	ldr	r3, [pc, #168]	; (80192bc <sys_timeout_abs+0xcc>)
 8019212:	22be      	movs	r2, #190	; 0xbe
 8019214:	492a      	ldr	r1, [pc, #168]	; (80192c0 <sys_timeout_abs+0xd0>)
 8019216:	482b      	ldr	r0, [pc, #172]	; (80192c4 <sys_timeout_abs+0xd4>)
 8019218:	f006 fb54 	bl	801f8c4 <iprintf>
    return;
 801921c:	e04a      	b.n	80192b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801921e:	693b      	ldr	r3, [r7, #16]
 8019220:	2200      	movs	r2, #0
 8019222:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019224:	693b      	ldr	r3, [r7, #16]
 8019226:	68ba      	ldr	r2, [r7, #8]
 8019228:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801922a:	693b      	ldr	r3, [r7, #16]
 801922c:	687a      	ldr	r2, [r7, #4]
 801922e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019230:	693b      	ldr	r3, [r7, #16]
 8019232:	68fa      	ldr	r2, [r7, #12]
 8019234:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019236:	4b24      	ldr	r3, [pc, #144]	; (80192c8 <sys_timeout_abs+0xd8>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	2b00      	cmp	r3, #0
 801923c:	d103      	bne.n	8019246 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801923e:	4a22      	ldr	r2, [pc, #136]	; (80192c8 <sys_timeout_abs+0xd8>)
 8019240:	693b      	ldr	r3, [r7, #16]
 8019242:	6013      	str	r3, [r2, #0]
    return;
 8019244:	e037      	b.n	80192b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019246:	693b      	ldr	r3, [r7, #16]
 8019248:	685a      	ldr	r2, [r3, #4]
 801924a:	4b1f      	ldr	r3, [pc, #124]	; (80192c8 <sys_timeout_abs+0xd8>)
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	685b      	ldr	r3, [r3, #4]
 8019250:	1ad3      	subs	r3, r2, r3
 8019252:	0fdb      	lsrs	r3, r3, #31
 8019254:	f003 0301 	and.w	r3, r3, #1
 8019258:	b2db      	uxtb	r3, r3
 801925a:	2b00      	cmp	r3, #0
 801925c:	d007      	beq.n	801926e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801925e:	4b1a      	ldr	r3, [pc, #104]	; (80192c8 <sys_timeout_abs+0xd8>)
 8019260:	681a      	ldr	r2, [r3, #0]
 8019262:	693b      	ldr	r3, [r7, #16]
 8019264:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019266:	4a18      	ldr	r2, [pc, #96]	; (80192c8 <sys_timeout_abs+0xd8>)
 8019268:	693b      	ldr	r3, [r7, #16]
 801926a:	6013      	str	r3, [r2, #0]
 801926c:	e023      	b.n	80192b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801926e:	4b16      	ldr	r3, [pc, #88]	; (80192c8 <sys_timeout_abs+0xd8>)
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	617b      	str	r3, [r7, #20]
 8019274:	e01a      	b.n	80192ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019276:	697b      	ldr	r3, [r7, #20]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d00b      	beq.n	8019296 <sys_timeout_abs+0xa6>
 801927e:	693b      	ldr	r3, [r7, #16]
 8019280:	685a      	ldr	r2, [r3, #4]
 8019282:	697b      	ldr	r3, [r7, #20]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	685b      	ldr	r3, [r3, #4]
 8019288:	1ad3      	subs	r3, r2, r3
 801928a:	0fdb      	lsrs	r3, r3, #31
 801928c:	f003 0301 	and.w	r3, r3, #1
 8019290:	b2db      	uxtb	r3, r3
 8019292:	2b00      	cmp	r3, #0
 8019294:	d007      	beq.n	80192a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019296:	697b      	ldr	r3, [r7, #20]
 8019298:	681a      	ldr	r2, [r3, #0]
 801929a:	693b      	ldr	r3, [r7, #16]
 801929c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801929e:	697b      	ldr	r3, [r7, #20]
 80192a0:	693a      	ldr	r2, [r7, #16]
 80192a2:	601a      	str	r2, [r3, #0]
        break;
 80192a4:	e007      	b.n	80192b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80192a6:	697b      	ldr	r3, [r7, #20]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	617b      	str	r3, [r7, #20]
 80192ac:	697b      	ldr	r3, [r7, #20]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d1e1      	bne.n	8019276 <sys_timeout_abs+0x86>
 80192b2:	e000      	b.n	80192b6 <sys_timeout_abs+0xc6>
    return;
 80192b4:	bf00      	nop
      }
    }
  }
}
 80192b6:	3718      	adds	r7, #24
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}
 80192bc:	080241b4 	.word	0x080241b4
 80192c0:	080241e8 	.word	0x080241e8
 80192c4:	08024228 	.word	0x08024228
 80192c8:	20010218 	.word	0x20010218

080192cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b086      	sub	sp, #24
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80192d8:	697b      	ldr	r3, [r7, #20]
 80192da:	685b      	ldr	r3, [r3, #4]
 80192dc:	4798      	blx	r3

  now = sys_now();
 80192de:	f7ec fca5 	bl	8005c2c <sys_now>
 80192e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80192e4:	697b      	ldr	r3, [r7, #20]
 80192e6:	681a      	ldr	r2, [r3, #0]
 80192e8:	4b0f      	ldr	r3, [pc, #60]	; (8019328 <lwip_cyclic_timer+0x5c>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	4413      	add	r3, r2
 80192ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80192f0:	68fa      	ldr	r2, [r7, #12]
 80192f2:	693b      	ldr	r3, [r7, #16]
 80192f4:	1ad3      	subs	r3, r2, r3
 80192f6:	0fdb      	lsrs	r3, r3, #31
 80192f8:	f003 0301 	and.w	r3, r3, #1
 80192fc:	b2db      	uxtb	r3, r3
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d009      	beq.n	8019316 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	681a      	ldr	r2, [r3, #0]
 8019306:	693b      	ldr	r3, [r7, #16]
 8019308:	4413      	add	r3, r2
 801930a:	687a      	ldr	r2, [r7, #4]
 801930c:	4907      	ldr	r1, [pc, #28]	; (801932c <lwip_cyclic_timer+0x60>)
 801930e:	4618      	mov	r0, r3
 8019310:	f7ff ff6e 	bl	80191f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019314:	e004      	b.n	8019320 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019316:	687a      	ldr	r2, [r7, #4]
 8019318:	4904      	ldr	r1, [pc, #16]	; (801932c <lwip_cyclic_timer+0x60>)
 801931a:	68f8      	ldr	r0, [r7, #12]
 801931c:	f7ff ff68 	bl	80191f0 <sys_timeout_abs>
}
 8019320:	bf00      	nop
 8019322:	3718      	adds	r7, #24
 8019324:	46bd      	mov	sp, r7
 8019326:	bd80      	pop	{r7, pc}
 8019328:	2001021c 	.word	0x2001021c
 801932c:	080192cd 	.word	0x080192cd

08019330 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b082      	sub	sp, #8
 8019334:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019336:	2301      	movs	r3, #1
 8019338:	607b      	str	r3, [r7, #4]
 801933a:	e00e      	b.n	801935a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801933c:	4a0b      	ldr	r2, [pc, #44]	; (801936c <sys_timeouts_init+0x3c>)
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	00db      	lsls	r3, r3, #3
 8019348:	4a08      	ldr	r2, [pc, #32]	; (801936c <sys_timeouts_init+0x3c>)
 801934a:	4413      	add	r3, r2
 801934c:	461a      	mov	r2, r3
 801934e:	4908      	ldr	r1, [pc, #32]	; (8019370 <sys_timeouts_init+0x40>)
 8019350:	f000 f810 	bl	8019374 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	3301      	adds	r3, #1
 8019358:	607b      	str	r3, [r7, #4]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	2b04      	cmp	r3, #4
 801935e:	d9ed      	bls.n	801933c <sys_timeouts_init+0xc>
  }
}
 8019360:	bf00      	nop
 8019362:	bf00      	nop
 8019364:	3708      	adds	r7, #8
 8019366:	46bd      	mov	sp, r7
 8019368:	bd80      	pop	{r7, pc}
 801936a:	bf00      	nop
 801936c:	08025270 	.word	0x08025270
 8019370:	080192cd 	.word	0x080192cd

08019374 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b086      	sub	sp, #24
 8019378:	af00      	add	r7, sp, #0
 801937a:	60f8      	str	r0, [r7, #12]
 801937c:	60b9      	str	r1, [r7, #8]
 801937e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019386:	d306      	bcc.n	8019396 <sys_timeout+0x22>
 8019388:	4b0a      	ldr	r3, [pc, #40]	; (80193b4 <sys_timeout+0x40>)
 801938a:	f240 1229 	movw	r2, #297	; 0x129
 801938e:	490a      	ldr	r1, [pc, #40]	; (80193b8 <sys_timeout+0x44>)
 8019390:	480a      	ldr	r0, [pc, #40]	; (80193bc <sys_timeout+0x48>)
 8019392:	f006 fa97 	bl	801f8c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019396:	f7ec fc49 	bl	8005c2c <sys_now>
 801939a:	4602      	mov	r2, r0
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	4413      	add	r3, r2
 80193a0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80193a2:	687a      	ldr	r2, [r7, #4]
 80193a4:	68b9      	ldr	r1, [r7, #8]
 80193a6:	6978      	ldr	r0, [r7, #20]
 80193a8:	f7ff ff22 	bl	80191f0 <sys_timeout_abs>
#endif
}
 80193ac:	bf00      	nop
 80193ae:	3718      	adds	r7, #24
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}
 80193b4:	080241b4 	.word	0x080241b4
 80193b8:	08024250 	.word	0x08024250
 80193bc:	08024228 	.word	0x08024228

080193c0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b084      	sub	sp, #16
 80193c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80193c6:	f7ec fc31 	bl	8005c2c <sys_now>
 80193ca:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80193cc:	4b17      	ldr	r3, [pc, #92]	; (801942c <sys_check_timeouts+0x6c>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80193d2:	68bb      	ldr	r3, [r7, #8]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d022      	beq.n	801941e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80193d8:	68bb      	ldr	r3, [r7, #8]
 80193da:	685b      	ldr	r3, [r3, #4]
 80193dc:	68fa      	ldr	r2, [r7, #12]
 80193de:	1ad3      	subs	r3, r2, r3
 80193e0:	0fdb      	lsrs	r3, r3, #31
 80193e2:	f003 0301 	and.w	r3, r3, #1
 80193e6:	b2db      	uxtb	r3, r3
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d11a      	bne.n	8019422 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80193ec:	68bb      	ldr	r3, [r7, #8]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	4a0e      	ldr	r2, [pc, #56]	; (801942c <sys_check_timeouts+0x6c>)
 80193f2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80193f4:	68bb      	ldr	r3, [r7, #8]
 80193f6:	689b      	ldr	r3, [r3, #8]
 80193f8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80193fa:	68bb      	ldr	r3, [r7, #8]
 80193fc:	68db      	ldr	r3, [r3, #12]
 80193fe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019400:	68bb      	ldr	r3, [r7, #8]
 8019402:	685b      	ldr	r3, [r3, #4]
 8019404:	4a0a      	ldr	r2, [pc, #40]	; (8019430 <sys_check_timeouts+0x70>)
 8019406:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019408:	68b9      	ldr	r1, [r7, #8]
 801940a:	200a      	movs	r0, #10
 801940c:	f7f8 fc9e 	bl	8011d4c <memp_free>
    if (handler != NULL) {
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d0da      	beq.n	80193cc <sys_check_timeouts+0xc>
      handler(arg);
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	6838      	ldr	r0, [r7, #0]
 801941a:	4798      	blx	r3
  do {
 801941c:	e7d6      	b.n	80193cc <sys_check_timeouts+0xc>
      return;
 801941e:	bf00      	nop
 8019420:	e000      	b.n	8019424 <sys_check_timeouts+0x64>
      return;
 8019422:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019424:	3710      	adds	r7, #16
 8019426:	46bd      	mov	sp, r7
 8019428:	bd80      	pop	{r7, pc}
 801942a:	bf00      	nop
 801942c:	20010218 	.word	0x20010218
 8019430:	2001021c 	.word	0x2001021c

08019434 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b082      	sub	sp, #8
 8019438:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801943a:	4b16      	ldr	r3, [pc, #88]	; (8019494 <sys_timeouts_sleeptime+0x60>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d102      	bne.n	8019448 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019446:	e020      	b.n	801948a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019448:	f7ec fbf0 	bl	8005c2c <sys_now>
 801944c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801944e:	4b11      	ldr	r3, [pc, #68]	; (8019494 <sys_timeouts_sleeptime+0x60>)
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	685a      	ldr	r2, [r3, #4]
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	1ad3      	subs	r3, r2, r3
 8019458:	0fdb      	lsrs	r3, r3, #31
 801945a:	f003 0301 	and.w	r3, r3, #1
 801945e:	b2db      	uxtb	r3, r3
 8019460:	2b00      	cmp	r3, #0
 8019462:	d001      	beq.n	8019468 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019464:	2300      	movs	r3, #0
 8019466:	e010      	b.n	801948a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019468:	4b0a      	ldr	r3, [pc, #40]	; (8019494 <sys_timeouts_sleeptime+0x60>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	685a      	ldr	r2, [r3, #4]
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	1ad3      	subs	r3, r2, r3
 8019472:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019474:	683b      	ldr	r3, [r7, #0]
 8019476:	2b00      	cmp	r3, #0
 8019478:	da06      	bge.n	8019488 <sys_timeouts_sleeptime+0x54>
 801947a:	4b07      	ldr	r3, [pc, #28]	; (8019498 <sys_timeouts_sleeptime+0x64>)
 801947c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019480:	4906      	ldr	r1, [pc, #24]	; (801949c <sys_timeouts_sleeptime+0x68>)
 8019482:	4807      	ldr	r0, [pc, #28]	; (80194a0 <sys_timeouts_sleeptime+0x6c>)
 8019484:	f006 fa1e 	bl	801f8c4 <iprintf>
    return ret;
 8019488:	683b      	ldr	r3, [r7, #0]
  }
}
 801948a:	4618      	mov	r0, r3
 801948c:	3708      	adds	r7, #8
 801948e:	46bd      	mov	sp, r7
 8019490:	bd80      	pop	{r7, pc}
 8019492:	bf00      	nop
 8019494:	20010218 	.word	0x20010218
 8019498:	080241b4 	.word	0x080241b4
 801949c:	08024288 	.word	0x08024288
 80194a0:	08024228 	.word	0x08024228

080194a4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80194a8:	f006 f86e 	bl	801f588 <rand>
 80194ac:	4603      	mov	r3, r0
 80194ae:	b29b      	uxth	r3, r3
 80194b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80194b4:	b29b      	uxth	r3, r3
 80194b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80194ba:	b29a      	uxth	r2, r3
 80194bc:	4b01      	ldr	r3, [pc, #4]	; (80194c4 <udp_init+0x20>)
 80194be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80194c0:	bf00      	nop
 80194c2:	bd80      	pop	{r7, pc}
 80194c4:	2000002c 	.word	0x2000002c

080194c8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80194c8:	b480      	push	{r7}
 80194ca:	b083      	sub	sp, #12
 80194cc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80194ce:	2300      	movs	r3, #0
 80194d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80194d2:	4b17      	ldr	r3, [pc, #92]	; (8019530 <udp_new_port+0x68>)
 80194d4:	881b      	ldrh	r3, [r3, #0]
 80194d6:	1c5a      	adds	r2, r3, #1
 80194d8:	b291      	uxth	r1, r2
 80194da:	4a15      	ldr	r2, [pc, #84]	; (8019530 <udp_new_port+0x68>)
 80194dc:	8011      	strh	r1, [r2, #0]
 80194de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194e2:	4293      	cmp	r3, r2
 80194e4:	d103      	bne.n	80194ee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80194e6:	4b12      	ldr	r3, [pc, #72]	; (8019530 <udp_new_port+0x68>)
 80194e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80194ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80194ee:	4b11      	ldr	r3, [pc, #68]	; (8019534 <udp_new_port+0x6c>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	603b      	str	r3, [r7, #0]
 80194f4:	e011      	b.n	801951a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	8a5a      	ldrh	r2, [r3, #18]
 80194fa:	4b0d      	ldr	r3, [pc, #52]	; (8019530 <udp_new_port+0x68>)
 80194fc:	881b      	ldrh	r3, [r3, #0]
 80194fe:	429a      	cmp	r2, r3
 8019500:	d108      	bne.n	8019514 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019502:	88fb      	ldrh	r3, [r7, #6]
 8019504:	3301      	adds	r3, #1
 8019506:	80fb      	strh	r3, [r7, #6]
 8019508:	88fb      	ldrh	r3, [r7, #6]
 801950a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801950e:	d3e0      	bcc.n	80194d2 <udp_new_port+0xa>
        return 0;
 8019510:	2300      	movs	r3, #0
 8019512:	e007      	b.n	8019524 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019514:	683b      	ldr	r3, [r7, #0]
 8019516:	68db      	ldr	r3, [r3, #12]
 8019518:	603b      	str	r3, [r7, #0]
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d1ea      	bne.n	80194f6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019520:	4b03      	ldr	r3, [pc, #12]	; (8019530 <udp_new_port+0x68>)
 8019522:	881b      	ldrh	r3, [r3, #0]
}
 8019524:	4618      	mov	r0, r3
 8019526:	370c      	adds	r7, #12
 8019528:	46bd      	mov	sp, r7
 801952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952e:	4770      	bx	lr
 8019530:	2000002c 	.word	0x2000002c
 8019534:	20010224 	.word	0x20010224

08019538 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b084      	sub	sp, #16
 801953c:	af00      	add	r7, sp, #0
 801953e:	60f8      	str	r0, [r7, #12]
 8019540:	60b9      	str	r1, [r7, #8]
 8019542:	4613      	mov	r3, r2
 8019544:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d105      	bne.n	8019558 <udp_input_local_match+0x20>
 801954c:	4b27      	ldr	r3, [pc, #156]	; (80195ec <udp_input_local_match+0xb4>)
 801954e:	2287      	movs	r2, #135	; 0x87
 8019550:	4927      	ldr	r1, [pc, #156]	; (80195f0 <udp_input_local_match+0xb8>)
 8019552:	4828      	ldr	r0, [pc, #160]	; (80195f4 <udp_input_local_match+0xbc>)
 8019554:	f006 f9b6 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019558:	68bb      	ldr	r3, [r7, #8]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d105      	bne.n	801956a <udp_input_local_match+0x32>
 801955e:	4b23      	ldr	r3, [pc, #140]	; (80195ec <udp_input_local_match+0xb4>)
 8019560:	2288      	movs	r2, #136	; 0x88
 8019562:	4925      	ldr	r1, [pc, #148]	; (80195f8 <udp_input_local_match+0xc0>)
 8019564:	4823      	ldr	r0, [pc, #140]	; (80195f4 <udp_input_local_match+0xbc>)
 8019566:	f006 f9ad 	bl	801f8c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	7a1b      	ldrb	r3, [r3, #8]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d00b      	beq.n	801958a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	7a1a      	ldrb	r2, [r3, #8]
 8019576:	4b21      	ldr	r3, [pc, #132]	; (80195fc <udp_input_local_match+0xc4>)
 8019578:	685b      	ldr	r3, [r3, #4]
 801957a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801957e:	3301      	adds	r3, #1
 8019580:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019582:	429a      	cmp	r2, r3
 8019584:	d001      	beq.n	801958a <udp_input_local_match+0x52>
    return 0;
 8019586:	2300      	movs	r3, #0
 8019588:	e02b      	b.n	80195e2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801958a:	79fb      	ldrb	r3, [r7, #7]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d018      	beq.n	80195c2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d013      	beq.n	80195be <udp_input_local_match+0x86>
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d00f      	beq.n	80195be <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801959e:	4b17      	ldr	r3, [pc, #92]	; (80195fc <udp_input_local_match+0xc4>)
 80195a0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80195a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80195a6:	d00a      	beq.n	80195be <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	681a      	ldr	r2, [r3, #0]
 80195ac:	4b13      	ldr	r3, [pc, #76]	; (80195fc <udp_input_local_match+0xc4>)
 80195ae:	695b      	ldr	r3, [r3, #20]
 80195b0:	405a      	eors	r2, r3
 80195b2:	68bb      	ldr	r3, [r7, #8]
 80195b4:	3308      	adds	r3, #8
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d110      	bne.n	80195e0 <udp_input_local_match+0xa8>
          return 1;
 80195be:	2301      	movs	r3, #1
 80195c0:	e00f      	b.n	80195e2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d009      	beq.n	80195dc <udp_input_local_match+0xa4>
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d005      	beq.n	80195dc <udp_input_local_match+0xa4>
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	681a      	ldr	r2, [r3, #0]
 80195d4:	4b09      	ldr	r3, [pc, #36]	; (80195fc <udp_input_local_match+0xc4>)
 80195d6:	695b      	ldr	r3, [r3, #20]
 80195d8:	429a      	cmp	r2, r3
 80195da:	d101      	bne.n	80195e0 <udp_input_local_match+0xa8>
        return 1;
 80195dc:	2301      	movs	r3, #1
 80195de:	e000      	b.n	80195e2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80195e0:	2300      	movs	r3, #0
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3710      	adds	r7, #16
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd80      	pop	{r7, pc}
 80195ea:	bf00      	nop
 80195ec:	0802429c 	.word	0x0802429c
 80195f0:	080242cc 	.word	0x080242cc
 80195f4:	080242f0 	.word	0x080242f0
 80195f8:	08024318 	.word	0x08024318
 80195fc:	2000ca54 	.word	0x2000ca54

08019600 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019600:	b590      	push	{r4, r7, lr}
 8019602:	b08d      	sub	sp, #52	; 0x34
 8019604:	af02      	add	r7, sp, #8
 8019606:	6078      	str	r0, [r7, #4]
 8019608:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801960a:	2300      	movs	r3, #0
 801960c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d105      	bne.n	8019620 <udp_input+0x20>
 8019614:	4b7c      	ldr	r3, [pc, #496]	; (8019808 <udp_input+0x208>)
 8019616:	22cf      	movs	r2, #207	; 0xcf
 8019618:	497c      	ldr	r1, [pc, #496]	; (801980c <udp_input+0x20c>)
 801961a:	487d      	ldr	r0, [pc, #500]	; (8019810 <udp_input+0x210>)
 801961c:	f006 f952 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019620:	683b      	ldr	r3, [r7, #0]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d105      	bne.n	8019632 <udp_input+0x32>
 8019626:	4b78      	ldr	r3, [pc, #480]	; (8019808 <udp_input+0x208>)
 8019628:	22d0      	movs	r2, #208	; 0xd0
 801962a:	497a      	ldr	r1, [pc, #488]	; (8019814 <udp_input+0x214>)
 801962c:	4878      	ldr	r0, [pc, #480]	; (8019810 <udp_input+0x210>)
 801962e:	f006 f949 	bl	801f8c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	895b      	ldrh	r3, [r3, #10]
 8019636:	2b07      	cmp	r3, #7
 8019638:	d803      	bhi.n	8019642 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801963a:	6878      	ldr	r0, [r7, #4]
 801963c:	f7f9 fa6e 	bl	8012b1c <pbuf_free>
    goto end;
 8019640:	e0de      	b.n	8019800 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	685b      	ldr	r3, [r3, #4]
 8019646:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019648:	4b73      	ldr	r3, [pc, #460]	; (8019818 <udp_input+0x218>)
 801964a:	695b      	ldr	r3, [r3, #20]
 801964c:	4a72      	ldr	r2, [pc, #456]	; (8019818 <udp_input+0x218>)
 801964e:	6812      	ldr	r2, [r2, #0]
 8019650:	4611      	mov	r1, r2
 8019652:	4618      	mov	r0, r3
 8019654:	f003 fe2c 	bl	801d2b0 <ip4_addr_isbroadcast_u32>
 8019658:	4603      	mov	r3, r0
 801965a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801965c:	697b      	ldr	r3, [r7, #20]
 801965e:	881b      	ldrh	r3, [r3, #0]
 8019660:	b29b      	uxth	r3, r3
 8019662:	4618      	mov	r0, r3
 8019664:	f7f7 fe24 	bl	80112b0 <lwip_htons>
 8019668:	4603      	mov	r3, r0
 801966a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	885b      	ldrh	r3, [r3, #2]
 8019670:	b29b      	uxth	r3, r3
 8019672:	4618      	mov	r0, r3
 8019674:	f7f7 fe1c 	bl	80112b0 <lwip_htons>
 8019678:	4603      	mov	r3, r0
 801967a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801967c:	2300      	movs	r3, #0
 801967e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019680:	2300      	movs	r3, #0
 8019682:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019684:	2300      	movs	r3, #0
 8019686:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019688:	4b64      	ldr	r3, [pc, #400]	; (801981c <udp_input+0x21c>)
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	627b      	str	r3, [r7, #36]	; 0x24
 801968e:	e054      	b.n	801973a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019692:	8a5b      	ldrh	r3, [r3, #18]
 8019694:	89fa      	ldrh	r2, [r7, #14]
 8019696:	429a      	cmp	r2, r3
 8019698:	d14a      	bne.n	8019730 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801969a:	7cfb      	ldrb	r3, [r7, #19]
 801969c:	461a      	mov	r2, r3
 801969e:	6839      	ldr	r1, [r7, #0]
 80196a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80196a2:	f7ff ff49 	bl	8019538 <udp_input_local_match>
 80196a6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d041      	beq.n	8019730 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80196ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ae:	7c1b      	ldrb	r3, [r3, #16]
 80196b0:	f003 0304 	and.w	r3, r3, #4
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d11d      	bne.n	80196f4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80196b8:	69fb      	ldr	r3, [r7, #28]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d102      	bne.n	80196c4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80196be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196c0:	61fb      	str	r3, [r7, #28]
 80196c2:	e017      	b.n	80196f4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80196c4:	7cfb      	ldrb	r3, [r7, #19]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d014      	beq.n	80196f4 <udp_input+0xf4>
 80196ca:	4b53      	ldr	r3, [pc, #332]	; (8019818 <udp_input+0x218>)
 80196cc:	695b      	ldr	r3, [r3, #20]
 80196ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80196d2:	d10f      	bne.n	80196f4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80196d4:	69fb      	ldr	r3, [r7, #28]
 80196d6:	681a      	ldr	r2, [r3, #0]
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	3304      	adds	r3, #4
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	429a      	cmp	r2, r3
 80196e0:	d008      	beq.n	80196f4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80196e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196e4:	681a      	ldr	r2, [r3, #0]
 80196e6:	683b      	ldr	r3, [r7, #0]
 80196e8:	3304      	adds	r3, #4
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	429a      	cmp	r2, r3
 80196ee:	d101      	bne.n	80196f4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80196f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196f2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80196f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196f6:	8a9b      	ldrh	r3, [r3, #20]
 80196f8:	8a3a      	ldrh	r2, [r7, #16]
 80196fa:	429a      	cmp	r2, r3
 80196fc:	d118      	bne.n	8019730 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80196fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019700:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019702:	2b00      	cmp	r3, #0
 8019704:	d005      	beq.n	8019712 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019708:	685a      	ldr	r2, [r3, #4]
 801970a:	4b43      	ldr	r3, [pc, #268]	; (8019818 <udp_input+0x218>)
 801970c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801970e:	429a      	cmp	r2, r3
 8019710:	d10e      	bne.n	8019730 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019712:	6a3b      	ldr	r3, [r7, #32]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d014      	beq.n	8019742 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801971a:	68da      	ldr	r2, [r3, #12]
 801971c:	6a3b      	ldr	r3, [r7, #32]
 801971e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019720:	4b3e      	ldr	r3, [pc, #248]	; (801981c <udp_input+0x21c>)
 8019722:	681a      	ldr	r2, [r3, #0]
 8019724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019726:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019728:	4a3c      	ldr	r2, [pc, #240]	; (801981c <udp_input+0x21c>)
 801972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801972c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801972e:	e008      	b.n	8019742 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019732:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019736:	68db      	ldr	r3, [r3, #12]
 8019738:	627b      	str	r3, [r7, #36]	; 0x24
 801973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801973c:	2b00      	cmp	r3, #0
 801973e:	d1a7      	bne.n	8019690 <udp_input+0x90>
 8019740:	e000      	b.n	8019744 <udp_input+0x144>
        break;
 8019742:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019746:	2b00      	cmp	r3, #0
 8019748:	d101      	bne.n	801974e <udp_input+0x14e>
    pcb = uncon_pcb;
 801974a:	69fb      	ldr	r3, [r7, #28]
 801974c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019750:	2b00      	cmp	r3, #0
 8019752:	d002      	beq.n	801975a <udp_input+0x15a>
    for_us = 1;
 8019754:	2301      	movs	r3, #1
 8019756:	76fb      	strb	r3, [r7, #27]
 8019758:	e00a      	b.n	8019770 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801975a:	683b      	ldr	r3, [r7, #0]
 801975c:	3304      	adds	r3, #4
 801975e:	681a      	ldr	r2, [r3, #0]
 8019760:	4b2d      	ldr	r3, [pc, #180]	; (8019818 <udp_input+0x218>)
 8019762:	695b      	ldr	r3, [r3, #20]
 8019764:	429a      	cmp	r2, r3
 8019766:	bf0c      	ite	eq
 8019768:	2301      	moveq	r3, #1
 801976a:	2300      	movne	r3, #0
 801976c:	b2db      	uxtb	r3, r3
 801976e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019770:	7efb      	ldrb	r3, [r7, #27]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d041      	beq.n	80197fa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019776:	2108      	movs	r1, #8
 8019778:	6878      	ldr	r0, [r7, #4]
 801977a:	f7f9 f949 	bl	8012a10 <pbuf_remove_header>
 801977e:	4603      	mov	r3, r0
 8019780:	2b00      	cmp	r3, #0
 8019782:	d00a      	beq.n	801979a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019784:	4b20      	ldr	r3, [pc, #128]	; (8019808 <udp_input+0x208>)
 8019786:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801978a:	4925      	ldr	r1, [pc, #148]	; (8019820 <udp_input+0x220>)
 801978c:	4820      	ldr	r0, [pc, #128]	; (8019810 <udp_input+0x210>)
 801978e:	f006 f899 	bl	801f8c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019792:	6878      	ldr	r0, [r7, #4]
 8019794:	f7f9 f9c2 	bl	8012b1c <pbuf_free>
      goto end;
 8019798:	e032      	b.n	8019800 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801979c:	2b00      	cmp	r3, #0
 801979e:	d012      	beq.n	80197c6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80197a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197a2:	699b      	ldr	r3, [r3, #24]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d00a      	beq.n	80197be <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80197a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197aa:	699c      	ldr	r4, [r3, #24]
 80197ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ae:	69d8      	ldr	r0, [r3, #28]
 80197b0:	8a3b      	ldrh	r3, [r7, #16]
 80197b2:	9300      	str	r3, [sp, #0]
 80197b4:	4b1b      	ldr	r3, [pc, #108]	; (8019824 <udp_input+0x224>)
 80197b6:	687a      	ldr	r2, [r7, #4]
 80197b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80197ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80197bc:	e021      	b.n	8019802 <udp_input+0x202>
        pbuf_free(p);
 80197be:	6878      	ldr	r0, [r7, #4]
 80197c0:	f7f9 f9ac 	bl	8012b1c <pbuf_free>
        goto end;
 80197c4:	e01c      	b.n	8019800 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80197c6:	7cfb      	ldrb	r3, [r7, #19]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d112      	bne.n	80197f2 <udp_input+0x1f2>
 80197cc:	4b12      	ldr	r3, [pc, #72]	; (8019818 <udp_input+0x218>)
 80197ce:	695b      	ldr	r3, [r3, #20]
 80197d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80197d4:	2be0      	cmp	r3, #224	; 0xe0
 80197d6:	d00c      	beq.n	80197f2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80197d8:	4b0f      	ldr	r3, [pc, #60]	; (8019818 <udp_input+0x218>)
 80197da:	899b      	ldrh	r3, [r3, #12]
 80197dc:	3308      	adds	r3, #8
 80197de:	b29b      	uxth	r3, r3
 80197e0:	b21b      	sxth	r3, r3
 80197e2:	4619      	mov	r1, r3
 80197e4:	6878      	ldr	r0, [r7, #4]
 80197e6:	f7f9 f986 	bl	8012af6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80197ea:	2103      	movs	r1, #3
 80197ec:	6878      	ldr	r0, [r7, #4]
 80197ee:	f003 fa21 	bl	801cc34 <icmp_dest_unreach>
      pbuf_free(p);
 80197f2:	6878      	ldr	r0, [r7, #4]
 80197f4:	f7f9 f992 	bl	8012b1c <pbuf_free>
  return;
 80197f8:	e003      	b.n	8019802 <udp_input+0x202>
    pbuf_free(p);
 80197fa:	6878      	ldr	r0, [r7, #4]
 80197fc:	f7f9 f98e 	bl	8012b1c <pbuf_free>
  return;
 8019800:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019802:	372c      	adds	r7, #44	; 0x2c
 8019804:	46bd      	mov	sp, r7
 8019806:	bd90      	pop	{r4, r7, pc}
 8019808:	0802429c 	.word	0x0802429c
 801980c:	08024340 	.word	0x08024340
 8019810:	080242f0 	.word	0x080242f0
 8019814:	08024358 	.word	0x08024358
 8019818:	2000ca54 	.word	0x2000ca54
 801981c:	20010224 	.word	0x20010224
 8019820:	08024374 	.word	0x08024374
 8019824:	2000ca64 	.word	0x2000ca64

08019828 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b088      	sub	sp, #32
 801982c:	af02      	add	r7, sp, #8
 801982e:	60f8      	str	r0, [r7, #12]
 8019830:	60b9      	str	r1, [r7, #8]
 8019832:	607a      	str	r2, [r7, #4]
 8019834:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d109      	bne.n	8019850 <udp_sendto_if+0x28>
 801983c:	4b2e      	ldr	r3, [pc, #184]	; (80198f8 <udp_sendto_if+0xd0>)
 801983e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019842:	492e      	ldr	r1, [pc, #184]	; (80198fc <udp_sendto_if+0xd4>)
 8019844:	482e      	ldr	r0, [pc, #184]	; (8019900 <udp_sendto_if+0xd8>)
 8019846:	f006 f83d 	bl	801f8c4 <iprintf>
 801984a:	f06f 030f 	mvn.w	r3, #15
 801984e:	e04f      	b.n	80198f0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019850:	68bb      	ldr	r3, [r7, #8]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d109      	bne.n	801986a <udp_sendto_if+0x42>
 8019856:	4b28      	ldr	r3, [pc, #160]	; (80198f8 <udp_sendto_if+0xd0>)
 8019858:	f240 2281 	movw	r2, #641	; 0x281
 801985c:	4929      	ldr	r1, [pc, #164]	; (8019904 <udp_sendto_if+0xdc>)
 801985e:	4828      	ldr	r0, [pc, #160]	; (8019900 <udp_sendto_if+0xd8>)
 8019860:	f006 f830 	bl	801f8c4 <iprintf>
 8019864:	f06f 030f 	mvn.w	r3, #15
 8019868:	e042      	b.n	80198f0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	2b00      	cmp	r3, #0
 801986e:	d109      	bne.n	8019884 <udp_sendto_if+0x5c>
 8019870:	4b21      	ldr	r3, [pc, #132]	; (80198f8 <udp_sendto_if+0xd0>)
 8019872:	f240 2282 	movw	r2, #642	; 0x282
 8019876:	4924      	ldr	r1, [pc, #144]	; (8019908 <udp_sendto_if+0xe0>)
 8019878:	4821      	ldr	r0, [pc, #132]	; (8019900 <udp_sendto_if+0xd8>)
 801987a:	f006 f823 	bl	801f8c4 <iprintf>
 801987e:	f06f 030f 	mvn.w	r3, #15
 8019882:	e035      	b.n	80198f0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019884:	6a3b      	ldr	r3, [r7, #32]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d109      	bne.n	801989e <udp_sendto_if+0x76>
 801988a:	4b1b      	ldr	r3, [pc, #108]	; (80198f8 <udp_sendto_if+0xd0>)
 801988c:	f240 2283 	movw	r2, #643	; 0x283
 8019890:	491e      	ldr	r1, [pc, #120]	; (801990c <udp_sendto_if+0xe4>)
 8019892:	481b      	ldr	r0, [pc, #108]	; (8019900 <udp_sendto_if+0xd8>)
 8019894:	f006 f816 	bl	801f8c4 <iprintf>
 8019898:	f06f 030f 	mvn.w	r3, #15
 801989c:	e028      	b.n	80198f0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d009      	beq.n	80198b8 <udp_sendto_if+0x90>
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d005      	beq.n	80198b8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80198b4:	2be0      	cmp	r3, #224	; 0xe0
 80198b6:	d103      	bne.n	80198c0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80198b8:	6a3b      	ldr	r3, [r7, #32]
 80198ba:	3304      	adds	r3, #4
 80198bc:	617b      	str	r3, [r7, #20]
 80198be:	e00b      	b.n	80198d8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	681a      	ldr	r2, [r3, #0]
 80198c4:	6a3b      	ldr	r3, [r7, #32]
 80198c6:	3304      	adds	r3, #4
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	429a      	cmp	r2, r3
 80198cc:	d002      	beq.n	80198d4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80198ce:	f06f 0303 	mvn.w	r3, #3
 80198d2:	e00d      	b.n	80198f0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80198d8:	887a      	ldrh	r2, [r7, #2]
 80198da:	697b      	ldr	r3, [r7, #20]
 80198dc:	9301      	str	r3, [sp, #4]
 80198de:	6a3b      	ldr	r3, [r7, #32]
 80198e0:	9300      	str	r3, [sp, #0]
 80198e2:	4613      	mov	r3, r2
 80198e4:	687a      	ldr	r2, [r7, #4]
 80198e6:	68b9      	ldr	r1, [r7, #8]
 80198e8:	68f8      	ldr	r0, [r7, #12]
 80198ea:	f000 f811 	bl	8019910 <udp_sendto_if_src>
 80198ee:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80198f0:	4618      	mov	r0, r3
 80198f2:	3718      	adds	r7, #24
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}
 80198f8:	0802429c 	.word	0x0802429c
 80198fc:	08024410 	.word	0x08024410
 8019900:	080242f0 	.word	0x080242f0
 8019904:	0802442c 	.word	0x0802442c
 8019908:	08024448 	.word	0x08024448
 801990c:	08024468 	.word	0x08024468

08019910 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b08c      	sub	sp, #48	; 0x30
 8019914:	af04      	add	r7, sp, #16
 8019916:	60f8      	str	r0, [r7, #12]
 8019918:	60b9      	str	r1, [r7, #8]
 801991a:	607a      	str	r2, [r7, #4]
 801991c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	2b00      	cmp	r3, #0
 8019922:	d109      	bne.n	8019938 <udp_sendto_if_src+0x28>
 8019924:	4b65      	ldr	r3, [pc, #404]	; (8019abc <udp_sendto_if_src+0x1ac>)
 8019926:	f240 22d1 	movw	r2, #721	; 0x2d1
 801992a:	4965      	ldr	r1, [pc, #404]	; (8019ac0 <udp_sendto_if_src+0x1b0>)
 801992c:	4865      	ldr	r0, [pc, #404]	; (8019ac4 <udp_sendto_if_src+0x1b4>)
 801992e:	f005 ffc9 	bl	801f8c4 <iprintf>
 8019932:	f06f 030f 	mvn.w	r3, #15
 8019936:	e0bc      	b.n	8019ab2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019938:	68bb      	ldr	r3, [r7, #8]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d109      	bne.n	8019952 <udp_sendto_if_src+0x42>
 801993e:	4b5f      	ldr	r3, [pc, #380]	; (8019abc <udp_sendto_if_src+0x1ac>)
 8019940:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019944:	4960      	ldr	r1, [pc, #384]	; (8019ac8 <udp_sendto_if_src+0x1b8>)
 8019946:	485f      	ldr	r0, [pc, #380]	; (8019ac4 <udp_sendto_if_src+0x1b4>)
 8019948:	f005 ffbc 	bl	801f8c4 <iprintf>
 801994c:	f06f 030f 	mvn.w	r3, #15
 8019950:	e0af      	b.n	8019ab2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d109      	bne.n	801996c <udp_sendto_if_src+0x5c>
 8019958:	4b58      	ldr	r3, [pc, #352]	; (8019abc <udp_sendto_if_src+0x1ac>)
 801995a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801995e:	495b      	ldr	r1, [pc, #364]	; (8019acc <udp_sendto_if_src+0x1bc>)
 8019960:	4858      	ldr	r0, [pc, #352]	; (8019ac4 <udp_sendto_if_src+0x1b4>)
 8019962:	f005 ffaf 	bl	801f8c4 <iprintf>
 8019966:	f06f 030f 	mvn.w	r3, #15
 801996a:	e0a2      	b.n	8019ab2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801996e:	2b00      	cmp	r3, #0
 8019970:	d109      	bne.n	8019986 <udp_sendto_if_src+0x76>
 8019972:	4b52      	ldr	r3, [pc, #328]	; (8019abc <udp_sendto_if_src+0x1ac>)
 8019974:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019978:	4955      	ldr	r1, [pc, #340]	; (8019ad0 <udp_sendto_if_src+0x1c0>)
 801997a:	4852      	ldr	r0, [pc, #328]	; (8019ac4 <udp_sendto_if_src+0x1b4>)
 801997c:	f005 ffa2 	bl	801f8c4 <iprintf>
 8019980:	f06f 030f 	mvn.w	r3, #15
 8019984:	e095      	b.n	8019ab2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019988:	2b00      	cmp	r3, #0
 801998a:	d109      	bne.n	80199a0 <udp_sendto_if_src+0x90>
 801998c:	4b4b      	ldr	r3, [pc, #300]	; (8019abc <udp_sendto_if_src+0x1ac>)
 801998e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8019992:	4950      	ldr	r1, [pc, #320]	; (8019ad4 <udp_sendto_if_src+0x1c4>)
 8019994:	484b      	ldr	r0, [pc, #300]	; (8019ac4 <udp_sendto_if_src+0x1b4>)
 8019996:	f005 ff95 	bl	801f8c4 <iprintf>
 801999a:	f06f 030f 	mvn.w	r3, #15
 801999e:	e088      	b.n	8019ab2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	8a5b      	ldrh	r3, [r3, #18]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d10f      	bne.n	80199c8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80199a8:	68f9      	ldr	r1, [r7, #12]
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	8a5b      	ldrh	r3, [r3, #18]
 80199ae:	461a      	mov	r2, r3
 80199b0:	68f8      	ldr	r0, [r7, #12]
 80199b2:	f000 f893 	bl	8019adc <udp_bind>
 80199b6:	4603      	mov	r3, r0
 80199b8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80199ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d002      	beq.n	80199c8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80199c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80199c6:	e074      	b.n	8019ab2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80199c8:	68bb      	ldr	r3, [r7, #8]
 80199ca:	891b      	ldrh	r3, [r3, #8]
 80199cc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80199d0:	4293      	cmp	r3, r2
 80199d2:	d902      	bls.n	80199da <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80199d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80199d8:	e06b      	b.n	8019ab2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80199da:	2108      	movs	r1, #8
 80199dc:	68b8      	ldr	r0, [r7, #8]
 80199de:	f7f9 f807 	bl	80129f0 <pbuf_add_header>
 80199e2:	4603      	mov	r3, r0
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d015      	beq.n	8019a14 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80199e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80199ec:	2108      	movs	r1, #8
 80199ee:	2022      	movs	r0, #34	; 0x22
 80199f0:	f7f8 fdb0 	bl	8012554 <pbuf_alloc>
 80199f4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80199f6:	69fb      	ldr	r3, [r7, #28]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d102      	bne.n	8019a02 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80199fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a00:	e057      	b.n	8019ab2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019a02:	68bb      	ldr	r3, [r7, #8]
 8019a04:	891b      	ldrh	r3, [r3, #8]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d006      	beq.n	8019a18 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019a0a:	68b9      	ldr	r1, [r7, #8]
 8019a0c:	69f8      	ldr	r0, [r7, #28]
 8019a0e:	f7f9 f9a9 	bl	8012d64 <pbuf_chain>
 8019a12:	e001      	b.n	8019a18 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019a14:	68bb      	ldr	r3, [r7, #8]
 8019a16:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019a18:	69fb      	ldr	r3, [r7, #28]
 8019a1a:	895b      	ldrh	r3, [r3, #10]
 8019a1c:	2b07      	cmp	r3, #7
 8019a1e:	d806      	bhi.n	8019a2e <udp_sendto_if_src+0x11e>
 8019a20:	4b26      	ldr	r3, [pc, #152]	; (8019abc <udp_sendto_if_src+0x1ac>)
 8019a22:	f240 320d 	movw	r2, #781	; 0x30d
 8019a26:	492c      	ldr	r1, [pc, #176]	; (8019ad8 <udp_sendto_if_src+0x1c8>)
 8019a28:	4826      	ldr	r0, [pc, #152]	; (8019ac4 <udp_sendto_if_src+0x1b4>)
 8019a2a:	f005 ff4b 	bl	801f8c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019a2e:	69fb      	ldr	r3, [r7, #28]
 8019a30:	685b      	ldr	r3, [r3, #4]
 8019a32:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	8a5b      	ldrh	r3, [r3, #18]
 8019a38:	4618      	mov	r0, r3
 8019a3a:	f7f7 fc39 	bl	80112b0 <lwip_htons>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	461a      	mov	r2, r3
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019a46:	887b      	ldrh	r3, [r7, #2]
 8019a48:	4618      	mov	r0, r3
 8019a4a:	f7f7 fc31 	bl	80112b0 <lwip_htons>
 8019a4e:	4603      	mov	r3, r0
 8019a50:	461a      	mov	r2, r3
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019a56:	697b      	ldr	r3, [r7, #20]
 8019a58:	2200      	movs	r2, #0
 8019a5a:	719a      	strb	r2, [r3, #6]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019a60:	69fb      	ldr	r3, [r7, #28]
 8019a62:	891b      	ldrh	r3, [r3, #8]
 8019a64:	4618      	mov	r0, r3
 8019a66:	f7f7 fc23 	bl	80112b0 <lwip_htons>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	461a      	mov	r2, r3
 8019a6e:	697b      	ldr	r3, [r7, #20]
 8019a70:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019a72:	2311      	movs	r3, #17
 8019a74:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	7adb      	ldrb	r3, [r3, #11]
 8019a7a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	7a9b      	ldrb	r3, [r3, #10]
 8019a80:	7cb9      	ldrb	r1, [r7, #18]
 8019a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a84:	9202      	str	r2, [sp, #8]
 8019a86:	7cfa      	ldrb	r2, [r7, #19]
 8019a88:	9201      	str	r2, [sp, #4]
 8019a8a:	9300      	str	r3, [sp, #0]
 8019a8c:	460b      	mov	r3, r1
 8019a8e:	687a      	ldr	r2, [r7, #4]
 8019a90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019a92:	69f8      	ldr	r0, [r7, #28]
 8019a94:	f003 fb5e 	bl	801d154 <ip4_output_if_src>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019a9c:	69fa      	ldr	r2, [r7, #28]
 8019a9e:	68bb      	ldr	r3, [r7, #8]
 8019aa0:	429a      	cmp	r2, r3
 8019aa2:	d004      	beq.n	8019aae <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019aa4:	69f8      	ldr	r0, [r7, #28]
 8019aa6:	f7f9 f839 	bl	8012b1c <pbuf_free>
    q = NULL;
 8019aaa:	2300      	movs	r3, #0
 8019aac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019aae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	3720      	adds	r7, #32
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bd80      	pop	{r7, pc}
 8019aba:	bf00      	nop
 8019abc:	0802429c 	.word	0x0802429c
 8019ac0:	08024488 	.word	0x08024488
 8019ac4:	080242f0 	.word	0x080242f0
 8019ac8:	080244a8 	.word	0x080244a8
 8019acc:	080244c8 	.word	0x080244c8
 8019ad0:	080244ec 	.word	0x080244ec
 8019ad4:	08024510 	.word	0x08024510
 8019ad8:	08024534 	.word	0x08024534

08019adc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	b086      	sub	sp, #24
 8019ae0:	af00      	add	r7, sp, #0
 8019ae2:	60f8      	str	r0, [r7, #12]
 8019ae4:	60b9      	str	r1, [r7, #8]
 8019ae6:	4613      	mov	r3, r2
 8019ae8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019aea:	68bb      	ldr	r3, [r7, #8]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d101      	bne.n	8019af4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019af0:	4b39      	ldr	r3, [pc, #228]	; (8019bd8 <udp_bind+0xfc>)
 8019af2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	d109      	bne.n	8019b0e <udp_bind+0x32>
 8019afa:	4b38      	ldr	r3, [pc, #224]	; (8019bdc <udp_bind+0x100>)
 8019afc:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019b00:	4937      	ldr	r1, [pc, #220]	; (8019be0 <udp_bind+0x104>)
 8019b02:	4838      	ldr	r0, [pc, #224]	; (8019be4 <udp_bind+0x108>)
 8019b04:	f005 fede 	bl	801f8c4 <iprintf>
 8019b08:	f06f 030f 	mvn.w	r3, #15
 8019b0c:	e060      	b.n	8019bd0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019b0e:	2300      	movs	r3, #0
 8019b10:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b12:	4b35      	ldr	r3, [pc, #212]	; (8019be8 <udp_bind+0x10c>)
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	617b      	str	r3, [r7, #20]
 8019b18:	e009      	b.n	8019b2e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019b1a:	68fa      	ldr	r2, [r7, #12]
 8019b1c:	697b      	ldr	r3, [r7, #20]
 8019b1e:	429a      	cmp	r2, r3
 8019b20:	d102      	bne.n	8019b28 <udp_bind+0x4c>
      rebind = 1;
 8019b22:	2301      	movs	r3, #1
 8019b24:	74fb      	strb	r3, [r7, #19]
      break;
 8019b26:	e005      	b.n	8019b34 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	68db      	ldr	r3, [r3, #12]
 8019b2c:	617b      	str	r3, [r7, #20]
 8019b2e:	697b      	ldr	r3, [r7, #20]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d1f2      	bne.n	8019b1a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019b34:	88fb      	ldrh	r3, [r7, #6]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d109      	bne.n	8019b4e <udp_bind+0x72>
    port = udp_new_port();
 8019b3a:	f7ff fcc5 	bl	80194c8 <udp_new_port>
 8019b3e:	4603      	mov	r3, r0
 8019b40:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019b42:	88fb      	ldrh	r3, [r7, #6]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d12c      	bne.n	8019ba2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019b48:	f06f 0307 	mvn.w	r3, #7
 8019b4c:	e040      	b.n	8019bd0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b4e:	4b26      	ldr	r3, [pc, #152]	; (8019be8 <udp_bind+0x10c>)
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	617b      	str	r3, [r7, #20]
 8019b54:	e022      	b.n	8019b9c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019b56:	68fa      	ldr	r2, [r7, #12]
 8019b58:	697b      	ldr	r3, [r7, #20]
 8019b5a:	429a      	cmp	r2, r3
 8019b5c:	d01b      	beq.n	8019b96 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019b5e:	697b      	ldr	r3, [r7, #20]
 8019b60:	8a5b      	ldrh	r3, [r3, #18]
 8019b62:	88fa      	ldrh	r2, [r7, #6]
 8019b64:	429a      	cmp	r2, r3
 8019b66:	d116      	bne.n	8019b96 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019b68:	697b      	ldr	r3, [r7, #20]
 8019b6a:	681a      	ldr	r2, [r3, #0]
 8019b6c:	68bb      	ldr	r3, [r7, #8]
 8019b6e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019b70:	429a      	cmp	r2, r3
 8019b72:	d00d      	beq.n	8019b90 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019b74:	68bb      	ldr	r3, [r7, #8]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d00a      	beq.n	8019b90 <udp_bind+0xb4>
 8019b7a:	68bb      	ldr	r3, [r7, #8]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d006      	beq.n	8019b90 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019b82:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d003      	beq.n	8019b90 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019b88:	697b      	ldr	r3, [r7, #20]
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d102      	bne.n	8019b96 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019b90:	f06f 0307 	mvn.w	r3, #7
 8019b94:	e01c      	b.n	8019bd0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	68db      	ldr	r3, [r3, #12]
 8019b9a:	617b      	str	r3, [r7, #20]
 8019b9c:	697b      	ldr	r3, [r7, #20]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d1d9      	bne.n	8019b56 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d002      	beq.n	8019bae <udp_bind+0xd2>
 8019ba8:	68bb      	ldr	r3, [r7, #8]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	e000      	b.n	8019bb0 <udp_bind+0xd4>
 8019bae:	2300      	movs	r3, #0
 8019bb0:	68fa      	ldr	r2, [r7, #12]
 8019bb2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	88fa      	ldrh	r2, [r7, #6]
 8019bb8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019bba:	7cfb      	ldrb	r3, [r7, #19]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d106      	bne.n	8019bce <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019bc0:	4b09      	ldr	r3, [pc, #36]	; (8019be8 <udp_bind+0x10c>)
 8019bc2:	681a      	ldr	r2, [r3, #0]
 8019bc4:	68fb      	ldr	r3, [r7, #12]
 8019bc6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019bc8:	4a07      	ldr	r2, [pc, #28]	; (8019be8 <udp_bind+0x10c>)
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019bce:	2300      	movs	r3, #0
}
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	3718      	adds	r7, #24
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	bd80      	pop	{r7, pc}
 8019bd8:	08025298 	.word	0x08025298
 8019bdc:	0802429c 	.word	0x0802429c
 8019be0:	08024564 	.word	0x08024564
 8019be4:	080242f0 	.word	0x080242f0
 8019be8:	20010224 	.word	0x20010224

08019bec <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8019bec:	b480      	push	{r7}
 8019bee:	b083      	sub	sp, #12
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	6078      	str	r0, [r7, #4]
 8019bf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d007      	beq.n	8019c0c <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8019bfc:	683b      	ldr	r3, [r7, #0]
 8019bfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019c02:	3301      	adds	r3, #1
 8019c04:	b2da      	uxtb	r2, r3
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8019c0a:	e002      	b.n	8019c12 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	2200      	movs	r2, #0
 8019c10:	721a      	strb	r2, [r3, #8]
}
 8019c12:	bf00      	nop
 8019c14:	370c      	adds	r7, #12
 8019c16:	46bd      	mov	sp, r7
 8019c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1c:	4770      	bx	lr
	...

08019c20 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019c20:	b580      	push	{r7, lr}
 8019c22:	b086      	sub	sp, #24
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	60f8      	str	r0, [r7, #12]
 8019c28:	60b9      	str	r1, [r7, #8]
 8019c2a:	4613      	mov	r3, r2
 8019c2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d109      	bne.n	8019c48 <udp_connect+0x28>
 8019c34:	4b2c      	ldr	r3, [pc, #176]	; (8019ce8 <udp_connect+0xc8>)
 8019c36:	f240 4235 	movw	r2, #1077	; 0x435
 8019c3a:	492c      	ldr	r1, [pc, #176]	; (8019cec <udp_connect+0xcc>)
 8019c3c:	482c      	ldr	r0, [pc, #176]	; (8019cf0 <udp_connect+0xd0>)
 8019c3e:	f005 fe41 	bl	801f8c4 <iprintf>
 8019c42:	f06f 030f 	mvn.w	r3, #15
 8019c46:	e04b      	b.n	8019ce0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019c48:	68bb      	ldr	r3, [r7, #8]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d109      	bne.n	8019c62 <udp_connect+0x42>
 8019c4e:	4b26      	ldr	r3, [pc, #152]	; (8019ce8 <udp_connect+0xc8>)
 8019c50:	f240 4236 	movw	r2, #1078	; 0x436
 8019c54:	4927      	ldr	r1, [pc, #156]	; (8019cf4 <udp_connect+0xd4>)
 8019c56:	4826      	ldr	r0, [pc, #152]	; (8019cf0 <udp_connect+0xd0>)
 8019c58:	f005 fe34 	bl	801f8c4 <iprintf>
 8019c5c:	f06f 030f 	mvn.w	r3, #15
 8019c60:	e03e      	b.n	8019ce0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	8a5b      	ldrh	r3, [r3, #18]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d10f      	bne.n	8019c8a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019c6a:	68f9      	ldr	r1, [r7, #12]
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	8a5b      	ldrh	r3, [r3, #18]
 8019c70:	461a      	mov	r2, r3
 8019c72:	68f8      	ldr	r0, [r7, #12]
 8019c74:	f7ff ff32 	bl	8019adc <udp_bind>
 8019c78:	4603      	mov	r3, r0
 8019c7a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8019c7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d002      	beq.n	8019c8a <udp_connect+0x6a>
      return err;
 8019c84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019c88:	e02a      	b.n	8019ce0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d002      	beq.n	8019c96 <udp_connect+0x76>
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	e000      	b.n	8019c98 <udp_connect+0x78>
 8019c96:	2300      	movs	r3, #0
 8019c98:	68fa      	ldr	r2, [r7, #12]
 8019c9a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	88fa      	ldrh	r2, [r7, #6]
 8019ca0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	7c1b      	ldrb	r3, [r3, #16]
 8019ca6:	f043 0304 	orr.w	r3, r3, #4
 8019caa:	b2da      	uxtb	r2, r3
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019cb0:	4b11      	ldr	r3, [pc, #68]	; (8019cf8 <udp_connect+0xd8>)
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	617b      	str	r3, [r7, #20]
 8019cb6:	e008      	b.n	8019cca <udp_connect+0xaa>
    if (pcb == ipcb) {
 8019cb8:	68fa      	ldr	r2, [r7, #12]
 8019cba:	697b      	ldr	r3, [r7, #20]
 8019cbc:	429a      	cmp	r2, r3
 8019cbe:	d101      	bne.n	8019cc4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	e00d      	b.n	8019ce0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019cc4:	697b      	ldr	r3, [r7, #20]
 8019cc6:	68db      	ldr	r3, [r3, #12]
 8019cc8:	617b      	str	r3, [r7, #20]
 8019cca:	697b      	ldr	r3, [r7, #20]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d1f3      	bne.n	8019cb8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8019cd0:	4b09      	ldr	r3, [pc, #36]	; (8019cf8 <udp_connect+0xd8>)
 8019cd2:	681a      	ldr	r2, [r3, #0]
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8019cd8:	4a07      	ldr	r2, [pc, #28]	; (8019cf8 <udp_connect+0xd8>)
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8019cde:	2300      	movs	r3, #0
}
 8019ce0:	4618      	mov	r0, r3
 8019ce2:	3718      	adds	r7, #24
 8019ce4:	46bd      	mov	sp, r7
 8019ce6:	bd80      	pop	{r7, pc}
 8019ce8:	0802429c 	.word	0x0802429c
 8019cec:	0802457c 	.word	0x0802457c
 8019cf0:	080242f0 	.word	0x080242f0
 8019cf4:	08024598 	.word	0x08024598
 8019cf8:	20010224 	.word	0x20010224

08019cfc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b084      	sub	sp, #16
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	60f8      	str	r0, [r7, #12]
 8019d04:	60b9      	str	r1, [r7, #8]
 8019d06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d107      	bne.n	8019d1e <udp_recv+0x22>
 8019d0e:	4b08      	ldr	r3, [pc, #32]	; (8019d30 <udp_recv+0x34>)
 8019d10:	f240 428a 	movw	r2, #1162	; 0x48a
 8019d14:	4907      	ldr	r1, [pc, #28]	; (8019d34 <udp_recv+0x38>)
 8019d16:	4808      	ldr	r0, [pc, #32]	; (8019d38 <udp_recv+0x3c>)
 8019d18:	f005 fdd4 	bl	801f8c4 <iprintf>
 8019d1c:	e005      	b.n	8019d2a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	68ba      	ldr	r2, [r7, #8]
 8019d22:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	687a      	ldr	r2, [r7, #4]
 8019d28:	61da      	str	r2, [r3, #28]
}
 8019d2a:	3710      	adds	r7, #16
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}
 8019d30:	0802429c 	.word	0x0802429c
 8019d34:	080245d0 	.word	0x080245d0
 8019d38:	080242f0 	.word	0x080242f0

08019d3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	b084      	sub	sp, #16
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d107      	bne.n	8019d5a <udp_remove+0x1e>
 8019d4a:	4b19      	ldr	r3, [pc, #100]	; (8019db0 <udp_remove+0x74>)
 8019d4c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019d50:	4918      	ldr	r1, [pc, #96]	; (8019db4 <udp_remove+0x78>)
 8019d52:	4819      	ldr	r0, [pc, #100]	; (8019db8 <udp_remove+0x7c>)
 8019d54:	f005 fdb6 	bl	801f8c4 <iprintf>
 8019d58:	e026      	b.n	8019da8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019d5a:	4b18      	ldr	r3, [pc, #96]	; (8019dbc <udp_remove+0x80>)
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	687a      	ldr	r2, [r7, #4]
 8019d60:	429a      	cmp	r2, r3
 8019d62:	d105      	bne.n	8019d70 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019d64:	4b15      	ldr	r3, [pc, #84]	; (8019dbc <udp_remove+0x80>)
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	68db      	ldr	r3, [r3, #12]
 8019d6a:	4a14      	ldr	r2, [pc, #80]	; (8019dbc <udp_remove+0x80>)
 8019d6c:	6013      	str	r3, [r2, #0]
 8019d6e:	e017      	b.n	8019da0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019d70:	4b12      	ldr	r3, [pc, #72]	; (8019dbc <udp_remove+0x80>)
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	60fb      	str	r3, [r7, #12]
 8019d76:	e010      	b.n	8019d9a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	68db      	ldr	r3, [r3, #12]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d009      	beq.n	8019d94 <udp_remove+0x58>
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	68db      	ldr	r3, [r3, #12]
 8019d84:	687a      	ldr	r2, [r7, #4]
 8019d86:	429a      	cmp	r2, r3
 8019d88:	d104      	bne.n	8019d94 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	68da      	ldr	r2, [r3, #12]
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	60da      	str	r2, [r3, #12]
        break;
 8019d92:	e005      	b.n	8019da0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	68db      	ldr	r3, [r3, #12]
 8019d98:	60fb      	str	r3, [r7, #12]
 8019d9a:	68fb      	ldr	r3, [r7, #12]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d1eb      	bne.n	8019d78 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019da0:	6879      	ldr	r1, [r7, #4]
 8019da2:	2000      	movs	r0, #0
 8019da4:	f7f7 ffd2 	bl	8011d4c <memp_free>
}
 8019da8:	3710      	adds	r7, #16
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}
 8019dae:	bf00      	nop
 8019db0:	0802429c 	.word	0x0802429c
 8019db4:	080245e8 	.word	0x080245e8
 8019db8:	080242f0 	.word	0x080242f0
 8019dbc:	20010224 	.word	0x20010224

08019dc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b082      	sub	sp, #8
 8019dc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019dc6:	2000      	movs	r0, #0
 8019dc8:	f7f7 ff4a 	bl	8011c60 <memp_malloc>
 8019dcc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d007      	beq.n	8019de4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019dd4:	2220      	movs	r2, #32
 8019dd6:	2100      	movs	r1, #0
 8019dd8:	6878      	ldr	r0, [r7, #4]
 8019dda:	f005 fec9 	bl	801fb70 <memset>
    pcb->ttl = UDP_TTL;
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	22ff      	movs	r2, #255	; 0xff
 8019de2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019de4:	687b      	ldr	r3, [r7, #4]
}
 8019de6:	4618      	mov	r0, r3
 8019de8:	3708      	adds	r7, #8
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd80      	pop	{r7, pc}

08019dee <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8019dee:	b580      	push	{r7, lr}
 8019df0:	b084      	sub	sp, #16
 8019df2:	af00      	add	r7, sp, #0
 8019df4:	4603      	mov	r3, r0
 8019df6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019df8:	f7ff ffe2 	bl	8019dc0 <udp_new>
 8019dfc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019dfe:	68fb      	ldr	r3, [r7, #12]
}
 8019e00:	4618      	mov	r0, r3
 8019e02:	3710      	adds	r7, #16
 8019e04:	46bd      	mov	sp, r7
 8019e06:	bd80      	pop	{r7, pc}

08019e08 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019e08:	b480      	push	{r7}
 8019e0a:	b085      	sub	sp, #20
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
 8019e10:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d01e      	beq.n	8019e56 <udp_netif_ip_addr_changed+0x4e>
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d01a      	beq.n	8019e56 <udp_netif_ip_addr_changed+0x4e>
 8019e20:	683b      	ldr	r3, [r7, #0]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d017      	beq.n	8019e56 <udp_netif_ip_addr_changed+0x4e>
 8019e26:	683b      	ldr	r3, [r7, #0]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d013      	beq.n	8019e56 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019e2e:	4b0d      	ldr	r3, [pc, #52]	; (8019e64 <udp_netif_ip_addr_changed+0x5c>)
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	60fb      	str	r3, [r7, #12]
 8019e34:	e00c      	b.n	8019e50 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	681a      	ldr	r2, [r3, #0]
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	429a      	cmp	r2, r3
 8019e40:	d103      	bne.n	8019e4a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019e42:	683b      	ldr	r3, [r7, #0]
 8019e44:	681a      	ldr	r2, [r3, #0]
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	68db      	ldr	r3, [r3, #12]
 8019e4e:	60fb      	str	r3, [r7, #12]
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d1ef      	bne.n	8019e36 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019e56:	bf00      	nop
 8019e58:	3714      	adds	r7, #20
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e60:	4770      	bx	lr
 8019e62:	bf00      	nop
 8019e64:	20010224 	.word	0x20010224

08019e68 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8019e6c:	4b20      	ldr	r3, [pc, #128]	; (8019ef0 <dhcp_inc_pcb_refcount+0x88>)
 8019e6e:	781b      	ldrb	r3, [r3, #0]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d133      	bne.n	8019edc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8019e74:	4b1f      	ldr	r3, [pc, #124]	; (8019ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d005      	beq.n	8019e88 <dhcp_inc_pcb_refcount+0x20>
 8019e7c:	4b1e      	ldr	r3, [pc, #120]	; (8019ef8 <dhcp_inc_pcb_refcount+0x90>)
 8019e7e:	22e5      	movs	r2, #229	; 0xe5
 8019e80:	491e      	ldr	r1, [pc, #120]	; (8019efc <dhcp_inc_pcb_refcount+0x94>)
 8019e82:	481f      	ldr	r0, [pc, #124]	; (8019f00 <dhcp_inc_pcb_refcount+0x98>)
 8019e84:	f005 fd1e 	bl	801f8c4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8019e88:	f7ff ff9a 	bl	8019dc0 <udp_new>
 8019e8c:	4603      	mov	r3, r0
 8019e8e:	4a19      	ldr	r2, [pc, #100]	; (8019ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8019e90:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8019e92:	4b18      	ldr	r3, [pc, #96]	; (8019ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d102      	bne.n	8019ea0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8019e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e9e:	e024      	b.n	8019eea <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8019ea0:	4b14      	ldr	r3, [pc, #80]	; (8019ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	7a5a      	ldrb	r2, [r3, #9]
 8019ea6:	4b13      	ldr	r3, [pc, #76]	; (8019ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	f042 0220 	orr.w	r2, r2, #32
 8019eae:	b2d2      	uxtb	r2, r2
 8019eb0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8019eb2:	4b10      	ldr	r3, [pc, #64]	; (8019ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	2244      	movs	r2, #68	; 0x44
 8019eb8:	4912      	ldr	r1, [pc, #72]	; (8019f04 <dhcp_inc_pcb_refcount+0x9c>)
 8019eba:	4618      	mov	r0, r3
 8019ebc:	f7ff fe0e 	bl	8019adc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8019ec0:	4b0c      	ldr	r3, [pc, #48]	; (8019ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	2243      	movs	r2, #67	; 0x43
 8019ec6:	490f      	ldr	r1, [pc, #60]	; (8019f04 <dhcp_inc_pcb_refcount+0x9c>)
 8019ec8:	4618      	mov	r0, r3
 8019eca:	f7ff fea9 	bl	8019c20 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8019ece:	4b09      	ldr	r3, [pc, #36]	; (8019ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	2200      	movs	r2, #0
 8019ed4:	490c      	ldr	r1, [pc, #48]	; (8019f08 <dhcp_inc_pcb_refcount+0xa0>)
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	f7ff ff10 	bl	8019cfc <udp_recv>
  }

  dhcp_pcb_refcount++;
 8019edc:	4b04      	ldr	r3, [pc, #16]	; (8019ef0 <dhcp_inc_pcb_refcount+0x88>)
 8019ede:	781b      	ldrb	r3, [r3, #0]
 8019ee0:	3301      	adds	r3, #1
 8019ee2:	b2da      	uxtb	r2, r3
 8019ee4:	4b02      	ldr	r3, [pc, #8]	; (8019ef0 <dhcp_inc_pcb_refcount+0x88>)
 8019ee6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8019ee8:	2300      	movs	r3, #0
}
 8019eea:	4618      	mov	r0, r3
 8019eec:	bd80      	pop	{r7, pc}
 8019eee:	bf00      	nop
 8019ef0:	20010254 	.word	0x20010254
 8019ef4:	20010250 	.word	0x20010250
 8019ef8:	08024600 	.word	0x08024600
 8019efc:	08024638 	.word	0x08024638
 8019f00:	08024660 	.word	0x08024660
 8019f04:	08025298 	.word	0x08025298
 8019f08:	0801b79d 	.word	0x0801b79d

08019f0c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8019f0c:	b580      	push	{r7, lr}
 8019f0e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8019f10:	4b0e      	ldr	r3, [pc, #56]	; (8019f4c <dhcp_dec_pcb_refcount+0x40>)
 8019f12:	781b      	ldrb	r3, [r3, #0]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d105      	bne.n	8019f24 <dhcp_dec_pcb_refcount+0x18>
 8019f18:	4b0d      	ldr	r3, [pc, #52]	; (8019f50 <dhcp_dec_pcb_refcount+0x44>)
 8019f1a:	22ff      	movs	r2, #255	; 0xff
 8019f1c:	490d      	ldr	r1, [pc, #52]	; (8019f54 <dhcp_dec_pcb_refcount+0x48>)
 8019f1e:	480e      	ldr	r0, [pc, #56]	; (8019f58 <dhcp_dec_pcb_refcount+0x4c>)
 8019f20:	f005 fcd0 	bl	801f8c4 <iprintf>
  dhcp_pcb_refcount--;
 8019f24:	4b09      	ldr	r3, [pc, #36]	; (8019f4c <dhcp_dec_pcb_refcount+0x40>)
 8019f26:	781b      	ldrb	r3, [r3, #0]
 8019f28:	3b01      	subs	r3, #1
 8019f2a:	b2da      	uxtb	r2, r3
 8019f2c:	4b07      	ldr	r3, [pc, #28]	; (8019f4c <dhcp_dec_pcb_refcount+0x40>)
 8019f2e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8019f30:	4b06      	ldr	r3, [pc, #24]	; (8019f4c <dhcp_dec_pcb_refcount+0x40>)
 8019f32:	781b      	ldrb	r3, [r3, #0]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d107      	bne.n	8019f48 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8019f38:	4b08      	ldr	r3, [pc, #32]	; (8019f5c <dhcp_dec_pcb_refcount+0x50>)
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	f7ff fefd 	bl	8019d3c <udp_remove>
    dhcp_pcb = NULL;
 8019f42:	4b06      	ldr	r3, [pc, #24]	; (8019f5c <dhcp_dec_pcb_refcount+0x50>)
 8019f44:	2200      	movs	r2, #0
 8019f46:	601a      	str	r2, [r3, #0]
  }
}
 8019f48:	bf00      	nop
 8019f4a:	bd80      	pop	{r7, pc}
 8019f4c:	20010254 	.word	0x20010254
 8019f50:	08024600 	.word	0x08024600
 8019f54:	08024688 	.word	0x08024688
 8019f58:	08024660 	.word	0x08024660
 8019f5c:	20010250 	.word	0x20010250

08019f60 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b084      	sub	sp, #16
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f6c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019f6e:	210c      	movs	r1, #12
 8019f70:	68f8      	ldr	r0, [r7, #12]
 8019f72:	f001 f855 	bl	801b020 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019f76:	4b06      	ldr	r3, [pc, #24]	; (8019f90 <dhcp_handle_nak+0x30>)
 8019f78:	4a05      	ldr	r2, [pc, #20]	; (8019f90 <dhcp_handle_nak+0x30>)
 8019f7a:	4905      	ldr	r1, [pc, #20]	; (8019f90 <dhcp_handle_nak+0x30>)
 8019f7c:	6878      	ldr	r0, [r7, #4]
 8019f7e:	f7f8 f887 	bl	8012090 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	f000 fc48 	bl	801a818 <dhcp_discover>
}
 8019f88:	bf00      	nop
 8019f8a:	3710      	adds	r7, #16
 8019f8c:	46bd      	mov	sp, r7
 8019f8e:	bd80      	pop	{r7, pc}
 8019f90:	08025298 	.word	0x08025298

08019f94 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b084      	sub	sp, #16
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fa0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8019fa2:	2108      	movs	r1, #8
 8019fa4:	68f8      	ldr	r0, [r7, #12]
 8019fa6:	f001 f83b 	bl	801b020 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	331c      	adds	r3, #28
 8019fae:	2200      	movs	r2, #0
 8019fb0:	4619      	mov	r1, r3
 8019fb2:	6878      	ldr	r0, [r7, #4]
 8019fb4:	f002 fb3c 	bl	801c630 <etharp_query>
 8019fb8:	4603      	mov	r3, r0
 8019fba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	799b      	ldrb	r3, [r3, #6]
 8019fc0:	2bff      	cmp	r3, #255	; 0xff
 8019fc2:	d005      	beq.n	8019fd0 <dhcp_check+0x3c>
    dhcp->tries++;
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	799b      	ldrb	r3, [r3, #6]
 8019fc8:	3301      	adds	r3, #1
 8019fca:	b2da      	uxtb	r2, r3
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8019fd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8019fd4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019fd6:	893b      	ldrh	r3, [r7, #8]
 8019fd8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019fdc:	4a06      	ldr	r2, [pc, #24]	; (8019ff8 <dhcp_check+0x64>)
 8019fde:	fb82 1203 	smull	r1, r2, r2, r3
 8019fe2:	1152      	asrs	r2, r2, #5
 8019fe4:	17db      	asrs	r3, r3, #31
 8019fe6:	1ad3      	subs	r3, r2, r3
 8019fe8:	b29a      	uxth	r2, r3
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8019fee:	bf00      	nop
 8019ff0:	3710      	adds	r7, #16
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd80      	pop	{r7, pc}
 8019ff6:	bf00      	nop
 8019ff8:	10624dd3 	.word	0x10624dd3

08019ffc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b084      	sub	sp, #16
 801a000:	af00      	add	r7, sp, #0
 801a002:	6078      	str	r0, [r7, #4]
 801a004:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a00a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a00c:	4b0c      	ldr	r3, [pc, #48]	; (801a040 <dhcp_handle_offer+0x44>)
 801a00e:	789b      	ldrb	r3, [r3, #2]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d011      	beq.n	801a038 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	2200      	movs	r2, #0
 801a018:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801a01a:	4b0a      	ldr	r3, [pc, #40]	; (801a044 <dhcp_handle_offer+0x48>)
 801a01c:	689b      	ldr	r3, [r3, #8]
 801a01e:	4618      	mov	r0, r3
 801a020:	f7f7 f95b 	bl	80112da <lwip_htonl>
 801a024:	4602      	mov	r2, r0
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	691a      	ldr	r2, [r3, #16]
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801a032:	6878      	ldr	r0, [r7, #4]
 801a034:	f000 f808 	bl	801a048 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801a038:	bf00      	nop
 801a03a:	3710      	adds	r7, #16
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	20010248 	.word	0x20010248
 801a044:	20010228 	.word	0x20010228

0801a048 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801a048:	b5b0      	push	{r4, r5, r7, lr}
 801a04a:	b08a      	sub	sp, #40	; 0x28
 801a04c:	af02      	add	r7, sp, #8
 801a04e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	2b00      	cmp	r3, #0
 801a054:	d109      	bne.n	801a06a <dhcp_select+0x22>
 801a056:	4b71      	ldr	r3, [pc, #452]	; (801a21c <dhcp_select+0x1d4>)
 801a058:	f240 1277 	movw	r2, #375	; 0x177
 801a05c:	4970      	ldr	r1, [pc, #448]	; (801a220 <dhcp_select+0x1d8>)
 801a05e:	4871      	ldr	r0, [pc, #452]	; (801a224 <dhcp_select+0x1dc>)
 801a060:	f005 fc30 	bl	801f8c4 <iprintf>
 801a064:	f06f 030f 	mvn.w	r3, #15
 801a068:	e0d3      	b.n	801a212 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a06e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801a070:	69bb      	ldr	r3, [r7, #24]
 801a072:	2b00      	cmp	r3, #0
 801a074:	d109      	bne.n	801a08a <dhcp_select+0x42>
 801a076:	4b69      	ldr	r3, [pc, #420]	; (801a21c <dhcp_select+0x1d4>)
 801a078:	f240 1279 	movw	r2, #377	; 0x179
 801a07c:	496a      	ldr	r1, [pc, #424]	; (801a228 <dhcp_select+0x1e0>)
 801a07e:	4869      	ldr	r0, [pc, #420]	; (801a224 <dhcp_select+0x1dc>)
 801a080:	f005 fc20 	bl	801f8c4 <iprintf>
 801a084:	f06f 0305 	mvn.w	r3, #5
 801a088:	e0c3      	b.n	801a212 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801a08a:	2101      	movs	r1, #1
 801a08c:	69b8      	ldr	r0, [r7, #24]
 801a08e:	f000 ffc7 	bl	801b020 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a092:	f107 030c 	add.w	r3, r7, #12
 801a096:	2203      	movs	r2, #3
 801a098:	69b9      	ldr	r1, [r7, #24]
 801a09a:	6878      	ldr	r0, [r7, #4]
 801a09c:	f001 fc4c 	bl	801b938 <dhcp_create_msg>
 801a0a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a0a2:	697b      	ldr	r3, [r7, #20]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	f000 8085 	beq.w	801a1b4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a0aa:	697b      	ldr	r3, [r7, #20]
 801a0ac:	685b      	ldr	r3, [r3, #4]
 801a0ae:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a0b0:	89b8      	ldrh	r0, [r7, #12]
 801a0b2:	693b      	ldr	r3, [r7, #16]
 801a0b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a0b8:	2302      	movs	r3, #2
 801a0ba:	2239      	movs	r2, #57	; 0x39
 801a0bc:	f000 ffca 	bl	801b054 <dhcp_option>
 801a0c0:	4603      	mov	r3, r0
 801a0c2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a0c4:	89b8      	ldrh	r0, [r7, #12]
 801a0c6:	693b      	ldr	r3, [r7, #16]
 801a0c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a0d0:	461a      	mov	r2, r3
 801a0d2:	f001 f819 	bl	801b108 <dhcp_option_short>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a0da:	89b8      	ldrh	r0, [r7, #12]
 801a0dc:	693b      	ldr	r3, [r7, #16]
 801a0de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a0e2:	2304      	movs	r3, #4
 801a0e4:	2232      	movs	r2, #50	; 0x32
 801a0e6:	f000 ffb5 	bl	801b054 <dhcp_option>
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a0ee:	89bc      	ldrh	r4, [r7, #12]
 801a0f0:	693b      	ldr	r3, [r7, #16]
 801a0f2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a0f6:	69bb      	ldr	r3, [r7, #24]
 801a0f8:	69db      	ldr	r3, [r3, #28]
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	f7f7 f8ed 	bl	80112da <lwip_htonl>
 801a100:	4603      	mov	r3, r0
 801a102:	461a      	mov	r2, r3
 801a104:	4629      	mov	r1, r5
 801a106:	4620      	mov	r0, r4
 801a108:	f001 f830 	bl	801b16c <dhcp_option_long>
 801a10c:	4603      	mov	r3, r0
 801a10e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801a110:	89b8      	ldrh	r0, [r7, #12]
 801a112:	693b      	ldr	r3, [r7, #16]
 801a114:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a118:	2304      	movs	r3, #4
 801a11a:	2236      	movs	r2, #54	; 0x36
 801a11c:	f000 ff9a 	bl	801b054 <dhcp_option>
 801a120:	4603      	mov	r3, r0
 801a122:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801a124:	89bc      	ldrh	r4, [r7, #12]
 801a126:	693b      	ldr	r3, [r7, #16]
 801a128:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a12c:	69bb      	ldr	r3, [r7, #24]
 801a12e:	699b      	ldr	r3, [r3, #24]
 801a130:	4618      	mov	r0, r3
 801a132:	f7f7 f8d2 	bl	80112da <lwip_htonl>
 801a136:	4603      	mov	r3, r0
 801a138:	461a      	mov	r2, r3
 801a13a:	4629      	mov	r1, r5
 801a13c:	4620      	mov	r0, r4
 801a13e:	f001 f815 	bl	801b16c <dhcp_option_long>
 801a142:	4603      	mov	r3, r0
 801a144:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a146:	89b8      	ldrh	r0, [r7, #12]
 801a148:	693b      	ldr	r3, [r7, #16]
 801a14a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a14e:	2303      	movs	r3, #3
 801a150:	2237      	movs	r2, #55	; 0x37
 801a152:	f000 ff7f 	bl	801b054 <dhcp_option>
 801a156:	4603      	mov	r3, r0
 801a158:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a15a:	2300      	movs	r3, #0
 801a15c:	77bb      	strb	r3, [r7, #30]
 801a15e:	e00e      	b.n	801a17e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a160:	89b8      	ldrh	r0, [r7, #12]
 801a162:	693b      	ldr	r3, [r7, #16]
 801a164:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a168:	7fbb      	ldrb	r3, [r7, #30]
 801a16a:	4a30      	ldr	r2, [pc, #192]	; (801a22c <dhcp_select+0x1e4>)
 801a16c:	5cd3      	ldrb	r3, [r2, r3]
 801a16e:	461a      	mov	r2, r3
 801a170:	f000 ffa4 	bl	801b0bc <dhcp_option_byte>
 801a174:	4603      	mov	r3, r0
 801a176:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a178:	7fbb      	ldrb	r3, [r7, #30]
 801a17a:	3301      	adds	r3, #1
 801a17c:	77bb      	strb	r3, [r7, #30]
 801a17e:	7fbb      	ldrb	r3, [r7, #30]
 801a180:	2b02      	cmp	r3, #2
 801a182:	d9ed      	bls.n	801a160 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a184:	89b8      	ldrh	r0, [r7, #12]
 801a186:	693b      	ldr	r3, [r7, #16]
 801a188:	33f0      	adds	r3, #240	; 0xf0
 801a18a:	697a      	ldr	r2, [r7, #20]
 801a18c:	4619      	mov	r1, r3
 801a18e:	f001 fca9 	bl	801bae4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a192:	4b27      	ldr	r3, [pc, #156]	; (801a230 <dhcp_select+0x1e8>)
 801a194:	6818      	ldr	r0, [r3, #0]
 801a196:	4b27      	ldr	r3, [pc, #156]	; (801a234 <dhcp_select+0x1ec>)
 801a198:	9301      	str	r3, [sp, #4]
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	9300      	str	r3, [sp, #0]
 801a19e:	2343      	movs	r3, #67	; 0x43
 801a1a0:	4a25      	ldr	r2, [pc, #148]	; (801a238 <dhcp_select+0x1f0>)
 801a1a2:	6979      	ldr	r1, [r7, #20]
 801a1a4:	f7ff fbb4 	bl	8019910 <udp_sendto_if_src>
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a1ac:	6978      	ldr	r0, [r7, #20]
 801a1ae:	f7f8 fcb5 	bl	8012b1c <pbuf_free>
 801a1b2:	e001      	b.n	801a1b8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a1b4:	23ff      	movs	r3, #255	; 0xff
 801a1b6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a1b8:	69bb      	ldr	r3, [r7, #24]
 801a1ba:	799b      	ldrb	r3, [r3, #6]
 801a1bc:	2bff      	cmp	r3, #255	; 0xff
 801a1be:	d005      	beq.n	801a1cc <dhcp_select+0x184>
    dhcp->tries++;
 801a1c0:	69bb      	ldr	r3, [r7, #24]
 801a1c2:	799b      	ldrb	r3, [r3, #6]
 801a1c4:	3301      	adds	r3, #1
 801a1c6:	b2da      	uxtb	r2, r3
 801a1c8:	69bb      	ldr	r3, [r7, #24]
 801a1ca:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a1cc:	69bb      	ldr	r3, [r7, #24]
 801a1ce:	799b      	ldrb	r3, [r3, #6]
 801a1d0:	2b05      	cmp	r3, #5
 801a1d2:	d80d      	bhi.n	801a1f0 <dhcp_select+0x1a8>
 801a1d4:	69bb      	ldr	r3, [r7, #24]
 801a1d6:	799b      	ldrb	r3, [r3, #6]
 801a1d8:	461a      	mov	r2, r3
 801a1da:	2301      	movs	r3, #1
 801a1dc:	4093      	lsls	r3, r2
 801a1de:	b29b      	uxth	r3, r3
 801a1e0:	461a      	mov	r2, r3
 801a1e2:	0152      	lsls	r2, r2, #5
 801a1e4:	1ad2      	subs	r2, r2, r3
 801a1e6:	0092      	lsls	r2, r2, #2
 801a1e8:	4413      	add	r3, r2
 801a1ea:	00db      	lsls	r3, r3, #3
 801a1ec:	b29b      	uxth	r3, r3
 801a1ee:	e001      	b.n	801a1f4 <dhcp_select+0x1ac>
 801a1f0:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a1f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a1f6:	89fb      	ldrh	r3, [r7, #14]
 801a1f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a1fc:	4a0f      	ldr	r2, [pc, #60]	; (801a23c <dhcp_select+0x1f4>)
 801a1fe:	fb82 1203 	smull	r1, r2, r2, r3
 801a202:	1152      	asrs	r2, r2, #5
 801a204:	17db      	asrs	r3, r3, #31
 801a206:	1ad3      	subs	r3, r2, r3
 801a208:	b29a      	uxth	r2, r3
 801a20a:	69bb      	ldr	r3, [r7, #24]
 801a20c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a20e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a212:	4618      	mov	r0, r3
 801a214:	3720      	adds	r7, #32
 801a216:	46bd      	mov	sp, r7
 801a218:	bdb0      	pop	{r4, r5, r7, pc}
 801a21a:	bf00      	nop
 801a21c:	08024600 	.word	0x08024600
 801a220:	080246ac 	.word	0x080246ac
 801a224:	08024660 	.word	0x08024660
 801a228:	080246c8 	.word	0x080246c8
 801a22c:	20000030 	.word	0x20000030
 801a230:	20010250 	.word	0x20010250
 801a234:	08025298 	.word	0x08025298
 801a238:	0802529c 	.word	0x0802529c
 801a23c:	10624dd3 	.word	0x10624dd3

0801a240 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b082      	sub	sp, #8
 801a244:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801a246:	4b27      	ldr	r3, [pc, #156]	; (801a2e4 <dhcp_coarse_tmr+0xa4>)
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	607b      	str	r3, [r7, #4]
 801a24c:	e042      	b.n	801a2d4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a252:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801a254:	683b      	ldr	r3, [r7, #0]
 801a256:	2b00      	cmp	r3, #0
 801a258:	d039      	beq.n	801a2ce <dhcp_coarse_tmr+0x8e>
 801a25a:	683b      	ldr	r3, [r7, #0]
 801a25c:	795b      	ldrb	r3, [r3, #5]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d035      	beq.n	801a2ce <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801a262:	683b      	ldr	r3, [r7, #0]
 801a264:	8a9b      	ldrh	r3, [r3, #20]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d012      	beq.n	801a290 <dhcp_coarse_tmr+0x50>
 801a26a:	683b      	ldr	r3, [r7, #0]
 801a26c:	8a5b      	ldrh	r3, [r3, #18]
 801a26e:	3301      	adds	r3, #1
 801a270:	b29a      	uxth	r2, r3
 801a272:	683b      	ldr	r3, [r7, #0]
 801a274:	825a      	strh	r2, [r3, #18]
 801a276:	683b      	ldr	r3, [r7, #0]
 801a278:	8a5a      	ldrh	r2, [r3, #18]
 801a27a:	683b      	ldr	r3, [r7, #0]
 801a27c:	8a9b      	ldrh	r3, [r3, #20]
 801a27e:	429a      	cmp	r2, r3
 801a280:	d106      	bne.n	801a290 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801a282:	6878      	ldr	r0, [r7, #4]
 801a284:	f000 fe32 	bl	801aeec <dhcp_release_and_stop>
        dhcp_start(netif);
 801a288:	6878      	ldr	r0, [r7, #4]
 801a28a:	f000 f969 	bl	801a560 <dhcp_start>
 801a28e:	e01e      	b.n	801a2ce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801a290:	683b      	ldr	r3, [r7, #0]
 801a292:	8a1b      	ldrh	r3, [r3, #16]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d00b      	beq.n	801a2b0 <dhcp_coarse_tmr+0x70>
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	8a1b      	ldrh	r3, [r3, #16]
 801a29c:	1e5a      	subs	r2, r3, #1
 801a29e:	b291      	uxth	r1, r2
 801a2a0:	683a      	ldr	r2, [r7, #0]
 801a2a2:	8211      	strh	r1, [r2, #16]
 801a2a4:	2b01      	cmp	r3, #1
 801a2a6:	d103      	bne.n	801a2b0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f000 f8c6 	bl	801a43a <dhcp_t2_timeout>
 801a2ae:	e00e      	b.n	801a2ce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801a2b0:	683b      	ldr	r3, [r7, #0]
 801a2b2:	89db      	ldrh	r3, [r3, #14]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d00a      	beq.n	801a2ce <dhcp_coarse_tmr+0x8e>
 801a2b8:	683b      	ldr	r3, [r7, #0]
 801a2ba:	89db      	ldrh	r3, [r3, #14]
 801a2bc:	1e5a      	subs	r2, r3, #1
 801a2be:	b291      	uxth	r1, r2
 801a2c0:	683a      	ldr	r2, [r7, #0]
 801a2c2:	81d1      	strh	r1, [r2, #14]
 801a2c4:	2b01      	cmp	r3, #1
 801a2c6:	d102      	bne.n	801a2ce <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801a2c8:	6878      	ldr	r0, [r7, #4]
 801a2ca:	f000 f888 	bl	801a3de <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	607b      	str	r3, [r7, #4]
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d1b9      	bne.n	801a24e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801a2da:	bf00      	nop
 801a2dc:	bf00      	nop
 801a2de:	3708      	adds	r7, #8
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	bd80      	pop	{r7, pc}
 801a2e4:	200101bc 	.word	0x200101bc

0801a2e8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801a2e8:	b580      	push	{r7, lr}
 801a2ea:	b082      	sub	sp, #8
 801a2ec:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801a2ee:	4b16      	ldr	r3, [pc, #88]	; (801a348 <dhcp_fine_tmr+0x60>)
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	607b      	str	r3, [r7, #4]
 801a2f4:	e020      	b.n	801a338 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2fa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801a2fc:	683b      	ldr	r3, [r7, #0]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d017      	beq.n	801a332 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801a302:	683b      	ldr	r3, [r7, #0]
 801a304:	891b      	ldrh	r3, [r3, #8]
 801a306:	2b01      	cmp	r3, #1
 801a308:	d906      	bls.n	801a318 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801a30a:	683b      	ldr	r3, [r7, #0]
 801a30c:	891b      	ldrh	r3, [r3, #8]
 801a30e:	3b01      	subs	r3, #1
 801a310:	b29a      	uxth	r2, r3
 801a312:	683b      	ldr	r3, [r7, #0]
 801a314:	811a      	strh	r2, [r3, #8]
 801a316:	e00c      	b.n	801a332 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801a318:	683b      	ldr	r3, [r7, #0]
 801a31a:	891b      	ldrh	r3, [r3, #8]
 801a31c:	2b01      	cmp	r3, #1
 801a31e:	d108      	bne.n	801a332 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801a320:	683b      	ldr	r3, [r7, #0]
 801a322:	891b      	ldrh	r3, [r3, #8]
 801a324:	3b01      	subs	r3, #1
 801a326:	b29a      	uxth	r2, r3
 801a328:	683b      	ldr	r3, [r7, #0]
 801a32a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801a32c:	6878      	ldr	r0, [r7, #4]
 801a32e:	f000 f80d 	bl	801a34c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	607b      	str	r3, [r7, #4]
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d1db      	bne.n	801a2f6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801a33e:	bf00      	nop
 801a340:	bf00      	nop
 801a342:	3708      	adds	r7, #8
 801a344:	46bd      	mov	sp, r7
 801a346:	bd80      	pop	{r7, pc}
 801a348:	200101bc 	.word	0x200101bc

0801a34c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b084      	sub	sp, #16
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a358:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	795b      	ldrb	r3, [r3, #5]
 801a35e:	2b0c      	cmp	r3, #12
 801a360:	d003      	beq.n	801a36a <dhcp_timeout+0x1e>
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	795b      	ldrb	r3, [r3, #5]
 801a366:	2b06      	cmp	r3, #6
 801a368:	d103      	bne.n	801a372 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801a36a:	6878      	ldr	r0, [r7, #4]
 801a36c:	f000 fa54 	bl	801a818 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801a370:	e031      	b.n	801a3d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	795b      	ldrb	r3, [r3, #5]
 801a376:	2b01      	cmp	r3, #1
 801a378:	d10e      	bne.n	801a398 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	799b      	ldrb	r3, [r3, #6]
 801a37e:	2b05      	cmp	r3, #5
 801a380:	d803      	bhi.n	801a38a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801a382:	6878      	ldr	r0, [r7, #4]
 801a384:	f7ff fe60 	bl	801a048 <dhcp_select>
}
 801a388:	e025      	b.n	801a3d6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801a38a:	6878      	ldr	r0, [r7, #4]
 801a38c:	f000 fdae 	bl	801aeec <dhcp_release_and_stop>
      dhcp_start(netif);
 801a390:	6878      	ldr	r0, [r7, #4]
 801a392:	f000 f8e5 	bl	801a560 <dhcp_start>
}
 801a396:	e01e      	b.n	801a3d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	795b      	ldrb	r3, [r3, #5]
 801a39c:	2b08      	cmp	r3, #8
 801a39e:	d10b      	bne.n	801a3b8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	799b      	ldrb	r3, [r3, #6]
 801a3a4:	2b01      	cmp	r3, #1
 801a3a6:	d803      	bhi.n	801a3b0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801a3a8:	6878      	ldr	r0, [r7, #4]
 801a3aa:	f7ff fdf3 	bl	8019f94 <dhcp_check>
}
 801a3ae:	e012      	b.n	801a3d6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801a3b0:	6878      	ldr	r0, [r7, #4]
 801a3b2:	f000 fad3 	bl	801a95c <dhcp_bind>
}
 801a3b6:	e00e      	b.n	801a3d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	795b      	ldrb	r3, [r3, #5]
 801a3bc:	2b03      	cmp	r3, #3
 801a3be:	d10a      	bne.n	801a3d6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	799b      	ldrb	r3, [r3, #6]
 801a3c4:	2b01      	cmp	r3, #1
 801a3c6:	d803      	bhi.n	801a3d0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801a3c8:	6878      	ldr	r0, [r7, #4]
 801a3ca:	f000 fcd9 	bl	801ad80 <dhcp_reboot>
}
 801a3ce:	e002      	b.n	801a3d6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801a3d0:	6878      	ldr	r0, [r7, #4]
 801a3d2:	f000 fa21 	bl	801a818 <dhcp_discover>
}
 801a3d6:	bf00      	nop
 801a3d8:	3710      	adds	r7, #16
 801a3da:	46bd      	mov	sp, r7
 801a3dc:	bd80      	pop	{r7, pc}

0801a3de <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801a3de:	b580      	push	{r7, lr}
 801a3e0:	b084      	sub	sp, #16
 801a3e2:	af00      	add	r7, sp, #0
 801a3e4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	795b      	ldrb	r3, [r3, #5]
 801a3f0:	2b01      	cmp	r3, #1
 801a3f2:	d007      	beq.n	801a404 <dhcp_t1_timeout+0x26>
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	795b      	ldrb	r3, [r3, #5]
 801a3f8:	2b0a      	cmp	r3, #10
 801a3fa:	d003      	beq.n	801a404 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a400:	2b05      	cmp	r3, #5
 801a402:	d116      	bne.n	801a432 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801a404:	6878      	ldr	r0, [r7, #4]
 801a406:	f000 fb83 	bl	801ab10 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	899b      	ldrh	r3, [r3, #12]
 801a40e:	461a      	mov	r2, r3
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	8a5b      	ldrh	r3, [r3, #18]
 801a414:	1ad3      	subs	r3, r2, r3
 801a416:	2b01      	cmp	r3, #1
 801a418:	dd0b      	ble.n	801a432 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801a41a:	68fb      	ldr	r3, [r7, #12]
 801a41c:	899b      	ldrh	r3, [r3, #12]
 801a41e:	461a      	mov	r2, r3
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	8a5b      	ldrh	r3, [r3, #18]
 801a424:	1ad3      	subs	r3, r2, r3
 801a426:	0fda      	lsrs	r2, r3, #31
 801a428:	4413      	add	r3, r2
 801a42a:	105b      	asrs	r3, r3, #1
 801a42c:	b29a      	uxth	r2, r3
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801a432:	bf00      	nop
 801a434:	3710      	adds	r7, #16
 801a436:	46bd      	mov	sp, r7
 801a438:	bd80      	pop	{r7, pc}

0801a43a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801a43a:	b580      	push	{r7, lr}
 801a43c:	b084      	sub	sp, #16
 801a43e:	af00      	add	r7, sp, #0
 801a440:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a446:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	795b      	ldrb	r3, [r3, #5]
 801a44c:	2b01      	cmp	r3, #1
 801a44e:	d00b      	beq.n	801a468 <dhcp_t2_timeout+0x2e>
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	795b      	ldrb	r3, [r3, #5]
 801a454:	2b0a      	cmp	r3, #10
 801a456:	d007      	beq.n	801a468 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a45c:	2b05      	cmp	r3, #5
 801a45e:	d003      	beq.n	801a468 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	795b      	ldrb	r3, [r3, #5]
 801a464:	2b04      	cmp	r3, #4
 801a466:	d116      	bne.n	801a496 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801a468:	6878      	ldr	r0, [r7, #4]
 801a46a:	f000 fbed 	bl	801ac48 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	8a9b      	ldrh	r3, [r3, #20]
 801a472:	461a      	mov	r2, r3
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	8a5b      	ldrh	r3, [r3, #18]
 801a478:	1ad3      	subs	r3, r2, r3
 801a47a:	2b01      	cmp	r3, #1
 801a47c:	dd0b      	ble.n	801a496 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	8a9b      	ldrh	r3, [r3, #20]
 801a482:	461a      	mov	r2, r3
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	8a5b      	ldrh	r3, [r3, #18]
 801a488:	1ad3      	subs	r3, r2, r3
 801a48a:	0fda      	lsrs	r2, r3, #31
 801a48c:	4413      	add	r3, r2
 801a48e:	105b      	asrs	r3, r3, #1
 801a490:	b29a      	uxth	r2, r3
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801a496:	bf00      	nop
 801a498:	3710      	adds	r7, #16
 801a49a:	46bd      	mov	sp, r7
 801a49c:	bd80      	pop	{r7, pc}
	...

0801a4a0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b084      	sub	sp, #16
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	6078      	str	r0, [r7, #4]
 801a4a8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4ae:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a4b0:	68fb      	ldr	r3, [r7, #12]
 801a4b2:	2200      	movs	r2, #0
 801a4b4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	2200      	movs	r2, #0
 801a4ba:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801a4bc:	4b26      	ldr	r3, [pc, #152]	; (801a558 <dhcp_handle_ack+0xb8>)
 801a4be:	78db      	ldrb	r3, [r3, #3]
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d003      	beq.n	801a4cc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801a4c4:	4b25      	ldr	r3, [pc, #148]	; (801a55c <dhcp_handle_ack+0xbc>)
 801a4c6:	68da      	ldr	r2, [r3, #12]
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801a4cc:	4b22      	ldr	r3, [pc, #136]	; (801a558 <dhcp_handle_ack+0xb8>)
 801a4ce:	791b      	ldrb	r3, [r3, #4]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d004      	beq.n	801a4de <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801a4d4:	4b21      	ldr	r3, [pc, #132]	; (801a55c <dhcp_handle_ack+0xbc>)
 801a4d6:	691a      	ldr	r2, [r3, #16]
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	62da      	str	r2, [r3, #44]	; 0x2c
 801a4dc:	e004      	b.n	801a4e8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4e2:	085a      	lsrs	r2, r3, #1
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801a4e8:	4b1b      	ldr	r3, [pc, #108]	; (801a558 <dhcp_handle_ack+0xb8>)
 801a4ea:	795b      	ldrb	r3, [r3, #5]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d004      	beq.n	801a4fa <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801a4f0:	4b1a      	ldr	r3, [pc, #104]	; (801a55c <dhcp_handle_ack+0xbc>)
 801a4f2:	695a      	ldr	r2, [r3, #20]
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	631a      	str	r2, [r3, #48]	; 0x30
 801a4f8:	e007      	b.n	801a50a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a4fe:	4613      	mov	r3, r2
 801a500:	00db      	lsls	r3, r3, #3
 801a502:	1a9b      	subs	r3, r3, r2
 801a504:	08da      	lsrs	r2, r3, #3
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a50a:	683b      	ldr	r3, [r7, #0]
 801a50c:	691a      	ldr	r2, [r3, #16]
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801a512:	4b11      	ldr	r3, [pc, #68]	; (801a558 <dhcp_handle_ack+0xb8>)
 801a514:	799b      	ldrb	r3, [r3, #6]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d00b      	beq.n	801a532 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801a51a:	4b10      	ldr	r3, [pc, #64]	; (801a55c <dhcp_handle_ack+0xbc>)
 801a51c:	699b      	ldr	r3, [r3, #24]
 801a51e:	4618      	mov	r0, r3
 801a520:	f7f6 fedb 	bl	80112da <lwip_htonl>
 801a524:	4602      	mov	r2, r0
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	2201      	movs	r2, #1
 801a52e:	71da      	strb	r2, [r3, #7]
 801a530:	e002      	b.n	801a538 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	2200      	movs	r2, #0
 801a536:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801a538:	4b07      	ldr	r3, [pc, #28]	; (801a558 <dhcp_handle_ack+0xb8>)
 801a53a:	79db      	ldrb	r3, [r3, #7]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d007      	beq.n	801a550 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801a540:	4b06      	ldr	r3, [pc, #24]	; (801a55c <dhcp_handle_ack+0xbc>)
 801a542:	69db      	ldr	r3, [r3, #28]
 801a544:	4618      	mov	r0, r3
 801a546:	f7f6 fec8 	bl	80112da <lwip_htonl>
 801a54a:	4602      	mov	r2, r0
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801a550:	bf00      	nop
 801a552:	3710      	adds	r7, #16
 801a554:	46bd      	mov	sp, r7
 801a556:	bd80      	pop	{r7, pc}
 801a558:	20010248 	.word	0x20010248
 801a55c:	20010228 	.word	0x20010228

0801a560 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801a560:	b580      	push	{r7, lr}
 801a562:	b084      	sub	sp, #16
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d109      	bne.n	801a582 <dhcp_start+0x22>
 801a56e:	4b37      	ldr	r3, [pc, #220]	; (801a64c <dhcp_start+0xec>)
 801a570:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a574:	4936      	ldr	r1, [pc, #216]	; (801a650 <dhcp_start+0xf0>)
 801a576:	4837      	ldr	r0, [pc, #220]	; (801a654 <dhcp_start+0xf4>)
 801a578:	f005 f9a4 	bl	801f8c4 <iprintf>
 801a57c:	f06f 030f 	mvn.w	r3, #15
 801a580:	e060      	b.n	801a644 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a588:	f003 0301 	and.w	r3, r3, #1
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d109      	bne.n	801a5a4 <dhcp_start+0x44>
 801a590:	4b2e      	ldr	r3, [pc, #184]	; (801a64c <dhcp_start+0xec>)
 801a592:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801a596:	4930      	ldr	r1, [pc, #192]	; (801a658 <dhcp_start+0xf8>)
 801a598:	482e      	ldr	r0, [pc, #184]	; (801a654 <dhcp_start+0xf4>)
 801a59a:	f005 f993 	bl	801f8c4 <iprintf>
 801a59e:	f06f 030f 	mvn.w	r3, #15
 801a5a2:	e04f      	b.n	801a644 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5a8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a5ae:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a5b2:	d202      	bcs.n	801a5ba <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801a5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a5b8:	e044      	b.n	801a644 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d10d      	bne.n	801a5dc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801a5c0:	2034      	movs	r0, #52	; 0x34
 801a5c2:	f7f7 f9a9 	bl	8011918 <mem_malloc>
 801a5c6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d102      	bne.n	801a5d4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801a5ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a5d2:	e037      	b.n	801a644 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	68fa      	ldr	r2, [r7, #12]
 801a5d8:	625a      	str	r2, [r3, #36]	; 0x24
 801a5da:	e005      	b.n	801a5e8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	791b      	ldrb	r3, [r3, #4]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d001      	beq.n	801a5e8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a5e4:	f7ff fc92 	bl	8019f0c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801a5e8:	2234      	movs	r2, #52	; 0x34
 801a5ea:	2100      	movs	r1, #0
 801a5ec:	68f8      	ldr	r0, [r7, #12]
 801a5ee:	f005 fabf 	bl	801fb70 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801a5f2:	f7ff fc39 	bl	8019e68 <dhcp_inc_pcb_refcount>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d002      	beq.n	801a602 <dhcp_start+0xa2>
    return ERR_MEM;
 801a5fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a600:	e020      	b.n	801a644 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	2201      	movs	r2, #1
 801a606:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a60e:	f003 0304 	and.w	r3, r3, #4
 801a612:	2b00      	cmp	r3, #0
 801a614:	d105      	bne.n	801a622 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801a616:	2102      	movs	r1, #2
 801a618:	68f8      	ldr	r0, [r7, #12]
 801a61a:	f000 fd01 	bl	801b020 <dhcp_set_state>
    return ERR_OK;
 801a61e:	2300      	movs	r3, #0
 801a620:	e010      	b.n	801a644 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801a622:	6878      	ldr	r0, [r7, #4]
 801a624:	f000 f8f8 	bl	801a818 <dhcp_discover>
 801a628:	4603      	mov	r3, r0
 801a62a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801a62c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a630:	2b00      	cmp	r3, #0
 801a632:	d005      	beq.n	801a640 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801a634:	6878      	ldr	r0, [r7, #4]
 801a636:	f000 fc59 	bl	801aeec <dhcp_release_and_stop>
    return ERR_MEM;
 801a63a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a63e:	e001      	b.n	801a644 <dhcp_start+0xe4>
  }
  return result;
 801a640:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a644:	4618      	mov	r0, r3
 801a646:	3710      	adds	r7, #16
 801a648:	46bd      	mov	sp, r7
 801a64a:	bd80      	pop	{r7, pc}
 801a64c:	08024600 	.word	0x08024600
 801a650:	080246e4 	.word	0x080246e4
 801a654:	08024660 	.word	0x08024660
 801a658:	08024728 	.word	0x08024728

0801a65c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801a65c:	b580      	push	{r7, lr}
 801a65e:	b084      	sub	sp, #16
 801a660:	af00      	add	r7, sp, #0
 801a662:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a668:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d025      	beq.n	801a6bc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	795b      	ldrb	r3, [r3, #5]
 801a674:	2b0a      	cmp	r3, #10
 801a676:	d008      	beq.n	801a68a <dhcp_network_changed+0x2e>
 801a678:	2b0a      	cmp	r3, #10
 801a67a:	dc0d      	bgt.n	801a698 <dhcp_network_changed+0x3c>
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d01f      	beq.n	801a6c0 <dhcp_network_changed+0x64>
 801a680:	2b00      	cmp	r3, #0
 801a682:	db09      	blt.n	801a698 <dhcp_network_changed+0x3c>
 801a684:	3b03      	subs	r3, #3
 801a686:	2b02      	cmp	r3, #2
 801a688:	d806      	bhi.n	801a698 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	2200      	movs	r2, #0
 801a68e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801a690:	6878      	ldr	r0, [r7, #4]
 801a692:	f000 fb75 	bl	801ad80 <dhcp_reboot>
      break;
 801a696:	e014      	b.n	801a6c2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	795b      	ldrb	r3, [r3, #5]
 801a69c:	2b0c      	cmp	r3, #12
 801a69e:	d906      	bls.n	801a6ae <dhcp_network_changed+0x52>
 801a6a0:	4b09      	ldr	r3, [pc, #36]	; (801a6c8 <dhcp_network_changed+0x6c>)
 801a6a2:	f240 326d 	movw	r2, #877	; 0x36d
 801a6a6:	4909      	ldr	r1, [pc, #36]	; (801a6cc <dhcp_network_changed+0x70>)
 801a6a8:	4809      	ldr	r0, [pc, #36]	; (801a6d0 <dhcp_network_changed+0x74>)
 801a6aa:	f005 f90b 	bl	801f8c4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	2200      	movs	r2, #0
 801a6b2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801a6b4:	6878      	ldr	r0, [r7, #4]
 801a6b6:	f000 f8af 	bl	801a818 <dhcp_discover>
      break;
 801a6ba:	e002      	b.n	801a6c2 <dhcp_network_changed+0x66>
    return;
 801a6bc:	bf00      	nop
 801a6be:	e000      	b.n	801a6c2 <dhcp_network_changed+0x66>
      break;
 801a6c0:	bf00      	nop
  }
}
 801a6c2:	3710      	adds	r7, #16
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bd80      	pop	{r7, pc}
 801a6c8:	08024600 	.word	0x08024600
 801a6cc:	0802474c 	.word	0x0802474c
 801a6d0:	08024660 	.word	0x08024660

0801a6d4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b084      	sub	sp, #16
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	6078      	str	r0, [r7, #4]
 801a6dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d107      	bne.n	801a6f4 <dhcp_arp_reply+0x20>
 801a6e4:	4b0e      	ldr	r3, [pc, #56]	; (801a720 <dhcp_arp_reply+0x4c>)
 801a6e6:	f240 328b 	movw	r2, #907	; 0x38b
 801a6ea:	490e      	ldr	r1, [pc, #56]	; (801a724 <dhcp_arp_reply+0x50>)
 801a6ec:	480e      	ldr	r0, [pc, #56]	; (801a728 <dhcp_arp_reply+0x54>)
 801a6ee:	f005 f8e9 	bl	801f8c4 <iprintf>
 801a6f2:	e012      	b.n	801a71a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6f8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d00c      	beq.n	801a71a <dhcp_arp_reply+0x46>
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	795b      	ldrb	r3, [r3, #5]
 801a704:	2b08      	cmp	r3, #8
 801a706:	d108      	bne.n	801a71a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801a708:	683b      	ldr	r3, [r7, #0]
 801a70a:	681a      	ldr	r2, [r3, #0]
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	69db      	ldr	r3, [r3, #28]
 801a710:	429a      	cmp	r2, r3
 801a712:	d102      	bne.n	801a71a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801a714:	6878      	ldr	r0, [r7, #4]
 801a716:	f000 f809 	bl	801a72c <dhcp_decline>
    }
  }
}
 801a71a:	3710      	adds	r7, #16
 801a71c:	46bd      	mov	sp, r7
 801a71e:	bd80      	pop	{r7, pc}
 801a720:	08024600 	.word	0x08024600
 801a724:	080246e4 	.word	0x080246e4
 801a728:	08024660 	.word	0x08024660

0801a72c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801a72c:	b5b0      	push	{r4, r5, r7, lr}
 801a72e:	b08a      	sub	sp, #40	; 0x28
 801a730:	af02      	add	r7, sp, #8
 801a732:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a738:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801a73a:	210c      	movs	r1, #12
 801a73c:	69b8      	ldr	r0, [r7, #24]
 801a73e:	f000 fc6f 	bl	801b020 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801a742:	f107 030c 	add.w	r3, r7, #12
 801a746:	2204      	movs	r2, #4
 801a748:	69b9      	ldr	r1, [r7, #24]
 801a74a:	6878      	ldr	r0, [r7, #4]
 801a74c:	f001 f8f4 	bl	801b938 <dhcp_create_msg>
 801a750:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a752:	697b      	ldr	r3, [r7, #20]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d035      	beq.n	801a7c4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a758:	697b      	ldr	r3, [r7, #20]
 801a75a:	685b      	ldr	r3, [r3, #4]
 801a75c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a75e:	89b8      	ldrh	r0, [r7, #12]
 801a760:	693b      	ldr	r3, [r7, #16]
 801a762:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a766:	2304      	movs	r3, #4
 801a768:	2232      	movs	r2, #50	; 0x32
 801a76a:	f000 fc73 	bl	801b054 <dhcp_option>
 801a76e:	4603      	mov	r3, r0
 801a770:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a772:	89bc      	ldrh	r4, [r7, #12]
 801a774:	693b      	ldr	r3, [r7, #16]
 801a776:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a77a:	69bb      	ldr	r3, [r7, #24]
 801a77c:	69db      	ldr	r3, [r3, #28]
 801a77e:	4618      	mov	r0, r3
 801a780:	f7f6 fdab 	bl	80112da <lwip_htonl>
 801a784:	4603      	mov	r3, r0
 801a786:	461a      	mov	r2, r3
 801a788:	4629      	mov	r1, r5
 801a78a:	4620      	mov	r0, r4
 801a78c:	f000 fcee 	bl	801b16c <dhcp_option_long>
 801a790:	4603      	mov	r3, r0
 801a792:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a794:	89b8      	ldrh	r0, [r7, #12]
 801a796:	693b      	ldr	r3, [r7, #16]
 801a798:	33f0      	adds	r3, #240	; 0xf0
 801a79a:	697a      	ldr	r2, [r7, #20]
 801a79c:	4619      	mov	r1, r3
 801a79e:	f001 f9a1 	bl	801bae4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a7a2:	4b19      	ldr	r3, [pc, #100]	; (801a808 <dhcp_decline+0xdc>)
 801a7a4:	6818      	ldr	r0, [r3, #0]
 801a7a6:	4b19      	ldr	r3, [pc, #100]	; (801a80c <dhcp_decline+0xe0>)
 801a7a8:	9301      	str	r3, [sp, #4]
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	9300      	str	r3, [sp, #0]
 801a7ae:	2343      	movs	r3, #67	; 0x43
 801a7b0:	4a17      	ldr	r2, [pc, #92]	; (801a810 <dhcp_decline+0xe4>)
 801a7b2:	6979      	ldr	r1, [r7, #20]
 801a7b4:	f7ff f8ac 	bl	8019910 <udp_sendto_if_src>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a7bc:	6978      	ldr	r0, [r7, #20]
 801a7be:	f7f8 f9ad 	bl	8012b1c <pbuf_free>
 801a7c2:	e001      	b.n	801a7c8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a7c4:	23ff      	movs	r3, #255	; 0xff
 801a7c6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a7c8:	69bb      	ldr	r3, [r7, #24]
 801a7ca:	799b      	ldrb	r3, [r3, #6]
 801a7cc:	2bff      	cmp	r3, #255	; 0xff
 801a7ce:	d005      	beq.n	801a7dc <dhcp_decline+0xb0>
    dhcp->tries++;
 801a7d0:	69bb      	ldr	r3, [r7, #24]
 801a7d2:	799b      	ldrb	r3, [r3, #6]
 801a7d4:	3301      	adds	r3, #1
 801a7d6:	b2da      	uxtb	r2, r3
 801a7d8:	69bb      	ldr	r3, [r7, #24]
 801a7da:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801a7dc:	f242 7310 	movw	r3, #10000	; 0x2710
 801a7e0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a7e2:	89fb      	ldrh	r3, [r7, #14]
 801a7e4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a7e8:	4a0a      	ldr	r2, [pc, #40]	; (801a814 <dhcp_decline+0xe8>)
 801a7ea:	fb82 1203 	smull	r1, r2, r2, r3
 801a7ee:	1152      	asrs	r2, r2, #5
 801a7f0:	17db      	asrs	r3, r3, #31
 801a7f2:	1ad3      	subs	r3, r2, r3
 801a7f4:	b29a      	uxth	r2, r3
 801a7f6:	69bb      	ldr	r3, [r7, #24]
 801a7f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a7fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a7fe:	4618      	mov	r0, r3
 801a800:	3720      	adds	r7, #32
 801a802:	46bd      	mov	sp, r7
 801a804:	bdb0      	pop	{r4, r5, r7, pc}
 801a806:	bf00      	nop
 801a808:	20010250 	.word	0x20010250
 801a80c:	08025298 	.word	0x08025298
 801a810:	0802529c 	.word	0x0802529c
 801a814:	10624dd3 	.word	0x10624dd3

0801a818 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b08a      	sub	sp, #40	; 0x28
 801a81c:	af02      	add	r7, sp, #8
 801a81e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a824:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801a826:	2300      	movs	r3, #0
 801a828:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801a82a:	69bb      	ldr	r3, [r7, #24]
 801a82c:	2200      	movs	r2, #0
 801a82e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801a830:	2106      	movs	r1, #6
 801a832:	69b8      	ldr	r0, [r7, #24]
 801a834:	f000 fbf4 	bl	801b020 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801a838:	f107 0308 	add.w	r3, r7, #8
 801a83c:	2201      	movs	r2, #1
 801a83e:	69b9      	ldr	r1, [r7, #24]
 801a840:	6878      	ldr	r0, [r7, #4]
 801a842:	f001 f879 	bl	801b938 <dhcp_create_msg>
 801a846:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801a848:	693b      	ldr	r3, [r7, #16]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	d04b      	beq.n	801a8e6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a84e:	693b      	ldr	r3, [r7, #16]
 801a850:	685b      	ldr	r3, [r3, #4]
 801a852:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a854:	8938      	ldrh	r0, [r7, #8]
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a85c:	2302      	movs	r3, #2
 801a85e:	2239      	movs	r2, #57	; 0x39
 801a860:	f000 fbf8 	bl	801b054 <dhcp_option>
 801a864:	4603      	mov	r3, r0
 801a866:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a868:	8938      	ldrh	r0, [r7, #8]
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a874:	461a      	mov	r2, r3
 801a876:	f000 fc47 	bl	801b108 <dhcp_option_short>
 801a87a:	4603      	mov	r3, r0
 801a87c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a87e:	8938      	ldrh	r0, [r7, #8]
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a886:	2303      	movs	r3, #3
 801a888:	2237      	movs	r2, #55	; 0x37
 801a88a:	f000 fbe3 	bl	801b054 <dhcp_option>
 801a88e:	4603      	mov	r3, r0
 801a890:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a892:	2300      	movs	r3, #0
 801a894:	77fb      	strb	r3, [r7, #31]
 801a896:	e00e      	b.n	801a8b6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a898:	8938      	ldrh	r0, [r7, #8]
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a8a0:	7ffb      	ldrb	r3, [r7, #31]
 801a8a2:	4a29      	ldr	r2, [pc, #164]	; (801a948 <dhcp_discover+0x130>)
 801a8a4:	5cd3      	ldrb	r3, [r2, r3]
 801a8a6:	461a      	mov	r2, r3
 801a8a8:	f000 fc08 	bl	801b0bc <dhcp_option_byte>
 801a8ac:	4603      	mov	r3, r0
 801a8ae:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a8b0:	7ffb      	ldrb	r3, [r7, #31]
 801a8b2:	3301      	adds	r3, #1
 801a8b4:	77fb      	strb	r3, [r7, #31]
 801a8b6:	7ffb      	ldrb	r3, [r7, #31]
 801a8b8:	2b02      	cmp	r3, #2
 801a8ba:	d9ed      	bls.n	801a898 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a8bc:	8938      	ldrh	r0, [r7, #8]
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	33f0      	adds	r3, #240	; 0xf0
 801a8c2:	693a      	ldr	r2, [r7, #16]
 801a8c4:	4619      	mov	r1, r3
 801a8c6:	f001 f90d 	bl	801bae4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a8ca:	4b20      	ldr	r3, [pc, #128]	; (801a94c <dhcp_discover+0x134>)
 801a8cc:	6818      	ldr	r0, [r3, #0]
 801a8ce:	4b20      	ldr	r3, [pc, #128]	; (801a950 <dhcp_discover+0x138>)
 801a8d0:	9301      	str	r3, [sp, #4]
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	9300      	str	r3, [sp, #0]
 801a8d6:	2343      	movs	r3, #67	; 0x43
 801a8d8:	4a1e      	ldr	r2, [pc, #120]	; (801a954 <dhcp_discover+0x13c>)
 801a8da:	6939      	ldr	r1, [r7, #16]
 801a8dc:	f7ff f818 	bl	8019910 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801a8e0:	6938      	ldr	r0, [r7, #16]
 801a8e2:	f7f8 f91b 	bl	8012b1c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801a8e6:	69bb      	ldr	r3, [r7, #24]
 801a8e8:	799b      	ldrb	r3, [r3, #6]
 801a8ea:	2bff      	cmp	r3, #255	; 0xff
 801a8ec:	d005      	beq.n	801a8fa <dhcp_discover+0xe2>
    dhcp->tries++;
 801a8ee:	69bb      	ldr	r3, [r7, #24]
 801a8f0:	799b      	ldrb	r3, [r3, #6]
 801a8f2:	3301      	adds	r3, #1
 801a8f4:	b2da      	uxtb	r2, r3
 801a8f6:	69bb      	ldr	r3, [r7, #24]
 801a8f8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a8fa:	69bb      	ldr	r3, [r7, #24]
 801a8fc:	799b      	ldrb	r3, [r3, #6]
 801a8fe:	2b05      	cmp	r3, #5
 801a900:	d80d      	bhi.n	801a91e <dhcp_discover+0x106>
 801a902:	69bb      	ldr	r3, [r7, #24]
 801a904:	799b      	ldrb	r3, [r3, #6]
 801a906:	461a      	mov	r2, r3
 801a908:	2301      	movs	r3, #1
 801a90a:	4093      	lsls	r3, r2
 801a90c:	b29b      	uxth	r3, r3
 801a90e:	461a      	mov	r2, r3
 801a910:	0152      	lsls	r2, r2, #5
 801a912:	1ad2      	subs	r2, r2, r3
 801a914:	0092      	lsls	r2, r2, #2
 801a916:	4413      	add	r3, r2
 801a918:	00db      	lsls	r3, r3, #3
 801a91a:	b29b      	uxth	r3, r3
 801a91c:	e001      	b.n	801a922 <dhcp_discover+0x10a>
 801a91e:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a922:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a924:	897b      	ldrh	r3, [r7, #10]
 801a926:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a92a:	4a0b      	ldr	r2, [pc, #44]	; (801a958 <dhcp_discover+0x140>)
 801a92c:	fb82 1203 	smull	r1, r2, r2, r3
 801a930:	1152      	asrs	r2, r2, #5
 801a932:	17db      	asrs	r3, r3, #31
 801a934:	1ad3      	subs	r3, r2, r3
 801a936:	b29a      	uxth	r2, r3
 801a938:	69bb      	ldr	r3, [r7, #24]
 801a93a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a93c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a940:	4618      	mov	r0, r3
 801a942:	3720      	adds	r7, #32
 801a944:	46bd      	mov	sp, r7
 801a946:	bd80      	pop	{r7, pc}
 801a948:	20000030 	.word	0x20000030
 801a94c:	20010250 	.word	0x20010250
 801a950:	08025298 	.word	0x08025298
 801a954:	0802529c 	.word	0x0802529c
 801a958:	10624dd3 	.word	0x10624dd3

0801a95c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b088      	sub	sp, #32
 801a960:	af00      	add	r7, sp, #0
 801a962:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d107      	bne.n	801a97a <dhcp_bind+0x1e>
 801a96a:	4b64      	ldr	r3, [pc, #400]	; (801aafc <dhcp_bind+0x1a0>)
 801a96c:	f240 4215 	movw	r2, #1045	; 0x415
 801a970:	4963      	ldr	r1, [pc, #396]	; (801ab00 <dhcp_bind+0x1a4>)
 801a972:	4864      	ldr	r0, [pc, #400]	; (801ab04 <dhcp_bind+0x1a8>)
 801a974:	f004 ffa6 	bl	801f8c4 <iprintf>
 801a978:	e0bc      	b.n	801aaf4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a97e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801a980:	69bb      	ldr	r3, [r7, #24]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d107      	bne.n	801a996 <dhcp_bind+0x3a>
 801a986:	4b5d      	ldr	r3, [pc, #372]	; (801aafc <dhcp_bind+0x1a0>)
 801a988:	f240 4217 	movw	r2, #1047	; 0x417
 801a98c:	495e      	ldr	r1, [pc, #376]	; (801ab08 <dhcp_bind+0x1ac>)
 801a98e:	485d      	ldr	r0, [pc, #372]	; (801ab04 <dhcp_bind+0x1a8>)
 801a990:	f004 ff98 	bl	801f8c4 <iprintf>
 801a994:	e0ae      	b.n	801aaf4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801a996:	69bb      	ldr	r3, [r7, #24]
 801a998:	2200      	movs	r2, #0
 801a99a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801a99c:	69bb      	ldr	r3, [r7, #24]
 801a99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a9a4:	d019      	beq.n	801a9da <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a9a6:	69bb      	ldr	r3, [r7, #24]
 801a9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9aa:	331e      	adds	r3, #30
 801a9ac:	4a57      	ldr	r2, [pc, #348]	; (801ab0c <dhcp_bind+0x1b0>)
 801a9ae:	fba2 2303 	umull	r2, r3, r2, r3
 801a9b2:	095b      	lsrs	r3, r3, #5
 801a9b4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a9b6:	69fb      	ldr	r3, [r7, #28]
 801a9b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a9bc:	d302      	bcc.n	801a9c4 <dhcp_bind+0x68>
      timeout = 0xffff;
 801a9be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a9c2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801a9c4:	69fb      	ldr	r3, [r7, #28]
 801a9c6:	b29a      	uxth	r2, r3
 801a9c8:	69bb      	ldr	r3, [r7, #24]
 801a9ca:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801a9cc:	69bb      	ldr	r3, [r7, #24]
 801a9ce:	8a9b      	ldrh	r3, [r3, #20]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d102      	bne.n	801a9da <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801a9d4:	69bb      	ldr	r3, [r7, #24]
 801a9d6:	2201      	movs	r2, #1
 801a9d8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801a9da:	69bb      	ldr	r3, [r7, #24]
 801a9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a9e2:	d01d      	beq.n	801aa20 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a9e4:	69bb      	ldr	r3, [r7, #24]
 801a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9e8:	331e      	adds	r3, #30
 801a9ea:	4a48      	ldr	r2, [pc, #288]	; (801ab0c <dhcp_bind+0x1b0>)
 801a9ec:	fba2 2303 	umull	r2, r3, r2, r3
 801a9f0:	095b      	lsrs	r3, r3, #5
 801a9f2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a9f4:	69fb      	ldr	r3, [r7, #28]
 801a9f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a9fa:	d302      	bcc.n	801aa02 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801a9fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa00:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801aa02:	69fb      	ldr	r3, [r7, #28]
 801aa04:	b29a      	uxth	r2, r3
 801aa06:	69bb      	ldr	r3, [r7, #24]
 801aa08:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801aa0a:	69bb      	ldr	r3, [r7, #24]
 801aa0c:	895b      	ldrh	r3, [r3, #10]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d102      	bne.n	801aa18 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801aa12:	69bb      	ldr	r3, [r7, #24]
 801aa14:	2201      	movs	r2, #1
 801aa16:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801aa18:	69bb      	ldr	r3, [r7, #24]
 801aa1a:	895a      	ldrh	r2, [r3, #10]
 801aa1c:	69bb      	ldr	r3, [r7, #24]
 801aa1e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801aa20:	69bb      	ldr	r3, [r7, #24]
 801aa22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801aa28:	d01d      	beq.n	801aa66 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801aa2a:	69bb      	ldr	r3, [r7, #24]
 801aa2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa2e:	331e      	adds	r3, #30
 801aa30:	4a36      	ldr	r2, [pc, #216]	; (801ab0c <dhcp_bind+0x1b0>)
 801aa32:	fba2 2303 	umull	r2, r3, r2, r3
 801aa36:	095b      	lsrs	r3, r3, #5
 801aa38:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801aa3a:	69fb      	ldr	r3, [r7, #28]
 801aa3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aa40:	d302      	bcc.n	801aa48 <dhcp_bind+0xec>
      timeout = 0xffff;
 801aa42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa46:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801aa48:	69fb      	ldr	r3, [r7, #28]
 801aa4a:	b29a      	uxth	r2, r3
 801aa4c:	69bb      	ldr	r3, [r7, #24]
 801aa4e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801aa50:	69bb      	ldr	r3, [r7, #24]
 801aa52:	899b      	ldrh	r3, [r3, #12]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d102      	bne.n	801aa5e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801aa58:	69bb      	ldr	r3, [r7, #24]
 801aa5a:	2201      	movs	r2, #1
 801aa5c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801aa5e:	69bb      	ldr	r3, [r7, #24]
 801aa60:	899a      	ldrh	r2, [r3, #12]
 801aa62:	69bb      	ldr	r3, [r7, #24]
 801aa64:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801aa66:	69bb      	ldr	r3, [r7, #24]
 801aa68:	895a      	ldrh	r2, [r3, #10]
 801aa6a:	69bb      	ldr	r3, [r7, #24]
 801aa6c:	899b      	ldrh	r3, [r3, #12]
 801aa6e:	429a      	cmp	r2, r3
 801aa70:	d306      	bcc.n	801aa80 <dhcp_bind+0x124>
 801aa72:	69bb      	ldr	r3, [r7, #24]
 801aa74:	899b      	ldrh	r3, [r3, #12]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d002      	beq.n	801aa80 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801aa7a:	69bb      	ldr	r3, [r7, #24]
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801aa80:	69bb      	ldr	r3, [r7, #24]
 801aa82:	79db      	ldrb	r3, [r3, #7]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d003      	beq.n	801aa90 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801aa88:	69bb      	ldr	r3, [r7, #24]
 801aa8a:	6a1b      	ldr	r3, [r3, #32]
 801aa8c:	613b      	str	r3, [r7, #16]
 801aa8e:	e014      	b.n	801aaba <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801aa90:	69bb      	ldr	r3, [r7, #24]
 801aa92:	331c      	adds	r3, #28
 801aa94:	781b      	ldrb	r3, [r3, #0]
 801aa96:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801aa98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	db02      	blt.n	801aaa6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801aaa0:	23ff      	movs	r3, #255	; 0xff
 801aaa2:	613b      	str	r3, [r7, #16]
 801aaa4:	e009      	b.n	801aaba <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801aaa6:	7dfb      	ldrb	r3, [r7, #23]
 801aaa8:	2bbf      	cmp	r3, #191	; 0xbf
 801aaaa:	d903      	bls.n	801aab4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801aaac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801aab0:	613b      	str	r3, [r7, #16]
 801aab2:	e002      	b.n	801aaba <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801aab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aab8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801aaba:	69bb      	ldr	r3, [r7, #24]
 801aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aabe:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801aac0:	68fb      	ldr	r3, [r7, #12]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d108      	bne.n	801aad8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801aac6:	69bb      	ldr	r3, [r7, #24]
 801aac8:	69da      	ldr	r2, [r3, #28]
 801aaca:	693b      	ldr	r3, [r7, #16]
 801aacc:	4013      	ands	r3, r2
 801aace:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801aad6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801aad8:	210a      	movs	r1, #10
 801aada:	69b8      	ldr	r0, [r7, #24]
 801aadc:	f000 faa0 	bl	801b020 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801aae0:	69bb      	ldr	r3, [r7, #24]
 801aae2:	f103 011c 	add.w	r1, r3, #28
 801aae6:	f107 030c 	add.w	r3, r7, #12
 801aaea:	f107 0210 	add.w	r2, r7, #16
 801aaee:	6878      	ldr	r0, [r7, #4]
 801aaf0:	f7f7 face 	bl	8012090 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801aaf4:	3720      	adds	r7, #32
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	bd80      	pop	{r7, pc}
 801aafa:	bf00      	nop
 801aafc:	08024600 	.word	0x08024600
 801ab00:	08024760 	.word	0x08024760
 801ab04:	08024660 	.word	0x08024660
 801ab08:	0802477c 	.word	0x0802477c
 801ab0c:	88888889 	.word	0x88888889

0801ab10 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801ab10:	b580      	push	{r7, lr}
 801ab12:	b08a      	sub	sp, #40	; 0x28
 801ab14:	af02      	add	r7, sp, #8
 801ab16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab1c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801ab1e:	2105      	movs	r1, #5
 801ab20:	69b8      	ldr	r0, [r7, #24]
 801ab22:	f000 fa7d 	bl	801b020 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ab26:	f107 030c 	add.w	r3, r7, #12
 801ab2a:	2203      	movs	r2, #3
 801ab2c:	69b9      	ldr	r1, [r7, #24]
 801ab2e:	6878      	ldr	r0, [r7, #4]
 801ab30:	f000 ff02 	bl	801b938 <dhcp_create_msg>
 801ab34:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ab36:	697b      	ldr	r3, [r7, #20]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d04e      	beq.n	801abda <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ab3c:	697b      	ldr	r3, [r7, #20]
 801ab3e:	685b      	ldr	r3, [r3, #4]
 801ab40:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ab42:	89b8      	ldrh	r0, [r7, #12]
 801ab44:	693b      	ldr	r3, [r7, #16]
 801ab46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab4a:	2302      	movs	r3, #2
 801ab4c:	2239      	movs	r2, #57	; 0x39
 801ab4e:	f000 fa81 	bl	801b054 <dhcp_option>
 801ab52:	4603      	mov	r3, r0
 801ab54:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ab56:	89b8      	ldrh	r0, [r7, #12]
 801ab58:	693b      	ldr	r3, [r7, #16]
 801ab5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ab62:	461a      	mov	r2, r3
 801ab64:	f000 fad0 	bl	801b108 <dhcp_option_short>
 801ab68:	4603      	mov	r3, r0
 801ab6a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ab6c:	89b8      	ldrh	r0, [r7, #12]
 801ab6e:	693b      	ldr	r3, [r7, #16]
 801ab70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab74:	2303      	movs	r3, #3
 801ab76:	2237      	movs	r2, #55	; 0x37
 801ab78:	f000 fa6c 	bl	801b054 <dhcp_option>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ab80:	2300      	movs	r3, #0
 801ab82:	77bb      	strb	r3, [r7, #30]
 801ab84:	e00e      	b.n	801aba4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ab86:	89b8      	ldrh	r0, [r7, #12]
 801ab88:	693b      	ldr	r3, [r7, #16]
 801ab8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab8e:	7fbb      	ldrb	r3, [r7, #30]
 801ab90:	4a2a      	ldr	r2, [pc, #168]	; (801ac3c <dhcp_renew+0x12c>)
 801ab92:	5cd3      	ldrb	r3, [r2, r3]
 801ab94:	461a      	mov	r2, r3
 801ab96:	f000 fa91 	bl	801b0bc <dhcp_option_byte>
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ab9e:	7fbb      	ldrb	r3, [r7, #30]
 801aba0:	3301      	adds	r3, #1
 801aba2:	77bb      	strb	r3, [r7, #30]
 801aba4:	7fbb      	ldrb	r3, [r7, #30]
 801aba6:	2b02      	cmp	r3, #2
 801aba8:	d9ed      	bls.n	801ab86 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801abaa:	89b8      	ldrh	r0, [r7, #12]
 801abac:	693b      	ldr	r3, [r7, #16]
 801abae:	33f0      	adds	r3, #240	; 0xf0
 801abb0:	697a      	ldr	r2, [r7, #20]
 801abb2:	4619      	mov	r1, r3
 801abb4:	f000 ff96 	bl	801bae4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801abb8:	4b21      	ldr	r3, [pc, #132]	; (801ac40 <dhcp_renew+0x130>)
 801abba:	6818      	ldr	r0, [r3, #0]
 801abbc:	69bb      	ldr	r3, [r7, #24]
 801abbe:	f103 0218 	add.w	r2, r3, #24
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	9300      	str	r3, [sp, #0]
 801abc6:	2343      	movs	r3, #67	; 0x43
 801abc8:	6979      	ldr	r1, [r7, #20]
 801abca:	f7fe fe2d 	bl	8019828 <udp_sendto_if>
 801abce:	4603      	mov	r3, r0
 801abd0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801abd2:	6978      	ldr	r0, [r7, #20]
 801abd4:	f7f7 ffa2 	bl	8012b1c <pbuf_free>
 801abd8:	e001      	b.n	801abde <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801abda:	23ff      	movs	r3, #255	; 0xff
 801abdc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801abde:	69bb      	ldr	r3, [r7, #24]
 801abe0:	799b      	ldrb	r3, [r3, #6]
 801abe2:	2bff      	cmp	r3, #255	; 0xff
 801abe4:	d005      	beq.n	801abf2 <dhcp_renew+0xe2>
    dhcp->tries++;
 801abe6:	69bb      	ldr	r3, [r7, #24]
 801abe8:	799b      	ldrb	r3, [r3, #6]
 801abea:	3301      	adds	r3, #1
 801abec:	b2da      	uxtb	r2, r3
 801abee:	69bb      	ldr	r3, [r7, #24]
 801abf0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801abf2:	69bb      	ldr	r3, [r7, #24]
 801abf4:	799b      	ldrb	r3, [r3, #6]
 801abf6:	2b09      	cmp	r3, #9
 801abf8:	d80a      	bhi.n	801ac10 <dhcp_renew+0x100>
 801abfa:	69bb      	ldr	r3, [r7, #24]
 801abfc:	799b      	ldrb	r3, [r3, #6]
 801abfe:	b29b      	uxth	r3, r3
 801ac00:	461a      	mov	r2, r3
 801ac02:	0152      	lsls	r2, r2, #5
 801ac04:	1ad2      	subs	r2, r2, r3
 801ac06:	0092      	lsls	r2, r2, #2
 801ac08:	4413      	add	r3, r2
 801ac0a:	011b      	lsls	r3, r3, #4
 801ac0c:	b29b      	uxth	r3, r3
 801ac0e:	e001      	b.n	801ac14 <dhcp_renew+0x104>
 801ac10:	f644 6320 	movw	r3, #20000	; 0x4e20
 801ac14:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ac16:	89fb      	ldrh	r3, [r7, #14]
 801ac18:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ac1c:	4a09      	ldr	r2, [pc, #36]	; (801ac44 <dhcp_renew+0x134>)
 801ac1e:	fb82 1203 	smull	r1, r2, r2, r3
 801ac22:	1152      	asrs	r2, r2, #5
 801ac24:	17db      	asrs	r3, r3, #31
 801ac26:	1ad3      	subs	r3, r2, r3
 801ac28:	b29a      	uxth	r2, r3
 801ac2a:	69bb      	ldr	r3, [r7, #24]
 801ac2c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ac2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ac32:	4618      	mov	r0, r3
 801ac34:	3720      	adds	r7, #32
 801ac36:	46bd      	mov	sp, r7
 801ac38:	bd80      	pop	{r7, pc}
 801ac3a:	bf00      	nop
 801ac3c:	20000030 	.word	0x20000030
 801ac40:	20010250 	.word	0x20010250
 801ac44:	10624dd3 	.word	0x10624dd3

0801ac48 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b08a      	sub	sp, #40	; 0x28
 801ac4c:	af02      	add	r7, sp, #8
 801ac4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac54:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801ac56:	2104      	movs	r1, #4
 801ac58:	69b8      	ldr	r0, [r7, #24]
 801ac5a:	f000 f9e1 	bl	801b020 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ac5e:	f107 030c 	add.w	r3, r7, #12
 801ac62:	2203      	movs	r2, #3
 801ac64:	69b9      	ldr	r1, [r7, #24]
 801ac66:	6878      	ldr	r0, [r7, #4]
 801ac68:	f000 fe66 	bl	801b938 <dhcp_create_msg>
 801ac6c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ac6e:	697b      	ldr	r3, [r7, #20]
 801ac70:	2b00      	cmp	r3, #0
 801ac72:	d04c      	beq.n	801ad0e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ac74:	697b      	ldr	r3, [r7, #20]
 801ac76:	685b      	ldr	r3, [r3, #4]
 801ac78:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ac7a:	89b8      	ldrh	r0, [r7, #12]
 801ac7c:	693b      	ldr	r3, [r7, #16]
 801ac7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ac82:	2302      	movs	r3, #2
 801ac84:	2239      	movs	r2, #57	; 0x39
 801ac86:	f000 f9e5 	bl	801b054 <dhcp_option>
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ac8e:	89b8      	ldrh	r0, [r7, #12]
 801ac90:	693b      	ldr	r3, [r7, #16]
 801ac92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ac9a:	461a      	mov	r2, r3
 801ac9c:	f000 fa34 	bl	801b108 <dhcp_option_short>
 801aca0:	4603      	mov	r3, r0
 801aca2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801aca4:	89b8      	ldrh	r0, [r7, #12]
 801aca6:	693b      	ldr	r3, [r7, #16]
 801aca8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801acac:	2303      	movs	r3, #3
 801acae:	2237      	movs	r2, #55	; 0x37
 801acb0:	f000 f9d0 	bl	801b054 <dhcp_option>
 801acb4:	4603      	mov	r3, r0
 801acb6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801acb8:	2300      	movs	r3, #0
 801acba:	77bb      	strb	r3, [r7, #30]
 801acbc:	e00e      	b.n	801acdc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801acbe:	89b8      	ldrh	r0, [r7, #12]
 801acc0:	693b      	ldr	r3, [r7, #16]
 801acc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801acc6:	7fbb      	ldrb	r3, [r7, #30]
 801acc8:	4a29      	ldr	r2, [pc, #164]	; (801ad70 <dhcp_rebind+0x128>)
 801acca:	5cd3      	ldrb	r3, [r2, r3]
 801accc:	461a      	mov	r2, r3
 801acce:	f000 f9f5 	bl	801b0bc <dhcp_option_byte>
 801acd2:	4603      	mov	r3, r0
 801acd4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801acd6:	7fbb      	ldrb	r3, [r7, #30]
 801acd8:	3301      	adds	r3, #1
 801acda:	77bb      	strb	r3, [r7, #30]
 801acdc:	7fbb      	ldrb	r3, [r7, #30]
 801acde:	2b02      	cmp	r3, #2
 801ace0:	d9ed      	bls.n	801acbe <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ace2:	89b8      	ldrh	r0, [r7, #12]
 801ace4:	693b      	ldr	r3, [r7, #16]
 801ace6:	33f0      	adds	r3, #240	; 0xf0
 801ace8:	697a      	ldr	r2, [r7, #20]
 801acea:	4619      	mov	r1, r3
 801acec:	f000 fefa 	bl	801bae4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801acf0:	4b20      	ldr	r3, [pc, #128]	; (801ad74 <dhcp_rebind+0x12c>)
 801acf2:	6818      	ldr	r0, [r3, #0]
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	9300      	str	r3, [sp, #0]
 801acf8:	2343      	movs	r3, #67	; 0x43
 801acfa:	4a1f      	ldr	r2, [pc, #124]	; (801ad78 <dhcp_rebind+0x130>)
 801acfc:	6979      	ldr	r1, [r7, #20]
 801acfe:	f7fe fd93 	bl	8019828 <udp_sendto_if>
 801ad02:	4603      	mov	r3, r0
 801ad04:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ad06:	6978      	ldr	r0, [r7, #20]
 801ad08:	f7f7 ff08 	bl	8012b1c <pbuf_free>
 801ad0c:	e001      	b.n	801ad12 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ad0e:	23ff      	movs	r3, #255	; 0xff
 801ad10:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ad12:	69bb      	ldr	r3, [r7, #24]
 801ad14:	799b      	ldrb	r3, [r3, #6]
 801ad16:	2bff      	cmp	r3, #255	; 0xff
 801ad18:	d005      	beq.n	801ad26 <dhcp_rebind+0xde>
    dhcp->tries++;
 801ad1a:	69bb      	ldr	r3, [r7, #24]
 801ad1c:	799b      	ldrb	r3, [r3, #6]
 801ad1e:	3301      	adds	r3, #1
 801ad20:	b2da      	uxtb	r2, r3
 801ad22:	69bb      	ldr	r3, [r7, #24]
 801ad24:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801ad26:	69bb      	ldr	r3, [r7, #24]
 801ad28:	799b      	ldrb	r3, [r3, #6]
 801ad2a:	2b09      	cmp	r3, #9
 801ad2c:	d80a      	bhi.n	801ad44 <dhcp_rebind+0xfc>
 801ad2e:	69bb      	ldr	r3, [r7, #24]
 801ad30:	799b      	ldrb	r3, [r3, #6]
 801ad32:	b29b      	uxth	r3, r3
 801ad34:	461a      	mov	r2, r3
 801ad36:	0152      	lsls	r2, r2, #5
 801ad38:	1ad2      	subs	r2, r2, r3
 801ad3a:	0092      	lsls	r2, r2, #2
 801ad3c:	4413      	add	r3, r2
 801ad3e:	00db      	lsls	r3, r3, #3
 801ad40:	b29b      	uxth	r3, r3
 801ad42:	e001      	b.n	801ad48 <dhcp_rebind+0x100>
 801ad44:	f242 7310 	movw	r3, #10000	; 0x2710
 801ad48:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ad4a:	89fb      	ldrh	r3, [r7, #14]
 801ad4c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ad50:	4a0a      	ldr	r2, [pc, #40]	; (801ad7c <dhcp_rebind+0x134>)
 801ad52:	fb82 1203 	smull	r1, r2, r2, r3
 801ad56:	1152      	asrs	r2, r2, #5
 801ad58:	17db      	asrs	r3, r3, #31
 801ad5a:	1ad3      	subs	r3, r2, r3
 801ad5c:	b29a      	uxth	r2, r3
 801ad5e:	69bb      	ldr	r3, [r7, #24]
 801ad60:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ad62:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ad66:	4618      	mov	r0, r3
 801ad68:	3720      	adds	r7, #32
 801ad6a:	46bd      	mov	sp, r7
 801ad6c:	bd80      	pop	{r7, pc}
 801ad6e:	bf00      	nop
 801ad70:	20000030 	.word	0x20000030
 801ad74:	20010250 	.word	0x20010250
 801ad78:	0802529c 	.word	0x0802529c
 801ad7c:	10624dd3 	.word	0x10624dd3

0801ad80 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801ad80:	b5b0      	push	{r4, r5, r7, lr}
 801ad82:	b08a      	sub	sp, #40	; 0x28
 801ad84:	af02      	add	r7, sp, #8
 801ad86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad8c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801ad8e:	2103      	movs	r1, #3
 801ad90:	69b8      	ldr	r0, [r7, #24]
 801ad92:	f000 f945 	bl	801b020 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ad96:	f107 030c 	add.w	r3, r7, #12
 801ad9a:	2203      	movs	r2, #3
 801ad9c:	69b9      	ldr	r1, [r7, #24]
 801ad9e:	6878      	ldr	r0, [r7, #4]
 801ada0:	f000 fdca 	bl	801b938 <dhcp_create_msg>
 801ada4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ada6:	697b      	ldr	r3, [r7, #20]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d066      	beq.n	801ae7a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801adac:	697b      	ldr	r3, [r7, #20]
 801adae:	685b      	ldr	r3, [r3, #4]
 801adb0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801adb2:	89b8      	ldrh	r0, [r7, #12]
 801adb4:	693b      	ldr	r3, [r7, #16]
 801adb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801adba:	2302      	movs	r3, #2
 801adbc:	2239      	movs	r2, #57	; 0x39
 801adbe:	f000 f949 	bl	801b054 <dhcp_option>
 801adc2:	4603      	mov	r3, r0
 801adc4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801adc6:	89b8      	ldrh	r0, [r7, #12]
 801adc8:	693b      	ldr	r3, [r7, #16]
 801adca:	33f0      	adds	r3, #240	; 0xf0
 801adcc:	f44f 7210 	mov.w	r2, #576	; 0x240
 801add0:	4619      	mov	r1, r3
 801add2:	f000 f999 	bl	801b108 <dhcp_option_short>
 801add6:	4603      	mov	r3, r0
 801add8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801adda:	89b8      	ldrh	r0, [r7, #12]
 801addc:	693b      	ldr	r3, [r7, #16]
 801adde:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ade2:	2304      	movs	r3, #4
 801ade4:	2232      	movs	r2, #50	; 0x32
 801ade6:	f000 f935 	bl	801b054 <dhcp_option>
 801adea:	4603      	mov	r3, r0
 801adec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801adee:	89bc      	ldrh	r4, [r7, #12]
 801adf0:	693b      	ldr	r3, [r7, #16]
 801adf2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801adf6:	69bb      	ldr	r3, [r7, #24]
 801adf8:	69db      	ldr	r3, [r3, #28]
 801adfa:	4618      	mov	r0, r3
 801adfc:	f7f6 fa6d 	bl	80112da <lwip_htonl>
 801ae00:	4603      	mov	r3, r0
 801ae02:	461a      	mov	r2, r3
 801ae04:	4629      	mov	r1, r5
 801ae06:	4620      	mov	r0, r4
 801ae08:	f000 f9b0 	bl	801b16c <dhcp_option_long>
 801ae0c:	4603      	mov	r3, r0
 801ae0e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ae10:	89b8      	ldrh	r0, [r7, #12]
 801ae12:	693b      	ldr	r3, [r7, #16]
 801ae14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ae18:	2303      	movs	r3, #3
 801ae1a:	2237      	movs	r2, #55	; 0x37
 801ae1c:	f000 f91a 	bl	801b054 <dhcp_option>
 801ae20:	4603      	mov	r3, r0
 801ae22:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ae24:	2300      	movs	r3, #0
 801ae26:	77bb      	strb	r3, [r7, #30]
 801ae28:	e00e      	b.n	801ae48 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ae2a:	89b8      	ldrh	r0, [r7, #12]
 801ae2c:	693b      	ldr	r3, [r7, #16]
 801ae2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ae32:	7fbb      	ldrb	r3, [r7, #30]
 801ae34:	4a29      	ldr	r2, [pc, #164]	; (801aedc <dhcp_reboot+0x15c>)
 801ae36:	5cd3      	ldrb	r3, [r2, r3]
 801ae38:	461a      	mov	r2, r3
 801ae3a:	f000 f93f 	bl	801b0bc <dhcp_option_byte>
 801ae3e:	4603      	mov	r3, r0
 801ae40:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ae42:	7fbb      	ldrb	r3, [r7, #30]
 801ae44:	3301      	adds	r3, #1
 801ae46:	77bb      	strb	r3, [r7, #30]
 801ae48:	7fbb      	ldrb	r3, [r7, #30]
 801ae4a:	2b02      	cmp	r3, #2
 801ae4c:	d9ed      	bls.n	801ae2a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ae4e:	89b8      	ldrh	r0, [r7, #12]
 801ae50:	693b      	ldr	r3, [r7, #16]
 801ae52:	33f0      	adds	r3, #240	; 0xf0
 801ae54:	697a      	ldr	r2, [r7, #20]
 801ae56:	4619      	mov	r1, r3
 801ae58:	f000 fe44 	bl	801bae4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ae5c:	4b20      	ldr	r3, [pc, #128]	; (801aee0 <dhcp_reboot+0x160>)
 801ae5e:	6818      	ldr	r0, [r3, #0]
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	9300      	str	r3, [sp, #0]
 801ae64:	2343      	movs	r3, #67	; 0x43
 801ae66:	4a1f      	ldr	r2, [pc, #124]	; (801aee4 <dhcp_reboot+0x164>)
 801ae68:	6979      	ldr	r1, [r7, #20]
 801ae6a:	f7fe fcdd 	bl	8019828 <udp_sendto_if>
 801ae6e:	4603      	mov	r3, r0
 801ae70:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ae72:	6978      	ldr	r0, [r7, #20]
 801ae74:	f7f7 fe52 	bl	8012b1c <pbuf_free>
 801ae78:	e001      	b.n	801ae7e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ae7a:	23ff      	movs	r3, #255	; 0xff
 801ae7c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ae7e:	69bb      	ldr	r3, [r7, #24]
 801ae80:	799b      	ldrb	r3, [r3, #6]
 801ae82:	2bff      	cmp	r3, #255	; 0xff
 801ae84:	d005      	beq.n	801ae92 <dhcp_reboot+0x112>
    dhcp->tries++;
 801ae86:	69bb      	ldr	r3, [r7, #24]
 801ae88:	799b      	ldrb	r3, [r3, #6]
 801ae8a:	3301      	adds	r3, #1
 801ae8c:	b2da      	uxtb	r2, r3
 801ae8e:	69bb      	ldr	r3, [r7, #24]
 801ae90:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801ae92:	69bb      	ldr	r3, [r7, #24]
 801ae94:	799b      	ldrb	r3, [r3, #6]
 801ae96:	2b09      	cmp	r3, #9
 801ae98:	d80a      	bhi.n	801aeb0 <dhcp_reboot+0x130>
 801ae9a:	69bb      	ldr	r3, [r7, #24]
 801ae9c:	799b      	ldrb	r3, [r3, #6]
 801ae9e:	b29b      	uxth	r3, r3
 801aea0:	461a      	mov	r2, r3
 801aea2:	0152      	lsls	r2, r2, #5
 801aea4:	1ad2      	subs	r2, r2, r3
 801aea6:	0092      	lsls	r2, r2, #2
 801aea8:	4413      	add	r3, r2
 801aeaa:	00db      	lsls	r3, r3, #3
 801aeac:	b29b      	uxth	r3, r3
 801aeae:	e001      	b.n	801aeb4 <dhcp_reboot+0x134>
 801aeb0:	f242 7310 	movw	r3, #10000	; 0x2710
 801aeb4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801aeb6:	89fb      	ldrh	r3, [r7, #14]
 801aeb8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801aebc:	4a0a      	ldr	r2, [pc, #40]	; (801aee8 <dhcp_reboot+0x168>)
 801aebe:	fb82 1203 	smull	r1, r2, r2, r3
 801aec2:	1152      	asrs	r2, r2, #5
 801aec4:	17db      	asrs	r3, r3, #31
 801aec6:	1ad3      	subs	r3, r2, r3
 801aec8:	b29a      	uxth	r2, r3
 801aeca:	69bb      	ldr	r3, [r7, #24]
 801aecc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801aece:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801aed2:	4618      	mov	r0, r3
 801aed4:	3720      	adds	r7, #32
 801aed6:	46bd      	mov	sp, r7
 801aed8:	bdb0      	pop	{r4, r5, r7, pc}
 801aeda:	bf00      	nop
 801aedc:	20000030 	.word	0x20000030
 801aee0:	20010250 	.word	0x20010250
 801aee4:	0802529c 	.word	0x0802529c
 801aee8:	10624dd3 	.word	0x10624dd3

0801aeec <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801aeec:	b5b0      	push	{r4, r5, r7, lr}
 801aeee:	b08a      	sub	sp, #40	; 0x28
 801aef0:	af02      	add	r7, sp, #8
 801aef2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aef8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801aefa:	69fb      	ldr	r3, [r7, #28]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	f000 8084 	beq.w	801b00a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801af02:	69fb      	ldr	r3, [r7, #28]
 801af04:	795b      	ldrb	r3, [r3, #5]
 801af06:	2b00      	cmp	r3, #0
 801af08:	f000 8081 	beq.w	801b00e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801af0c:	69fb      	ldr	r3, [r7, #28]
 801af0e:	699b      	ldr	r3, [r3, #24]
 801af10:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801af12:	69fb      	ldr	r3, [r7, #28]
 801af14:	2200      	movs	r2, #0
 801af16:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801af18:	69fb      	ldr	r3, [r7, #28]
 801af1a:	2200      	movs	r2, #0
 801af1c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801af1e:	69fb      	ldr	r3, [r7, #28]
 801af20:	2200      	movs	r2, #0
 801af22:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801af24:	69fb      	ldr	r3, [r7, #28]
 801af26:	2200      	movs	r2, #0
 801af28:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801af2a:	69fb      	ldr	r3, [r7, #28]
 801af2c:	2200      	movs	r2, #0
 801af2e:	631a      	str	r2, [r3, #48]	; 0x30
 801af30:	69fb      	ldr	r3, [r7, #28]
 801af32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801af34:	69fb      	ldr	r3, [r7, #28]
 801af36:	62da      	str	r2, [r3, #44]	; 0x2c
 801af38:	69fb      	ldr	r3, [r7, #28]
 801af3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af3c:	69fb      	ldr	r3, [r7, #28]
 801af3e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801af40:	69fb      	ldr	r3, [r7, #28]
 801af42:	2200      	movs	r2, #0
 801af44:	829a      	strh	r2, [r3, #20]
 801af46:	69fb      	ldr	r3, [r7, #28]
 801af48:	8a9a      	ldrh	r2, [r3, #20]
 801af4a:	69fb      	ldr	r3, [r7, #28]
 801af4c:	825a      	strh	r2, [r3, #18]
 801af4e:	69fb      	ldr	r3, [r7, #28]
 801af50:	8a5a      	ldrh	r2, [r3, #18]
 801af52:	69fb      	ldr	r3, [r7, #28]
 801af54:	821a      	strh	r2, [r3, #16]
 801af56:	69fb      	ldr	r3, [r7, #28]
 801af58:	8a1a      	ldrh	r2, [r3, #16]
 801af5a:	69fb      	ldr	r3, [r7, #28]
 801af5c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801af5e:	6878      	ldr	r0, [r7, #4]
 801af60:	f000 fdee 	bl	801bb40 <dhcp_supplied_address>
 801af64:	4603      	mov	r3, r0
 801af66:	2b00      	cmp	r3, #0
 801af68:	d03b      	beq.n	801afe2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801af6a:	f107 030e 	add.w	r3, r7, #14
 801af6e:	2207      	movs	r2, #7
 801af70:	69f9      	ldr	r1, [r7, #28]
 801af72:	6878      	ldr	r0, [r7, #4]
 801af74:	f000 fce0 	bl	801b938 <dhcp_create_msg>
 801af78:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801af7a:	69bb      	ldr	r3, [r7, #24]
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d030      	beq.n	801afe2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801af80:	69bb      	ldr	r3, [r7, #24]
 801af82:	685b      	ldr	r3, [r3, #4]
 801af84:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801af86:	89f8      	ldrh	r0, [r7, #14]
 801af88:	697b      	ldr	r3, [r7, #20]
 801af8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801af8e:	2304      	movs	r3, #4
 801af90:	2236      	movs	r2, #54	; 0x36
 801af92:	f000 f85f 	bl	801b054 <dhcp_option>
 801af96:	4603      	mov	r3, r0
 801af98:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801af9a:	89fc      	ldrh	r4, [r7, #14]
 801af9c:	697b      	ldr	r3, [r7, #20]
 801af9e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801afa2:	693b      	ldr	r3, [r7, #16]
 801afa4:	4618      	mov	r0, r3
 801afa6:	f7f6 f998 	bl	80112da <lwip_htonl>
 801afaa:	4603      	mov	r3, r0
 801afac:	461a      	mov	r2, r3
 801afae:	4629      	mov	r1, r5
 801afb0:	4620      	mov	r0, r4
 801afb2:	f000 f8db 	bl	801b16c <dhcp_option_long>
 801afb6:	4603      	mov	r3, r0
 801afb8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801afba:	89f8      	ldrh	r0, [r7, #14]
 801afbc:	697b      	ldr	r3, [r7, #20]
 801afbe:	33f0      	adds	r3, #240	; 0xf0
 801afc0:	69ba      	ldr	r2, [r7, #24]
 801afc2:	4619      	mov	r1, r3
 801afc4:	f000 fd8e 	bl	801bae4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801afc8:	4b13      	ldr	r3, [pc, #76]	; (801b018 <dhcp_release_and_stop+0x12c>)
 801afca:	6818      	ldr	r0, [r3, #0]
 801afcc:	f107 0210 	add.w	r2, r7, #16
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	9300      	str	r3, [sp, #0]
 801afd4:	2343      	movs	r3, #67	; 0x43
 801afd6:	69b9      	ldr	r1, [r7, #24]
 801afd8:	f7fe fc26 	bl	8019828 <udp_sendto_if>
      pbuf_free(p_out);
 801afdc:	69b8      	ldr	r0, [r7, #24]
 801afde:	f7f7 fd9d 	bl	8012b1c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801afe2:	4b0e      	ldr	r3, [pc, #56]	; (801b01c <dhcp_release_and_stop+0x130>)
 801afe4:	4a0d      	ldr	r2, [pc, #52]	; (801b01c <dhcp_release_and_stop+0x130>)
 801afe6:	490d      	ldr	r1, [pc, #52]	; (801b01c <dhcp_release_and_stop+0x130>)
 801afe8:	6878      	ldr	r0, [r7, #4]
 801afea:	f7f7 f851 	bl	8012090 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801afee:	2100      	movs	r1, #0
 801aff0:	69f8      	ldr	r0, [r7, #28]
 801aff2:	f000 f815 	bl	801b020 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801aff6:	69fb      	ldr	r3, [r7, #28]
 801aff8:	791b      	ldrb	r3, [r3, #4]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d008      	beq.n	801b010 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801affe:	f7fe ff85 	bl	8019f0c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801b002:	69fb      	ldr	r3, [r7, #28]
 801b004:	2200      	movs	r2, #0
 801b006:	711a      	strb	r2, [r3, #4]
 801b008:	e002      	b.n	801b010 <dhcp_release_and_stop+0x124>
    return;
 801b00a:	bf00      	nop
 801b00c:	e000      	b.n	801b010 <dhcp_release_and_stop+0x124>
    return;
 801b00e:	bf00      	nop
  }
}
 801b010:	3720      	adds	r7, #32
 801b012:	46bd      	mov	sp, r7
 801b014:	bdb0      	pop	{r4, r5, r7, pc}
 801b016:	bf00      	nop
 801b018:	20010250 	.word	0x20010250
 801b01c:	08025298 	.word	0x08025298

0801b020 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801b020:	b480      	push	{r7}
 801b022:	b083      	sub	sp, #12
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
 801b028:	460b      	mov	r3, r1
 801b02a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	795b      	ldrb	r3, [r3, #5]
 801b030:	78fa      	ldrb	r2, [r7, #3]
 801b032:	429a      	cmp	r2, r3
 801b034:	d008      	beq.n	801b048 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	78fa      	ldrb	r2, [r7, #3]
 801b03a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	2200      	movs	r2, #0
 801b040:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	2200      	movs	r2, #0
 801b046:	811a      	strh	r2, [r3, #8]
  }
}
 801b048:	bf00      	nop
 801b04a:	370c      	adds	r7, #12
 801b04c:	46bd      	mov	sp, r7
 801b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b052:	4770      	bx	lr

0801b054 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801b054:	b580      	push	{r7, lr}
 801b056:	b082      	sub	sp, #8
 801b058:	af00      	add	r7, sp, #0
 801b05a:	6039      	str	r1, [r7, #0]
 801b05c:	4611      	mov	r1, r2
 801b05e:	461a      	mov	r2, r3
 801b060:	4603      	mov	r3, r0
 801b062:	80fb      	strh	r3, [r7, #6]
 801b064:	460b      	mov	r3, r1
 801b066:	717b      	strb	r3, [r7, #5]
 801b068:	4613      	mov	r3, r2
 801b06a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801b06c:	88fa      	ldrh	r2, [r7, #6]
 801b06e:	793b      	ldrb	r3, [r7, #4]
 801b070:	4413      	add	r3, r2
 801b072:	3302      	adds	r3, #2
 801b074:	2b44      	cmp	r3, #68	; 0x44
 801b076:	d906      	bls.n	801b086 <dhcp_option+0x32>
 801b078:	4b0d      	ldr	r3, [pc, #52]	; (801b0b0 <dhcp_option+0x5c>)
 801b07a:	f240 529a 	movw	r2, #1434	; 0x59a
 801b07e:	490d      	ldr	r1, [pc, #52]	; (801b0b4 <dhcp_option+0x60>)
 801b080:	480d      	ldr	r0, [pc, #52]	; (801b0b8 <dhcp_option+0x64>)
 801b082:	f004 fc1f 	bl	801f8c4 <iprintf>
  options[options_out_len++] = option_type;
 801b086:	88fb      	ldrh	r3, [r7, #6]
 801b088:	1c5a      	adds	r2, r3, #1
 801b08a:	80fa      	strh	r2, [r7, #6]
 801b08c:	461a      	mov	r2, r3
 801b08e:	683b      	ldr	r3, [r7, #0]
 801b090:	4413      	add	r3, r2
 801b092:	797a      	ldrb	r2, [r7, #5]
 801b094:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801b096:	88fb      	ldrh	r3, [r7, #6]
 801b098:	1c5a      	adds	r2, r3, #1
 801b09a:	80fa      	strh	r2, [r7, #6]
 801b09c:	461a      	mov	r2, r3
 801b09e:	683b      	ldr	r3, [r7, #0]
 801b0a0:	4413      	add	r3, r2
 801b0a2:	793a      	ldrb	r2, [r7, #4]
 801b0a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b0a6:	88fb      	ldrh	r3, [r7, #6]
}
 801b0a8:	4618      	mov	r0, r3
 801b0aa:	3708      	adds	r7, #8
 801b0ac:	46bd      	mov	sp, r7
 801b0ae:	bd80      	pop	{r7, pc}
 801b0b0:	08024600 	.word	0x08024600
 801b0b4:	08024794 	.word	0x08024794
 801b0b8:	08024660 	.word	0x08024660

0801b0bc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801b0bc:	b580      	push	{r7, lr}
 801b0be:	b082      	sub	sp, #8
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	4603      	mov	r3, r0
 801b0c4:	6039      	str	r1, [r7, #0]
 801b0c6:	80fb      	strh	r3, [r7, #6]
 801b0c8:	4613      	mov	r3, r2
 801b0ca:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801b0cc:	88fb      	ldrh	r3, [r7, #6]
 801b0ce:	2b43      	cmp	r3, #67	; 0x43
 801b0d0:	d906      	bls.n	801b0e0 <dhcp_option_byte+0x24>
 801b0d2:	4b0a      	ldr	r3, [pc, #40]	; (801b0fc <dhcp_option_byte+0x40>)
 801b0d4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801b0d8:	4909      	ldr	r1, [pc, #36]	; (801b100 <dhcp_option_byte+0x44>)
 801b0da:	480a      	ldr	r0, [pc, #40]	; (801b104 <dhcp_option_byte+0x48>)
 801b0dc:	f004 fbf2 	bl	801f8c4 <iprintf>
  options[options_out_len++] = value;
 801b0e0:	88fb      	ldrh	r3, [r7, #6]
 801b0e2:	1c5a      	adds	r2, r3, #1
 801b0e4:	80fa      	strh	r2, [r7, #6]
 801b0e6:	461a      	mov	r2, r3
 801b0e8:	683b      	ldr	r3, [r7, #0]
 801b0ea:	4413      	add	r3, r2
 801b0ec:	797a      	ldrb	r2, [r7, #5]
 801b0ee:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b0f0:	88fb      	ldrh	r3, [r7, #6]
}
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	3708      	adds	r7, #8
 801b0f6:	46bd      	mov	sp, r7
 801b0f8:	bd80      	pop	{r7, pc}
 801b0fa:	bf00      	nop
 801b0fc:	08024600 	.word	0x08024600
 801b100:	080247d8 	.word	0x080247d8
 801b104:	08024660 	.word	0x08024660

0801b108 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b082      	sub	sp, #8
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	4603      	mov	r3, r0
 801b110:	6039      	str	r1, [r7, #0]
 801b112:	80fb      	strh	r3, [r7, #6]
 801b114:	4613      	mov	r3, r2
 801b116:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801b118:	88fb      	ldrh	r3, [r7, #6]
 801b11a:	3302      	adds	r3, #2
 801b11c:	2b44      	cmp	r3, #68	; 0x44
 801b11e:	d906      	bls.n	801b12e <dhcp_option_short+0x26>
 801b120:	4b0f      	ldr	r3, [pc, #60]	; (801b160 <dhcp_option_short+0x58>)
 801b122:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801b126:	490f      	ldr	r1, [pc, #60]	; (801b164 <dhcp_option_short+0x5c>)
 801b128:	480f      	ldr	r0, [pc, #60]	; (801b168 <dhcp_option_short+0x60>)
 801b12a:	f004 fbcb 	bl	801f8c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801b12e:	88bb      	ldrh	r3, [r7, #4]
 801b130:	0a1b      	lsrs	r3, r3, #8
 801b132:	b29a      	uxth	r2, r3
 801b134:	88fb      	ldrh	r3, [r7, #6]
 801b136:	1c59      	adds	r1, r3, #1
 801b138:	80f9      	strh	r1, [r7, #6]
 801b13a:	4619      	mov	r1, r3
 801b13c:	683b      	ldr	r3, [r7, #0]
 801b13e:	440b      	add	r3, r1
 801b140:	b2d2      	uxtb	r2, r2
 801b142:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801b144:	88fb      	ldrh	r3, [r7, #6]
 801b146:	1c5a      	adds	r2, r3, #1
 801b148:	80fa      	strh	r2, [r7, #6]
 801b14a:	461a      	mov	r2, r3
 801b14c:	683b      	ldr	r3, [r7, #0]
 801b14e:	4413      	add	r3, r2
 801b150:	88ba      	ldrh	r2, [r7, #4]
 801b152:	b2d2      	uxtb	r2, r2
 801b154:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b156:	88fb      	ldrh	r3, [r7, #6]
}
 801b158:	4618      	mov	r0, r3
 801b15a:	3708      	adds	r7, #8
 801b15c:	46bd      	mov	sp, r7
 801b15e:	bd80      	pop	{r7, pc}
 801b160:	08024600 	.word	0x08024600
 801b164:	08024810 	.word	0x08024810
 801b168:	08024660 	.word	0x08024660

0801b16c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b084      	sub	sp, #16
 801b170:	af00      	add	r7, sp, #0
 801b172:	4603      	mov	r3, r0
 801b174:	60b9      	str	r1, [r7, #8]
 801b176:	607a      	str	r2, [r7, #4]
 801b178:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801b17a:	89fb      	ldrh	r3, [r7, #14]
 801b17c:	3304      	adds	r3, #4
 801b17e:	2b44      	cmp	r3, #68	; 0x44
 801b180:	d906      	bls.n	801b190 <dhcp_option_long+0x24>
 801b182:	4b19      	ldr	r3, [pc, #100]	; (801b1e8 <dhcp_option_long+0x7c>)
 801b184:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801b188:	4918      	ldr	r1, [pc, #96]	; (801b1ec <dhcp_option_long+0x80>)
 801b18a:	4819      	ldr	r0, [pc, #100]	; (801b1f0 <dhcp_option_long+0x84>)
 801b18c:	f004 fb9a 	bl	801f8c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	0e1a      	lsrs	r2, r3, #24
 801b194:	89fb      	ldrh	r3, [r7, #14]
 801b196:	1c59      	adds	r1, r3, #1
 801b198:	81f9      	strh	r1, [r7, #14]
 801b19a:	4619      	mov	r1, r3
 801b19c:	68bb      	ldr	r3, [r7, #8]
 801b19e:	440b      	add	r3, r1
 801b1a0:	b2d2      	uxtb	r2, r2
 801b1a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	0c1a      	lsrs	r2, r3, #16
 801b1a8:	89fb      	ldrh	r3, [r7, #14]
 801b1aa:	1c59      	adds	r1, r3, #1
 801b1ac:	81f9      	strh	r1, [r7, #14]
 801b1ae:	4619      	mov	r1, r3
 801b1b0:	68bb      	ldr	r3, [r7, #8]
 801b1b2:	440b      	add	r3, r1
 801b1b4:	b2d2      	uxtb	r2, r2
 801b1b6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	0a1a      	lsrs	r2, r3, #8
 801b1bc:	89fb      	ldrh	r3, [r7, #14]
 801b1be:	1c59      	adds	r1, r3, #1
 801b1c0:	81f9      	strh	r1, [r7, #14]
 801b1c2:	4619      	mov	r1, r3
 801b1c4:	68bb      	ldr	r3, [r7, #8]
 801b1c6:	440b      	add	r3, r1
 801b1c8:	b2d2      	uxtb	r2, r2
 801b1ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801b1cc:	89fb      	ldrh	r3, [r7, #14]
 801b1ce:	1c5a      	adds	r2, r3, #1
 801b1d0:	81fa      	strh	r2, [r7, #14]
 801b1d2:	461a      	mov	r2, r3
 801b1d4:	68bb      	ldr	r3, [r7, #8]
 801b1d6:	4413      	add	r3, r2
 801b1d8:	687a      	ldr	r2, [r7, #4]
 801b1da:	b2d2      	uxtb	r2, r2
 801b1dc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b1de:	89fb      	ldrh	r3, [r7, #14]
}
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	3710      	adds	r7, #16
 801b1e4:	46bd      	mov	sp, r7
 801b1e6:	bd80      	pop	{r7, pc}
 801b1e8:	08024600 	.word	0x08024600
 801b1ec:	0802484c 	.word	0x0802484c
 801b1f0:	08024660 	.word	0x08024660

0801b1f4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b090      	sub	sp, #64	; 0x40
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
 801b1fc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801b1fe:	2300      	movs	r3, #0
 801b200:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801b202:	2300      	movs	r3, #0
 801b204:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801b206:	2208      	movs	r2, #8
 801b208:	2100      	movs	r1, #0
 801b20a:	48b5      	ldr	r0, [pc, #724]	; (801b4e0 <dhcp_parse_reply+0x2ec>)
 801b20c:	f004 fcb0 	bl	801fb70 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	895b      	ldrh	r3, [r3, #10]
 801b214:	2b2b      	cmp	r3, #43	; 0x2b
 801b216:	d802      	bhi.n	801b21e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801b218:	f06f 0301 	mvn.w	r3, #1
 801b21c:	e2a7      	b.n	801b76e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	685b      	ldr	r3, [r3, #4]
 801b222:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801b224:	23f0      	movs	r3, #240	; 0xf0
 801b226:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	891b      	ldrh	r3, [r3, #8]
 801b22c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b232:	e00c      	b.n	801b24e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b236:	895b      	ldrh	r3, [r3, #10]
 801b238:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b23a:	1ad3      	subs	r3, r2, r3
 801b23c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b240:	895b      	ldrh	r3, [r3, #10]
 801b242:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801b244:	1ad3      	subs	r3, r2, r3
 801b246:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b250:	2b00      	cmp	r3, #0
 801b252:	d004      	beq.n	801b25e <dhcp_parse_reply+0x6a>
 801b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b256:	895b      	ldrh	r3, [r3, #10]
 801b258:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b25a:	429a      	cmp	r2, r3
 801b25c:	d2ea      	bcs.n	801b234 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b260:	2b00      	cmp	r3, #0
 801b262:	d102      	bne.n	801b26a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801b264:	f06f 0301 	mvn.w	r3, #1
 801b268:	e281      	b.n	801b76e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801b26a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b26c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801b26e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b270:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b274:	685b      	ldr	r3, [r3, #4]
 801b276:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b278:	e239      	b.n	801b6ee <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801b27a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b27c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b27e:	4413      	add	r3, r2
 801b280:	781b      	ldrb	r3, [r3, #0]
 801b282:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801b284:	2300      	movs	r3, #0
 801b286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801b28a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b28e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801b290:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b292:	3302      	adds	r3, #2
 801b294:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801b296:	8bfa      	ldrh	r2, [r7, #30]
 801b298:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b29a:	429a      	cmp	r2, r3
 801b29c:	d202      	bcs.n	801b2a4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801b29e:	f06f 0301 	mvn.w	r3, #1
 801b2a2:	e264      	b.n	801b76e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801b2a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b2a6:	3301      	adds	r3, #1
 801b2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b2aa:	8952      	ldrh	r2, [r2, #10]
 801b2ac:	4293      	cmp	r3, r2
 801b2ae:	da07      	bge.n	801b2c0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801b2b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b2b2:	3301      	adds	r3, #1
 801b2b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b2b6:	4413      	add	r3, r2
 801b2b8:	781b      	ldrb	r3, [r3, #0]
 801b2ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b2be:	e00b      	b.n	801b2d8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801b2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d004      	beq.n	801b2d2 <dhcp_parse_reply+0xde>
 801b2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	685b      	ldr	r3, [r3, #4]
 801b2ce:	781b      	ldrb	r3, [r3, #0]
 801b2d0:	e000      	b.n	801b2d4 <dhcp_parse_reply+0xe0>
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801b2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b2dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801b2e0:	7dfb      	ldrb	r3, [r7, #23]
 801b2e2:	2b3b      	cmp	r3, #59	; 0x3b
 801b2e4:	f200 812c 	bhi.w	801b540 <dhcp_parse_reply+0x34c>
 801b2e8:	a201      	add	r2, pc, #4	; (adr r2, 801b2f0 <dhcp_parse_reply+0xfc>)
 801b2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2ee:	bf00      	nop
 801b2f0:	0801b3e1 	.word	0x0801b3e1
 801b2f4:	0801b3f1 	.word	0x0801b3f1
 801b2f8:	0801b541 	.word	0x0801b541
 801b2fc:	0801b413 	.word	0x0801b413
 801b300:	0801b541 	.word	0x0801b541
 801b304:	0801b541 	.word	0x0801b541
 801b308:	0801b541 	.word	0x0801b541
 801b30c:	0801b541 	.word	0x0801b541
 801b310:	0801b541 	.word	0x0801b541
 801b314:	0801b541 	.word	0x0801b541
 801b318:	0801b541 	.word	0x0801b541
 801b31c:	0801b541 	.word	0x0801b541
 801b320:	0801b541 	.word	0x0801b541
 801b324:	0801b541 	.word	0x0801b541
 801b328:	0801b541 	.word	0x0801b541
 801b32c:	0801b541 	.word	0x0801b541
 801b330:	0801b541 	.word	0x0801b541
 801b334:	0801b541 	.word	0x0801b541
 801b338:	0801b541 	.word	0x0801b541
 801b33c:	0801b541 	.word	0x0801b541
 801b340:	0801b541 	.word	0x0801b541
 801b344:	0801b541 	.word	0x0801b541
 801b348:	0801b541 	.word	0x0801b541
 801b34c:	0801b541 	.word	0x0801b541
 801b350:	0801b541 	.word	0x0801b541
 801b354:	0801b541 	.word	0x0801b541
 801b358:	0801b541 	.word	0x0801b541
 801b35c:	0801b541 	.word	0x0801b541
 801b360:	0801b541 	.word	0x0801b541
 801b364:	0801b541 	.word	0x0801b541
 801b368:	0801b541 	.word	0x0801b541
 801b36c:	0801b541 	.word	0x0801b541
 801b370:	0801b541 	.word	0x0801b541
 801b374:	0801b541 	.word	0x0801b541
 801b378:	0801b541 	.word	0x0801b541
 801b37c:	0801b541 	.word	0x0801b541
 801b380:	0801b541 	.word	0x0801b541
 801b384:	0801b541 	.word	0x0801b541
 801b388:	0801b541 	.word	0x0801b541
 801b38c:	0801b541 	.word	0x0801b541
 801b390:	0801b541 	.word	0x0801b541
 801b394:	0801b541 	.word	0x0801b541
 801b398:	0801b541 	.word	0x0801b541
 801b39c:	0801b541 	.word	0x0801b541
 801b3a0:	0801b541 	.word	0x0801b541
 801b3a4:	0801b541 	.word	0x0801b541
 801b3a8:	0801b541 	.word	0x0801b541
 801b3ac:	0801b541 	.word	0x0801b541
 801b3b0:	0801b541 	.word	0x0801b541
 801b3b4:	0801b541 	.word	0x0801b541
 801b3b8:	0801b541 	.word	0x0801b541
 801b3bc:	0801b43f 	.word	0x0801b43f
 801b3c0:	0801b461 	.word	0x0801b461
 801b3c4:	0801b49d 	.word	0x0801b49d
 801b3c8:	0801b4bf 	.word	0x0801b4bf
 801b3cc:	0801b541 	.word	0x0801b541
 801b3d0:	0801b541 	.word	0x0801b541
 801b3d4:	0801b541 	.word	0x0801b541
 801b3d8:	0801b4fd 	.word	0x0801b4fd
 801b3dc:	0801b51f 	.word	0x0801b51f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b3e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801b3ee:	e0ab      	b.n	801b548 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3f4:	2b04      	cmp	r3, #4
 801b3f6:	d009      	beq.n	801b40c <dhcp_parse_reply+0x218>
 801b3f8:	4b3a      	ldr	r3, [pc, #232]	; (801b4e4 <dhcp_parse_reply+0x2f0>)
 801b3fa:	f240 622e 	movw	r2, #1582	; 0x62e
 801b3fe:	493a      	ldr	r1, [pc, #232]	; (801b4e8 <dhcp_parse_reply+0x2f4>)
 801b400:	483a      	ldr	r0, [pc, #232]	; (801b4ec <dhcp_parse_reply+0x2f8>)
 801b402:	f004 fa5f 	bl	801f8c4 <iprintf>
 801b406:	f06f 0305 	mvn.w	r3, #5
 801b40a:	e1b0      	b.n	801b76e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801b40c:	2306      	movs	r3, #6
 801b40e:	623b      	str	r3, [r7, #32]
        break;
 801b410:	e09a      	b.n	801b548 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801b412:	2304      	movs	r3, #4
 801b414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801b418:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b41c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b420:	429a      	cmp	r2, r3
 801b422:	d209      	bcs.n	801b438 <dhcp_parse_reply+0x244>
 801b424:	4b2f      	ldr	r3, [pc, #188]	; (801b4e4 <dhcp_parse_reply+0x2f0>)
 801b426:	f240 6233 	movw	r2, #1587	; 0x633
 801b42a:	4931      	ldr	r1, [pc, #196]	; (801b4f0 <dhcp_parse_reply+0x2fc>)
 801b42c:	482f      	ldr	r0, [pc, #188]	; (801b4ec <dhcp_parse_reply+0x2f8>)
 801b42e:	f004 fa49 	bl	801f8c4 <iprintf>
 801b432:	f06f 0305 	mvn.w	r3, #5
 801b436:	e19a      	b.n	801b76e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801b438:	2307      	movs	r3, #7
 801b43a:	623b      	str	r3, [r7, #32]
        break;
 801b43c:	e084      	b.n	801b548 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b43e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b442:	2b04      	cmp	r3, #4
 801b444:	d009      	beq.n	801b45a <dhcp_parse_reply+0x266>
 801b446:	4b27      	ldr	r3, [pc, #156]	; (801b4e4 <dhcp_parse_reply+0x2f0>)
 801b448:	f240 6241 	movw	r2, #1601	; 0x641
 801b44c:	4926      	ldr	r1, [pc, #152]	; (801b4e8 <dhcp_parse_reply+0x2f4>)
 801b44e:	4827      	ldr	r0, [pc, #156]	; (801b4ec <dhcp_parse_reply+0x2f8>)
 801b450:	f004 fa38 	bl	801f8c4 <iprintf>
 801b454:	f06f 0305 	mvn.w	r3, #5
 801b458:	e189      	b.n	801b76e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801b45a:	2303      	movs	r3, #3
 801b45c:	623b      	str	r3, [r7, #32]
        break;
 801b45e:	e073      	b.n	801b548 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b464:	2b01      	cmp	r3, #1
 801b466:	d009      	beq.n	801b47c <dhcp_parse_reply+0x288>
 801b468:	4b1e      	ldr	r3, [pc, #120]	; (801b4e4 <dhcp_parse_reply+0x2f0>)
 801b46a:	f240 624f 	movw	r2, #1615	; 0x64f
 801b46e:	4921      	ldr	r1, [pc, #132]	; (801b4f4 <dhcp_parse_reply+0x300>)
 801b470:	481e      	ldr	r0, [pc, #120]	; (801b4ec <dhcp_parse_reply+0x2f8>)
 801b472:	f004 fa27 	bl	801f8c4 <iprintf>
 801b476:	f06f 0305 	mvn.w	r3, #5
 801b47a:	e178      	b.n	801b76e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801b47c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b47e:	2bf0      	cmp	r3, #240	; 0xf0
 801b480:	d009      	beq.n	801b496 <dhcp_parse_reply+0x2a2>
 801b482:	4b18      	ldr	r3, [pc, #96]	; (801b4e4 <dhcp_parse_reply+0x2f0>)
 801b484:	f240 6251 	movw	r2, #1617	; 0x651
 801b488:	491b      	ldr	r1, [pc, #108]	; (801b4f8 <dhcp_parse_reply+0x304>)
 801b48a:	4818      	ldr	r0, [pc, #96]	; (801b4ec <dhcp_parse_reply+0x2f8>)
 801b48c:	f004 fa1a 	bl	801f8c4 <iprintf>
 801b490:	f06f 0305 	mvn.w	r3, #5
 801b494:	e16b      	b.n	801b76e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801b496:	2300      	movs	r3, #0
 801b498:	623b      	str	r3, [r7, #32]
        break;
 801b49a:	e055      	b.n	801b548 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b4a0:	2b01      	cmp	r3, #1
 801b4a2:	d009      	beq.n	801b4b8 <dhcp_parse_reply+0x2c4>
 801b4a4:	4b0f      	ldr	r3, [pc, #60]	; (801b4e4 <dhcp_parse_reply+0x2f0>)
 801b4a6:	f240 6255 	movw	r2, #1621	; 0x655
 801b4aa:	4912      	ldr	r1, [pc, #72]	; (801b4f4 <dhcp_parse_reply+0x300>)
 801b4ac:	480f      	ldr	r0, [pc, #60]	; (801b4ec <dhcp_parse_reply+0x2f8>)
 801b4ae:	f004 fa09 	bl	801f8c4 <iprintf>
 801b4b2:	f06f 0305 	mvn.w	r3, #5
 801b4b6:	e15a      	b.n	801b76e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801b4b8:	2301      	movs	r3, #1
 801b4ba:	623b      	str	r3, [r7, #32]
        break;
 801b4bc:	e044      	b.n	801b548 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b4be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b4c2:	2b04      	cmp	r3, #4
 801b4c4:	d009      	beq.n	801b4da <dhcp_parse_reply+0x2e6>
 801b4c6:	4b07      	ldr	r3, [pc, #28]	; (801b4e4 <dhcp_parse_reply+0x2f0>)
 801b4c8:	f240 6259 	movw	r2, #1625	; 0x659
 801b4cc:	4906      	ldr	r1, [pc, #24]	; (801b4e8 <dhcp_parse_reply+0x2f4>)
 801b4ce:	4807      	ldr	r0, [pc, #28]	; (801b4ec <dhcp_parse_reply+0x2f8>)
 801b4d0:	f004 f9f8 	bl	801f8c4 <iprintf>
 801b4d4:	f06f 0305 	mvn.w	r3, #5
 801b4d8:	e149      	b.n	801b76e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801b4da:	2302      	movs	r3, #2
 801b4dc:	623b      	str	r3, [r7, #32]
        break;
 801b4de:	e033      	b.n	801b548 <dhcp_parse_reply+0x354>
 801b4e0:	20010248 	.word	0x20010248
 801b4e4:	08024600 	.word	0x08024600
 801b4e8:	08024888 	.word	0x08024888
 801b4ec:	08024660 	.word	0x08024660
 801b4f0:	08024894 	.word	0x08024894
 801b4f4:	080248a8 	.word	0x080248a8
 801b4f8:	080248b4 	.word	0x080248b4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b500:	2b04      	cmp	r3, #4
 801b502:	d009      	beq.n	801b518 <dhcp_parse_reply+0x324>
 801b504:	4b9c      	ldr	r3, [pc, #624]	; (801b778 <dhcp_parse_reply+0x584>)
 801b506:	f240 625d 	movw	r2, #1629	; 0x65d
 801b50a:	499c      	ldr	r1, [pc, #624]	; (801b77c <dhcp_parse_reply+0x588>)
 801b50c:	489c      	ldr	r0, [pc, #624]	; (801b780 <dhcp_parse_reply+0x58c>)
 801b50e:	f004 f9d9 	bl	801f8c4 <iprintf>
 801b512:	f06f 0305 	mvn.w	r3, #5
 801b516:	e12a      	b.n	801b76e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801b518:	2304      	movs	r3, #4
 801b51a:	623b      	str	r3, [r7, #32]
        break;
 801b51c:	e014      	b.n	801b548 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b51e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b522:	2b04      	cmp	r3, #4
 801b524:	d009      	beq.n	801b53a <dhcp_parse_reply+0x346>
 801b526:	4b94      	ldr	r3, [pc, #592]	; (801b778 <dhcp_parse_reply+0x584>)
 801b528:	f240 6261 	movw	r2, #1633	; 0x661
 801b52c:	4993      	ldr	r1, [pc, #588]	; (801b77c <dhcp_parse_reply+0x588>)
 801b52e:	4894      	ldr	r0, [pc, #592]	; (801b780 <dhcp_parse_reply+0x58c>)
 801b530:	f004 f9c8 	bl	801f8c4 <iprintf>
 801b534:	f06f 0305 	mvn.w	r3, #5
 801b538:	e119      	b.n	801b76e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801b53a:	2305      	movs	r3, #5
 801b53c:	623b      	str	r3, [r7, #32]
        break;
 801b53e:	e003      	b.n	801b548 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801b540:	2300      	movs	r3, #0
 801b542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801b546:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801b548:	7dfb      	ldrb	r3, [r7, #23]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d103      	bne.n	801b556 <dhcp_parse_reply+0x362>
      offset++;
 801b54e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b550:	3301      	adds	r3, #1
 801b552:	877b      	strh	r3, [r7, #58]	; 0x3a
 801b554:	e0a1      	b.n	801b69a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801b556:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b55c:	4413      	add	r3, r2
 801b55e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801b562:	4293      	cmp	r3, r2
 801b564:	dd02      	ble.n	801b56c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801b566:	f06f 0301 	mvn.w	r3, #1
 801b56a:	e100      	b.n	801b76e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801b56c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b570:	b29a      	uxth	r2, r3
 801b572:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b574:	4413      	add	r3, r2
 801b576:	b29b      	uxth	r3, r3
 801b578:	3302      	adds	r3, #2
 801b57a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801b57c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b580:	2b00      	cmp	r3, #0
 801b582:	f000 808a 	beq.w	801b69a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801b586:	2300      	movs	r3, #0
 801b588:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801b58a:	6a3b      	ldr	r3, [r7, #32]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	db02      	blt.n	801b596 <dhcp_parse_reply+0x3a2>
 801b590:	6a3b      	ldr	r3, [r7, #32]
 801b592:	2b07      	cmp	r3, #7
 801b594:	dd06      	ble.n	801b5a4 <dhcp_parse_reply+0x3b0>
 801b596:	4b78      	ldr	r3, [pc, #480]	; (801b778 <dhcp_parse_reply+0x584>)
 801b598:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801b59c:	4979      	ldr	r1, [pc, #484]	; (801b784 <dhcp_parse_reply+0x590>)
 801b59e:	4878      	ldr	r0, [pc, #480]	; (801b780 <dhcp_parse_reply+0x58c>)
 801b5a0:	f004 f990 	bl	801f8c4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801b5a4:	4a78      	ldr	r2, [pc, #480]	; (801b788 <dhcp_parse_reply+0x594>)
 801b5a6:	6a3b      	ldr	r3, [r7, #32]
 801b5a8:	4413      	add	r3, r2
 801b5aa:	781b      	ldrb	r3, [r3, #0]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d174      	bne.n	801b69a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801b5b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b5b4:	2b04      	cmp	r3, #4
 801b5b6:	bf28      	it	cs
 801b5b8:	2304      	movcs	r3, #4
 801b5ba:	b2db      	uxtb	r3, r3
 801b5bc:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801b5be:	8bfb      	ldrh	r3, [r7, #30]
 801b5c0:	8aba      	ldrh	r2, [r7, #20]
 801b5c2:	f107 0108 	add.w	r1, r7, #8
 801b5c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b5c8:	f7f7 fcae 	bl	8012f28 <pbuf_copy_partial>
 801b5cc:	4603      	mov	r3, r0
 801b5ce:	461a      	mov	r2, r3
 801b5d0:	8abb      	ldrh	r3, [r7, #20]
 801b5d2:	4293      	cmp	r3, r2
 801b5d4:	d002      	beq.n	801b5dc <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801b5d6:	f06f 0301 	mvn.w	r3, #1
 801b5da:	e0c8      	b.n	801b76e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801b5dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b5e0:	2b04      	cmp	r3, #4
 801b5e2:	d933      	bls.n	801b64c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801b5e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b5e8:	f003 0303 	and.w	r3, r3, #3
 801b5ec:	b2db      	uxtb	r3, r3
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d009      	beq.n	801b606 <dhcp_parse_reply+0x412>
 801b5f2:	4b61      	ldr	r3, [pc, #388]	; (801b778 <dhcp_parse_reply+0x584>)
 801b5f4:	f240 6281 	movw	r2, #1665	; 0x681
 801b5f8:	4964      	ldr	r1, [pc, #400]	; (801b78c <dhcp_parse_reply+0x598>)
 801b5fa:	4861      	ldr	r0, [pc, #388]	; (801b780 <dhcp_parse_reply+0x58c>)
 801b5fc:	f004 f962 	bl	801f8c4 <iprintf>
 801b600:	f06f 0305 	mvn.w	r3, #5
 801b604:	e0b3      	b.n	801b76e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801b606:	4a60      	ldr	r2, [pc, #384]	; (801b788 <dhcp_parse_reply+0x594>)
 801b608:	6a3b      	ldr	r3, [r7, #32]
 801b60a:	4413      	add	r3, r2
 801b60c:	2201      	movs	r2, #1
 801b60e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801b610:	68bb      	ldr	r3, [r7, #8]
 801b612:	4618      	mov	r0, r3
 801b614:	f7f5 fe61 	bl	80112da <lwip_htonl>
 801b618:	4602      	mov	r2, r0
 801b61a:	495d      	ldr	r1, [pc, #372]	; (801b790 <dhcp_parse_reply+0x59c>)
 801b61c:	6a3b      	ldr	r3, [r7, #32]
 801b61e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801b622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b626:	3b04      	subs	r3, #4
 801b628:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801b62c:	8bfb      	ldrh	r3, [r7, #30]
 801b62e:	3304      	adds	r3, #4
 801b630:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801b632:	8a7a      	ldrh	r2, [r7, #18]
 801b634:	8bfb      	ldrh	r3, [r7, #30]
 801b636:	429a      	cmp	r2, r3
 801b638:	d202      	bcs.n	801b640 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801b63a:	f06f 0301 	mvn.w	r3, #1
 801b63e:	e096      	b.n	801b76e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801b640:	8a7b      	ldrh	r3, [r7, #18]
 801b642:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801b644:	6a3b      	ldr	r3, [r7, #32]
 801b646:	3301      	adds	r3, #1
 801b648:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801b64a:	e79e      	b.n	801b58a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801b64c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b650:	2b04      	cmp	r3, #4
 801b652:	d106      	bne.n	801b662 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	4618      	mov	r0, r3
 801b658:	f7f5 fe3f 	bl	80112da <lwip_htonl>
 801b65c:	4603      	mov	r3, r0
 801b65e:	60bb      	str	r3, [r7, #8]
 801b660:	e011      	b.n	801b686 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801b662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b666:	2b01      	cmp	r3, #1
 801b668:	d009      	beq.n	801b67e <dhcp_parse_reply+0x48a>
 801b66a:	4b43      	ldr	r3, [pc, #268]	; (801b778 <dhcp_parse_reply+0x584>)
 801b66c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801b670:	4948      	ldr	r1, [pc, #288]	; (801b794 <dhcp_parse_reply+0x5a0>)
 801b672:	4843      	ldr	r0, [pc, #268]	; (801b780 <dhcp_parse_reply+0x58c>)
 801b674:	f004 f926 	bl	801f8c4 <iprintf>
 801b678:	f06f 0305 	mvn.w	r3, #5
 801b67c:	e077      	b.n	801b76e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801b67e:	f107 0308 	add.w	r3, r7, #8
 801b682:	781b      	ldrb	r3, [r3, #0]
 801b684:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801b686:	4a40      	ldr	r2, [pc, #256]	; (801b788 <dhcp_parse_reply+0x594>)
 801b688:	6a3b      	ldr	r3, [r7, #32]
 801b68a:	4413      	add	r3, r2
 801b68c:	2201      	movs	r2, #1
 801b68e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801b690:	68ba      	ldr	r2, [r7, #8]
 801b692:	493f      	ldr	r1, [pc, #252]	; (801b790 <dhcp_parse_reply+0x59c>)
 801b694:	6a3b      	ldr	r3, [r7, #32]
 801b696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b69c:	895b      	ldrh	r3, [r3, #10]
 801b69e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b6a0:	429a      	cmp	r2, r3
 801b6a2:	d324      	bcc.n	801b6ee <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6a6:	895b      	ldrh	r3, [r3, #10]
 801b6a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b6aa:	1ad3      	subs	r3, r2, r3
 801b6ac:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6b0:	895b      	ldrh	r3, [r3, #10]
 801b6b2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801b6b4:	1ad3      	subs	r3, r2, r3
 801b6b6:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801b6b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b6ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b6bc:	429a      	cmp	r2, r3
 801b6be:	d213      	bcs.n	801b6e8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d109      	bne.n	801b6e0 <dhcp_parse_reply+0x4ec>
 801b6cc:	4b2a      	ldr	r3, [pc, #168]	; (801b778 <dhcp_parse_reply+0x584>)
 801b6ce:	f240 629d 	movw	r2, #1693	; 0x69d
 801b6d2:	4931      	ldr	r1, [pc, #196]	; (801b798 <dhcp_parse_reply+0x5a4>)
 801b6d4:	482a      	ldr	r0, [pc, #168]	; (801b780 <dhcp_parse_reply+0x58c>)
 801b6d6:	f004 f8f5 	bl	801f8c4 <iprintf>
 801b6da:	f06f 0305 	mvn.w	r3, #5
 801b6de:	e046      	b.n	801b76e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6e2:	685b      	ldr	r3, [r3, #4]
 801b6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b6e6:	e002      	b.n	801b6ee <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801b6e8:	f06f 0301 	mvn.w	r3, #1
 801b6ec:	e03f      	b.n	801b76e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d00a      	beq.n	801b70a <dhcp_parse_reply+0x516>
 801b6f4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b6f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b6f8:	429a      	cmp	r2, r3
 801b6fa:	d206      	bcs.n	801b70a <dhcp_parse_reply+0x516>
 801b6fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b6fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b700:	4413      	add	r3, r2
 801b702:	781b      	ldrb	r3, [r3, #0]
 801b704:	2bff      	cmp	r3, #255	; 0xff
 801b706:	f47f adb8 	bne.w	801b27a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801b70a:	4b1f      	ldr	r3, [pc, #124]	; (801b788 <dhcp_parse_reply+0x594>)
 801b70c:	781b      	ldrb	r3, [r3, #0]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d018      	beq.n	801b744 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b712:	4b1f      	ldr	r3, [pc, #124]	; (801b790 <dhcp_parse_reply+0x59c>)
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b718:	4b1b      	ldr	r3, [pc, #108]	; (801b788 <dhcp_parse_reply+0x594>)
 801b71a:	2200      	movs	r2, #0
 801b71c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801b71e:	68fb      	ldr	r3, [r7, #12]
 801b720:	2b01      	cmp	r3, #1
 801b722:	d102      	bne.n	801b72a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801b724:	2301      	movs	r3, #1
 801b726:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b728:	e00c      	b.n	801b744 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801b72a:	68fb      	ldr	r3, [r7, #12]
 801b72c:	2b02      	cmp	r3, #2
 801b72e:	d102      	bne.n	801b736 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801b730:	2301      	movs	r3, #1
 801b732:	62bb      	str	r3, [r7, #40]	; 0x28
 801b734:	e006      	b.n	801b744 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	2b03      	cmp	r3, #3
 801b73a:	d103      	bne.n	801b744 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801b73c:	2301      	movs	r3, #1
 801b73e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801b740:	2301      	movs	r3, #1
 801b742:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801b744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b746:	2b00      	cmp	r3, #0
 801b748:	d006      	beq.n	801b758 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801b74a:	2300      	movs	r3, #0
 801b74c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801b74e:	236c      	movs	r3, #108	; 0x6c
 801b750:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801b752:	23ec      	movs	r3, #236	; 0xec
 801b754:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801b756:	e56a      	b.n	801b22e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b75a:	2b00      	cmp	r3, #0
 801b75c:	d006      	beq.n	801b76c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801b75e:	2300      	movs	r3, #0
 801b760:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801b762:	232c      	movs	r3, #44	; 0x2c
 801b764:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801b766:	236c      	movs	r3, #108	; 0x6c
 801b768:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801b76a:	e560      	b.n	801b22e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801b76c:	2300      	movs	r3, #0
}
 801b76e:	4618      	mov	r0, r3
 801b770:	3740      	adds	r7, #64	; 0x40
 801b772:	46bd      	mov	sp, r7
 801b774:	bd80      	pop	{r7, pc}
 801b776:	bf00      	nop
 801b778:	08024600 	.word	0x08024600
 801b77c:	08024888 	.word	0x08024888
 801b780:	08024660 	.word	0x08024660
 801b784:	080248cc 	.word	0x080248cc
 801b788:	20010248 	.word	0x20010248
 801b78c:	080248e0 	.word	0x080248e0
 801b790:	20010228 	.word	0x20010228
 801b794:	080248f8 	.word	0x080248f8
 801b798:	0802490c 	.word	0x0802490c

0801b79c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b08a      	sub	sp, #40	; 0x28
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	60f8      	str	r0, [r7, #12]
 801b7a4:	60b9      	str	r1, [r7, #8]
 801b7a6:	607a      	str	r2, [r7, #4]
 801b7a8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801b7aa:	4b60      	ldr	r3, [pc, #384]	; (801b92c <dhcp_recv+0x190>)
 801b7ac:	685b      	ldr	r3, [r3, #4]
 801b7ae:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b7b0:	6a3b      	ldr	r3, [r7, #32]
 801b7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7b4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	685b      	ldr	r3, [r3, #4]
 801b7ba:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801b7bc:	69fb      	ldr	r3, [r7, #28]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	f000 809d 	beq.w	801b8fe <dhcp_recv+0x162>
 801b7c4:	69fb      	ldr	r3, [r7, #28]
 801b7c6:	791b      	ldrb	r3, [r3, #4]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	f000 8098 	beq.w	801b8fe <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	895b      	ldrh	r3, [r3, #10]
 801b7d2:	2b2b      	cmp	r3, #43	; 0x2b
 801b7d4:	f240 8095 	bls.w	801b902 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801b7d8:	69bb      	ldr	r3, [r7, #24]
 801b7da:	781b      	ldrb	r3, [r3, #0]
 801b7dc:	2b02      	cmp	r3, #2
 801b7de:	f040 8092 	bne.w	801b906 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b7e2:	2300      	movs	r3, #0
 801b7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b7e8:	e012      	b.n	801b810 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801b7ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b7ee:	6a3a      	ldr	r2, [r7, #32]
 801b7f0:	4413      	add	r3, r2
 801b7f2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801b7f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b7fa:	69b9      	ldr	r1, [r7, #24]
 801b7fc:	440b      	add	r3, r1
 801b7fe:	7f1b      	ldrb	r3, [r3, #28]
 801b800:	429a      	cmp	r2, r3
 801b802:	f040 8082 	bne.w	801b90a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b80a:	3301      	adds	r3, #1
 801b80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b810:	6a3b      	ldr	r3, [r7, #32]
 801b812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b816:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b81a:	429a      	cmp	r2, r3
 801b81c:	d203      	bcs.n	801b826 <dhcp_recv+0x8a>
 801b81e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b822:	2b05      	cmp	r3, #5
 801b824:	d9e1      	bls.n	801b7ea <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801b826:	69bb      	ldr	r3, [r7, #24]
 801b828:	685b      	ldr	r3, [r3, #4]
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7f5 fd55 	bl	80112da <lwip_htonl>
 801b830:	4602      	mov	r2, r0
 801b832:	69fb      	ldr	r3, [r7, #28]
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	429a      	cmp	r2, r3
 801b838:	d169      	bne.n	801b90e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801b83a:	69f9      	ldr	r1, [r7, #28]
 801b83c:	6878      	ldr	r0, [r7, #4]
 801b83e:	f7ff fcd9 	bl	801b1f4 <dhcp_parse_reply>
 801b842:	4603      	mov	r3, r0
 801b844:	2b00      	cmp	r3, #0
 801b846:	d164      	bne.n	801b912 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801b848:	4b39      	ldr	r3, [pc, #228]	; (801b930 <dhcp_recv+0x194>)
 801b84a:	785b      	ldrb	r3, [r3, #1]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d062      	beq.n	801b916 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	685b      	ldr	r3, [r3, #4]
 801b854:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801b856:	4b37      	ldr	r3, [pc, #220]	; (801b934 <dhcp_recv+0x198>)
 801b858:	685b      	ldr	r3, [r3, #4]
 801b85a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801b85c:	7cfb      	ldrb	r3, [r7, #19]
 801b85e:	2b05      	cmp	r3, #5
 801b860:	d12a      	bne.n	801b8b8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801b862:	69fb      	ldr	r3, [r7, #28]
 801b864:	795b      	ldrb	r3, [r3, #5]
 801b866:	2b01      	cmp	r3, #1
 801b868:	d112      	bne.n	801b890 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801b86a:	6979      	ldr	r1, [r7, #20]
 801b86c:	6a38      	ldr	r0, [r7, #32]
 801b86e:	f7fe fe17 	bl	801a4a0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801b872:	6a3b      	ldr	r3, [r7, #32]
 801b874:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b878:	f003 0308 	and.w	r3, r3, #8
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d003      	beq.n	801b888 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801b880:	6a38      	ldr	r0, [r7, #32]
 801b882:	f7fe fb87 	bl	8019f94 <dhcp_check>
 801b886:	e049      	b.n	801b91c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801b888:	6a38      	ldr	r0, [r7, #32]
 801b88a:	f7ff f867 	bl	801a95c <dhcp_bind>
 801b88e:	e045      	b.n	801b91c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b890:	69fb      	ldr	r3, [r7, #28]
 801b892:	795b      	ldrb	r3, [r3, #5]
 801b894:	2b03      	cmp	r3, #3
 801b896:	d007      	beq.n	801b8a8 <dhcp_recv+0x10c>
 801b898:	69fb      	ldr	r3, [r7, #28]
 801b89a:	795b      	ldrb	r3, [r3, #5]
 801b89c:	2b04      	cmp	r3, #4
 801b89e:	d003      	beq.n	801b8a8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801b8a0:	69fb      	ldr	r3, [r7, #28]
 801b8a2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b8a4:	2b05      	cmp	r3, #5
 801b8a6:	d139      	bne.n	801b91c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801b8a8:	6979      	ldr	r1, [r7, #20]
 801b8aa:	6a38      	ldr	r0, [r7, #32]
 801b8ac:	f7fe fdf8 	bl	801a4a0 <dhcp_handle_ack>
      dhcp_bind(netif);
 801b8b0:	6a38      	ldr	r0, [r7, #32]
 801b8b2:	f7ff f853 	bl	801a95c <dhcp_bind>
 801b8b6:	e031      	b.n	801b91c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801b8b8:	7cfb      	ldrb	r3, [r7, #19]
 801b8ba:	2b06      	cmp	r3, #6
 801b8bc:	d113      	bne.n	801b8e6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b8be:	69fb      	ldr	r3, [r7, #28]
 801b8c0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801b8c2:	2b03      	cmp	r3, #3
 801b8c4:	d00b      	beq.n	801b8de <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b8c6:	69fb      	ldr	r3, [r7, #28]
 801b8c8:	795b      	ldrb	r3, [r3, #5]
 801b8ca:	2b01      	cmp	r3, #1
 801b8cc:	d007      	beq.n	801b8de <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b8ce:	69fb      	ldr	r3, [r7, #28]
 801b8d0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b8d2:	2b04      	cmp	r3, #4
 801b8d4:	d003      	beq.n	801b8de <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b8d6:	69fb      	ldr	r3, [r7, #28]
 801b8d8:	795b      	ldrb	r3, [r3, #5]
 801b8da:	2b05      	cmp	r3, #5
 801b8dc:	d103      	bne.n	801b8e6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801b8de:	6a38      	ldr	r0, [r7, #32]
 801b8e0:	f7fe fb3e 	bl	8019f60 <dhcp_handle_nak>
 801b8e4:	e01a      	b.n	801b91c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801b8e6:	7cfb      	ldrb	r3, [r7, #19]
 801b8e8:	2b02      	cmp	r3, #2
 801b8ea:	d116      	bne.n	801b91a <dhcp_recv+0x17e>
 801b8ec:	69fb      	ldr	r3, [r7, #28]
 801b8ee:	795b      	ldrb	r3, [r3, #5]
 801b8f0:	2b06      	cmp	r3, #6
 801b8f2:	d112      	bne.n	801b91a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801b8f4:	6979      	ldr	r1, [r7, #20]
 801b8f6:	6a38      	ldr	r0, [r7, #32]
 801b8f8:	f7fe fb80 	bl	8019ffc <dhcp_handle_offer>
 801b8fc:	e00e      	b.n	801b91c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b8fe:	bf00      	nop
 801b900:	e00c      	b.n	801b91c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b902:	bf00      	nop
 801b904:	e00a      	b.n	801b91c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b906:	bf00      	nop
 801b908:	e008      	b.n	801b91c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801b90a:	bf00      	nop
 801b90c:	e006      	b.n	801b91c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b90e:	bf00      	nop
 801b910:	e004      	b.n	801b91c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b912:	bf00      	nop
 801b914:	e002      	b.n	801b91c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b916:	bf00      	nop
 801b918:	e000      	b.n	801b91c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801b91a:	bf00      	nop
  pbuf_free(p);
 801b91c:	6878      	ldr	r0, [r7, #4]
 801b91e:	f7f7 f8fd 	bl	8012b1c <pbuf_free>
}
 801b922:	bf00      	nop
 801b924:	3728      	adds	r7, #40	; 0x28
 801b926:	46bd      	mov	sp, r7
 801b928:	bd80      	pop	{r7, pc}
 801b92a:	bf00      	nop
 801b92c:	2000ca54 	.word	0x2000ca54
 801b930:	20010248 	.word	0x20010248
 801b934:	20010228 	.word	0x20010228

0801b938 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801b938:	b580      	push	{r7, lr}
 801b93a:	b088      	sub	sp, #32
 801b93c:	af00      	add	r7, sp, #0
 801b93e:	60f8      	str	r0, [r7, #12]
 801b940:	60b9      	str	r1, [r7, #8]
 801b942:	603b      	str	r3, [r7, #0]
 801b944:	4613      	mov	r3, r2
 801b946:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d108      	bne.n	801b960 <dhcp_create_msg+0x28>
 801b94e:	4b5f      	ldr	r3, [pc, #380]	; (801bacc <dhcp_create_msg+0x194>)
 801b950:	f240 7269 	movw	r2, #1897	; 0x769
 801b954:	495e      	ldr	r1, [pc, #376]	; (801bad0 <dhcp_create_msg+0x198>)
 801b956:	485f      	ldr	r0, [pc, #380]	; (801bad4 <dhcp_create_msg+0x19c>)
 801b958:	f003 ffb4 	bl	801f8c4 <iprintf>
 801b95c:	2300      	movs	r3, #0
 801b95e:	e0b1      	b.n	801bac4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801b960:	68bb      	ldr	r3, [r7, #8]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d108      	bne.n	801b978 <dhcp_create_msg+0x40>
 801b966:	4b59      	ldr	r3, [pc, #356]	; (801bacc <dhcp_create_msg+0x194>)
 801b968:	f240 726a 	movw	r2, #1898	; 0x76a
 801b96c:	495a      	ldr	r1, [pc, #360]	; (801bad8 <dhcp_create_msg+0x1a0>)
 801b96e:	4859      	ldr	r0, [pc, #356]	; (801bad4 <dhcp_create_msg+0x19c>)
 801b970:	f003 ffa8 	bl	801f8c4 <iprintf>
 801b974:	2300      	movs	r3, #0
 801b976:	e0a5      	b.n	801bac4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801b978:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b97c:	f44f 719a 	mov.w	r1, #308	; 0x134
 801b980:	2036      	movs	r0, #54	; 0x36
 801b982:	f7f6 fde7 	bl	8012554 <pbuf_alloc>
 801b986:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801b988:	69bb      	ldr	r3, [r7, #24]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d101      	bne.n	801b992 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801b98e:	2300      	movs	r3, #0
 801b990:	e098      	b.n	801bac4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801b992:	69bb      	ldr	r3, [r7, #24]
 801b994:	895b      	ldrh	r3, [r3, #10]
 801b996:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801b99a:	d206      	bcs.n	801b9aa <dhcp_create_msg+0x72>
 801b99c:	4b4b      	ldr	r3, [pc, #300]	; (801bacc <dhcp_create_msg+0x194>)
 801b99e:	f240 7271 	movw	r2, #1905	; 0x771
 801b9a2:	494e      	ldr	r1, [pc, #312]	; (801badc <dhcp_create_msg+0x1a4>)
 801b9a4:	484b      	ldr	r0, [pc, #300]	; (801bad4 <dhcp_create_msg+0x19c>)
 801b9a6:	f003 ff8d 	bl	801f8c4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801b9aa:	79fb      	ldrb	r3, [r7, #7]
 801b9ac:	2b03      	cmp	r3, #3
 801b9ae:	d103      	bne.n	801b9b8 <dhcp_create_msg+0x80>
 801b9b0:	68bb      	ldr	r3, [r7, #8]
 801b9b2:	795b      	ldrb	r3, [r3, #5]
 801b9b4:	2b03      	cmp	r3, #3
 801b9b6:	d10d      	bne.n	801b9d4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801b9b8:	68bb      	ldr	r3, [r7, #8]
 801b9ba:	799b      	ldrb	r3, [r3, #6]
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d105      	bne.n	801b9cc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801b9c0:	f003 fde2 	bl	801f588 <rand>
 801b9c4:	4603      	mov	r3, r0
 801b9c6:	461a      	mov	r2, r3
 801b9c8:	4b45      	ldr	r3, [pc, #276]	; (801bae0 <dhcp_create_msg+0x1a8>)
 801b9ca:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801b9cc:	4b44      	ldr	r3, [pc, #272]	; (801bae0 <dhcp_create_msg+0x1a8>)
 801b9ce:	681a      	ldr	r2, [r3, #0]
 801b9d0:	68bb      	ldr	r3, [r7, #8]
 801b9d2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801b9d4:	69bb      	ldr	r3, [r7, #24]
 801b9d6:	685b      	ldr	r3, [r3, #4]
 801b9d8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801b9da:	f44f 729a 	mov.w	r2, #308	; 0x134
 801b9de:	2100      	movs	r1, #0
 801b9e0:	6978      	ldr	r0, [r7, #20]
 801b9e2:	f004 f8c5 	bl	801fb70 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801b9e6:	697b      	ldr	r3, [r7, #20]
 801b9e8:	2201      	movs	r2, #1
 801b9ea:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801b9ec:	697b      	ldr	r3, [r7, #20]
 801b9ee:	2201      	movs	r2, #1
 801b9f0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801b9f2:	68fb      	ldr	r3, [r7, #12]
 801b9f4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801b9f8:	697b      	ldr	r3, [r7, #20]
 801b9fa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801b9fc:	68bb      	ldr	r3, [r7, #8]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7f5 fc6a 	bl	80112da <lwip_htonl>
 801ba06:	4602      	mov	r2, r0
 801ba08:	697b      	ldr	r3, [r7, #20]
 801ba0a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801ba0c:	79fb      	ldrb	r3, [r7, #7]
 801ba0e:	2b08      	cmp	r3, #8
 801ba10:	d010      	beq.n	801ba34 <dhcp_create_msg+0xfc>
 801ba12:	79fb      	ldrb	r3, [r7, #7]
 801ba14:	2b04      	cmp	r3, #4
 801ba16:	d00d      	beq.n	801ba34 <dhcp_create_msg+0xfc>
 801ba18:	79fb      	ldrb	r3, [r7, #7]
 801ba1a:	2b07      	cmp	r3, #7
 801ba1c:	d00a      	beq.n	801ba34 <dhcp_create_msg+0xfc>
 801ba1e:	79fb      	ldrb	r3, [r7, #7]
 801ba20:	2b03      	cmp	r3, #3
 801ba22:	d10c      	bne.n	801ba3e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801ba24:	68bb      	ldr	r3, [r7, #8]
 801ba26:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801ba28:	2b05      	cmp	r3, #5
 801ba2a:	d003      	beq.n	801ba34 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801ba2c:	68bb      	ldr	r3, [r7, #8]
 801ba2e:	795b      	ldrb	r3, [r3, #5]
 801ba30:	2b04      	cmp	r3, #4
 801ba32:	d104      	bne.n	801ba3e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801ba34:	68fb      	ldr	r3, [r7, #12]
 801ba36:	3304      	adds	r3, #4
 801ba38:	681a      	ldr	r2, [r3, #0]
 801ba3a:	697b      	ldr	r3, [r7, #20]
 801ba3c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ba3e:	2300      	movs	r3, #0
 801ba40:	83fb      	strh	r3, [r7, #30]
 801ba42:	e00c      	b.n	801ba5e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801ba44:	8bfa      	ldrh	r2, [r7, #30]
 801ba46:	8bfb      	ldrh	r3, [r7, #30]
 801ba48:	68f9      	ldr	r1, [r7, #12]
 801ba4a:	440a      	add	r2, r1
 801ba4c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801ba50:	697a      	ldr	r2, [r7, #20]
 801ba52:	4413      	add	r3, r2
 801ba54:	460a      	mov	r2, r1
 801ba56:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ba58:	8bfb      	ldrh	r3, [r7, #30]
 801ba5a:	3301      	adds	r3, #1
 801ba5c:	83fb      	strh	r3, [r7, #30]
 801ba5e:	8bfb      	ldrh	r3, [r7, #30]
 801ba60:	2b05      	cmp	r3, #5
 801ba62:	d9ef      	bls.n	801ba44 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801ba64:	697b      	ldr	r3, [r7, #20]
 801ba66:	2200      	movs	r2, #0
 801ba68:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801ba6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801ba70:	2200      	movs	r2, #0
 801ba72:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801ba76:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801ba7a:	2200      	movs	r2, #0
 801ba7c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801ba80:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801ba84:	2200      	movs	r2, #0
 801ba86:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801ba8a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801ba8e:	697b      	ldr	r3, [r7, #20]
 801ba90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ba94:	2301      	movs	r3, #1
 801ba96:	2235      	movs	r2, #53	; 0x35
 801ba98:	2000      	movs	r0, #0
 801ba9a:	f7ff fadb 	bl	801b054 <dhcp_option>
 801ba9e:	4603      	mov	r3, r0
 801baa0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801baa2:	697b      	ldr	r3, [r7, #20]
 801baa4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801baa8:	79fa      	ldrb	r2, [r7, #7]
 801baaa:	8a7b      	ldrh	r3, [r7, #18]
 801baac:	4618      	mov	r0, r3
 801baae:	f7ff fb05 	bl	801b0bc <dhcp_option_byte>
 801bab2:	4603      	mov	r3, r0
 801bab4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801bab6:	683b      	ldr	r3, [r7, #0]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d002      	beq.n	801bac2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801babc:	683b      	ldr	r3, [r7, #0]
 801babe:	8a7a      	ldrh	r2, [r7, #18]
 801bac0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801bac2:	69bb      	ldr	r3, [r7, #24]
}
 801bac4:	4618      	mov	r0, r3
 801bac6:	3720      	adds	r7, #32
 801bac8:	46bd      	mov	sp, r7
 801baca:	bd80      	pop	{r7, pc}
 801bacc:	08024600 	.word	0x08024600
 801bad0:	08024920 	.word	0x08024920
 801bad4:	08024660 	.word	0x08024660
 801bad8:	08024940 	.word	0x08024940
 801badc:	08024960 	.word	0x08024960
 801bae0:	20010258 	.word	0x20010258

0801bae4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801bae4:	b580      	push	{r7, lr}
 801bae6:	b084      	sub	sp, #16
 801bae8:	af00      	add	r7, sp, #0
 801baea:	4603      	mov	r3, r0
 801baec:	60b9      	str	r1, [r7, #8]
 801baee:	607a      	str	r2, [r7, #4]
 801baf0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801baf2:	89fb      	ldrh	r3, [r7, #14]
 801baf4:	1c5a      	adds	r2, r3, #1
 801baf6:	81fa      	strh	r2, [r7, #14]
 801baf8:	461a      	mov	r2, r3
 801bafa:	68bb      	ldr	r3, [r7, #8]
 801bafc:	4413      	add	r3, r2
 801bafe:	22ff      	movs	r2, #255	; 0xff
 801bb00:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801bb02:	e007      	b.n	801bb14 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801bb04:	89fb      	ldrh	r3, [r7, #14]
 801bb06:	1c5a      	adds	r2, r3, #1
 801bb08:	81fa      	strh	r2, [r7, #14]
 801bb0a:	461a      	mov	r2, r3
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	4413      	add	r3, r2
 801bb10:	2200      	movs	r2, #0
 801bb12:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801bb14:	89fb      	ldrh	r3, [r7, #14]
 801bb16:	2b43      	cmp	r3, #67	; 0x43
 801bb18:	d904      	bls.n	801bb24 <dhcp_option_trailer+0x40>
 801bb1a:	89fb      	ldrh	r3, [r7, #14]
 801bb1c:	f003 0303 	and.w	r3, r3, #3
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d002      	beq.n	801bb2a <dhcp_option_trailer+0x46>
 801bb24:	89fb      	ldrh	r3, [r7, #14]
 801bb26:	2b43      	cmp	r3, #67	; 0x43
 801bb28:	d9ec      	bls.n	801bb04 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801bb2a:	89fb      	ldrh	r3, [r7, #14]
 801bb2c:	33f0      	adds	r3, #240	; 0xf0
 801bb2e:	b29b      	uxth	r3, r3
 801bb30:	4619      	mov	r1, r3
 801bb32:	6878      	ldr	r0, [r7, #4]
 801bb34:	f7f6 fe6c 	bl	8012810 <pbuf_realloc>
}
 801bb38:	bf00      	nop
 801bb3a:	3710      	adds	r7, #16
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}

0801bb40 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801bb40:	b480      	push	{r7}
 801bb42:	b085      	sub	sp, #20
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	2b00      	cmp	r3, #0
 801bb4c:	d017      	beq.n	801bb7e <dhcp_supplied_address+0x3e>
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d013      	beq.n	801bb7e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb5a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	795b      	ldrb	r3, [r3, #5]
 801bb60:	2b0a      	cmp	r3, #10
 801bb62:	d007      	beq.n	801bb74 <dhcp_supplied_address+0x34>
 801bb64:	68fb      	ldr	r3, [r7, #12]
 801bb66:	795b      	ldrb	r3, [r3, #5]
 801bb68:	2b05      	cmp	r3, #5
 801bb6a:	d003      	beq.n	801bb74 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801bb70:	2b04      	cmp	r3, #4
 801bb72:	d101      	bne.n	801bb78 <dhcp_supplied_address+0x38>
 801bb74:	2301      	movs	r3, #1
 801bb76:	e000      	b.n	801bb7a <dhcp_supplied_address+0x3a>
 801bb78:	2300      	movs	r3, #0
 801bb7a:	b2db      	uxtb	r3, r3
 801bb7c:	e000      	b.n	801bb80 <dhcp_supplied_address+0x40>
  }
  return 0;
 801bb7e:	2300      	movs	r3, #0
}
 801bb80:	4618      	mov	r0, r3
 801bb82:	3714      	adds	r7, #20
 801bb84:	46bd      	mov	sp, r7
 801bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb8a:	4770      	bx	lr

0801bb8c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801bb8c:	b580      	push	{r7, lr}
 801bb8e:	b082      	sub	sp, #8
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801bb94:	4915      	ldr	r1, [pc, #84]	; (801bbec <etharp_free_entry+0x60>)
 801bb96:	687a      	ldr	r2, [r7, #4]
 801bb98:	4613      	mov	r3, r2
 801bb9a:	005b      	lsls	r3, r3, #1
 801bb9c:	4413      	add	r3, r2
 801bb9e:	00db      	lsls	r3, r3, #3
 801bba0:	440b      	add	r3, r1
 801bba2:	681b      	ldr	r3, [r3, #0]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d013      	beq.n	801bbd0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801bba8:	4910      	ldr	r1, [pc, #64]	; (801bbec <etharp_free_entry+0x60>)
 801bbaa:	687a      	ldr	r2, [r7, #4]
 801bbac:	4613      	mov	r3, r2
 801bbae:	005b      	lsls	r3, r3, #1
 801bbb0:	4413      	add	r3, r2
 801bbb2:	00db      	lsls	r3, r3, #3
 801bbb4:	440b      	add	r3, r1
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	4618      	mov	r0, r3
 801bbba:	f7f6 ffaf 	bl	8012b1c <pbuf_free>
    arp_table[i].q = NULL;
 801bbbe:	490b      	ldr	r1, [pc, #44]	; (801bbec <etharp_free_entry+0x60>)
 801bbc0:	687a      	ldr	r2, [r7, #4]
 801bbc2:	4613      	mov	r3, r2
 801bbc4:	005b      	lsls	r3, r3, #1
 801bbc6:	4413      	add	r3, r2
 801bbc8:	00db      	lsls	r3, r3, #3
 801bbca:	440b      	add	r3, r1
 801bbcc:	2200      	movs	r2, #0
 801bbce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801bbd0:	4906      	ldr	r1, [pc, #24]	; (801bbec <etharp_free_entry+0x60>)
 801bbd2:	687a      	ldr	r2, [r7, #4]
 801bbd4:	4613      	mov	r3, r2
 801bbd6:	005b      	lsls	r3, r3, #1
 801bbd8:	4413      	add	r3, r2
 801bbda:	00db      	lsls	r3, r3, #3
 801bbdc:	440b      	add	r3, r1
 801bbde:	3314      	adds	r3, #20
 801bbe0:	2200      	movs	r2, #0
 801bbe2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801bbe4:	bf00      	nop
 801bbe6:	3708      	adds	r7, #8
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	bd80      	pop	{r7, pc}
 801bbec:	2001025c 	.word	0x2001025c

0801bbf0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801bbf0:	b580      	push	{r7, lr}
 801bbf2:	b082      	sub	sp, #8
 801bbf4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	607b      	str	r3, [r7, #4]
 801bbfa:	e096      	b.n	801bd2a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801bbfc:	494f      	ldr	r1, [pc, #316]	; (801bd3c <etharp_tmr+0x14c>)
 801bbfe:	687a      	ldr	r2, [r7, #4]
 801bc00:	4613      	mov	r3, r2
 801bc02:	005b      	lsls	r3, r3, #1
 801bc04:	4413      	add	r3, r2
 801bc06:	00db      	lsls	r3, r3, #3
 801bc08:	440b      	add	r3, r1
 801bc0a:	3314      	adds	r3, #20
 801bc0c:	781b      	ldrb	r3, [r3, #0]
 801bc0e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801bc10:	78fb      	ldrb	r3, [r7, #3]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	f000 8086 	beq.w	801bd24 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801bc18:	4948      	ldr	r1, [pc, #288]	; (801bd3c <etharp_tmr+0x14c>)
 801bc1a:	687a      	ldr	r2, [r7, #4]
 801bc1c:	4613      	mov	r3, r2
 801bc1e:	005b      	lsls	r3, r3, #1
 801bc20:	4413      	add	r3, r2
 801bc22:	00db      	lsls	r3, r3, #3
 801bc24:	440b      	add	r3, r1
 801bc26:	3312      	adds	r3, #18
 801bc28:	881b      	ldrh	r3, [r3, #0]
 801bc2a:	3301      	adds	r3, #1
 801bc2c:	b298      	uxth	r0, r3
 801bc2e:	4943      	ldr	r1, [pc, #268]	; (801bd3c <etharp_tmr+0x14c>)
 801bc30:	687a      	ldr	r2, [r7, #4]
 801bc32:	4613      	mov	r3, r2
 801bc34:	005b      	lsls	r3, r3, #1
 801bc36:	4413      	add	r3, r2
 801bc38:	00db      	lsls	r3, r3, #3
 801bc3a:	440b      	add	r3, r1
 801bc3c:	3312      	adds	r3, #18
 801bc3e:	4602      	mov	r2, r0
 801bc40:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bc42:	493e      	ldr	r1, [pc, #248]	; (801bd3c <etharp_tmr+0x14c>)
 801bc44:	687a      	ldr	r2, [r7, #4]
 801bc46:	4613      	mov	r3, r2
 801bc48:	005b      	lsls	r3, r3, #1
 801bc4a:	4413      	add	r3, r2
 801bc4c:	00db      	lsls	r3, r3, #3
 801bc4e:	440b      	add	r3, r1
 801bc50:	3312      	adds	r3, #18
 801bc52:	881b      	ldrh	r3, [r3, #0]
 801bc54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801bc58:	d215      	bcs.n	801bc86 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bc5a:	4938      	ldr	r1, [pc, #224]	; (801bd3c <etharp_tmr+0x14c>)
 801bc5c:	687a      	ldr	r2, [r7, #4]
 801bc5e:	4613      	mov	r3, r2
 801bc60:	005b      	lsls	r3, r3, #1
 801bc62:	4413      	add	r3, r2
 801bc64:	00db      	lsls	r3, r3, #3
 801bc66:	440b      	add	r3, r1
 801bc68:	3314      	adds	r3, #20
 801bc6a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bc6c:	2b01      	cmp	r3, #1
 801bc6e:	d10e      	bne.n	801bc8e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801bc70:	4932      	ldr	r1, [pc, #200]	; (801bd3c <etharp_tmr+0x14c>)
 801bc72:	687a      	ldr	r2, [r7, #4]
 801bc74:	4613      	mov	r3, r2
 801bc76:	005b      	lsls	r3, r3, #1
 801bc78:	4413      	add	r3, r2
 801bc7a:	00db      	lsls	r3, r3, #3
 801bc7c:	440b      	add	r3, r1
 801bc7e:	3312      	adds	r3, #18
 801bc80:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bc82:	2b04      	cmp	r3, #4
 801bc84:	d903      	bls.n	801bc8e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801bc86:	6878      	ldr	r0, [r7, #4]
 801bc88:	f7ff ff80 	bl	801bb8c <etharp_free_entry>
 801bc8c:	e04a      	b.n	801bd24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801bc8e:	492b      	ldr	r1, [pc, #172]	; (801bd3c <etharp_tmr+0x14c>)
 801bc90:	687a      	ldr	r2, [r7, #4]
 801bc92:	4613      	mov	r3, r2
 801bc94:	005b      	lsls	r3, r3, #1
 801bc96:	4413      	add	r3, r2
 801bc98:	00db      	lsls	r3, r3, #3
 801bc9a:	440b      	add	r3, r1
 801bc9c:	3314      	adds	r3, #20
 801bc9e:	781b      	ldrb	r3, [r3, #0]
 801bca0:	2b03      	cmp	r3, #3
 801bca2:	d10a      	bne.n	801bcba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801bca4:	4925      	ldr	r1, [pc, #148]	; (801bd3c <etharp_tmr+0x14c>)
 801bca6:	687a      	ldr	r2, [r7, #4]
 801bca8:	4613      	mov	r3, r2
 801bcaa:	005b      	lsls	r3, r3, #1
 801bcac:	4413      	add	r3, r2
 801bcae:	00db      	lsls	r3, r3, #3
 801bcb0:	440b      	add	r3, r1
 801bcb2:	3314      	adds	r3, #20
 801bcb4:	2204      	movs	r2, #4
 801bcb6:	701a      	strb	r2, [r3, #0]
 801bcb8:	e034      	b.n	801bd24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801bcba:	4920      	ldr	r1, [pc, #128]	; (801bd3c <etharp_tmr+0x14c>)
 801bcbc:	687a      	ldr	r2, [r7, #4]
 801bcbe:	4613      	mov	r3, r2
 801bcc0:	005b      	lsls	r3, r3, #1
 801bcc2:	4413      	add	r3, r2
 801bcc4:	00db      	lsls	r3, r3, #3
 801bcc6:	440b      	add	r3, r1
 801bcc8:	3314      	adds	r3, #20
 801bcca:	781b      	ldrb	r3, [r3, #0]
 801bccc:	2b04      	cmp	r3, #4
 801bcce:	d10a      	bne.n	801bce6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801bcd0:	491a      	ldr	r1, [pc, #104]	; (801bd3c <etharp_tmr+0x14c>)
 801bcd2:	687a      	ldr	r2, [r7, #4]
 801bcd4:	4613      	mov	r3, r2
 801bcd6:	005b      	lsls	r3, r3, #1
 801bcd8:	4413      	add	r3, r2
 801bcda:	00db      	lsls	r3, r3, #3
 801bcdc:	440b      	add	r3, r1
 801bcde:	3314      	adds	r3, #20
 801bce0:	2202      	movs	r2, #2
 801bce2:	701a      	strb	r2, [r3, #0]
 801bce4:	e01e      	b.n	801bd24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801bce6:	4915      	ldr	r1, [pc, #84]	; (801bd3c <etharp_tmr+0x14c>)
 801bce8:	687a      	ldr	r2, [r7, #4]
 801bcea:	4613      	mov	r3, r2
 801bcec:	005b      	lsls	r3, r3, #1
 801bcee:	4413      	add	r3, r2
 801bcf0:	00db      	lsls	r3, r3, #3
 801bcf2:	440b      	add	r3, r1
 801bcf4:	3314      	adds	r3, #20
 801bcf6:	781b      	ldrb	r3, [r3, #0]
 801bcf8:	2b01      	cmp	r3, #1
 801bcfa:	d113      	bne.n	801bd24 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801bcfc:	490f      	ldr	r1, [pc, #60]	; (801bd3c <etharp_tmr+0x14c>)
 801bcfe:	687a      	ldr	r2, [r7, #4]
 801bd00:	4613      	mov	r3, r2
 801bd02:	005b      	lsls	r3, r3, #1
 801bd04:	4413      	add	r3, r2
 801bd06:	00db      	lsls	r3, r3, #3
 801bd08:	440b      	add	r3, r1
 801bd0a:	3308      	adds	r3, #8
 801bd0c:	6818      	ldr	r0, [r3, #0]
 801bd0e:	687a      	ldr	r2, [r7, #4]
 801bd10:	4613      	mov	r3, r2
 801bd12:	005b      	lsls	r3, r3, #1
 801bd14:	4413      	add	r3, r2
 801bd16:	00db      	lsls	r3, r3, #3
 801bd18:	4a08      	ldr	r2, [pc, #32]	; (801bd3c <etharp_tmr+0x14c>)
 801bd1a:	4413      	add	r3, r2
 801bd1c:	3304      	adds	r3, #4
 801bd1e:	4619      	mov	r1, r3
 801bd20:	f000 fe72 	bl	801ca08 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	3301      	adds	r3, #1
 801bd28:	607b      	str	r3, [r7, #4]
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	2b09      	cmp	r3, #9
 801bd2e:	f77f af65 	ble.w	801bbfc <etharp_tmr+0xc>
      }
    }
  }
}
 801bd32:	bf00      	nop
 801bd34:	bf00      	nop
 801bd36:	3708      	adds	r7, #8
 801bd38:	46bd      	mov	sp, r7
 801bd3a:	bd80      	pop	{r7, pc}
 801bd3c:	2001025c 	.word	0x2001025c

0801bd40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801bd40:	b580      	push	{r7, lr}
 801bd42:	b08a      	sub	sp, #40	; 0x28
 801bd44:	af00      	add	r7, sp, #0
 801bd46:	60f8      	str	r0, [r7, #12]
 801bd48:	460b      	mov	r3, r1
 801bd4a:	607a      	str	r2, [r7, #4]
 801bd4c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801bd4e:	230a      	movs	r3, #10
 801bd50:	84fb      	strh	r3, [r7, #38]	; 0x26
 801bd52:	230a      	movs	r3, #10
 801bd54:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801bd56:	230a      	movs	r3, #10
 801bd58:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801bd5e:	230a      	movs	r3, #10
 801bd60:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801bd62:	2300      	movs	r3, #0
 801bd64:	83bb      	strh	r3, [r7, #28]
 801bd66:	2300      	movs	r3, #0
 801bd68:	837b      	strh	r3, [r7, #26]
 801bd6a:	2300      	movs	r3, #0
 801bd6c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bd6e:	2300      	movs	r3, #0
 801bd70:	843b      	strh	r3, [r7, #32]
 801bd72:	e0ae      	b.n	801bed2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801bd74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bd78:	49a6      	ldr	r1, [pc, #664]	; (801c014 <etharp_find_entry+0x2d4>)
 801bd7a:	4613      	mov	r3, r2
 801bd7c:	005b      	lsls	r3, r3, #1
 801bd7e:	4413      	add	r3, r2
 801bd80:	00db      	lsls	r3, r3, #3
 801bd82:	440b      	add	r3, r1
 801bd84:	3314      	adds	r3, #20
 801bd86:	781b      	ldrb	r3, [r3, #0]
 801bd88:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801bd8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bd8e:	2b0a      	cmp	r3, #10
 801bd90:	d105      	bne.n	801bd9e <etharp_find_entry+0x5e>
 801bd92:	7dfb      	ldrb	r3, [r7, #23]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d102      	bne.n	801bd9e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801bd98:	8c3b      	ldrh	r3, [r7, #32]
 801bd9a:	847b      	strh	r3, [r7, #34]	; 0x22
 801bd9c:	e095      	b.n	801beca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801bd9e:	7dfb      	ldrb	r3, [r7, #23]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	f000 8092 	beq.w	801beca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801bda6:	7dfb      	ldrb	r3, [r7, #23]
 801bda8:	2b01      	cmp	r3, #1
 801bdaa:	d009      	beq.n	801bdc0 <etharp_find_entry+0x80>
 801bdac:	7dfb      	ldrb	r3, [r7, #23]
 801bdae:	2b01      	cmp	r3, #1
 801bdb0:	d806      	bhi.n	801bdc0 <etharp_find_entry+0x80>
 801bdb2:	4b99      	ldr	r3, [pc, #612]	; (801c018 <etharp_find_entry+0x2d8>)
 801bdb4:	f240 1223 	movw	r2, #291	; 0x123
 801bdb8:	4998      	ldr	r1, [pc, #608]	; (801c01c <etharp_find_entry+0x2dc>)
 801bdba:	4899      	ldr	r0, [pc, #612]	; (801c020 <etharp_find_entry+0x2e0>)
 801bdbc:	f003 fd82 	bl	801f8c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d020      	beq.n	801be08 <etharp_find_entry+0xc8>
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	6819      	ldr	r1, [r3, #0]
 801bdca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bdce:	4891      	ldr	r0, [pc, #580]	; (801c014 <etharp_find_entry+0x2d4>)
 801bdd0:	4613      	mov	r3, r2
 801bdd2:	005b      	lsls	r3, r3, #1
 801bdd4:	4413      	add	r3, r2
 801bdd6:	00db      	lsls	r3, r3, #3
 801bdd8:	4403      	add	r3, r0
 801bdda:	3304      	adds	r3, #4
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	4299      	cmp	r1, r3
 801bde0:	d112      	bne.n	801be08 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d00c      	beq.n	801be02 <etharp_find_entry+0xc2>
 801bde8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bdec:	4989      	ldr	r1, [pc, #548]	; (801c014 <etharp_find_entry+0x2d4>)
 801bdee:	4613      	mov	r3, r2
 801bdf0:	005b      	lsls	r3, r3, #1
 801bdf2:	4413      	add	r3, r2
 801bdf4:	00db      	lsls	r3, r3, #3
 801bdf6:	440b      	add	r3, r1
 801bdf8:	3308      	adds	r3, #8
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	687a      	ldr	r2, [r7, #4]
 801bdfe:	429a      	cmp	r2, r3
 801be00:	d102      	bne.n	801be08 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801be02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801be06:	e100      	b.n	801c00a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801be08:	7dfb      	ldrb	r3, [r7, #23]
 801be0a:	2b01      	cmp	r3, #1
 801be0c:	d140      	bne.n	801be90 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801be0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be12:	4980      	ldr	r1, [pc, #512]	; (801c014 <etharp_find_entry+0x2d4>)
 801be14:	4613      	mov	r3, r2
 801be16:	005b      	lsls	r3, r3, #1
 801be18:	4413      	add	r3, r2
 801be1a:	00db      	lsls	r3, r3, #3
 801be1c:	440b      	add	r3, r1
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	2b00      	cmp	r3, #0
 801be22:	d01a      	beq.n	801be5a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801be24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be28:	497a      	ldr	r1, [pc, #488]	; (801c014 <etharp_find_entry+0x2d4>)
 801be2a:	4613      	mov	r3, r2
 801be2c:	005b      	lsls	r3, r3, #1
 801be2e:	4413      	add	r3, r2
 801be30:	00db      	lsls	r3, r3, #3
 801be32:	440b      	add	r3, r1
 801be34:	3312      	adds	r3, #18
 801be36:	881b      	ldrh	r3, [r3, #0]
 801be38:	8bba      	ldrh	r2, [r7, #28]
 801be3a:	429a      	cmp	r2, r3
 801be3c:	d845      	bhi.n	801beca <etharp_find_entry+0x18a>
            old_queue = i;
 801be3e:	8c3b      	ldrh	r3, [r7, #32]
 801be40:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801be42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be46:	4973      	ldr	r1, [pc, #460]	; (801c014 <etharp_find_entry+0x2d4>)
 801be48:	4613      	mov	r3, r2
 801be4a:	005b      	lsls	r3, r3, #1
 801be4c:	4413      	add	r3, r2
 801be4e:	00db      	lsls	r3, r3, #3
 801be50:	440b      	add	r3, r1
 801be52:	3312      	adds	r3, #18
 801be54:	881b      	ldrh	r3, [r3, #0]
 801be56:	83bb      	strh	r3, [r7, #28]
 801be58:	e037      	b.n	801beca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801be5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be5e:	496d      	ldr	r1, [pc, #436]	; (801c014 <etharp_find_entry+0x2d4>)
 801be60:	4613      	mov	r3, r2
 801be62:	005b      	lsls	r3, r3, #1
 801be64:	4413      	add	r3, r2
 801be66:	00db      	lsls	r3, r3, #3
 801be68:	440b      	add	r3, r1
 801be6a:	3312      	adds	r3, #18
 801be6c:	881b      	ldrh	r3, [r3, #0]
 801be6e:	8b7a      	ldrh	r2, [r7, #26]
 801be70:	429a      	cmp	r2, r3
 801be72:	d82a      	bhi.n	801beca <etharp_find_entry+0x18a>
            old_pending = i;
 801be74:	8c3b      	ldrh	r3, [r7, #32]
 801be76:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801be78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be7c:	4965      	ldr	r1, [pc, #404]	; (801c014 <etharp_find_entry+0x2d4>)
 801be7e:	4613      	mov	r3, r2
 801be80:	005b      	lsls	r3, r3, #1
 801be82:	4413      	add	r3, r2
 801be84:	00db      	lsls	r3, r3, #3
 801be86:	440b      	add	r3, r1
 801be88:	3312      	adds	r3, #18
 801be8a:	881b      	ldrh	r3, [r3, #0]
 801be8c:	837b      	strh	r3, [r7, #26]
 801be8e:	e01c      	b.n	801beca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801be90:	7dfb      	ldrb	r3, [r7, #23]
 801be92:	2b01      	cmp	r3, #1
 801be94:	d919      	bls.n	801beca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801be96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be9a:	495e      	ldr	r1, [pc, #376]	; (801c014 <etharp_find_entry+0x2d4>)
 801be9c:	4613      	mov	r3, r2
 801be9e:	005b      	lsls	r3, r3, #1
 801bea0:	4413      	add	r3, r2
 801bea2:	00db      	lsls	r3, r3, #3
 801bea4:	440b      	add	r3, r1
 801bea6:	3312      	adds	r3, #18
 801bea8:	881b      	ldrh	r3, [r3, #0]
 801beaa:	8b3a      	ldrh	r2, [r7, #24]
 801beac:	429a      	cmp	r2, r3
 801beae:	d80c      	bhi.n	801beca <etharp_find_entry+0x18a>
            old_stable = i;
 801beb0:	8c3b      	ldrh	r3, [r7, #32]
 801beb2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801beb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801beb8:	4956      	ldr	r1, [pc, #344]	; (801c014 <etharp_find_entry+0x2d4>)
 801beba:	4613      	mov	r3, r2
 801bebc:	005b      	lsls	r3, r3, #1
 801bebe:	4413      	add	r3, r2
 801bec0:	00db      	lsls	r3, r3, #3
 801bec2:	440b      	add	r3, r1
 801bec4:	3312      	adds	r3, #18
 801bec6:	881b      	ldrh	r3, [r3, #0]
 801bec8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801beca:	8c3b      	ldrh	r3, [r7, #32]
 801becc:	3301      	adds	r3, #1
 801bece:	b29b      	uxth	r3, r3
 801bed0:	843b      	strh	r3, [r7, #32]
 801bed2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bed6:	2b09      	cmp	r3, #9
 801bed8:	f77f af4c 	ble.w	801bd74 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801bedc:	7afb      	ldrb	r3, [r7, #11]
 801bede:	f003 0302 	and.w	r3, r3, #2
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d108      	bne.n	801bef8 <etharp_find_entry+0x1b8>
 801bee6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801beea:	2b0a      	cmp	r3, #10
 801beec:	d107      	bne.n	801befe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801beee:	7afb      	ldrb	r3, [r7, #11]
 801bef0:	f003 0301 	and.w	r3, r3, #1
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d102      	bne.n	801befe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801bef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801befc:	e085      	b.n	801c00a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801befe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bf02:	2b09      	cmp	r3, #9
 801bf04:	dc02      	bgt.n	801bf0c <etharp_find_entry+0x1cc>
    i = empty;
 801bf06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bf08:	843b      	strh	r3, [r7, #32]
 801bf0a:	e039      	b.n	801bf80 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801bf0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801bf10:	2b09      	cmp	r3, #9
 801bf12:	dc14      	bgt.n	801bf3e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801bf14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bf16:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801bf18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf1c:	493d      	ldr	r1, [pc, #244]	; (801c014 <etharp_find_entry+0x2d4>)
 801bf1e:	4613      	mov	r3, r2
 801bf20:	005b      	lsls	r3, r3, #1
 801bf22:	4413      	add	r3, r2
 801bf24:	00db      	lsls	r3, r3, #3
 801bf26:	440b      	add	r3, r1
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d018      	beq.n	801bf60 <etharp_find_entry+0x220>
 801bf2e:	4b3a      	ldr	r3, [pc, #232]	; (801c018 <etharp_find_entry+0x2d8>)
 801bf30:	f240 126d 	movw	r2, #365	; 0x16d
 801bf34:	493b      	ldr	r1, [pc, #236]	; (801c024 <etharp_find_entry+0x2e4>)
 801bf36:	483a      	ldr	r0, [pc, #232]	; (801c020 <etharp_find_entry+0x2e0>)
 801bf38:	f003 fcc4 	bl	801f8c4 <iprintf>
 801bf3c:	e010      	b.n	801bf60 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801bf3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801bf42:	2b09      	cmp	r3, #9
 801bf44:	dc02      	bgt.n	801bf4c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801bf46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bf48:	843b      	strh	r3, [r7, #32]
 801bf4a:	e009      	b.n	801bf60 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801bf4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801bf50:	2b09      	cmp	r3, #9
 801bf52:	dc02      	bgt.n	801bf5a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801bf54:	8bfb      	ldrh	r3, [r7, #30]
 801bf56:	843b      	strh	r3, [r7, #32]
 801bf58:	e002      	b.n	801bf60 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801bf5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bf5e:	e054      	b.n	801c00a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bf60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bf64:	2b09      	cmp	r3, #9
 801bf66:	dd06      	ble.n	801bf76 <etharp_find_entry+0x236>
 801bf68:	4b2b      	ldr	r3, [pc, #172]	; (801c018 <etharp_find_entry+0x2d8>)
 801bf6a:	f240 127f 	movw	r2, #383	; 0x17f
 801bf6e:	492e      	ldr	r1, [pc, #184]	; (801c028 <etharp_find_entry+0x2e8>)
 801bf70:	482b      	ldr	r0, [pc, #172]	; (801c020 <etharp_find_entry+0x2e0>)
 801bf72:	f003 fca7 	bl	801f8c4 <iprintf>
    etharp_free_entry(i);
 801bf76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bf7a:	4618      	mov	r0, r3
 801bf7c:	f7ff fe06 	bl	801bb8c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bf80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bf84:	2b09      	cmp	r3, #9
 801bf86:	dd06      	ble.n	801bf96 <etharp_find_entry+0x256>
 801bf88:	4b23      	ldr	r3, [pc, #140]	; (801c018 <etharp_find_entry+0x2d8>)
 801bf8a:	f240 1283 	movw	r2, #387	; 0x183
 801bf8e:	4926      	ldr	r1, [pc, #152]	; (801c028 <etharp_find_entry+0x2e8>)
 801bf90:	4823      	ldr	r0, [pc, #140]	; (801c020 <etharp_find_entry+0x2e0>)
 801bf92:	f003 fc97 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801bf96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf9a:	491e      	ldr	r1, [pc, #120]	; (801c014 <etharp_find_entry+0x2d4>)
 801bf9c:	4613      	mov	r3, r2
 801bf9e:	005b      	lsls	r3, r3, #1
 801bfa0:	4413      	add	r3, r2
 801bfa2:	00db      	lsls	r3, r3, #3
 801bfa4:	440b      	add	r3, r1
 801bfa6:	3314      	adds	r3, #20
 801bfa8:	781b      	ldrb	r3, [r3, #0]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d006      	beq.n	801bfbc <etharp_find_entry+0x27c>
 801bfae:	4b1a      	ldr	r3, [pc, #104]	; (801c018 <etharp_find_entry+0x2d8>)
 801bfb0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801bfb4:	491d      	ldr	r1, [pc, #116]	; (801c02c <etharp_find_entry+0x2ec>)
 801bfb6:	481a      	ldr	r0, [pc, #104]	; (801c020 <etharp_find_entry+0x2e0>)
 801bfb8:	f003 fc84 	bl	801f8c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801bfbc:	68fb      	ldr	r3, [r7, #12]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d00b      	beq.n	801bfda <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801bfc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	6819      	ldr	r1, [r3, #0]
 801bfca:	4812      	ldr	r0, [pc, #72]	; (801c014 <etharp_find_entry+0x2d4>)
 801bfcc:	4613      	mov	r3, r2
 801bfce:	005b      	lsls	r3, r3, #1
 801bfd0:	4413      	add	r3, r2
 801bfd2:	00db      	lsls	r3, r3, #3
 801bfd4:	4403      	add	r3, r0
 801bfd6:	3304      	adds	r3, #4
 801bfd8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801bfda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bfde:	490d      	ldr	r1, [pc, #52]	; (801c014 <etharp_find_entry+0x2d4>)
 801bfe0:	4613      	mov	r3, r2
 801bfe2:	005b      	lsls	r3, r3, #1
 801bfe4:	4413      	add	r3, r2
 801bfe6:	00db      	lsls	r3, r3, #3
 801bfe8:	440b      	add	r3, r1
 801bfea:	3312      	adds	r3, #18
 801bfec:	2200      	movs	r2, #0
 801bfee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bff0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bff4:	4907      	ldr	r1, [pc, #28]	; (801c014 <etharp_find_entry+0x2d4>)
 801bff6:	4613      	mov	r3, r2
 801bff8:	005b      	lsls	r3, r3, #1
 801bffa:	4413      	add	r3, r2
 801bffc:	00db      	lsls	r3, r3, #3
 801bffe:	440b      	add	r3, r1
 801c000:	3308      	adds	r3, #8
 801c002:	687a      	ldr	r2, [r7, #4]
 801c004:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c006:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c00a:	4618      	mov	r0, r3
 801c00c:	3728      	adds	r7, #40	; 0x28
 801c00e:	46bd      	mov	sp, r7
 801c010:	bd80      	pop	{r7, pc}
 801c012:	bf00      	nop
 801c014:	2001025c 	.word	0x2001025c
 801c018:	080249a0 	.word	0x080249a0
 801c01c:	080249d8 	.word	0x080249d8
 801c020:	08024a18 	.word	0x08024a18
 801c024:	08024a40 	.word	0x08024a40
 801c028:	08024a58 	.word	0x08024a58
 801c02c:	08024a6c 	.word	0x08024a6c

0801c030 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b088      	sub	sp, #32
 801c034:	af02      	add	r7, sp, #8
 801c036:	60f8      	str	r0, [r7, #12]
 801c038:	60b9      	str	r1, [r7, #8]
 801c03a:	607a      	str	r2, [r7, #4]
 801c03c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c044:	2b06      	cmp	r3, #6
 801c046:	d006      	beq.n	801c056 <etharp_update_arp_entry+0x26>
 801c048:	4b48      	ldr	r3, [pc, #288]	; (801c16c <etharp_update_arp_entry+0x13c>)
 801c04a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801c04e:	4948      	ldr	r1, [pc, #288]	; (801c170 <etharp_update_arp_entry+0x140>)
 801c050:	4848      	ldr	r0, [pc, #288]	; (801c174 <etharp_update_arp_entry+0x144>)
 801c052:	f003 fc37 	bl	801f8c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c056:	68bb      	ldr	r3, [r7, #8]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d012      	beq.n	801c082 <etharp_update_arp_entry+0x52>
 801c05c:	68bb      	ldr	r3, [r7, #8]
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d00e      	beq.n	801c082 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c064:	68bb      	ldr	r3, [r7, #8]
 801c066:	681b      	ldr	r3, [r3, #0]
 801c068:	68f9      	ldr	r1, [r7, #12]
 801c06a:	4618      	mov	r0, r3
 801c06c:	f001 f920 	bl	801d2b0 <ip4_addr_isbroadcast_u32>
 801c070:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c072:	2b00      	cmp	r3, #0
 801c074:	d105      	bne.n	801c082 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c076:	68bb      	ldr	r3, [r7, #8]
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c07e:	2be0      	cmp	r3, #224	; 0xe0
 801c080:	d102      	bne.n	801c088 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c082:	f06f 030f 	mvn.w	r3, #15
 801c086:	e06c      	b.n	801c162 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c088:	78fb      	ldrb	r3, [r7, #3]
 801c08a:	68fa      	ldr	r2, [r7, #12]
 801c08c:	4619      	mov	r1, r3
 801c08e:	68b8      	ldr	r0, [r7, #8]
 801c090:	f7ff fe56 	bl	801bd40 <etharp_find_entry>
 801c094:	4603      	mov	r3, r0
 801c096:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c098:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	da02      	bge.n	801c0a6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c0a0:	8afb      	ldrh	r3, [r7, #22]
 801c0a2:	b25b      	sxtb	r3, r3
 801c0a4:	e05d      	b.n	801c162 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c0a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c0aa:	4933      	ldr	r1, [pc, #204]	; (801c178 <etharp_update_arp_entry+0x148>)
 801c0ac:	4613      	mov	r3, r2
 801c0ae:	005b      	lsls	r3, r3, #1
 801c0b0:	4413      	add	r3, r2
 801c0b2:	00db      	lsls	r3, r3, #3
 801c0b4:	440b      	add	r3, r1
 801c0b6:	3314      	adds	r3, #20
 801c0b8:	2202      	movs	r2, #2
 801c0ba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c0bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c0c0:	492d      	ldr	r1, [pc, #180]	; (801c178 <etharp_update_arp_entry+0x148>)
 801c0c2:	4613      	mov	r3, r2
 801c0c4:	005b      	lsls	r3, r3, #1
 801c0c6:	4413      	add	r3, r2
 801c0c8:	00db      	lsls	r3, r3, #3
 801c0ca:	440b      	add	r3, r1
 801c0cc:	3308      	adds	r3, #8
 801c0ce:	68fa      	ldr	r2, [r7, #12]
 801c0d0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c0d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c0d6:	4613      	mov	r3, r2
 801c0d8:	005b      	lsls	r3, r3, #1
 801c0da:	4413      	add	r3, r2
 801c0dc:	00db      	lsls	r3, r3, #3
 801c0de:	3308      	adds	r3, #8
 801c0e0:	4a25      	ldr	r2, [pc, #148]	; (801c178 <etharp_update_arp_entry+0x148>)
 801c0e2:	4413      	add	r3, r2
 801c0e4:	3304      	adds	r3, #4
 801c0e6:	2206      	movs	r2, #6
 801c0e8:	6879      	ldr	r1, [r7, #4]
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	f003 fe4f 	bl	801fd8e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c0f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c0f4:	4920      	ldr	r1, [pc, #128]	; (801c178 <etharp_update_arp_entry+0x148>)
 801c0f6:	4613      	mov	r3, r2
 801c0f8:	005b      	lsls	r3, r3, #1
 801c0fa:	4413      	add	r3, r2
 801c0fc:	00db      	lsls	r3, r3, #3
 801c0fe:	440b      	add	r3, r1
 801c100:	3312      	adds	r3, #18
 801c102:	2200      	movs	r2, #0
 801c104:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c106:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c10a:	491b      	ldr	r1, [pc, #108]	; (801c178 <etharp_update_arp_entry+0x148>)
 801c10c:	4613      	mov	r3, r2
 801c10e:	005b      	lsls	r3, r3, #1
 801c110:	4413      	add	r3, r2
 801c112:	00db      	lsls	r3, r3, #3
 801c114:	440b      	add	r3, r1
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d021      	beq.n	801c160 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c11c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c120:	4915      	ldr	r1, [pc, #84]	; (801c178 <etharp_update_arp_entry+0x148>)
 801c122:	4613      	mov	r3, r2
 801c124:	005b      	lsls	r3, r3, #1
 801c126:	4413      	add	r3, r2
 801c128:	00db      	lsls	r3, r3, #3
 801c12a:	440b      	add	r3, r1
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c130:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c134:	4910      	ldr	r1, [pc, #64]	; (801c178 <etharp_update_arp_entry+0x148>)
 801c136:	4613      	mov	r3, r2
 801c138:	005b      	lsls	r3, r3, #1
 801c13a:	4413      	add	r3, r2
 801c13c:	00db      	lsls	r3, r3, #3
 801c13e:	440b      	add	r3, r1
 801c140:	2200      	movs	r2, #0
 801c142:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c14a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c14e:	9300      	str	r3, [sp, #0]
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	6939      	ldr	r1, [r7, #16]
 801c154:	68f8      	ldr	r0, [r7, #12]
 801c156:	f001 ffb9 	bl	801e0cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c15a:	6938      	ldr	r0, [r7, #16]
 801c15c:	f7f6 fcde 	bl	8012b1c <pbuf_free>
  }
  return ERR_OK;
 801c160:	2300      	movs	r3, #0
}
 801c162:	4618      	mov	r0, r3
 801c164:	3718      	adds	r7, #24
 801c166:	46bd      	mov	sp, r7
 801c168:	bd80      	pop	{r7, pc}
 801c16a:	bf00      	nop
 801c16c:	080249a0 	.word	0x080249a0
 801c170:	08024a98 	.word	0x08024a98
 801c174:	08024a18 	.word	0x08024a18
 801c178:	2001025c 	.word	0x2001025c

0801c17c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b084      	sub	sp, #16
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c184:	2300      	movs	r3, #0
 801c186:	60fb      	str	r3, [r7, #12]
 801c188:	e01e      	b.n	801c1c8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c18a:	4913      	ldr	r1, [pc, #76]	; (801c1d8 <etharp_cleanup_netif+0x5c>)
 801c18c:	68fa      	ldr	r2, [r7, #12]
 801c18e:	4613      	mov	r3, r2
 801c190:	005b      	lsls	r3, r3, #1
 801c192:	4413      	add	r3, r2
 801c194:	00db      	lsls	r3, r3, #3
 801c196:	440b      	add	r3, r1
 801c198:	3314      	adds	r3, #20
 801c19a:	781b      	ldrb	r3, [r3, #0]
 801c19c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c19e:	7afb      	ldrb	r3, [r7, #11]
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d00e      	beq.n	801c1c2 <etharp_cleanup_netif+0x46>
 801c1a4:	490c      	ldr	r1, [pc, #48]	; (801c1d8 <etharp_cleanup_netif+0x5c>)
 801c1a6:	68fa      	ldr	r2, [r7, #12]
 801c1a8:	4613      	mov	r3, r2
 801c1aa:	005b      	lsls	r3, r3, #1
 801c1ac:	4413      	add	r3, r2
 801c1ae:	00db      	lsls	r3, r3, #3
 801c1b0:	440b      	add	r3, r1
 801c1b2:	3308      	adds	r3, #8
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	687a      	ldr	r2, [r7, #4]
 801c1b8:	429a      	cmp	r2, r3
 801c1ba:	d102      	bne.n	801c1c2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c1bc:	68f8      	ldr	r0, [r7, #12]
 801c1be:	f7ff fce5 	bl	801bb8c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c1c2:	68fb      	ldr	r3, [r7, #12]
 801c1c4:	3301      	adds	r3, #1
 801c1c6:	60fb      	str	r3, [r7, #12]
 801c1c8:	68fb      	ldr	r3, [r7, #12]
 801c1ca:	2b09      	cmp	r3, #9
 801c1cc:	dddd      	ble.n	801c18a <etharp_cleanup_netif+0xe>
    }
  }
}
 801c1ce:	bf00      	nop
 801c1d0:	bf00      	nop
 801c1d2:	3710      	adds	r7, #16
 801c1d4:	46bd      	mov	sp, r7
 801c1d6:	bd80      	pop	{r7, pc}
 801c1d8:	2001025c 	.word	0x2001025c

0801c1dc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c1dc:	b5b0      	push	{r4, r5, r7, lr}
 801c1de:	b08a      	sub	sp, #40	; 0x28
 801c1e0:	af04      	add	r7, sp, #16
 801c1e2:	6078      	str	r0, [r7, #4]
 801c1e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c1e6:	683b      	ldr	r3, [r7, #0]
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d107      	bne.n	801c1fc <etharp_input+0x20>
 801c1ec:	4b3f      	ldr	r3, [pc, #252]	; (801c2ec <etharp_input+0x110>)
 801c1ee:	f240 228a 	movw	r2, #650	; 0x28a
 801c1f2:	493f      	ldr	r1, [pc, #252]	; (801c2f0 <etharp_input+0x114>)
 801c1f4:	483f      	ldr	r0, [pc, #252]	; (801c2f4 <etharp_input+0x118>)
 801c1f6:	f003 fb65 	bl	801f8c4 <iprintf>
 801c1fa:	e074      	b.n	801c2e6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	685b      	ldr	r3, [r3, #4]
 801c200:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c202:	693b      	ldr	r3, [r7, #16]
 801c204:	881b      	ldrh	r3, [r3, #0]
 801c206:	b29b      	uxth	r3, r3
 801c208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c20c:	d10c      	bne.n	801c228 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c20e:	693b      	ldr	r3, [r7, #16]
 801c210:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c212:	2b06      	cmp	r3, #6
 801c214:	d108      	bne.n	801c228 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c216:	693b      	ldr	r3, [r7, #16]
 801c218:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c21a:	2b04      	cmp	r3, #4
 801c21c:	d104      	bne.n	801c228 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c21e:	693b      	ldr	r3, [r7, #16]
 801c220:	885b      	ldrh	r3, [r3, #2]
 801c222:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c224:	2b08      	cmp	r3, #8
 801c226:	d003      	beq.n	801c230 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	f7f6 fc77 	bl	8012b1c <pbuf_free>
    return;
 801c22e:	e05a      	b.n	801c2e6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c230:	693b      	ldr	r3, [r7, #16]
 801c232:	330e      	adds	r3, #14
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c238:	693b      	ldr	r3, [r7, #16]
 801c23a:	3318      	adds	r3, #24
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c240:	683b      	ldr	r3, [r7, #0]
 801c242:	3304      	adds	r3, #4
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d102      	bne.n	801c250 <etharp_input+0x74>
    for_us = 0;
 801c24a:	2300      	movs	r3, #0
 801c24c:	75fb      	strb	r3, [r7, #23]
 801c24e:	e009      	b.n	801c264 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c250:	68ba      	ldr	r2, [r7, #8]
 801c252:	683b      	ldr	r3, [r7, #0]
 801c254:	3304      	adds	r3, #4
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	429a      	cmp	r2, r3
 801c25a:	bf0c      	ite	eq
 801c25c:	2301      	moveq	r3, #1
 801c25e:	2300      	movne	r3, #0
 801c260:	b2db      	uxtb	r3, r3
 801c262:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c264:	693b      	ldr	r3, [r7, #16]
 801c266:	f103 0208 	add.w	r2, r3, #8
 801c26a:	7dfb      	ldrb	r3, [r7, #23]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d001      	beq.n	801c274 <etharp_input+0x98>
 801c270:	2301      	movs	r3, #1
 801c272:	e000      	b.n	801c276 <etharp_input+0x9a>
 801c274:	2302      	movs	r3, #2
 801c276:	f107 010c 	add.w	r1, r7, #12
 801c27a:	6838      	ldr	r0, [r7, #0]
 801c27c:	f7ff fed8 	bl	801c030 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c280:	693b      	ldr	r3, [r7, #16]
 801c282:	88db      	ldrh	r3, [r3, #6]
 801c284:	b29b      	uxth	r3, r3
 801c286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c28a:	d003      	beq.n	801c294 <etharp_input+0xb8>
 801c28c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c290:	d01e      	beq.n	801c2d0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801c292:	e025      	b.n	801c2e0 <etharp_input+0x104>
      if (for_us) {
 801c294:	7dfb      	ldrb	r3, [r7, #23]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d021      	beq.n	801c2de <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c29a:	683b      	ldr	r3, [r7, #0]
 801c29c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c2a0:	693b      	ldr	r3, [r7, #16]
 801c2a2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c2a6:	683b      	ldr	r3, [r7, #0]
 801c2a8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801c2ac:	683b      	ldr	r3, [r7, #0]
 801c2ae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c2b0:	693a      	ldr	r2, [r7, #16]
 801c2b2:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c2b4:	2102      	movs	r1, #2
 801c2b6:	9103      	str	r1, [sp, #12]
 801c2b8:	f107 010c 	add.w	r1, r7, #12
 801c2bc:	9102      	str	r1, [sp, #8]
 801c2be:	9201      	str	r2, [sp, #4]
 801c2c0:	9300      	str	r3, [sp, #0]
 801c2c2:	462b      	mov	r3, r5
 801c2c4:	4622      	mov	r2, r4
 801c2c6:	4601      	mov	r1, r0
 801c2c8:	6838      	ldr	r0, [r7, #0]
 801c2ca:	f000 faef 	bl	801c8ac <etharp_raw>
      break;
 801c2ce:	e006      	b.n	801c2de <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801c2d0:	f107 030c 	add.w	r3, r7, #12
 801c2d4:	4619      	mov	r1, r3
 801c2d6:	6838      	ldr	r0, [r7, #0]
 801c2d8:	f7fe f9fc 	bl	801a6d4 <dhcp_arp_reply>
      break;
 801c2dc:	e000      	b.n	801c2e0 <etharp_input+0x104>
      break;
 801c2de:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c2e0:	6878      	ldr	r0, [r7, #4]
 801c2e2:	f7f6 fc1b 	bl	8012b1c <pbuf_free>
}
 801c2e6:	3718      	adds	r7, #24
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	bdb0      	pop	{r4, r5, r7, pc}
 801c2ec:	080249a0 	.word	0x080249a0
 801c2f0:	08024af0 	.word	0x08024af0
 801c2f4:	08024a18 	.word	0x08024a18

0801c2f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c2f8:	b580      	push	{r7, lr}
 801c2fa:	b086      	sub	sp, #24
 801c2fc:	af02      	add	r7, sp, #8
 801c2fe:	60f8      	str	r0, [r7, #12]
 801c300:	60b9      	str	r1, [r7, #8]
 801c302:	4613      	mov	r3, r2
 801c304:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c306:	79fa      	ldrb	r2, [r7, #7]
 801c308:	4944      	ldr	r1, [pc, #272]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c30a:	4613      	mov	r3, r2
 801c30c:	005b      	lsls	r3, r3, #1
 801c30e:	4413      	add	r3, r2
 801c310:	00db      	lsls	r3, r3, #3
 801c312:	440b      	add	r3, r1
 801c314:	3314      	adds	r3, #20
 801c316:	781b      	ldrb	r3, [r3, #0]
 801c318:	2b01      	cmp	r3, #1
 801c31a:	d806      	bhi.n	801c32a <etharp_output_to_arp_index+0x32>
 801c31c:	4b40      	ldr	r3, [pc, #256]	; (801c420 <etharp_output_to_arp_index+0x128>)
 801c31e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801c322:	4940      	ldr	r1, [pc, #256]	; (801c424 <etharp_output_to_arp_index+0x12c>)
 801c324:	4840      	ldr	r0, [pc, #256]	; (801c428 <etharp_output_to_arp_index+0x130>)
 801c326:	f003 facd 	bl	801f8c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c32a:	79fa      	ldrb	r2, [r7, #7]
 801c32c:	493b      	ldr	r1, [pc, #236]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c32e:	4613      	mov	r3, r2
 801c330:	005b      	lsls	r3, r3, #1
 801c332:	4413      	add	r3, r2
 801c334:	00db      	lsls	r3, r3, #3
 801c336:	440b      	add	r3, r1
 801c338:	3314      	adds	r3, #20
 801c33a:	781b      	ldrb	r3, [r3, #0]
 801c33c:	2b02      	cmp	r3, #2
 801c33e:	d153      	bne.n	801c3e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c340:	79fa      	ldrb	r2, [r7, #7]
 801c342:	4936      	ldr	r1, [pc, #216]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c344:	4613      	mov	r3, r2
 801c346:	005b      	lsls	r3, r3, #1
 801c348:	4413      	add	r3, r2
 801c34a:	00db      	lsls	r3, r3, #3
 801c34c:	440b      	add	r3, r1
 801c34e:	3312      	adds	r3, #18
 801c350:	881b      	ldrh	r3, [r3, #0]
 801c352:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801c356:	d919      	bls.n	801c38c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c358:	79fa      	ldrb	r2, [r7, #7]
 801c35a:	4613      	mov	r3, r2
 801c35c:	005b      	lsls	r3, r3, #1
 801c35e:	4413      	add	r3, r2
 801c360:	00db      	lsls	r3, r3, #3
 801c362:	4a2e      	ldr	r2, [pc, #184]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c364:	4413      	add	r3, r2
 801c366:	3304      	adds	r3, #4
 801c368:	4619      	mov	r1, r3
 801c36a:	68f8      	ldr	r0, [r7, #12]
 801c36c:	f000 fb4c 	bl	801ca08 <etharp_request>
 801c370:	4603      	mov	r3, r0
 801c372:	2b00      	cmp	r3, #0
 801c374:	d138      	bne.n	801c3e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c376:	79fa      	ldrb	r2, [r7, #7]
 801c378:	4928      	ldr	r1, [pc, #160]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c37a:	4613      	mov	r3, r2
 801c37c:	005b      	lsls	r3, r3, #1
 801c37e:	4413      	add	r3, r2
 801c380:	00db      	lsls	r3, r3, #3
 801c382:	440b      	add	r3, r1
 801c384:	3314      	adds	r3, #20
 801c386:	2203      	movs	r2, #3
 801c388:	701a      	strb	r2, [r3, #0]
 801c38a:	e02d      	b.n	801c3e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c38c:	79fa      	ldrb	r2, [r7, #7]
 801c38e:	4923      	ldr	r1, [pc, #140]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c390:	4613      	mov	r3, r2
 801c392:	005b      	lsls	r3, r3, #1
 801c394:	4413      	add	r3, r2
 801c396:	00db      	lsls	r3, r3, #3
 801c398:	440b      	add	r3, r1
 801c39a:	3312      	adds	r3, #18
 801c39c:	881b      	ldrh	r3, [r3, #0]
 801c39e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c3a2:	d321      	bcc.n	801c3e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c3a4:	79fa      	ldrb	r2, [r7, #7]
 801c3a6:	4613      	mov	r3, r2
 801c3a8:	005b      	lsls	r3, r3, #1
 801c3aa:	4413      	add	r3, r2
 801c3ac:	00db      	lsls	r3, r3, #3
 801c3ae:	4a1b      	ldr	r2, [pc, #108]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c3b0:	4413      	add	r3, r2
 801c3b2:	1d19      	adds	r1, r3, #4
 801c3b4:	79fa      	ldrb	r2, [r7, #7]
 801c3b6:	4613      	mov	r3, r2
 801c3b8:	005b      	lsls	r3, r3, #1
 801c3ba:	4413      	add	r3, r2
 801c3bc:	00db      	lsls	r3, r3, #3
 801c3be:	3308      	adds	r3, #8
 801c3c0:	4a16      	ldr	r2, [pc, #88]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c3c2:	4413      	add	r3, r2
 801c3c4:	3304      	adds	r3, #4
 801c3c6:	461a      	mov	r2, r3
 801c3c8:	68f8      	ldr	r0, [r7, #12]
 801c3ca:	f000 fafb 	bl	801c9c4 <etharp_request_dst>
 801c3ce:	4603      	mov	r3, r0
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d109      	bne.n	801c3e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c3d4:	79fa      	ldrb	r2, [r7, #7]
 801c3d6:	4911      	ldr	r1, [pc, #68]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c3d8:	4613      	mov	r3, r2
 801c3da:	005b      	lsls	r3, r3, #1
 801c3dc:	4413      	add	r3, r2
 801c3de:	00db      	lsls	r3, r3, #3
 801c3e0:	440b      	add	r3, r1
 801c3e2:	3314      	adds	r3, #20
 801c3e4:	2203      	movs	r2, #3
 801c3e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801c3ee:	79fa      	ldrb	r2, [r7, #7]
 801c3f0:	4613      	mov	r3, r2
 801c3f2:	005b      	lsls	r3, r3, #1
 801c3f4:	4413      	add	r3, r2
 801c3f6:	00db      	lsls	r3, r3, #3
 801c3f8:	3308      	adds	r3, #8
 801c3fa:	4a08      	ldr	r2, [pc, #32]	; (801c41c <etharp_output_to_arp_index+0x124>)
 801c3fc:	4413      	add	r3, r2
 801c3fe:	3304      	adds	r3, #4
 801c400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c404:	9200      	str	r2, [sp, #0]
 801c406:	460a      	mov	r2, r1
 801c408:	68b9      	ldr	r1, [r7, #8]
 801c40a:	68f8      	ldr	r0, [r7, #12]
 801c40c:	f001 fe5e 	bl	801e0cc <ethernet_output>
 801c410:	4603      	mov	r3, r0
}
 801c412:	4618      	mov	r0, r3
 801c414:	3710      	adds	r7, #16
 801c416:	46bd      	mov	sp, r7
 801c418:	bd80      	pop	{r7, pc}
 801c41a:	bf00      	nop
 801c41c:	2001025c 	.word	0x2001025c
 801c420:	080249a0 	.word	0x080249a0
 801c424:	08024b10 	.word	0x08024b10
 801c428:	08024a18 	.word	0x08024a18

0801c42c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c42c:	b580      	push	{r7, lr}
 801c42e:	b08a      	sub	sp, #40	; 0x28
 801c430:	af02      	add	r7, sp, #8
 801c432:	60f8      	str	r0, [r7, #12]
 801c434:	60b9      	str	r1, [r7, #8]
 801c436:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d106      	bne.n	801c450 <etharp_output+0x24>
 801c442:	4b73      	ldr	r3, [pc, #460]	; (801c610 <etharp_output+0x1e4>)
 801c444:	f240 321e 	movw	r2, #798	; 0x31e
 801c448:	4972      	ldr	r1, [pc, #456]	; (801c614 <etharp_output+0x1e8>)
 801c44a:	4873      	ldr	r0, [pc, #460]	; (801c618 <etharp_output+0x1ec>)
 801c44c:	f003 fa3a 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c450:	68bb      	ldr	r3, [r7, #8]
 801c452:	2b00      	cmp	r3, #0
 801c454:	d106      	bne.n	801c464 <etharp_output+0x38>
 801c456:	4b6e      	ldr	r3, [pc, #440]	; (801c610 <etharp_output+0x1e4>)
 801c458:	f240 321f 	movw	r2, #799	; 0x31f
 801c45c:	496f      	ldr	r1, [pc, #444]	; (801c61c <etharp_output+0x1f0>)
 801c45e:	486e      	ldr	r0, [pc, #440]	; (801c618 <etharp_output+0x1ec>)
 801c460:	f003 fa30 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	2b00      	cmp	r3, #0
 801c468:	d106      	bne.n	801c478 <etharp_output+0x4c>
 801c46a:	4b69      	ldr	r3, [pc, #420]	; (801c610 <etharp_output+0x1e4>)
 801c46c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c470:	496b      	ldr	r1, [pc, #428]	; (801c620 <etharp_output+0x1f4>)
 801c472:	4869      	ldr	r0, [pc, #420]	; (801c618 <etharp_output+0x1ec>)
 801c474:	f003 fa26 	bl	801f8c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	68f9      	ldr	r1, [r7, #12]
 801c47e:	4618      	mov	r0, r3
 801c480:	f000 ff16 	bl	801d2b0 <ip4_addr_isbroadcast_u32>
 801c484:	4603      	mov	r3, r0
 801c486:	2b00      	cmp	r3, #0
 801c488:	d002      	beq.n	801c490 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c48a:	4b66      	ldr	r3, [pc, #408]	; (801c624 <etharp_output+0x1f8>)
 801c48c:	61fb      	str	r3, [r7, #28]
 801c48e:	e0af      	b.n	801c5f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c498:	2be0      	cmp	r3, #224	; 0xe0
 801c49a:	d118      	bne.n	801c4ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c49c:	2301      	movs	r3, #1
 801c49e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c4a4:	235e      	movs	r3, #94	; 0x5e
 801c4a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	3301      	adds	r3, #1
 801c4ac:	781b      	ldrb	r3, [r3, #0]
 801c4ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c4b2:	b2db      	uxtb	r3, r3
 801c4b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	3302      	adds	r3, #2
 801c4ba:	781b      	ldrb	r3, [r3, #0]
 801c4bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	3303      	adds	r3, #3
 801c4c2:	781b      	ldrb	r3, [r3, #0]
 801c4c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c4c6:	f107 0310 	add.w	r3, r7, #16
 801c4ca:	61fb      	str	r3, [r7, #28]
 801c4cc:	e090      	b.n	801c5f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	681a      	ldr	r2, [r3, #0]
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	3304      	adds	r3, #4
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	405a      	eors	r2, r3
 801c4da:	68fb      	ldr	r3, [r7, #12]
 801c4dc:	3308      	adds	r3, #8
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	4013      	ands	r3, r2
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d012      	beq.n	801c50c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c4ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c4f0:	4293      	cmp	r3, r2
 801c4f2:	d00b      	beq.n	801c50c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	330c      	adds	r3, #12
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d003      	beq.n	801c506 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	330c      	adds	r3, #12
 801c502:	61bb      	str	r3, [r7, #24]
 801c504:	e002      	b.n	801c50c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c506:	f06f 0303 	mvn.w	r3, #3
 801c50a:	e07d      	b.n	801c608 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c50c:	4b46      	ldr	r3, [pc, #280]	; (801c628 <etharp_output+0x1fc>)
 801c50e:	781b      	ldrb	r3, [r3, #0]
 801c510:	4619      	mov	r1, r3
 801c512:	4a46      	ldr	r2, [pc, #280]	; (801c62c <etharp_output+0x200>)
 801c514:	460b      	mov	r3, r1
 801c516:	005b      	lsls	r3, r3, #1
 801c518:	440b      	add	r3, r1
 801c51a:	00db      	lsls	r3, r3, #3
 801c51c:	4413      	add	r3, r2
 801c51e:	3314      	adds	r3, #20
 801c520:	781b      	ldrb	r3, [r3, #0]
 801c522:	2b01      	cmp	r3, #1
 801c524:	d925      	bls.n	801c572 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c526:	4b40      	ldr	r3, [pc, #256]	; (801c628 <etharp_output+0x1fc>)
 801c528:	781b      	ldrb	r3, [r3, #0]
 801c52a:	4619      	mov	r1, r3
 801c52c:	4a3f      	ldr	r2, [pc, #252]	; (801c62c <etharp_output+0x200>)
 801c52e:	460b      	mov	r3, r1
 801c530:	005b      	lsls	r3, r3, #1
 801c532:	440b      	add	r3, r1
 801c534:	00db      	lsls	r3, r3, #3
 801c536:	4413      	add	r3, r2
 801c538:	3308      	adds	r3, #8
 801c53a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c53c:	68fa      	ldr	r2, [r7, #12]
 801c53e:	429a      	cmp	r2, r3
 801c540:	d117      	bne.n	801c572 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c542:	69bb      	ldr	r3, [r7, #24]
 801c544:	681a      	ldr	r2, [r3, #0]
 801c546:	4b38      	ldr	r3, [pc, #224]	; (801c628 <etharp_output+0x1fc>)
 801c548:	781b      	ldrb	r3, [r3, #0]
 801c54a:	4618      	mov	r0, r3
 801c54c:	4937      	ldr	r1, [pc, #220]	; (801c62c <etharp_output+0x200>)
 801c54e:	4603      	mov	r3, r0
 801c550:	005b      	lsls	r3, r3, #1
 801c552:	4403      	add	r3, r0
 801c554:	00db      	lsls	r3, r3, #3
 801c556:	440b      	add	r3, r1
 801c558:	3304      	adds	r3, #4
 801c55a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c55c:	429a      	cmp	r2, r3
 801c55e:	d108      	bne.n	801c572 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c560:	4b31      	ldr	r3, [pc, #196]	; (801c628 <etharp_output+0x1fc>)
 801c562:	781b      	ldrb	r3, [r3, #0]
 801c564:	461a      	mov	r2, r3
 801c566:	68b9      	ldr	r1, [r7, #8]
 801c568:	68f8      	ldr	r0, [r7, #12]
 801c56a:	f7ff fec5 	bl	801c2f8 <etharp_output_to_arp_index>
 801c56e:	4603      	mov	r3, r0
 801c570:	e04a      	b.n	801c608 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c572:	2300      	movs	r3, #0
 801c574:	75fb      	strb	r3, [r7, #23]
 801c576:	e031      	b.n	801c5dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c578:	7dfa      	ldrb	r2, [r7, #23]
 801c57a:	492c      	ldr	r1, [pc, #176]	; (801c62c <etharp_output+0x200>)
 801c57c:	4613      	mov	r3, r2
 801c57e:	005b      	lsls	r3, r3, #1
 801c580:	4413      	add	r3, r2
 801c582:	00db      	lsls	r3, r3, #3
 801c584:	440b      	add	r3, r1
 801c586:	3314      	adds	r3, #20
 801c588:	781b      	ldrb	r3, [r3, #0]
 801c58a:	2b01      	cmp	r3, #1
 801c58c:	d923      	bls.n	801c5d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c58e:	7dfa      	ldrb	r2, [r7, #23]
 801c590:	4926      	ldr	r1, [pc, #152]	; (801c62c <etharp_output+0x200>)
 801c592:	4613      	mov	r3, r2
 801c594:	005b      	lsls	r3, r3, #1
 801c596:	4413      	add	r3, r2
 801c598:	00db      	lsls	r3, r3, #3
 801c59a:	440b      	add	r3, r1
 801c59c:	3308      	adds	r3, #8
 801c59e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c5a0:	68fa      	ldr	r2, [r7, #12]
 801c5a2:	429a      	cmp	r2, r3
 801c5a4:	d117      	bne.n	801c5d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c5a6:	69bb      	ldr	r3, [r7, #24]
 801c5a8:	6819      	ldr	r1, [r3, #0]
 801c5aa:	7dfa      	ldrb	r2, [r7, #23]
 801c5ac:	481f      	ldr	r0, [pc, #124]	; (801c62c <etharp_output+0x200>)
 801c5ae:	4613      	mov	r3, r2
 801c5b0:	005b      	lsls	r3, r3, #1
 801c5b2:	4413      	add	r3, r2
 801c5b4:	00db      	lsls	r3, r3, #3
 801c5b6:	4403      	add	r3, r0
 801c5b8:	3304      	adds	r3, #4
 801c5ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c5bc:	4299      	cmp	r1, r3
 801c5be:	d10a      	bne.n	801c5d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c5c0:	4a19      	ldr	r2, [pc, #100]	; (801c628 <etharp_output+0x1fc>)
 801c5c2:	7dfb      	ldrb	r3, [r7, #23]
 801c5c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c5c6:	7dfb      	ldrb	r3, [r7, #23]
 801c5c8:	461a      	mov	r2, r3
 801c5ca:	68b9      	ldr	r1, [r7, #8]
 801c5cc:	68f8      	ldr	r0, [r7, #12]
 801c5ce:	f7ff fe93 	bl	801c2f8 <etharp_output_to_arp_index>
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	e018      	b.n	801c608 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c5d6:	7dfb      	ldrb	r3, [r7, #23]
 801c5d8:	3301      	adds	r3, #1
 801c5da:	75fb      	strb	r3, [r7, #23]
 801c5dc:	7dfb      	ldrb	r3, [r7, #23]
 801c5de:	2b09      	cmp	r3, #9
 801c5e0:	d9ca      	bls.n	801c578 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c5e2:	68ba      	ldr	r2, [r7, #8]
 801c5e4:	69b9      	ldr	r1, [r7, #24]
 801c5e6:	68f8      	ldr	r0, [r7, #12]
 801c5e8:	f000 f822 	bl	801c630 <etharp_query>
 801c5ec:	4603      	mov	r3, r0
 801c5ee:	e00b      	b.n	801c608 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c5f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c5fa:	9300      	str	r3, [sp, #0]
 801c5fc:	69fb      	ldr	r3, [r7, #28]
 801c5fe:	68b9      	ldr	r1, [r7, #8]
 801c600:	68f8      	ldr	r0, [r7, #12]
 801c602:	f001 fd63 	bl	801e0cc <ethernet_output>
 801c606:	4603      	mov	r3, r0
}
 801c608:	4618      	mov	r0, r3
 801c60a:	3720      	adds	r7, #32
 801c60c:	46bd      	mov	sp, r7
 801c60e:	bd80      	pop	{r7, pc}
 801c610:	080249a0 	.word	0x080249a0
 801c614:	08024af0 	.word	0x08024af0
 801c618:	08024a18 	.word	0x08024a18
 801c61c:	08024b40 	.word	0x08024b40
 801c620:	08024ae0 	.word	0x08024ae0
 801c624:	080252a0 	.word	0x080252a0
 801c628:	2001034c 	.word	0x2001034c
 801c62c:	2001025c 	.word	0x2001025c

0801c630 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c630:	b580      	push	{r7, lr}
 801c632:	b08c      	sub	sp, #48	; 0x30
 801c634:	af02      	add	r7, sp, #8
 801c636:	60f8      	str	r0, [r7, #12]
 801c638:	60b9      	str	r1, [r7, #8]
 801c63a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	332a      	adds	r3, #42	; 0x2a
 801c640:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c642:	23ff      	movs	r3, #255	; 0xff
 801c644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c648:	2300      	movs	r3, #0
 801c64a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c64c:	68bb      	ldr	r3, [r7, #8]
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	68f9      	ldr	r1, [r7, #12]
 801c652:	4618      	mov	r0, r3
 801c654:	f000 fe2c 	bl	801d2b0 <ip4_addr_isbroadcast_u32>
 801c658:	4603      	mov	r3, r0
 801c65a:	2b00      	cmp	r3, #0
 801c65c:	d10c      	bne.n	801c678 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c65e:	68bb      	ldr	r3, [r7, #8]
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c666:	2be0      	cmp	r3, #224	; 0xe0
 801c668:	d006      	beq.n	801c678 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c66a:	68bb      	ldr	r3, [r7, #8]
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d003      	beq.n	801c678 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c670:	68bb      	ldr	r3, [r7, #8]
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d102      	bne.n	801c67e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c678:	f06f 030f 	mvn.w	r3, #15
 801c67c:	e101      	b.n	801c882 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c67e:	68fa      	ldr	r2, [r7, #12]
 801c680:	2101      	movs	r1, #1
 801c682:	68b8      	ldr	r0, [r7, #8]
 801c684:	f7ff fb5c 	bl	801bd40 <etharp_find_entry>
 801c688:	4603      	mov	r3, r0
 801c68a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c68c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c690:	2b00      	cmp	r3, #0
 801c692:	da02      	bge.n	801c69a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c694:	8a7b      	ldrh	r3, [r7, #18]
 801c696:	b25b      	sxtb	r3, r3
 801c698:	e0f3      	b.n	801c882 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c69a:	8a7b      	ldrh	r3, [r7, #18]
 801c69c:	2b7e      	cmp	r3, #126	; 0x7e
 801c69e:	d906      	bls.n	801c6ae <etharp_query+0x7e>
 801c6a0:	4b7a      	ldr	r3, [pc, #488]	; (801c88c <etharp_query+0x25c>)
 801c6a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c6a6:	497a      	ldr	r1, [pc, #488]	; (801c890 <etharp_query+0x260>)
 801c6a8:	487a      	ldr	r0, [pc, #488]	; (801c894 <etharp_query+0x264>)
 801c6aa:	f003 f90b 	bl	801f8c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c6ae:	8a7b      	ldrh	r3, [r7, #18]
 801c6b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c6b2:	7c7a      	ldrb	r2, [r7, #17]
 801c6b4:	4978      	ldr	r1, [pc, #480]	; (801c898 <etharp_query+0x268>)
 801c6b6:	4613      	mov	r3, r2
 801c6b8:	005b      	lsls	r3, r3, #1
 801c6ba:	4413      	add	r3, r2
 801c6bc:	00db      	lsls	r3, r3, #3
 801c6be:	440b      	add	r3, r1
 801c6c0:	3314      	adds	r3, #20
 801c6c2:	781b      	ldrb	r3, [r3, #0]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d115      	bne.n	801c6f4 <etharp_query+0xc4>
    is_new_entry = 1;
 801c6c8:	2301      	movs	r3, #1
 801c6ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c6cc:	7c7a      	ldrb	r2, [r7, #17]
 801c6ce:	4972      	ldr	r1, [pc, #456]	; (801c898 <etharp_query+0x268>)
 801c6d0:	4613      	mov	r3, r2
 801c6d2:	005b      	lsls	r3, r3, #1
 801c6d4:	4413      	add	r3, r2
 801c6d6:	00db      	lsls	r3, r3, #3
 801c6d8:	440b      	add	r3, r1
 801c6da:	3314      	adds	r3, #20
 801c6dc:	2201      	movs	r2, #1
 801c6de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c6e0:	7c7a      	ldrb	r2, [r7, #17]
 801c6e2:	496d      	ldr	r1, [pc, #436]	; (801c898 <etharp_query+0x268>)
 801c6e4:	4613      	mov	r3, r2
 801c6e6:	005b      	lsls	r3, r3, #1
 801c6e8:	4413      	add	r3, r2
 801c6ea:	00db      	lsls	r3, r3, #3
 801c6ec:	440b      	add	r3, r1
 801c6ee:	3308      	adds	r3, #8
 801c6f0:	68fa      	ldr	r2, [r7, #12]
 801c6f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c6f4:	7c7a      	ldrb	r2, [r7, #17]
 801c6f6:	4968      	ldr	r1, [pc, #416]	; (801c898 <etharp_query+0x268>)
 801c6f8:	4613      	mov	r3, r2
 801c6fa:	005b      	lsls	r3, r3, #1
 801c6fc:	4413      	add	r3, r2
 801c6fe:	00db      	lsls	r3, r3, #3
 801c700:	440b      	add	r3, r1
 801c702:	3314      	adds	r3, #20
 801c704:	781b      	ldrb	r3, [r3, #0]
 801c706:	2b01      	cmp	r3, #1
 801c708:	d011      	beq.n	801c72e <etharp_query+0xfe>
 801c70a:	7c7a      	ldrb	r2, [r7, #17]
 801c70c:	4962      	ldr	r1, [pc, #392]	; (801c898 <etharp_query+0x268>)
 801c70e:	4613      	mov	r3, r2
 801c710:	005b      	lsls	r3, r3, #1
 801c712:	4413      	add	r3, r2
 801c714:	00db      	lsls	r3, r3, #3
 801c716:	440b      	add	r3, r1
 801c718:	3314      	adds	r3, #20
 801c71a:	781b      	ldrb	r3, [r3, #0]
 801c71c:	2b01      	cmp	r3, #1
 801c71e:	d806      	bhi.n	801c72e <etharp_query+0xfe>
 801c720:	4b5a      	ldr	r3, [pc, #360]	; (801c88c <etharp_query+0x25c>)
 801c722:	f240 32cd 	movw	r2, #973	; 0x3cd
 801c726:	495d      	ldr	r1, [pc, #372]	; (801c89c <etharp_query+0x26c>)
 801c728:	485a      	ldr	r0, [pc, #360]	; (801c894 <etharp_query+0x264>)
 801c72a:	f003 f8cb 	bl	801f8c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c72e:	6a3b      	ldr	r3, [r7, #32]
 801c730:	2b00      	cmp	r3, #0
 801c732:	d102      	bne.n	801c73a <etharp_query+0x10a>
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	2b00      	cmp	r3, #0
 801c738:	d10c      	bne.n	801c754 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c73a:	68b9      	ldr	r1, [r7, #8]
 801c73c:	68f8      	ldr	r0, [r7, #12]
 801c73e:	f000 f963 	bl	801ca08 <etharp_request>
 801c742:	4603      	mov	r3, r0
 801c744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d102      	bne.n	801c754 <etharp_query+0x124>
      return result;
 801c74e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c752:	e096      	b.n	801c882 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d106      	bne.n	801c768 <etharp_query+0x138>
 801c75a:	4b4c      	ldr	r3, [pc, #304]	; (801c88c <etharp_query+0x25c>)
 801c75c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c760:	494f      	ldr	r1, [pc, #316]	; (801c8a0 <etharp_query+0x270>)
 801c762:	484c      	ldr	r0, [pc, #304]	; (801c894 <etharp_query+0x264>)
 801c764:	f003 f8ae 	bl	801f8c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c768:	7c7a      	ldrb	r2, [r7, #17]
 801c76a:	494b      	ldr	r1, [pc, #300]	; (801c898 <etharp_query+0x268>)
 801c76c:	4613      	mov	r3, r2
 801c76e:	005b      	lsls	r3, r3, #1
 801c770:	4413      	add	r3, r2
 801c772:	00db      	lsls	r3, r3, #3
 801c774:	440b      	add	r3, r1
 801c776:	3314      	adds	r3, #20
 801c778:	781b      	ldrb	r3, [r3, #0]
 801c77a:	2b01      	cmp	r3, #1
 801c77c:	d917      	bls.n	801c7ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c77e:	4a49      	ldr	r2, [pc, #292]	; (801c8a4 <etharp_query+0x274>)
 801c780:	7c7b      	ldrb	r3, [r7, #17]
 801c782:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c784:	7c7a      	ldrb	r2, [r7, #17]
 801c786:	4613      	mov	r3, r2
 801c788:	005b      	lsls	r3, r3, #1
 801c78a:	4413      	add	r3, r2
 801c78c:	00db      	lsls	r3, r3, #3
 801c78e:	3308      	adds	r3, #8
 801c790:	4a41      	ldr	r2, [pc, #260]	; (801c898 <etharp_query+0x268>)
 801c792:	4413      	add	r3, r2
 801c794:	3304      	adds	r3, #4
 801c796:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c79a:	9200      	str	r2, [sp, #0]
 801c79c:	697a      	ldr	r2, [r7, #20]
 801c79e:	6879      	ldr	r1, [r7, #4]
 801c7a0:	68f8      	ldr	r0, [r7, #12]
 801c7a2:	f001 fc93 	bl	801e0cc <ethernet_output>
 801c7a6:	4603      	mov	r3, r0
 801c7a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c7ac:	e067      	b.n	801c87e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c7ae:	7c7a      	ldrb	r2, [r7, #17]
 801c7b0:	4939      	ldr	r1, [pc, #228]	; (801c898 <etharp_query+0x268>)
 801c7b2:	4613      	mov	r3, r2
 801c7b4:	005b      	lsls	r3, r3, #1
 801c7b6:	4413      	add	r3, r2
 801c7b8:	00db      	lsls	r3, r3, #3
 801c7ba:	440b      	add	r3, r1
 801c7bc:	3314      	adds	r3, #20
 801c7be:	781b      	ldrb	r3, [r3, #0]
 801c7c0:	2b01      	cmp	r3, #1
 801c7c2:	d15c      	bne.n	801c87e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c7cc:	e01c      	b.n	801c808 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c7ce:	69fb      	ldr	r3, [r7, #28]
 801c7d0:	895a      	ldrh	r2, [r3, #10]
 801c7d2:	69fb      	ldr	r3, [r7, #28]
 801c7d4:	891b      	ldrh	r3, [r3, #8]
 801c7d6:	429a      	cmp	r2, r3
 801c7d8:	d10a      	bne.n	801c7f0 <etharp_query+0x1c0>
 801c7da:	69fb      	ldr	r3, [r7, #28]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d006      	beq.n	801c7f0 <etharp_query+0x1c0>
 801c7e2:	4b2a      	ldr	r3, [pc, #168]	; (801c88c <etharp_query+0x25c>)
 801c7e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c7e8:	492f      	ldr	r1, [pc, #188]	; (801c8a8 <etharp_query+0x278>)
 801c7ea:	482a      	ldr	r0, [pc, #168]	; (801c894 <etharp_query+0x264>)
 801c7ec:	f003 f86a 	bl	801f8c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c7f0:	69fb      	ldr	r3, [r7, #28]
 801c7f2:	7b1b      	ldrb	r3, [r3, #12]
 801c7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d002      	beq.n	801c802 <etharp_query+0x1d2>
        copy_needed = 1;
 801c7fc:	2301      	movs	r3, #1
 801c7fe:	61bb      	str	r3, [r7, #24]
        break;
 801c800:	e005      	b.n	801c80e <etharp_query+0x1de>
      }
      p = p->next;
 801c802:	69fb      	ldr	r3, [r7, #28]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c808:	69fb      	ldr	r3, [r7, #28]
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d1df      	bne.n	801c7ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c80e:	69bb      	ldr	r3, [r7, #24]
 801c810:	2b00      	cmp	r3, #0
 801c812:	d007      	beq.n	801c824 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c814:	687a      	ldr	r2, [r7, #4]
 801c816:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c81a:	200e      	movs	r0, #14
 801c81c:	f7f6 fbf6 	bl	801300c <pbuf_clone>
 801c820:	61f8      	str	r0, [r7, #28]
 801c822:	e004      	b.n	801c82e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c828:	69f8      	ldr	r0, [r7, #28]
 801c82a:	f7f6 fa1d 	bl	8012c68 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c82e:	69fb      	ldr	r3, [r7, #28]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d021      	beq.n	801c878 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c834:	7c7a      	ldrb	r2, [r7, #17]
 801c836:	4918      	ldr	r1, [pc, #96]	; (801c898 <etharp_query+0x268>)
 801c838:	4613      	mov	r3, r2
 801c83a:	005b      	lsls	r3, r3, #1
 801c83c:	4413      	add	r3, r2
 801c83e:	00db      	lsls	r3, r3, #3
 801c840:	440b      	add	r3, r1
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d00a      	beq.n	801c85e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c848:	7c7a      	ldrb	r2, [r7, #17]
 801c84a:	4913      	ldr	r1, [pc, #76]	; (801c898 <etharp_query+0x268>)
 801c84c:	4613      	mov	r3, r2
 801c84e:	005b      	lsls	r3, r3, #1
 801c850:	4413      	add	r3, r2
 801c852:	00db      	lsls	r3, r3, #3
 801c854:	440b      	add	r3, r1
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	4618      	mov	r0, r3
 801c85a:	f7f6 f95f 	bl	8012b1c <pbuf_free>
      }
      arp_table[i].q = p;
 801c85e:	7c7a      	ldrb	r2, [r7, #17]
 801c860:	490d      	ldr	r1, [pc, #52]	; (801c898 <etharp_query+0x268>)
 801c862:	4613      	mov	r3, r2
 801c864:	005b      	lsls	r3, r3, #1
 801c866:	4413      	add	r3, r2
 801c868:	00db      	lsls	r3, r3, #3
 801c86a:	440b      	add	r3, r1
 801c86c:	69fa      	ldr	r2, [r7, #28]
 801c86e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c870:	2300      	movs	r3, #0
 801c872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c876:	e002      	b.n	801c87e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c878:	23ff      	movs	r3, #255	; 0xff
 801c87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c87e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c882:	4618      	mov	r0, r3
 801c884:	3728      	adds	r7, #40	; 0x28
 801c886:	46bd      	mov	sp, r7
 801c888:	bd80      	pop	{r7, pc}
 801c88a:	bf00      	nop
 801c88c:	080249a0 	.word	0x080249a0
 801c890:	08024b4c 	.word	0x08024b4c
 801c894:	08024a18 	.word	0x08024a18
 801c898:	2001025c 	.word	0x2001025c
 801c89c:	08024b5c 	.word	0x08024b5c
 801c8a0:	08024b40 	.word	0x08024b40
 801c8a4:	2001034c 	.word	0x2001034c
 801c8a8:	08024b84 	.word	0x08024b84

0801c8ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c8ac:	b580      	push	{r7, lr}
 801c8ae:	b08a      	sub	sp, #40	; 0x28
 801c8b0:	af02      	add	r7, sp, #8
 801c8b2:	60f8      	str	r0, [r7, #12]
 801c8b4:	60b9      	str	r1, [r7, #8]
 801c8b6:	607a      	str	r2, [r7, #4]
 801c8b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c8be:	68fb      	ldr	r3, [r7, #12]
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d106      	bne.n	801c8d2 <etharp_raw+0x26>
 801c8c4:	4b3a      	ldr	r3, [pc, #232]	; (801c9b0 <etharp_raw+0x104>)
 801c8c6:	f240 4257 	movw	r2, #1111	; 0x457
 801c8ca:	493a      	ldr	r1, [pc, #232]	; (801c9b4 <etharp_raw+0x108>)
 801c8cc:	483a      	ldr	r0, [pc, #232]	; (801c9b8 <etharp_raw+0x10c>)
 801c8ce:	f002 fff9 	bl	801f8c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c8d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c8d6:	211c      	movs	r1, #28
 801c8d8:	200e      	movs	r0, #14
 801c8da:	f7f5 fe3b 	bl	8012554 <pbuf_alloc>
 801c8de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c8e0:	69bb      	ldr	r3, [r7, #24]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d102      	bne.n	801c8ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c8e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c8ea:	e05d      	b.n	801c9a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c8ec:	69bb      	ldr	r3, [r7, #24]
 801c8ee:	895b      	ldrh	r3, [r3, #10]
 801c8f0:	2b1b      	cmp	r3, #27
 801c8f2:	d806      	bhi.n	801c902 <etharp_raw+0x56>
 801c8f4:	4b2e      	ldr	r3, [pc, #184]	; (801c9b0 <etharp_raw+0x104>)
 801c8f6:	f240 4262 	movw	r2, #1122	; 0x462
 801c8fa:	4930      	ldr	r1, [pc, #192]	; (801c9bc <etharp_raw+0x110>)
 801c8fc:	482e      	ldr	r0, [pc, #184]	; (801c9b8 <etharp_raw+0x10c>)
 801c8fe:	f002 ffe1 	bl	801f8c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c902:	69bb      	ldr	r3, [r7, #24]
 801c904:	685b      	ldr	r3, [r3, #4]
 801c906:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c908:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c90a:	4618      	mov	r0, r3
 801c90c:	f7f4 fcd0 	bl	80112b0 <lwip_htons>
 801c910:	4603      	mov	r3, r0
 801c912:	461a      	mov	r2, r3
 801c914:	697b      	ldr	r3, [r7, #20]
 801c916:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c91e:	2b06      	cmp	r3, #6
 801c920:	d006      	beq.n	801c930 <etharp_raw+0x84>
 801c922:	4b23      	ldr	r3, [pc, #140]	; (801c9b0 <etharp_raw+0x104>)
 801c924:	f240 4269 	movw	r2, #1129	; 0x469
 801c928:	4925      	ldr	r1, [pc, #148]	; (801c9c0 <etharp_raw+0x114>)
 801c92a:	4823      	ldr	r0, [pc, #140]	; (801c9b8 <etharp_raw+0x10c>)
 801c92c:	f002 ffca 	bl	801f8c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c930:	697b      	ldr	r3, [r7, #20]
 801c932:	3308      	adds	r3, #8
 801c934:	2206      	movs	r2, #6
 801c936:	6839      	ldr	r1, [r7, #0]
 801c938:	4618      	mov	r0, r3
 801c93a:	f003 fa28 	bl	801fd8e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c93e:	697b      	ldr	r3, [r7, #20]
 801c940:	3312      	adds	r3, #18
 801c942:	2206      	movs	r2, #6
 801c944:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c946:	4618      	mov	r0, r3
 801c948:	f003 fa21 	bl	801fd8e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c94c:	697b      	ldr	r3, [r7, #20]
 801c94e:	330e      	adds	r3, #14
 801c950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c952:	6812      	ldr	r2, [r2, #0]
 801c954:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c956:	697b      	ldr	r3, [r7, #20]
 801c958:	3318      	adds	r3, #24
 801c95a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c95c:	6812      	ldr	r2, [r2, #0]
 801c95e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c960:	697b      	ldr	r3, [r7, #20]
 801c962:	2200      	movs	r2, #0
 801c964:	701a      	strb	r2, [r3, #0]
 801c966:	2200      	movs	r2, #0
 801c968:	f042 0201 	orr.w	r2, r2, #1
 801c96c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c96e:	697b      	ldr	r3, [r7, #20]
 801c970:	2200      	movs	r2, #0
 801c972:	f042 0208 	orr.w	r2, r2, #8
 801c976:	709a      	strb	r2, [r3, #2]
 801c978:	2200      	movs	r2, #0
 801c97a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c97c:	697b      	ldr	r3, [r7, #20]
 801c97e:	2206      	movs	r2, #6
 801c980:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c982:	697b      	ldr	r3, [r7, #20]
 801c984:	2204      	movs	r2, #4
 801c986:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c988:	f640 0306 	movw	r3, #2054	; 0x806
 801c98c:	9300      	str	r3, [sp, #0]
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	68ba      	ldr	r2, [r7, #8]
 801c992:	69b9      	ldr	r1, [r7, #24]
 801c994:	68f8      	ldr	r0, [r7, #12]
 801c996:	f001 fb99 	bl	801e0cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c99a:	69b8      	ldr	r0, [r7, #24]
 801c99c:	f7f6 f8be 	bl	8012b1c <pbuf_free>
  p = NULL;
 801c9a0:	2300      	movs	r3, #0
 801c9a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c9a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	3720      	adds	r7, #32
 801c9ac:	46bd      	mov	sp, r7
 801c9ae:	bd80      	pop	{r7, pc}
 801c9b0:	080249a0 	.word	0x080249a0
 801c9b4:	08024af0 	.word	0x08024af0
 801c9b8:	08024a18 	.word	0x08024a18
 801c9bc:	08024ba0 	.word	0x08024ba0
 801c9c0:	08024bd4 	.word	0x08024bd4

0801c9c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b088      	sub	sp, #32
 801c9c8:	af04      	add	r7, sp, #16
 801c9ca:	60f8      	str	r0, [r7, #12]
 801c9cc:	60b9      	str	r1, [r7, #8]
 801c9ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c9dc:	68fb      	ldr	r3, [r7, #12]
 801c9de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c9e0:	2201      	movs	r2, #1
 801c9e2:	9203      	str	r2, [sp, #12]
 801c9e4:	68ba      	ldr	r2, [r7, #8]
 801c9e6:	9202      	str	r2, [sp, #8]
 801c9e8:	4a06      	ldr	r2, [pc, #24]	; (801ca04 <etharp_request_dst+0x40>)
 801c9ea:	9201      	str	r2, [sp, #4]
 801c9ec:	9300      	str	r3, [sp, #0]
 801c9ee:	4603      	mov	r3, r0
 801c9f0:	687a      	ldr	r2, [r7, #4]
 801c9f2:	68f8      	ldr	r0, [r7, #12]
 801c9f4:	f7ff ff5a 	bl	801c8ac <etharp_raw>
 801c9f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	3710      	adds	r7, #16
 801c9fe:	46bd      	mov	sp, r7
 801ca00:	bd80      	pop	{r7, pc}
 801ca02:	bf00      	nop
 801ca04:	080252a8 	.word	0x080252a8

0801ca08 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ca08:	b580      	push	{r7, lr}
 801ca0a:	b082      	sub	sp, #8
 801ca0c:	af00      	add	r7, sp, #0
 801ca0e:	6078      	str	r0, [r7, #4]
 801ca10:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ca12:	4a05      	ldr	r2, [pc, #20]	; (801ca28 <etharp_request+0x20>)
 801ca14:	6839      	ldr	r1, [r7, #0]
 801ca16:	6878      	ldr	r0, [r7, #4]
 801ca18:	f7ff ffd4 	bl	801c9c4 <etharp_request_dst>
 801ca1c:	4603      	mov	r3, r0
}
 801ca1e:	4618      	mov	r0, r3
 801ca20:	3708      	adds	r7, #8
 801ca22:	46bd      	mov	sp, r7
 801ca24:	bd80      	pop	{r7, pc}
 801ca26:	bf00      	nop
 801ca28:	080252a0 	.word	0x080252a0

0801ca2c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ca2c:	b580      	push	{r7, lr}
 801ca2e:	b08e      	sub	sp, #56	; 0x38
 801ca30:	af04      	add	r7, sp, #16
 801ca32:	6078      	str	r0, [r7, #4]
 801ca34:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ca36:	4b79      	ldr	r3, [pc, #484]	; (801cc1c <icmp_input+0x1f0>)
 801ca38:	689b      	ldr	r3, [r3, #8]
 801ca3a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca3e:	781b      	ldrb	r3, [r3, #0]
 801ca40:	f003 030f 	and.w	r3, r3, #15
 801ca44:	b2db      	uxtb	r3, r3
 801ca46:	009b      	lsls	r3, r3, #2
 801ca48:	b2db      	uxtb	r3, r3
 801ca4a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801ca4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ca4e:	2b13      	cmp	r3, #19
 801ca50:	f240 80cd 	bls.w	801cbee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	895b      	ldrh	r3, [r3, #10]
 801ca58:	2b03      	cmp	r3, #3
 801ca5a:	f240 80ca 	bls.w	801cbf2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	685b      	ldr	r3, [r3, #4]
 801ca62:	781b      	ldrb	r3, [r3, #0]
 801ca64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ca68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	f000 80b7 	beq.w	801cbe0 <icmp_input+0x1b4>
 801ca72:	2b08      	cmp	r3, #8
 801ca74:	f040 80b7 	bne.w	801cbe6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ca78:	4b69      	ldr	r3, [pc, #420]	; (801cc20 <icmp_input+0x1f4>)
 801ca7a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ca7c:	4b67      	ldr	r3, [pc, #412]	; (801cc1c <icmp_input+0x1f0>)
 801ca7e:	695b      	ldr	r3, [r3, #20]
 801ca80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ca84:	2be0      	cmp	r3, #224	; 0xe0
 801ca86:	f000 80bb 	beq.w	801cc00 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ca8a:	4b64      	ldr	r3, [pc, #400]	; (801cc1c <icmp_input+0x1f0>)
 801ca8c:	695b      	ldr	r3, [r3, #20]
 801ca8e:	4a63      	ldr	r2, [pc, #396]	; (801cc1c <icmp_input+0x1f0>)
 801ca90:	6812      	ldr	r2, [r2, #0]
 801ca92:	4611      	mov	r1, r2
 801ca94:	4618      	mov	r0, r3
 801ca96:	f000 fc0b 	bl	801d2b0 <ip4_addr_isbroadcast_u32>
 801ca9a:	4603      	mov	r3, r0
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	f040 80b1 	bne.w	801cc04 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	891b      	ldrh	r3, [r3, #8]
 801caa6:	2b07      	cmp	r3, #7
 801caa8:	f240 80a5 	bls.w	801cbf6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801caac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801caae:	330e      	adds	r3, #14
 801cab0:	4619      	mov	r1, r3
 801cab2:	6878      	ldr	r0, [r7, #4]
 801cab4:	f7f5 ff9c 	bl	80129f0 <pbuf_add_header>
 801cab8:	4603      	mov	r3, r0
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d04b      	beq.n	801cb56 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	891a      	ldrh	r2, [r3, #8]
 801cac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cac4:	4413      	add	r3, r2
 801cac6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	891b      	ldrh	r3, [r3, #8]
 801cacc:	8b7a      	ldrh	r2, [r7, #26]
 801cace:	429a      	cmp	r2, r3
 801cad0:	f0c0 809a 	bcc.w	801cc08 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801cad4:	8b7b      	ldrh	r3, [r7, #26]
 801cad6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cada:	4619      	mov	r1, r3
 801cadc:	200e      	movs	r0, #14
 801cade:	f7f5 fd39 	bl	8012554 <pbuf_alloc>
 801cae2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801cae4:	697b      	ldr	r3, [r7, #20]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	f000 8090 	beq.w	801cc0c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801caec:	697b      	ldr	r3, [r7, #20]
 801caee:	895b      	ldrh	r3, [r3, #10]
 801caf0:	461a      	mov	r2, r3
 801caf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801caf4:	3308      	adds	r3, #8
 801caf6:	429a      	cmp	r2, r3
 801caf8:	d203      	bcs.n	801cb02 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801cafa:	6978      	ldr	r0, [r7, #20]
 801cafc:	f7f6 f80e 	bl	8012b1c <pbuf_free>
          goto icmperr;
 801cb00:	e085      	b.n	801cc0e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801cb02:	697b      	ldr	r3, [r7, #20]
 801cb04:	685b      	ldr	r3, [r3, #4]
 801cb06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801cb08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	f003 f93f 	bl	801fd8e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801cb10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cb12:	4619      	mov	r1, r3
 801cb14:	6978      	ldr	r0, [r7, #20]
 801cb16:	f7f5 ff7b 	bl	8012a10 <pbuf_remove_header>
 801cb1a:	4603      	mov	r3, r0
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d009      	beq.n	801cb34 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801cb20:	4b40      	ldr	r3, [pc, #256]	; (801cc24 <icmp_input+0x1f8>)
 801cb22:	22b6      	movs	r2, #182	; 0xb6
 801cb24:	4940      	ldr	r1, [pc, #256]	; (801cc28 <icmp_input+0x1fc>)
 801cb26:	4841      	ldr	r0, [pc, #260]	; (801cc2c <icmp_input+0x200>)
 801cb28:	f002 fecc 	bl	801f8c4 <iprintf>
          pbuf_free(r);
 801cb2c:	6978      	ldr	r0, [r7, #20]
 801cb2e:	f7f5 fff5 	bl	8012b1c <pbuf_free>
          goto icmperr;
 801cb32:	e06c      	b.n	801cc0e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801cb34:	6879      	ldr	r1, [r7, #4]
 801cb36:	6978      	ldr	r0, [r7, #20]
 801cb38:	f7f6 f924 	bl	8012d84 <pbuf_copy>
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d003      	beq.n	801cb4a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801cb42:	6978      	ldr	r0, [r7, #20]
 801cb44:	f7f5 ffea 	bl	8012b1c <pbuf_free>
          goto icmperr;
 801cb48:	e061      	b.n	801cc0e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801cb4a:	6878      	ldr	r0, [r7, #4]
 801cb4c:	f7f5 ffe6 	bl	8012b1c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801cb50:	697b      	ldr	r3, [r7, #20]
 801cb52:	607b      	str	r3, [r7, #4]
 801cb54:	e00f      	b.n	801cb76 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cb56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cb58:	330e      	adds	r3, #14
 801cb5a:	4619      	mov	r1, r3
 801cb5c:	6878      	ldr	r0, [r7, #4]
 801cb5e:	f7f5 ff57 	bl	8012a10 <pbuf_remove_header>
 801cb62:	4603      	mov	r3, r0
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d006      	beq.n	801cb76 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801cb68:	4b2e      	ldr	r3, [pc, #184]	; (801cc24 <icmp_input+0x1f8>)
 801cb6a:	22c7      	movs	r2, #199	; 0xc7
 801cb6c:	4930      	ldr	r1, [pc, #192]	; (801cc30 <icmp_input+0x204>)
 801cb6e:	482f      	ldr	r0, [pc, #188]	; (801cc2c <icmp_input+0x200>)
 801cb70:	f002 fea8 	bl	801f8c4 <iprintf>
          goto icmperr;
 801cb74:	e04b      	b.n	801cc0e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	685b      	ldr	r3, [r3, #4]
 801cb7a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801cb7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cb7e:	4619      	mov	r1, r3
 801cb80:	6878      	ldr	r0, [r7, #4]
 801cb82:	f7f5 ff35 	bl	80129f0 <pbuf_add_header>
 801cb86:	4603      	mov	r3, r0
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d12b      	bne.n	801cbe4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	685b      	ldr	r3, [r3, #4]
 801cb90:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801cb92:	69fb      	ldr	r3, [r7, #28]
 801cb94:	681a      	ldr	r2, [r3, #0]
 801cb96:	68fb      	ldr	r3, [r7, #12]
 801cb98:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801cb9a:	4b20      	ldr	r3, [pc, #128]	; (801cc1c <icmp_input+0x1f0>)
 801cb9c:	691a      	ldr	r2, [r3, #16]
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801cba2:	693b      	ldr	r3, [r7, #16]
 801cba4:	2200      	movs	r2, #0
 801cba6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801cba8:	693b      	ldr	r3, [r7, #16]
 801cbaa:	2200      	movs	r2, #0
 801cbac:	709a      	strb	r2, [r3, #2]
 801cbae:	2200      	movs	r2, #0
 801cbb0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	22ff      	movs	r2, #255	; 0xff
 801cbb6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801cbb8:	68fb      	ldr	r3, [r7, #12]
 801cbba:	2200      	movs	r2, #0
 801cbbc:	729a      	strb	r2, [r3, #10]
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801cbc2:	683b      	ldr	r3, [r7, #0]
 801cbc4:	9302      	str	r3, [sp, #8]
 801cbc6:	2301      	movs	r3, #1
 801cbc8:	9301      	str	r3, [sp, #4]
 801cbca:	2300      	movs	r3, #0
 801cbcc:	9300      	str	r3, [sp, #0]
 801cbce:	23ff      	movs	r3, #255	; 0xff
 801cbd0:	2200      	movs	r2, #0
 801cbd2:	69f9      	ldr	r1, [r7, #28]
 801cbd4:	6878      	ldr	r0, [r7, #4]
 801cbd6:	f000 fa93 	bl	801d100 <ip4_output_if>
 801cbda:	4603      	mov	r3, r0
 801cbdc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801cbde:	e001      	b.n	801cbe4 <icmp_input+0x1b8>
      break;
 801cbe0:	bf00      	nop
 801cbe2:	e000      	b.n	801cbe6 <icmp_input+0x1ba>
      break;
 801cbe4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801cbe6:	6878      	ldr	r0, [r7, #4]
 801cbe8:	f7f5 ff98 	bl	8012b1c <pbuf_free>
  return;
 801cbec:	e013      	b.n	801cc16 <icmp_input+0x1ea>
    goto lenerr;
 801cbee:	bf00      	nop
 801cbf0:	e002      	b.n	801cbf8 <icmp_input+0x1cc>
    goto lenerr;
 801cbf2:	bf00      	nop
 801cbf4:	e000      	b.n	801cbf8 <icmp_input+0x1cc>
        goto lenerr;
 801cbf6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801cbf8:	6878      	ldr	r0, [r7, #4]
 801cbfa:	f7f5 ff8f 	bl	8012b1c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cbfe:	e00a      	b.n	801cc16 <icmp_input+0x1ea>
        goto icmperr;
 801cc00:	bf00      	nop
 801cc02:	e004      	b.n	801cc0e <icmp_input+0x1e2>
        goto icmperr;
 801cc04:	bf00      	nop
 801cc06:	e002      	b.n	801cc0e <icmp_input+0x1e2>
          goto icmperr;
 801cc08:	bf00      	nop
 801cc0a:	e000      	b.n	801cc0e <icmp_input+0x1e2>
          goto icmperr;
 801cc0c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801cc0e:	6878      	ldr	r0, [r7, #4]
 801cc10:	f7f5 ff84 	bl	8012b1c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801cc14:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801cc16:	3728      	adds	r7, #40	; 0x28
 801cc18:	46bd      	mov	sp, r7
 801cc1a:	bd80      	pop	{r7, pc}
 801cc1c:	2000ca54 	.word	0x2000ca54
 801cc20:	2000ca68 	.word	0x2000ca68
 801cc24:	08024c18 	.word	0x08024c18
 801cc28:	08024c50 	.word	0x08024c50
 801cc2c:	08024c88 	.word	0x08024c88
 801cc30:	08024cb0 	.word	0x08024cb0

0801cc34 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801cc34:	b580      	push	{r7, lr}
 801cc36:	b082      	sub	sp, #8
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]
 801cc3c:	460b      	mov	r3, r1
 801cc3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801cc40:	78fb      	ldrb	r3, [r7, #3]
 801cc42:	461a      	mov	r2, r3
 801cc44:	2103      	movs	r1, #3
 801cc46:	6878      	ldr	r0, [r7, #4]
 801cc48:	f000 f814 	bl	801cc74 <icmp_send_response>
}
 801cc4c:	bf00      	nop
 801cc4e:	3708      	adds	r7, #8
 801cc50:	46bd      	mov	sp, r7
 801cc52:	bd80      	pop	{r7, pc}

0801cc54 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
 801cc5c:	460b      	mov	r3, r1
 801cc5e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801cc60:	78fb      	ldrb	r3, [r7, #3]
 801cc62:	461a      	mov	r2, r3
 801cc64:	210b      	movs	r1, #11
 801cc66:	6878      	ldr	r0, [r7, #4]
 801cc68:	f000 f804 	bl	801cc74 <icmp_send_response>
}
 801cc6c:	bf00      	nop
 801cc6e:	3708      	adds	r7, #8
 801cc70:	46bd      	mov	sp, r7
 801cc72:	bd80      	pop	{r7, pc}

0801cc74 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801cc74:	b580      	push	{r7, lr}
 801cc76:	b08c      	sub	sp, #48	; 0x30
 801cc78:	af04      	add	r7, sp, #16
 801cc7a:	6078      	str	r0, [r7, #4]
 801cc7c:	460b      	mov	r3, r1
 801cc7e:	70fb      	strb	r3, [r7, #3]
 801cc80:	4613      	mov	r3, r2
 801cc82:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801cc84:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cc88:	2124      	movs	r1, #36	; 0x24
 801cc8a:	2022      	movs	r0, #34	; 0x22
 801cc8c:	f7f5 fc62 	bl	8012554 <pbuf_alloc>
 801cc90:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801cc92:	69fb      	ldr	r3, [r7, #28]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d04c      	beq.n	801cd32 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801cc98:	69fb      	ldr	r3, [r7, #28]
 801cc9a:	895b      	ldrh	r3, [r3, #10]
 801cc9c:	2b23      	cmp	r3, #35	; 0x23
 801cc9e:	d806      	bhi.n	801ccae <icmp_send_response+0x3a>
 801cca0:	4b26      	ldr	r3, [pc, #152]	; (801cd3c <icmp_send_response+0xc8>)
 801cca2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801cca6:	4926      	ldr	r1, [pc, #152]	; (801cd40 <icmp_send_response+0xcc>)
 801cca8:	4826      	ldr	r0, [pc, #152]	; (801cd44 <icmp_send_response+0xd0>)
 801ccaa:	f002 fe0b 	bl	801f8c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	685b      	ldr	r3, [r3, #4]
 801ccb2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ccb4:	69fb      	ldr	r3, [r7, #28]
 801ccb6:	685b      	ldr	r3, [r3, #4]
 801ccb8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801ccba:	697b      	ldr	r3, [r7, #20]
 801ccbc:	78fa      	ldrb	r2, [r7, #3]
 801ccbe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801ccc0:	697b      	ldr	r3, [r7, #20]
 801ccc2:	78ba      	ldrb	r2, [r7, #2]
 801ccc4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801ccc6:	697b      	ldr	r3, [r7, #20]
 801ccc8:	2200      	movs	r2, #0
 801ccca:	711a      	strb	r2, [r3, #4]
 801cccc:	2200      	movs	r2, #0
 801ccce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801ccd0:	697b      	ldr	r3, [r7, #20]
 801ccd2:	2200      	movs	r2, #0
 801ccd4:	719a      	strb	r2, [r3, #6]
 801ccd6:	2200      	movs	r2, #0
 801ccd8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ccda:	69fb      	ldr	r3, [r7, #28]
 801ccdc:	685b      	ldr	r3, [r3, #4]
 801ccde:	f103 0008 	add.w	r0, r3, #8
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	685b      	ldr	r3, [r3, #4]
 801cce6:	221c      	movs	r2, #28
 801cce8:	4619      	mov	r1, r3
 801ccea:	f003 f850 	bl	801fd8e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801ccee:	69bb      	ldr	r3, [r7, #24]
 801ccf0:	68db      	ldr	r3, [r3, #12]
 801ccf2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ccf4:	f107 030c 	add.w	r3, r7, #12
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	f000 f825 	bl	801cd48 <ip4_route>
 801ccfe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801cd00:	693b      	ldr	r3, [r7, #16]
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d011      	beq.n	801cd2a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801cd06:	697b      	ldr	r3, [r7, #20]
 801cd08:	2200      	movs	r2, #0
 801cd0a:	709a      	strb	r2, [r3, #2]
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801cd10:	f107 020c 	add.w	r2, r7, #12
 801cd14:	693b      	ldr	r3, [r7, #16]
 801cd16:	9302      	str	r3, [sp, #8]
 801cd18:	2301      	movs	r3, #1
 801cd1a:	9301      	str	r3, [sp, #4]
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	9300      	str	r3, [sp, #0]
 801cd20:	23ff      	movs	r3, #255	; 0xff
 801cd22:	2100      	movs	r1, #0
 801cd24:	69f8      	ldr	r0, [r7, #28]
 801cd26:	f000 f9eb 	bl	801d100 <ip4_output_if>
  }
  pbuf_free(q);
 801cd2a:	69f8      	ldr	r0, [r7, #28]
 801cd2c:	f7f5 fef6 	bl	8012b1c <pbuf_free>
 801cd30:	e000      	b.n	801cd34 <icmp_send_response+0xc0>
    return;
 801cd32:	bf00      	nop
}
 801cd34:	3720      	adds	r7, #32
 801cd36:	46bd      	mov	sp, r7
 801cd38:	bd80      	pop	{r7, pc}
 801cd3a:	bf00      	nop
 801cd3c:	08024c18 	.word	0x08024c18
 801cd40:	08024ce4 	.word	0x08024ce4
 801cd44:	08024c88 	.word	0x08024c88

0801cd48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801cd48:	b480      	push	{r7}
 801cd4a:	b085      	sub	sp, #20
 801cd4c:	af00      	add	r7, sp, #0
 801cd4e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801cd50:	4b33      	ldr	r3, [pc, #204]	; (801ce20 <ip4_route+0xd8>)
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	60fb      	str	r3, [r7, #12]
 801cd56:	e036      	b.n	801cdc6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cd58:	68fb      	ldr	r3, [r7, #12]
 801cd5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cd5e:	f003 0301 	and.w	r3, r3, #1
 801cd62:	b2db      	uxtb	r3, r3
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d02b      	beq.n	801cdc0 <ip4_route+0x78>
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cd6e:	089b      	lsrs	r3, r3, #2
 801cd70:	f003 0301 	and.w	r3, r3, #1
 801cd74:	b2db      	uxtb	r3, r3
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d022      	beq.n	801cdc0 <ip4_route+0x78>
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	3304      	adds	r3, #4
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d01d      	beq.n	801cdc0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	681a      	ldr	r2, [r3, #0]
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	3304      	adds	r3, #4
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	405a      	eors	r2, r3
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	3308      	adds	r3, #8
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	4013      	ands	r3, r2
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d101      	bne.n	801cda0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	e038      	b.n	801ce12 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801cda0:	68fb      	ldr	r3, [r7, #12]
 801cda2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cda6:	f003 0302 	and.w	r3, r3, #2
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d108      	bne.n	801cdc0 <ip4_route+0x78>
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	681a      	ldr	r2, [r3, #0]
 801cdb2:	68fb      	ldr	r3, [r7, #12]
 801cdb4:	330c      	adds	r3, #12
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	429a      	cmp	r2, r3
 801cdba:	d101      	bne.n	801cdc0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	e028      	b.n	801ce12 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801cdc0:	68fb      	ldr	r3, [r7, #12]
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	60fb      	str	r3, [r7, #12]
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d1c5      	bne.n	801cd58 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cdcc:	4b15      	ldr	r3, [pc, #84]	; (801ce24 <ip4_route+0xdc>)
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d01a      	beq.n	801ce0a <ip4_route+0xc2>
 801cdd4:	4b13      	ldr	r3, [pc, #76]	; (801ce24 <ip4_route+0xdc>)
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cddc:	f003 0301 	and.w	r3, r3, #1
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d012      	beq.n	801ce0a <ip4_route+0xc2>
 801cde4:	4b0f      	ldr	r3, [pc, #60]	; (801ce24 <ip4_route+0xdc>)
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cdec:	f003 0304 	and.w	r3, r3, #4
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d00a      	beq.n	801ce0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801cdf4:	4b0b      	ldr	r3, [pc, #44]	; (801ce24 <ip4_route+0xdc>)
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	3304      	adds	r3, #4
 801cdfa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d004      	beq.n	801ce0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	b2db      	uxtb	r3, r3
 801ce06:	2b7f      	cmp	r3, #127	; 0x7f
 801ce08:	d101      	bne.n	801ce0e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ce0a:	2300      	movs	r3, #0
 801ce0c:	e001      	b.n	801ce12 <ip4_route+0xca>
  }

  return netif_default;
 801ce0e:	4b05      	ldr	r3, [pc, #20]	; (801ce24 <ip4_route+0xdc>)
 801ce10:	681b      	ldr	r3, [r3, #0]
}
 801ce12:	4618      	mov	r0, r3
 801ce14:	3714      	adds	r7, #20
 801ce16:	46bd      	mov	sp, r7
 801ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce1c:	4770      	bx	lr
 801ce1e:	bf00      	nop
 801ce20:	200101bc 	.word	0x200101bc
 801ce24:	200101c0 	.word	0x200101c0

0801ce28 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ce28:	b580      	push	{r7, lr}
 801ce2a:	b082      	sub	sp, #8
 801ce2c:	af00      	add	r7, sp, #0
 801ce2e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ce36:	f003 0301 	and.w	r3, r3, #1
 801ce3a:	b2db      	uxtb	r3, r3
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d016      	beq.n	801ce6e <ip4_input_accept+0x46>
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	3304      	adds	r3, #4
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d011      	beq.n	801ce6e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ce4a:	4b0b      	ldr	r3, [pc, #44]	; (801ce78 <ip4_input_accept+0x50>)
 801ce4c:	695a      	ldr	r2, [r3, #20]
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	3304      	adds	r3, #4
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	429a      	cmp	r2, r3
 801ce56:	d008      	beq.n	801ce6a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ce58:	4b07      	ldr	r3, [pc, #28]	; (801ce78 <ip4_input_accept+0x50>)
 801ce5a:	695b      	ldr	r3, [r3, #20]
 801ce5c:	6879      	ldr	r1, [r7, #4]
 801ce5e:	4618      	mov	r0, r3
 801ce60:	f000 fa26 	bl	801d2b0 <ip4_addr_isbroadcast_u32>
 801ce64:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d001      	beq.n	801ce6e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ce6a:	2301      	movs	r3, #1
 801ce6c:	e000      	b.n	801ce70 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ce6e:	2300      	movs	r3, #0
}
 801ce70:	4618      	mov	r0, r3
 801ce72:	3708      	adds	r7, #8
 801ce74:	46bd      	mov	sp, r7
 801ce76:	bd80      	pop	{r7, pc}
 801ce78:	2000ca54 	.word	0x2000ca54

0801ce7c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ce7c:	b580      	push	{r7, lr}
 801ce7e:	b088      	sub	sp, #32
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	6078      	str	r0, [r7, #4]
 801ce84:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801ce86:	2301      	movs	r3, #1
 801ce88:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	685b      	ldr	r3, [r3, #4]
 801ce8e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801ce90:	69fb      	ldr	r3, [r7, #28]
 801ce92:	781b      	ldrb	r3, [r3, #0]
 801ce94:	091b      	lsrs	r3, r3, #4
 801ce96:	b2db      	uxtb	r3, r3
 801ce98:	2b04      	cmp	r3, #4
 801ce9a:	d004      	beq.n	801cea6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ce9c:	6878      	ldr	r0, [r7, #4]
 801ce9e:	f7f5 fe3d 	bl	8012b1c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801cea2:	2300      	movs	r3, #0
 801cea4:	e123      	b.n	801d0ee <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801cea6:	69fb      	ldr	r3, [r7, #28]
 801cea8:	781b      	ldrb	r3, [r3, #0]
 801ceaa:	f003 030f 	and.w	r3, r3, #15
 801ceae:	b2db      	uxtb	r3, r3
 801ceb0:	009b      	lsls	r3, r3, #2
 801ceb2:	b2db      	uxtb	r3, r3
 801ceb4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ceb6:	69fb      	ldr	r3, [r7, #28]
 801ceb8:	885b      	ldrh	r3, [r3, #2]
 801ceba:	b29b      	uxth	r3, r3
 801cebc:	4618      	mov	r0, r3
 801cebe:	f7f4 f9f7 	bl	80112b0 <lwip_htons>
 801cec2:	4603      	mov	r3, r0
 801cec4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	891b      	ldrh	r3, [r3, #8]
 801ceca:	8a3a      	ldrh	r2, [r7, #16]
 801cecc:	429a      	cmp	r2, r3
 801cece:	d204      	bcs.n	801ceda <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801ced0:	8a3b      	ldrh	r3, [r7, #16]
 801ced2:	4619      	mov	r1, r3
 801ced4:	6878      	ldr	r0, [r7, #4]
 801ced6:	f7f5 fc9b 	bl	8012810 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	895b      	ldrh	r3, [r3, #10]
 801cede:	8a7a      	ldrh	r2, [r7, #18]
 801cee0:	429a      	cmp	r2, r3
 801cee2:	d807      	bhi.n	801cef4 <ip4_input+0x78>
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	891b      	ldrh	r3, [r3, #8]
 801cee8:	8a3a      	ldrh	r2, [r7, #16]
 801ceea:	429a      	cmp	r2, r3
 801ceec:	d802      	bhi.n	801cef4 <ip4_input+0x78>
 801ceee:	8a7b      	ldrh	r3, [r7, #18]
 801cef0:	2b13      	cmp	r3, #19
 801cef2:	d804      	bhi.n	801cefe <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cef4:	6878      	ldr	r0, [r7, #4]
 801cef6:	f7f5 fe11 	bl	8012b1c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801cefa:	2300      	movs	r3, #0
 801cefc:	e0f7      	b.n	801d0ee <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801cefe:	69fb      	ldr	r3, [r7, #28]
 801cf00:	691b      	ldr	r3, [r3, #16]
 801cf02:	4a7d      	ldr	r2, [pc, #500]	; (801d0f8 <ip4_input+0x27c>)
 801cf04:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801cf06:	69fb      	ldr	r3, [r7, #28]
 801cf08:	68db      	ldr	r3, [r3, #12]
 801cf0a:	4a7b      	ldr	r2, [pc, #492]	; (801d0f8 <ip4_input+0x27c>)
 801cf0c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cf0e:	4b7a      	ldr	r3, [pc, #488]	; (801d0f8 <ip4_input+0x27c>)
 801cf10:	695b      	ldr	r3, [r3, #20]
 801cf12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cf16:	2be0      	cmp	r3, #224	; 0xe0
 801cf18:	d112      	bne.n	801cf40 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801cf1a:	683b      	ldr	r3, [r7, #0]
 801cf1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cf20:	f003 0301 	and.w	r3, r3, #1
 801cf24:	b2db      	uxtb	r3, r3
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d007      	beq.n	801cf3a <ip4_input+0xbe>
 801cf2a:	683b      	ldr	r3, [r7, #0]
 801cf2c:	3304      	adds	r3, #4
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d002      	beq.n	801cf3a <ip4_input+0xbe>
      netif = inp;
 801cf34:	683b      	ldr	r3, [r7, #0]
 801cf36:	61bb      	str	r3, [r7, #24]
 801cf38:	e02a      	b.n	801cf90 <ip4_input+0x114>
    } else {
      netif = NULL;
 801cf3a:	2300      	movs	r3, #0
 801cf3c:	61bb      	str	r3, [r7, #24]
 801cf3e:	e027      	b.n	801cf90 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801cf40:	6838      	ldr	r0, [r7, #0]
 801cf42:	f7ff ff71 	bl	801ce28 <ip4_input_accept>
 801cf46:	4603      	mov	r3, r0
 801cf48:	2b00      	cmp	r3, #0
 801cf4a:	d002      	beq.n	801cf52 <ip4_input+0xd6>
      netif = inp;
 801cf4c:	683b      	ldr	r3, [r7, #0]
 801cf4e:	61bb      	str	r3, [r7, #24]
 801cf50:	e01e      	b.n	801cf90 <ip4_input+0x114>
    } else {
      netif = NULL;
 801cf52:	2300      	movs	r3, #0
 801cf54:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801cf56:	4b68      	ldr	r3, [pc, #416]	; (801d0f8 <ip4_input+0x27c>)
 801cf58:	695b      	ldr	r3, [r3, #20]
 801cf5a:	b2db      	uxtb	r3, r3
 801cf5c:	2b7f      	cmp	r3, #127	; 0x7f
 801cf5e:	d017      	beq.n	801cf90 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801cf60:	4b66      	ldr	r3, [pc, #408]	; (801d0fc <ip4_input+0x280>)
 801cf62:	681b      	ldr	r3, [r3, #0]
 801cf64:	61bb      	str	r3, [r7, #24]
 801cf66:	e00e      	b.n	801cf86 <ip4_input+0x10a>
          if (netif == inp) {
 801cf68:	69ba      	ldr	r2, [r7, #24]
 801cf6a:	683b      	ldr	r3, [r7, #0]
 801cf6c:	429a      	cmp	r2, r3
 801cf6e:	d006      	beq.n	801cf7e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801cf70:	69b8      	ldr	r0, [r7, #24]
 801cf72:	f7ff ff59 	bl	801ce28 <ip4_input_accept>
 801cf76:	4603      	mov	r3, r0
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d108      	bne.n	801cf8e <ip4_input+0x112>
 801cf7c:	e000      	b.n	801cf80 <ip4_input+0x104>
            continue;
 801cf7e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801cf80:	69bb      	ldr	r3, [r7, #24]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	61bb      	str	r3, [r7, #24]
 801cf86:	69bb      	ldr	r3, [r7, #24]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d1ed      	bne.n	801cf68 <ip4_input+0xec>
 801cf8c:	e000      	b.n	801cf90 <ip4_input+0x114>
            break;
 801cf8e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801cf90:	69bb      	ldr	r3, [r7, #24]
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d111      	bne.n	801cfba <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801cf96:	69fb      	ldr	r3, [r7, #28]
 801cf98:	7a5b      	ldrb	r3, [r3, #9]
 801cf9a:	2b11      	cmp	r3, #17
 801cf9c:	d10d      	bne.n	801cfba <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801cf9e:	8a7b      	ldrh	r3, [r7, #18]
 801cfa0:	69fa      	ldr	r2, [r7, #28]
 801cfa2:	4413      	add	r3, r2
 801cfa4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801cfa6:	68fb      	ldr	r3, [r7, #12]
 801cfa8:	885b      	ldrh	r3, [r3, #2]
 801cfaa:	b29b      	uxth	r3, r3
 801cfac:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801cfb0:	d103      	bne.n	801cfba <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801cfb2:	683b      	ldr	r3, [r7, #0]
 801cfb4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801cfba:	697b      	ldr	r3, [r7, #20]
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d017      	beq.n	801cff0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801cfc0:	4b4d      	ldr	r3, [pc, #308]	; (801d0f8 <ip4_input+0x27c>)
 801cfc2:	691b      	ldr	r3, [r3, #16]
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	d013      	beq.n	801cff0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cfc8:	4b4b      	ldr	r3, [pc, #300]	; (801d0f8 <ip4_input+0x27c>)
 801cfca:	691b      	ldr	r3, [r3, #16]
 801cfcc:	6839      	ldr	r1, [r7, #0]
 801cfce:	4618      	mov	r0, r3
 801cfd0:	f000 f96e 	bl	801d2b0 <ip4_addr_isbroadcast_u32>
 801cfd4:	4603      	mov	r3, r0
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d105      	bne.n	801cfe6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801cfda:	4b47      	ldr	r3, [pc, #284]	; (801d0f8 <ip4_input+0x27c>)
 801cfdc:	691b      	ldr	r3, [r3, #16]
 801cfde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cfe2:	2be0      	cmp	r3, #224	; 0xe0
 801cfe4:	d104      	bne.n	801cff0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801cfe6:	6878      	ldr	r0, [r7, #4]
 801cfe8:	f7f5 fd98 	bl	8012b1c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801cfec:	2300      	movs	r3, #0
 801cfee:	e07e      	b.n	801d0ee <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801cff0:	69bb      	ldr	r3, [r7, #24]
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d104      	bne.n	801d000 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801cff6:	6878      	ldr	r0, [r7, #4]
 801cff8:	f7f5 fd90 	bl	8012b1c <pbuf_free>
    return ERR_OK;
 801cffc:	2300      	movs	r3, #0
 801cffe:	e076      	b.n	801d0ee <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d000:	69fb      	ldr	r3, [r7, #28]
 801d002:	88db      	ldrh	r3, [r3, #6]
 801d004:	b29b      	uxth	r3, r3
 801d006:	461a      	mov	r2, r3
 801d008:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801d00c:	4013      	ands	r3, r2
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d00b      	beq.n	801d02a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d012:	6878      	ldr	r0, [r7, #4]
 801d014:	f000 fc92 	bl	801d93c <ip4_reass>
 801d018:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	d101      	bne.n	801d024 <ip4_input+0x1a8>
      return ERR_OK;
 801d020:	2300      	movs	r3, #0
 801d022:	e064      	b.n	801d0ee <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	685b      	ldr	r3, [r3, #4]
 801d028:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d02a:	4a33      	ldr	r2, [pc, #204]	; (801d0f8 <ip4_input+0x27c>)
 801d02c:	69bb      	ldr	r3, [r7, #24]
 801d02e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d030:	4a31      	ldr	r2, [pc, #196]	; (801d0f8 <ip4_input+0x27c>)
 801d032:	683b      	ldr	r3, [r7, #0]
 801d034:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d036:	4a30      	ldr	r2, [pc, #192]	; (801d0f8 <ip4_input+0x27c>)
 801d038:	69fb      	ldr	r3, [r7, #28]
 801d03a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d03c:	69fb      	ldr	r3, [r7, #28]
 801d03e:	781b      	ldrb	r3, [r3, #0]
 801d040:	f003 030f 	and.w	r3, r3, #15
 801d044:	b2db      	uxtb	r3, r3
 801d046:	009b      	lsls	r3, r3, #2
 801d048:	b2db      	uxtb	r3, r3
 801d04a:	b29a      	uxth	r2, r3
 801d04c:	4b2a      	ldr	r3, [pc, #168]	; (801d0f8 <ip4_input+0x27c>)
 801d04e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d050:	8a7b      	ldrh	r3, [r7, #18]
 801d052:	4619      	mov	r1, r3
 801d054:	6878      	ldr	r0, [r7, #4]
 801d056:	f7f5 fcdb 	bl	8012a10 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d05a:	69fb      	ldr	r3, [r7, #28]
 801d05c:	7a5b      	ldrb	r3, [r3, #9]
 801d05e:	2b11      	cmp	r3, #17
 801d060:	d006      	beq.n	801d070 <ip4_input+0x1f4>
 801d062:	2b11      	cmp	r3, #17
 801d064:	dc13      	bgt.n	801d08e <ip4_input+0x212>
 801d066:	2b01      	cmp	r3, #1
 801d068:	d00c      	beq.n	801d084 <ip4_input+0x208>
 801d06a:	2b06      	cmp	r3, #6
 801d06c:	d005      	beq.n	801d07a <ip4_input+0x1fe>
 801d06e:	e00e      	b.n	801d08e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d070:	6839      	ldr	r1, [r7, #0]
 801d072:	6878      	ldr	r0, [r7, #4]
 801d074:	f7fc fac4 	bl	8019600 <udp_input>
        break;
 801d078:	e026      	b.n	801d0c8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d07a:	6839      	ldr	r1, [r7, #0]
 801d07c:	6878      	ldr	r0, [r7, #4]
 801d07e:	f7f7 fe7d 	bl	8014d7c <tcp_input>
        break;
 801d082:	e021      	b.n	801d0c8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d084:	6839      	ldr	r1, [r7, #0]
 801d086:	6878      	ldr	r0, [r7, #4]
 801d088:	f7ff fcd0 	bl	801ca2c <icmp_input>
        break;
 801d08c:	e01c      	b.n	801d0c8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d08e:	4b1a      	ldr	r3, [pc, #104]	; (801d0f8 <ip4_input+0x27c>)
 801d090:	695b      	ldr	r3, [r3, #20]
 801d092:	69b9      	ldr	r1, [r7, #24]
 801d094:	4618      	mov	r0, r3
 801d096:	f000 f90b 	bl	801d2b0 <ip4_addr_isbroadcast_u32>
 801d09a:	4603      	mov	r3, r0
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d10f      	bne.n	801d0c0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d0a0:	4b15      	ldr	r3, [pc, #84]	; (801d0f8 <ip4_input+0x27c>)
 801d0a2:	695b      	ldr	r3, [r3, #20]
 801d0a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d0a8:	2be0      	cmp	r3, #224	; 0xe0
 801d0aa:	d009      	beq.n	801d0c0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d0ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d0b0:	4619      	mov	r1, r3
 801d0b2:	6878      	ldr	r0, [r7, #4]
 801d0b4:	f7f5 fd1f 	bl	8012af6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d0b8:	2102      	movs	r1, #2
 801d0ba:	6878      	ldr	r0, [r7, #4]
 801d0bc:	f7ff fdba 	bl	801cc34 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d0c0:	6878      	ldr	r0, [r7, #4]
 801d0c2:	f7f5 fd2b 	bl	8012b1c <pbuf_free>
        break;
 801d0c6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d0c8:	4b0b      	ldr	r3, [pc, #44]	; (801d0f8 <ip4_input+0x27c>)
 801d0ca:	2200      	movs	r2, #0
 801d0cc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d0ce:	4b0a      	ldr	r3, [pc, #40]	; (801d0f8 <ip4_input+0x27c>)
 801d0d0:	2200      	movs	r2, #0
 801d0d2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d0d4:	4b08      	ldr	r3, [pc, #32]	; (801d0f8 <ip4_input+0x27c>)
 801d0d6:	2200      	movs	r2, #0
 801d0d8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d0da:	4b07      	ldr	r3, [pc, #28]	; (801d0f8 <ip4_input+0x27c>)
 801d0dc:	2200      	movs	r2, #0
 801d0de:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d0e0:	4b05      	ldr	r3, [pc, #20]	; (801d0f8 <ip4_input+0x27c>)
 801d0e2:	2200      	movs	r2, #0
 801d0e4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d0e6:	4b04      	ldr	r3, [pc, #16]	; (801d0f8 <ip4_input+0x27c>)
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d0ec:	2300      	movs	r3, #0
}
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	3720      	adds	r7, #32
 801d0f2:	46bd      	mov	sp, r7
 801d0f4:	bd80      	pop	{r7, pc}
 801d0f6:	bf00      	nop
 801d0f8:	2000ca54 	.word	0x2000ca54
 801d0fc:	200101bc 	.word	0x200101bc

0801d100 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d100:	b580      	push	{r7, lr}
 801d102:	b08a      	sub	sp, #40	; 0x28
 801d104:	af04      	add	r7, sp, #16
 801d106:	60f8      	str	r0, [r7, #12]
 801d108:	60b9      	str	r1, [r7, #8]
 801d10a:	607a      	str	r2, [r7, #4]
 801d10c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d10e:	68bb      	ldr	r3, [r7, #8]
 801d110:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	2b00      	cmp	r3, #0
 801d116:	d009      	beq.n	801d12c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d118:	68bb      	ldr	r3, [r7, #8]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d003      	beq.n	801d126 <ip4_output_if+0x26>
 801d11e:	68bb      	ldr	r3, [r7, #8]
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	2b00      	cmp	r3, #0
 801d124:	d102      	bne.n	801d12c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d128:	3304      	adds	r3, #4
 801d12a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d12c:	78fa      	ldrb	r2, [r7, #3]
 801d12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d130:	9302      	str	r3, [sp, #8]
 801d132:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d136:	9301      	str	r3, [sp, #4]
 801d138:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d13c:	9300      	str	r3, [sp, #0]
 801d13e:	4613      	mov	r3, r2
 801d140:	687a      	ldr	r2, [r7, #4]
 801d142:	6979      	ldr	r1, [r7, #20]
 801d144:	68f8      	ldr	r0, [r7, #12]
 801d146:	f000 f805 	bl	801d154 <ip4_output_if_src>
 801d14a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d14c:	4618      	mov	r0, r3
 801d14e:	3718      	adds	r7, #24
 801d150:	46bd      	mov	sp, r7
 801d152:	bd80      	pop	{r7, pc}

0801d154 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d154:	b580      	push	{r7, lr}
 801d156:	b088      	sub	sp, #32
 801d158:	af00      	add	r7, sp, #0
 801d15a:	60f8      	str	r0, [r7, #12]
 801d15c:	60b9      	str	r1, [r7, #8]
 801d15e:	607a      	str	r2, [r7, #4]
 801d160:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d162:	68fb      	ldr	r3, [r7, #12]
 801d164:	7b9b      	ldrb	r3, [r3, #14]
 801d166:	2b01      	cmp	r3, #1
 801d168:	d006      	beq.n	801d178 <ip4_output_if_src+0x24>
 801d16a:	4b4b      	ldr	r3, [pc, #300]	; (801d298 <ip4_output_if_src+0x144>)
 801d16c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801d170:	494a      	ldr	r1, [pc, #296]	; (801d29c <ip4_output_if_src+0x148>)
 801d172:	484b      	ldr	r0, [pc, #300]	; (801d2a0 <ip4_output_if_src+0x14c>)
 801d174:	f002 fba6 	bl	801f8c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d060      	beq.n	801d240 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801d17e:	2314      	movs	r3, #20
 801d180:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d182:	2114      	movs	r1, #20
 801d184:	68f8      	ldr	r0, [r7, #12]
 801d186:	f7f5 fc33 	bl	80129f0 <pbuf_add_header>
 801d18a:	4603      	mov	r3, r0
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d002      	beq.n	801d196 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d190:	f06f 0301 	mvn.w	r3, #1
 801d194:	e07c      	b.n	801d290 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	685b      	ldr	r3, [r3, #4]
 801d19a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	895b      	ldrh	r3, [r3, #10]
 801d1a0:	2b13      	cmp	r3, #19
 801d1a2:	d806      	bhi.n	801d1b2 <ip4_output_if_src+0x5e>
 801d1a4:	4b3c      	ldr	r3, [pc, #240]	; (801d298 <ip4_output_if_src+0x144>)
 801d1a6:	f44f 7262 	mov.w	r2, #904	; 0x388
 801d1aa:	493e      	ldr	r1, [pc, #248]	; (801d2a4 <ip4_output_if_src+0x150>)
 801d1ac:	483c      	ldr	r0, [pc, #240]	; (801d2a0 <ip4_output_if_src+0x14c>)
 801d1ae:	f002 fb89 	bl	801f8c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d1b2:	69fb      	ldr	r3, [r7, #28]
 801d1b4:	78fa      	ldrb	r2, [r7, #3]
 801d1b6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d1b8:	69fb      	ldr	r3, [r7, #28]
 801d1ba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801d1be:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	681a      	ldr	r2, [r3, #0]
 801d1c4:	69fb      	ldr	r3, [r7, #28]
 801d1c6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d1c8:	8b7b      	ldrh	r3, [r7, #26]
 801d1ca:	089b      	lsrs	r3, r3, #2
 801d1cc:	b29b      	uxth	r3, r3
 801d1ce:	b2db      	uxtb	r3, r3
 801d1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d1d4:	b2da      	uxtb	r2, r3
 801d1d6:	69fb      	ldr	r3, [r7, #28]
 801d1d8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d1da:	69fb      	ldr	r3, [r7, #28]
 801d1dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d1e0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	891b      	ldrh	r3, [r3, #8]
 801d1e6:	4618      	mov	r0, r3
 801d1e8:	f7f4 f862 	bl	80112b0 <lwip_htons>
 801d1ec:	4603      	mov	r3, r0
 801d1ee:	461a      	mov	r2, r3
 801d1f0:	69fb      	ldr	r3, [r7, #28]
 801d1f2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d1f4:	69fb      	ldr	r3, [r7, #28]
 801d1f6:	2200      	movs	r2, #0
 801d1f8:	719a      	strb	r2, [r3, #6]
 801d1fa:	2200      	movs	r2, #0
 801d1fc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d1fe:	4b2a      	ldr	r3, [pc, #168]	; (801d2a8 <ip4_output_if_src+0x154>)
 801d200:	881b      	ldrh	r3, [r3, #0]
 801d202:	4618      	mov	r0, r3
 801d204:	f7f4 f854 	bl	80112b0 <lwip_htons>
 801d208:	4603      	mov	r3, r0
 801d20a:	461a      	mov	r2, r3
 801d20c:	69fb      	ldr	r3, [r7, #28]
 801d20e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d210:	4b25      	ldr	r3, [pc, #148]	; (801d2a8 <ip4_output_if_src+0x154>)
 801d212:	881b      	ldrh	r3, [r3, #0]
 801d214:	3301      	adds	r3, #1
 801d216:	b29a      	uxth	r2, r3
 801d218:	4b23      	ldr	r3, [pc, #140]	; (801d2a8 <ip4_output_if_src+0x154>)
 801d21a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d21c:	68bb      	ldr	r3, [r7, #8]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d104      	bne.n	801d22c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d222:	4b22      	ldr	r3, [pc, #136]	; (801d2ac <ip4_output_if_src+0x158>)
 801d224:	681a      	ldr	r2, [r3, #0]
 801d226:	69fb      	ldr	r3, [r7, #28]
 801d228:	60da      	str	r2, [r3, #12]
 801d22a:	e003      	b.n	801d234 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d22c:	68bb      	ldr	r3, [r7, #8]
 801d22e:	681a      	ldr	r2, [r3, #0]
 801d230:	69fb      	ldr	r3, [r7, #28]
 801d232:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d234:	69fb      	ldr	r3, [r7, #28]
 801d236:	2200      	movs	r2, #0
 801d238:	729a      	strb	r2, [r3, #10]
 801d23a:	2200      	movs	r2, #0
 801d23c:	72da      	strb	r2, [r3, #11]
 801d23e:	e00f      	b.n	801d260 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	895b      	ldrh	r3, [r3, #10]
 801d244:	2b13      	cmp	r3, #19
 801d246:	d802      	bhi.n	801d24e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d248:	f06f 0301 	mvn.w	r3, #1
 801d24c:	e020      	b.n	801d290 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	685b      	ldr	r3, [r3, #4]
 801d252:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d254:	69fb      	ldr	r3, [r7, #28]
 801d256:	691b      	ldr	r3, [r3, #16]
 801d258:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d25a:	f107 0314 	add.w	r3, r7, #20
 801d25e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d264:	2b00      	cmp	r3, #0
 801d266:	d00c      	beq.n	801d282 <ip4_output_if_src+0x12e>
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	891a      	ldrh	r2, [r3, #8]
 801d26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d26e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d270:	429a      	cmp	r2, r3
 801d272:	d906      	bls.n	801d282 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801d274:	687a      	ldr	r2, [r7, #4]
 801d276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d278:	68f8      	ldr	r0, [r7, #12]
 801d27a:	f000 fd53 	bl	801dd24 <ip4_frag>
 801d27e:	4603      	mov	r3, r0
 801d280:	e006      	b.n	801d290 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d284:	695b      	ldr	r3, [r3, #20]
 801d286:	687a      	ldr	r2, [r7, #4]
 801d288:	68f9      	ldr	r1, [r7, #12]
 801d28a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d28c:	4798      	blx	r3
 801d28e:	4603      	mov	r3, r0
}
 801d290:	4618      	mov	r0, r3
 801d292:	3720      	adds	r7, #32
 801d294:	46bd      	mov	sp, r7
 801d296:	bd80      	pop	{r7, pc}
 801d298:	08024d10 	.word	0x08024d10
 801d29c:	08024d44 	.word	0x08024d44
 801d2a0:	08024d50 	.word	0x08024d50
 801d2a4:	08024d78 	.word	0x08024d78
 801d2a8:	2001034e 	.word	0x2001034e
 801d2ac:	08025298 	.word	0x08025298

0801d2b0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d2b0:	b480      	push	{r7}
 801d2b2:	b085      	sub	sp, #20
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	6078      	str	r0, [r7, #4]
 801d2b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d2c4:	d002      	beq.n	801d2cc <ip4_addr_isbroadcast_u32+0x1c>
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d101      	bne.n	801d2d0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d2cc:	2301      	movs	r3, #1
 801d2ce:	e02a      	b.n	801d326 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d2d0:	683b      	ldr	r3, [r7, #0]
 801d2d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d2d6:	f003 0302 	and.w	r3, r3, #2
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d101      	bne.n	801d2e2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d2de:	2300      	movs	r3, #0
 801d2e0:	e021      	b.n	801d326 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d2e2:	683b      	ldr	r3, [r7, #0]
 801d2e4:	3304      	adds	r3, #4
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	687a      	ldr	r2, [r7, #4]
 801d2ea:	429a      	cmp	r2, r3
 801d2ec:	d101      	bne.n	801d2f2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d2ee:	2300      	movs	r3, #0
 801d2f0:	e019      	b.n	801d326 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d2f2:	68fa      	ldr	r2, [r7, #12]
 801d2f4:	683b      	ldr	r3, [r7, #0]
 801d2f6:	3304      	adds	r3, #4
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	405a      	eors	r2, r3
 801d2fc:	683b      	ldr	r3, [r7, #0]
 801d2fe:	3308      	adds	r3, #8
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	4013      	ands	r3, r2
 801d304:	2b00      	cmp	r3, #0
 801d306:	d10d      	bne.n	801d324 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d308:	683b      	ldr	r3, [r7, #0]
 801d30a:	3308      	adds	r3, #8
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	43da      	mvns	r2, r3
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d314:	683b      	ldr	r3, [r7, #0]
 801d316:	3308      	adds	r3, #8
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d31c:	429a      	cmp	r2, r3
 801d31e:	d101      	bne.n	801d324 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d320:	2301      	movs	r3, #1
 801d322:	e000      	b.n	801d326 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d324:	2300      	movs	r3, #0
  }
}
 801d326:	4618      	mov	r0, r3
 801d328:	3714      	adds	r7, #20
 801d32a:	46bd      	mov	sp, r7
 801d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d330:	4770      	bx	lr
	...

0801d334 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d334:	b580      	push	{r7, lr}
 801d336:	b084      	sub	sp, #16
 801d338:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d33a:	2300      	movs	r3, #0
 801d33c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d33e:	4b12      	ldr	r3, [pc, #72]	; (801d388 <ip_reass_tmr+0x54>)
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d344:	e018      	b.n	801d378 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d346:	68fb      	ldr	r3, [r7, #12]
 801d348:	7fdb      	ldrb	r3, [r3, #31]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d00b      	beq.n	801d366 <ip_reass_tmr+0x32>
      r->timer--;
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	7fdb      	ldrb	r3, [r3, #31]
 801d352:	3b01      	subs	r3, #1
 801d354:	b2da      	uxtb	r2, r3
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d35a:	68fb      	ldr	r3, [r7, #12]
 801d35c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	60fb      	str	r3, [r7, #12]
 801d364:	e008      	b.n	801d378 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d370:	68b9      	ldr	r1, [r7, #8]
 801d372:	6878      	ldr	r0, [r7, #4]
 801d374:	f000 f80a 	bl	801d38c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d1e3      	bne.n	801d346 <ip_reass_tmr+0x12>
    }
  }
}
 801d37e:	bf00      	nop
 801d380:	bf00      	nop
 801d382:	3710      	adds	r7, #16
 801d384:	46bd      	mov	sp, r7
 801d386:	bd80      	pop	{r7, pc}
 801d388:	20010350 	.word	0x20010350

0801d38c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d38c:	b580      	push	{r7, lr}
 801d38e:	b088      	sub	sp, #32
 801d390:	af00      	add	r7, sp, #0
 801d392:	6078      	str	r0, [r7, #4]
 801d394:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d396:	2300      	movs	r3, #0
 801d398:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d39a:	683a      	ldr	r2, [r7, #0]
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	429a      	cmp	r2, r3
 801d3a0:	d105      	bne.n	801d3ae <ip_reass_free_complete_datagram+0x22>
 801d3a2:	4b45      	ldr	r3, [pc, #276]	; (801d4b8 <ip_reass_free_complete_datagram+0x12c>)
 801d3a4:	22ab      	movs	r2, #171	; 0xab
 801d3a6:	4945      	ldr	r1, [pc, #276]	; (801d4bc <ip_reass_free_complete_datagram+0x130>)
 801d3a8:	4845      	ldr	r0, [pc, #276]	; (801d4c0 <ip_reass_free_complete_datagram+0x134>)
 801d3aa:	f002 fa8b 	bl	801f8c4 <iprintf>
  if (prev != NULL) {
 801d3ae:	683b      	ldr	r3, [r7, #0]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d00a      	beq.n	801d3ca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d3b4:	683b      	ldr	r3, [r7, #0]
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	687a      	ldr	r2, [r7, #4]
 801d3ba:	429a      	cmp	r2, r3
 801d3bc:	d005      	beq.n	801d3ca <ip_reass_free_complete_datagram+0x3e>
 801d3be:	4b3e      	ldr	r3, [pc, #248]	; (801d4b8 <ip_reass_free_complete_datagram+0x12c>)
 801d3c0:	22ad      	movs	r2, #173	; 0xad
 801d3c2:	4940      	ldr	r1, [pc, #256]	; (801d4c4 <ip_reass_free_complete_datagram+0x138>)
 801d3c4:	483e      	ldr	r0, [pc, #248]	; (801d4c0 <ip_reass_free_complete_datagram+0x134>)
 801d3c6:	f002 fa7d 	bl	801f8c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	685b      	ldr	r3, [r3, #4]
 801d3ce:	685b      	ldr	r3, [r3, #4]
 801d3d0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d3d2:	697b      	ldr	r3, [r7, #20]
 801d3d4:	889b      	ldrh	r3, [r3, #4]
 801d3d6:	b29b      	uxth	r3, r3
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d12a      	bne.n	801d432 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	685b      	ldr	r3, [r3, #4]
 801d3e0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d3e2:	697b      	ldr	r3, [r7, #20]
 801d3e4:	681a      	ldr	r2, [r3, #0]
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d3ea:	69bb      	ldr	r3, [r7, #24]
 801d3ec:	6858      	ldr	r0, [r3, #4]
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	3308      	adds	r3, #8
 801d3f2:	2214      	movs	r2, #20
 801d3f4:	4619      	mov	r1, r3
 801d3f6:	f002 fcca 	bl	801fd8e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d3fa:	2101      	movs	r1, #1
 801d3fc:	69b8      	ldr	r0, [r7, #24]
 801d3fe:	f7ff fc29 	bl	801cc54 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d402:	69b8      	ldr	r0, [r7, #24]
 801d404:	f7f5 fc18 	bl	8012c38 <pbuf_clen>
 801d408:	4603      	mov	r3, r0
 801d40a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d40c:	8bfa      	ldrh	r2, [r7, #30]
 801d40e:	8a7b      	ldrh	r3, [r7, #18]
 801d410:	4413      	add	r3, r2
 801d412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d416:	db05      	blt.n	801d424 <ip_reass_free_complete_datagram+0x98>
 801d418:	4b27      	ldr	r3, [pc, #156]	; (801d4b8 <ip_reass_free_complete_datagram+0x12c>)
 801d41a:	22bc      	movs	r2, #188	; 0xbc
 801d41c:	492a      	ldr	r1, [pc, #168]	; (801d4c8 <ip_reass_free_complete_datagram+0x13c>)
 801d41e:	4828      	ldr	r0, [pc, #160]	; (801d4c0 <ip_reass_free_complete_datagram+0x134>)
 801d420:	f002 fa50 	bl	801f8c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d424:	8bfa      	ldrh	r2, [r7, #30]
 801d426:	8a7b      	ldrh	r3, [r7, #18]
 801d428:	4413      	add	r3, r2
 801d42a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d42c:	69b8      	ldr	r0, [r7, #24]
 801d42e:	f7f5 fb75 	bl	8012b1c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	685b      	ldr	r3, [r3, #4]
 801d436:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d438:	e01f      	b.n	801d47a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d43a:	69bb      	ldr	r3, [r7, #24]
 801d43c:	685b      	ldr	r3, [r3, #4]
 801d43e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d440:	69bb      	ldr	r3, [r7, #24]
 801d442:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d444:	697b      	ldr	r3, [r7, #20]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d44a:	68f8      	ldr	r0, [r7, #12]
 801d44c:	f7f5 fbf4 	bl	8012c38 <pbuf_clen>
 801d450:	4603      	mov	r3, r0
 801d452:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d454:	8bfa      	ldrh	r2, [r7, #30]
 801d456:	8a7b      	ldrh	r3, [r7, #18]
 801d458:	4413      	add	r3, r2
 801d45a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d45e:	db05      	blt.n	801d46c <ip_reass_free_complete_datagram+0xe0>
 801d460:	4b15      	ldr	r3, [pc, #84]	; (801d4b8 <ip_reass_free_complete_datagram+0x12c>)
 801d462:	22cc      	movs	r2, #204	; 0xcc
 801d464:	4918      	ldr	r1, [pc, #96]	; (801d4c8 <ip_reass_free_complete_datagram+0x13c>)
 801d466:	4816      	ldr	r0, [pc, #88]	; (801d4c0 <ip_reass_free_complete_datagram+0x134>)
 801d468:	f002 fa2c 	bl	801f8c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d46c:	8bfa      	ldrh	r2, [r7, #30]
 801d46e:	8a7b      	ldrh	r3, [r7, #18]
 801d470:	4413      	add	r3, r2
 801d472:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d474:	68f8      	ldr	r0, [r7, #12]
 801d476:	f7f5 fb51 	bl	8012b1c <pbuf_free>
  while (p != NULL) {
 801d47a:	69bb      	ldr	r3, [r7, #24]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d1dc      	bne.n	801d43a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d480:	6839      	ldr	r1, [r7, #0]
 801d482:	6878      	ldr	r0, [r7, #4]
 801d484:	f000 f8c2 	bl	801d60c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d488:	4b10      	ldr	r3, [pc, #64]	; (801d4cc <ip_reass_free_complete_datagram+0x140>)
 801d48a:	881b      	ldrh	r3, [r3, #0]
 801d48c:	8bfa      	ldrh	r2, [r7, #30]
 801d48e:	429a      	cmp	r2, r3
 801d490:	d905      	bls.n	801d49e <ip_reass_free_complete_datagram+0x112>
 801d492:	4b09      	ldr	r3, [pc, #36]	; (801d4b8 <ip_reass_free_complete_datagram+0x12c>)
 801d494:	22d2      	movs	r2, #210	; 0xd2
 801d496:	490e      	ldr	r1, [pc, #56]	; (801d4d0 <ip_reass_free_complete_datagram+0x144>)
 801d498:	4809      	ldr	r0, [pc, #36]	; (801d4c0 <ip_reass_free_complete_datagram+0x134>)
 801d49a:	f002 fa13 	bl	801f8c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d49e:	4b0b      	ldr	r3, [pc, #44]	; (801d4cc <ip_reass_free_complete_datagram+0x140>)
 801d4a0:	881a      	ldrh	r2, [r3, #0]
 801d4a2:	8bfb      	ldrh	r3, [r7, #30]
 801d4a4:	1ad3      	subs	r3, r2, r3
 801d4a6:	b29a      	uxth	r2, r3
 801d4a8:	4b08      	ldr	r3, [pc, #32]	; (801d4cc <ip_reass_free_complete_datagram+0x140>)
 801d4aa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d4ac:	8bfb      	ldrh	r3, [r7, #30]
}
 801d4ae:	4618      	mov	r0, r3
 801d4b0:	3720      	adds	r7, #32
 801d4b2:	46bd      	mov	sp, r7
 801d4b4:	bd80      	pop	{r7, pc}
 801d4b6:	bf00      	nop
 801d4b8:	08024da8 	.word	0x08024da8
 801d4bc:	08024de4 	.word	0x08024de4
 801d4c0:	08024df0 	.word	0x08024df0
 801d4c4:	08024e18 	.word	0x08024e18
 801d4c8:	08024e2c 	.word	0x08024e2c
 801d4cc:	20010354 	.word	0x20010354
 801d4d0:	08024e4c 	.word	0x08024e4c

0801d4d4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d4d4:	b580      	push	{r7, lr}
 801d4d6:	b08a      	sub	sp, #40	; 0x28
 801d4d8:	af00      	add	r7, sp, #0
 801d4da:	6078      	str	r0, [r7, #4]
 801d4dc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d4de:	2300      	movs	r3, #0
 801d4e0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d4ee:	2300      	movs	r3, #0
 801d4f0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d4f2:	4b28      	ldr	r3, [pc, #160]	; (801d594 <ip_reass_remove_oldest_datagram+0xc0>)
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d4f8:	e030      	b.n	801d55c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4fc:	695a      	ldr	r2, [r3, #20]
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	68db      	ldr	r3, [r3, #12]
 801d502:	429a      	cmp	r2, r3
 801d504:	d10c      	bne.n	801d520 <ip_reass_remove_oldest_datagram+0x4c>
 801d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d508:	699a      	ldr	r2, [r3, #24]
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	691b      	ldr	r3, [r3, #16]
 801d50e:	429a      	cmp	r2, r3
 801d510:	d106      	bne.n	801d520 <ip_reass_remove_oldest_datagram+0x4c>
 801d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d514:	899a      	ldrh	r2, [r3, #12]
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	889b      	ldrh	r3, [r3, #4]
 801d51a:	b29b      	uxth	r3, r3
 801d51c:	429a      	cmp	r2, r3
 801d51e:	d014      	beq.n	801d54a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d520:	693b      	ldr	r3, [r7, #16]
 801d522:	3301      	adds	r3, #1
 801d524:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d526:	6a3b      	ldr	r3, [r7, #32]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d104      	bne.n	801d536 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d52e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d530:	69fb      	ldr	r3, [r7, #28]
 801d532:	61bb      	str	r3, [r7, #24]
 801d534:	e009      	b.n	801d54a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d538:	7fda      	ldrb	r2, [r3, #31]
 801d53a:	6a3b      	ldr	r3, [r7, #32]
 801d53c:	7fdb      	ldrb	r3, [r3, #31]
 801d53e:	429a      	cmp	r2, r3
 801d540:	d803      	bhi.n	801d54a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d544:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d546:	69fb      	ldr	r3, [r7, #28]
 801d548:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d54c:	681b      	ldr	r3, [r3, #0]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d001      	beq.n	801d556 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d554:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d558:	681b      	ldr	r3, [r3, #0]
 801d55a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d1cb      	bne.n	801d4fa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d562:	6a3b      	ldr	r3, [r7, #32]
 801d564:	2b00      	cmp	r3, #0
 801d566:	d008      	beq.n	801d57a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d568:	69b9      	ldr	r1, [r7, #24]
 801d56a:	6a38      	ldr	r0, [r7, #32]
 801d56c:	f7ff ff0e 	bl	801d38c <ip_reass_free_complete_datagram>
 801d570:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d572:	697a      	ldr	r2, [r7, #20]
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	4413      	add	r3, r2
 801d578:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d57a:	697a      	ldr	r2, [r7, #20]
 801d57c:	683b      	ldr	r3, [r7, #0]
 801d57e:	429a      	cmp	r2, r3
 801d580:	da02      	bge.n	801d588 <ip_reass_remove_oldest_datagram+0xb4>
 801d582:	693b      	ldr	r3, [r7, #16]
 801d584:	2b01      	cmp	r3, #1
 801d586:	dcac      	bgt.n	801d4e2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d588:	697b      	ldr	r3, [r7, #20]
}
 801d58a:	4618      	mov	r0, r3
 801d58c:	3728      	adds	r7, #40	; 0x28
 801d58e:	46bd      	mov	sp, r7
 801d590:	bd80      	pop	{r7, pc}
 801d592:	bf00      	nop
 801d594:	20010350 	.word	0x20010350

0801d598 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d598:	b580      	push	{r7, lr}
 801d59a:	b084      	sub	sp, #16
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	6078      	str	r0, [r7, #4]
 801d5a0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d5a2:	2004      	movs	r0, #4
 801d5a4:	f7f4 fb5c 	bl	8011c60 <memp_malloc>
 801d5a8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	d110      	bne.n	801d5d2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d5b0:	6839      	ldr	r1, [r7, #0]
 801d5b2:	6878      	ldr	r0, [r7, #4]
 801d5b4:	f7ff ff8e 	bl	801d4d4 <ip_reass_remove_oldest_datagram>
 801d5b8:	4602      	mov	r2, r0
 801d5ba:	683b      	ldr	r3, [r7, #0]
 801d5bc:	4293      	cmp	r3, r2
 801d5be:	dc03      	bgt.n	801d5c8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d5c0:	2004      	movs	r0, #4
 801d5c2:	f7f4 fb4d 	bl	8011c60 <memp_malloc>
 801d5c6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d5c8:	68fb      	ldr	r3, [r7, #12]
 801d5ca:	2b00      	cmp	r3, #0
 801d5cc:	d101      	bne.n	801d5d2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d5ce:	2300      	movs	r3, #0
 801d5d0:	e016      	b.n	801d600 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d5d2:	2220      	movs	r2, #32
 801d5d4:	2100      	movs	r1, #0
 801d5d6:	68f8      	ldr	r0, [r7, #12]
 801d5d8:	f002 faca 	bl	801fb70 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	220f      	movs	r2, #15
 801d5e0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d5e2:	4b09      	ldr	r3, [pc, #36]	; (801d608 <ip_reass_enqueue_new_datagram+0x70>)
 801d5e4:	681a      	ldr	r2, [r3, #0]
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d5ea:	4a07      	ldr	r2, [pc, #28]	; (801d608 <ip_reass_enqueue_new_datagram+0x70>)
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	3308      	adds	r3, #8
 801d5f4:	2214      	movs	r2, #20
 801d5f6:	6879      	ldr	r1, [r7, #4]
 801d5f8:	4618      	mov	r0, r3
 801d5fa:	f002 fbc8 	bl	801fd8e <memcpy>
  return ipr;
 801d5fe:	68fb      	ldr	r3, [r7, #12]
}
 801d600:	4618      	mov	r0, r3
 801d602:	3710      	adds	r7, #16
 801d604:	46bd      	mov	sp, r7
 801d606:	bd80      	pop	{r7, pc}
 801d608:	20010350 	.word	0x20010350

0801d60c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d60c:	b580      	push	{r7, lr}
 801d60e:	b082      	sub	sp, #8
 801d610:	af00      	add	r7, sp, #0
 801d612:	6078      	str	r0, [r7, #4]
 801d614:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d616:	4b10      	ldr	r3, [pc, #64]	; (801d658 <ip_reass_dequeue_datagram+0x4c>)
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	687a      	ldr	r2, [r7, #4]
 801d61c:	429a      	cmp	r2, r3
 801d61e:	d104      	bne.n	801d62a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	4a0c      	ldr	r2, [pc, #48]	; (801d658 <ip_reass_dequeue_datagram+0x4c>)
 801d626:	6013      	str	r3, [r2, #0]
 801d628:	e00d      	b.n	801d646 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d62a:	683b      	ldr	r3, [r7, #0]
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d106      	bne.n	801d63e <ip_reass_dequeue_datagram+0x32>
 801d630:	4b0a      	ldr	r3, [pc, #40]	; (801d65c <ip_reass_dequeue_datagram+0x50>)
 801d632:	f240 1245 	movw	r2, #325	; 0x145
 801d636:	490a      	ldr	r1, [pc, #40]	; (801d660 <ip_reass_dequeue_datagram+0x54>)
 801d638:	480a      	ldr	r0, [pc, #40]	; (801d664 <ip_reass_dequeue_datagram+0x58>)
 801d63a:	f002 f943 	bl	801f8c4 <iprintf>
    prev->next = ipr->next;
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	681a      	ldr	r2, [r3, #0]
 801d642:	683b      	ldr	r3, [r7, #0]
 801d644:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d646:	6879      	ldr	r1, [r7, #4]
 801d648:	2004      	movs	r0, #4
 801d64a:	f7f4 fb7f 	bl	8011d4c <memp_free>
}
 801d64e:	bf00      	nop
 801d650:	3708      	adds	r7, #8
 801d652:	46bd      	mov	sp, r7
 801d654:	bd80      	pop	{r7, pc}
 801d656:	bf00      	nop
 801d658:	20010350 	.word	0x20010350
 801d65c:	08024da8 	.word	0x08024da8
 801d660:	08024e70 	.word	0x08024e70
 801d664:	08024df0 	.word	0x08024df0

0801d668 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d668:	b580      	push	{r7, lr}
 801d66a:	b08c      	sub	sp, #48	; 0x30
 801d66c:	af00      	add	r7, sp, #0
 801d66e:	60f8      	str	r0, [r7, #12]
 801d670:	60b9      	str	r1, [r7, #8]
 801d672:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d674:	2300      	movs	r3, #0
 801d676:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d678:	2301      	movs	r3, #1
 801d67a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d67c:	68bb      	ldr	r3, [r7, #8]
 801d67e:	685b      	ldr	r3, [r3, #4]
 801d680:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d682:	69fb      	ldr	r3, [r7, #28]
 801d684:	885b      	ldrh	r3, [r3, #2]
 801d686:	b29b      	uxth	r3, r3
 801d688:	4618      	mov	r0, r3
 801d68a:	f7f3 fe11 	bl	80112b0 <lwip_htons>
 801d68e:	4603      	mov	r3, r0
 801d690:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d692:	69fb      	ldr	r3, [r7, #28]
 801d694:	781b      	ldrb	r3, [r3, #0]
 801d696:	f003 030f 	and.w	r3, r3, #15
 801d69a:	b2db      	uxtb	r3, r3
 801d69c:	009b      	lsls	r3, r3, #2
 801d69e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d6a0:	7e7b      	ldrb	r3, [r7, #25]
 801d6a2:	b29b      	uxth	r3, r3
 801d6a4:	8b7a      	ldrh	r2, [r7, #26]
 801d6a6:	429a      	cmp	r2, r3
 801d6a8:	d202      	bcs.n	801d6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d6aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d6ae:	e135      	b.n	801d91c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d6b0:	7e7b      	ldrb	r3, [r7, #25]
 801d6b2:	b29b      	uxth	r3, r3
 801d6b4:	8b7a      	ldrh	r2, [r7, #26]
 801d6b6:	1ad3      	subs	r3, r2, r3
 801d6b8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d6ba:	69fb      	ldr	r3, [r7, #28]
 801d6bc:	88db      	ldrh	r3, [r3, #6]
 801d6be:	b29b      	uxth	r3, r3
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f7f3 fdf5 	bl	80112b0 <lwip_htons>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d6cc:	b29b      	uxth	r3, r3
 801d6ce:	00db      	lsls	r3, r3, #3
 801d6d0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d6d2:	68bb      	ldr	r3, [r7, #8]
 801d6d4:	685b      	ldr	r3, [r3, #4]
 801d6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6da:	2200      	movs	r2, #0
 801d6dc:	701a      	strb	r2, [r3, #0]
 801d6de:	2200      	movs	r2, #0
 801d6e0:	705a      	strb	r2, [r3, #1]
 801d6e2:	2200      	movs	r2, #0
 801d6e4:	709a      	strb	r2, [r3, #2]
 801d6e6:	2200      	movs	r2, #0
 801d6e8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6ec:	8afa      	ldrh	r2, [r7, #22]
 801d6ee:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d6f0:	8afa      	ldrh	r2, [r7, #22]
 801d6f2:	8b7b      	ldrh	r3, [r7, #26]
 801d6f4:	4413      	add	r3, r2
 801d6f6:	b29a      	uxth	r2, r3
 801d6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6fa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6fe:	88db      	ldrh	r3, [r3, #6]
 801d700:	b29b      	uxth	r3, r3
 801d702:	8afa      	ldrh	r2, [r7, #22]
 801d704:	429a      	cmp	r2, r3
 801d706:	d902      	bls.n	801d70e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d70c:	e106      	b.n	801d91c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	685b      	ldr	r3, [r3, #4]
 801d712:	627b      	str	r3, [r7, #36]	; 0x24
 801d714:	e068      	b.n	801d7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d718:	685b      	ldr	r3, [r3, #4]
 801d71a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d71e:	889b      	ldrh	r3, [r3, #4]
 801d720:	b29a      	uxth	r2, r3
 801d722:	693b      	ldr	r3, [r7, #16]
 801d724:	889b      	ldrh	r3, [r3, #4]
 801d726:	b29b      	uxth	r3, r3
 801d728:	429a      	cmp	r2, r3
 801d72a:	d235      	bcs.n	801d798 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d730:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d734:	2b00      	cmp	r3, #0
 801d736:	d020      	beq.n	801d77a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d73a:	889b      	ldrh	r3, [r3, #4]
 801d73c:	b29a      	uxth	r2, r3
 801d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d740:	88db      	ldrh	r3, [r3, #6]
 801d742:	b29b      	uxth	r3, r3
 801d744:	429a      	cmp	r2, r3
 801d746:	d307      	bcc.n	801d758 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d74a:	88db      	ldrh	r3, [r3, #6]
 801d74c:	b29a      	uxth	r2, r3
 801d74e:	693b      	ldr	r3, [r7, #16]
 801d750:	889b      	ldrh	r3, [r3, #4]
 801d752:	b29b      	uxth	r3, r3
 801d754:	429a      	cmp	r2, r3
 801d756:	d902      	bls.n	801d75e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d75c:	e0de      	b.n	801d91c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d760:	68ba      	ldr	r2, [r7, #8]
 801d762:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d766:	88db      	ldrh	r3, [r3, #6]
 801d768:	b29a      	uxth	r2, r3
 801d76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d76c:	889b      	ldrh	r3, [r3, #4]
 801d76e:	b29b      	uxth	r3, r3
 801d770:	429a      	cmp	r2, r3
 801d772:	d03d      	beq.n	801d7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d774:	2300      	movs	r3, #0
 801d776:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d778:	e03a      	b.n	801d7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d77c:	88db      	ldrh	r3, [r3, #6]
 801d77e:	b29a      	uxth	r2, r3
 801d780:	693b      	ldr	r3, [r7, #16]
 801d782:	889b      	ldrh	r3, [r3, #4]
 801d784:	b29b      	uxth	r3, r3
 801d786:	429a      	cmp	r2, r3
 801d788:	d902      	bls.n	801d790 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d78a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d78e:	e0c5      	b.n	801d91c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	68ba      	ldr	r2, [r7, #8]
 801d794:	605a      	str	r2, [r3, #4]
      break;
 801d796:	e02b      	b.n	801d7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d79a:	889b      	ldrh	r3, [r3, #4]
 801d79c:	b29a      	uxth	r2, r3
 801d79e:	693b      	ldr	r3, [r7, #16]
 801d7a0:	889b      	ldrh	r3, [r3, #4]
 801d7a2:	b29b      	uxth	r3, r3
 801d7a4:	429a      	cmp	r2, r3
 801d7a6:	d102      	bne.n	801d7ae <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d7a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d7ac:	e0b6      	b.n	801d91c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7b0:	889b      	ldrh	r3, [r3, #4]
 801d7b2:	b29a      	uxth	r2, r3
 801d7b4:	693b      	ldr	r3, [r7, #16]
 801d7b6:	88db      	ldrh	r3, [r3, #6]
 801d7b8:	b29b      	uxth	r3, r3
 801d7ba:	429a      	cmp	r2, r3
 801d7bc:	d202      	bcs.n	801d7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d7be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d7c2:	e0ab      	b.n	801d91c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d009      	beq.n	801d7de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7cc:	88db      	ldrh	r3, [r3, #6]
 801d7ce:	b29a      	uxth	r2, r3
 801d7d0:	693b      	ldr	r3, [r7, #16]
 801d7d2:	889b      	ldrh	r3, [r3, #4]
 801d7d4:	b29b      	uxth	r3, r3
 801d7d6:	429a      	cmp	r2, r3
 801d7d8:	d001      	beq.n	801d7de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d7da:	2300      	movs	r3, #0
 801d7dc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d7de:	693b      	ldr	r3, [r7, #16]
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d7e4:	693b      	ldr	r3, [r7, #16]
 801d7e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	d193      	bne.n	801d716 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d7ee:	e000      	b.n	801d7f2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d7f0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d12d      	bne.n	801d854 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d01c      	beq.n	801d838 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d800:	88db      	ldrh	r3, [r3, #6]
 801d802:	b29a      	uxth	r2, r3
 801d804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d806:	889b      	ldrh	r3, [r3, #4]
 801d808:	b29b      	uxth	r3, r3
 801d80a:	429a      	cmp	r2, r3
 801d80c:	d906      	bls.n	801d81c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d80e:	4b45      	ldr	r3, [pc, #276]	; (801d924 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d810:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d814:	4944      	ldr	r1, [pc, #272]	; (801d928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d816:	4845      	ldr	r0, [pc, #276]	; (801d92c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d818:	f002 f854 	bl	801f8c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d81e:	68ba      	ldr	r2, [r7, #8]
 801d820:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d824:	88db      	ldrh	r3, [r3, #6]
 801d826:	b29a      	uxth	r2, r3
 801d828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d82a:	889b      	ldrh	r3, [r3, #4]
 801d82c:	b29b      	uxth	r3, r3
 801d82e:	429a      	cmp	r2, r3
 801d830:	d010      	beq.n	801d854 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d832:	2300      	movs	r3, #0
 801d834:	623b      	str	r3, [r7, #32]
 801d836:	e00d      	b.n	801d854 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	685b      	ldr	r3, [r3, #4]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d006      	beq.n	801d84e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d840:	4b38      	ldr	r3, [pc, #224]	; (801d924 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d842:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d846:	493a      	ldr	r1, [pc, #232]	; (801d930 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d848:	4838      	ldr	r0, [pc, #224]	; (801d92c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d84a:	f002 f83b 	bl	801f8c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	68ba      	ldr	r2, [r7, #8]
 801d852:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	2b00      	cmp	r3, #0
 801d858:	d105      	bne.n	801d866 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	7f9b      	ldrb	r3, [r3, #30]
 801d85e:	f003 0301 	and.w	r3, r3, #1
 801d862:	2b00      	cmp	r3, #0
 801d864:	d059      	beq.n	801d91a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d866:	6a3b      	ldr	r3, [r7, #32]
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d04f      	beq.n	801d90c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	685b      	ldr	r3, [r3, #4]
 801d870:	2b00      	cmp	r3, #0
 801d872:	d006      	beq.n	801d882 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d874:	68fb      	ldr	r3, [r7, #12]
 801d876:	685b      	ldr	r3, [r3, #4]
 801d878:	685b      	ldr	r3, [r3, #4]
 801d87a:	889b      	ldrh	r3, [r3, #4]
 801d87c:	b29b      	uxth	r3, r3
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d002      	beq.n	801d888 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d882:	2300      	movs	r3, #0
 801d884:	623b      	str	r3, [r7, #32]
 801d886:	e041      	b.n	801d90c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d88a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d892:	e012      	b.n	801d8ba <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d896:	685b      	ldr	r3, [r3, #4]
 801d898:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d89c:	88db      	ldrh	r3, [r3, #6]
 801d89e:	b29a      	uxth	r2, r3
 801d8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8a2:	889b      	ldrh	r3, [r3, #4]
 801d8a4:	b29b      	uxth	r3, r3
 801d8a6:	429a      	cmp	r2, r3
 801d8a8:	d002      	beq.n	801d8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d8aa:	2300      	movs	r3, #0
 801d8ac:	623b      	str	r3, [r7, #32]
            break;
 801d8ae:	e007      	b.n	801d8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8b2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d1e9      	bne.n	801d894 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d8c0:	6a3b      	ldr	r3, [r7, #32]
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	d022      	beq.n	801d90c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	685b      	ldr	r3, [r3, #4]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d106      	bne.n	801d8dc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d8ce:	4b15      	ldr	r3, [pc, #84]	; (801d924 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d8d0:	f240 12df 	movw	r2, #479	; 0x1df
 801d8d4:	4917      	ldr	r1, [pc, #92]	; (801d934 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d8d6:	4815      	ldr	r0, [pc, #84]	; (801d92c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d8d8:	f001 fff4 	bl	801f8c4 <iprintf>
          LWIP_ASSERT("sanity check",
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	685b      	ldr	r3, [r3, #4]
 801d8e0:	685b      	ldr	r3, [r3, #4]
 801d8e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d8e4:	429a      	cmp	r2, r3
 801d8e6:	d106      	bne.n	801d8f6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d8e8:	4b0e      	ldr	r3, [pc, #56]	; (801d924 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d8ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d8ee:	4911      	ldr	r1, [pc, #68]	; (801d934 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d8f0:	480e      	ldr	r0, [pc, #56]	; (801d92c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d8f2:	f001 ffe7 	bl	801f8c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d006      	beq.n	801d90c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d8fe:	4b09      	ldr	r3, [pc, #36]	; (801d924 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d900:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d904:	490c      	ldr	r1, [pc, #48]	; (801d938 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d906:	4809      	ldr	r0, [pc, #36]	; (801d92c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d908:	f001 ffdc 	bl	801f8c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d90c:	6a3b      	ldr	r3, [r7, #32]
 801d90e:	2b00      	cmp	r3, #0
 801d910:	bf14      	ite	ne
 801d912:	2301      	movne	r3, #1
 801d914:	2300      	moveq	r3, #0
 801d916:	b2db      	uxtb	r3, r3
 801d918:	e000      	b.n	801d91c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d91a:	2300      	movs	r3, #0
}
 801d91c:	4618      	mov	r0, r3
 801d91e:	3730      	adds	r7, #48	; 0x30
 801d920:	46bd      	mov	sp, r7
 801d922:	bd80      	pop	{r7, pc}
 801d924:	08024da8 	.word	0x08024da8
 801d928:	08024e8c 	.word	0x08024e8c
 801d92c:	08024df0 	.word	0x08024df0
 801d930:	08024eac 	.word	0x08024eac
 801d934:	08024ee4 	.word	0x08024ee4
 801d938:	08024ef4 	.word	0x08024ef4

0801d93c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d93c:	b580      	push	{r7, lr}
 801d93e:	b08e      	sub	sp, #56	; 0x38
 801d940:	af00      	add	r7, sp, #0
 801d942:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	685b      	ldr	r3, [r3, #4]
 801d948:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d94c:	781b      	ldrb	r3, [r3, #0]
 801d94e:	f003 030f 	and.w	r3, r3, #15
 801d952:	b2db      	uxtb	r3, r3
 801d954:	009b      	lsls	r3, r3, #2
 801d956:	b2db      	uxtb	r3, r3
 801d958:	2b14      	cmp	r3, #20
 801d95a:	f040 8171 	bne.w	801dc40 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d960:	88db      	ldrh	r3, [r3, #6]
 801d962:	b29b      	uxth	r3, r3
 801d964:	4618      	mov	r0, r3
 801d966:	f7f3 fca3 	bl	80112b0 <lwip_htons>
 801d96a:	4603      	mov	r3, r0
 801d96c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d970:	b29b      	uxth	r3, r3
 801d972:	00db      	lsls	r3, r3, #3
 801d974:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d978:	885b      	ldrh	r3, [r3, #2]
 801d97a:	b29b      	uxth	r3, r3
 801d97c:	4618      	mov	r0, r3
 801d97e:	f7f3 fc97 	bl	80112b0 <lwip_htons>
 801d982:	4603      	mov	r3, r0
 801d984:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d988:	781b      	ldrb	r3, [r3, #0]
 801d98a:	f003 030f 	and.w	r3, r3, #15
 801d98e:	b2db      	uxtb	r3, r3
 801d990:	009b      	lsls	r3, r3, #2
 801d992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d99a:	b29b      	uxth	r3, r3
 801d99c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d99e:	429a      	cmp	r2, r3
 801d9a0:	f0c0 8150 	bcc.w	801dc44 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d9a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d9a8:	b29b      	uxth	r3, r3
 801d9aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d9ac:	1ad3      	subs	r3, r2, r3
 801d9ae:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d9b0:	6878      	ldr	r0, [r7, #4]
 801d9b2:	f7f5 f941 	bl	8012c38 <pbuf_clen>
 801d9b6:	4603      	mov	r3, r0
 801d9b8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d9ba:	4b8c      	ldr	r3, [pc, #560]	; (801dbec <ip4_reass+0x2b0>)
 801d9bc:	881b      	ldrh	r3, [r3, #0]
 801d9be:	461a      	mov	r2, r3
 801d9c0:	8c3b      	ldrh	r3, [r7, #32]
 801d9c2:	4413      	add	r3, r2
 801d9c4:	2b0a      	cmp	r3, #10
 801d9c6:	dd10      	ble.n	801d9ea <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d9c8:	8c3b      	ldrh	r3, [r7, #32]
 801d9ca:	4619      	mov	r1, r3
 801d9cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d9ce:	f7ff fd81 	bl	801d4d4 <ip_reass_remove_oldest_datagram>
 801d9d2:	4603      	mov	r3, r0
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	f000 8137 	beq.w	801dc48 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d9da:	4b84      	ldr	r3, [pc, #528]	; (801dbec <ip4_reass+0x2b0>)
 801d9dc:	881b      	ldrh	r3, [r3, #0]
 801d9de:	461a      	mov	r2, r3
 801d9e0:	8c3b      	ldrh	r3, [r7, #32]
 801d9e2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d9e4:	2b0a      	cmp	r3, #10
 801d9e6:	f300 812f 	bgt.w	801dc48 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d9ea:	4b81      	ldr	r3, [pc, #516]	; (801dbf0 <ip4_reass+0x2b4>)
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	633b      	str	r3, [r7, #48]	; 0x30
 801d9f0:	e015      	b.n	801da1e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9f4:	695a      	ldr	r2, [r3, #20]
 801d9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9f8:	68db      	ldr	r3, [r3, #12]
 801d9fa:	429a      	cmp	r2, r3
 801d9fc:	d10c      	bne.n	801da18 <ip4_reass+0xdc>
 801d9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da00:	699a      	ldr	r2, [r3, #24]
 801da02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da04:	691b      	ldr	r3, [r3, #16]
 801da06:	429a      	cmp	r2, r3
 801da08:	d106      	bne.n	801da18 <ip4_reass+0xdc>
 801da0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da0c:	899a      	ldrh	r2, [r3, #12]
 801da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da10:	889b      	ldrh	r3, [r3, #4]
 801da12:	b29b      	uxth	r3, r3
 801da14:	429a      	cmp	r2, r3
 801da16:	d006      	beq.n	801da26 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	633b      	str	r3, [r7, #48]	; 0x30
 801da1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da20:	2b00      	cmp	r3, #0
 801da22:	d1e6      	bne.n	801d9f2 <ip4_reass+0xb6>
 801da24:	e000      	b.n	801da28 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801da26:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801da28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d109      	bne.n	801da42 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801da2e:	8c3b      	ldrh	r3, [r7, #32]
 801da30:	4619      	mov	r1, r3
 801da32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801da34:	f7ff fdb0 	bl	801d598 <ip_reass_enqueue_new_datagram>
 801da38:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801da3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d11c      	bne.n	801da7a <ip4_reass+0x13e>
      goto nullreturn;
 801da40:	e105      	b.n	801dc4e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801da42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da44:	88db      	ldrh	r3, [r3, #6]
 801da46:	b29b      	uxth	r3, r3
 801da48:	4618      	mov	r0, r3
 801da4a:	f7f3 fc31 	bl	80112b0 <lwip_htons>
 801da4e:	4603      	mov	r3, r0
 801da50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da54:	2b00      	cmp	r3, #0
 801da56:	d110      	bne.n	801da7a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801da58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da5a:	89db      	ldrh	r3, [r3, #14]
 801da5c:	4618      	mov	r0, r3
 801da5e:	f7f3 fc27 	bl	80112b0 <lwip_htons>
 801da62:	4603      	mov	r3, r0
 801da64:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d006      	beq.n	801da7a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da6e:	3308      	adds	r3, #8
 801da70:	2214      	movs	r2, #20
 801da72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801da74:	4618      	mov	r0, r3
 801da76:	f002 f98a 	bl	801fd8e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801da7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da7c:	88db      	ldrh	r3, [r3, #6]
 801da7e:	b29b      	uxth	r3, r3
 801da80:	f003 0320 	and.w	r3, r3, #32
 801da84:	2b00      	cmp	r3, #0
 801da86:	bf0c      	ite	eq
 801da88:	2301      	moveq	r3, #1
 801da8a:	2300      	movne	r3, #0
 801da8c:	b2db      	uxtb	r3, r3
 801da8e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801da90:	69fb      	ldr	r3, [r7, #28]
 801da92:	2b00      	cmp	r3, #0
 801da94:	d00e      	beq.n	801dab4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801da96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801da98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801da9a:	4413      	add	r3, r2
 801da9c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801da9e:	8b7a      	ldrh	r2, [r7, #26]
 801daa0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801daa2:	429a      	cmp	r2, r3
 801daa4:	f0c0 80a0 	bcc.w	801dbe8 <ip4_reass+0x2ac>
 801daa8:	8b7b      	ldrh	r3, [r7, #26]
 801daaa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801daae:	4293      	cmp	r3, r2
 801dab0:	f200 809a 	bhi.w	801dbe8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801dab4:	69fa      	ldr	r2, [r7, #28]
 801dab6:	6879      	ldr	r1, [r7, #4]
 801dab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801daba:	f7ff fdd5 	bl	801d668 <ip_reass_chain_frag_into_datagram_and_validate>
 801dabe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801dac0:	697b      	ldr	r3, [r7, #20]
 801dac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801dac6:	f000 809b 	beq.w	801dc00 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801daca:	4b48      	ldr	r3, [pc, #288]	; (801dbec <ip4_reass+0x2b0>)
 801dacc:	881a      	ldrh	r2, [r3, #0]
 801dace:	8c3b      	ldrh	r3, [r7, #32]
 801dad0:	4413      	add	r3, r2
 801dad2:	b29a      	uxth	r2, r3
 801dad4:	4b45      	ldr	r3, [pc, #276]	; (801dbec <ip4_reass+0x2b0>)
 801dad6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801dad8:	69fb      	ldr	r3, [r7, #28]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d00d      	beq.n	801dafa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801dade:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801dae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dae2:	4413      	add	r3, r2
 801dae4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dae8:	8a7a      	ldrh	r2, [r7, #18]
 801daea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daee:	7f9b      	ldrb	r3, [r3, #30]
 801daf0:	f043 0301 	orr.w	r3, r3, #1
 801daf4:	b2da      	uxtb	r2, r3
 801daf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daf8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801dafa:	697b      	ldr	r3, [r7, #20]
 801dafc:	2b01      	cmp	r3, #1
 801dafe:	d171      	bne.n	801dbe4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801db00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db02:	8b9b      	ldrh	r3, [r3, #28]
 801db04:	3314      	adds	r3, #20
 801db06:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db0a:	685b      	ldr	r3, [r3, #4]
 801db0c:	685b      	ldr	r3, [r3, #4]
 801db0e:	681b      	ldr	r3, [r3, #0]
 801db10:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db14:	685b      	ldr	r3, [r3, #4]
 801db16:	685b      	ldr	r3, [r3, #4]
 801db18:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db1c:	3308      	adds	r3, #8
 801db1e:	2214      	movs	r2, #20
 801db20:	4619      	mov	r1, r3
 801db22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801db24:	f002 f933 	bl	801fd8e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801db28:	8a3b      	ldrh	r3, [r7, #16]
 801db2a:	4618      	mov	r0, r3
 801db2c:	f7f3 fbc0 	bl	80112b0 <lwip_htons>
 801db30:	4603      	mov	r3, r0
 801db32:	461a      	mov	r2, r3
 801db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db36:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801db38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db3a:	2200      	movs	r2, #0
 801db3c:	719a      	strb	r2, [r3, #6]
 801db3e:	2200      	movs	r2, #0
 801db40:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801db42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db44:	2200      	movs	r2, #0
 801db46:	729a      	strb	r2, [r3, #10]
 801db48:	2200      	movs	r2, #0
 801db4a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801db4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db4e:	685b      	ldr	r3, [r3, #4]
 801db50:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801db52:	e00d      	b.n	801db70 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801db54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db56:	685b      	ldr	r3, [r3, #4]
 801db58:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801db5a:	2114      	movs	r1, #20
 801db5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801db5e:	f7f4 ff57 	bl	8012a10 <pbuf_remove_header>
      pbuf_cat(p, r);
 801db62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801db64:	6878      	ldr	r0, [r7, #4]
 801db66:	f7f5 f8a7 	bl	8012cb8 <pbuf_cat>
      r = iprh->next_pbuf;
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801db70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db72:	2b00      	cmp	r3, #0
 801db74:	d1ee      	bne.n	801db54 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801db76:	4b1e      	ldr	r3, [pc, #120]	; (801dbf0 <ip4_reass+0x2b4>)
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db7c:	429a      	cmp	r2, r3
 801db7e:	d102      	bne.n	801db86 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801db80:	2300      	movs	r3, #0
 801db82:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db84:	e010      	b.n	801dba8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801db86:	4b1a      	ldr	r3, [pc, #104]	; (801dbf0 <ip4_reass+0x2b4>)
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db8c:	e007      	b.n	801db9e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db94:	429a      	cmp	r2, r3
 801db96:	d006      	beq.n	801dba6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801db98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d1f4      	bne.n	801db8e <ip4_reass+0x252>
 801dba4:	e000      	b.n	801dba8 <ip4_reass+0x26c>
          break;
 801dba6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801dba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dbaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dbac:	f7ff fd2e 	bl	801d60c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801dbb0:	6878      	ldr	r0, [r7, #4]
 801dbb2:	f7f5 f841 	bl	8012c38 <pbuf_clen>
 801dbb6:	4603      	mov	r3, r0
 801dbb8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801dbba:	4b0c      	ldr	r3, [pc, #48]	; (801dbec <ip4_reass+0x2b0>)
 801dbbc:	881b      	ldrh	r3, [r3, #0]
 801dbbe:	8c3a      	ldrh	r2, [r7, #32]
 801dbc0:	429a      	cmp	r2, r3
 801dbc2:	d906      	bls.n	801dbd2 <ip4_reass+0x296>
 801dbc4:	4b0b      	ldr	r3, [pc, #44]	; (801dbf4 <ip4_reass+0x2b8>)
 801dbc6:	f240 229b 	movw	r2, #667	; 0x29b
 801dbca:	490b      	ldr	r1, [pc, #44]	; (801dbf8 <ip4_reass+0x2bc>)
 801dbcc:	480b      	ldr	r0, [pc, #44]	; (801dbfc <ip4_reass+0x2c0>)
 801dbce:	f001 fe79 	bl	801f8c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801dbd2:	4b06      	ldr	r3, [pc, #24]	; (801dbec <ip4_reass+0x2b0>)
 801dbd4:	881a      	ldrh	r2, [r3, #0]
 801dbd6:	8c3b      	ldrh	r3, [r7, #32]
 801dbd8:	1ad3      	subs	r3, r2, r3
 801dbda:	b29a      	uxth	r2, r3
 801dbdc:	4b03      	ldr	r3, [pc, #12]	; (801dbec <ip4_reass+0x2b0>)
 801dbde:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	e038      	b.n	801dc56 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801dbe4:	2300      	movs	r3, #0
 801dbe6:	e036      	b.n	801dc56 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801dbe8:	bf00      	nop
 801dbea:	e00a      	b.n	801dc02 <ip4_reass+0x2c6>
 801dbec:	20010354 	.word	0x20010354
 801dbf0:	20010350 	.word	0x20010350
 801dbf4:	08024da8 	.word	0x08024da8
 801dbf8:	08024f18 	.word	0x08024f18
 801dbfc:	08024df0 	.word	0x08024df0
    goto nullreturn_ipr;
 801dc00:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801dc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d106      	bne.n	801dc16 <ip4_reass+0x2da>
 801dc08:	4b15      	ldr	r3, [pc, #84]	; (801dc60 <ip4_reass+0x324>)
 801dc0a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801dc0e:	4915      	ldr	r1, [pc, #84]	; (801dc64 <ip4_reass+0x328>)
 801dc10:	4815      	ldr	r0, [pc, #84]	; (801dc68 <ip4_reass+0x32c>)
 801dc12:	f001 fe57 	bl	801f8c4 <iprintf>
  if (ipr->p == NULL) {
 801dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc18:	685b      	ldr	r3, [r3, #4]
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	d116      	bne.n	801dc4c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801dc1e:	4b13      	ldr	r3, [pc, #76]	; (801dc6c <ip4_reass+0x330>)
 801dc20:	681b      	ldr	r3, [r3, #0]
 801dc22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dc24:	429a      	cmp	r2, r3
 801dc26:	d006      	beq.n	801dc36 <ip4_reass+0x2fa>
 801dc28:	4b0d      	ldr	r3, [pc, #52]	; (801dc60 <ip4_reass+0x324>)
 801dc2a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801dc2e:	4910      	ldr	r1, [pc, #64]	; (801dc70 <ip4_reass+0x334>)
 801dc30:	480d      	ldr	r0, [pc, #52]	; (801dc68 <ip4_reass+0x32c>)
 801dc32:	f001 fe47 	bl	801f8c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801dc36:	2100      	movs	r1, #0
 801dc38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dc3a:	f7ff fce7 	bl	801d60c <ip_reass_dequeue_datagram>
 801dc3e:	e006      	b.n	801dc4e <ip4_reass+0x312>
    goto nullreturn;
 801dc40:	bf00      	nop
 801dc42:	e004      	b.n	801dc4e <ip4_reass+0x312>
    goto nullreturn;
 801dc44:	bf00      	nop
 801dc46:	e002      	b.n	801dc4e <ip4_reass+0x312>
      goto nullreturn;
 801dc48:	bf00      	nop
 801dc4a:	e000      	b.n	801dc4e <ip4_reass+0x312>
  }

nullreturn:
 801dc4c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801dc4e:	6878      	ldr	r0, [r7, #4]
 801dc50:	f7f4 ff64 	bl	8012b1c <pbuf_free>
  return NULL;
 801dc54:	2300      	movs	r3, #0
}
 801dc56:	4618      	mov	r0, r3
 801dc58:	3738      	adds	r7, #56	; 0x38
 801dc5a:	46bd      	mov	sp, r7
 801dc5c:	bd80      	pop	{r7, pc}
 801dc5e:	bf00      	nop
 801dc60:	08024da8 	.word	0x08024da8
 801dc64:	08024f34 	.word	0x08024f34
 801dc68:	08024df0 	.word	0x08024df0
 801dc6c:	20010350 	.word	0x20010350
 801dc70:	08024f40 	.word	0x08024f40

0801dc74 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801dc74:	b580      	push	{r7, lr}
 801dc76:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801dc78:	2005      	movs	r0, #5
 801dc7a:	f7f3 fff1 	bl	8011c60 <memp_malloc>
 801dc7e:	4603      	mov	r3, r0
}
 801dc80:	4618      	mov	r0, r3
 801dc82:	bd80      	pop	{r7, pc}

0801dc84 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801dc84:	b580      	push	{r7, lr}
 801dc86:	b082      	sub	sp, #8
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d106      	bne.n	801dca0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801dc92:	4b07      	ldr	r3, [pc, #28]	; (801dcb0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801dc94:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801dc98:	4906      	ldr	r1, [pc, #24]	; (801dcb4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801dc9a:	4807      	ldr	r0, [pc, #28]	; (801dcb8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801dc9c:	f001 fe12 	bl	801f8c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801dca0:	6879      	ldr	r1, [r7, #4]
 801dca2:	2005      	movs	r0, #5
 801dca4:	f7f4 f852 	bl	8011d4c <memp_free>
}
 801dca8:	bf00      	nop
 801dcaa:	3708      	adds	r7, #8
 801dcac:	46bd      	mov	sp, r7
 801dcae:	bd80      	pop	{r7, pc}
 801dcb0:	08024da8 	.word	0x08024da8
 801dcb4:	08024f60 	.word	0x08024f60
 801dcb8:	08024df0 	.word	0x08024df0

0801dcbc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801dcbc:	b580      	push	{r7, lr}
 801dcbe:	b084      	sub	sp, #16
 801dcc0:	af00      	add	r7, sp, #0
 801dcc2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801dcc8:	68fb      	ldr	r3, [r7, #12]
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d106      	bne.n	801dcdc <ipfrag_free_pbuf_custom+0x20>
 801dcce:	4b11      	ldr	r3, [pc, #68]	; (801dd14 <ipfrag_free_pbuf_custom+0x58>)
 801dcd0:	f240 22ce 	movw	r2, #718	; 0x2ce
 801dcd4:	4910      	ldr	r1, [pc, #64]	; (801dd18 <ipfrag_free_pbuf_custom+0x5c>)
 801dcd6:	4811      	ldr	r0, [pc, #68]	; (801dd1c <ipfrag_free_pbuf_custom+0x60>)
 801dcd8:	f001 fdf4 	bl	801f8c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801dcdc:	68fa      	ldr	r2, [r7, #12]
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	429a      	cmp	r2, r3
 801dce2:	d006      	beq.n	801dcf2 <ipfrag_free_pbuf_custom+0x36>
 801dce4:	4b0b      	ldr	r3, [pc, #44]	; (801dd14 <ipfrag_free_pbuf_custom+0x58>)
 801dce6:	f240 22cf 	movw	r2, #719	; 0x2cf
 801dcea:	490d      	ldr	r1, [pc, #52]	; (801dd20 <ipfrag_free_pbuf_custom+0x64>)
 801dcec:	480b      	ldr	r0, [pc, #44]	; (801dd1c <ipfrag_free_pbuf_custom+0x60>)
 801dcee:	f001 fde9 	bl	801f8c4 <iprintf>
  if (pcr->original != NULL) {
 801dcf2:	68fb      	ldr	r3, [r7, #12]
 801dcf4:	695b      	ldr	r3, [r3, #20]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d004      	beq.n	801dd04 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	695b      	ldr	r3, [r3, #20]
 801dcfe:	4618      	mov	r0, r3
 801dd00:	f7f4 ff0c 	bl	8012b1c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801dd04:	68f8      	ldr	r0, [r7, #12]
 801dd06:	f7ff ffbd 	bl	801dc84 <ip_frag_free_pbuf_custom_ref>
}
 801dd0a:	bf00      	nop
 801dd0c:	3710      	adds	r7, #16
 801dd0e:	46bd      	mov	sp, r7
 801dd10:	bd80      	pop	{r7, pc}
 801dd12:	bf00      	nop
 801dd14:	08024da8 	.word	0x08024da8
 801dd18:	08024f6c 	.word	0x08024f6c
 801dd1c:	08024df0 	.word	0x08024df0
 801dd20:	08024f78 	.word	0x08024f78

0801dd24 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b094      	sub	sp, #80	; 0x50
 801dd28:	af02      	add	r7, sp, #8
 801dd2a:	60f8      	str	r0, [r7, #12]
 801dd2c:	60b9      	str	r1, [r7, #8]
 801dd2e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801dd30:	2300      	movs	r3, #0
 801dd32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801dd36:	68bb      	ldr	r3, [r7, #8]
 801dd38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dd3a:	3b14      	subs	r3, #20
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	da00      	bge.n	801dd42 <ip4_frag+0x1e>
 801dd40:	3307      	adds	r3, #7
 801dd42:	10db      	asrs	r3, r3, #3
 801dd44:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801dd46:	2314      	movs	r3, #20
 801dd48:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801dd4a:	68fb      	ldr	r3, [r7, #12]
 801dd4c:	685b      	ldr	r3, [r3, #4]
 801dd4e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801dd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd52:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd56:	781b      	ldrb	r3, [r3, #0]
 801dd58:	f003 030f 	and.w	r3, r3, #15
 801dd5c:	b2db      	uxtb	r3, r3
 801dd5e:	009b      	lsls	r3, r3, #2
 801dd60:	b2db      	uxtb	r3, r3
 801dd62:	2b14      	cmp	r3, #20
 801dd64:	d002      	beq.n	801dd6c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801dd66:	f06f 0305 	mvn.w	r3, #5
 801dd6a:	e110      	b.n	801df8e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	895b      	ldrh	r3, [r3, #10]
 801dd70:	2b13      	cmp	r3, #19
 801dd72:	d809      	bhi.n	801dd88 <ip4_frag+0x64>
 801dd74:	4b88      	ldr	r3, [pc, #544]	; (801df98 <ip4_frag+0x274>)
 801dd76:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801dd7a:	4988      	ldr	r1, [pc, #544]	; (801df9c <ip4_frag+0x278>)
 801dd7c:	4888      	ldr	r0, [pc, #544]	; (801dfa0 <ip4_frag+0x27c>)
 801dd7e:	f001 fda1 	bl	801f8c4 <iprintf>
 801dd82:	f06f 0305 	mvn.w	r3, #5
 801dd86:	e102      	b.n	801df8e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd8a:	88db      	ldrh	r3, [r3, #6]
 801dd8c:	b29b      	uxth	r3, r3
 801dd8e:	4618      	mov	r0, r3
 801dd90:	f7f3 fa8e 	bl	80112b0 <lwip_htons>
 801dd94:	4603      	mov	r3, r0
 801dd96:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801dd98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dd9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801dda2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dda4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801dda8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	891b      	ldrh	r3, [r3, #8]
 801ddae:	3b14      	subs	r3, #20
 801ddb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801ddb4:	e0e1      	b.n	801df7a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ddb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ddb8:	00db      	lsls	r3, r3, #3
 801ddba:	b29b      	uxth	r3, r3
 801ddbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ddc0:	4293      	cmp	r3, r2
 801ddc2:	bf28      	it	cs
 801ddc4:	4613      	movcs	r3, r2
 801ddc6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ddc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ddcc:	2114      	movs	r1, #20
 801ddce:	200e      	movs	r0, #14
 801ddd0:	f7f4 fbc0 	bl	8012554 <pbuf_alloc>
 801ddd4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	f000 80d5 	beq.w	801df88 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dde0:	895b      	ldrh	r3, [r3, #10]
 801dde2:	2b13      	cmp	r3, #19
 801dde4:	d806      	bhi.n	801ddf4 <ip4_frag+0xd0>
 801dde6:	4b6c      	ldr	r3, [pc, #432]	; (801df98 <ip4_frag+0x274>)
 801dde8:	f44f 7249 	mov.w	r2, #804	; 0x324
 801ddec:	496d      	ldr	r1, [pc, #436]	; (801dfa4 <ip4_frag+0x280>)
 801ddee:	486c      	ldr	r0, [pc, #432]	; (801dfa0 <ip4_frag+0x27c>)
 801ddf0:	f001 fd68 	bl	801f8c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddf6:	685b      	ldr	r3, [r3, #4]
 801ddf8:	2214      	movs	r2, #20
 801ddfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ddfc:	4618      	mov	r0, r3
 801ddfe:	f001 ffc6 	bl	801fd8e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801de02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de04:	685b      	ldr	r3, [r3, #4]
 801de06:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801de08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801de0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801de0e:	e064      	b.n	801deda <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801de10:	68fb      	ldr	r3, [r7, #12]
 801de12:	895a      	ldrh	r2, [r3, #10]
 801de14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801de16:	1ad3      	subs	r3, r2, r3
 801de18:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801de1a:	68fb      	ldr	r3, [r7, #12]
 801de1c:	895b      	ldrh	r3, [r3, #10]
 801de1e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801de20:	429a      	cmp	r2, r3
 801de22:	d906      	bls.n	801de32 <ip4_frag+0x10e>
 801de24:	4b5c      	ldr	r3, [pc, #368]	; (801df98 <ip4_frag+0x274>)
 801de26:	f240 322d 	movw	r2, #813	; 0x32d
 801de2a:	495f      	ldr	r1, [pc, #380]	; (801dfa8 <ip4_frag+0x284>)
 801de2c:	485c      	ldr	r0, [pc, #368]	; (801dfa0 <ip4_frag+0x27c>)
 801de2e:	f001 fd49 	bl	801f8c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801de32:	8bfa      	ldrh	r2, [r7, #30]
 801de34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801de38:	4293      	cmp	r3, r2
 801de3a:	bf28      	it	cs
 801de3c:	4613      	movcs	r3, r2
 801de3e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801de42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801de46:	2b00      	cmp	r3, #0
 801de48:	d105      	bne.n	801de56 <ip4_frag+0x132>
        poff = 0;
 801de4a:	2300      	movs	r3, #0
 801de4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	60fb      	str	r3, [r7, #12]
        continue;
 801de54:	e041      	b.n	801deda <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801de56:	f7ff ff0d 	bl	801dc74 <ip_frag_alloc_pbuf_custom_ref>
 801de5a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801de5c:	69bb      	ldr	r3, [r7, #24]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d103      	bne.n	801de6a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801de62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de64:	f7f4 fe5a 	bl	8012b1c <pbuf_free>
        goto memerr;
 801de68:	e08f      	b.n	801df8a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801de6a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801de6c:	68fb      	ldr	r3, [r7, #12]
 801de6e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801de70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801de72:	4413      	add	r3, r2
 801de74:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801de78:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801de7c:	9201      	str	r2, [sp, #4]
 801de7e:	9300      	str	r3, [sp, #0]
 801de80:	4603      	mov	r3, r0
 801de82:	2241      	movs	r2, #65	; 0x41
 801de84:	2000      	movs	r0, #0
 801de86:	f7f4 fc8f 	bl	80127a8 <pbuf_alloced_custom>
 801de8a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801de8c:	697b      	ldr	r3, [r7, #20]
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d106      	bne.n	801dea0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801de92:	69b8      	ldr	r0, [r7, #24]
 801de94:	f7ff fef6 	bl	801dc84 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801de98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de9a:	f7f4 fe3f 	bl	8012b1c <pbuf_free>
        goto memerr;
 801de9e:	e074      	b.n	801df8a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801dea0:	68f8      	ldr	r0, [r7, #12]
 801dea2:	f7f4 fee1 	bl	8012c68 <pbuf_ref>
      pcr->original = p;
 801dea6:	69bb      	ldr	r3, [r7, #24]
 801dea8:	68fa      	ldr	r2, [r7, #12]
 801deaa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801deac:	69bb      	ldr	r3, [r7, #24]
 801deae:	4a3f      	ldr	r2, [pc, #252]	; (801dfac <ip4_frag+0x288>)
 801deb0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801deb2:	6979      	ldr	r1, [r7, #20]
 801deb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801deb6:	f7f4 feff 	bl	8012cb8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801deba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801debe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dec2:	1ad3      	subs	r3, r2, r3
 801dec4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801dec8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801decc:	2b00      	cmp	r3, #0
 801dece:	d004      	beq.n	801deda <ip4_frag+0x1b6>
        poff = 0;
 801ded0:	2300      	movs	r3, #0
 801ded2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801deda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d196      	bne.n	801de10 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801dee2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801dee4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dee8:	4413      	add	r3, r2
 801deea:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801deec:	68bb      	ldr	r3, [r7, #8]
 801deee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801def0:	f1a3 0213 	sub.w	r2, r3, #19
 801def4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801def8:	429a      	cmp	r2, r3
 801defa:	bfcc      	ite	gt
 801defc:	2301      	movgt	r3, #1
 801defe:	2300      	movle	r3, #0
 801df00:	b2db      	uxtb	r3, r3
 801df02:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801df04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801df08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801df0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801df0e:	6a3b      	ldr	r3, [r7, #32]
 801df10:	2b00      	cmp	r3, #0
 801df12:	d002      	beq.n	801df1a <ip4_frag+0x1f6>
 801df14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df16:	2b00      	cmp	r3, #0
 801df18:	d003      	beq.n	801df22 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801df1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801df1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801df20:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801df22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801df24:	4618      	mov	r0, r3
 801df26:	f7f3 f9c3 	bl	80112b0 <lwip_htons>
 801df2a:	4603      	mov	r3, r0
 801df2c:	461a      	mov	r2, r3
 801df2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df30:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801df32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801df34:	3314      	adds	r3, #20
 801df36:	b29b      	uxth	r3, r3
 801df38:	4618      	mov	r0, r3
 801df3a:	f7f3 f9b9 	bl	80112b0 <lwip_htons>
 801df3e:	4603      	mov	r3, r0
 801df40:	461a      	mov	r2, r3
 801df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df44:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801df46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df48:	2200      	movs	r2, #0
 801df4a:	729a      	strb	r2, [r3, #10]
 801df4c:	2200      	movs	r2, #0
 801df4e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801df50:	68bb      	ldr	r3, [r7, #8]
 801df52:	695b      	ldr	r3, [r3, #20]
 801df54:	687a      	ldr	r2, [r7, #4]
 801df56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801df58:	68b8      	ldr	r0, [r7, #8]
 801df5a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801df5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801df5e:	f7f4 fddd 	bl	8012b1c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801df62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801df66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801df68:	1ad3      	subs	r3, r2, r3
 801df6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801df6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801df72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801df74:	4413      	add	r3, r2
 801df76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801df7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801df7e:	2b00      	cmp	r3, #0
 801df80:	f47f af19 	bne.w	801ddb6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801df84:	2300      	movs	r3, #0
 801df86:	e002      	b.n	801df8e <ip4_frag+0x26a>
      goto memerr;
 801df88:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801df8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801df8e:	4618      	mov	r0, r3
 801df90:	3748      	adds	r7, #72	; 0x48
 801df92:	46bd      	mov	sp, r7
 801df94:	bd80      	pop	{r7, pc}
 801df96:	bf00      	nop
 801df98:	08024da8 	.word	0x08024da8
 801df9c:	08024f84 	.word	0x08024f84
 801dfa0:	08024df0 	.word	0x08024df0
 801dfa4:	08024fa0 	.word	0x08024fa0
 801dfa8:	08024fc0 	.word	0x08024fc0
 801dfac:	0801dcbd 	.word	0x0801dcbd

0801dfb0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801dfb0:	b580      	push	{r7, lr}
 801dfb2:	b086      	sub	sp, #24
 801dfb4:	af00      	add	r7, sp, #0
 801dfb6:	6078      	str	r0, [r7, #4]
 801dfb8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801dfba:	230e      	movs	r3, #14
 801dfbc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	895b      	ldrh	r3, [r3, #10]
 801dfc2:	2b0e      	cmp	r3, #14
 801dfc4:	d96e      	bls.n	801e0a4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801dfc6:	687b      	ldr	r3, [r7, #4]
 801dfc8:	7bdb      	ldrb	r3, [r3, #15]
 801dfca:	2b00      	cmp	r3, #0
 801dfcc:	d106      	bne.n	801dfdc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801dfce:	683b      	ldr	r3, [r7, #0]
 801dfd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dfd4:	3301      	adds	r3, #1
 801dfd6:	b2da      	uxtb	r2, r3
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	685b      	ldr	r3, [r3, #4]
 801dfe0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801dfe2:	693b      	ldr	r3, [r7, #16]
 801dfe4:	7b1a      	ldrb	r2, [r3, #12]
 801dfe6:	7b5b      	ldrb	r3, [r3, #13]
 801dfe8:	021b      	lsls	r3, r3, #8
 801dfea:	4313      	orrs	r3, r2
 801dfec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801dfee:	693b      	ldr	r3, [r7, #16]
 801dff0:	781b      	ldrb	r3, [r3, #0]
 801dff2:	f003 0301 	and.w	r3, r3, #1
 801dff6:	2b00      	cmp	r3, #0
 801dff8:	d023      	beq.n	801e042 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801dffa:	693b      	ldr	r3, [r7, #16]
 801dffc:	781b      	ldrb	r3, [r3, #0]
 801dffe:	2b01      	cmp	r3, #1
 801e000:	d10f      	bne.n	801e022 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e002:	693b      	ldr	r3, [r7, #16]
 801e004:	785b      	ldrb	r3, [r3, #1]
 801e006:	2b00      	cmp	r3, #0
 801e008:	d11b      	bne.n	801e042 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e00a:	693b      	ldr	r3, [r7, #16]
 801e00c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e00e:	2b5e      	cmp	r3, #94	; 0x5e
 801e010:	d117      	bne.n	801e042 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	7b5b      	ldrb	r3, [r3, #13]
 801e016:	f043 0310 	orr.w	r3, r3, #16
 801e01a:	b2da      	uxtb	r2, r3
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	735a      	strb	r2, [r3, #13]
 801e020:	e00f      	b.n	801e042 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e022:	693b      	ldr	r3, [r7, #16]
 801e024:	2206      	movs	r2, #6
 801e026:	4928      	ldr	r1, [pc, #160]	; (801e0c8 <ethernet_input+0x118>)
 801e028:	4618      	mov	r0, r3
 801e02a:	f001 fd91 	bl	801fb50 <memcmp>
 801e02e:	4603      	mov	r3, r0
 801e030:	2b00      	cmp	r3, #0
 801e032:	d106      	bne.n	801e042 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	7b5b      	ldrb	r3, [r3, #13]
 801e038:	f043 0308 	orr.w	r3, r3, #8
 801e03c:	b2da      	uxtb	r2, r3
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e042:	89fb      	ldrh	r3, [r7, #14]
 801e044:	2b08      	cmp	r3, #8
 801e046:	d003      	beq.n	801e050 <ethernet_input+0xa0>
 801e048:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801e04c:	d014      	beq.n	801e078 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e04e:	e032      	b.n	801e0b6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e050:	683b      	ldr	r3, [r7, #0]
 801e052:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e056:	f003 0308 	and.w	r3, r3, #8
 801e05a:	2b00      	cmp	r3, #0
 801e05c:	d024      	beq.n	801e0a8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e05e:	8afb      	ldrh	r3, [r7, #22]
 801e060:	4619      	mov	r1, r3
 801e062:	6878      	ldr	r0, [r7, #4]
 801e064:	f7f4 fcd4 	bl	8012a10 <pbuf_remove_header>
 801e068:	4603      	mov	r3, r0
 801e06a:	2b00      	cmp	r3, #0
 801e06c:	d11e      	bne.n	801e0ac <ethernet_input+0xfc>
        ip4_input(p, netif);
 801e06e:	6839      	ldr	r1, [r7, #0]
 801e070:	6878      	ldr	r0, [r7, #4]
 801e072:	f7fe ff03 	bl	801ce7c <ip4_input>
      break;
 801e076:	e013      	b.n	801e0a0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e078:	683b      	ldr	r3, [r7, #0]
 801e07a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e07e:	f003 0308 	and.w	r3, r3, #8
 801e082:	2b00      	cmp	r3, #0
 801e084:	d014      	beq.n	801e0b0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e086:	8afb      	ldrh	r3, [r7, #22]
 801e088:	4619      	mov	r1, r3
 801e08a:	6878      	ldr	r0, [r7, #4]
 801e08c:	f7f4 fcc0 	bl	8012a10 <pbuf_remove_header>
 801e090:	4603      	mov	r3, r0
 801e092:	2b00      	cmp	r3, #0
 801e094:	d10e      	bne.n	801e0b4 <ethernet_input+0x104>
        etharp_input(p, netif);
 801e096:	6839      	ldr	r1, [r7, #0]
 801e098:	6878      	ldr	r0, [r7, #4]
 801e09a:	f7fe f89f 	bl	801c1dc <etharp_input>
      break;
 801e09e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	e00c      	b.n	801e0be <ethernet_input+0x10e>
    goto free_and_return;
 801e0a4:	bf00      	nop
 801e0a6:	e006      	b.n	801e0b6 <ethernet_input+0x106>
        goto free_and_return;
 801e0a8:	bf00      	nop
 801e0aa:	e004      	b.n	801e0b6 <ethernet_input+0x106>
        goto free_and_return;
 801e0ac:	bf00      	nop
 801e0ae:	e002      	b.n	801e0b6 <ethernet_input+0x106>
        goto free_and_return;
 801e0b0:	bf00      	nop
 801e0b2:	e000      	b.n	801e0b6 <ethernet_input+0x106>
        goto free_and_return;
 801e0b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e0b6:	6878      	ldr	r0, [r7, #4]
 801e0b8:	f7f4 fd30 	bl	8012b1c <pbuf_free>
  return ERR_OK;
 801e0bc:	2300      	movs	r3, #0
}
 801e0be:	4618      	mov	r0, r3
 801e0c0:	3718      	adds	r7, #24
 801e0c2:	46bd      	mov	sp, r7
 801e0c4:	bd80      	pop	{r7, pc}
 801e0c6:	bf00      	nop
 801e0c8:	080252a0 	.word	0x080252a0

0801e0cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e0cc:	b580      	push	{r7, lr}
 801e0ce:	b086      	sub	sp, #24
 801e0d0:	af00      	add	r7, sp, #0
 801e0d2:	60f8      	str	r0, [r7, #12]
 801e0d4:	60b9      	str	r1, [r7, #8]
 801e0d6:	607a      	str	r2, [r7, #4]
 801e0d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e0da:	8c3b      	ldrh	r3, [r7, #32]
 801e0dc:	4618      	mov	r0, r3
 801e0de:	f7f3 f8e7 	bl	80112b0 <lwip_htons>
 801e0e2:	4603      	mov	r3, r0
 801e0e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e0e6:	210e      	movs	r1, #14
 801e0e8:	68b8      	ldr	r0, [r7, #8]
 801e0ea:	f7f4 fc81 	bl	80129f0 <pbuf_add_header>
 801e0ee:	4603      	mov	r3, r0
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d125      	bne.n	801e140 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e0f4:	68bb      	ldr	r3, [r7, #8]
 801e0f6:	685b      	ldr	r3, [r3, #4]
 801e0f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e0fa:	693b      	ldr	r3, [r7, #16]
 801e0fc:	8afa      	ldrh	r2, [r7, #22]
 801e0fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e100:	693b      	ldr	r3, [r7, #16]
 801e102:	2206      	movs	r2, #6
 801e104:	6839      	ldr	r1, [r7, #0]
 801e106:	4618      	mov	r0, r3
 801e108:	f001 fe41 	bl	801fd8e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e10c:	693b      	ldr	r3, [r7, #16]
 801e10e:	3306      	adds	r3, #6
 801e110:	2206      	movs	r2, #6
 801e112:	6879      	ldr	r1, [r7, #4]
 801e114:	4618      	mov	r0, r3
 801e116:	f001 fe3a 	bl	801fd8e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e11a:	68fb      	ldr	r3, [r7, #12]
 801e11c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e120:	2b06      	cmp	r3, #6
 801e122:	d006      	beq.n	801e132 <ethernet_output+0x66>
 801e124:	4b0a      	ldr	r3, [pc, #40]	; (801e150 <ethernet_output+0x84>)
 801e126:	f44f 7299 	mov.w	r2, #306	; 0x132
 801e12a:	490a      	ldr	r1, [pc, #40]	; (801e154 <ethernet_output+0x88>)
 801e12c:	480a      	ldr	r0, [pc, #40]	; (801e158 <ethernet_output+0x8c>)
 801e12e:	f001 fbc9 	bl	801f8c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e132:	68fb      	ldr	r3, [r7, #12]
 801e134:	699b      	ldr	r3, [r3, #24]
 801e136:	68b9      	ldr	r1, [r7, #8]
 801e138:	68f8      	ldr	r0, [r7, #12]
 801e13a:	4798      	blx	r3
 801e13c:	4603      	mov	r3, r0
 801e13e:	e002      	b.n	801e146 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801e140:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801e142:	f06f 0301 	mvn.w	r3, #1
}
 801e146:	4618      	mov	r0, r3
 801e148:	3718      	adds	r7, #24
 801e14a:	46bd      	mov	sp, r7
 801e14c:	bd80      	pop	{r7, pc}
 801e14e:	bf00      	nop
 801e150:	08024fd0 	.word	0x08024fd0
 801e154:	08025008 	.word	0x08025008
 801e158:	0802503c 	.word	0x0802503c

0801e15c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e15c:	b580      	push	{r7, lr}
 801e15e:	b086      	sub	sp, #24
 801e160:	af00      	add	r7, sp, #0
 801e162:	6078      	str	r0, [r7, #4]
 801e164:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801e166:	683b      	ldr	r3, [r7, #0]
 801e168:	60bb      	str	r3, [r7, #8]
 801e16a:	2304      	movs	r3, #4
 801e16c:	60fb      	str	r3, [r7, #12]
 801e16e:	2300      	movs	r3, #0
 801e170:	613b      	str	r3, [r7, #16]
 801e172:	2300      	movs	r3, #0
 801e174:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801e176:	f107 0308 	add.w	r3, r7, #8
 801e17a:	2100      	movs	r1, #0
 801e17c:	4618      	mov	r0, r3
 801e17e:	f7e8 f968 	bl	8006452 <osMessageCreate>
 801e182:	4602      	mov	r2, r0
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d102      	bne.n	801e196 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801e190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e194:	e000      	b.n	801e198 <sys_mbox_new+0x3c>

  return ERR_OK;
 801e196:	2300      	movs	r3, #0
}
 801e198:	4618      	mov	r0, r3
 801e19a:	3718      	adds	r7, #24
 801e19c:	46bd      	mov	sp, r7
 801e19e:	bd80      	pop	{r7, pc}

0801e1a0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e1a0:	b580      	push	{r7, lr}
 801e1a2:	b082      	sub	sp, #8
 801e1a4:	af00      	add	r7, sp, #0
 801e1a6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	4618      	mov	r0, r3
 801e1ae:	f7e8 fa2d 	bl	800660c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	f7e8 fa3e 	bl	8006638 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801e1bc:	bf00      	nop
 801e1be:	3708      	adds	r7, #8
 801e1c0:	46bd      	mov	sp, r7
 801e1c2:	bd80      	pop	{r7, pc}

0801e1c4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e1c4:	b580      	push	{r7, lr}
 801e1c6:	b084      	sub	sp, #16
 801e1c8:	af00      	add	r7, sp, #0
 801e1ca:	6078      	str	r0, [r7, #4]
 801e1cc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	6839      	ldr	r1, [r7, #0]
 801e1d4:	2200      	movs	r2, #0
 801e1d6:	4618      	mov	r0, r3
 801e1d8:	f7e8 f964 	bl	80064a4 <osMessagePut>
 801e1dc:	4603      	mov	r3, r0
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d102      	bne.n	801e1e8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801e1e2:	2300      	movs	r3, #0
 801e1e4:	73fb      	strb	r3, [r7, #15]
 801e1e6:	e001      	b.n	801e1ec <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e1e8:	23ff      	movs	r3, #255	; 0xff
 801e1ea:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801e1ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e1f0:	4618      	mov	r0, r3
 801e1f2:	3710      	adds	r7, #16
 801e1f4:	46bd      	mov	sp, r7
 801e1f6:	bd80      	pop	{r7, pc}

0801e1f8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e1f8:	b580      	push	{r7, lr}
 801e1fa:	b08c      	sub	sp, #48	; 0x30
 801e1fc:	af00      	add	r7, sp, #0
 801e1fe:	61f8      	str	r0, [r7, #28]
 801e200:	61b9      	str	r1, [r7, #24]
 801e202:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801e204:	f7e7 ff50 	bl	80060a8 <osKernelSysTick>
 801e208:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e20a:	697b      	ldr	r3, [r7, #20]
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d017      	beq.n	801e240 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801e210:	69fb      	ldr	r3, [r7, #28]
 801e212:	6819      	ldr	r1, [r3, #0]
 801e214:	f107 0320 	add.w	r3, r7, #32
 801e218:	697a      	ldr	r2, [r7, #20]
 801e21a:	4618      	mov	r0, r3
 801e21c:	f7e8 f982 	bl	8006524 <osMessageGet>

    if(event.status == osEventMessage)
 801e220:	6a3b      	ldr	r3, [r7, #32]
 801e222:	2b10      	cmp	r3, #16
 801e224:	d109      	bne.n	801e23a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801e226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e228:	461a      	mov	r2, r3
 801e22a:	69bb      	ldr	r3, [r7, #24]
 801e22c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801e22e:	f7e7 ff3b 	bl	80060a8 <osKernelSysTick>
 801e232:	4602      	mov	r2, r0
 801e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e236:	1ad3      	subs	r3, r2, r3
 801e238:	e019      	b.n	801e26e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e23a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e23e:	e016      	b.n	801e26e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801e240:	69fb      	ldr	r3, [r7, #28]
 801e242:	6819      	ldr	r1, [r3, #0]
 801e244:	463b      	mov	r3, r7
 801e246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e24a:	4618      	mov	r0, r3
 801e24c:	f7e8 f96a 	bl	8006524 <osMessageGet>
 801e250:	f107 0320 	add.w	r3, r7, #32
 801e254:	463a      	mov	r2, r7
 801e256:	ca07      	ldmia	r2, {r0, r1, r2}
 801e258:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e25e:	461a      	mov	r2, r3
 801e260:	69bb      	ldr	r3, [r7, #24]
 801e262:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801e264:	f7e7 ff20 	bl	80060a8 <osKernelSysTick>
 801e268:	4602      	mov	r2, r0
 801e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e26c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e26e:	4618      	mov	r0, r3
 801e270:	3730      	adds	r7, #48	; 0x30
 801e272:	46bd      	mov	sp, r7
 801e274:	bd80      	pop	{r7, pc}

0801e276 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801e276:	b580      	push	{r7, lr}
 801e278:	b086      	sub	sp, #24
 801e27a:	af00      	add	r7, sp, #0
 801e27c:	6078      	str	r0, [r7, #4]
 801e27e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	6819      	ldr	r1, [r3, #0]
 801e284:	f107 030c 	add.w	r3, r7, #12
 801e288:	2200      	movs	r2, #0
 801e28a:	4618      	mov	r0, r3
 801e28c:	f7e8 f94a 	bl	8006524 <osMessageGet>

  if(event.status == osEventMessage)
 801e290:	68fb      	ldr	r3, [r7, #12]
 801e292:	2b10      	cmp	r3, #16
 801e294:	d105      	bne.n	801e2a2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801e296:	693b      	ldr	r3, [r7, #16]
 801e298:	461a      	mov	r2, r3
 801e29a:	683b      	ldr	r3, [r7, #0]
 801e29c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801e29e:	2300      	movs	r3, #0
 801e2a0:	e001      	b.n	801e2a6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801e2a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801e2a6:	4618      	mov	r0, r3
 801e2a8:	3718      	adds	r7, #24
 801e2aa:	46bd      	mov	sp, r7
 801e2ac:	bd80      	pop	{r7, pc}

0801e2ae <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e2ae:	b480      	push	{r7}
 801e2b0:	b083      	sub	sp, #12
 801e2b2:	af00      	add	r7, sp, #0
 801e2b4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	d101      	bne.n	801e2c2 <sys_mbox_valid+0x14>
    return 0;
 801e2be:	2300      	movs	r3, #0
 801e2c0:	e000      	b.n	801e2c4 <sys_mbox_valid+0x16>
  else
    return 1;
 801e2c2:	2301      	movs	r3, #1
}
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	370c      	adds	r7, #12
 801e2c8:	46bd      	mov	sp, r7
 801e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2ce:	4770      	bx	lr

0801e2d0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801e2d0:	b480      	push	{r7}
 801e2d2:	b083      	sub	sp, #12
 801e2d4:	af00      	add	r7, sp, #0
 801e2d6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	2200      	movs	r2, #0
 801e2dc:	601a      	str	r2, [r3, #0]
}
 801e2de:	bf00      	nop
 801e2e0:	370c      	adds	r7, #12
 801e2e2:	46bd      	mov	sp, r7
 801e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2e8:	4770      	bx	lr

0801e2ea <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801e2ea:	b580      	push	{r7, lr}
 801e2ec:	b084      	sub	sp, #16
 801e2ee:	af00      	add	r7, sp, #0
 801e2f0:	6078      	str	r0, [r7, #4]
 801e2f2:	460b      	mov	r3, r1
 801e2f4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801e2f6:	2300      	movs	r3, #0
 801e2f8:	60bb      	str	r3, [r7, #8]
 801e2fa:	2300      	movs	r3, #0
 801e2fc:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801e2fe:	f107 0308 	add.w	r3, r7, #8
 801e302:	2101      	movs	r1, #1
 801e304:	4618      	mov	r0, r3
 801e306:	f7e7 ffdb 	bl	80062c0 <osSemaphoreCreate>
 801e30a:	4602      	mov	r2, r0
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	2b00      	cmp	r3, #0
 801e316:	d102      	bne.n	801e31e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e31c:	e009      	b.n	801e332 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801e31e:	78fb      	ldrb	r3, [r7, #3]
 801e320:	2b00      	cmp	r3, #0
 801e322:	d105      	bne.n	801e330 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	2100      	movs	r1, #0
 801e32a:	4618      	mov	r0, r3
 801e32c:	f7e7 fffa 	bl	8006324 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e330:	2300      	movs	r3, #0
}
 801e332:	4618      	mov	r0, r3
 801e334:	3710      	adds	r7, #16
 801e336:	46bd      	mov	sp, r7
 801e338:	bd80      	pop	{r7, pc}

0801e33a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e33a:	b580      	push	{r7, lr}
 801e33c:	b084      	sub	sp, #16
 801e33e:	af00      	add	r7, sp, #0
 801e340:	6078      	str	r0, [r7, #4]
 801e342:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801e344:	f7e7 feb0 	bl	80060a8 <osKernelSysTick>
 801e348:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e34a:	683b      	ldr	r3, [r7, #0]
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d011      	beq.n	801e374 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	6839      	ldr	r1, [r7, #0]
 801e356:	4618      	mov	r0, r3
 801e358:	f7e7 ffe4 	bl	8006324 <osSemaphoreWait>
 801e35c:	4603      	mov	r3, r0
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d105      	bne.n	801e36e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801e362:	f7e7 fea1 	bl	80060a8 <osKernelSysTick>
 801e366:	4602      	mov	r2, r0
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	1ad3      	subs	r3, r2, r3
 801e36c:	e012      	b.n	801e394 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e36e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e372:	e00f      	b.n	801e394 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801e374:	bf00      	nop
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	681b      	ldr	r3, [r3, #0]
 801e37a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e37e:	4618      	mov	r0, r3
 801e380:	f7e7 ffd0 	bl	8006324 <osSemaphoreWait>
 801e384:	4603      	mov	r3, r0
 801e386:	2b00      	cmp	r3, #0
 801e388:	d1f5      	bne.n	801e376 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801e38a:	f7e7 fe8d 	bl	80060a8 <osKernelSysTick>
 801e38e:	4602      	mov	r2, r0
 801e390:	68fb      	ldr	r3, [r7, #12]
 801e392:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e394:	4618      	mov	r0, r3
 801e396:	3710      	adds	r7, #16
 801e398:	46bd      	mov	sp, r7
 801e39a:	bd80      	pop	{r7, pc}

0801e39c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801e39c:	b580      	push	{r7, lr}
 801e39e:	b082      	sub	sp, #8
 801e3a0:	af00      	add	r7, sp, #0
 801e3a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	681b      	ldr	r3, [r3, #0]
 801e3a8:	4618      	mov	r0, r3
 801e3aa:	f7e8 f809 	bl	80063c0 <osSemaphoreRelease>
}
 801e3ae:	bf00      	nop
 801e3b0:	3708      	adds	r7, #8
 801e3b2:	46bd      	mov	sp, r7
 801e3b4:	bd80      	pop	{r7, pc}

0801e3b6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801e3b6:	b580      	push	{r7, lr}
 801e3b8:	b082      	sub	sp, #8
 801e3ba:	af00      	add	r7, sp, #0
 801e3bc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801e3be:	687b      	ldr	r3, [r7, #4]
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	f7e8 f832 	bl	800642c <osSemaphoreDelete>
}
 801e3c8:	bf00      	nop
 801e3ca:	3708      	adds	r7, #8
 801e3cc:	46bd      	mov	sp, r7
 801e3ce:	bd80      	pop	{r7, pc}

0801e3d0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801e3d0:	b480      	push	{r7}
 801e3d2:	b083      	sub	sp, #12
 801e3d4:	af00      	add	r7, sp, #0
 801e3d6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d101      	bne.n	801e3e4 <sys_sem_valid+0x14>
    return 0;
 801e3e0:	2300      	movs	r3, #0
 801e3e2:	e000      	b.n	801e3e6 <sys_sem_valid+0x16>
  else
    return 1;
 801e3e4:	2301      	movs	r3, #1
}
 801e3e6:	4618      	mov	r0, r3
 801e3e8:	370c      	adds	r7, #12
 801e3ea:	46bd      	mov	sp, r7
 801e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3f0:	4770      	bx	lr

0801e3f2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801e3f2:	b480      	push	{r7}
 801e3f4:	b083      	sub	sp, #12
 801e3f6:	af00      	add	r7, sp, #0
 801e3f8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	2200      	movs	r2, #0
 801e3fe:	601a      	str	r2, [r3, #0]
}
 801e400:	bf00      	nop
 801e402:	370c      	adds	r7, #12
 801e404:	46bd      	mov	sp, r7
 801e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e40a:	4770      	bx	lr

0801e40c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e40c:	b580      	push	{r7, lr}
 801e40e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801e410:	4803      	ldr	r0, [pc, #12]	; (801e420 <sys_init+0x14>)
 801e412:	f7e7 feb9 	bl	8006188 <osMutexCreate>
 801e416:	4603      	mov	r3, r0
 801e418:	4a02      	ldr	r2, [pc, #8]	; (801e424 <sys_init+0x18>)
 801e41a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801e41c:	bf00      	nop
 801e41e:	bd80      	pop	{r7, pc}
 801e420:	080252b0 	.word	0x080252b0
 801e424:	20010358 	.word	0x20010358

0801e428 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e428:	b580      	push	{r7, lr}
 801e42a:	b084      	sub	sp, #16
 801e42c:	af00      	add	r7, sp, #0
 801e42e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801e430:	2300      	movs	r3, #0
 801e432:	60bb      	str	r3, [r7, #8]
 801e434:	2300      	movs	r3, #0
 801e436:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801e438:	f107 0308 	add.w	r3, r7, #8
 801e43c:	4618      	mov	r0, r3
 801e43e:	f7e7 fea3 	bl	8006188 <osMutexCreate>
 801e442:	4602      	mov	r2, r0
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	681b      	ldr	r3, [r3, #0]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d102      	bne.n	801e456 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e454:	e000      	b.n	801e458 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e456:	2300      	movs	r3, #0
}
 801e458:	4618      	mov	r0, r3
 801e45a:	3710      	adds	r7, #16
 801e45c:	46bd      	mov	sp, r7
 801e45e:	bd80      	pop	{r7, pc}

0801e460 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e460:	b580      	push	{r7, lr}
 801e462:	b082      	sub	sp, #8
 801e464:	af00      	add	r7, sp, #0
 801e466:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e470:	4618      	mov	r0, r3
 801e472:	f7e7 fea1 	bl	80061b8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801e476:	bf00      	nop
 801e478:	3708      	adds	r7, #8
 801e47a:	46bd      	mov	sp, r7
 801e47c:	bd80      	pop	{r7, pc}

0801e47e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e47e:	b580      	push	{r7, lr}
 801e480:	b082      	sub	sp, #8
 801e482:	af00      	add	r7, sp, #0
 801e484:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	4618      	mov	r0, r3
 801e48c:	f7e7 fee2 	bl	8006254 <osMutexRelease>
}
 801e490:	bf00      	nop
 801e492:	3708      	adds	r7, #8
 801e494:	46bd      	mov	sp, r7
 801e496:	bd80      	pop	{r7, pc}

0801e498 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e498:	b580      	push	{r7, lr}
 801e49a:	b08c      	sub	sp, #48	; 0x30
 801e49c:	af00      	add	r7, sp, #0
 801e49e:	60f8      	str	r0, [r7, #12]
 801e4a0:	60b9      	str	r1, [r7, #8]
 801e4a2:	607a      	str	r2, [r7, #4]
 801e4a4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801e4a6:	f107 0314 	add.w	r3, r7, #20
 801e4aa:	2200      	movs	r2, #0
 801e4ac:	601a      	str	r2, [r3, #0]
 801e4ae:	605a      	str	r2, [r3, #4]
 801e4b0:	609a      	str	r2, [r3, #8]
 801e4b2:	60da      	str	r2, [r3, #12]
 801e4b4:	611a      	str	r2, [r3, #16]
 801e4b6:	615a      	str	r2, [r3, #20]
 801e4b8:	619a      	str	r2, [r3, #24]
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	617b      	str	r3, [r7, #20]
 801e4be:	68bb      	ldr	r3, [r7, #8]
 801e4c0:	61bb      	str	r3, [r7, #24]
 801e4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e4c4:	b21b      	sxth	r3, r3
 801e4c6:	83bb      	strh	r3, [r7, #28]
 801e4c8:	683b      	ldr	r3, [r7, #0]
 801e4ca:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801e4cc:	f107 0314 	add.w	r3, r7, #20
 801e4d0:	6879      	ldr	r1, [r7, #4]
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	f7e7 fdf8 	bl	80060c8 <osThreadCreate>
 801e4d8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801e4da:	4618      	mov	r0, r3
 801e4dc:	3730      	adds	r7, #48	; 0x30
 801e4de:	46bd      	mov	sp, r7
 801e4e0:	bd80      	pop	{r7, pc}
	...

0801e4e4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e4e4:	b580      	push	{r7, lr}
 801e4e6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801e4e8:	4b04      	ldr	r3, [pc, #16]	; (801e4fc <sys_arch_protect+0x18>)
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e4f0:	4618      	mov	r0, r3
 801e4f2:	f7e7 fe61 	bl	80061b8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801e4f6:	2301      	movs	r3, #1
}
 801e4f8:	4618      	mov	r0, r3
 801e4fa:	bd80      	pop	{r7, pc}
 801e4fc:	20010358 	.word	0x20010358

0801e500 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e500:	b580      	push	{r7, lr}
 801e502:	b082      	sub	sp, #8
 801e504:	af00      	add	r7, sp, #0
 801e506:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e508:	4b04      	ldr	r3, [pc, #16]	; (801e51c <sys_arch_unprotect+0x1c>)
 801e50a:	681b      	ldr	r3, [r3, #0]
 801e50c:	4618      	mov	r0, r3
 801e50e:	f7e7 fea1 	bl	8006254 <osMutexRelease>
}
 801e512:	bf00      	nop
 801e514:	3708      	adds	r7, #8
 801e516:	46bd      	mov	sp, r7
 801e518:	bd80      	pop	{r7, pc}
 801e51a:	bf00      	nop
 801e51c:	20010358 	.word	0x20010358

0801e520 <CalculaCRCByte>:
//volatile uint8_t modbus_buffer [ MODBUS_BUFFER_SIZE ] @ "EMAC_DMA_RAM";

//
// Calcula o CRC 16 do byte passado como par�metro levando em considera��o o valor anterior do CRC
//
uint16_t CalculaCRCByte ( uint16_t crc, uint8_t byte ) {
 801e520:	b480      	push	{r7}
 801e522:	b085      	sub	sp, #20
 801e524:	af00      	add	r7, sp, #0
 801e526:	4603      	mov	r3, r0
 801e528:	460a      	mov	r2, r1
 801e52a:	80fb      	strh	r3, [r7, #6]
 801e52c:	4613      	mov	r3, r2
 801e52e:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  crc = crc^byte;
 801e530:	797b      	ldrb	r3, [r7, #5]
 801e532:	b29a      	uxth	r2, r3
 801e534:	88fb      	ldrh	r3, [r7, #6]
 801e536:	4053      	eors	r3, r2
 801e538:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 801e53a:	2300      	movs	r3, #0
 801e53c:	73fb      	strb	r3, [r7, #15]
 801e53e:	e011      	b.n	801e564 <CalculaCRCByte+0x44>
    if ( ( crc & 1 ) == 1 ) crc = ( crc >> 1 ) ^cPOLINOMIO;
 801e540:	88fb      	ldrh	r3, [r7, #6]
 801e542:	f003 0301 	and.w	r3, r3, #1
 801e546:	2b00      	cmp	r3, #0
 801e548:	d006      	beq.n	801e558 <CalculaCRCByte+0x38>
 801e54a:	88fb      	ldrh	r3, [r7, #6]
 801e54c:	085b      	lsrs	r3, r3, #1
 801e54e:	b29a      	uxth	r2, r3
 801e550:	4b09      	ldr	r3, [pc, #36]	; (801e578 <CalculaCRCByte+0x58>)
 801e552:	4053      	eors	r3, r2
 801e554:	80fb      	strh	r3, [r7, #6]
 801e556:	e002      	b.n	801e55e <CalculaCRCByte+0x3e>
    else crc = crc >> 1;
 801e558:	88fb      	ldrh	r3, [r7, #6]
 801e55a:	085b      	lsrs	r3, r3, #1
 801e55c:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 801e55e:	7bfb      	ldrb	r3, [r7, #15]
 801e560:	3301      	adds	r3, #1
 801e562:	73fb      	strb	r3, [r7, #15]
 801e564:	7bfb      	ldrb	r3, [r7, #15]
 801e566:	2b07      	cmp	r3, #7
 801e568:	d9ea      	bls.n	801e540 <CalculaCRCByte+0x20>
  }
  return crc;
 801e56a:	88fb      	ldrh	r3, [r7, #6]
}
 801e56c:	4618      	mov	r0, r3
 801e56e:	3714      	adds	r7, #20
 801e570:	46bd      	mov	sp, r7
 801e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e576:	4770      	bx	lr
 801e578:	ffffa001 	.word	0xffffa001

0801e57c <CalculaCRCStream>:

//
// Calcula o CRC 16 da stream passada como par�metro
//
uint16_t CalculaCRCStream ( uint8_t *str, uint16_t tam ) {
 801e57c:	b580      	push	{r7, lr}
 801e57e:	b084      	sub	sp, #16
 801e580:	af00      	add	r7, sp, #0
 801e582:	6078      	str	r0, [r7, #4]
 801e584:	460b      	mov	r3, r1
 801e586:	807b      	strh	r3, [r7, #2]
  uint16_t i,crc;
  crc = 0xFFFF;
 801e588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e58c:	81bb      	strh	r3, [r7, #12]
  for( i = 0; i < tam; i++, str++ ) crc = CalculaCRCByte ( crc, *str );
 801e58e:	2300      	movs	r3, #0
 801e590:	81fb      	strh	r3, [r7, #14]
 801e592:	e00e      	b.n	801e5b2 <CalculaCRCStream+0x36>
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	781a      	ldrb	r2, [r3, #0]
 801e598:	89bb      	ldrh	r3, [r7, #12]
 801e59a:	4611      	mov	r1, r2
 801e59c:	4618      	mov	r0, r3
 801e59e:	f7ff ffbf 	bl	801e520 <CalculaCRCByte>
 801e5a2:	4603      	mov	r3, r0
 801e5a4:	81bb      	strh	r3, [r7, #12]
 801e5a6:	89fb      	ldrh	r3, [r7, #14]
 801e5a8:	3301      	adds	r3, #1
 801e5aa:	81fb      	strh	r3, [r7, #14]
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	3301      	adds	r3, #1
 801e5b0:	607b      	str	r3, [r7, #4]
 801e5b2:	89fa      	ldrh	r2, [r7, #14]
 801e5b4:	887b      	ldrh	r3, [r7, #2]
 801e5b6:	429a      	cmp	r2, r3
 801e5b8:	d3ec      	bcc.n	801e594 <CalculaCRCStream+0x18>
  return crc;
 801e5ba:	89bb      	ldrh	r3, [r7, #12]
}
 801e5bc:	4618      	mov	r0, r3
 801e5be:	3710      	adds	r7, #16
 801e5c0:	46bd      	mov	sp, r7
 801e5c2:	bd80      	pop	{r7, pc}

0801e5c4 <ReadCoilRegister>:


uint8_t ReadCoilRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801e5c4:	b580      	push	{r7, lr}
 801e5c6:	b084      	sub	sp, #16
 801e5c8:	af00      	add	r7, sp, #0
 801e5ca:	6078      	str	r0, [r7, #4]
 801e5cc:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 801e5ce:	687b      	ldr	r3, [r7, #4]
 801e5d0:	3305      	adds	r3, #5
 801e5d2:	781b      	ldrb	r3, [r3, #0]
 801e5d4:	005b      	lsls	r3, r3, #1
 801e5d6:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	3302      	adds	r3, #2
 801e5dc:	7bba      	ldrb	r2, [r7, #14]
 801e5de:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e5e0:	2300      	movs	r3, #0
 801e5e2:	73fb      	strb	r3, [r7, #15]
 801e5e4:	e015      	b.n	801e612 <ReadCoilRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 801e5e6:	7bfb      	ldrb	r3, [r7, #15]
 801e5e8:	3301      	adds	r3, #1
 801e5ea:	683a      	ldr	r2, [r7, #0]
 801e5ec:	441a      	add	r2, r3
 801e5ee:	7bfb      	ldrb	r3, [r7, #15]
 801e5f0:	3303      	adds	r3, #3
 801e5f2:	6879      	ldr	r1, [r7, #4]
 801e5f4:	440b      	add	r3, r1
 801e5f6:	7812      	ldrb	r2, [r2, #0]
 801e5f8:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 801e5fa:	7bfb      	ldrb	r3, [r7, #15]
 801e5fc:	683a      	ldr	r2, [r7, #0]
 801e5fe:	441a      	add	r2, r3
 801e600:	7bfb      	ldrb	r3, [r7, #15]
 801e602:	3304      	adds	r3, #4
 801e604:	6879      	ldr	r1, [r7, #4]
 801e606:	440b      	add	r3, r1
 801e608:	7812      	ldrb	r2, [r2, #0]
 801e60a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e60c:	7bfb      	ldrb	r3, [r7, #15]
 801e60e:	3302      	adds	r3, #2
 801e610:	73fb      	strb	r3, [r7, #15]
 801e612:	7bfa      	ldrb	r2, [r7, #15]
 801e614:	7bbb      	ldrb	r3, [r7, #14]
 801e616:	429a      	cmp	r2, r3
 801e618:	d3e5      	bcc.n	801e5e6 <ReadCoilRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 801e61a:	7bbb      	ldrb	r3, [r7, #14]
 801e61c:	b29b      	uxth	r3, r3
 801e61e:	3303      	adds	r3, #3
 801e620:	b29b      	uxth	r3, r3
 801e622:	4619      	mov	r1, r3
 801e624:	6878      	ldr	r0, [r7, #4]
 801e626:	f7ff ffa9 	bl	801e57c <CalculaCRCStream>
 801e62a:	4603      	mov	r3, r0
 801e62c:	81bb      	strh	r3, [r7, #12]
	buffer [ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 801e62e:	7bbb      	ldrb	r3, [r7, #14]
 801e630:	3303      	adds	r3, #3
 801e632:	687a      	ldr	r2, [r7, #4]
 801e634:	4413      	add	r3, r2
 801e636:	89ba      	ldrh	r2, [r7, #12]
 801e638:	b2d2      	uxtb	r2, r2
 801e63a:	701a      	strb	r2, [r3, #0]
	buffer [ bytecount + 4 ] = ( uint8_t ) ( crc >> 8);
 801e63c:	89bb      	ldrh	r3, [r7, #12]
 801e63e:	0a1b      	lsrs	r3, r3, #8
 801e640:	b299      	uxth	r1, r3
 801e642:	7bbb      	ldrb	r3, [r7, #14]
 801e644:	3304      	adds	r3, #4
 801e646:	687a      	ldr	r2, [r7, #4]
 801e648:	4413      	add	r3, r2
 801e64a:	b2ca      	uxtb	r2, r1
 801e64c:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 801e64e:	7bbb      	ldrb	r3, [r7, #14]
 801e650:	3305      	adds	r3, #5
 801e652:	b2db      	uxtb	r3, r3
}
 801e654:	4618      	mov	r0, r3
 801e656:	3710      	adds	r7, #16
 801e658:	46bd      	mov	sp, r7
 801e65a:	bd80      	pop	{r7, pc}

0801e65c <ReadInputRegister>:


uint8_t ReadInputRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801e65c:	b580      	push	{r7, lr}
 801e65e:	b084      	sub	sp, #16
 801e660:	af00      	add	r7, sp, #0
 801e662:	6078      	str	r0, [r7, #4]
 801e664:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	3305      	adds	r3, #5
 801e66a:	781b      	ldrb	r3, [r3, #0]
 801e66c:	005b      	lsls	r3, r3, #1
 801e66e:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	3302      	adds	r3, #2
 801e674:	7bba      	ldrb	r2, [r7, #14]
 801e676:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e678:	2300      	movs	r3, #0
 801e67a:	73fb      	strb	r3, [r7, #15]
 801e67c:	e015      	b.n	801e6aa <ReadInputRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 801e67e:	7bfb      	ldrb	r3, [r7, #15]
 801e680:	3301      	adds	r3, #1
 801e682:	683a      	ldr	r2, [r7, #0]
 801e684:	441a      	add	r2, r3
 801e686:	7bfb      	ldrb	r3, [r7, #15]
 801e688:	3303      	adds	r3, #3
 801e68a:	6879      	ldr	r1, [r7, #4]
 801e68c:	440b      	add	r3, r1
 801e68e:	7812      	ldrb	r2, [r2, #0]
 801e690:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 801e692:	7bfb      	ldrb	r3, [r7, #15]
 801e694:	683a      	ldr	r2, [r7, #0]
 801e696:	441a      	add	r2, r3
 801e698:	7bfb      	ldrb	r3, [r7, #15]
 801e69a:	3304      	adds	r3, #4
 801e69c:	6879      	ldr	r1, [r7, #4]
 801e69e:	440b      	add	r3, r1
 801e6a0:	7812      	ldrb	r2, [r2, #0]
 801e6a2:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e6a4:	7bfb      	ldrb	r3, [r7, #15]
 801e6a6:	3302      	adds	r3, #2
 801e6a8:	73fb      	strb	r3, [r7, #15]
 801e6aa:	7bfa      	ldrb	r2, [r7, #15]
 801e6ac:	7bbb      	ldrb	r3, [r7, #14]
 801e6ae:	429a      	cmp	r2, r3
 801e6b0:	d3e5      	bcc.n	801e67e <ReadInputRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 801e6b2:	7bbb      	ldrb	r3, [r7, #14]
 801e6b4:	b29b      	uxth	r3, r3
 801e6b6:	3303      	adds	r3, #3
 801e6b8:	b29b      	uxth	r3, r3
 801e6ba:	4619      	mov	r1, r3
 801e6bc:	6878      	ldr	r0, [r7, #4]
 801e6be:	f7ff ff5d 	bl	801e57c <CalculaCRCStream>
 801e6c2:	4603      	mov	r3, r0
 801e6c4:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 801e6c6:	7bbb      	ldrb	r3, [r7, #14]
 801e6c8:	3303      	adds	r3, #3
 801e6ca:	687a      	ldr	r2, [r7, #4]
 801e6cc:	4413      	add	r3, r2
 801e6ce:	89ba      	ldrh	r2, [r7, #12]
 801e6d0:	b2d2      	uxtb	r2, r2
 801e6d2:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 801e6d4:	89bb      	ldrh	r3, [r7, #12]
 801e6d6:	0a1b      	lsrs	r3, r3, #8
 801e6d8:	b299      	uxth	r1, r3
 801e6da:	7bbb      	ldrb	r3, [r7, #14]
 801e6dc:	3304      	adds	r3, #4
 801e6de:	687a      	ldr	r2, [r7, #4]
 801e6e0:	4413      	add	r3, r2
 801e6e2:	b2ca      	uxtb	r2, r1
 801e6e4:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 801e6e6:	7bbb      	ldrb	r3, [r7, #14]
 801e6e8:	3305      	adds	r3, #5
 801e6ea:	b2db      	uxtb	r3, r3
}
 801e6ec:	4618      	mov	r0, r3
 801e6ee:	3710      	adds	r7, #16
 801e6f0:	46bd      	mov	sp, r7
 801e6f2:	bd80      	pop	{r7, pc}

0801e6f4 <ReadHoldingRegister>:


uint8_t ReadHoldingRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801e6f4:	b580      	push	{r7, lr}
 801e6f6:	b084      	sub	sp, #16
 801e6f8:	af00      	add	r7, sp, #0
 801e6fa:	6078      	str	r0, [r7, #4]
 801e6fc:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	3305      	adds	r3, #5
 801e702:	781b      	ldrb	r3, [r3, #0]
 801e704:	005b      	lsls	r3, r3, #1
 801e706:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	3302      	adds	r3, #2
 801e70c:	7bba      	ldrb	r2, [r7, #14]
 801e70e:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 801e710:	2300      	movs	r3, #0
 801e712:	73fb      	strb	r3, [r7, #15]
 801e714:	e015      	b.n	801e742 <ReadHoldingRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 801e716:	7bfb      	ldrb	r3, [r7, #15]
 801e718:	3301      	adds	r3, #1
 801e71a:	683a      	ldr	r2, [r7, #0]
 801e71c:	441a      	add	r2, r3
 801e71e:	7bfb      	ldrb	r3, [r7, #15]
 801e720:	3303      	adds	r3, #3
 801e722:	6879      	ldr	r1, [r7, #4]
 801e724:	440b      	add	r3, r1
 801e726:	7812      	ldrb	r2, [r2, #0]
 801e728:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 801e72a:	7bfb      	ldrb	r3, [r7, #15]
 801e72c:	683a      	ldr	r2, [r7, #0]
 801e72e:	441a      	add	r2, r3
 801e730:	7bfb      	ldrb	r3, [r7, #15]
 801e732:	3304      	adds	r3, #4
 801e734:	6879      	ldr	r1, [r7, #4]
 801e736:	440b      	add	r3, r1
 801e738:	7812      	ldrb	r2, [r2, #0]
 801e73a:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 801e73c:	7bfb      	ldrb	r3, [r7, #15]
 801e73e:	3302      	adds	r3, #2
 801e740:	73fb      	strb	r3, [r7, #15]
 801e742:	7bfa      	ldrb	r2, [r7, #15]
 801e744:	7bbb      	ldrb	r3, [r7, #14]
 801e746:	429a      	cmp	r2, r3
 801e748:	d3e5      	bcc.n	801e716 <ReadHoldingRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ]   = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream(buffer, bytecount + 3 );
 801e74a:	7bbb      	ldrb	r3, [r7, #14]
 801e74c:	b29b      	uxth	r3, r3
 801e74e:	3303      	adds	r3, #3
 801e750:	b29b      	uxth	r3, r3
 801e752:	4619      	mov	r1, r3
 801e754:	6878      	ldr	r0, [r7, #4]
 801e756:	f7ff ff11 	bl	801e57c <CalculaCRCStream>
 801e75a:	4603      	mov	r3, r0
 801e75c:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 801e75e:	7bbb      	ldrb	r3, [r7, #14]
 801e760:	3303      	adds	r3, #3
 801e762:	687a      	ldr	r2, [r7, #4]
 801e764:	4413      	add	r3, r2
 801e766:	89ba      	ldrh	r2, [r7, #12]
 801e768:	b2d2      	uxtb	r2, r2
 801e76a:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 801e76c:	89bb      	ldrh	r3, [r7, #12]
 801e76e:	0a1b      	lsrs	r3, r3, #8
 801e770:	b299      	uxth	r1, r3
 801e772:	7bbb      	ldrb	r3, [r7, #14]
 801e774:	3304      	adds	r3, #4
 801e776:	687a      	ldr	r2, [r7, #4]
 801e778:	4413      	add	r3, r2
 801e77a:	b2ca      	uxtb	r2, r1
 801e77c:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 801e77e:	7bbb      	ldrb	r3, [r7, #14]
 801e780:	3305      	adds	r3, #5
 801e782:	b2db      	uxtb	r3, r3
}
 801e784:	4618      	mov	r0, r3
 801e786:	3710      	adds	r7, #16
 801e788:	46bd      	mov	sp, r7
 801e78a:	bd80      	pop	{r7, pc}

0801e78c <PresetSingleRegister>:


uint8_t PresetSingleRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801e78c:	b480      	push	{r7}
 801e78e:	b083      	sub	sp, #12
 801e790:	af00      	add	r7, sp, #0
 801e792:	6078      	str	r0, [r7, #4]
 801e794:	6039      	str	r1, [r7, #0]
	#ifdef LITTLE_ENDIAN
	*( ptr ) = buffer [ 5 ];
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	795a      	ldrb	r2, [r3, #5]
 801e79a:	683b      	ldr	r3, [r7, #0]
 801e79c:	701a      	strb	r2, [r3, #0]
	*( ptr + 1 ) = buffer [ 4 ];
 801e79e:	683b      	ldr	r3, [r7, #0]
 801e7a0:	3301      	adds	r3, #1
 801e7a2:	687a      	ldr	r2, [r7, #4]
 801e7a4:	7912      	ldrb	r2, [r2, #4]
 801e7a6:	701a      	strb	r2, [r3, #0]
	#endif
	#ifdef BIG_ENDIAN
	*( ptr ) = buffer [ 4 ];
	*( ptr + 1 ) = buffer [ 5 ];
	#endif
	return ( 8 );
 801e7a8:	2308      	movs	r3, #8
}
 801e7aa:	4618      	mov	r0, r3
 801e7ac:	370c      	adds	r7, #12
 801e7ae:	46bd      	mov	sp, r7
 801e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7b4:	4770      	bx	lr

0801e7b6 <PresetMultipleRegisters>:


uint8_t PresetMultipleRegisters ( uint8_t *buffer, uint8_t *ptr ) {
 801e7b6:	b580      	push	{r7, lr}
 801e7b8:	b084      	sub	sp, #16
 801e7ba:	af00      	add	r7, sp, #0
 801e7bc:	6078      	str	r0, [r7, #4]
 801e7be:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = buffer [ 6 ];
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	799b      	ldrb	r3, [r3, #6]
 801e7c4:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e7c6:	2300      	movs	r3, #0
 801e7c8:	73fb      	strb	r3, [r7, #15]
 801e7ca:	e016      	b.n	801e7fa <PresetMultipleRegisters+0x44>
		#ifdef LITTLE_ENDIAN
		*( ptr + i ) = buffer [ 7 + i + 1 ];
 801e7cc:	7bfb      	ldrb	r3, [r7, #15]
 801e7ce:	3308      	adds	r3, #8
 801e7d0:	687a      	ldr	r2, [r7, #4]
 801e7d2:	441a      	add	r2, r3
 801e7d4:	7bfb      	ldrb	r3, [r7, #15]
 801e7d6:	6839      	ldr	r1, [r7, #0]
 801e7d8:	440b      	add	r3, r1
 801e7da:	7812      	ldrb	r2, [r2, #0]
 801e7dc:	701a      	strb	r2, [r3, #0]
		*( ptr + i + 1 ) = buffer [ 7 + i ];
 801e7de:	7bfb      	ldrb	r3, [r7, #15]
 801e7e0:	3307      	adds	r3, #7
 801e7e2:	461a      	mov	r2, r3
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	441a      	add	r2, r3
 801e7e8:	7bfb      	ldrb	r3, [r7, #15]
 801e7ea:	3301      	adds	r3, #1
 801e7ec:	6839      	ldr	r1, [r7, #0]
 801e7ee:	440b      	add	r3, r1
 801e7f0:	7812      	ldrb	r2, [r2, #0]
 801e7f2:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e7f4:	7bfb      	ldrb	r3, [r7, #15]
 801e7f6:	3302      	adds	r3, #2
 801e7f8:	73fb      	strb	r3, [r7, #15]
 801e7fa:	7bfa      	ldrb	r2, [r7, #15]
 801e7fc:	7bbb      	ldrb	r3, [r7, #14]
 801e7fe:	429a      	cmp	r2, r3
 801e800:	d3e4      	bcc.n	801e7cc <PresetMultipleRegisters+0x16>
		#ifdef BIG_ENDIAN
		*( ptr + i ) = buffer [ 7 + i ];
		*( ptr + i + 1 ) = buffer [ 7 + i + 1 ];
		#endif
	}
	crc = CalculaCRCStream ( buffer, 6 );
 801e802:	2106      	movs	r1, #6
 801e804:	6878      	ldr	r0, [r7, #4]
 801e806:	f7ff feb9 	bl	801e57c <CalculaCRCStream>
 801e80a:	4603      	mov	r3, r0
 801e80c:	81bb      	strh	r3, [r7, #12]
	buffer [ 6 ] = ( uint8_t ) ( crc & 0x00FF );
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	3306      	adds	r3, #6
 801e812:	89ba      	ldrh	r2, [r7, #12]
 801e814:	b2d2      	uxtb	r2, r2
 801e816:	701a      	strb	r2, [r3, #0]
	buffer [ 7 ] = ( uint8_t ) ( crc >> 8 );
 801e818:	89bb      	ldrh	r3, [r7, #12]
 801e81a:	0a1b      	lsrs	r3, r3, #8
 801e81c:	b29a      	uxth	r2, r3
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	3307      	adds	r3, #7
 801e822:	b2d2      	uxtb	r2, r2
 801e824:	701a      	strb	r2, [r3, #0]
	return ( 8 );
 801e826:	2308      	movs	r3, #8
}
 801e828:	4618      	mov	r0, r3
 801e82a:	3710      	adds	r7, #16
 801e82c:	46bd      	mov	sp, r7
 801e82e:	bd80      	pop	{r7, pc}

0801e830 <InterpreterMODBUS>:
#include "modbus.h"
#include "FileSystemAPI.h"
MB modbus;

uint16_t InterpreterMODBUS(uint8_t *msg, uint16_t len)
{
 801e830:	b580      	push	{r7, lr}
 801e832:	b086      	sub	sp, #24
 801e834:	af00      	add	r7, sp, #0
 801e836:	6078      	str	r0, [r7, #4]
 801e838:	460b      	mov	r3, r1
 801e83a:	807b      	strh	r3, [r7, #2]
	uint8_t *ptr;
	uint16_t crccal, crcrec, address, totalbytes;

	crccal = 0;
 801e83c:	2300      	movs	r3, #0
 801e83e:	82bb      	strh	r3, [r7, #20]
	crcrec = 0;
 801e840:	2300      	movs	r3, #0
 801e842:	827b      	strh	r3, [r7, #18]
	address = (msg[2] << 8) | msg[3];
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	3302      	adds	r3, #2
 801e848:	781b      	ldrb	r3, [r3, #0]
 801e84a:	021b      	lsls	r3, r3, #8
 801e84c:	b21a      	sxth	r2, r3
 801e84e:	687b      	ldr	r3, [r7, #4]
 801e850:	3303      	adds	r3, #3
 801e852:	781b      	ldrb	r3, [r3, #0]
 801e854:	b21b      	sxth	r3, r3
 801e856:	4313      	orrs	r3, r2
 801e858:	b21b      	sxth	r3, r3
 801e85a:	823b      	strh	r3, [r7, #16]
	//bytecount = msg[6];
	crccal = CalculaCRCStream(msg, len - 2);
 801e85c:	887b      	ldrh	r3, [r7, #2]
 801e85e:	3b02      	subs	r3, #2
 801e860:	b29b      	uxth	r3, r3
 801e862:	4619      	mov	r1, r3
 801e864:	6878      	ldr	r0, [r7, #4]
 801e866:	f7ff fe89 	bl	801e57c <CalculaCRCStream>
 801e86a:	4603      	mov	r3, r0
 801e86c:	82bb      	strh	r3, [r7, #20]
	crcrec = (msg[len - 1] << 8) | msg[len - 2];
 801e86e:	887b      	ldrh	r3, [r7, #2]
 801e870:	3b01      	subs	r3, #1
 801e872:	687a      	ldr	r2, [r7, #4]
 801e874:	4413      	add	r3, r2
 801e876:	781b      	ldrb	r3, [r3, #0]
 801e878:	021b      	lsls	r3, r3, #8
 801e87a:	b21a      	sxth	r2, r3
 801e87c:	887b      	ldrh	r3, [r7, #2]
 801e87e:	3b02      	subs	r3, #2
 801e880:	6879      	ldr	r1, [r7, #4]
 801e882:	440b      	add	r3, r1
 801e884:	781b      	ldrb	r3, [r3, #0]
 801e886:	b21b      	sxth	r3, r3
 801e888:	4313      	orrs	r3, r2
 801e88a:	b21b      	sxth	r3, r3
 801e88c:	827b      	strh	r3, [r7, #18]

	if (crccal == crcrec)
 801e88e:	8aba      	ldrh	r2, [r7, #20]
 801e890:	8a7b      	ldrh	r3, [r7, #18]
 801e892:	429a      	cmp	r2, r3
 801e894:	f040 80ac 	bne.w	801e9f0 <InterpreterMODBUS+0x1c0>
	{
		switch (msg[0])
 801e898:	687b      	ldr	r3, [r7, #4]
 801e89a:	781b      	ldrb	r3, [r3, #0]
 801e89c:	2b01      	cmp	r3, #1
 801e89e:	f040 80ab 	bne.w	801e9f8 <InterpreterMODBUS+0x1c8>
		{
		case 0x01: // Escravo 1
			switch (msg[1])
 801e8a2:	687b      	ldr	r3, [r7, #4]
 801e8a4:	3301      	adds	r3, #1
 801e8a6:	781b      	ldrb	r3, [r3, #0]
 801e8a8:	3b01      	subs	r3, #1
 801e8aa:	2b0f      	cmp	r3, #15
 801e8ac:	f200 80a3 	bhi.w	801e9f6 <InterpreterMODBUS+0x1c6>
 801e8b0:	a201      	add	r2, pc, #4	; (adr r2, 801e8b8 <InterpreterMODBUS+0x88>)
 801e8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e8b6:	bf00      	nop
 801e8b8:	0801e8f9 	.word	0x0801e8f9
 801e8bc:	0801e9ed 	.word	0x0801e9ed
 801e8c0:	0801e911 	.word	0x0801e911
 801e8c4:	0801e929 	.word	0x0801e929
 801e8c8:	0801e9ed 	.word	0x0801e9ed
 801e8cc:	0801e941 	.word	0x0801e941
 801e8d0:	0801e9f7 	.word	0x0801e9f7
 801e8d4:	0801e9f7 	.word	0x0801e9f7
 801e8d8:	0801e9f7 	.word	0x0801e9f7
 801e8dc:	0801e9f7 	.word	0x0801e9f7
 801e8e0:	0801e9f7 	.word	0x0801e9f7
 801e8e4:	0801e9f7 	.word	0x0801e9f7
 801e8e8:	0801e9f7 	.word	0x0801e9f7
 801e8ec:	0801e9f7 	.word	0x0801e9f7
 801e8f0:	0801e9ed 	.word	0x0801e9ed
 801e8f4:	0801e997 	.word	0x0801e997
			{
			case 0x01: // Read coil registers

				ptr = GetAddrCoilRegister(address); // Pega o endereco real na memeria do CR
 801e8f8:	8a3b      	ldrh	r3, [r7, #16]
 801e8fa:	4618      	mov	r0, r3
 801e8fc:	f000 f884 	bl	801ea08 <GetAddrCoilRegister>
 801e900:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadCoilRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 801e902:	68f9      	ldr	r1, [r7, #12]
 801e904:	6878      	ldr	r0, [r7, #4]
 801e906:	f7ff fe5d 	bl	801e5c4 <ReadCoilRegister>
 801e90a:	4603      	mov	r3, r0
 801e90c:	82fb      	strh	r3, [r7, #22]
				break;
 801e90e:	e06e      	b.n	801e9ee <InterpreterMODBUS+0x1be>
			case 0x02: // Read input status
				break;
			case 0x03: // Read holding registers
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 801e910:	8a3b      	ldrh	r3, [r7, #16]
 801e912:	4618      	mov	r0, r3
 801e914:	f000 f8c2 	bl	801ea9c <GetAddrHoldingRegister>
 801e918:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadHoldingRegister(msg, ptr);	// Le o valor do IR e monta parte da mensagem
 801e91a:	68f9      	ldr	r1, [r7, #12]
 801e91c:	6878      	ldr	r0, [r7, #4]
 801e91e:	f7ff fee9 	bl	801e6f4 <ReadHoldingRegister>
 801e922:	4603      	mov	r3, r0
 801e924:	82fb      	strh	r3, [r7, #22]
				break;
 801e926:	e062      	b.n	801e9ee <InterpreterMODBUS+0x1be>
			case 0x04: // Read input registers
				ptr = GetAddrInputRegister(address); // Pega o endereco real na memoria do IR
 801e928:	8a3b      	ldrh	r3, [r7, #16]
 801e92a:	4618      	mov	r0, r3
 801e92c:	f000 f892 	bl	801ea54 <GetAddrInputRegister>
 801e930:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadInputRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 801e932:	68f9      	ldr	r1, [r7, #12]
 801e934:	6878      	ldr	r0, [r7, #4]
 801e936:	f7ff fe91 	bl	801e65c <ReadInputRegister>
 801e93a:	4603      	mov	r3, r0
 801e93c:	82fb      	strh	r3, [r7, #22]
				break;
 801e93e:	e056      	b.n	801e9ee <InterpreterMODBUS+0x1be>
			case 0x05: // Force single coil
				break;
			case 0x06: // Preset single register
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 801e940:	8a3b      	ldrh	r3, [r7, #16]
 801e942:	4618      	mov	r0, r3
 801e944:	f000 f8aa 	bl	801ea9c <GetAddrHoldingRegister>
 801e948:	60f8      	str	r0, [r7, #12]
				totalbytes = PresetSingleRegister(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 801e94a:	68f9      	ldr	r1, [r7, #12]
 801e94c:	6878      	ldr	r0, [r7, #4]
 801e94e:	f7ff ff1d 	bl	801e78c <PresetSingleRegister>
 801e952:	4603      	mov	r3, r0
 801e954:	82fb      	strh	r3, [r7, #22]

				//eeprom_write_char ( address, *( ptr ) );
				//eeprom_write_char ( address + 1, *( ptr + 1 ) );

				if (totalbytes)
 801e956:	8afb      	ldrh	r3, [r7, #22]
 801e958:	2b00      	cmp	r3, #0
 801e95a:	d016      	beq.n	801e98a <InterpreterMODBUS+0x15a>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (modbus.INPUTREGISTERS[ADD_TIPO_HARDW] != modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 801e95c:	4b29      	ldr	r3, [pc, #164]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e95e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 801e962:	2b00      	cmp	r3, #0
 801e964:	d011      	beq.n	801e98a <InterpreterMODBUS+0x15a>
 801e966:	4b27      	ldr	r3, [pc, #156]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e968:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 801e96c:	4b25      	ldr	r3, [pc, #148]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e96e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 801e972:	429a      	cmp	r2, r3
 801e974:	d009      	beq.n	801e98a <InterpreterMODBUS+0x15a>
					{
						//if((modbusMapa.COPIA_TIPO_HARDW != 0) && (modbusMapa.TIPO_HARDW != modbusMapa.COPIA_TIPO_HARDW)){

						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] =
								modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 801e976:	4b23      	ldr	r3, [pc, #140]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e978:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] =
 801e97c:	4b21      	ldr	r3, [pc, #132]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e97e:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						//modbusMapa.TIPO_HARDW = modbusMapa.COPIA_TIPO_HARDW;

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 801e982:	206f      	movs	r0, #111	; 0x6f
 801e984:	f000 f866 	bl	801ea54 <GetAddrInputRegister>
 801e988:	60f8      	str	r0, [r7, #12]
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 801e98a:	8a3b      	ldrh	r3, [r7, #16]
 801e98c:	4618      	mov	r0, r3
 801e98e:	f000 f885 	bl	801ea9c <GetAddrHoldingRegister>
 801e992:	60f8      	str	r0, [r7, #12]

				//eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 801e994:	e02b      	b.n	801e9ee <InterpreterMODBUS+0x1be>
			case 0x0F: // Preset multiple coils
				break;
			case 0x10: // Preset multiple resgisters
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memeria do HR
 801e996:	8a3b      	ldrh	r3, [r7, #16]
 801e998:	4618      	mov	r0, r3
 801e99a:	f000 f87f 	bl	801ea9c <GetAddrHoldingRegister>
 801e99e:	60f8      	str	r0, [r7, #12]

				totalbytes = PresetMultipleRegisters(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 801e9a0:	68f9      	ldr	r1, [r7, #12]
 801e9a2:	6878      	ldr	r0, [r7, #4]
 801e9a4:	f7ff ff07 	bl	801e7b6 <PresetMultipleRegisters>
 801e9a8:	4603      	mov	r3, r0
 801e9aa:	82fb      	strh	r3, [r7, #22]

				//eeprom_write_stream((address * 2), bytecount, ptr);

				if (totalbytes)
 801e9ac:	8afb      	ldrh	r3, [r7, #22]
 801e9ae:	2b00      	cmp	r3, #0
 801e9b0:	d016      	beq.n	801e9e0 <InterpreterMODBUS+0x1b0>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (modbus.INPUTREGISTERS[ADD_TIPO_HARDW] != modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 801e9b2:	4b14      	ldr	r3, [pc, #80]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e9b4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d011      	beq.n	801e9e0 <InterpreterMODBUS+0x1b0>
 801e9bc:	4b11      	ldr	r3, [pc, #68]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e9be:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 801e9c2:	4b10      	ldr	r3, [pc, #64]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e9c4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 801e9c8:	429a      	cmp	r2, r3
 801e9ca:	d009      	beq.n	801e9e0 <InterpreterMODBUS+0x1b0>
					{

						//if((modbusMapa.COPIA_TIPO_HARDW != 0) && (modbusMapa.TIPO_HARDW != modbusMapa.COPIA_TIPO_HARDW)){
						// modbusMapa.TIPO_HARDW = modbusMapa.COPIA_TIPO_HARDW;
						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] = modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 801e9cc:	4b0d      	ldr	r3, [pc, #52]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e9ce:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 801e9d2:	4b0c      	ldr	r3, [pc, #48]	; (801ea04 <InterpreterMODBUS+0x1d4>)
 801e9d4:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 801e9d8:	206f      	movs	r0, #111	; 0x6f
 801e9da:	f000 f83b 	bl	801ea54 <GetAddrInputRegister>
 801e9de:	60f8      	str	r0, [r7, #12]
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 801e9e0:	8a3b      	ldrh	r3, [r7, #16]
 801e9e2:	4618      	mov	r0, r3
 801e9e4:	f000 f85a 	bl	801ea9c <GetAddrHoldingRegister>
 801e9e8:	60f8      	str	r0, [r7, #12]
				// eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 801e9ea:	e000      	b.n	801e9ee <InterpreterMODBUS+0x1be>
				break;
 801e9ec:	bf00      	nop
			}
			break;
 801e9ee:	e002      	b.n	801e9f6 <InterpreterMODBUS+0x1c6>
		}
	}
	else
	{

		totalbytes = 0;
 801e9f0:	2300      	movs	r3, #0
 801e9f2:	82fb      	strh	r3, [r7, #22]
 801e9f4:	e000      	b.n	801e9f8 <InterpreterMODBUS+0x1c8>
			break;
 801e9f6:	bf00      	nop
	}

	return totalbytes;
 801e9f8:	8afb      	ldrh	r3, [r7, #22]
}
 801e9fa:	4618      	mov	r0, r3
 801e9fc:	3718      	adds	r7, #24
 801e9fe:	46bd      	mov	sp, r7
 801ea00:	bd80      	pop	{r7, pc}
 801ea02:	bf00      	nop
 801ea04:	2001035c 	.word	0x2001035c

0801ea08 <GetAddrCoilRegister>:

uint8_t* GetAddrCoilRegister(uint16_t address)
{
 801ea08:	b480      	push	{r7}
 801ea0a:	b085      	sub	sp, #20
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	4603      	mov	r3, r0
 801ea10:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	switch (address)
 801ea12:	88fb      	ldrh	r3, [r7, #6]
 801ea14:	2b02      	cmp	r3, #2
 801ea16:	d00c      	beq.n	801ea32 <GetAddrCoilRegister+0x2a>
 801ea18:	2b02      	cmp	r3, #2
 801ea1a:	dc0d      	bgt.n	801ea38 <GetAddrCoilRegister+0x30>
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d002      	beq.n	801ea26 <GetAddrCoilRegister+0x1e>
 801ea20:	2b01      	cmp	r3, #1
 801ea22:	d003      	beq.n	801ea2c <GetAddrCoilRegister+0x24>
 801ea24:	e008      	b.n	801ea38 <GetAddrCoilRegister+0x30>
	{

	case ADD_IN_1:
		ptr = (uint8_t*) &modbus.COILS[ADD_IN_1];
 801ea26:	4b08      	ldr	r3, [pc, #32]	; (801ea48 <GetAddrCoilRegister+0x40>)
 801ea28:	60fb      	str	r3, [r7, #12]
		break;
 801ea2a:	e005      	b.n	801ea38 <GetAddrCoilRegister+0x30>
	case ADD_IN_2:
		ptr = (uint8_t*) &modbus.COILS[ADD_IN_2];
 801ea2c:	4b07      	ldr	r3, [pc, #28]	; (801ea4c <GetAddrCoilRegister+0x44>)
 801ea2e:	60fb      	str	r3, [r7, #12]
		break;
 801ea30:	e002      	b.n	801ea38 <GetAddrCoilRegister+0x30>
	case ADD_OUT_1:
		ptr = (uint8_t*) &modbus.COILS[ADD_OUT_1];
 801ea32:	4b07      	ldr	r3, [pc, #28]	; (801ea50 <GetAddrCoilRegister+0x48>)
 801ea34:	60fb      	str	r3, [r7, #12]
		break;
 801ea36:	bf00      	nop
	}
	return ptr;
 801ea38:	68fb      	ldr	r3, [r7, #12]
}
 801ea3a:	4618      	mov	r0, r3
 801ea3c:	3714      	adds	r7, #20
 801ea3e:	46bd      	mov	sp, r7
 801ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea44:	4770      	bx	lr
 801ea46:	bf00      	nop
 801ea48:	2001035c 	.word	0x2001035c
 801ea4c:	2001035e 	.word	0x2001035e
 801ea50:	20010360 	.word	0x20010360

0801ea54 <GetAddrInputRegister>:

uint8_t* GetAddrInputRegister(uint16_t address)
{
 801ea54:	b480      	push	{r7}
 801ea56:	b085      	sub	sp, #20
 801ea58:	af00      	add	r7, sp, #0
 801ea5a:	4603      	mov	r3, r0
 801ea5c:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 256)
 801ea5e:	88fb      	ldrh	r3, [r7, #6]
 801ea60:	2bff      	cmp	r3, #255	; 0xff
 801ea62:	d808      	bhi.n	801ea76 <GetAddrInputRegister+0x22>

		ptr = (uint8_t*) &modbus.INPUTREGISTERS[ADD_IMEI_1 + (address)];
 801ea64:	88fb      	ldrh	r3, [r7, #6]
 801ea66:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801ea6a:	005b      	lsls	r3, r3, #1
 801ea6c:	4a0a      	ldr	r2, [pc, #40]	; (801ea98 <GetAddrInputRegister+0x44>)
 801ea6e:	4413      	add	r3, r2
 801ea70:	3306      	adds	r3, #6
 801ea72:	60fb      	str	r3, [r7, #12]
 801ea74:	e009      	b.n	801ea8a <GetAddrInputRegister+0x36>
	else
		ptr = (uint8_t*) &modbus.ESPELHO[ADD_IMEI_1 + ((address - 256))];
 801ea76:	88fb      	ldrh	r3, [r7, #6]
 801ea78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801ea7c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801ea80:	005b      	lsls	r3, r3, #1
 801ea82:	4a05      	ldr	r2, [pc, #20]	; (801ea98 <GetAddrInputRegister+0x44>)
 801ea84:	4413      	add	r3, r2
 801ea86:	3304      	adds	r3, #4
 801ea88:	60fb      	str	r3, [r7, #12]
	return ptr;
 801ea8a:	68fb      	ldr	r3, [r7, #12]
}
 801ea8c:	4618      	mov	r0, r3
 801ea8e:	3714      	adds	r7, #20
 801ea90:	46bd      	mov	sp, r7
 801ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea96:	4770      	bx	lr
 801ea98:	2001035c 	.word	0x2001035c

0801ea9c <GetAddrHoldingRegister>:

uint8_t* GetAddrHoldingRegister(uint16_t address)
{
 801ea9c:	b480      	push	{r7}
 801ea9e:	b085      	sub	sp, #20
 801eaa0:	af00      	add	r7, sp, #0
 801eaa2:	4603      	mov	r3, r0
 801eaa4:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 500)
 801eaa6:	88fb      	ldrh	r3, [r7, #6]
 801eaa8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801eaac:	d206      	bcs.n	801eabc <GetAddrHoldingRegister+0x20>

		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[ADD_TEMVALCONGPR + (address)];
 801eaae:	88fb      	ldrh	r3, [r7, #6]
 801eab0:	005b      	lsls	r3, r3, #1
 801eab2:	4a09      	ldr	r2, [pc, #36]	; (801ead8 <GetAddrHoldingRegister+0x3c>)
 801eab4:	4413      	add	r3, r2
 801eab6:	3306      	adds	r3, #6
 801eab8:	60fb      	str	r3, [r7, #12]
 801eaba:	e006      	b.n	801eaca <GetAddrHoldingRegister+0x2e>
	//ptr = (uint8_t*) &modbusMapa.TEMVALCONGPR + (address * 2);
	else
		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[(ADD_NUMSER_1 - 130)
				+ (address - 500)];
 801eabc:	88fb      	ldrh	r3, [r7, #6]
 801eabe:	3b82      	subs	r3, #130	; 0x82
		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[(ADD_NUMSER_1 - 130)
 801eac0:	005b      	lsls	r3, r3, #1
 801eac2:	4a05      	ldr	r2, [pc, #20]	; (801ead8 <GetAddrHoldingRegister+0x3c>)
 801eac4:	4413      	add	r3, r2
 801eac6:	3306      	adds	r3, #6
 801eac8:	60fb      	str	r3, [r7, #12]
	//ptr = (uint8_t*) &modbusMapa.NUMSER_1 + ((address - 500) * 2);
	return ptr;
 801eaca:	68fb      	ldr	r3, [r7, #12]
}
 801eacc:	4618      	mov	r0, r3
 801eace:	3714      	adds	r7, #20
 801ead0:	46bd      	mov	sp, r7
 801ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ead6:	4770      	bx	lr
 801ead8:	2001035c 	.word	0x2001035c

0801eadc <LoadHoldingRegisterRAM>:




void LoadHoldingRegisterRAM(void)
{
 801eadc:	b480      	push	{r7}
 801eade:	b083      	sub	sp, #12
 801eae0:	af00      	add	r7, sp, #0

	for (int var = 0; var < TOTAL_VARIAVEIS_HOLDING; ++var)
 801eae2:	2300      	movs	r3, #0
 801eae4:	607b      	str	r3, [r7, #4]
 801eae6:	e00c      	b.n	801eb02 <LoadHoldingRegisterRAM+0x26>
	{

		modbus.HOLDINGREGISTERS[var] = var + 3;
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	b29b      	uxth	r3, r3
 801eaec:	3303      	adds	r3, #3
 801eaee:	b299      	uxth	r1, r3
 801eaf0:	4a09      	ldr	r2, [pc, #36]	; (801eb18 <LoadHoldingRegisterRAM+0x3c>)
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	005b      	lsls	r3, r3, #1
 801eaf6:	4413      	add	r3, r2
 801eaf8:	460a      	mov	r2, r1
 801eafa:	80da      	strh	r2, [r3, #6]
	for (int var = 0; var < TOTAL_VARIAVEIS_HOLDING; ++var)
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	3301      	adds	r3, #1
 801eb00:	607b      	str	r3, [r7, #4]
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 801eb08:	dbee      	blt.n	801eae8 <LoadHoldingRegisterRAM+0xc>
	}
}
 801eb0a:	bf00      	nop
 801eb0c:	bf00      	nop
 801eb0e:	370c      	adds	r7, #12
 801eb10:	46bd      	mov	sp, r7
 801eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb16:	4770      	bx	lr
 801eb18:	2001035c 	.word	0x2001035c

0801eb1c <LoadInputRegisterRAM>:

void LoadInputRegisterRAM(void)
{
 801eb1c:	b480      	push	{r7}
 801eb1e:	b083      	sub	sp, #12
 801eb20:	af00      	add	r7, sp, #0

	for (int var = 0; var < TOTAL_VARIAVEIS_INPUT; ++var)
 801eb22:	2300      	movs	r3, #0
 801eb24:	607b      	str	r3, [r7, #4]
 801eb26:	e00e      	b.n	801eb46 <LoadInputRegisterRAM+0x2a>
	{

		modbus.INPUTREGISTERS[var] = var + 10;
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	b29b      	uxth	r3, r3
 801eb2c:	330a      	adds	r3, #10
 801eb2e:	b299      	uxth	r1, r3
 801eb30:	4a0a      	ldr	r2, [pc, #40]	; (801eb5c <LoadInputRegisterRAM+0x40>)
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801eb38:	005b      	lsls	r3, r3, #1
 801eb3a:	4413      	add	r3, r2
 801eb3c:	460a      	mov	r2, r1
 801eb3e:	80da      	strh	r2, [r3, #6]
	for (int var = 0; var < TOTAL_VARIAVEIS_INPUT; ++var)
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	3301      	adds	r3, #1
 801eb44:	607b      	str	r3, [r7, #4]
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	2b76      	cmp	r3, #118	; 0x76
 801eb4a:	dded      	ble.n	801eb28 <LoadInputRegisterRAM+0xc>
	}

}
 801eb4c:	bf00      	nop
 801eb4e:	bf00      	nop
 801eb50:	370c      	adds	r7, #12
 801eb52:	46bd      	mov	sp, r7
 801eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb58:	4770      	bx	lr
 801eb5a:	bf00      	nop
 801eb5c:	2001035c 	.word	0x2001035c

0801eb60 <LoadEspelhoRAM>:
	}

}

void LoadEspelhoRAM(void)
{
 801eb60:	b480      	push	{r7}
 801eb62:	b083      	sub	sp, #12
 801eb64:	af00      	add	r7, sp, #0

	for (int var = 0; var < TOTAL_VARIAVEIS_ESPELHO; ++var)
 801eb66:	2300      	movs	r3, #0
 801eb68:	607b      	str	r3, [r7, #4]
 801eb6a:	e00e      	b.n	801eb8a <LoadEspelhoRAM+0x2a>
	{
		modbus.ESPELHO[var] = var + 5;
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	b29b      	uxth	r3, r3
 801eb70:	3305      	adds	r3, #5
 801eb72:	b299      	uxth	r1, r3
 801eb74:	4a0a      	ldr	r2, [pc, #40]	; (801eba0 <LoadEspelhoRAM+0x40>)
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801eb7c:	005b      	lsls	r3, r3, #1
 801eb7e:	4413      	add	r3, r2
 801eb80:	460a      	mov	r2, r1
 801eb82:	809a      	strh	r2, [r3, #4]
	for (int var = 0; var < TOTAL_VARIAVEIS_ESPELHO; ++var)
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	3301      	adds	r3, #1
 801eb88:	607b      	str	r3, [r7, #4]
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	2b4a      	cmp	r3, #74	; 0x4a
 801eb8e:	dded      	ble.n	801eb6c <LoadEspelhoRAM+0xc>
	}

}
 801eb90:	bf00      	nop
 801eb92:	bf00      	nop
 801eb94:	370c      	adds	r7, #12
 801eb96:	46bd      	mov	sp, r7
 801eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb9c:	4770      	bx	lr
 801eb9e:	bf00      	nop
 801eba0:	2001035c 	.word	0x2001035c

0801eba4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 801eba4:	b580      	push	{r7, lr}
 801eba6:	b086      	sub	sp, #24
 801eba8:	af02      	add	r7, sp, #8
 801ebaa:	4603      	mov	r3, r0
 801ebac:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 801ebae:	f107 020f 	add.w	r2, r7, #15
 801ebb2:	1df9      	adds	r1, r7, #7
 801ebb4:	2364      	movs	r3, #100	; 0x64
 801ebb6:	9300      	str	r3, [sp, #0]
 801ebb8:	2301      	movs	r3, #1
 801ebba:	4804      	ldr	r0, [pc, #16]	; (801ebcc <W25qxx_Spi+0x28>)
 801ebbc:	f7e5 fcd8 	bl	8004570 <HAL_SPI_TransmitReceive>


	return ret;
 801ebc0:	7bfb      	ldrb	r3, [r7, #15]
}
 801ebc2:	4618      	mov	r0, r3
 801ebc4:	3710      	adds	r7, #16
 801ebc6:	46bd      	mov	sp, r7
 801ebc8:	bd80      	pop	{r7, pc}
 801ebca:	bf00      	nop
 801ebcc:	20000560 	.word	0x20000560

0801ebd0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 801ebd0:	b580      	push	{r7, lr}
 801ebd2:	b084      	sub	sp, #16
 801ebd4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 801ebd6:	2300      	movs	r3, #0
 801ebd8:	60fb      	str	r3, [r7, #12]
 801ebda:	2300      	movs	r3, #0
 801ebdc:	60bb      	str	r3, [r7, #8]
 801ebde:	2300      	movs	r3, #0
 801ebe0:	607b      	str	r3, [r7, #4]
 801ebe2:	2300      	movs	r3, #0
 801ebe4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ebe6:	2200      	movs	r2, #0
 801ebe8:	2108      	movs	r1, #8
 801ebea:	4813      	ldr	r0, [pc, #76]	; (801ec38 <W25qxx_ReadID+0x68>)
 801ebec:	f7e4 fbf4 	bl	80033d8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 801ebf0:	209f      	movs	r0, #159	; 0x9f
 801ebf2:	f7ff ffd7 	bl	801eba4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ebf6:	20a5      	movs	r0, #165	; 0xa5
 801ebf8:	f7ff ffd4 	bl	801eba4 <W25qxx_Spi>
 801ebfc:	4603      	mov	r3, r0
 801ebfe:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ec00:	20a5      	movs	r0, #165	; 0xa5
 801ec02:	f7ff ffcf 	bl	801eba4 <W25qxx_Spi>
 801ec06:	4603      	mov	r3, r0
 801ec08:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ec0a:	20a5      	movs	r0, #165	; 0xa5
 801ec0c:	f7ff ffca 	bl	801eba4 <W25qxx_Spi>
 801ec10:	4603      	mov	r3, r0
 801ec12:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ec14:	2201      	movs	r2, #1
 801ec16:	2108      	movs	r1, #8
 801ec18:	4807      	ldr	r0, [pc, #28]	; (801ec38 <W25qxx_ReadID+0x68>)
 801ec1a:	f7e4 fbdd 	bl	80033d8 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 801ec1e:	68bb      	ldr	r3, [r7, #8]
 801ec20:	041a      	lsls	r2, r3, #16
 801ec22:	687b      	ldr	r3, [r7, #4]
 801ec24:	021b      	lsls	r3, r3, #8
 801ec26:	4313      	orrs	r3, r2
 801ec28:	683a      	ldr	r2, [r7, #0]
 801ec2a:	4313      	orrs	r3, r2
 801ec2c:	60fb      	str	r3, [r7, #12]
	return Temp;
 801ec2e:	68fb      	ldr	r3, [r7, #12]
}
 801ec30:	4618      	mov	r0, r3
 801ec32:	3710      	adds	r7, #16
 801ec34:	46bd      	mov	sp, r7
 801ec36:	bd80      	pop	{r7, pc}
 801ec38:	40021000 	.word	0x40021000

0801ec3c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 801ec3c:	b590      	push	{r4, r7, lr}
 801ec3e:	b083      	sub	sp, #12
 801ec40:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ec42:	2200      	movs	r2, #0
 801ec44:	2108      	movs	r1, #8
 801ec46:	4816      	ldr	r0, [pc, #88]	; (801eca0 <W25qxx_ReadUniqID+0x64>)
 801ec48:	f7e4 fbc6 	bl	80033d8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 801ec4c:	204b      	movs	r0, #75	; 0x4b
 801ec4e:	f7ff ffa9 	bl	801eba4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 801ec52:	2300      	movs	r3, #0
 801ec54:	71fb      	strb	r3, [r7, #7]
 801ec56:	e005      	b.n	801ec64 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ec58:	20a5      	movs	r0, #165	; 0xa5
 801ec5a:	f7ff ffa3 	bl	801eba4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 801ec5e:	79fb      	ldrb	r3, [r7, #7]
 801ec60:	3301      	adds	r3, #1
 801ec62:	71fb      	strb	r3, [r7, #7]
 801ec64:	79fb      	ldrb	r3, [r7, #7]
 801ec66:	2b03      	cmp	r3, #3
 801ec68:	d9f6      	bls.n	801ec58 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	71bb      	strb	r3, [r7, #6]
 801ec6e:	e00b      	b.n	801ec88 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ec70:	79bc      	ldrb	r4, [r7, #6]
 801ec72:	20a5      	movs	r0, #165	; 0xa5
 801ec74:	f7ff ff96 	bl	801eba4 <W25qxx_Spi>
 801ec78:	4603      	mov	r3, r0
 801ec7a:	461a      	mov	r2, r3
 801ec7c:	4b09      	ldr	r3, [pc, #36]	; (801eca4 <W25qxx_ReadUniqID+0x68>)
 801ec7e:	4423      	add	r3, r4
 801ec80:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 801ec82:	79bb      	ldrb	r3, [r7, #6]
 801ec84:	3301      	adds	r3, #1
 801ec86:	71bb      	strb	r3, [r7, #6]
 801ec88:	79bb      	ldrb	r3, [r7, #6]
 801ec8a:	2b07      	cmp	r3, #7
 801ec8c:	d9f0      	bls.n	801ec70 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ec8e:	2201      	movs	r2, #1
 801ec90:	2108      	movs	r1, #8
 801ec92:	4803      	ldr	r0, [pc, #12]	; (801eca0 <W25qxx_ReadUniqID+0x64>)
 801ec94:	f7e4 fba0 	bl	80033d8 <HAL_GPIO_WritePin>
}
 801ec98:	bf00      	nop
 801ec9a:	370c      	adds	r7, #12
 801ec9c:	46bd      	mov	sp, r7
 801ec9e:	bd90      	pop	{r4, r7, pc}
 801eca0:	40021000 	.word	0x40021000
 801eca4:	200107d8 	.word	0x200107d8

0801eca8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 801eca8:	b580      	push	{r7, lr}
 801ecaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ecac:	2200      	movs	r2, #0
 801ecae:	2108      	movs	r1, #8
 801ecb0:	4807      	ldr	r0, [pc, #28]	; (801ecd0 <W25qxx_WriteEnable+0x28>)
 801ecb2:	f7e4 fb91 	bl	80033d8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 801ecb6:	2006      	movs	r0, #6
 801ecb8:	f7ff ff74 	bl	801eba4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ecbc:	2201      	movs	r2, #1
 801ecbe:	2108      	movs	r1, #8
 801ecc0:	4803      	ldr	r0, [pc, #12]	; (801ecd0 <W25qxx_WriteEnable+0x28>)
 801ecc2:	f7e4 fb89 	bl	80033d8 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 801ecc6:	2001      	movs	r0, #1
 801ecc8:	f7e2 fe88 	bl	80019dc <HAL_Delay>
}
 801eccc:	bf00      	nop
 801ecce:	bd80      	pop	{r7, pc}
 801ecd0:	40021000 	.word	0x40021000

0801ecd4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 801ecd4:	b580      	push	{r7, lr}
 801ecd6:	b084      	sub	sp, #16
 801ecd8:	af00      	add	r7, sp, #0
 801ecda:	4603      	mov	r3, r0
 801ecdc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 801ecde:	2300      	movs	r3, #0
 801ece0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ece2:	2200      	movs	r2, #0
 801ece4:	2108      	movs	r1, #8
 801ece6:	481c      	ldr	r0, [pc, #112]	; (801ed58 <W25qxx_ReadStatusRegister+0x84>)
 801ece8:	f7e4 fb76 	bl	80033d8 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 801ecec:	79fb      	ldrb	r3, [r7, #7]
 801ecee:	2b01      	cmp	r3, #1
 801ecf0:	d10c      	bne.n	801ed0c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 801ecf2:	2005      	movs	r0, #5
 801ecf4:	f7ff ff56 	bl	801eba4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ecf8:	20a5      	movs	r0, #165	; 0xa5
 801ecfa:	f7ff ff53 	bl	801eba4 <W25qxx_Spi>
 801ecfe:	4603      	mov	r3, r0
 801ed00:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 801ed02:	4a16      	ldr	r2, [pc, #88]	; (801ed5c <W25qxx_ReadStatusRegister+0x88>)
 801ed04:	7bfb      	ldrb	r3, [r7, #15]
 801ed06:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 801ed0a:	e01b      	b.n	801ed44 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 801ed0c:	79fb      	ldrb	r3, [r7, #7]
 801ed0e:	2b02      	cmp	r3, #2
 801ed10:	d10c      	bne.n	801ed2c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 801ed12:	2035      	movs	r0, #53	; 0x35
 801ed14:	f7ff ff46 	bl	801eba4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ed18:	20a5      	movs	r0, #165	; 0xa5
 801ed1a:	f7ff ff43 	bl	801eba4 <W25qxx_Spi>
 801ed1e:	4603      	mov	r3, r0
 801ed20:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 801ed22:	4a0e      	ldr	r2, [pc, #56]	; (801ed5c <W25qxx_ReadStatusRegister+0x88>)
 801ed24:	7bfb      	ldrb	r3, [r7, #15]
 801ed26:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 801ed2a:	e00b      	b.n	801ed44 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 801ed2c:	2015      	movs	r0, #21
 801ed2e:	f7ff ff39 	bl	801eba4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ed32:	20a5      	movs	r0, #165	; 0xa5
 801ed34:	f7ff ff36 	bl	801eba4 <W25qxx_Spi>
 801ed38:	4603      	mov	r3, r0
 801ed3a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 801ed3c:	4a07      	ldr	r2, [pc, #28]	; (801ed5c <W25qxx_ReadStatusRegister+0x88>)
 801ed3e:	7bfb      	ldrb	r3, [r7, #15]
 801ed40:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ed44:	2201      	movs	r2, #1
 801ed46:	2108      	movs	r1, #8
 801ed48:	4803      	ldr	r0, [pc, #12]	; (801ed58 <W25qxx_ReadStatusRegister+0x84>)
 801ed4a:	f7e4 fb45 	bl	80033d8 <HAL_GPIO_WritePin>
	return status;
 801ed4e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ed50:	4618      	mov	r0, r3
 801ed52:	3710      	adds	r7, #16
 801ed54:	46bd      	mov	sp, r7
 801ed56:	bd80      	pop	{r7, pc}
 801ed58:	40021000 	.word	0x40021000
 801ed5c:	200107d8 	.word	0x200107d8

0801ed60 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 801ed60:	b580      	push	{r7, lr}
 801ed62:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 801ed64:	2001      	movs	r0, #1
 801ed66:	f7e2 fe39 	bl	80019dc <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ed6a:	2200      	movs	r2, #0
 801ed6c:	2108      	movs	r1, #8
 801ed6e:	480f      	ldr	r0, [pc, #60]	; (801edac <W25qxx_WaitForWriteEnd+0x4c>)
 801ed70:	f7e4 fb32 	bl	80033d8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 801ed74:	2005      	movs	r0, #5
 801ed76:	f7ff ff15 	bl	801eba4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ed7a:	20a5      	movs	r0, #165	; 0xa5
 801ed7c:	f7ff ff12 	bl	801eba4 <W25qxx_Spi>
 801ed80:	4603      	mov	r3, r0
 801ed82:	461a      	mov	r2, r3
 801ed84:	4b0a      	ldr	r3, [pc, #40]	; (801edb0 <W25qxx_WaitForWriteEnd+0x50>)
 801ed86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 801ed8a:	2001      	movs	r0, #1
 801ed8c:	f7e2 fe26 	bl	80019dc <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 801ed90:	4b07      	ldr	r3, [pc, #28]	; (801edb0 <W25qxx_WaitForWriteEnd+0x50>)
 801ed92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ed96:	f003 0301 	and.w	r3, r3, #1
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	d1ed      	bne.n	801ed7a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ed9e:	2201      	movs	r2, #1
 801eda0:	2108      	movs	r1, #8
 801eda2:	4802      	ldr	r0, [pc, #8]	; (801edac <W25qxx_WaitForWriteEnd+0x4c>)
 801eda4:	f7e4 fb18 	bl	80033d8 <HAL_GPIO_WritePin>
}
 801eda8:	bf00      	nop
 801edaa:	bd80      	pop	{r7, pc}
 801edac:	40021000 	.word	0x40021000
 801edb0:	200107d8 	.word	0x200107d8

0801edb4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 801edb4:	b580      	push	{r7, lr}
 801edb6:	b082      	sub	sp, #8
 801edb8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 801edba:	4b65      	ldr	r3, [pc, #404]	; (801ef50 <W25qxx_Init+0x19c>)
 801edbc:	2201      	movs	r2, #1
 801edbe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 801edc2:	e002      	b.n	801edca <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 801edc4:	2001      	movs	r0, #1
 801edc6:	f7e2 fe09 	bl	80019dc <HAL_Delay>
	while (HAL_GetTick() < 100)
 801edca:	f7e2 fdfb 	bl	80019c4 <HAL_GetTick>
 801edce:	4603      	mov	r3, r0
 801edd0:	2b63      	cmp	r3, #99	; 0x63
 801edd2:	d9f7      	bls.n	801edc4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801edd4:	2201      	movs	r2, #1
 801edd6:	2108      	movs	r1, #8
 801edd8:	485e      	ldr	r0, [pc, #376]	; (801ef54 <W25qxx_Init+0x1a0>)
 801edda:	f7e4 fafd 	bl	80033d8 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 801edde:	2064      	movs	r0, #100	; 0x64
 801ede0:	f7e2 fdfc 	bl	80019dc <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 801ede4:	f7ff fef4 	bl	801ebd0 <W25qxx_ReadID>
 801ede8:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	b2db      	uxtb	r3, r3
 801edee:	3b11      	subs	r3, #17
 801edf0:	2b0f      	cmp	r3, #15
 801edf2:	d86c      	bhi.n	801eece <W25qxx_Init+0x11a>
 801edf4:	a201      	add	r2, pc, #4	; (adr r2, 801edfc <W25qxx_Init+0x48>)
 801edf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801edfa:	bf00      	nop
 801edfc:	0801eec1 	.word	0x0801eec1
 801ee00:	0801eeb3 	.word	0x0801eeb3
 801ee04:	0801eea5 	.word	0x0801eea5
 801ee08:	0801ee97 	.word	0x0801ee97
 801ee0c:	0801ee89 	.word	0x0801ee89
 801ee10:	0801ee7b 	.word	0x0801ee7b
 801ee14:	0801ee6d 	.word	0x0801ee6d
 801ee18:	0801ee5d 	.word	0x0801ee5d
 801ee1c:	0801ee4d 	.word	0x0801ee4d
 801ee20:	0801eecf 	.word	0x0801eecf
 801ee24:	0801eecf 	.word	0x0801eecf
 801ee28:	0801eecf 	.word	0x0801eecf
 801ee2c:	0801eecf 	.word	0x0801eecf
 801ee30:	0801eecf 	.word	0x0801eecf
 801ee34:	0801eecf 	.word	0x0801eecf
 801ee38:	0801ee3d 	.word	0x0801ee3d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 801ee3c:	4b44      	ldr	r3, [pc, #272]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee3e:	220a      	movs	r2, #10
 801ee40:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 801ee42:	4b43      	ldr	r3, [pc, #268]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ee48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 801ee4a:	e046      	b.n	801eeda <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 801ee4c:	4b40      	ldr	r3, [pc, #256]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee4e:	2209      	movs	r2, #9
 801ee50:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 801ee52:	4b3f      	ldr	r3, [pc, #252]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee54:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ee58:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 801ee5a:	e03e      	b.n	801eeda <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 801ee5c:	4b3c      	ldr	r3, [pc, #240]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee5e:	2208      	movs	r2, #8
 801ee60:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 801ee62:	4b3b      	ldr	r3, [pc, #236]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee64:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ee68:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 801ee6a:	e036      	b.n	801eeda <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 801ee6c:	4b38      	ldr	r3, [pc, #224]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee6e:	2207      	movs	r2, #7
 801ee70:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 801ee72:	4b37      	ldr	r3, [pc, #220]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee74:	2280      	movs	r2, #128	; 0x80
 801ee76:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 801ee78:	e02f      	b.n	801eeda <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 801ee7a:	4b35      	ldr	r3, [pc, #212]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee7c:	2206      	movs	r2, #6
 801ee7e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 801ee80:	4b33      	ldr	r3, [pc, #204]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee82:	2240      	movs	r2, #64	; 0x40
 801ee84:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 801ee86:	e028      	b.n	801eeda <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 801ee88:	4b31      	ldr	r3, [pc, #196]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee8a:	2205      	movs	r2, #5
 801ee8c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 801ee8e:	4b30      	ldr	r3, [pc, #192]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee90:	2220      	movs	r2, #32
 801ee92:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 801ee94:	e021      	b.n	801eeda <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 801ee96:	4b2e      	ldr	r3, [pc, #184]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee98:	2204      	movs	r2, #4
 801ee9a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 801ee9c:	4b2c      	ldr	r3, [pc, #176]	; (801ef50 <W25qxx_Init+0x19c>)
 801ee9e:	2210      	movs	r2, #16
 801eea0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 801eea2:	e01a      	b.n	801eeda <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 801eea4:	4b2a      	ldr	r3, [pc, #168]	; (801ef50 <W25qxx_Init+0x19c>)
 801eea6:	2203      	movs	r2, #3
 801eea8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 801eeaa:	4b29      	ldr	r3, [pc, #164]	; (801ef50 <W25qxx_Init+0x19c>)
 801eeac:	2208      	movs	r2, #8
 801eeae:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 801eeb0:	e013      	b.n	801eeda <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 801eeb2:	4b27      	ldr	r3, [pc, #156]	; (801ef50 <W25qxx_Init+0x19c>)
 801eeb4:	2202      	movs	r2, #2
 801eeb6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 801eeb8:	4b25      	ldr	r3, [pc, #148]	; (801ef50 <W25qxx_Init+0x19c>)
 801eeba:	2204      	movs	r2, #4
 801eebc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 801eebe:	e00c      	b.n	801eeda <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 801eec0:	4b23      	ldr	r3, [pc, #140]	; (801ef50 <W25qxx_Init+0x19c>)
 801eec2:	2201      	movs	r2, #1
 801eec4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 801eec6:	4b22      	ldr	r3, [pc, #136]	; (801ef50 <W25qxx_Init+0x19c>)
 801eec8:	2202      	movs	r2, #2
 801eeca:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 801eecc:	e005      	b.n	801eeda <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 801eece:	4b20      	ldr	r3, [pc, #128]	; (801ef50 <W25qxx_Init+0x19c>)
 801eed0:	2200      	movs	r2, #0
 801eed2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 801eed6:	2300      	movs	r3, #0
 801eed8:	e036      	b.n	801ef48 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 801eeda:	4b1d      	ldr	r3, [pc, #116]	; (801ef50 <W25qxx_Init+0x19c>)
 801eedc:	f44f 7280 	mov.w	r2, #256	; 0x100
 801eee0:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 801eee2:	4b1b      	ldr	r3, [pc, #108]	; (801ef50 <W25qxx_Init+0x19c>)
 801eee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801eee8:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 801eeea:	4b19      	ldr	r3, [pc, #100]	; (801ef50 <W25qxx_Init+0x19c>)
 801eeec:	69db      	ldr	r3, [r3, #28]
 801eeee:	011b      	lsls	r3, r3, #4
 801eef0:	4a17      	ldr	r2, [pc, #92]	; (801ef50 <W25qxx_Init+0x19c>)
 801eef2:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 801eef4:	4b16      	ldr	r3, [pc, #88]	; (801ef50 <W25qxx_Init+0x19c>)
 801eef6:	695b      	ldr	r3, [r3, #20]
 801eef8:	4a15      	ldr	r2, [pc, #84]	; (801ef50 <W25qxx_Init+0x19c>)
 801eefa:	6912      	ldr	r2, [r2, #16]
 801eefc:	fb02 f303 	mul.w	r3, r2, r3
 801ef00:	4a13      	ldr	r2, [pc, #76]	; (801ef50 <W25qxx_Init+0x19c>)
 801ef02:	8952      	ldrh	r2, [r2, #10]
 801ef04:	fbb3 f3f2 	udiv	r3, r3, r2
 801ef08:	4a11      	ldr	r2, [pc, #68]	; (801ef50 <W25qxx_Init+0x19c>)
 801ef0a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 801ef0c:	4b10      	ldr	r3, [pc, #64]	; (801ef50 <W25qxx_Init+0x19c>)
 801ef0e:	691b      	ldr	r3, [r3, #16]
 801ef10:	011b      	lsls	r3, r3, #4
 801ef12:	4a0f      	ldr	r2, [pc, #60]	; (801ef50 <W25qxx_Init+0x19c>)
 801ef14:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 801ef16:	4b0e      	ldr	r3, [pc, #56]	; (801ef50 <W25qxx_Init+0x19c>)
 801ef18:	695b      	ldr	r3, [r3, #20]
 801ef1a:	4a0d      	ldr	r2, [pc, #52]	; (801ef50 <W25qxx_Init+0x19c>)
 801ef1c:	6912      	ldr	r2, [r2, #16]
 801ef1e:	fb02 f303 	mul.w	r3, r2, r3
 801ef22:	0a9b      	lsrs	r3, r3, #10
 801ef24:	4a0a      	ldr	r2, [pc, #40]	; (801ef50 <W25qxx_Init+0x19c>)
 801ef26:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 801ef28:	f7ff fe88 	bl	801ec3c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 801ef2c:	2001      	movs	r0, #1
 801ef2e:	f7ff fed1 	bl	801ecd4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 801ef32:	2002      	movs	r0, #2
 801ef34:	f7ff fece 	bl	801ecd4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 801ef38:	2003      	movs	r0, #3
 801ef3a:	f7ff fecb 	bl	801ecd4 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 801ef3e:	4b04      	ldr	r3, [pc, #16]	; (801ef50 <W25qxx_Init+0x19c>)
 801ef40:	2200      	movs	r2, #0
 801ef42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 801ef46:	2301      	movs	r3, #1
}
 801ef48:	4618      	mov	r0, r3
 801ef4a:	3708      	adds	r7, #8
 801ef4c:	46bd      	mov	sp, r7
 801ef4e:	bd80      	pop	{r7, pc}
 801ef50:	200107d8 	.word	0x200107d8
 801ef54:	40021000 	.word	0x40021000

0801ef58 <W25qxx_EraseSector>:
#endif
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
uint8_t W25qxx_EraseSector(uint32_t SectorAddr) {
 801ef58:	b580      	push	{r7, lr}
 801ef5a:	b082      	sub	sp, #8
 801ef5c:	af00      	add	r7, sp, #0
 801ef5e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 801ef60:	e002      	b.n	801ef68 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 801ef62:	2001      	movs	r0, #1
 801ef64:	f7e2 fd3a 	bl	80019dc <HAL_Delay>
	while (w25qxx.Lock == 1)
 801ef68:	4b26      	ldr	r3, [pc, #152]	; (801f004 <W25qxx_EraseSector+0xac>)
 801ef6a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801ef6e:	2b01      	cmp	r3, #1
 801ef70:	d0f7      	beq.n	801ef62 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 801ef72:	4b24      	ldr	r3, [pc, #144]	; (801f004 <W25qxx_EraseSector+0xac>)
 801ef74:	2201      	movs	r2, #1
 801ef76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 801ef7a:	f7ff fef1 	bl	801ed60 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 801ef7e:	4b21      	ldr	r3, [pc, #132]	; (801f004 <W25qxx_EraseSector+0xac>)
 801ef80:	691a      	ldr	r2, [r3, #16]
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	fb02 f303 	mul.w	r3, r2, r3
 801ef88:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 801ef8a:	f7ff fe8d 	bl	801eca8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ef8e:	2200      	movs	r2, #0
 801ef90:	2108      	movs	r1, #8
 801ef92:	481d      	ldr	r0, [pc, #116]	; (801f008 <W25qxx_EraseSector+0xb0>)
 801ef94:	f7e4 fa20 	bl	80033d8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 801ef98:	4b1a      	ldr	r3, [pc, #104]	; (801f004 <W25qxx_EraseSector+0xac>)
 801ef9a:	781b      	ldrb	r3, [r3, #0]
 801ef9c:	2b08      	cmp	r3, #8
 801ef9e:	d909      	bls.n	801efb4 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi(0x21);
 801efa0:	2021      	movs	r0, #33	; 0x21
 801efa2:	f7ff fdff 	bl	801eba4 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	0e1b      	lsrs	r3, r3, #24
 801efaa:	b2db      	uxtb	r3, r3
 801efac:	4618      	mov	r0, r3
 801efae:	f7ff fdf9 	bl	801eba4 <W25qxx_Spi>
 801efb2:	e002      	b.n	801efba <W25qxx_EraseSector+0x62>
	} else {
		W25qxx_Spi(0x20);
 801efb4:	2020      	movs	r0, #32
 801efb6:	f7ff fdf5 	bl	801eba4 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	0c1b      	lsrs	r3, r3, #16
 801efbe:	b2db      	uxtb	r3, r3
 801efc0:	4618      	mov	r0, r3
 801efc2:	f7ff fdef 	bl	801eba4 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	0a1b      	lsrs	r3, r3, #8
 801efca:	b2db      	uxtb	r3, r3
 801efcc:	4618      	mov	r0, r3
 801efce:	f7ff fde9 	bl	801eba4 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	b2db      	uxtb	r3, r3
 801efd6:	4618      	mov	r0, r3
 801efd8:	f7ff fde4 	bl	801eba4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801efdc:	2201      	movs	r2, #1
 801efde:	2108      	movs	r1, #8
 801efe0:	4809      	ldr	r0, [pc, #36]	; (801f008 <W25qxx_EraseSector+0xb0>)
 801efe2:	f7e4 f9f9 	bl	80033d8 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 801efe6:	f7ff febb 	bl	801ed60 <W25qxx_WaitForWriteEnd>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 801efea:	2001      	movs	r0, #1
 801efec:	f7e2 fcf6 	bl	80019dc <HAL_Delay>
	w25qxx.Lock = 0;
 801eff0:	4b04      	ldr	r3, [pc, #16]	; (801f004 <W25qxx_EraseSector+0xac>)
 801eff2:	2200      	movs	r2, #0
 801eff4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 801eff8:	bf00      	nop
 801effa:	4618      	mov	r0, r3
 801effc:	3708      	adds	r7, #8
 801effe:	46bd      	mov	sp, r7
 801f000:	bd80      	pop	{r7, pc}
 801f002:	bf00      	nop
 801f004:	200107d8 	.word	0x200107d8
 801f008:	40021000 	.word	0x40021000

0801f00c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 801f00c:	b480      	push	{r7}
 801f00e:	b083      	sub	sp, #12
 801f010:	af00      	add	r7, sp, #0
 801f012:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 801f014:	4b07      	ldr	r3, [pc, #28]	; (801f034 <W25qxx_SectorToPage+0x28>)
 801f016:	691b      	ldr	r3, [r3, #16]
 801f018:	687a      	ldr	r2, [r7, #4]
 801f01a:	fb02 f303 	mul.w	r3, r2, r3
 801f01e:	4a05      	ldr	r2, [pc, #20]	; (801f034 <W25qxx_SectorToPage+0x28>)
 801f020:	8952      	ldrh	r2, [r2, #10]
 801f022:	fbb3 f3f2 	udiv	r3, r3, r2
}
 801f026:	4618      	mov	r0, r3
 801f028:	370c      	adds	r7, #12
 801f02a:	46bd      	mov	sp, r7
 801f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f030:	4770      	bx	lr
 801f032:	bf00      	nop
 801f034:	200107d8 	.word	0x200107d8

0801f038 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 801f038:	b580      	push	{r7, lr}
 801f03a:	b084      	sub	sp, #16
 801f03c:	af00      	add	r7, sp, #0
 801f03e:	60f8      	str	r0, [r7, #12]
 801f040:	60b9      	str	r1, [r7, #8]
 801f042:	607a      	str	r2, [r7, #4]
 801f044:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 801f046:	e002      	b.n	801f04e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 801f048:	2001      	movs	r0, #1
 801f04a:	f7e2 fcc7 	bl	80019dc <HAL_Delay>
	while (w25qxx.Lock == 1)
 801f04e:	4b39      	ldr	r3, [pc, #228]	; (801f134 <W25qxx_WritePage+0xfc>)
 801f050:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f054:	2b01      	cmp	r3, #1
 801f056:	d0f7      	beq.n	801f048 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 801f058:	4b36      	ldr	r3, [pc, #216]	; (801f134 <W25qxx_WritePage+0xfc>)
 801f05a:	2201      	movs	r2, #1
 801f05c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 801f060:	683a      	ldr	r2, [r7, #0]
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	4413      	add	r3, r2
 801f066:	4a33      	ldr	r2, [pc, #204]	; (801f134 <W25qxx_WritePage+0xfc>)
 801f068:	8952      	ldrh	r2, [r2, #10]
 801f06a:	4293      	cmp	r3, r2
 801f06c:	d802      	bhi.n	801f074 <W25qxx_WritePage+0x3c>
 801f06e:	683b      	ldr	r3, [r7, #0]
 801f070:	2b00      	cmp	r3, #0
 801f072:	d105      	bne.n	801f080 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801f074:	4b2f      	ldr	r3, [pc, #188]	; (801f134 <W25qxx_WritePage+0xfc>)
 801f076:	895b      	ldrh	r3, [r3, #10]
 801f078:	461a      	mov	r2, r3
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	1ad3      	subs	r3, r2, r3
 801f07e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 801f080:	687a      	ldr	r2, [r7, #4]
 801f082:	683b      	ldr	r3, [r7, #0]
 801f084:	4413      	add	r3, r2
 801f086:	4a2b      	ldr	r2, [pc, #172]	; (801f134 <W25qxx_WritePage+0xfc>)
 801f088:	8952      	ldrh	r2, [r2, #10]
 801f08a:	4293      	cmp	r3, r2
 801f08c:	d905      	bls.n	801f09a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801f08e:	4b29      	ldr	r3, [pc, #164]	; (801f134 <W25qxx_WritePage+0xfc>)
 801f090:	895b      	ldrh	r3, [r3, #10]
 801f092:	461a      	mov	r2, r3
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	1ad3      	subs	r3, r2, r3
 801f098:	603b      	str	r3, [r7, #0]

	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();
#endif

	W25qxx_WaitForWriteEnd();
 801f09a:	f7ff fe61 	bl	801ed60 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 801f09e:	f7ff fe03 	bl	801eca8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801f0a2:	2200      	movs	r2, #0
 801f0a4:	2108      	movs	r1, #8
 801f0a6:	4824      	ldr	r0, [pc, #144]	; (801f138 <W25qxx_WritePage+0x100>)
 801f0a8:	f7e4 f996 	bl	80033d8 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 801f0ac:	4b21      	ldr	r3, [pc, #132]	; (801f134 <W25qxx_WritePage+0xfc>)
 801f0ae:	895b      	ldrh	r3, [r3, #10]
 801f0b0:	461a      	mov	r2, r3
 801f0b2:	68bb      	ldr	r3, [r7, #8]
 801f0b4:	fb02 f303 	mul.w	r3, r2, r3
 801f0b8:	687a      	ldr	r2, [r7, #4]
 801f0ba:	4413      	add	r3, r2
 801f0bc:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 801f0be:	4b1d      	ldr	r3, [pc, #116]	; (801f134 <W25qxx_WritePage+0xfc>)
 801f0c0:	781b      	ldrb	r3, [r3, #0]
 801f0c2:	2b08      	cmp	r3, #8
 801f0c4:	d909      	bls.n	801f0da <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 801f0c6:	2012      	movs	r0, #18
 801f0c8:	f7ff fd6c 	bl	801eba4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 801f0cc:	68bb      	ldr	r3, [r7, #8]
 801f0ce:	0e1b      	lsrs	r3, r3, #24
 801f0d0:	b2db      	uxtb	r3, r3
 801f0d2:	4618      	mov	r0, r3
 801f0d4:	f7ff fd66 	bl	801eba4 <W25qxx_Spi>
 801f0d8:	e002      	b.n	801f0e0 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 801f0da:	2002      	movs	r0, #2
 801f0dc:	f7ff fd62 	bl	801eba4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 801f0e0:	68bb      	ldr	r3, [r7, #8]
 801f0e2:	0c1b      	lsrs	r3, r3, #16
 801f0e4:	b2db      	uxtb	r3, r3
 801f0e6:	4618      	mov	r0, r3
 801f0e8:	f7ff fd5c 	bl	801eba4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 801f0ec:	68bb      	ldr	r3, [r7, #8]
 801f0ee:	0a1b      	lsrs	r3, r3, #8
 801f0f0:	b2db      	uxtb	r3, r3
 801f0f2:	4618      	mov	r0, r3
 801f0f4:	f7ff fd56 	bl	801eba4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 801f0f8:	68bb      	ldr	r3, [r7, #8]
 801f0fa:	b2db      	uxtb	r3, r3
 801f0fc:	4618      	mov	r0, r3
 801f0fe:	f7ff fd51 	bl	801eba4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 801f102:	683b      	ldr	r3, [r7, #0]
 801f104:	b29a      	uxth	r2, r3
 801f106:	2364      	movs	r3, #100	; 0x64
 801f108:	68f9      	ldr	r1, [r7, #12]
 801f10a:	480c      	ldr	r0, [pc, #48]	; (801f13c <W25qxx_WritePage+0x104>)
 801f10c:	f7e4 ffd5 	bl	80040ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801f110:	2201      	movs	r2, #1
 801f112:	2108      	movs	r1, #8
 801f114:	4808      	ldr	r0, [pc, #32]	; (801f138 <W25qxx_WritePage+0x100>)
 801f116:	f7e4 f95f 	bl	80033d8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 801f11a:	f7ff fe21 	bl	801ed60 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 801f11e:	2001      	movs	r0, #1
 801f120:	f7e2 fc5c 	bl	80019dc <HAL_Delay>
	w25qxx.Lock = 0;
 801f124:	4b03      	ldr	r3, [pc, #12]	; (801f134 <W25qxx_WritePage+0xfc>)
 801f126:	2200      	movs	r2, #0
 801f128:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 801f12c:	bf00      	nop
 801f12e:	3710      	adds	r7, #16
 801f130:	46bd      	mov	sp, r7
 801f132:	bd80      	pop	{r7, pc}
 801f134:	200107d8 	.word	0x200107d8
 801f138:	40021000 	.word	0x40021000
 801f13c:	20000560 	.word	0x20000560

0801f140 <W25qxx_WriteSector>:
//###################################################################################################################
uint8_t W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 801f140:	b580      	push	{r7, lr}
 801f142:	b088      	sub	sp, #32
 801f144:	af00      	add	r7, sp, #0
 801f146:	60f8      	str	r0, [r7, #12]
 801f148:	60b9      	str	r1, [r7, #8]
 801f14a:	607a      	str	r2, [r7, #4]
 801f14c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 801f14e:	4b2d      	ldr	r3, [pc, #180]	; (801f204 <W25qxx_WriteSector+0xc4>)
 801f150:	691b      	ldr	r3, [r3, #16]
 801f152:	683a      	ldr	r2, [r7, #0]
 801f154:	429a      	cmp	r2, r3
 801f156:	d802      	bhi.n	801f15e <W25qxx_WriteSector+0x1e>
 801f158:	683b      	ldr	r3, [r7, #0]
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d102      	bne.n	801f164 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 801f15e:	4b29      	ldr	r3, [pc, #164]	; (801f204 <W25qxx_WriteSector+0xc4>)
 801f160:	691b      	ldr	r3, [r3, #16]
 801f162:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 801f164:	4b27      	ldr	r3, [pc, #156]	; (801f204 <W25qxx_WriteSector+0xc4>)
 801f166:	691b      	ldr	r3, [r3, #16]
 801f168:	687a      	ldr	r2, [r7, #4]
 801f16a:	429a      	cmp	r2, r3
 801f16c:	d301      	bcc.n	801f172 <W25qxx_WriteSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 801f16e:	2300      	movs	r3, #0
 801f170:	e043      	b.n	801f1fa <W25qxx_WriteSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 801f172:	687a      	ldr	r2, [r7, #4]
 801f174:	683b      	ldr	r3, [r7, #0]
 801f176:	441a      	add	r2, r3
 801f178:	4b22      	ldr	r3, [pc, #136]	; (801f204 <W25qxx_WriteSector+0xc4>)
 801f17a:	691b      	ldr	r3, [r3, #16]
 801f17c:	429a      	cmp	r2, r3
 801f17e:	d905      	bls.n	801f18c <W25qxx_WriteSector+0x4c>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 801f180:	4b20      	ldr	r3, [pc, #128]	; (801f204 <W25qxx_WriteSector+0xc4>)
 801f182:	691a      	ldr	r2, [r3, #16]
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	1ad3      	subs	r3, r2, r3
 801f188:	61bb      	str	r3, [r7, #24]
 801f18a:	e001      	b.n	801f190 <W25qxx_WriteSector+0x50>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 801f18c:	683b      	ldr	r3, [r7, #0]
 801f18e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 801f190:	68b8      	ldr	r0, [r7, #8]
 801f192:	f7ff ff3b 	bl	801f00c <W25qxx_SectorToPage>
 801f196:	4602      	mov	r2, r0
 801f198:	4b1a      	ldr	r3, [pc, #104]	; (801f204 <W25qxx_WriteSector+0xc4>)
 801f19a:	895b      	ldrh	r3, [r3, #10]
 801f19c:	4619      	mov	r1, r3
 801f19e:	687b      	ldr	r3, [r7, #4]
 801f1a0:	fbb3 f3f1 	udiv	r3, r3, r1
 801f1a4:	4413      	add	r3, r2
 801f1a6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 801f1a8:	4b16      	ldr	r3, [pc, #88]	; (801f204 <W25qxx_WriteSector+0xc4>)
 801f1aa:	895b      	ldrh	r3, [r3, #10]
 801f1ac:	461a      	mov	r2, r3
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	fbb3 f1f2 	udiv	r1, r3, r2
 801f1b4:	fb01 f202 	mul.w	r2, r1, r2
 801f1b8:	1a9b      	subs	r3, r3, r2
 801f1ba:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 801f1bc:	69bb      	ldr	r3, [r7, #24]
 801f1be:	697a      	ldr	r2, [r7, #20]
 801f1c0:	69f9      	ldr	r1, [r7, #28]
 801f1c2:	68f8      	ldr	r0, [r7, #12]
 801f1c4:	f7ff ff38 	bl	801f038 <W25qxx_WritePage>
		StartPage++;
 801f1c8:	69fb      	ldr	r3, [r7, #28]
 801f1ca:	3301      	adds	r3, #1
 801f1cc:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 801f1ce:	4b0d      	ldr	r3, [pc, #52]	; (801f204 <W25qxx_WriteSector+0xc4>)
 801f1d0:	895b      	ldrh	r3, [r3, #10]
 801f1d2:	461a      	mov	r2, r3
 801f1d4:	697b      	ldr	r3, [r7, #20]
 801f1d6:	1a9a      	subs	r2, r3, r2
 801f1d8:	69bb      	ldr	r3, [r7, #24]
 801f1da:	4413      	add	r3, r2
 801f1dc:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 801f1de:	4b09      	ldr	r3, [pc, #36]	; (801f204 <W25qxx_WriteSector+0xc4>)
 801f1e0:	895b      	ldrh	r3, [r3, #10]
 801f1e2:	461a      	mov	r2, r3
 801f1e4:	697b      	ldr	r3, [r7, #20]
 801f1e6:	1ad3      	subs	r3, r2, r3
 801f1e8:	68fa      	ldr	r2, [r7, #12]
 801f1ea:	4413      	add	r3, r2
 801f1ec:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 801f1ee:	2300      	movs	r3, #0
 801f1f0:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 801f1f2:	69bb      	ldr	r3, [r7, #24]
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	dce1      	bgt.n	801f1bc <W25qxx_WriteSector+0x7c>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif

	return 1;
 801f1f8:	2301      	movs	r3, #1

}
 801f1fa:	4618      	mov	r0, r3
 801f1fc:	3720      	adds	r7, #32
 801f1fe:	46bd      	mov	sp, r7
 801f200:	bd80      	pop	{r7, pc}
 801f202:	bf00      	nop
 801f204:	200107d8 	.word	0x200107d8

0801f208 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 801f208:	b580      	push	{r7, lr}
 801f20a:	b084      	sub	sp, #16
 801f20c:	af00      	add	r7, sp, #0
 801f20e:	60f8      	str	r0, [r7, #12]
 801f210:	60b9      	str	r1, [r7, #8]
 801f212:	607a      	str	r2, [r7, #4]
 801f214:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 801f216:	e002      	b.n	801f21e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 801f218:	2001      	movs	r0, #1
 801f21a:	f7e2 fbdf 	bl	80019dc <HAL_Delay>
	while (w25qxx.Lock == 1)
 801f21e:	4b36      	ldr	r3, [pc, #216]	; (801f2f8 <W25qxx_ReadPage+0xf0>)
 801f220:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f224:	2b01      	cmp	r3, #1
 801f226:	d0f7      	beq.n	801f218 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 801f228:	4b33      	ldr	r3, [pc, #204]	; (801f2f8 <W25qxx_ReadPage+0xf0>)
 801f22a:	2201      	movs	r2, #1
 801f22c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 801f230:	4b31      	ldr	r3, [pc, #196]	; (801f2f8 <W25qxx_ReadPage+0xf0>)
 801f232:	895b      	ldrh	r3, [r3, #10]
 801f234:	461a      	mov	r2, r3
 801f236:	683b      	ldr	r3, [r7, #0]
 801f238:	4293      	cmp	r3, r2
 801f23a:	d802      	bhi.n	801f242 <W25qxx_ReadPage+0x3a>
 801f23c:	683b      	ldr	r3, [r7, #0]
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d102      	bne.n	801f248 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 801f242:	4b2d      	ldr	r3, [pc, #180]	; (801f2f8 <W25qxx_ReadPage+0xf0>)
 801f244:	895b      	ldrh	r3, [r3, #10]
 801f246:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 801f248:	687a      	ldr	r2, [r7, #4]
 801f24a:	683b      	ldr	r3, [r7, #0]
 801f24c:	4413      	add	r3, r2
 801f24e:	4a2a      	ldr	r2, [pc, #168]	; (801f2f8 <W25qxx_ReadPage+0xf0>)
 801f250:	8952      	ldrh	r2, [r2, #10]
 801f252:	4293      	cmp	r3, r2
 801f254:	d905      	bls.n	801f262 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801f256:	4b28      	ldr	r3, [pc, #160]	; (801f2f8 <W25qxx_ReadPage+0xf0>)
 801f258:	895b      	ldrh	r3, [r3, #10]
 801f25a:	461a      	mov	r2, r3
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	1ad3      	subs	r3, r2, r3
 801f260:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG_1 == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();

#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 801f262:	4b25      	ldr	r3, [pc, #148]	; (801f2f8 <W25qxx_ReadPage+0xf0>)
 801f264:	895b      	ldrh	r3, [r3, #10]
 801f266:	461a      	mov	r2, r3
 801f268:	68bb      	ldr	r3, [r7, #8]
 801f26a:	fb02 f303 	mul.w	r3, r2, r3
 801f26e:	687a      	ldr	r2, [r7, #4]
 801f270:	4413      	add	r3, r2
 801f272:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801f274:	2200      	movs	r2, #0
 801f276:	2108      	movs	r1, #8
 801f278:	4820      	ldr	r0, [pc, #128]	; (801f2fc <W25qxx_ReadPage+0xf4>)
 801f27a:	f7e4 f8ad 	bl	80033d8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 801f27e:	4b1e      	ldr	r3, [pc, #120]	; (801f2f8 <W25qxx_ReadPage+0xf0>)
 801f280:	781b      	ldrb	r3, [r3, #0]
 801f282:	2b08      	cmp	r3, #8
 801f284:	d909      	bls.n	801f29a <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 801f286:	200c      	movs	r0, #12
 801f288:	f7ff fc8c 	bl	801eba4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 801f28c:	68bb      	ldr	r3, [r7, #8]
 801f28e:	0e1b      	lsrs	r3, r3, #24
 801f290:	b2db      	uxtb	r3, r3
 801f292:	4618      	mov	r0, r3
 801f294:	f7ff fc86 	bl	801eba4 <W25qxx_Spi>
 801f298:	e002      	b.n	801f2a0 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 801f29a:	200b      	movs	r0, #11
 801f29c:	f7ff fc82 	bl	801eba4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 801f2a0:	68bb      	ldr	r3, [r7, #8]
 801f2a2:	0c1b      	lsrs	r3, r3, #16
 801f2a4:	b2db      	uxtb	r3, r3
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	f7ff fc7c 	bl	801eba4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 801f2ac:	68bb      	ldr	r3, [r7, #8]
 801f2ae:	0a1b      	lsrs	r3, r3, #8
 801f2b0:	b2db      	uxtb	r3, r3
 801f2b2:	4618      	mov	r0, r3
 801f2b4:	f7ff fc76 	bl	801eba4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 801f2b8:	68bb      	ldr	r3, [r7, #8]
 801f2ba:	b2db      	uxtb	r3, r3
 801f2bc:	4618      	mov	r0, r3
 801f2be:	f7ff fc71 	bl	801eba4 <W25qxx_Spi>
	W25qxx_Spi(0);
 801f2c2:	2000      	movs	r0, #0
 801f2c4:	f7ff fc6e 	bl	801eba4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 801f2c8:	683b      	ldr	r3, [r7, #0]
 801f2ca:	b29a      	uxth	r2, r3
 801f2cc:	2364      	movs	r3, #100	; 0x64
 801f2ce:	68f9      	ldr	r1, [r7, #12]
 801f2d0:	480b      	ldr	r0, [pc, #44]	; (801f300 <W25qxx_ReadPage+0xf8>)
 801f2d2:	f7e5 f835 	bl	8004340 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801f2d6:	2201      	movs	r2, #1
 801f2d8:	2108      	movs	r1, #8
 801f2da:	4808      	ldr	r0, [pc, #32]	; (801f2fc <W25qxx_ReadPage+0xf4>)
 801f2dc:	f7e4 f87c 	bl	80033d8 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 801f2e0:	2001      	movs	r0, #1
 801f2e2:	f7e2 fb7b 	bl	80019dc <HAL_Delay>
	w25qxx.Lock = 0;
 801f2e6:	4b04      	ldr	r3, [pc, #16]	; (801f2f8 <W25qxx_ReadPage+0xf0>)
 801f2e8:	2200      	movs	r2, #0
 801f2ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 801f2ee:	bf00      	nop
 801f2f0:	3710      	adds	r7, #16
 801f2f2:	46bd      	mov	sp, r7
 801f2f4:	bd80      	pop	{r7, pc}
 801f2f6:	bf00      	nop
 801f2f8:	200107d8 	.word	0x200107d8
 801f2fc:	40021000 	.word	0x40021000
 801f300:	20000560 	.word	0x20000560

0801f304 <W25qxx_ReadSector>:
//###################################################################################################################
uint8_t W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 801f304:	b580      	push	{r7, lr}
 801f306:	b088      	sub	sp, #32
 801f308:	af00      	add	r7, sp, #0
 801f30a:	60f8      	str	r0, [r7, #12]
 801f30c:	60b9      	str	r1, [r7, #8]
 801f30e:	607a      	str	r2, [r7, #4]
 801f310:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 801f312:	4b2d      	ldr	r3, [pc, #180]	; (801f3c8 <W25qxx_ReadSector+0xc4>)
 801f314:	691b      	ldr	r3, [r3, #16]
 801f316:	683a      	ldr	r2, [r7, #0]
 801f318:	429a      	cmp	r2, r3
 801f31a:	d802      	bhi.n	801f322 <W25qxx_ReadSector+0x1e>
 801f31c:	683b      	ldr	r3, [r7, #0]
 801f31e:	2b00      	cmp	r3, #0
 801f320:	d102      	bne.n	801f328 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 801f322:	4b29      	ldr	r3, [pc, #164]	; (801f3c8 <W25qxx_ReadSector+0xc4>)
 801f324:	691b      	ldr	r3, [r3, #16]
 801f326:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 801f328:	4b27      	ldr	r3, [pc, #156]	; (801f3c8 <W25qxx_ReadSector+0xc4>)
 801f32a:	691b      	ldr	r3, [r3, #16]
 801f32c:	687a      	ldr	r2, [r7, #4]
 801f32e:	429a      	cmp	r2, r3
 801f330:	d301      	bcc.n	801f336 <W25qxx_ReadSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 801f332:	2300      	movs	r3, #0
 801f334:	e043      	b.n	801f3be <W25qxx_ReadSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 801f336:	687a      	ldr	r2, [r7, #4]
 801f338:	683b      	ldr	r3, [r7, #0]
 801f33a:	441a      	add	r2, r3
 801f33c:	4b22      	ldr	r3, [pc, #136]	; (801f3c8 <W25qxx_ReadSector+0xc4>)
 801f33e:	691b      	ldr	r3, [r3, #16]
 801f340:	429a      	cmp	r2, r3
 801f342:	d905      	bls.n	801f350 <W25qxx_ReadSector+0x4c>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 801f344:	4b20      	ldr	r3, [pc, #128]	; (801f3c8 <W25qxx_ReadSector+0xc4>)
 801f346:	691a      	ldr	r2, [r3, #16]
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	1ad3      	subs	r3, r2, r3
 801f34c:	61bb      	str	r3, [r7, #24]
 801f34e:	e001      	b.n	801f354 <W25qxx_ReadSector+0x50>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 801f350:	683b      	ldr	r3, [r7, #0]
 801f352:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 801f354:	68b8      	ldr	r0, [r7, #8]
 801f356:	f7ff fe59 	bl	801f00c <W25qxx_SectorToPage>
 801f35a:	4602      	mov	r2, r0
 801f35c:	4b1a      	ldr	r3, [pc, #104]	; (801f3c8 <W25qxx_ReadSector+0xc4>)
 801f35e:	895b      	ldrh	r3, [r3, #10]
 801f360:	4619      	mov	r1, r3
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	fbb3 f3f1 	udiv	r3, r3, r1
 801f368:	4413      	add	r3, r2
 801f36a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 801f36c:	4b16      	ldr	r3, [pc, #88]	; (801f3c8 <W25qxx_ReadSector+0xc4>)
 801f36e:	895b      	ldrh	r3, [r3, #10]
 801f370:	461a      	mov	r2, r3
 801f372:	687b      	ldr	r3, [r7, #4]
 801f374:	fbb3 f1f2 	udiv	r1, r3, r2
 801f378:	fb01 f202 	mul.w	r2, r1, r2
 801f37c:	1a9b      	subs	r3, r3, r2
 801f37e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 801f380:	69bb      	ldr	r3, [r7, #24]
 801f382:	697a      	ldr	r2, [r7, #20]
 801f384:	69f9      	ldr	r1, [r7, #28]
 801f386:	68f8      	ldr	r0, [r7, #12]
 801f388:	f7ff ff3e 	bl	801f208 <W25qxx_ReadPage>
		StartPage++;
 801f38c:	69fb      	ldr	r3, [r7, #28]
 801f38e:	3301      	adds	r3, #1
 801f390:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 801f392:	4b0d      	ldr	r3, [pc, #52]	; (801f3c8 <W25qxx_ReadSector+0xc4>)
 801f394:	895b      	ldrh	r3, [r3, #10]
 801f396:	461a      	mov	r2, r3
 801f398:	697b      	ldr	r3, [r7, #20]
 801f39a:	1a9a      	subs	r2, r3, r2
 801f39c:	69bb      	ldr	r3, [r7, #24]
 801f39e:	4413      	add	r3, r2
 801f3a0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 801f3a2:	4b09      	ldr	r3, [pc, #36]	; (801f3c8 <W25qxx_ReadSector+0xc4>)
 801f3a4:	895b      	ldrh	r3, [r3, #10]
 801f3a6:	461a      	mov	r2, r3
 801f3a8:	697b      	ldr	r3, [r7, #20]
 801f3aa:	1ad3      	subs	r3, r2, r3
 801f3ac:	68fa      	ldr	r2, [r7, #12]
 801f3ae:	4413      	add	r3, r2
 801f3b0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 801f3b2:	2300      	movs	r3, #0
 801f3b4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 801f3b6:	69bb      	ldr	r3, [r7, #24]
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	dce1      	bgt.n	801f380 <W25qxx_ReadSector+0x7c>
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif


	return 1;
 801f3bc:	2301      	movs	r3, #1
}
 801f3be:	4618      	mov	r0, r3
 801f3c0:	3720      	adds	r7, #32
 801f3c2:	46bd      	mov	sp, r7
 801f3c4:	bd80      	pop	{r7, pc}
 801f3c6:	bf00      	nop
 801f3c8:	200107d8 	.word	0x200107d8

0801f3cc <__assert_func>:
 801f3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f3ce:	4614      	mov	r4, r2
 801f3d0:	461a      	mov	r2, r3
 801f3d2:	4b09      	ldr	r3, [pc, #36]	; (801f3f8 <__assert_func+0x2c>)
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	4605      	mov	r5, r0
 801f3d8:	68d8      	ldr	r0, [r3, #12]
 801f3da:	b14c      	cbz	r4, 801f3f0 <__assert_func+0x24>
 801f3dc:	4b07      	ldr	r3, [pc, #28]	; (801f3fc <__assert_func+0x30>)
 801f3de:	9100      	str	r1, [sp, #0]
 801f3e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f3e4:	4906      	ldr	r1, [pc, #24]	; (801f400 <__assert_func+0x34>)
 801f3e6:	462b      	mov	r3, r5
 801f3e8:	f000 fa3c 	bl	801f864 <fiprintf>
 801f3ec:	f000 fcdd 	bl	801fdaa <abort>
 801f3f0:	4b04      	ldr	r3, [pc, #16]	; (801f404 <__assert_func+0x38>)
 801f3f2:	461c      	mov	r4, r3
 801f3f4:	e7f3      	b.n	801f3de <__assert_func+0x12>
 801f3f6:	bf00      	nop
 801f3f8:	2000008c 	.word	0x2000008c
 801f3fc:	080252b8 	.word	0x080252b8
 801f400:	080252c5 	.word	0x080252c5
 801f404:	080252f3 	.word	0x080252f3

0801f408 <atoi>:
 801f408:	220a      	movs	r2, #10
 801f40a:	2100      	movs	r1, #0
 801f40c:	f000 b97c 	b.w	801f708 <strtol>

0801f410 <malloc>:
 801f410:	4b02      	ldr	r3, [pc, #8]	; (801f41c <malloc+0xc>)
 801f412:	4601      	mov	r1, r0
 801f414:	6818      	ldr	r0, [r3, #0]
 801f416:	f000 b82b 	b.w	801f470 <_malloc_r>
 801f41a:	bf00      	nop
 801f41c:	2000008c 	.word	0x2000008c

0801f420 <free>:
 801f420:	4b02      	ldr	r3, [pc, #8]	; (801f42c <free+0xc>)
 801f422:	4601      	mov	r1, r0
 801f424:	6818      	ldr	r0, [r3, #0]
 801f426:	f000 bcc7 	b.w	801fdb8 <_free_r>
 801f42a:	bf00      	nop
 801f42c:	2000008c 	.word	0x2000008c

0801f430 <sbrk_aligned>:
 801f430:	b570      	push	{r4, r5, r6, lr}
 801f432:	4e0e      	ldr	r6, [pc, #56]	; (801f46c <sbrk_aligned+0x3c>)
 801f434:	460c      	mov	r4, r1
 801f436:	6831      	ldr	r1, [r6, #0]
 801f438:	4605      	mov	r5, r0
 801f43a:	b911      	cbnz	r1, 801f442 <sbrk_aligned+0x12>
 801f43c:	f000 fc58 	bl	801fcf0 <_sbrk_r>
 801f440:	6030      	str	r0, [r6, #0]
 801f442:	4621      	mov	r1, r4
 801f444:	4628      	mov	r0, r5
 801f446:	f000 fc53 	bl	801fcf0 <_sbrk_r>
 801f44a:	1c43      	adds	r3, r0, #1
 801f44c:	d00a      	beq.n	801f464 <sbrk_aligned+0x34>
 801f44e:	1cc4      	adds	r4, r0, #3
 801f450:	f024 0403 	bic.w	r4, r4, #3
 801f454:	42a0      	cmp	r0, r4
 801f456:	d007      	beq.n	801f468 <sbrk_aligned+0x38>
 801f458:	1a21      	subs	r1, r4, r0
 801f45a:	4628      	mov	r0, r5
 801f45c:	f000 fc48 	bl	801fcf0 <_sbrk_r>
 801f460:	3001      	adds	r0, #1
 801f462:	d101      	bne.n	801f468 <sbrk_aligned+0x38>
 801f464:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f468:	4620      	mov	r0, r4
 801f46a:	bd70      	pop	{r4, r5, r6, pc}
 801f46c:	20010804 	.word	0x20010804

0801f470 <_malloc_r>:
 801f470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f474:	1ccd      	adds	r5, r1, #3
 801f476:	f025 0503 	bic.w	r5, r5, #3
 801f47a:	3508      	adds	r5, #8
 801f47c:	2d0c      	cmp	r5, #12
 801f47e:	bf38      	it	cc
 801f480:	250c      	movcc	r5, #12
 801f482:	2d00      	cmp	r5, #0
 801f484:	4607      	mov	r7, r0
 801f486:	db01      	blt.n	801f48c <_malloc_r+0x1c>
 801f488:	42a9      	cmp	r1, r5
 801f48a:	d905      	bls.n	801f498 <_malloc_r+0x28>
 801f48c:	230c      	movs	r3, #12
 801f48e:	603b      	str	r3, [r7, #0]
 801f490:	2600      	movs	r6, #0
 801f492:	4630      	mov	r0, r6
 801f494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f498:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f56c <_malloc_r+0xfc>
 801f49c:	f000 f868 	bl	801f570 <__malloc_lock>
 801f4a0:	f8d8 3000 	ldr.w	r3, [r8]
 801f4a4:	461c      	mov	r4, r3
 801f4a6:	bb5c      	cbnz	r4, 801f500 <_malloc_r+0x90>
 801f4a8:	4629      	mov	r1, r5
 801f4aa:	4638      	mov	r0, r7
 801f4ac:	f7ff ffc0 	bl	801f430 <sbrk_aligned>
 801f4b0:	1c43      	adds	r3, r0, #1
 801f4b2:	4604      	mov	r4, r0
 801f4b4:	d155      	bne.n	801f562 <_malloc_r+0xf2>
 801f4b6:	f8d8 4000 	ldr.w	r4, [r8]
 801f4ba:	4626      	mov	r6, r4
 801f4bc:	2e00      	cmp	r6, #0
 801f4be:	d145      	bne.n	801f54c <_malloc_r+0xdc>
 801f4c0:	2c00      	cmp	r4, #0
 801f4c2:	d048      	beq.n	801f556 <_malloc_r+0xe6>
 801f4c4:	6823      	ldr	r3, [r4, #0]
 801f4c6:	4631      	mov	r1, r6
 801f4c8:	4638      	mov	r0, r7
 801f4ca:	eb04 0903 	add.w	r9, r4, r3
 801f4ce:	f000 fc0f 	bl	801fcf0 <_sbrk_r>
 801f4d2:	4581      	cmp	r9, r0
 801f4d4:	d13f      	bne.n	801f556 <_malloc_r+0xe6>
 801f4d6:	6821      	ldr	r1, [r4, #0]
 801f4d8:	1a6d      	subs	r5, r5, r1
 801f4da:	4629      	mov	r1, r5
 801f4dc:	4638      	mov	r0, r7
 801f4de:	f7ff ffa7 	bl	801f430 <sbrk_aligned>
 801f4e2:	3001      	adds	r0, #1
 801f4e4:	d037      	beq.n	801f556 <_malloc_r+0xe6>
 801f4e6:	6823      	ldr	r3, [r4, #0]
 801f4e8:	442b      	add	r3, r5
 801f4ea:	6023      	str	r3, [r4, #0]
 801f4ec:	f8d8 3000 	ldr.w	r3, [r8]
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	d038      	beq.n	801f566 <_malloc_r+0xf6>
 801f4f4:	685a      	ldr	r2, [r3, #4]
 801f4f6:	42a2      	cmp	r2, r4
 801f4f8:	d12b      	bne.n	801f552 <_malloc_r+0xe2>
 801f4fa:	2200      	movs	r2, #0
 801f4fc:	605a      	str	r2, [r3, #4]
 801f4fe:	e00f      	b.n	801f520 <_malloc_r+0xb0>
 801f500:	6822      	ldr	r2, [r4, #0]
 801f502:	1b52      	subs	r2, r2, r5
 801f504:	d41f      	bmi.n	801f546 <_malloc_r+0xd6>
 801f506:	2a0b      	cmp	r2, #11
 801f508:	d917      	bls.n	801f53a <_malloc_r+0xca>
 801f50a:	1961      	adds	r1, r4, r5
 801f50c:	42a3      	cmp	r3, r4
 801f50e:	6025      	str	r5, [r4, #0]
 801f510:	bf18      	it	ne
 801f512:	6059      	strne	r1, [r3, #4]
 801f514:	6863      	ldr	r3, [r4, #4]
 801f516:	bf08      	it	eq
 801f518:	f8c8 1000 	streq.w	r1, [r8]
 801f51c:	5162      	str	r2, [r4, r5]
 801f51e:	604b      	str	r3, [r1, #4]
 801f520:	4638      	mov	r0, r7
 801f522:	f104 060b 	add.w	r6, r4, #11
 801f526:	f000 f829 	bl	801f57c <__malloc_unlock>
 801f52a:	f026 0607 	bic.w	r6, r6, #7
 801f52e:	1d23      	adds	r3, r4, #4
 801f530:	1af2      	subs	r2, r6, r3
 801f532:	d0ae      	beq.n	801f492 <_malloc_r+0x22>
 801f534:	1b9b      	subs	r3, r3, r6
 801f536:	50a3      	str	r3, [r4, r2]
 801f538:	e7ab      	b.n	801f492 <_malloc_r+0x22>
 801f53a:	42a3      	cmp	r3, r4
 801f53c:	6862      	ldr	r2, [r4, #4]
 801f53e:	d1dd      	bne.n	801f4fc <_malloc_r+0x8c>
 801f540:	f8c8 2000 	str.w	r2, [r8]
 801f544:	e7ec      	b.n	801f520 <_malloc_r+0xb0>
 801f546:	4623      	mov	r3, r4
 801f548:	6864      	ldr	r4, [r4, #4]
 801f54a:	e7ac      	b.n	801f4a6 <_malloc_r+0x36>
 801f54c:	4634      	mov	r4, r6
 801f54e:	6876      	ldr	r6, [r6, #4]
 801f550:	e7b4      	b.n	801f4bc <_malloc_r+0x4c>
 801f552:	4613      	mov	r3, r2
 801f554:	e7cc      	b.n	801f4f0 <_malloc_r+0x80>
 801f556:	230c      	movs	r3, #12
 801f558:	603b      	str	r3, [r7, #0]
 801f55a:	4638      	mov	r0, r7
 801f55c:	f000 f80e 	bl	801f57c <__malloc_unlock>
 801f560:	e797      	b.n	801f492 <_malloc_r+0x22>
 801f562:	6025      	str	r5, [r4, #0]
 801f564:	e7dc      	b.n	801f520 <_malloc_r+0xb0>
 801f566:	605b      	str	r3, [r3, #4]
 801f568:	deff      	udf	#255	; 0xff
 801f56a:	bf00      	nop
 801f56c:	20010800 	.word	0x20010800

0801f570 <__malloc_lock>:
 801f570:	4801      	ldr	r0, [pc, #4]	; (801f578 <__malloc_lock+0x8>)
 801f572:	f000 bc0a 	b.w	801fd8a <__retarget_lock_acquire_recursive>
 801f576:	bf00      	nop
 801f578:	20010948 	.word	0x20010948

0801f57c <__malloc_unlock>:
 801f57c:	4801      	ldr	r0, [pc, #4]	; (801f584 <__malloc_unlock+0x8>)
 801f57e:	f000 bc05 	b.w	801fd8c <__retarget_lock_release_recursive>
 801f582:	bf00      	nop
 801f584:	20010948 	.word	0x20010948

0801f588 <rand>:
 801f588:	4b16      	ldr	r3, [pc, #88]	; (801f5e4 <rand+0x5c>)
 801f58a:	b510      	push	{r4, lr}
 801f58c:	681c      	ldr	r4, [r3, #0]
 801f58e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f590:	b9b3      	cbnz	r3, 801f5c0 <rand+0x38>
 801f592:	2018      	movs	r0, #24
 801f594:	f7ff ff3c 	bl	801f410 <malloc>
 801f598:	4602      	mov	r2, r0
 801f59a:	6320      	str	r0, [r4, #48]	; 0x30
 801f59c:	b920      	cbnz	r0, 801f5a8 <rand+0x20>
 801f59e:	4b12      	ldr	r3, [pc, #72]	; (801f5e8 <rand+0x60>)
 801f5a0:	4812      	ldr	r0, [pc, #72]	; (801f5ec <rand+0x64>)
 801f5a2:	2152      	movs	r1, #82	; 0x52
 801f5a4:	f7ff ff12 	bl	801f3cc <__assert_func>
 801f5a8:	4911      	ldr	r1, [pc, #68]	; (801f5f0 <rand+0x68>)
 801f5aa:	4b12      	ldr	r3, [pc, #72]	; (801f5f4 <rand+0x6c>)
 801f5ac:	e9c0 1300 	strd	r1, r3, [r0]
 801f5b0:	4b11      	ldr	r3, [pc, #68]	; (801f5f8 <rand+0x70>)
 801f5b2:	6083      	str	r3, [r0, #8]
 801f5b4:	230b      	movs	r3, #11
 801f5b6:	8183      	strh	r3, [r0, #12]
 801f5b8:	2100      	movs	r1, #0
 801f5ba:	2001      	movs	r0, #1
 801f5bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f5c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f5c2:	480e      	ldr	r0, [pc, #56]	; (801f5fc <rand+0x74>)
 801f5c4:	690b      	ldr	r3, [r1, #16]
 801f5c6:	694c      	ldr	r4, [r1, #20]
 801f5c8:	4a0d      	ldr	r2, [pc, #52]	; (801f600 <rand+0x78>)
 801f5ca:	4358      	muls	r0, r3
 801f5cc:	fb02 0004 	mla	r0, r2, r4, r0
 801f5d0:	fba3 3202 	umull	r3, r2, r3, r2
 801f5d4:	3301      	adds	r3, #1
 801f5d6:	eb40 0002 	adc.w	r0, r0, r2
 801f5da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801f5de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f5e2:	bd10      	pop	{r4, pc}
 801f5e4:	2000008c 	.word	0x2000008c
 801f5e8:	080252f4 	.word	0x080252f4
 801f5ec:	0802530b 	.word	0x0802530b
 801f5f0:	abcd330e 	.word	0xabcd330e
 801f5f4:	e66d1234 	.word	0xe66d1234
 801f5f8:	0005deec 	.word	0x0005deec
 801f5fc:	5851f42d 	.word	0x5851f42d
 801f600:	4c957f2d 	.word	0x4c957f2d

0801f604 <_strtol_l.constprop.0>:
 801f604:	2b01      	cmp	r3, #1
 801f606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f60a:	d001      	beq.n	801f610 <_strtol_l.constprop.0+0xc>
 801f60c:	2b24      	cmp	r3, #36	; 0x24
 801f60e:	d906      	bls.n	801f61e <_strtol_l.constprop.0+0x1a>
 801f610:	f000 fb90 	bl	801fd34 <__errno>
 801f614:	2316      	movs	r3, #22
 801f616:	6003      	str	r3, [r0, #0]
 801f618:	2000      	movs	r0, #0
 801f61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f61e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801f704 <_strtol_l.constprop.0+0x100>
 801f622:	460d      	mov	r5, r1
 801f624:	462e      	mov	r6, r5
 801f626:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f62a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801f62e:	f017 0708 	ands.w	r7, r7, #8
 801f632:	d1f7      	bne.n	801f624 <_strtol_l.constprop.0+0x20>
 801f634:	2c2d      	cmp	r4, #45	; 0x2d
 801f636:	d132      	bne.n	801f69e <_strtol_l.constprop.0+0x9a>
 801f638:	782c      	ldrb	r4, [r5, #0]
 801f63a:	2701      	movs	r7, #1
 801f63c:	1cb5      	adds	r5, r6, #2
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d05b      	beq.n	801f6fa <_strtol_l.constprop.0+0xf6>
 801f642:	2b10      	cmp	r3, #16
 801f644:	d109      	bne.n	801f65a <_strtol_l.constprop.0+0x56>
 801f646:	2c30      	cmp	r4, #48	; 0x30
 801f648:	d107      	bne.n	801f65a <_strtol_l.constprop.0+0x56>
 801f64a:	782c      	ldrb	r4, [r5, #0]
 801f64c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f650:	2c58      	cmp	r4, #88	; 0x58
 801f652:	d14d      	bne.n	801f6f0 <_strtol_l.constprop.0+0xec>
 801f654:	786c      	ldrb	r4, [r5, #1]
 801f656:	2310      	movs	r3, #16
 801f658:	3502      	adds	r5, #2
 801f65a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801f65e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801f662:	f04f 0e00 	mov.w	lr, #0
 801f666:	fbb8 f9f3 	udiv	r9, r8, r3
 801f66a:	4676      	mov	r6, lr
 801f66c:	fb03 8a19 	mls	sl, r3, r9, r8
 801f670:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f674:	f1bc 0f09 	cmp.w	ip, #9
 801f678:	d816      	bhi.n	801f6a8 <_strtol_l.constprop.0+0xa4>
 801f67a:	4664      	mov	r4, ip
 801f67c:	42a3      	cmp	r3, r4
 801f67e:	dd24      	ble.n	801f6ca <_strtol_l.constprop.0+0xc6>
 801f680:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801f684:	d008      	beq.n	801f698 <_strtol_l.constprop.0+0x94>
 801f686:	45b1      	cmp	r9, r6
 801f688:	d31c      	bcc.n	801f6c4 <_strtol_l.constprop.0+0xc0>
 801f68a:	d101      	bne.n	801f690 <_strtol_l.constprop.0+0x8c>
 801f68c:	45a2      	cmp	sl, r4
 801f68e:	db19      	blt.n	801f6c4 <_strtol_l.constprop.0+0xc0>
 801f690:	fb06 4603 	mla	r6, r6, r3, r4
 801f694:	f04f 0e01 	mov.w	lr, #1
 801f698:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f69c:	e7e8      	b.n	801f670 <_strtol_l.constprop.0+0x6c>
 801f69e:	2c2b      	cmp	r4, #43	; 0x2b
 801f6a0:	bf04      	itt	eq
 801f6a2:	782c      	ldrbeq	r4, [r5, #0]
 801f6a4:	1cb5      	addeq	r5, r6, #2
 801f6a6:	e7ca      	b.n	801f63e <_strtol_l.constprop.0+0x3a>
 801f6a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f6ac:	f1bc 0f19 	cmp.w	ip, #25
 801f6b0:	d801      	bhi.n	801f6b6 <_strtol_l.constprop.0+0xb2>
 801f6b2:	3c37      	subs	r4, #55	; 0x37
 801f6b4:	e7e2      	b.n	801f67c <_strtol_l.constprop.0+0x78>
 801f6b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f6ba:	f1bc 0f19 	cmp.w	ip, #25
 801f6be:	d804      	bhi.n	801f6ca <_strtol_l.constprop.0+0xc6>
 801f6c0:	3c57      	subs	r4, #87	; 0x57
 801f6c2:	e7db      	b.n	801f67c <_strtol_l.constprop.0+0x78>
 801f6c4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 801f6c8:	e7e6      	b.n	801f698 <_strtol_l.constprop.0+0x94>
 801f6ca:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801f6ce:	d105      	bne.n	801f6dc <_strtol_l.constprop.0+0xd8>
 801f6d0:	2322      	movs	r3, #34	; 0x22
 801f6d2:	6003      	str	r3, [r0, #0]
 801f6d4:	4646      	mov	r6, r8
 801f6d6:	b942      	cbnz	r2, 801f6ea <_strtol_l.constprop.0+0xe6>
 801f6d8:	4630      	mov	r0, r6
 801f6da:	e79e      	b.n	801f61a <_strtol_l.constprop.0+0x16>
 801f6dc:	b107      	cbz	r7, 801f6e0 <_strtol_l.constprop.0+0xdc>
 801f6de:	4276      	negs	r6, r6
 801f6e0:	2a00      	cmp	r2, #0
 801f6e2:	d0f9      	beq.n	801f6d8 <_strtol_l.constprop.0+0xd4>
 801f6e4:	f1be 0f00 	cmp.w	lr, #0
 801f6e8:	d000      	beq.n	801f6ec <_strtol_l.constprop.0+0xe8>
 801f6ea:	1e69      	subs	r1, r5, #1
 801f6ec:	6011      	str	r1, [r2, #0]
 801f6ee:	e7f3      	b.n	801f6d8 <_strtol_l.constprop.0+0xd4>
 801f6f0:	2430      	movs	r4, #48	; 0x30
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d1b1      	bne.n	801f65a <_strtol_l.constprop.0+0x56>
 801f6f6:	2308      	movs	r3, #8
 801f6f8:	e7af      	b.n	801f65a <_strtol_l.constprop.0+0x56>
 801f6fa:	2c30      	cmp	r4, #48	; 0x30
 801f6fc:	d0a5      	beq.n	801f64a <_strtol_l.constprop.0+0x46>
 801f6fe:	230a      	movs	r3, #10
 801f700:	e7ab      	b.n	801f65a <_strtol_l.constprop.0+0x56>
 801f702:	bf00      	nop
 801f704:	08025364 	.word	0x08025364

0801f708 <strtol>:
 801f708:	4613      	mov	r3, r2
 801f70a:	460a      	mov	r2, r1
 801f70c:	4601      	mov	r1, r0
 801f70e:	4802      	ldr	r0, [pc, #8]	; (801f718 <strtol+0x10>)
 801f710:	6800      	ldr	r0, [r0, #0]
 801f712:	f7ff bf77 	b.w	801f604 <_strtol_l.constprop.0>
 801f716:	bf00      	nop
 801f718:	2000008c 	.word	0x2000008c

0801f71c <std>:
 801f71c:	2300      	movs	r3, #0
 801f71e:	b510      	push	{r4, lr}
 801f720:	4604      	mov	r4, r0
 801f722:	e9c0 3300 	strd	r3, r3, [r0]
 801f726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f72a:	6083      	str	r3, [r0, #8]
 801f72c:	8181      	strh	r1, [r0, #12]
 801f72e:	6643      	str	r3, [r0, #100]	; 0x64
 801f730:	81c2      	strh	r2, [r0, #14]
 801f732:	6183      	str	r3, [r0, #24]
 801f734:	4619      	mov	r1, r3
 801f736:	2208      	movs	r2, #8
 801f738:	305c      	adds	r0, #92	; 0x5c
 801f73a:	f000 fa19 	bl	801fb70 <memset>
 801f73e:	4b0d      	ldr	r3, [pc, #52]	; (801f774 <std+0x58>)
 801f740:	6263      	str	r3, [r4, #36]	; 0x24
 801f742:	4b0d      	ldr	r3, [pc, #52]	; (801f778 <std+0x5c>)
 801f744:	62a3      	str	r3, [r4, #40]	; 0x28
 801f746:	4b0d      	ldr	r3, [pc, #52]	; (801f77c <std+0x60>)
 801f748:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f74a:	4b0d      	ldr	r3, [pc, #52]	; (801f780 <std+0x64>)
 801f74c:	6323      	str	r3, [r4, #48]	; 0x30
 801f74e:	4b0d      	ldr	r3, [pc, #52]	; (801f784 <std+0x68>)
 801f750:	6224      	str	r4, [r4, #32]
 801f752:	429c      	cmp	r4, r3
 801f754:	d006      	beq.n	801f764 <std+0x48>
 801f756:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801f75a:	4294      	cmp	r4, r2
 801f75c:	d002      	beq.n	801f764 <std+0x48>
 801f75e:	33d0      	adds	r3, #208	; 0xd0
 801f760:	429c      	cmp	r4, r3
 801f762:	d105      	bne.n	801f770 <std+0x54>
 801f764:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f76c:	f000 bb0c 	b.w	801fd88 <__retarget_lock_init_recursive>
 801f770:	bd10      	pop	{r4, pc}
 801f772:	bf00      	nop
 801f774:	0801f9a1 	.word	0x0801f9a1
 801f778:	0801f9c3 	.word	0x0801f9c3
 801f77c:	0801f9fb 	.word	0x0801f9fb
 801f780:	0801fa1f 	.word	0x0801fa1f
 801f784:	20010808 	.word	0x20010808

0801f788 <stdio_exit_handler>:
 801f788:	4a02      	ldr	r2, [pc, #8]	; (801f794 <stdio_exit_handler+0xc>)
 801f78a:	4903      	ldr	r1, [pc, #12]	; (801f798 <stdio_exit_handler+0x10>)
 801f78c:	4803      	ldr	r0, [pc, #12]	; (801f79c <stdio_exit_handler+0x14>)
 801f78e:	f000 b87b 	b.w	801f888 <_fwalk_sglue>
 801f792:	bf00      	nop
 801f794:	20000034 	.word	0x20000034
 801f798:	08020505 	.word	0x08020505
 801f79c:	20000040 	.word	0x20000040

0801f7a0 <cleanup_stdio>:
 801f7a0:	6841      	ldr	r1, [r0, #4]
 801f7a2:	4b0c      	ldr	r3, [pc, #48]	; (801f7d4 <cleanup_stdio+0x34>)
 801f7a4:	4299      	cmp	r1, r3
 801f7a6:	b510      	push	{r4, lr}
 801f7a8:	4604      	mov	r4, r0
 801f7aa:	d001      	beq.n	801f7b0 <cleanup_stdio+0x10>
 801f7ac:	f000 feaa 	bl	8020504 <_fflush_r>
 801f7b0:	68a1      	ldr	r1, [r4, #8]
 801f7b2:	4b09      	ldr	r3, [pc, #36]	; (801f7d8 <cleanup_stdio+0x38>)
 801f7b4:	4299      	cmp	r1, r3
 801f7b6:	d002      	beq.n	801f7be <cleanup_stdio+0x1e>
 801f7b8:	4620      	mov	r0, r4
 801f7ba:	f000 fea3 	bl	8020504 <_fflush_r>
 801f7be:	68e1      	ldr	r1, [r4, #12]
 801f7c0:	4b06      	ldr	r3, [pc, #24]	; (801f7dc <cleanup_stdio+0x3c>)
 801f7c2:	4299      	cmp	r1, r3
 801f7c4:	d004      	beq.n	801f7d0 <cleanup_stdio+0x30>
 801f7c6:	4620      	mov	r0, r4
 801f7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f7cc:	f000 be9a 	b.w	8020504 <_fflush_r>
 801f7d0:	bd10      	pop	{r4, pc}
 801f7d2:	bf00      	nop
 801f7d4:	20010808 	.word	0x20010808
 801f7d8:	20010870 	.word	0x20010870
 801f7dc:	200108d8 	.word	0x200108d8

0801f7e0 <global_stdio_init.part.0>:
 801f7e0:	b510      	push	{r4, lr}
 801f7e2:	4b0b      	ldr	r3, [pc, #44]	; (801f810 <global_stdio_init.part.0+0x30>)
 801f7e4:	4c0b      	ldr	r4, [pc, #44]	; (801f814 <global_stdio_init.part.0+0x34>)
 801f7e6:	4a0c      	ldr	r2, [pc, #48]	; (801f818 <global_stdio_init.part.0+0x38>)
 801f7e8:	601a      	str	r2, [r3, #0]
 801f7ea:	4620      	mov	r0, r4
 801f7ec:	2200      	movs	r2, #0
 801f7ee:	2104      	movs	r1, #4
 801f7f0:	f7ff ff94 	bl	801f71c <std>
 801f7f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801f7f8:	2201      	movs	r2, #1
 801f7fa:	2109      	movs	r1, #9
 801f7fc:	f7ff ff8e 	bl	801f71c <std>
 801f800:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801f804:	2202      	movs	r2, #2
 801f806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f80a:	2112      	movs	r1, #18
 801f80c:	f7ff bf86 	b.w	801f71c <std>
 801f810:	20010940 	.word	0x20010940
 801f814:	20010808 	.word	0x20010808
 801f818:	0801f789 	.word	0x0801f789

0801f81c <__sfp_lock_acquire>:
 801f81c:	4801      	ldr	r0, [pc, #4]	; (801f824 <__sfp_lock_acquire+0x8>)
 801f81e:	f000 bab4 	b.w	801fd8a <__retarget_lock_acquire_recursive>
 801f822:	bf00      	nop
 801f824:	20010949 	.word	0x20010949

0801f828 <__sfp_lock_release>:
 801f828:	4801      	ldr	r0, [pc, #4]	; (801f830 <__sfp_lock_release+0x8>)
 801f82a:	f000 baaf 	b.w	801fd8c <__retarget_lock_release_recursive>
 801f82e:	bf00      	nop
 801f830:	20010949 	.word	0x20010949

0801f834 <__sinit>:
 801f834:	b510      	push	{r4, lr}
 801f836:	4604      	mov	r4, r0
 801f838:	f7ff fff0 	bl	801f81c <__sfp_lock_acquire>
 801f83c:	6a23      	ldr	r3, [r4, #32]
 801f83e:	b11b      	cbz	r3, 801f848 <__sinit+0x14>
 801f840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f844:	f7ff bff0 	b.w	801f828 <__sfp_lock_release>
 801f848:	4b04      	ldr	r3, [pc, #16]	; (801f85c <__sinit+0x28>)
 801f84a:	6223      	str	r3, [r4, #32]
 801f84c:	4b04      	ldr	r3, [pc, #16]	; (801f860 <__sinit+0x2c>)
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	2b00      	cmp	r3, #0
 801f852:	d1f5      	bne.n	801f840 <__sinit+0xc>
 801f854:	f7ff ffc4 	bl	801f7e0 <global_stdio_init.part.0>
 801f858:	e7f2      	b.n	801f840 <__sinit+0xc>
 801f85a:	bf00      	nop
 801f85c:	0801f7a1 	.word	0x0801f7a1
 801f860:	20010940 	.word	0x20010940

0801f864 <fiprintf>:
 801f864:	b40e      	push	{r1, r2, r3}
 801f866:	b503      	push	{r0, r1, lr}
 801f868:	4601      	mov	r1, r0
 801f86a:	ab03      	add	r3, sp, #12
 801f86c:	4805      	ldr	r0, [pc, #20]	; (801f884 <fiprintf+0x20>)
 801f86e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f872:	6800      	ldr	r0, [r0, #0]
 801f874:	9301      	str	r3, [sp, #4]
 801f876:	f000 fb15 	bl	801fea4 <_vfiprintf_r>
 801f87a:	b002      	add	sp, #8
 801f87c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f880:	b003      	add	sp, #12
 801f882:	4770      	bx	lr
 801f884:	2000008c 	.word	0x2000008c

0801f888 <_fwalk_sglue>:
 801f888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f88c:	4607      	mov	r7, r0
 801f88e:	4688      	mov	r8, r1
 801f890:	4614      	mov	r4, r2
 801f892:	2600      	movs	r6, #0
 801f894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f898:	f1b9 0901 	subs.w	r9, r9, #1
 801f89c:	d505      	bpl.n	801f8aa <_fwalk_sglue+0x22>
 801f89e:	6824      	ldr	r4, [r4, #0]
 801f8a0:	2c00      	cmp	r4, #0
 801f8a2:	d1f7      	bne.n	801f894 <_fwalk_sglue+0xc>
 801f8a4:	4630      	mov	r0, r6
 801f8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f8aa:	89ab      	ldrh	r3, [r5, #12]
 801f8ac:	2b01      	cmp	r3, #1
 801f8ae:	d907      	bls.n	801f8c0 <_fwalk_sglue+0x38>
 801f8b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f8b4:	3301      	adds	r3, #1
 801f8b6:	d003      	beq.n	801f8c0 <_fwalk_sglue+0x38>
 801f8b8:	4629      	mov	r1, r5
 801f8ba:	4638      	mov	r0, r7
 801f8bc:	47c0      	blx	r8
 801f8be:	4306      	orrs	r6, r0
 801f8c0:	3568      	adds	r5, #104	; 0x68
 801f8c2:	e7e9      	b.n	801f898 <_fwalk_sglue+0x10>

0801f8c4 <iprintf>:
 801f8c4:	b40f      	push	{r0, r1, r2, r3}
 801f8c6:	b507      	push	{r0, r1, r2, lr}
 801f8c8:	4906      	ldr	r1, [pc, #24]	; (801f8e4 <iprintf+0x20>)
 801f8ca:	ab04      	add	r3, sp, #16
 801f8cc:	6808      	ldr	r0, [r1, #0]
 801f8ce:	f853 2b04 	ldr.w	r2, [r3], #4
 801f8d2:	6881      	ldr	r1, [r0, #8]
 801f8d4:	9301      	str	r3, [sp, #4]
 801f8d6:	f000 fae5 	bl	801fea4 <_vfiprintf_r>
 801f8da:	b003      	add	sp, #12
 801f8dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801f8e0:	b004      	add	sp, #16
 801f8e2:	4770      	bx	lr
 801f8e4:	2000008c 	.word	0x2000008c

0801f8e8 <_puts_r>:
 801f8e8:	6a03      	ldr	r3, [r0, #32]
 801f8ea:	b570      	push	{r4, r5, r6, lr}
 801f8ec:	6884      	ldr	r4, [r0, #8]
 801f8ee:	4605      	mov	r5, r0
 801f8f0:	460e      	mov	r6, r1
 801f8f2:	b90b      	cbnz	r3, 801f8f8 <_puts_r+0x10>
 801f8f4:	f7ff ff9e 	bl	801f834 <__sinit>
 801f8f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f8fa:	07db      	lsls	r3, r3, #31
 801f8fc:	d405      	bmi.n	801f90a <_puts_r+0x22>
 801f8fe:	89a3      	ldrh	r3, [r4, #12]
 801f900:	0598      	lsls	r0, r3, #22
 801f902:	d402      	bmi.n	801f90a <_puts_r+0x22>
 801f904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f906:	f000 fa40 	bl	801fd8a <__retarget_lock_acquire_recursive>
 801f90a:	89a3      	ldrh	r3, [r4, #12]
 801f90c:	0719      	lsls	r1, r3, #28
 801f90e:	d513      	bpl.n	801f938 <_puts_r+0x50>
 801f910:	6923      	ldr	r3, [r4, #16]
 801f912:	b18b      	cbz	r3, 801f938 <_puts_r+0x50>
 801f914:	3e01      	subs	r6, #1
 801f916:	68a3      	ldr	r3, [r4, #8]
 801f918:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f91c:	3b01      	subs	r3, #1
 801f91e:	60a3      	str	r3, [r4, #8]
 801f920:	b9e9      	cbnz	r1, 801f95e <_puts_r+0x76>
 801f922:	2b00      	cmp	r3, #0
 801f924:	da2e      	bge.n	801f984 <_puts_r+0x9c>
 801f926:	4622      	mov	r2, r4
 801f928:	210a      	movs	r1, #10
 801f92a:	4628      	mov	r0, r5
 801f92c:	f000 f87b 	bl	801fa26 <__swbuf_r>
 801f930:	3001      	adds	r0, #1
 801f932:	d007      	beq.n	801f944 <_puts_r+0x5c>
 801f934:	250a      	movs	r5, #10
 801f936:	e007      	b.n	801f948 <_puts_r+0x60>
 801f938:	4621      	mov	r1, r4
 801f93a:	4628      	mov	r0, r5
 801f93c:	f000 f8b0 	bl	801faa0 <__swsetup_r>
 801f940:	2800      	cmp	r0, #0
 801f942:	d0e7      	beq.n	801f914 <_puts_r+0x2c>
 801f944:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801f948:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f94a:	07da      	lsls	r2, r3, #31
 801f94c:	d405      	bmi.n	801f95a <_puts_r+0x72>
 801f94e:	89a3      	ldrh	r3, [r4, #12]
 801f950:	059b      	lsls	r3, r3, #22
 801f952:	d402      	bmi.n	801f95a <_puts_r+0x72>
 801f954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f956:	f000 fa19 	bl	801fd8c <__retarget_lock_release_recursive>
 801f95a:	4628      	mov	r0, r5
 801f95c:	bd70      	pop	{r4, r5, r6, pc}
 801f95e:	2b00      	cmp	r3, #0
 801f960:	da04      	bge.n	801f96c <_puts_r+0x84>
 801f962:	69a2      	ldr	r2, [r4, #24]
 801f964:	429a      	cmp	r2, r3
 801f966:	dc06      	bgt.n	801f976 <_puts_r+0x8e>
 801f968:	290a      	cmp	r1, #10
 801f96a:	d004      	beq.n	801f976 <_puts_r+0x8e>
 801f96c:	6823      	ldr	r3, [r4, #0]
 801f96e:	1c5a      	adds	r2, r3, #1
 801f970:	6022      	str	r2, [r4, #0]
 801f972:	7019      	strb	r1, [r3, #0]
 801f974:	e7cf      	b.n	801f916 <_puts_r+0x2e>
 801f976:	4622      	mov	r2, r4
 801f978:	4628      	mov	r0, r5
 801f97a:	f000 f854 	bl	801fa26 <__swbuf_r>
 801f97e:	3001      	adds	r0, #1
 801f980:	d1c9      	bne.n	801f916 <_puts_r+0x2e>
 801f982:	e7df      	b.n	801f944 <_puts_r+0x5c>
 801f984:	6823      	ldr	r3, [r4, #0]
 801f986:	250a      	movs	r5, #10
 801f988:	1c5a      	adds	r2, r3, #1
 801f98a:	6022      	str	r2, [r4, #0]
 801f98c:	701d      	strb	r5, [r3, #0]
 801f98e:	e7db      	b.n	801f948 <_puts_r+0x60>

0801f990 <puts>:
 801f990:	4b02      	ldr	r3, [pc, #8]	; (801f99c <puts+0xc>)
 801f992:	4601      	mov	r1, r0
 801f994:	6818      	ldr	r0, [r3, #0]
 801f996:	f7ff bfa7 	b.w	801f8e8 <_puts_r>
 801f99a:	bf00      	nop
 801f99c:	2000008c 	.word	0x2000008c

0801f9a0 <__sread>:
 801f9a0:	b510      	push	{r4, lr}
 801f9a2:	460c      	mov	r4, r1
 801f9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9a8:	f000 f990 	bl	801fccc <_read_r>
 801f9ac:	2800      	cmp	r0, #0
 801f9ae:	bfab      	itete	ge
 801f9b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f9b2:	89a3      	ldrhlt	r3, [r4, #12]
 801f9b4:	181b      	addge	r3, r3, r0
 801f9b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f9ba:	bfac      	ite	ge
 801f9bc:	6563      	strge	r3, [r4, #84]	; 0x54
 801f9be:	81a3      	strhlt	r3, [r4, #12]
 801f9c0:	bd10      	pop	{r4, pc}

0801f9c2 <__swrite>:
 801f9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9c6:	461f      	mov	r7, r3
 801f9c8:	898b      	ldrh	r3, [r1, #12]
 801f9ca:	05db      	lsls	r3, r3, #23
 801f9cc:	4605      	mov	r5, r0
 801f9ce:	460c      	mov	r4, r1
 801f9d0:	4616      	mov	r6, r2
 801f9d2:	d505      	bpl.n	801f9e0 <__swrite+0x1e>
 801f9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9d8:	2302      	movs	r3, #2
 801f9da:	2200      	movs	r2, #0
 801f9dc:	f000 f964 	bl	801fca8 <_lseek_r>
 801f9e0:	89a3      	ldrh	r3, [r4, #12]
 801f9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f9ea:	81a3      	strh	r3, [r4, #12]
 801f9ec:	4632      	mov	r2, r6
 801f9ee:	463b      	mov	r3, r7
 801f9f0:	4628      	mov	r0, r5
 801f9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f9f6:	f000 b98b 	b.w	801fd10 <_write_r>

0801f9fa <__sseek>:
 801f9fa:	b510      	push	{r4, lr}
 801f9fc:	460c      	mov	r4, r1
 801f9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa02:	f000 f951 	bl	801fca8 <_lseek_r>
 801fa06:	1c43      	adds	r3, r0, #1
 801fa08:	89a3      	ldrh	r3, [r4, #12]
 801fa0a:	bf15      	itete	ne
 801fa0c:	6560      	strne	r0, [r4, #84]	; 0x54
 801fa0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fa12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fa16:	81a3      	strheq	r3, [r4, #12]
 801fa18:	bf18      	it	ne
 801fa1a:	81a3      	strhne	r3, [r4, #12]
 801fa1c:	bd10      	pop	{r4, pc}

0801fa1e <__sclose>:
 801fa1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa22:	f000 b8db 	b.w	801fbdc <_close_r>

0801fa26 <__swbuf_r>:
 801fa26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa28:	460e      	mov	r6, r1
 801fa2a:	4614      	mov	r4, r2
 801fa2c:	4605      	mov	r5, r0
 801fa2e:	b118      	cbz	r0, 801fa38 <__swbuf_r+0x12>
 801fa30:	6a03      	ldr	r3, [r0, #32]
 801fa32:	b90b      	cbnz	r3, 801fa38 <__swbuf_r+0x12>
 801fa34:	f7ff fefe 	bl	801f834 <__sinit>
 801fa38:	69a3      	ldr	r3, [r4, #24]
 801fa3a:	60a3      	str	r3, [r4, #8]
 801fa3c:	89a3      	ldrh	r3, [r4, #12]
 801fa3e:	071a      	lsls	r2, r3, #28
 801fa40:	d525      	bpl.n	801fa8e <__swbuf_r+0x68>
 801fa42:	6923      	ldr	r3, [r4, #16]
 801fa44:	b31b      	cbz	r3, 801fa8e <__swbuf_r+0x68>
 801fa46:	6823      	ldr	r3, [r4, #0]
 801fa48:	6922      	ldr	r2, [r4, #16]
 801fa4a:	1a98      	subs	r0, r3, r2
 801fa4c:	6963      	ldr	r3, [r4, #20]
 801fa4e:	b2f6      	uxtb	r6, r6
 801fa50:	4283      	cmp	r3, r0
 801fa52:	4637      	mov	r7, r6
 801fa54:	dc04      	bgt.n	801fa60 <__swbuf_r+0x3a>
 801fa56:	4621      	mov	r1, r4
 801fa58:	4628      	mov	r0, r5
 801fa5a:	f000 fd53 	bl	8020504 <_fflush_r>
 801fa5e:	b9e0      	cbnz	r0, 801fa9a <__swbuf_r+0x74>
 801fa60:	68a3      	ldr	r3, [r4, #8]
 801fa62:	3b01      	subs	r3, #1
 801fa64:	60a3      	str	r3, [r4, #8]
 801fa66:	6823      	ldr	r3, [r4, #0]
 801fa68:	1c5a      	adds	r2, r3, #1
 801fa6a:	6022      	str	r2, [r4, #0]
 801fa6c:	701e      	strb	r6, [r3, #0]
 801fa6e:	6962      	ldr	r2, [r4, #20]
 801fa70:	1c43      	adds	r3, r0, #1
 801fa72:	429a      	cmp	r2, r3
 801fa74:	d004      	beq.n	801fa80 <__swbuf_r+0x5a>
 801fa76:	89a3      	ldrh	r3, [r4, #12]
 801fa78:	07db      	lsls	r3, r3, #31
 801fa7a:	d506      	bpl.n	801fa8a <__swbuf_r+0x64>
 801fa7c:	2e0a      	cmp	r6, #10
 801fa7e:	d104      	bne.n	801fa8a <__swbuf_r+0x64>
 801fa80:	4621      	mov	r1, r4
 801fa82:	4628      	mov	r0, r5
 801fa84:	f000 fd3e 	bl	8020504 <_fflush_r>
 801fa88:	b938      	cbnz	r0, 801fa9a <__swbuf_r+0x74>
 801fa8a:	4638      	mov	r0, r7
 801fa8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa8e:	4621      	mov	r1, r4
 801fa90:	4628      	mov	r0, r5
 801fa92:	f000 f805 	bl	801faa0 <__swsetup_r>
 801fa96:	2800      	cmp	r0, #0
 801fa98:	d0d5      	beq.n	801fa46 <__swbuf_r+0x20>
 801fa9a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fa9e:	e7f4      	b.n	801fa8a <__swbuf_r+0x64>

0801faa0 <__swsetup_r>:
 801faa0:	b538      	push	{r3, r4, r5, lr}
 801faa2:	4b2a      	ldr	r3, [pc, #168]	; (801fb4c <__swsetup_r+0xac>)
 801faa4:	4605      	mov	r5, r0
 801faa6:	6818      	ldr	r0, [r3, #0]
 801faa8:	460c      	mov	r4, r1
 801faaa:	b118      	cbz	r0, 801fab4 <__swsetup_r+0x14>
 801faac:	6a03      	ldr	r3, [r0, #32]
 801faae:	b90b      	cbnz	r3, 801fab4 <__swsetup_r+0x14>
 801fab0:	f7ff fec0 	bl	801f834 <__sinit>
 801fab4:	89a3      	ldrh	r3, [r4, #12]
 801fab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801faba:	0718      	lsls	r0, r3, #28
 801fabc:	d422      	bmi.n	801fb04 <__swsetup_r+0x64>
 801fabe:	06d9      	lsls	r1, r3, #27
 801fac0:	d407      	bmi.n	801fad2 <__swsetup_r+0x32>
 801fac2:	2309      	movs	r3, #9
 801fac4:	602b      	str	r3, [r5, #0]
 801fac6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801faca:	81a3      	strh	r3, [r4, #12]
 801facc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fad0:	e034      	b.n	801fb3c <__swsetup_r+0x9c>
 801fad2:	0758      	lsls	r0, r3, #29
 801fad4:	d512      	bpl.n	801fafc <__swsetup_r+0x5c>
 801fad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fad8:	b141      	cbz	r1, 801faec <__swsetup_r+0x4c>
 801fada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fade:	4299      	cmp	r1, r3
 801fae0:	d002      	beq.n	801fae8 <__swsetup_r+0x48>
 801fae2:	4628      	mov	r0, r5
 801fae4:	f000 f968 	bl	801fdb8 <_free_r>
 801fae8:	2300      	movs	r3, #0
 801faea:	6363      	str	r3, [r4, #52]	; 0x34
 801faec:	89a3      	ldrh	r3, [r4, #12]
 801faee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801faf2:	81a3      	strh	r3, [r4, #12]
 801faf4:	2300      	movs	r3, #0
 801faf6:	6063      	str	r3, [r4, #4]
 801faf8:	6923      	ldr	r3, [r4, #16]
 801fafa:	6023      	str	r3, [r4, #0]
 801fafc:	89a3      	ldrh	r3, [r4, #12]
 801fafe:	f043 0308 	orr.w	r3, r3, #8
 801fb02:	81a3      	strh	r3, [r4, #12]
 801fb04:	6923      	ldr	r3, [r4, #16]
 801fb06:	b94b      	cbnz	r3, 801fb1c <__swsetup_r+0x7c>
 801fb08:	89a3      	ldrh	r3, [r4, #12]
 801fb0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fb0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fb12:	d003      	beq.n	801fb1c <__swsetup_r+0x7c>
 801fb14:	4621      	mov	r1, r4
 801fb16:	4628      	mov	r0, r5
 801fb18:	f000 fd42 	bl	80205a0 <__smakebuf_r>
 801fb1c:	89a0      	ldrh	r0, [r4, #12]
 801fb1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb22:	f010 0301 	ands.w	r3, r0, #1
 801fb26:	d00a      	beq.n	801fb3e <__swsetup_r+0x9e>
 801fb28:	2300      	movs	r3, #0
 801fb2a:	60a3      	str	r3, [r4, #8]
 801fb2c:	6963      	ldr	r3, [r4, #20]
 801fb2e:	425b      	negs	r3, r3
 801fb30:	61a3      	str	r3, [r4, #24]
 801fb32:	6923      	ldr	r3, [r4, #16]
 801fb34:	b943      	cbnz	r3, 801fb48 <__swsetup_r+0xa8>
 801fb36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fb3a:	d1c4      	bne.n	801fac6 <__swsetup_r+0x26>
 801fb3c:	bd38      	pop	{r3, r4, r5, pc}
 801fb3e:	0781      	lsls	r1, r0, #30
 801fb40:	bf58      	it	pl
 801fb42:	6963      	ldrpl	r3, [r4, #20]
 801fb44:	60a3      	str	r3, [r4, #8]
 801fb46:	e7f4      	b.n	801fb32 <__swsetup_r+0x92>
 801fb48:	2000      	movs	r0, #0
 801fb4a:	e7f7      	b.n	801fb3c <__swsetup_r+0x9c>
 801fb4c:	2000008c 	.word	0x2000008c

0801fb50 <memcmp>:
 801fb50:	b510      	push	{r4, lr}
 801fb52:	3901      	subs	r1, #1
 801fb54:	4402      	add	r2, r0
 801fb56:	4290      	cmp	r0, r2
 801fb58:	d101      	bne.n	801fb5e <memcmp+0xe>
 801fb5a:	2000      	movs	r0, #0
 801fb5c:	e005      	b.n	801fb6a <memcmp+0x1a>
 801fb5e:	7803      	ldrb	r3, [r0, #0]
 801fb60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fb64:	42a3      	cmp	r3, r4
 801fb66:	d001      	beq.n	801fb6c <memcmp+0x1c>
 801fb68:	1b18      	subs	r0, r3, r4
 801fb6a:	bd10      	pop	{r4, pc}
 801fb6c:	3001      	adds	r0, #1
 801fb6e:	e7f2      	b.n	801fb56 <memcmp+0x6>

0801fb70 <memset>:
 801fb70:	4402      	add	r2, r0
 801fb72:	4603      	mov	r3, r0
 801fb74:	4293      	cmp	r3, r2
 801fb76:	d100      	bne.n	801fb7a <memset+0xa>
 801fb78:	4770      	bx	lr
 801fb7a:	f803 1b01 	strb.w	r1, [r3], #1
 801fb7e:	e7f9      	b.n	801fb74 <memset+0x4>

0801fb80 <strchr>:
 801fb80:	b2c9      	uxtb	r1, r1
 801fb82:	4603      	mov	r3, r0
 801fb84:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fb88:	b11a      	cbz	r2, 801fb92 <strchr+0x12>
 801fb8a:	428a      	cmp	r2, r1
 801fb8c:	d1f9      	bne.n	801fb82 <strchr+0x2>
 801fb8e:	4618      	mov	r0, r3
 801fb90:	4770      	bx	lr
 801fb92:	2900      	cmp	r1, #0
 801fb94:	bf18      	it	ne
 801fb96:	2300      	movne	r3, #0
 801fb98:	e7f9      	b.n	801fb8e <strchr+0xe>

0801fb9a <strcspn>:
 801fb9a:	b570      	push	{r4, r5, r6, lr}
 801fb9c:	4603      	mov	r3, r0
 801fb9e:	461e      	mov	r6, r3
 801fba0:	f813 4b01 	ldrb.w	r4, [r3], #1
 801fba4:	b144      	cbz	r4, 801fbb8 <strcspn+0x1e>
 801fba6:	1e4a      	subs	r2, r1, #1
 801fba8:	e001      	b.n	801fbae <strcspn+0x14>
 801fbaa:	42a5      	cmp	r5, r4
 801fbac:	d004      	beq.n	801fbb8 <strcspn+0x1e>
 801fbae:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801fbb2:	2d00      	cmp	r5, #0
 801fbb4:	d1f9      	bne.n	801fbaa <strcspn+0x10>
 801fbb6:	e7f2      	b.n	801fb9e <strcspn+0x4>
 801fbb8:	1a30      	subs	r0, r6, r0
 801fbba:	bd70      	pop	{r4, r5, r6, pc}

0801fbbc <strspn>:
 801fbbc:	b570      	push	{r4, r5, r6, lr}
 801fbbe:	4603      	mov	r3, r0
 801fbc0:	461e      	mov	r6, r3
 801fbc2:	f813 4b01 	ldrb.w	r4, [r3], #1
 801fbc6:	b13c      	cbz	r4, 801fbd8 <strspn+0x1c>
 801fbc8:	1e4a      	subs	r2, r1, #1
 801fbca:	e001      	b.n	801fbd0 <strspn+0x14>
 801fbcc:	42a5      	cmp	r5, r4
 801fbce:	d0f7      	beq.n	801fbc0 <strspn+0x4>
 801fbd0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801fbd4:	2d00      	cmp	r5, #0
 801fbd6:	d1f9      	bne.n	801fbcc <strspn+0x10>
 801fbd8:	1a30      	subs	r0, r6, r0
 801fbda:	bd70      	pop	{r4, r5, r6, pc}

0801fbdc <_close_r>:
 801fbdc:	b538      	push	{r3, r4, r5, lr}
 801fbde:	4d06      	ldr	r5, [pc, #24]	; (801fbf8 <_close_r+0x1c>)
 801fbe0:	2300      	movs	r3, #0
 801fbe2:	4604      	mov	r4, r0
 801fbe4:	4608      	mov	r0, r1
 801fbe6:	602b      	str	r3, [r5, #0]
 801fbe8:	f7e1 fc3b 	bl	8001462 <_close>
 801fbec:	1c43      	adds	r3, r0, #1
 801fbee:	d102      	bne.n	801fbf6 <_close_r+0x1a>
 801fbf0:	682b      	ldr	r3, [r5, #0]
 801fbf2:	b103      	cbz	r3, 801fbf6 <_close_r+0x1a>
 801fbf4:	6023      	str	r3, [r4, #0]
 801fbf6:	bd38      	pop	{r3, r4, r5, pc}
 801fbf8:	20010944 	.word	0x20010944

0801fbfc <_reclaim_reent>:
 801fbfc:	4b29      	ldr	r3, [pc, #164]	; (801fca4 <_reclaim_reent+0xa8>)
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	4283      	cmp	r3, r0
 801fc02:	b570      	push	{r4, r5, r6, lr}
 801fc04:	4604      	mov	r4, r0
 801fc06:	d04b      	beq.n	801fca0 <_reclaim_reent+0xa4>
 801fc08:	69c3      	ldr	r3, [r0, #28]
 801fc0a:	b143      	cbz	r3, 801fc1e <_reclaim_reent+0x22>
 801fc0c:	68db      	ldr	r3, [r3, #12]
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	d144      	bne.n	801fc9c <_reclaim_reent+0xa0>
 801fc12:	69e3      	ldr	r3, [r4, #28]
 801fc14:	6819      	ldr	r1, [r3, #0]
 801fc16:	b111      	cbz	r1, 801fc1e <_reclaim_reent+0x22>
 801fc18:	4620      	mov	r0, r4
 801fc1a:	f000 f8cd 	bl	801fdb8 <_free_r>
 801fc1e:	6961      	ldr	r1, [r4, #20]
 801fc20:	b111      	cbz	r1, 801fc28 <_reclaim_reent+0x2c>
 801fc22:	4620      	mov	r0, r4
 801fc24:	f000 f8c8 	bl	801fdb8 <_free_r>
 801fc28:	69e1      	ldr	r1, [r4, #28]
 801fc2a:	b111      	cbz	r1, 801fc32 <_reclaim_reent+0x36>
 801fc2c:	4620      	mov	r0, r4
 801fc2e:	f000 f8c3 	bl	801fdb8 <_free_r>
 801fc32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801fc34:	b111      	cbz	r1, 801fc3c <_reclaim_reent+0x40>
 801fc36:	4620      	mov	r0, r4
 801fc38:	f000 f8be 	bl	801fdb8 <_free_r>
 801fc3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc3e:	b111      	cbz	r1, 801fc46 <_reclaim_reent+0x4a>
 801fc40:	4620      	mov	r0, r4
 801fc42:	f000 f8b9 	bl	801fdb8 <_free_r>
 801fc46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fc48:	b111      	cbz	r1, 801fc50 <_reclaim_reent+0x54>
 801fc4a:	4620      	mov	r0, r4
 801fc4c:	f000 f8b4 	bl	801fdb8 <_free_r>
 801fc50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fc52:	b111      	cbz	r1, 801fc5a <_reclaim_reent+0x5e>
 801fc54:	4620      	mov	r0, r4
 801fc56:	f000 f8af 	bl	801fdb8 <_free_r>
 801fc5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801fc5c:	b111      	cbz	r1, 801fc64 <_reclaim_reent+0x68>
 801fc5e:	4620      	mov	r0, r4
 801fc60:	f000 f8aa 	bl	801fdb8 <_free_r>
 801fc64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801fc66:	b111      	cbz	r1, 801fc6e <_reclaim_reent+0x72>
 801fc68:	4620      	mov	r0, r4
 801fc6a:	f000 f8a5 	bl	801fdb8 <_free_r>
 801fc6e:	6a23      	ldr	r3, [r4, #32]
 801fc70:	b1b3      	cbz	r3, 801fca0 <_reclaim_reent+0xa4>
 801fc72:	4620      	mov	r0, r4
 801fc74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fc78:	4718      	bx	r3
 801fc7a:	5949      	ldr	r1, [r1, r5]
 801fc7c:	b941      	cbnz	r1, 801fc90 <_reclaim_reent+0x94>
 801fc7e:	3504      	adds	r5, #4
 801fc80:	69e3      	ldr	r3, [r4, #28]
 801fc82:	2d80      	cmp	r5, #128	; 0x80
 801fc84:	68d9      	ldr	r1, [r3, #12]
 801fc86:	d1f8      	bne.n	801fc7a <_reclaim_reent+0x7e>
 801fc88:	4620      	mov	r0, r4
 801fc8a:	f000 f895 	bl	801fdb8 <_free_r>
 801fc8e:	e7c0      	b.n	801fc12 <_reclaim_reent+0x16>
 801fc90:	680e      	ldr	r6, [r1, #0]
 801fc92:	4620      	mov	r0, r4
 801fc94:	f000 f890 	bl	801fdb8 <_free_r>
 801fc98:	4631      	mov	r1, r6
 801fc9a:	e7ef      	b.n	801fc7c <_reclaim_reent+0x80>
 801fc9c:	2500      	movs	r5, #0
 801fc9e:	e7ef      	b.n	801fc80 <_reclaim_reent+0x84>
 801fca0:	bd70      	pop	{r4, r5, r6, pc}
 801fca2:	bf00      	nop
 801fca4:	2000008c 	.word	0x2000008c

0801fca8 <_lseek_r>:
 801fca8:	b538      	push	{r3, r4, r5, lr}
 801fcaa:	4d07      	ldr	r5, [pc, #28]	; (801fcc8 <_lseek_r+0x20>)
 801fcac:	4604      	mov	r4, r0
 801fcae:	4608      	mov	r0, r1
 801fcb0:	4611      	mov	r1, r2
 801fcb2:	2200      	movs	r2, #0
 801fcb4:	602a      	str	r2, [r5, #0]
 801fcb6:	461a      	mov	r2, r3
 801fcb8:	f7e1 fbfa 	bl	80014b0 <_lseek>
 801fcbc:	1c43      	adds	r3, r0, #1
 801fcbe:	d102      	bne.n	801fcc6 <_lseek_r+0x1e>
 801fcc0:	682b      	ldr	r3, [r5, #0]
 801fcc2:	b103      	cbz	r3, 801fcc6 <_lseek_r+0x1e>
 801fcc4:	6023      	str	r3, [r4, #0]
 801fcc6:	bd38      	pop	{r3, r4, r5, pc}
 801fcc8:	20010944 	.word	0x20010944

0801fccc <_read_r>:
 801fccc:	b538      	push	{r3, r4, r5, lr}
 801fcce:	4d07      	ldr	r5, [pc, #28]	; (801fcec <_read_r+0x20>)
 801fcd0:	4604      	mov	r4, r0
 801fcd2:	4608      	mov	r0, r1
 801fcd4:	4611      	mov	r1, r2
 801fcd6:	2200      	movs	r2, #0
 801fcd8:	602a      	str	r2, [r5, #0]
 801fcda:	461a      	mov	r2, r3
 801fcdc:	f7e1 fb88 	bl	80013f0 <_read>
 801fce0:	1c43      	adds	r3, r0, #1
 801fce2:	d102      	bne.n	801fcea <_read_r+0x1e>
 801fce4:	682b      	ldr	r3, [r5, #0]
 801fce6:	b103      	cbz	r3, 801fcea <_read_r+0x1e>
 801fce8:	6023      	str	r3, [r4, #0]
 801fcea:	bd38      	pop	{r3, r4, r5, pc}
 801fcec:	20010944 	.word	0x20010944

0801fcf0 <_sbrk_r>:
 801fcf0:	b538      	push	{r3, r4, r5, lr}
 801fcf2:	4d06      	ldr	r5, [pc, #24]	; (801fd0c <_sbrk_r+0x1c>)
 801fcf4:	2300      	movs	r3, #0
 801fcf6:	4604      	mov	r4, r0
 801fcf8:	4608      	mov	r0, r1
 801fcfa:	602b      	str	r3, [r5, #0]
 801fcfc:	f7e1 fbe6 	bl	80014cc <_sbrk>
 801fd00:	1c43      	adds	r3, r0, #1
 801fd02:	d102      	bne.n	801fd0a <_sbrk_r+0x1a>
 801fd04:	682b      	ldr	r3, [r5, #0]
 801fd06:	b103      	cbz	r3, 801fd0a <_sbrk_r+0x1a>
 801fd08:	6023      	str	r3, [r4, #0]
 801fd0a:	bd38      	pop	{r3, r4, r5, pc}
 801fd0c:	20010944 	.word	0x20010944

0801fd10 <_write_r>:
 801fd10:	b538      	push	{r3, r4, r5, lr}
 801fd12:	4d07      	ldr	r5, [pc, #28]	; (801fd30 <_write_r+0x20>)
 801fd14:	4604      	mov	r4, r0
 801fd16:	4608      	mov	r0, r1
 801fd18:	4611      	mov	r1, r2
 801fd1a:	2200      	movs	r2, #0
 801fd1c:	602a      	str	r2, [r5, #0]
 801fd1e:	461a      	mov	r2, r3
 801fd20:	f7e1 fb83 	bl	800142a <_write>
 801fd24:	1c43      	adds	r3, r0, #1
 801fd26:	d102      	bne.n	801fd2e <_write_r+0x1e>
 801fd28:	682b      	ldr	r3, [r5, #0]
 801fd2a:	b103      	cbz	r3, 801fd2e <_write_r+0x1e>
 801fd2c:	6023      	str	r3, [r4, #0]
 801fd2e:	bd38      	pop	{r3, r4, r5, pc}
 801fd30:	20010944 	.word	0x20010944

0801fd34 <__errno>:
 801fd34:	4b01      	ldr	r3, [pc, #4]	; (801fd3c <__errno+0x8>)
 801fd36:	6818      	ldr	r0, [r3, #0]
 801fd38:	4770      	bx	lr
 801fd3a:	bf00      	nop
 801fd3c:	2000008c 	.word	0x2000008c

0801fd40 <__libc_init_array>:
 801fd40:	b570      	push	{r4, r5, r6, lr}
 801fd42:	4d0d      	ldr	r5, [pc, #52]	; (801fd78 <__libc_init_array+0x38>)
 801fd44:	4c0d      	ldr	r4, [pc, #52]	; (801fd7c <__libc_init_array+0x3c>)
 801fd46:	1b64      	subs	r4, r4, r5
 801fd48:	10a4      	asrs	r4, r4, #2
 801fd4a:	2600      	movs	r6, #0
 801fd4c:	42a6      	cmp	r6, r4
 801fd4e:	d109      	bne.n	801fd64 <__libc_init_array+0x24>
 801fd50:	4d0b      	ldr	r5, [pc, #44]	; (801fd80 <__libc_init_array+0x40>)
 801fd52:	4c0c      	ldr	r4, [pc, #48]	; (801fd84 <__libc_init_array+0x44>)
 801fd54:	f000 fcc6 	bl	80206e4 <_init>
 801fd58:	1b64      	subs	r4, r4, r5
 801fd5a:	10a4      	asrs	r4, r4, #2
 801fd5c:	2600      	movs	r6, #0
 801fd5e:	42a6      	cmp	r6, r4
 801fd60:	d105      	bne.n	801fd6e <__libc_init_array+0x2e>
 801fd62:	bd70      	pop	{r4, r5, r6, pc}
 801fd64:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd68:	4798      	blx	r3
 801fd6a:	3601      	adds	r6, #1
 801fd6c:	e7ee      	b.n	801fd4c <__libc_init_array+0xc>
 801fd6e:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd72:	4798      	blx	r3
 801fd74:	3601      	adds	r6, #1
 801fd76:	e7f2      	b.n	801fd5e <__libc_init_array+0x1e>
 801fd78:	080254a0 	.word	0x080254a0
 801fd7c:	080254a0 	.word	0x080254a0
 801fd80:	080254a0 	.word	0x080254a0
 801fd84:	080254a4 	.word	0x080254a4

0801fd88 <__retarget_lock_init_recursive>:
 801fd88:	4770      	bx	lr

0801fd8a <__retarget_lock_acquire_recursive>:
 801fd8a:	4770      	bx	lr

0801fd8c <__retarget_lock_release_recursive>:
 801fd8c:	4770      	bx	lr

0801fd8e <memcpy>:
 801fd8e:	440a      	add	r2, r1
 801fd90:	4291      	cmp	r1, r2
 801fd92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801fd96:	d100      	bne.n	801fd9a <memcpy+0xc>
 801fd98:	4770      	bx	lr
 801fd9a:	b510      	push	{r4, lr}
 801fd9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fda0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fda4:	4291      	cmp	r1, r2
 801fda6:	d1f9      	bne.n	801fd9c <memcpy+0xe>
 801fda8:	bd10      	pop	{r4, pc}

0801fdaa <abort>:
 801fdaa:	b508      	push	{r3, lr}
 801fdac:	2006      	movs	r0, #6
 801fdae:	f000 fc5b 	bl	8020668 <raise>
 801fdb2:	2001      	movs	r0, #1
 801fdb4:	f7e1 fb12 	bl	80013dc <_exit>

0801fdb8 <_free_r>:
 801fdb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fdba:	2900      	cmp	r1, #0
 801fdbc:	d044      	beq.n	801fe48 <_free_r+0x90>
 801fdbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fdc2:	9001      	str	r0, [sp, #4]
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	f1a1 0404 	sub.w	r4, r1, #4
 801fdca:	bfb8      	it	lt
 801fdcc:	18e4      	addlt	r4, r4, r3
 801fdce:	f7ff fbcf 	bl	801f570 <__malloc_lock>
 801fdd2:	4a1e      	ldr	r2, [pc, #120]	; (801fe4c <_free_r+0x94>)
 801fdd4:	9801      	ldr	r0, [sp, #4]
 801fdd6:	6813      	ldr	r3, [r2, #0]
 801fdd8:	b933      	cbnz	r3, 801fde8 <_free_r+0x30>
 801fdda:	6063      	str	r3, [r4, #4]
 801fddc:	6014      	str	r4, [r2, #0]
 801fdde:	b003      	add	sp, #12
 801fde0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fde4:	f7ff bbca 	b.w	801f57c <__malloc_unlock>
 801fde8:	42a3      	cmp	r3, r4
 801fdea:	d908      	bls.n	801fdfe <_free_r+0x46>
 801fdec:	6825      	ldr	r5, [r4, #0]
 801fdee:	1961      	adds	r1, r4, r5
 801fdf0:	428b      	cmp	r3, r1
 801fdf2:	bf01      	itttt	eq
 801fdf4:	6819      	ldreq	r1, [r3, #0]
 801fdf6:	685b      	ldreq	r3, [r3, #4]
 801fdf8:	1949      	addeq	r1, r1, r5
 801fdfa:	6021      	streq	r1, [r4, #0]
 801fdfc:	e7ed      	b.n	801fdda <_free_r+0x22>
 801fdfe:	461a      	mov	r2, r3
 801fe00:	685b      	ldr	r3, [r3, #4]
 801fe02:	b10b      	cbz	r3, 801fe08 <_free_r+0x50>
 801fe04:	42a3      	cmp	r3, r4
 801fe06:	d9fa      	bls.n	801fdfe <_free_r+0x46>
 801fe08:	6811      	ldr	r1, [r2, #0]
 801fe0a:	1855      	adds	r5, r2, r1
 801fe0c:	42a5      	cmp	r5, r4
 801fe0e:	d10b      	bne.n	801fe28 <_free_r+0x70>
 801fe10:	6824      	ldr	r4, [r4, #0]
 801fe12:	4421      	add	r1, r4
 801fe14:	1854      	adds	r4, r2, r1
 801fe16:	42a3      	cmp	r3, r4
 801fe18:	6011      	str	r1, [r2, #0]
 801fe1a:	d1e0      	bne.n	801fdde <_free_r+0x26>
 801fe1c:	681c      	ldr	r4, [r3, #0]
 801fe1e:	685b      	ldr	r3, [r3, #4]
 801fe20:	6053      	str	r3, [r2, #4]
 801fe22:	440c      	add	r4, r1
 801fe24:	6014      	str	r4, [r2, #0]
 801fe26:	e7da      	b.n	801fdde <_free_r+0x26>
 801fe28:	d902      	bls.n	801fe30 <_free_r+0x78>
 801fe2a:	230c      	movs	r3, #12
 801fe2c:	6003      	str	r3, [r0, #0]
 801fe2e:	e7d6      	b.n	801fdde <_free_r+0x26>
 801fe30:	6825      	ldr	r5, [r4, #0]
 801fe32:	1961      	adds	r1, r4, r5
 801fe34:	428b      	cmp	r3, r1
 801fe36:	bf04      	itt	eq
 801fe38:	6819      	ldreq	r1, [r3, #0]
 801fe3a:	685b      	ldreq	r3, [r3, #4]
 801fe3c:	6063      	str	r3, [r4, #4]
 801fe3e:	bf04      	itt	eq
 801fe40:	1949      	addeq	r1, r1, r5
 801fe42:	6021      	streq	r1, [r4, #0]
 801fe44:	6054      	str	r4, [r2, #4]
 801fe46:	e7ca      	b.n	801fdde <_free_r+0x26>
 801fe48:	b003      	add	sp, #12
 801fe4a:	bd30      	pop	{r4, r5, pc}
 801fe4c:	20010800 	.word	0x20010800

0801fe50 <__sfputc_r>:
 801fe50:	6893      	ldr	r3, [r2, #8]
 801fe52:	3b01      	subs	r3, #1
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	b410      	push	{r4}
 801fe58:	6093      	str	r3, [r2, #8]
 801fe5a:	da08      	bge.n	801fe6e <__sfputc_r+0x1e>
 801fe5c:	6994      	ldr	r4, [r2, #24]
 801fe5e:	42a3      	cmp	r3, r4
 801fe60:	db01      	blt.n	801fe66 <__sfputc_r+0x16>
 801fe62:	290a      	cmp	r1, #10
 801fe64:	d103      	bne.n	801fe6e <__sfputc_r+0x1e>
 801fe66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fe6a:	f7ff bddc 	b.w	801fa26 <__swbuf_r>
 801fe6e:	6813      	ldr	r3, [r2, #0]
 801fe70:	1c58      	adds	r0, r3, #1
 801fe72:	6010      	str	r0, [r2, #0]
 801fe74:	7019      	strb	r1, [r3, #0]
 801fe76:	4608      	mov	r0, r1
 801fe78:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fe7c:	4770      	bx	lr

0801fe7e <__sfputs_r>:
 801fe7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe80:	4606      	mov	r6, r0
 801fe82:	460f      	mov	r7, r1
 801fe84:	4614      	mov	r4, r2
 801fe86:	18d5      	adds	r5, r2, r3
 801fe88:	42ac      	cmp	r4, r5
 801fe8a:	d101      	bne.n	801fe90 <__sfputs_r+0x12>
 801fe8c:	2000      	movs	r0, #0
 801fe8e:	e007      	b.n	801fea0 <__sfputs_r+0x22>
 801fe90:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe94:	463a      	mov	r2, r7
 801fe96:	4630      	mov	r0, r6
 801fe98:	f7ff ffda 	bl	801fe50 <__sfputc_r>
 801fe9c:	1c43      	adds	r3, r0, #1
 801fe9e:	d1f3      	bne.n	801fe88 <__sfputs_r+0xa>
 801fea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fea4 <_vfiprintf_r>:
 801fea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fea8:	460d      	mov	r5, r1
 801feaa:	b09d      	sub	sp, #116	; 0x74
 801feac:	4614      	mov	r4, r2
 801feae:	4698      	mov	r8, r3
 801feb0:	4606      	mov	r6, r0
 801feb2:	b118      	cbz	r0, 801febc <_vfiprintf_r+0x18>
 801feb4:	6a03      	ldr	r3, [r0, #32]
 801feb6:	b90b      	cbnz	r3, 801febc <_vfiprintf_r+0x18>
 801feb8:	f7ff fcbc 	bl	801f834 <__sinit>
 801febc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801febe:	07d9      	lsls	r1, r3, #31
 801fec0:	d405      	bmi.n	801fece <_vfiprintf_r+0x2a>
 801fec2:	89ab      	ldrh	r3, [r5, #12]
 801fec4:	059a      	lsls	r2, r3, #22
 801fec6:	d402      	bmi.n	801fece <_vfiprintf_r+0x2a>
 801fec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801feca:	f7ff ff5e 	bl	801fd8a <__retarget_lock_acquire_recursive>
 801fece:	89ab      	ldrh	r3, [r5, #12]
 801fed0:	071b      	lsls	r3, r3, #28
 801fed2:	d501      	bpl.n	801fed8 <_vfiprintf_r+0x34>
 801fed4:	692b      	ldr	r3, [r5, #16]
 801fed6:	b99b      	cbnz	r3, 801ff00 <_vfiprintf_r+0x5c>
 801fed8:	4629      	mov	r1, r5
 801feda:	4630      	mov	r0, r6
 801fedc:	f7ff fde0 	bl	801faa0 <__swsetup_r>
 801fee0:	b170      	cbz	r0, 801ff00 <_vfiprintf_r+0x5c>
 801fee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fee4:	07dc      	lsls	r4, r3, #31
 801fee6:	d504      	bpl.n	801fef2 <_vfiprintf_r+0x4e>
 801fee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801feec:	b01d      	add	sp, #116	; 0x74
 801feee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fef2:	89ab      	ldrh	r3, [r5, #12]
 801fef4:	0598      	lsls	r0, r3, #22
 801fef6:	d4f7      	bmi.n	801fee8 <_vfiprintf_r+0x44>
 801fef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fefa:	f7ff ff47 	bl	801fd8c <__retarget_lock_release_recursive>
 801fefe:	e7f3      	b.n	801fee8 <_vfiprintf_r+0x44>
 801ff00:	2300      	movs	r3, #0
 801ff02:	9309      	str	r3, [sp, #36]	; 0x24
 801ff04:	2320      	movs	r3, #32
 801ff06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ff0a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ff0e:	2330      	movs	r3, #48	; 0x30
 801ff10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80200c4 <_vfiprintf_r+0x220>
 801ff14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ff18:	f04f 0901 	mov.w	r9, #1
 801ff1c:	4623      	mov	r3, r4
 801ff1e:	469a      	mov	sl, r3
 801ff20:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ff24:	b10a      	cbz	r2, 801ff2a <_vfiprintf_r+0x86>
 801ff26:	2a25      	cmp	r2, #37	; 0x25
 801ff28:	d1f9      	bne.n	801ff1e <_vfiprintf_r+0x7a>
 801ff2a:	ebba 0b04 	subs.w	fp, sl, r4
 801ff2e:	d00b      	beq.n	801ff48 <_vfiprintf_r+0xa4>
 801ff30:	465b      	mov	r3, fp
 801ff32:	4622      	mov	r2, r4
 801ff34:	4629      	mov	r1, r5
 801ff36:	4630      	mov	r0, r6
 801ff38:	f7ff ffa1 	bl	801fe7e <__sfputs_r>
 801ff3c:	3001      	adds	r0, #1
 801ff3e:	f000 80a9 	beq.w	8020094 <_vfiprintf_r+0x1f0>
 801ff42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ff44:	445a      	add	r2, fp
 801ff46:	9209      	str	r2, [sp, #36]	; 0x24
 801ff48:	f89a 3000 	ldrb.w	r3, [sl]
 801ff4c:	2b00      	cmp	r3, #0
 801ff4e:	f000 80a1 	beq.w	8020094 <_vfiprintf_r+0x1f0>
 801ff52:	2300      	movs	r3, #0
 801ff54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ff58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ff5c:	f10a 0a01 	add.w	sl, sl, #1
 801ff60:	9304      	str	r3, [sp, #16]
 801ff62:	9307      	str	r3, [sp, #28]
 801ff64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ff68:	931a      	str	r3, [sp, #104]	; 0x68
 801ff6a:	4654      	mov	r4, sl
 801ff6c:	2205      	movs	r2, #5
 801ff6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff72:	4854      	ldr	r0, [pc, #336]	; (80200c4 <_vfiprintf_r+0x220>)
 801ff74:	f7e0 f934 	bl	80001e0 <memchr>
 801ff78:	9a04      	ldr	r2, [sp, #16]
 801ff7a:	b9d8      	cbnz	r0, 801ffb4 <_vfiprintf_r+0x110>
 801ff7c:	06d1      	lsls	r1, r2, #27
 801ff7e:	bf44      	itt	mi
 801ff80:	2320      	movmi	r3, #32
 801ff82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ff86:	0713      	lsls	r3, r2, #28
 801ff88:	bf44      	itt	mi
 801ff8a:	232b      	movmi	r3, #43	; 0x2b
 801ff8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ff90:	f89a 3000 	ldrb.w	r3, [sl]
 801ff94:	2b2a      	cmp	r3, #42	; 0x2a
 801ff96:	d015      	beq.n	801ffc4 <_vfiprintf_r+0x120>
 801ff98:	9a07      	ldr	r2, [sp, #28]
 801ff9a:	4654      	mov	r4, sl
 801ff9c:	2000      	movs	r0, #0
 801ff9e:	f04f 0c0a 	mov.w	ip, #10
 801ffa2:	4621      	mov	r1, r4
 801ffa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ffa8:	3b30      	subs	r3, #48	; 0x30
 801ffaa:	2b09      	cmp	r3, #9
 801ffac:	d94d      	bls.n	802004a <_vfiprintf_r+0x1a6>
 801ffae:	b1b0      	cbz	r0, 801ffde <_vfiprintf_r+0x13a>
 801ffb0:	9207      	str	r2, [sp, #28]
 801ffb2:	e014      	b.n	801ffde <_vfiprintf_r+0x13a>
 801ffb4:	eba0 0308 	sub.w	r3, r0, r8
 801ffb8:	fa09 f303 	lsl.w	r3, r9, r3
 801ffbc:	4313      	orrs	r3, r2
 801ffbe:	9304      	str	r3, [sp, #16]
 801ffc0:	46a2      	mov	sl, r4
 801ffc2:	e7d2      	b.n	801ff6a <_vfiprintf_r+0xc6>
 801ffc4:	9b03      	ldr	r3, [sp, #12]
 801ffc6:	1d19      	adds	r1, r3, #4
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	9103      	str	r1, [sp, #12]
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	bfbb      	ittet	lt
 801ffd0:	425b      	neglt	r3, r3
 801ffd2:	f042 0202 	orrlt.w	r2, r2, #2
 801ffd6:	9307      	strge	r3, [sp, #28]
 801ffd8:	9307      	strlt	r3, [sp, #28]
 801ffda:	bfb8      	it	lt
 801ffdc:	9204      	strlt	r2, [sp, #16]
 801ffde:	7823      	ldrb	r3, [r4, #0]
 801ffe0:	2b2e      	cmp	r3, #46	; 0x2e
 801ffe2:	d10c      	bne.n	801fffe <_vfiprintf_r+0x15a>
 801ffe4:	7863      	ldrb	r3, [r4, #1]
 801ffe6:	2b2a      	cmp	r3, #42	; 0x2a
 801ffe8:	d134      	bne.n	8020054 <_vfiprintf_r+0x1b0>
 801ffea:	9b03      	ldr	r3, [sp, #12]
 801ffec:	1d1a      	adds	r2, r3, #4
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	9203      	str	r2, [sp, #12]
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	bfb8      	it	lt
 801fff6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801fffa:	3402      	adds	r4, #2
 801fffc:	9305      	str	r3, [sp, #20]
 801fffe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80200d4 <_vfiprintf_r+0x230>
 8020002:	7821      	ldrb	r1, [r4, #0]
 8020004:	2203      	movs	r2, #3
 8020006:	4650      	mov	r0, sl
 8020008:	f7e0 f8ea 	bl	80001e0 <memchr>
 802000c:	b138      	cbz	r0, 802001e <_vfiprintf_r+0x17a>
 802000e:	9b04      	ldr	r3, [sp, #16]
 8020010:	eba0 000a 	sub.w	r0, r0, sl
 8020014:	2240      	movs	r2, #64	; 0x40
 8020016:	4082      	lsls	r2, r0
 8020018:	4313      	orrs	r3, r2
 802001a:	3401      	adds	r4, #1
 802001c:	9304      	str	r3, [sp, #16]
 802001e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020022:	4829      	ldr	r0, [pc, #164]	; (80200c8 <_vfiprintf_r+0x224>)
 8020024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020028:	2206      	movs	r2, #6
 802002a:	f7e0 f8d9 	bl	80001e0 <memchr>
 802002e:	2800      	cmp	r0, #0
 8020030:	d03f      	beq.n	80200b2 <_vfiprintf_r+0x20e>
 8020032:	4b26      	ldr	r3, [pc, #152]	; (80200cc <_vfiprintf_r+0x228>)
 8020034:	bb1b      	cbnz	r3, 802007e <_vfiprintf_r+0x1da>
 8020036:	9b03      	ldr	r3, [sp, #12]
 8020038:	3307      	adds	r3, #7
 802003a:	f023 0307 	bic.w	r3, r3, #7
 802003e:	3308      	adds	r3, #8
 8020040:	9303      	str	r3, [sp, #12]
 8020042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020044:	443b      	add	r3, r7
 8020046:	9309      	str	r3, [sp, #36]	; 0x24
 8020048:	e768      	b.n	801ff1c <_vfiprintf_r+0x78>
 802004a:	fb0c 3202 	mla	r2, ip, r2, r3
 802004e:	460c      	mov	r4, r1
 8020050:	2001      	movs	r0, #1
 8020052:	e7a6      	b.n	801ffa2 <_vfiprintf_r+0xfe>
 8020054:	2300      	movs	r3, #0
 8020056:	3401      	adds	r4, #1
 8020058:	9305      	str	r3, [sp, #20]
 802005a:	4619      	mov	r1, r3
 802005c:	f04f 0c0a 	mov.w	ip, #10
 8020060:	4620      	mov	r0, r4
 8020062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020066:	3a30      	subs	r2, #48	; 0x30
 8020068:	2a09      	cmp	r2, #9
 802006a:	d903      	bls.n	8020074 <_vfiprintf_r+0x1d0>
 802006c:	2b00      	cmp	r3, #0
 802006e:	d0c6      	beq.n	801fffe <_vfiprintf_r+0x15a>
 8020070:	9105      	str	r1, [sp, #20]
 8020072:	e7c4      	b.n	801fffe <_vfiprintf_r+0x15a>
 8020074:	fb0c 2101 	mla	r1, ip, r1, r2
 8020078:	4604      	mov	r4, r0
 802007a:	2301      	movs	r3, #1
 802007c:	e7f0      	b.n	8020060 <_vfiprintf_r+0x1bc>
 802007e:	ab03      	add	r3, sp, #12
 8020080:	9300      	str	r3, [sp, #0]
 8020082:	462a      	mov	r2, r5
 8020084:	4b12      	ldr	r3, [pc, #72]	; (80200d0 <_vfiprintf_r+0x22c>)
 8020086:	a904      	add	r1, sp, #16
 8020088:	4630      	mov	r0, r6
 802008a:	f3af 8000 	nop.w
 802008e:	4607      	mov	r7, r0
 8020090:	1c78      	adds	r0, r7, #1
 8020092:	d1d6      	bne.n	8020042 <_vfiprintf_r+0x19e>
 8020094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020096:	07d9      	lsls	r1, r3, #31
 8020098:	d405      	bmi.n	80200a6 <_vfiprintf_r+0x202>
 802009a:	89ab      	ldrh	r3, [r5, #12]
 802009c:	059a      	lsls	r2, r3, #22
 802009e:	d402      	bmi.n	80200a6 <_vfiprintf_r+0x202>
 80200a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80200a2:	f7ff fe73 	bl	801fd8c <__retarget_lock_release_recursive>
 80200a6:	89ab      	ldrh	r3, [r5, #12]
 80200a8:	065b      	lsls	r3, r3, #25
 80200aa:	f53f af1d 	bmi.w	801fee8 <_vfiprintf_r+0x44>
 80200ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80200b0:	e71c      	b.n	801feec <_vfiprintf_r+0x48>
 80200b2:	ab03      	add	r3, sp, #12
 80200b4:	9300      	str	r3, [sp, #0]
 80200b6:	462a      	mov	r2, r5
 80200b8:	4b05      	ldr	r3, [pc, #20]	; (80200d0 <_vfiprintf_r+0x22c>)
 80200ba:	a904      	add	r1, sp, #16
 80200bc:	4630      	mov	r0, r6
 80200be:	f000 f879 	bl	80201b4 <_printf_i>
 80200c2:	e7e4      	b.n	802008e <_vfiprintf_r+0x1ea>
 80200c4:	08025464 	.word	0x08025464
 80200c8:	0802546e 	.word	0x0802546e
 80200cc:	00000000 	.word	0x00000000
 80200d0:	0801fe7f 	.word	0x0801fe7f
 80200d4:	0802546a 	.word	0x0802546a

080200d8 <_printf_common>:
 80200d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200dc:	4616      	mov	r6, r2
 80200de:	4699      	mov	r9, r3
 80200e0:	688a      	ldr	r2, [r1, #8]
 80200e2:	690b      	ldr	r3, [r1, #16]
 80200e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80200e8:	4293      	cmp	r3, r2
 80200ea:	bfb8      	it	lt
 80200ec:	4613      	movlt	r3, r2
 80200ee:	6033      	str	r3, [r6, #0]
 80200f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80200f4:	4607      	mov	r7, r0
 80200f6:	460c      	mov	r4, r1
 80200f8:	b10a      	cbz	r2, 80200fe <_printf_common+0x26>
 80200fa:	3301      	adds	r3, #1
 80200fc:	6033      	str	r3, [r6, #0]
 80200fe:	6823      	ldr	r3, [r4, #0]
 8020100:	0699      	lsls	r1, r3, #26
 8020102:	bf42      	ittt	mi
 8020104:	6833      	ldrmi	r3, [r6, #0]
 8020106:	3302      	addmi	r3, #2
 8020108:	6033      	strmi	r3, [r6, #0]
 802010a:	6825      	ldr	r5, [r4, #0]
 802010c:	f015 0506 	ands.w	r5, r5, #6
 8020110:	d106      	bne.n	8020120 <_printf_common+0x48>
 8020112:	f104 0a19 	add.w	sl, r4, #25
 8020116:	68e3      	ldr	r3, [r4, #12]
 8020118:	6832      	ldr	r2, [r6, #0]
 802011a:	1a9b      	subs	r3, r3, r2
 802011c:	42ab      	cmp	r3, r5
 802011e:	dc26      	bgt.n	802016e <_printf_common+0x96>
 8020120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020124:	1e13      	subs	r3, r2, #0
 8020126:	6822      	ldr	r2, [r4, #0]
 8020128:	bf18      	it	ne
 802012a:	2301      	movne	r3, #1
 802012c:	0692      	lsls	r2, r2, #26
 802012e:	d42b      	bmi.n	8020188 <_printf_common+0xb0>
 8020130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020134:	4649      	mov	r1, r9
 8020136:	4638      	mov	r0, r7
 8020138:	47c0      	blx	r8
 802013a:	3001      	adds	r0, #1
 802013c:	d01e      	beq.n	802017c <_printf_common+0xa4>
 802013e:	6823      	ldr	r3, [r4, #0]
 8020140:	6922      	ldr	r2, [r4, #16]
 8020142:	f003 0306 	and.w	r3, r3, #6
 8020146:	2b04      	cmp	r3, #4
 8020148:	bf02      	ittt	eq
 802014a:	68e5      	ldreq	r5, [r4, #12]
 802014c:	6833      	ldreq	r3, [r6, #0]
 802014e:	1aed      	subeq	r5, r5, r3
 8020150:	68a3      	ldr	r3, [r4, #8]
 8020152:	bf0c      	ite	eq
 8020154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020158:	2500      	movne	r5, #0
 802015a:	4293      	cmp	r3, r2
 802015c:	bfc4      	itt	gt
 802015e:	1a9b      	subgt	r3, r3, r2
 8020160:	18ed      	addgt	r5, r5, r3
 8020162:	2600      	movs	r6, #0
 8020164:	341a      	adds	r4, #26
 8020166:	42b5      	cmp	r5, r6
 8020168:	d11a      	bne.n	80201a0 <_printf_common+0xc8>
 802016a:	2000      	movs	r0, #0
 802016c:	e008      	b.n	8020180 <_printf_common+0xa8>
 802016e:	2301      	movs	r3, #1
 8020170:	4652      	mov	r2, sl
 8020172:	4649      	mov	r1, r9
 8020174:	4638      	mov	r0, r7
 8020176:	47c0      	blx	r8
 8020178:	3001      	adds	r0, #1
 802017a:	d103      	bne.n	8020184 <_printf_common+0xac>
 802017c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020184:	3501      	adds	r5, #1
 8020186:	e7c6      	b.n	8020116 <_printf_common+0x3e>
 8020188:	18e1      	adds	r1, r4, r3
 802018a:	1c5a      	adds	r2, r3, #1
 802018c:	2030      	movs	r0, #48	; 0x30
 802018e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020192:	4422      	add	r2, r4
 8020194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802019c:	3302      	adds	r3, #2
 802019e:	e7c7      	b.n	8020130 <_printf_common+0x58>
 80201a0:	2301      	movs	r3, #1
 80201a2:	4622      	mov	r2, r4
 80201a4:	4649      	mov	r1, r9
 80201a6:	4638      	mov	r0, r7
 80201a8:	47c0      	blx	r8
 80201aa:	3001      	adds	r0, #1
 80201ac:	d0e6      	beq.n	802017c <_printf_common+0xa4>
 80201ae:	3601      	adds	r6, #1
 80201b0:	e7d9      	b.n	8020166 <_printf_common+0x8e>
	...

080201b4 <_printf_i>:
 80201b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80201b8:	7e0f      	ldrb	r7, [r1, #24]
 80201ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80201bc:	2f78      	cmp	r7, #120	; 0x78
 80201be:	4691      	mov	r9, r2
 80201c0:	4680      	mov	r8, r0
 80201c2:	460c      	mov	r4, r1
 80201c4:	469a      	mov	sl, r3
 80201c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80201ca:	d807      	bhi.n	80201dc <_printf_i+0x28>
 80201cc:	2f62      	cmp	r7, #98	; 0x62
 80201ce:	d80a      	bhi.n	80201e6 <_printf_i+0x32>
 80201d0:	2f00      	cmp	r7, #0
 80201d2:	f000 80d4 	beq.w	802037e <_printf_i+0x1ca>
 80201d6:	2f58      	cmp	r7, #88	; 0x58
 80201d8:	f000 80c0 	beq.w	802035c <_printf_i+0x1a8>
 80201dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80201e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80201e4:	e03a      	b.n	802025c <_printf_i+0xa8>
 80201e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80201ea:	2b15      	cmp	r3, #21
 80201ec:	d8f6      	bhi.n	80201dc <_printf_i+0x28>
 80201ee:	a101      	add	r1, pc, #4	; (adr r1, 80201f4 <_printf_i+0x40>)
 80201f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80201f4:	0802024d 	.word	0x0802024d
 80201f8:	08020261 	.word	0x08020261
 80201fc:	080201dd 	.word	0x080201dd
 8020200:	080201dd 	.word	0x080201dd
 8020204:	080201dd 	.word	0x080201dd
 8020208:	080201dd 	.word	0x080201dd
 802020c:	08020261 	.word	0x08020261
 8020210:	080201dd 	.word	0x080201dd
 8020214:	080201dd 	.word	0x080201dd
 8020218:	080201dd 	.word	0x080201dd
 802021c:	080201dd 	.word	0x080201dd
 8020220:	08020365 	.word	0x08020365
 8020224:	0802028d 	.word	0x0802028d
 8020228:	0802031f 	.word	0x0802031f
 802022c:	080201dd 	.word	0x080201dd
 8020230:	080201dd 	.word	0x080201dd
 8020234:	08020387 	.word	0x08020387
 8020238:	080201dd 	.word	0x080201dd
 802023c:	0802028d 	.word	0x0802028d
 8020240:	080201dd 	.word	0x080201dd
 8020244:	080201dd 	.word	0x080201dd
 8020248:	08020327 	.word	0x08020327
 802024c:	682b      	ldr	r3, [r5, #0]
 802024e:	1d1a      	adds	r2, r3, #4
 8020250:	681b      	ldr	r3, [r3, #0]
 8020252:	602a      	str	r2, [r5, #0]
 8020254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802025c:	2301      	movs	r3, #1
 802025e:	e09f      	b.n	80203a0 <_printf_i+0x1ec>
 8020260:	6820      	ldr	r0, [r4, #0]
 8020262:	682b      	ldr	r3, [r5, #0]
 8020264:	0607      	lsls	r7, r0, #24
 8020266:	f103 0104 	add.w	r1, r3, #4
 802026a:	6029      	str	r1, [r5, #0]
 802026c:	d501      	bpl.n	8020272 <_printf_i+0xbe>
 802026e:	681e      	ldr	r6, [r3, #0]
 8020270:	e003      	b.n	802027a <_printf_i+0xc6>
 8020272:	0646      	lsls	r6, r0, #25
 8020274:	d5fb      	bpl.n	802026e <_printf_i+0xba>
 8020276:	f9b3 6000 	ldrsh.w	r6, [r3]
 802027a:	2e00      	cmp	r6, #0
 802027c:	da03      	bge.n	8020286 <_printf_i+0xd2>
 802027e:	232d      	movs	r3, #45	; 0x2d
 8020280:	4276      	negs	r6, r6
 8020282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020286:	485a      	ldr	r0, [pc, #360]	; (80203f0 <_printf_i+0x23c>)
 8020288:	230a      	movs	r3, #10
 802028a:	e012      	b.n	80202b2 <_printf_i+0xfe>
 802028c:	682b      	ldr	r3, [r5, #0]
 802028e:	6820      	ldr	r0, [r4, #0]
 8020290:	1d19      	adds	r1, r3, #4
 8020292:	6029      	str	r1, [r5, #0]
 8020294:	0605      	lsls	r5, r0, #24
 8020296:	d501      	bpl.n	802029c <_printf_i+0xe8>
 8020298:	681e      	ldr	r6, [r3, #0]
 802029a:	e002      	b.n	80202a2 <_printf_i+0xee>
 802029c:	0641      	lsls	r1, r0, #25
 802029e:	d5fb      	bpl.n	8020298 <_printf_i+0xe4>
 80202a0:	881e      	ldrh	r6, [r3, #0]
 80202a2:	4853      	ldr	r0, [pc, #332]	; (80203f0 <_printf_i+0x23c>)
 80202a4:	2f6f      	cmp	r7, #111	; 0x6f
 80202a6:	bf0c      	ite	eq
 80202a8:	2308      	moveq	r3, #8
 80202aa:	230a      	movne	r3, #10
 80202ac:	2100      	movs	r1, #0
 80202ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80202b2:	6865      	ldr	r5, [r4, #4]
 80202b4:	60a5      	str	r5, [r4, #8]
 80202b6:	2d00      	cmp	r5, #0
 80202b8:	bfa2      	ittt	ge
 80202ba:	6821      	ldrge	r1, [r4, #0]
 80202bc:	f021 0104 	bicge.w	r1, r1, #4
 80202c0:	6021      	strge	r1, [r4, #0]
 80202c2:	b90e      	cbnz	r6, 80202c8 <_printf_i+0x114>
 80202c4:	2d00      	cmp	r5, #0
 80202c6:	d04b      	beq.n	8020360 <_printf_i+0x1ac>
 80202c8:	4615      	mov	r5, r2
 80202ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80202ce:	fb03 6711 	mls	r7, r3, r1, r6
 80202d2:	5dc7      	ldrb	r7, [r0, r7]
 80202d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80202d8:	4637      	mov	r7, r6
 80202da:	42bb      	cmp	r3, r7
 80202dc:	460e      	mov	r6, r1
 80202de:	d9f4      	bls.n	80202ca <_printf_i+0x116>
 80202e0:	2b08      	cmp	r3, #8
 80202e2:	d10b      	bne.n	80202fc <_printf_i+0x148>
 80202e4:	6823      	ldr	r3, [r4, #0]
 80202e6:	07de      	lsls	r6, r3, #31
 80202e8:	d508      	bpl.n	80202fc <_printf_i+0x148>
 80202ea:	6923      	ldr	r3, [r4, #16]
 80202ec:	6861      	ldr	r1, [r4, #4]
 80202ee:	4299      	cmp	r1, r3
 80202f0:	bfde      	ittt	le
 80202f2:	2330      	movle	r3, #48	; 0x30
 80202f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80202f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80202fc:	1b52      	subs	r2, r2, r5
 80202fe:	6122      	str	r2, [r4, #16]
 8020300:	f8cd a000 	str.w	sl, [sp]
 8020304:	464b      	mov	r3, r9
 8020306:	aa03      	add	r2, sp, #12
 8020308:	4621      	mov	r1, r4
 802030a:	4640      	mov	r0, r8
 802030c:	f7ff fee4 	bl	80200d8 <_printf_common>
 8020310:	3001      	adds	r0, #1
 8020312:	d14a      	bne.n	80203aa <_printf_i+0x1f6>
 8020314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020318:	b004      	add	sp, #16
 802031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802031e:	6823      	ldr	r3, [r4, #0]
 8020320:	f043 0320 	orr.w	r3, r3, #32
 8020324:	6023      	str	r3, [r4, #0]
 8020326:	4833      	ldr	r0, [pc, #204]	; (80203f4 <_printf_i+0x240>)
 8020328:	2778      	movs	r7, #120	; 0x78
 802032a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802032e:	6823      	ldr	r3, [r4, #0]
 8020330:	6829      	ldr	r1, [r5, #0]
 8020332:	061f      	lsls	r7, r3, #24
 8020334:	f851 6b04 	ldr.w	r6, [r1], #4
 8020338:	d402      	bmi.n	8020340 <_printf_i+0x18c>
 802033a:	065f      	lsls	r7, r3, #25
 802033c:	bf48      	it	mi
 802033e:	b2b6      	uxthmi	r6, r6
 8020340:	07df      	lsls	r7, r3, #31
 8020342:	bf48      	it	mi
 8020344:	f043 0320 	orrmi.w	r3, r3, #32
 8020348:	6029      	str	r1, [r5, #0]
 802034a:	bf48      	it	mi
 802034c:	6023      	strmi	r3, [r4, #0]
 802034e:	b91e      	cbnz	r6, 8020358 <_printf_i+0x1a4>
 8020350:	6823      	ldr	r3, [r4, #0]
 8020352:	f023 0320 	bic.w	r3, r3, #32
 8020356:	6023      	str	r3, [r4, #0]
 8020358:	2310      	movs	r3, #16
 802035a:	e7a7      	b.n	80202ac <_printf_i+0xf8>
 802035c:	4824      	ldr	r0, [pc, #144]	; (80203f0 <_printf_i+0x23c>)
 802035e:	e7e4      	b.n	802032a <_printf_i+0x176>
 8020360:	4615      	mov	r5, r2
 8020362:	e7bd      	b.n	80202e0 <_printf_i+0x12c>
 8020364:	682b      	ldr	r3, [r5, #0]
 8020366:	6826      	ldr	r6, [r4, #0]
 8020368:	6961      	ldr	r1, [r4, #20]
 802036a:	1d18      	adds	r0, r3, #4
 802036c:	6028      	str	r0, [r5, #0]
 802036e:	0635      	lsls	r5, r6, #24
 8020370:	681b      	ldr	r3, [r3, #0]
 8020372:	d501      	bpl.n	8020378 <_printf_i+0x1c4>
 8020374:	6019      	str	r1, [r3, #0]
 8020376:	e002      	b.n	802037e <_printf_i+0x1ca>
 8020378:	0670      	lsls	r0, r6, #25
 802037a:	d5fb      	bpl.n	8020374 <_printf_i+0x1c0>
 802037c:	8019      	strh	r1, [r3, #0]
 802037e:	2300      	movs	r3, #0
 8020380:	6123      	str	r3, [r4, #16]
 8020382:	4615      	mov	r5, r2
 8020384:	e7bc      	b.n	8020300 <_printf_i+0x14c>
 8020386:	682b      	ldr	r3, [r5, #0]
 8020388:	1d1a      	adds	r2, r3, #4
 802038a:	602a      	str	r2, [r5, #0]
 802038c:	681d      	ldr	r5, [r3, #0]
 802038e:	6862      	ldr	r2, [r4, #4]
 8020390:	2100      	movs	r1, #0
 8020392:	4628      	mov	r0, r5
 8020394:	f7df ff24 	bl	80001e0 <memchr>
 8020398:	b108      	cbz	r0, 802039e <_printf_i+0x1ea>
 802039a:	1b40      	subs	r0, r0, r5
 802039c:	6060      	str	r0, [r4, #4]
 802039e:	6863      	ldr	r3, [r4, #4]
 80203a0:	6123      	str	r3, [r4, #16]
 80203a2:	2300      	movs	r3, #0
 80203a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80203a8:	e7aa      	b.n	8020300 <_printf_i+0x14c>
 80203aa:	6923      	ldr	r3, [r4, #16]
 80203ac:	462a      	mov	r2, r5
 80203ae:	4649      	mov	r1, r9
 80203b0:	4640      	mov	r0, r8
 80203b2:	47d0      	blx	sl
 80203b4:	3001      	adds	r0, #1
 80203b6:	d0ad      	beq.n	8020314 <_printf_i+0x160>
 80203b8:	6823      	ldr	r3, [r4, #0]
 80203ba:	079b      	lsls	r3, r3, #30
 80203bc:	d413      	bmi.n	80203e6 <_printf_i+0x232>
 80203be:	68e0      	ldr	r0, [r4, #12]
 80203c0:	9b03      	ldr	r3, [sp, #12]
 80203c2:	4298      	cmp	r0, r3
 80203c4:	bfb8      	it	lt
 80203c6:	4618      	movlt	r0, r3
 80203c8:	e7a6      	b.n	8020318 <_printf_i+0x164>
 80203ca:	2301      	movs	r3, #1
 80203cc:	4632      	mov	r2, r6
 80203ce:	4649      	mov	r1, r9
 80203d0:	4640      	mov	r0, r8
 80203d2:	47d0      	blx	sl
 80203d4:	3001      	adds	r0, #1
 80203d6:	d09d      	beq.n	8020314 <_printf_i+0x160>
 80203d8:	3501      	adds	r5, #1
 80203da:	68e3      	ldr	r3, [r4, #12]
 80203dc:	9903      	ldr	r1, [sp, #12]
 80203de:	1a5b      	subs	r3, r3, r1
 80203e0:	42ab      	cmp	r3, r5
 80203e2:	dcf2      	bgt.n	80203ca <_printf_i+0x216>
 80203e4:	e7eb      	b.n	80203be <_printf_i+0x20a>
 80203e6:	2500      	movs	r5, #0
 80203e8:	f104 0619 	add.w	r6, r4, #25
 80203ec:	e7f5      	b.n	80203da <_printf_i+0x226>
 80203ee:	bf00      	nop
 80203f0:	08025475 	.word	0x08025475
 80203f4:	08025486 	.word	0x08025486

080203f8 <__sflush_r>:
 80203f8:	898a      	ldrh	r2, [r1, #12]
 80203fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203fe:	4605      	mov	r5, r0
 8020400:	0710      	lsls	r0, r2, #28
 8020402:	460c      	mov	r4, r1
 8020404:	d458      	bmi.n	80204b8 <__sflush_r+0xc0>
 8020406:	684b      	ldr	r3, [r1, #4]
 8020408:	2b00      	cmp	r3, #0
 802040a:	dc05      	bgt.n	8020418 <__sflush_r+0x20>
 802040c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802040e:	2b00      	cmp	r3, #0
 8020410:	dc02      	bgt.n	8020418 <__sflush_r+0x20>
 8020412:	2000      	movs	r0, #0
 8020414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802041a:	2e00      	cmp	r6, #0
 802041c:	d0f9      	beq.n	8020412 <__sflush_r+0x1a>
 802041e:	2300      	movs	r3, #0
 8020420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020424:	682f      	ldr	r7, [r5, #0]
 8020426:	6a21      	ldr	r1, [r4, #32]
 8020428:	602b      	str	r3, [r5, #0]
 802042a:	d032      	beq.n	8020492 <__sflush_r+0x9a>
 802042c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802042e:	89a3      	ldrh	r3, [r4, #12]
 8020430:	075a      	lsls	r2, r3, #29
 8020432:	d505      	bpl.n	8020440 <__sflush_r+0x48>
 8020434:	6863      	ldr	r3, [r4, #4]
 8020436:	1ac0      	subs	r0, r0, r3
 8020438:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802043a:	b10b      	cbz	r3, 8020440 <__sflush_r+0x48>
 802043c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802043e:	1ac0      	subs	r0, r0, r3
 8020440:	2300      	movs	r3, #0
 8020442:	4602      	mov	r2, r0
 8020444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020446:	6a21      	ldr	r1, [r4, #32]
 8020448:	4628      	mov	r0, r5
 802044a:	47b0      	blx	r6
 802044c:	1c43      	adds	r3, r0, #1
 802044e:	89a3      	ldrh	r3, [r4, #12]
 8020450:	d106      	bne.n	8020460 <__sflush_r+0x68>
 8020452:	6829      	ldr	r1, [r5, #0]
 8020454:	291d      	cmp	r1, #29
 8020456:	d82b      	bhi.n	80204b0 <__sflush_r+0xb8>
 8020458:	4a29      	ldr	r2, [pc, #164]	; (8020500 <__sflush_r+0x108>)
 802045a:	410a      	asrs	r2, r1
 802045c:	07d6      	lsls	r6, r2, #31
 802045e:	d427      	bmi.n	80204b0 <__sflush_r+0xb8>
 8020460:	2200      	movs	r2, #0
 8020462:	6062      	str	r2, [r4, #4]
 8020464:	04d9      	lsls	r1, r3, #19
 8020466:	6922      	ldr	r2, [r4, #16]
 8020468:	6022      	str	r2, [r4, #0]
 802046a:	d504      	bpl.n	8020476 <__sflush_r+0x7e>
 802046c:	1c42      	adds	r2, r0, #1
 802046e:	d101      	bne.n	8020474 <__sflush_r+0x7c>
 8020470:	682b      	ldr	r3, [r5, #0]
 8020472:	b903      	cbnz	r3, 8020476 <__sflush_r+0x7e>
 8020474:	6560      	str	r0, [r4, #84]	; 0x54
 8020476:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020478:	602f      	str	r7, [r5, #0]
 802047a:	2900      	cmp	r1, #0
 802047c:	d0c9      	beq.n	8020412 <__sflush_r+0x1a>
 802047e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020482:	4299      	cmp	r1, r3
 8020484:	d002      	beq.n	802048c <__sflush_r+0x94>
 8020486:	4628      	mov	r0, r5
 8020488:	f7ff fc96 	bl	801fdb8 <_free_r>
 802048c:	2000      	movs	r0, #0
 802048e:	6360      	str	r0, [r4, #52]	; 0x34
 8020490:	e7c0      	b.n	8020414 <__sflush_r+0x1c>
 8020492:	2301      	movs	r3, #1
 8020494:	4628      	mov	r0, r5
 8020496:	47b0      	blx	r6
 8020498:	1c41      	adds	r1, r0, #1
 802049a:	d1c8      	bne.n	802042e <__sflush_r+0x36>
 802049c:	682b      	ldr	r3, [r5, #0]
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d0c5      	beq.n	802042e <__sflush_r+0x36>
 80204a2:	2b1d      	cmp	r3, #29
 80204a4:	d001      	beq.n	80204aa <__sflush_r+0xb2>
 80204a6:	2b16      	cmp	r3, #22
 80204a8:	d101      	bne.n	80204ae <__sflush_r+0xb6>
 80204aa:	602f      	str	r7, [r5, #0]
 80204ac:	e7b1      	b.n	8020412 <__sflush_r+0x1a>
 80204ae:	89a3      	ldrh	r3, [r4, #12]
 80204b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80204b4:	81a3      	strh	r3, [r4, #12]
 80204b6:	e7ad      	b.n	8020414 <__sflush_r+0x1c>
 80204b8:	690f      	ldr	r7, [r1, #16]
 80204ba:	2f00      	cmp	r7, #0
 80204bc:	d0a9      	beq.n	8020412 <__sflush_r+0x1a>
 80204be:	0793      	lsls	r3, r2, #30
 80204c0:	680e      	ldr	r6, [r1, #0]
 80204c2:	bf08      	it	eq
 80204c4:	694b      	ldreq	r3, [r1, #20]
 80204c6:	600f      	str	r7, [r1, #0]
 80204c8:	bf18      	it	ne
 80204ca:	2300      	movne	r3, #0
 80204cc:	eba6 0807 	sub.w	r8, r6, r7
 80204d0:	608b      	str	r3, [r1, #8]
 80204d2:	f1b8 0f00 	cmp.w	r8, #0
 80204d6:	dd9c      	ble.n	8020412 <__sflush_r+0x1a>
 80204d8:	6a21      	ldr	r1, [r4, #32]
 80204da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80204dc:	4643      	mov	r3, r8
 80204de:	463a      	mov	r2, r7
 80204e0:	4628      	mov	r0, r5
 80204e2:	47b0      	blx	r6
 80204e4:	2800      	cmp	r0, #0
 80204e6:	dc06      	bgt.n	80204f6 <__sflush_r+0xfe>
 80204e8:	89a3      	ldrh	r3, [r4, #12]
 80204ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80204ee:	81a3      	strh	r3, [r4, #12]
 80204f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80204f4:	e78e      	b.n	8020414 <__sflush_r+0x1c>
 80204f6:	4407      	add	r7, r0
 80204f8:	eba8 0800 	sub.w	r8, r8, r0
 80204fc:	e7e9      	b.n	80204d2 <__sflush_r+0xda>
 80204fe:	bf00      	nop
 8020500:	dfbffffe 	.word	0xdfbffffe

08020504 <_fflush_r>:
 8020504:	b538      	push	{r3, r4, r5, lr}
 8020506:	690b      	ldr	r3, [r1, #16]
 8020508:	4605      	mov	r5, r0
 802050a:	460c      	mov	r4, r1
 802050c:	b913      	cbnz	r3, 8020514 <_fflush_r+0x10>
 802050e:	2500      	movs	r5, #0
 8020510:	4628      	mov	r0, r5
 8020512:	bd38      	pop	{r3, r4, r5, pc}
 8020514:	b118      	cbz	r0, 802051e <_fflush_r+0x1a>
 8020516:	6a03      	ldr	r3, [r0, #32]
 8020518:	b90b      	cbnz	r3, 802051e <_fflush_r+0x1a>
 802051a:	f7ff f98b 	bl	801f834 <__sinit>
 802051e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020522:	2b00      	cmp	r3, #0
 8020524:	d0f3      	beq.n	802050e <_fflush_r+0xa>
 8020526:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020528:	07d0      	lsls	r0, r2, #31
 802052a:	d404      	bmi.n	8020536 <_fflush_r+0x32>
 802052c:	0599      	lsls	r1, r3, #22
 802052e:	d402      	bmi.n	8020536 <_fflush_r+0x32>
 8020530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020532:	f7ff fc2a 	bl	801fd8a <__retarget_lock_acquire_recursive>
 8020536:	4628      	mov	r0, r5
 8020538:	4621      	mov	r1, r4
 802053a:	f7ff ff5d 	bl	80203f8 <__sflush_r>
 802053e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020540:	07da      	lsls	r2, r3, #31
 8020542:	4605      	mov	r5, r0
 8020544:	d4e4      	bmi.n	8020510 <_fflush_r+0xc>
 8020546:	89a3      	ldrh	r3, [r4, #12]
 8020548:	059b      	lsls	r3, r3, #22
 802054a:	d4e1      	bmi.n	8020510 <_fflush_r+0xc>
 802054c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802054e:	f7ff fc1d 	bl	801fd8c <__retarget_lock_release_recursive>
 8020552:	e7dd      	b.n	8020510 <_fflush_r+0xc>

08020554 <__swhatbuf_r>:
 8020554:	b570      	push	{r4, r5, r6, lr}
 8020556:	460c      	mov	r4, r1
 8020558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802055c:	2900      	cmp	r1, #0
 802055e:	b096      	sub	sp, #88	; 0x58
 8020560:	4615      	mov	r5, r2
 8020562:	461e      	mov	r6, r3
 8020564:	da0d      	bge.n	8020582 <__swhatbuf_r+0x2e>
 8020566:	89a3      	ldrh	r3, [r4, #12]
 8020568:	f013 0f80 	tst.w	r3, #128	; 0x80
 802056c:	f04f 0100 	mov.w	r1, #0
 8020570:	bf0c      	ite	eq
 8020572:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8020576:	2340      	movne	r3, #64	; 0x40
 8020578:	2000      	movs	r0, #0
 802057a:	6031      	str	r1, [r6, #0]
 802057c:	602b      	str	r3, [r5, #0]
 802057e:	b016      	add	sp, #88	; 0x58
 8020580:	bd70      	pop	{r4, r5, r6, pc}
 8020582:	466a      	mov	r2, sp
 8020584:	f000 f878 	bl	8020678 <_fstat_r>
 8020588:	2800      	cmp	r0, #0
 802058a:	dbec      	blt.n	8020566 <__swhatbuf_r+0x12>
 802058c:	9901      	ldr	r1, [sp, #4]
 802058e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8020592:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8020596:	4259      	negs	r1, r3
 8020598:	4159      	adcs	r1, r3
 802059a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802059e:	e7eb      	b.n	8020578 <__swhatbuf_r+0x24>

080205a0 <__smakebuf_r>:
 80205a0:	898b      	ldrh	r3, [r1, #12]
 80205a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80205a4:	079d      	lsls	r5, r3, #30
 80205a6:	4606      	mov	r6, r0
 80205a8:	460c      	mov	r4, r1
 80205aa:	d507      	bpl.n	80205bc <__smakebuf_r+0x1c>
 80205ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80205b0:	6023      	str	r3, [r4, #0]
 80205b2:	6123      	str	r3, [r4, #16]
 80205b4:	2301      	movs	r3, #1
 80205b6:	6163      	str	r3, [r4, #20]
 80205b8:	b002      	add	sp, #8
 80205ba:	bd70      	pop	{r4, r5, r6, pc}
 80205bc:	ab01      	add	r3, sp, #4
 80205be:	466a      	mov	r2, sp
 80205c0:	f7ff ffc8 	bl	8020554 <__swhatbuf_r>
 80205c4:	9900      	ldr	r1, [sp, #0]
 80205c6:	4605      	mov	r5, r0
 80205c8:	4630      	mov	r0, r6
 80205ca:	f7fe ff51 	bl	801f470 <_malloc_r>
 80205ce:	b948      	cbnz	r0, 80205e4 <__smakebuf_r+0x44>
 80205d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80205d4:	059a      	lsls	r2, r3, #22
 80205d6:	d4ef      	bmi.n	80205b8 <__smakebuf_r+0x18>
 80205d8:	f023 0303 	bic.w	r3, r3, #3
 80205dc:	f043 0302 	orr.w	r3, r3, #2
 80205e0:	81a3      	strh	r3, [r4, #12]
 80205e2:	e7e3      	b.n	80205ac <__smakebuf_r+0xc>
 80205e4:	89a3      	ldrh	r3, [r4, #12]
 80205e6:	6020      	str	r0, [r4, #0]
 80205e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80205ec:	81a3      	strh	r3, [r4, #12]
 80205ee:	9b00      	ldr	r3, [sp, #0]
 80205f0:	6163      	str	r3, [r4, #20]
 80205f2:	9b01      	ldr	r3, [sp, #4]
 80205f4:	6120      	str	r0, [r4, #16]
 80205f6:	b15b      	cbz	r3, 8020610 <__smakebuf_r+0x70>
 80205f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80205fc:	4630      	mov	r0, r6
 80205fe:	f000 f84d 	bl	802069c <_isatty_r>
 8020602:	b128      	cbz	r0, 8020610 <__smakebuf_r+0x70>
 8020604:	89a3      	ldrh	r3, [r4, #12]
 8020606:	f023 0303 	bic.w	r3, r3, #3
 802060a:	f043 0301 	orr.w	r3, r3, #1
 802060e:	81a3      	strh	r3, [r4, #12]
 8020610:	89a3      	ldrh	r3, [r4, #12]
 8020612:	431d      	orrs	r5, r3
 8020614:	81a5      	strh	r5, [r4, #12]
 8020616:	e7cf      	b.n	80205b8 <__smakebuf_r+0x18>

08020618 <_raise_r>:
 8020618:	291f      	cmp	r1, #31
 802061a:	b538      	push	{r3, r4, r5, lr}
 802061c:	4604      	mov	r4, r0
 802061e:	460d      	mov	r5, r1
 8020620:	d904      	bls.n	802062c <_raise_r+0x14>
 8020622:	2316      	movs	r3, #22
 8020624:	6003      	str	r3, [r0, #0]
 8020626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802062a:	bd38      	pop	{r3, r4, r5, pc}
 802062c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802062e:	b112      	cbz	r2, 8020636 <_raise_r+0x1e>
 8020630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020634:	b94b      	cbnz	r3, 802064a <_raise_r+0x32>
 8020636:	4620      	mov	r0, r4
 8020638:	f000 f852 	bl	80206e0 <_getpid_r>
 802063c:	462a      	mov	r2, r5
 802063e:	4601      	mov	r1, r0
 8020640:	4620      	mov	r0, r4
 8020642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020646:	f000 b839 	b.w	80206bc <_kill_r>
 802064a:	2b01      	cmp	r3, #1
 802064c:	d00a      	beq.n	8020664 <_raise_r+0x4c>
 802064e:	1c59      	adds	r1, r3, #1
 8020650:	d103      	bne.n	802065a <_raise_r+0x42>
 8020652:	2316      	movs	r3, #22
 8020654:	6003      	str	r3, [r0, #0]
 8020656:	2001      	movs	r0, #1
 8020658:	e7e7      	b.n	802062a <_raise_r+0x12>
 802065a:	2400      	movs	r4, #0
 802065c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020660:	4628      	mov	r0, r5
 8020662:	4798      	blx	r3
 8020664:	2000      	movs	r0, #0
 8020666:	e7e0      	b.n	802062a <_raise_r+0x12>

08020668 <raise>:
 8020668:	4b02      	ldr	r3, [pc, #8]	; (8020674 <raise+0xc>)
 802066a:	4601      	mov	r1, r0
 802066c:	6818      	ldr	r0, [r3, #0]
 802066e:	f7ff bfd3 	b.w	8020618 <_raise_r>
 8020672:	bf00      	nop
 8020674:	2000008c 	.word	0x2000008c

08020678 <_fstat_r>:
 8020678:	b538      	push	{r3, r4, r5, lr}
 802067a:	4d07      	ldr	r5, [pc, #28]	; (8020698 <_fstat_r+0x20>)
 802067c:	2300      	movs	r3, #0
 802067e:	4604      	mov	r4, r0
 8020680:	4608      	mov	r0, r1
 8020682:	4611      	mov	r1, r2
 8020684:	602b      	str	r3, [r5, #0]
 8020686:	f7e0 fef8 	bl	800147a <_fstat>
 802068a:	1c43      	adds	r3, r0, #1
 802068c:	d102      	bne.n	8020694 <_fstat_r+0x1c>
 802068e:	682b      	ldr	r3, [r5, #0]
 8020690:	b103      	cbz	r3, 8020694 <_fstat_r+0x1c>
 8020692:	6023      	str	r3, [r4, #0]
 8020694:	bd38      	pop	{r3, r4, r5, pc}
 8020696:	bf00      	nop
 8020698:	20010944 	.word	0x20010944

0802069c <_isatty_r>:
 802069c:	b538      	push	{r3, r4, r5, lr}
 802069e:	4d06      	ldr	r5, [pc, #24]	; (80206b8 <_isatty_r+0x1c>)
 80206a0:	2300      	movs	r3, #0
 80206a2:	4604      	mov	r4, r0
 80206a4:	4608      	mov	r0, r1
 80206a6:	602b      	str	r3, [r5, #0]
 80206a8:	f7e0 fef7 	bl	800149a <_isatty>
 80206ac:	1c43      	adds	r3, r0, #1
 80206ae:	d102      	bne.n	80206b6 <_isatty_r+0x1a>
 80206b0:	682b      	ldr	r3, [r5, #0]
 80206b2:	b103      	cbz	r3, 80206b6 <_isatty_r+0x1a>
 80206b4:	6023      	str	r3, [r4, #0]
 80206b6:	bd38      	pop	{r3, r4, r5, pc}
 80206b8:	20010944 	.word	0x20010944

080206bc <_kill_r>:
 80206bc:	b538      	push	{r3, r4, r5, lr}
 80206be:	4d07      	ldr	r5, [pc, #28]	; (80206dc <_kill_r+0x20>)
 80206c0:	2300      	movs	r3, #0
 80206c2:	4604      	mov	r4, r0
 80206c4:	4608      	mov	r0, r1
 80206c6:	4611      	mov	r1, r2
 80206c8:	602b      	str	r3, [r5, #0]
 80206ca:	f7e0 fe75 	bl	80013b8 <_kill>
 80206ce:	1c43      	adds	r3, r0, #1
 80206d0:	d102      	bne.n	80206d8 <_kill_r+0x1c>
 80206d2:	682b      	ldr	r3, [r5, #0]
 80206d4:	b103      	cbz	r3, 80206d8 <_kill_r+0x1c>
 80206d6:	6023      	str	r3, [r4, #0]
 80206d8:	bd38      	pop	{r3, r4, r5, pc}
 80206da:	bf00      	nop
 80206dc:	20010944 	.word	0x20010944

080206e0 <_getpid_r>:
 80206e0:	f7e0 be62 	b.w	80013a8 <_getpid>

080206e4 <_init>:
 80206e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206e6:	bf00      	nop
 80206e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80206ea:	bc08      	pop	{r3}
 80206ec:	469e      	mov	lr, r3
 80206ee:	4770      	bx	lr

080206f0 <_fini>:
 80206f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206f2:	bf00      	nop
 80206f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80206f6:	bc08      	pop	{r3}
 80206f8:	469e      	mov	lr, r3
 80206fa:	4770      	bx	lr
