
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d544  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004258  0801d6d4  0801d6d4  0002d6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802192c  0802192c  00040094  2**0
                  CONTENTS
  4 .ARM          00000008  0802192c  0802192c  0003192c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021934  08021934  00040094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021934  08021934  00031934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021938  08021938  00031938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0802193c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040094  2**0
                  CONTENTS
 10 .bss          0000c848  20000098  20000098  00040098  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000c8e0  2000c8e0  00040098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040094  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034a4d  00000000  00000000  00040107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008309  00000000  00000000  00074b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000028e0  00000000  00000000  0007ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000021c9  00000000  00000000  0007f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00032885  00000000  00000000  00081909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00039f8e  00000000  00000000  000b418e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f2e6c  00000000  00000000  000ee11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b6c8  00000000  00000000  001e0f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001ec650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d6bc 	.word	0x0801d6bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0801d6bc 	.word	0x0801d6bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b984 	b.w	8000d8c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f81a 	bl	8000ac4 <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__popcountsi2>:
 8000a9c:	0843      	lsrs	r3, r0, #1
 8000a9e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000aa2:	1ac0      	subs	r0, r0, r3
 8000aa4:	0883      	lsrs	r3, r0, #2
 8000aa6:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000aaa:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000aae:	4418      	add	r0, r3
 8000ab0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000ab4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000ab8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000abc:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000ac0:	0e00      	lsrs	r0, r0, #24
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	460d      	mov	r5, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	460f      	mov	r7, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4694      	mov	ip, r2
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0xe2>
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	b143      	cbz	r3, 8000af2 <__udivmoddi4+0x2e>
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	f1c3 0220 	rsb	r2, r3, #32
 8000ae8:	409f      	lsls	r7, r3
 8000aea:	fa20 f202 	lsr.w	r2, r0, r2
 8000aee:	4317      	orrs	r7, r2
 8000af0:	409c      	lsls	r4, r3
 8000af2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000af6:	fa1f f58c 	uxth.w	r5, ip
 8000afa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b08:	fb01 f005 	mul.w	r0, r1, r5
 8000b0c:	4290      	cmp	r0, r2
 8000b0e:	d90a      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b10:	eb1c 0202 	adds.w	r2, ip, r2
 8000b14:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b18:	f080 811c 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	f240 8119 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b22:	3902      	subs	r1, #2
 8000b24:	4462      	add	r2, ip
 8000b26:	1a12      	subs	r2, r2, r0
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b36:	fb00 f505 	mul.w	r5, r0, r5
 8000b3a:	42a5      	cmp	r5, r4
 8000b3c:	d90a      	bls.n	8000b54 <__udivmoddi4+0x90>
 8000b3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b42:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b46:	f080 8107 	bcs.w	8000d58 <__udivmoddi4+0x294>
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	f240 8104 	bls.w	8000d58 <__udivmoddi4+0x294>
 8000b50:	4464      	add	r4, ip
 8000b52:	3802      	subs	r0, #2
 8000b54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b58:	1b64      	subs	r4, r4, r5
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11e      	cbz	r6, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40dc      	lsrs	r4, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	e9c6 4300 	strd	r4, r3, [r6]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0xbc>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80ed 	beq.w	8000d4e <__udivmoddi4+0x28a>
 8000b74:	2100      	movs	r1, #0
 8000b76:	e9c6 0500 	strd	r0, r5, [r6]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b80:	fab3 f183 	clz	r1, r3
 8000b84:	2900      	cmp	r1, #0
 8000b86:	d149      	bne.n	8000c1c <__udivmoddi4+0x158>
 8000b88:	42ab      	cmp	r3, r5
 8000b8a:	d302      	bcc.n	8000b92 <__udivmoddi4+0xce>
 8000b8c:	4282      	cmp	r2, r0
 8000b8e:	f200 80f8 	bhi.w	8000d82 <__udivmoddi4+0x2be>
 8000b92:	1a84      	subs	r4, r0, r2
 8000b94:	eb65 0203 	sbc.w	r2, r5, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d0e2      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ba4:	e7df      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba6:	b902      	cbnz	r2, 8000baa <__udivmoddi4+0xe6>
 8000ba8:	deff      	udf	#255	; 0xff
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	f040 8090 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb4:	1a8a      	subs	r2, r1, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bc4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bc8:	0c22      	lsrs	r2, r4, #16
 8000bca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bce:	fb0e f005 	mul.w	r0, lr, r5
 8000bd2:	4290      	cmp	r0, r2
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bda:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4290      	cmp	r0, r2
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2b8>
 8000be6:	4645      	mov	r5, r8
 8000be8:	1a12      	subs	r2, r2, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x14e>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x14c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2c2>
 8000c10:	4610      	mov	r0, r2
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c1a:	e79f      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c1c:	f1c1 0720 	rsb	r7, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c32:	40fd      	lsrs	r5, r7
 8000c34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	fb09 5518 	mls	r5, r9, r8, r5
 8000c46:	0c1c      	lsrs	r4, r3, #16
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	fa00 f001 	lsl.w	r0, r0, r1
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2b4>
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2b4>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4464      	add	r4, ip
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	b29d      	uxth	r5, r3
 8000c78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c88:	45a6      	cmp	lr, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2ac>
 8000c96:	45a6      	cmp	lr, r4
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2ac>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	4464      	add	r4, ip
 8000c9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca2:	fba3 9502 	umull	r9, r5, r3, r2
 8000ca6:	eba4 040e 	sub.w	r4, r4, lr
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46ae      	mov	lr, r5
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x29c>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x298>
 8000cb4:	b156      	cbz	r6, 8000ccc <__udivmoddi4+0x208>
 8000cb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cba:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc2:	40ca      	lsrs	r2, r1
 8000cc4:	40cc      	lsrs	r4, r1
 8000cc6:	4317      	orrs	r7, r2
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	f1c3 0120 	rsb	r1, r3, #32
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ce4:	409d      	lsls	r5, r3
 8000ce6:	432a      	orrs	r2, r5
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cf8:	0c11      	lsrs	r1, r2, #16
 8000cfa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cfe:	fb00 f50e 	mul.w	r5, r0, lr
 8000d02:	428d      	cmp	r5, r1
 8000d04:	fa04 f403 	lsl.w	r4, r4, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x258>
 8000d0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d14:	428d      	cmp	r5, r1
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4461      	add	r1, ip
 8000d1c:	1b49      	subs	r1, r1, r5
 8000d1e:	b292      	uxth	r2, r2
 8000d20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d24:	fb07 1115 	mls	r1, r7, r5, r1
 8000d28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d30:	4291      	cmp	r1, r2
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x282>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2a8>
 8000d3e:	4291      	cmp	r1, r2
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2a8>
 8000d42:	3d02      	subs	r5, #2
 8000d44:	4462      	add	r2, ip
 8000d46:	1a52      	subs	r2, r2, r1
 8000d48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0xfc>
 8000d4e:	4631      	mov	r1, r6
 8000d50:	4630      	mov	r0, r6
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000d54:	4639      	mov	r1, r7
 8000d56:	e6e6      	b.n	8000b26 <__udivmoddi4+0x62>
 8000d58:	4610      	mov	r0, r2
 8000d5a:	e6fb      	b.n	8000b54 <__udivmoddi4+0x90>
 8000d5c:	4548      	cmp	r0, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6c:	4645      	mov	r5, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d70:	462b      	mov	r3, r5
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x258>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7c:	3d02      	subs	r5, #2
 8000d7e:	4462      	add	r2, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e70a      	b.n	8000b9c <__udivmoddi4+0xd8>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x14e>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <IniciarFileSystem>:
 *         - Criação de diretórios;
 *         - Leitura do arquivo de configurações;
 * @retval None
 */

void IniciarFileSystem(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0

	int erro;

	LOG("Iniciando memoria flash\r\n");
 8000d96:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <IniciarFileSystem+0x30>)
 8000d98:	f01b fc22 	bl	801c5e0 <puts>

	//inicializa a lib da
	if (W25qxx_Init()) {
 8000d9c:	f01a fec2 	bl	801bb24 <W25qxx_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d007      	beq.n	8000db6 <IniciarFileSystem+0x26>

		LFS_Config();
 8000da6:	f000 f9b5 	bl	8001114 <LFS_Config>

		erro = FS_InicializarFileSystem(&lfs);
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <IniciarFileSystem+0x34>)
 8000dac:	f000 fa72 	bl	8001294 <FS_InicializarFileSystem>
 8000db0:	6078      	str	r0, [r7, #4]

		if (erro == LFS_ERR_OK)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0

		return 0;
	}

	return 1;
 8000db6:	bf00      	nop
}
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	0801d6d4 	.word	0x0801d6d4
 8000dc4:	200000b4 	.word	0x200000b4

08000dc8 <TestarFileSystem>:
	return err;
}



void TestarFileSystem() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0a6      	sub	sp, #152	; 0x98
 8000dcc:	af00      	add	r7, sp, #0



	 lfs_file_t arq;

	FS_CriarDiretorio(&lfs, "teste");
 8000dce:	491c      	ldr	r1, [pc, #112]	; (8000e40 <TestarFileSystem+0x78>)
 8000dd0:	481c      	ldr	r0, [pc, #112]	; (8000e44 <TestarFileSystem+0x7c>)
 8000dd2:	f000 faa1 	bl	8001318 <FS_CriarDiretorio>


	//qqCriarArquivos(4096, 20);

	//CriarArquivos(2048, 80);
	LerArquivos();
 8000dd6:	f000 f83d 	bl	8000e54 <LerArquivos>



	uint8_t teste [] = {10,11,12,13,14,15,16,17,18,19,20};
 8000dda:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <TestarFileSystem+0x80>)
 8000ddc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000de0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000de2:	c303      	stmia	r3!, {r0, r1}
 8000de4:	801a      	strh	r2, [r3, #0]
 8000de6:	3302      	adds	r3, #2
 8000de8:	0c12      	lsrs	r2, r2, #16
 8000dea:	701a      	strb	r2, [r3, #0]
    uint8_t teste1 [40] ={0};
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	2224      	movs	r2, #36	; 0x24
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f01b fd1b 	bl	801c834 <memset>
    uint8_t teste3 [10] = {21,22,23,24,25,26,27,28,29};
 8000dfe:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <TestarFileSystem+0x84>)
 8000e00:	463b      	mov	r3, r7
 8000e02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e04:	c303      	stmia	r3!, {r0, r1}
 8000e06:	801a      	strh	r2, [r3, #0]
    //FS_FecharArquivo(lfs, &arq);


	//LerArquivos();

	FS_AbrirArquivo(&lfs, &arq, "teste/facm.log", LFS_O_CREAT | LFS_O_RDWR);
 8000e08:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000e0c:	f240 1303 	movw	r3, #259	; 0x103
 8000e10:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <TestarFileSystem+0x88>)
 8000e12:	480c      	ldr	r0, [pc, #48]	; (8000e44 <TestarFileSystem+0x7c>)
 8000e14:	f000 fa9e 	bl	8001354 <FS_AbrirArquivo>

	lfs_ssize_t bytesLidos  = FS_LerArquivo(&lfs, &arq, &teste1, 40);
 8000e18:	f107 020c 	add.w	r2, r7, #12
 8000e1c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000e20:	2328      	movs	r3, #40	; 0x28
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <TestarFileSystem+0x7c>)
 8000e24:	f000 fb00 	bl	8001428 <FS_LerArquivo>
 8000e28:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

	FS_FecharArquivo(&lfs, &arq);
 8000e2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e30:	4619      	mov	r1, r3
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <TestarFileSystem+0x7c>)
 8000e34:	f000 face 	bl	80013d4 <FS_FecharArquivo>

	//LerArquivos();



}
 8000e38:	bf00      	nop
 8000e3a:	3798      	adds	r7, #152	; 0x98
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	0801d6f0 	.word	0x0801d6f0
 8000e44:	200000b4 	.word	0x200000b4
 8000e48:	0801d708 	.word	0x0801d708
 8000e4c:	0801d714 	.word	0x0801d714
 8000e50:	0801d6f8 	.word	0x0801d6f8

08000e54 <LerArquivos>:

//-----------------------------------------------------------------
// Lê os arquivos
//-----------------------------------------------------------------
void LerArquivos(void)
{
 8000e54:	b5b0      	push	{r4, r5, r7, lr}
 8000e56:	ed2d 8b02 	vpush	{d8}
 8000e5a:	b0ee      	sub	sp, #440	; 0x1b8
 8000e5c:	af00      	add	r7, sp, #0
	//FINFO info;
	struct lfs_info info;
	lfs_dir_t dir;
	int status;
	char *s = malloc(100);
 8000e5e:	2064      	movs	r0, #100	; 0x64
 8000e60:	f01b f98a 	bl	801c178 <malloc>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	float taxa;
	int tamArq;

	// 'info.fileID' must initially be set to 0.

	testeFlash.min = 1000000000;
 8000e6a:	4b9a      	ldr	r3, [pc, #616]	; (80010d4 <LerArquivos+0x280>)
 8000e6c:	4a9a      	ldr	r2, [pc, #616]	; (80010d8 <LerArquivos+0x284>)
 8000e6e:	601a      	str	r2, [r3, #0]
	testeFlash.med = 0;
 8000e70:	4998      	ldr	r1, [pc, #608]	; (80010d4 <LerArquivos+0x280>)
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	f04f 0300 	mov.w	r3, #0
 8000e7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	testeFlash.max = 0;
 8000e7e:	4b95      	ldr	r3, [pc, #596]	; (80010d4 <LerArquivos+0x280>)
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
	testeFlash.n = 0;
 8000e86:	4b93      	ldr	r3, [pc, #588]	; (80010d4 <LerArquivos+0x280>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]

	status = lfs_dir_open(&lfs, &dir, "teste");
 8000e8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e90:	4a92      	ldr	r2, [pc, #584]	; (80010dc <LerArquivos+0x288>)
 8000e92:	4619      	mov	r1, r3
 8000e94:	4892      	ldr	r0, [pc, #584]	; (80010e0 <LerArquivos+0x28c>)
 8000e96:	f00e fa33 	bl	800f300 <lfs_dir_open>
 8000e9a:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
	if (status == LFS_ERR_OK)
 8000e9e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f040 8107 	bne.w	80010b6 <LerArquivos+0x262>
	{
		LOG2("Lendo arquivos \r\n");
 8000ea8:	488e      	ldr	r0, [pc, #568]	; (80010e4 <LerArquivos+0x290>)
 8000eaa:	f01b fb99 	bl	801c5e0 <puts>
		//while (ffind ("*.*",&info) == 0)
		while (lfs_dir_read(&lfs, &dir, &info))
 8000eae:	e0c9      	b.n	8001044 <LerArquivos+0x1f0>
		{
			LOG2("[Info] %-32s %5d bytes, ID: %04d  \r\n", info.name, info.size);
 8000eb0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000eb4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4889      	ldr	r0, [pc, #548]	; (80010e8 <LerArquivos+0x294>)
 8000ec4:	f01b fb26 	bl	801c514 <iprintf>
			//LOG_(s);

			//if (info.attrib & ATTR_DIRECTORY)
			if (info.type == LFS_TYPE_DIR)
 8000ec8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000ecc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d100      	bne.n	8000ed8 <LerArquivos+0x84>
				continue;
 8000ed6:	e0b5      	b.n	8001044 <LerArquivos+0x1f0>
			tamArq = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
			LOG3("Lendo arquivo "); LOG3(info.name); LOG3(" ... ");
 8000ede:	4883      	ldr	r0, [pc, #524]	; (80010ec <LerArquivos+0x298>)
 8000ee0:	f01b fb18 	bl	801c514 <iprintf>
 8000ee4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ee8:	3308      	adds	r3, #8
 8000eea:	4618      	mov	r0, r3
 8000eec:	f01b fb12 	bl	801c514 <iprintf>
 8000ef0:	487f      	ldr	r0, [pc, #508]	; (80010f0 <LerArquivos+0x29c>)
 8000ef2:	f01b fb0f 	bl	801c514 <iprintf>
			//LER_TECLA
			start_t = HAL_GetTick();
 8000ef6:	f001 f81f 	bl	8001f38 <HAL_GetTick>
 8000efa:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
//        int lidos;
//        while ((lidos = fread(&linha[0], 1, 30, arq)) == 30)
//          tamArq += lidos; //strlen(linha);
//        fclose(arq);

			sprintf(s, "teste/%s", info.name);
 8000efe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f02:	3308      	adds	r3, #8
 8000f04:	461a      	mov	r2, r3
 8000f06:	497b      	ldr	r1, [pc, #492]	; (80010f4 <LerArquivos+0x2a0>)
 8000f08:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8000f0c:	f01b fb70 	bl	801c5f0 <siprintf>
			int erro = lfs_file_open(&lfs, &arq, s, LFS_O_RDONLY);
 8000f10:	f107 0108 	add.w	r1, r7, #8
 8000f14:	2301      	movs	r3, #1
 8000f16:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8000f1a:	4871      	ldr	r0, [pc, #452]	; (80010e0 <LerArquivos+0x28c>)
 8000f1c:	f00e f94a 	bl	800f1b4 <lfs_file_open>
 8000f20:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
			if (erro == LFS_ERR_OK)
 8000f24:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f040 8088 	bne.w	800103e <LerArquivos+0x1ea>
			{
				char buffer[2];
				//while (fgets (linha, 100, arq) != NULL)
				//while ((c = fgetc(arq)) != EOF)
				while (lfs_file_read(&lfs, &arq, buffer, 1) == 1)
 8000f2e:	e004      	b.n	8000f3a <LerArquivos+0xe6>
				{
					tamArq++; //strlen(linha);
 8000f30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f34:	3301      	adds	r3, #1
 8000f36:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
				while (lfs_file_read(&lfs, &arq, buffer, 1) == 1)
 8000f3a:	1d3a      	adds	r2, r7, #4
 8000f3c:	f107 0108 	add.w	r1, r7, #8
 8000f40:	2301      	movs	r3, #1
 8000f42:	4867      	ldr	r0, [pc, #412]	; (80010e0 <LerArquivos+0x28c>)
 8000f44:	f00e f996 	bl	800f274 <lfs_file_read>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d0f0      	beq.n	8000f30 <LerArquivos+0xdc>
				}
				//fclose(arq);
				lfs_file_close(&lfs, &arq);
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4619      	mov	r1, r3
 8000f54:	4862      	ldr	r0, [pc, #392]	; (80010e0 <LerArquivos+0x28c>)
 8000f56:	f00e f961 	bl	800f21c <lfs_file_close>
				end_t = HAL_GetTick();
 8000f5a:	f000 ffed 	bl	8001f38 <HAL_GetTick>
 8000f5e:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c

				LOG3("OK - ");
 8000f62:	4865      	ldr	r0, [pc, #404]	; (80010f8 <LerArquivos+0x2a4>)
 8000f64:	f01b fad6 	bl	801c514 <iprintf>
				n = (unsigned int) (end_t - start_t);
 8000f68:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
				LOG3("Tempo de execucao = %d ms - ", n);
 8000f76:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8000f7a:	4860      	ldr	r0, [pc, #384]	; (80010fc <LerArquivos+0x2a8>)
 8000f7c:	f01b faca 	bl	801c514 <iprintf>

				taxa = (float) tamArq / n * 1000.0;
 8000f80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f8c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f9c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001100 <LerArquivos+0x2ac>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	edc7 7a6d 	vstr	s15, [r7, #436]	; 0x1b4

				if (taxa > 0)
 8000fa8:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 8000fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb4:	dd33      	ble.n	800101e <LerArquivos+0x1ca>
				{
					if (taxa < testeFlash.min)
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <LerArquivos+0x280>)
 8000fb8:	edd3 7a00 	vldr	s15, [r3]
 8000fbc:	ed97 7a6d 	vldr	s14, [r7, #436]	; 0x1b4
 8000fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	d503      	bpl.n	8000fd2 <LerArquivos+0x17e>
						testeFlash.min = taxa;
 8000fca:	4a42      	ldr	r2, [pc, #264]	; (80010d4 <LerArquivos+0x280>)
 8000fcc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000fd0:	6013      	str	r3, [r2, #0]
					if (taxa > testeFlash.max)
 8000fd2:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <LerArquivos+0x280>)
 8000fd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fd8:	ed97 7a6d 	vldr	s14, [r7, #436]	; 0x1b4
 8000fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	dd03      	ble.n	8000fee <LerArquivos+0x19a>
						testeFlash.max = taxa;
 8000fe6:	4a3b      	ldr	r2, [pc, #236]	; (80010d4 <LerArquivos+0x280>)
 8000fe8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000fec:	6113      	str	r3, [r2, #16]
					testeFlash.n++;
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <LerArquivos+0x280>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a37      	ldr	r2, [pc, #220]	; (80010d4 <LerArquivos+0x280>)
 8000ff6:	6153      	str	r3, [r2, #20]
					testeFlash.med += taxa;
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <LerArquivos+0x280>)
 8000ffa:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000ffe:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8001002:	f7ff faa1 	bl	8000548 <__aeabi_f2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff f93d 	bl	800028c <__adddf3>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	492f      	ldr	r1, [pc, #188]	; (80010d4 <LerArquivos+0x280>)
 8001018:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800101c:	e003      	b.n	8001026 <LerArquivos+0x1d2>
				}
				else
					taxa = 1;
 800101e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001022:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

				LOG3("Tamanho do arquivo = %d bytes - taxa %5.3f bytes/s\r\n", tamArq, taxa);
 8001026:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 800102a:	f7ff fa8d 	bl	8000548 <__aeabi_f2d>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8001036:	4833      	ldr	r0, [pc, #204]	; (8001104 <LerArquivos+0x2b0>)
 8001038:	f01b fa6c 	bl	801c514 <iprintf>
 800103c:	e002      	b.n	8001044 <LerArquivos+0x1f0>
				//LOG(linha);
				//LER_TECLA
			}
			else
			{
				LOG2("[Erro] Nao foi possivel abrir o arquivo!\r\n");
 800103e:	4832      	ldr	r0, [pc, #200]	; (8001108 <LerArquivos+0x2b4>)
 8001040:	f01b face 	bl	801c5e0 <puts>
		while (lfs_dir_read(&lfs, &dir, &info))
 8001044:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001048:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800104c:	4619      	mov	r1, r3
 800104e:	4824      	ldr	r0, [pc, #144]	; (80010e0 <LerArquivos+0x28c>)
 8001050:	f00e f99e 	bl	800f390 <lfs_dir_read>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	f47f af2a 	bne.w	8000eb0 <LerArquivos+0x5c>
			}

			//LER_TECLA
		}
		lfs_dir_close(&lfs, &dir);
 800105c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001060:	4619      	mov	r1, r3
 8001062:	481f      	ldr	r0, [pc, #124]	; (80010e0 <LerArquivos+0x28c>)
 8001064:	f00e f97e 	bl	800f364 <lfs_dir_close>
		LOG2("[Info] Taxa leitura min/med/max: %d/%d/%d\r\n", (int )testeFlash.min, (int )(testeFlash.med / testeFlash.n), (int )testeFlash.max);
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <LerArquivos+0x280>)
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <LerArquivos+0x280>)
 8001074:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <LerArquivos+0x280>)
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa51 	bl	8000524 <__aeabi_i2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4620      	mov	r0, r4
 8001088:	4629      	mov	r1, r5
 800108a:	f7ff fbdf 	bl	800084c <__aeabi_ddiv>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fcc1 	bl	8000a1c <__aeabi_d2iz>
 800109a:	4602      	mov	r2, r0
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <LerArquivos+0x280>)
 800109e:	edd3 7a04 	vldr	s15, [r3, #16]
 80010a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a6:	ee17 3a90 	vmov	r3, s15
 80010aa:	ee18 1a10 	vmov	r1, s16
 80010ae:	4817      	ldr	r0, [pc, #92]	; (800110c <LerArquivos+0x2b8>)
 80010b0:	f01b fa30 	bl	801c514 <iprintf>
 80010b4:	e002      	b.n	80010bc <LerArquivos+0x268>
	}
	else
		LOG2("Erro ao abrir diretorio 'teste'");
 80010b6:	4816      	ldr	r0, [pc, #88]	; (8001110 <LerArquivos+0x2bc>)
 80010b8:	f01b fa2c 	bl	801c514 <iprintf>
	free(s);
 80010bc:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 80010c0:	f01b f862 	bl	801c188 <free>
}
 80010c4:	bf00      	nop
 80010c6:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	ecbd 8b02 	vpop	{d8}
 80010d0:	bdb0      	pop	{r4, r5, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000130 	.word	0x20000130
 80010d8:	4e6e6b28 	.word	0x4e6e6b28
 80010dc:	0801d6f0 	.word	0x0801d6f0
 80010e0:	200000b4 	.word	0x200000b4
 80010e4:	0801d720 	.word	0x0801d720
 80010e8:	0801d734 	.word	0x0801d734
 80010ec:	0801d75c 	.word	0x0801d75c
 80010f0:	0801d76c 	.word	0x0801d76c
 80010f4:	0801d774 	.word	0x0801d774
 80010f8:	0801d780 	.word	0x0801d780
 80010fc:	0801d788 	.word	0x0801d788
 8001100:	447a0000 	.word	0x447a0000
 8001104:	0801d7a8 	.word	0x0801d7a8
 8001108:	0801d7e0 	.word	0x0801d7e0
 800110c:	0801d80c 	.word	0x0801d80c
 8001110:	0801d838 	.word	0x0801d838

08001114 <LFS_Config>:
struct lfs_config littlefs_config;

// na Struct de configuracao abaixo preve a possibilidade de aumento da memória flash da mesma familia, tendo suporte as memórias de até 4Mb
//caso exista uma reducao de tamanho reajustar os valores do parametro littlefs_config.block_count o qual subtrai 128Kb para o bootloader do STM32F072

void LFS_Config(void) {
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0



	// block device operation

	littlefs_config.read = lsfs_read;
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <LFS_Config+0x68>)
 800111a:	4a19      	ldr	r2, [pc, #100]	; (8001180 <LFS_Config+0x6c>)
 800111c:	605a      	str	r2, [r3, #4]
	littlefs_config.prog = lsfs_prog;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <LFS_Config+0x68>)
 8001120:	4a18      	ldr	r2, [pc, #96]	; (8001184 <LFS_Config+0x70>)
 8001122:	609a      	str	r2, [r3, #8]
	littlefs_config.erase = lsfs_erase;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <LFS_Config+0x68>)
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <LFS_Config+0x74>)
 8001128:	60da      	str	r2, [r3, #12]
	littlefs_config.sync = lsfs_sync;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <LFS_Config+0x68>)
 800112c:	4a17      	ldr	r2, [pc, #92]	; (800118c <LFS_Config+0x78>)
 800112e:	611a      	str	r2, [r3, #16]
	// block device configuration
	// Minimum size of a block read in bytes. All read operations will be a
	// multiple of this value.

	//Recebe o tamanho de pagina da memoria da lib
	littlefs_config.read_size = w25q->PageSize;
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <LFS_Config+0x7c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	895b      	ldrh	r3, [r3, #10]
 8001136:	461a      	mov	r2, r3
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <LFS_Config+0x68>)
 800113a:	615a      	str	r2, [r3, #20]

	// Minimum size of a block program in bytes. All program operations will be
	// a multiple of this value.

	//Recebe o tamanho de pagina da memoria da lin
	littlefs_config.prog_size = w25q->PageSize;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <LFS_Config+0x7c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	895b      	ldrh	r3, [r3, #10]
 8001142:	461a      	mov	r2, r3
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <LFS_Config+0x68>)
 8001146:	619a      	str	r2, [r3, #24]
	// and may be larger than the physical erase size. However, non-inlined
	// files take up at minimum one block. Must be a multiple of the read and
	// program sizes.

	//Recebe o tamanho do setor da lib
	littlefs_config.block_size = w25q->SectorSize;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <LFS_Config+0x7c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LFS_Config+0x68>)
 8001150:	61d3      	str	r3, [r2, #28]

	// Number of erasable blocks on the device.
	//Recebe a quantidade setores subtraindo 128Kb para atualizacao de firmware

	//(524288 bytes - 131072 bytes = (393.216 / 4096) = 96 block
	littlefs_config.block_count = w25q->SectorCount; // = 4096 * 32 = 131702
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <LFS_Config+0x7c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	4a08      	ldr	r2, [pc, #32]	; (800117c <LFS_Config+0x68>)
 800115a:	6213      	str	r3, [r2, #32]
	// Size of block caches in bytes. Each cache buffers a portion of a block in
	// RAM. The littlefs needs a read cache, a program cache, and one additional
	// cache per file. Larger caches can improve performance by storing more
	// data and reducing the number of disk accesses. Must be a multiple of the
	// read and program sizes, and a factor of the block size.
	littlefs_config.cache_size = 1024;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <LFS_Config+0x68>)
 800115e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
	// can track 8 blocks. Must be a multiple of 8.

	//Melhor config para desempenho
	//littlefs_config.lookahead_size = (littlefs_config.block_count / 8) + 52  ; //>= block count /8

	littlefs_config.lookahead_size = 256;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <LFS_Config+0x68>)
 8001166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
	// Number of erase cycles before littlefs evicts metadata logs and moves
	// the metadata to another block. Suggested values are in the
	// range 100-1000, with large values having better performance at the cost
	// of less consistent wear distribution.
	// Set to -1 to disable block-level wear-leveling.
	littlefs_config.block_cycles = 100;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <LFS_Config+0x68>)
 800116e:	2264      	movs	r2, #100	; 0x64
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
	//parametros não necessários
	//.name_max = LFS_NAME_MAX,
	//.file_max = LFS_FILE_MAX
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	20000148 	.word	0x20000148
 8001180:	08001195 	.word	0x08001195
 8001184:	080011c5 	.word	0x080011c5
 8001188:	080011f5 	.word	0x080011f5
 800118c:	0800120f 	.word	0x0800120f
 8001190:	20000000 	.word	0x20000000

08001194 <lsfs_read>:
//--------------------------------------------------------------------------------------------------

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de leitura
 */
int lsfs_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	603b      	str	r3, [r7, #0]

	if (W25qxx_ReadSector((uint8_t*) buffer, block, off, size)) {
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f01a ff63 	bl	801c074 <W25qxx_ReadSector>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <lsfs_read+0x24>

		LOG2("Leitura da flash no  - bloco %lu - off %lu - %lu bytes lidos\r\n", block, off, size);

		return LFS_ERR_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e001      	b.n	80011bc <lsfs_read+0x28>

	} else {

	  return LFS_ERR_CORRUPT;
 80011b8:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}

}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <lsfs_prog>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de escrita
 */

int lsfs_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]

	if (W25qxx_WriteSector((uint8_t*) buffer, block, off, size)) {
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	68b9      	ldr	r1, [r7, #8]
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f01a fe69 	bl	801beb0 <W25qxx_WriteSector>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <lsfs_prog+0x24>

		LOG2("Escrita da flash no - bloco %lu - off %lu  - %lu bytes escritos\r\n", block, off, size);

		return LFS_ERR_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e001      	b.n	80011ec <lsfs_prog+0x28>

	} else {

		return LFS_ERR_CORRUPT;
 80011e8:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <lsfs_erase>:
//--------------------------------------------------------------------------------------------------

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de apagamento (erase)
 */
int lsfs_erase(const struct lfs_config *c, lfs_block_t block) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]

  	 W25qxx_EraseSector(block);
 80011fe:	6838      	ldr	r0, [r7, #0]
 8001200:	f01a fd62 	bl	801bcc8 <W25qxx_EraseSector>

	return LFS_ERR_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <lsfs_sync>:
/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de sincronismo
 * 		  (para a Flash NAND esta função não é necessária, apenas retorna OK)
 */

int lsfs_sync(const struct lfs_config *c) {
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]

	return LFS_ERR_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <FS_Montar>:
/**
 * @brief Funcao que monta o FileSystem
 * @retval int C�digo de erro
 */
int FS_Montar(lfs_t *lfs)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  int status = lfs_mount(lfs, &littlefs_config);
 800122c:	4916      	ldr	r1, [pc, #88]	; (8001288 <FS_Montar+0x64>)
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f00d ffaa 	bl	800f188 <lfs_mount>
 8001234:	60f8      	str	r0, [r7, #12]
  if (status != LFS_ERR_OK)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01f      	beq.n	800127c <FS_Montar+0x58>
  {
    LOG("Erro ao montar FS - Cod Erro = [%5i]\r\n", status);
 800123c:	68f9      	ldr	r1, [r7, #12]
 800123e:	4813      	ldr	r0, [pc, #76]	; (800128c <FS_Montar+0x68>)
 8001240:	f01b f968 	bl	801c514 <iprintf>

    int nTentativas = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]

    while (status != LFS_ERR_OK && status != LFS_ERR_NOMEM /*&& status != LFS_ERR_NOENT*/&& ++nTentativas < 10)
 8001248:	e00b      	b.n	8001262 <FS_Montar+0x3e>
    {

    	HAL_Delay(50);
 800124a:	2032      	movs	r0, #50	; 0x32
 800124c:	f000 fe80 	bl	8001f50 <HAL_Delay>

      //osDelay(50);
      status = lfs_mount(lfs, &littlefs_config);
 8001250:	490d      	ldr	r1, [pc, #52]	; (8001288 <FS_Montar+0x64>)
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f00d ff98 	bl	800f188 <lfs_mount>
 8001258:	60f8      	str	r0, [r7, #12]
      LOG("Tentando novamente, lfs_mount - Cod Erro = [%5i]\r\n", status);
 800125a:	68f9      	ldr	r1, [r7, #12]
 800125c:	480c      	ldr	r0, [pc, #48]	; (8001290 <FS_Montar+0x6c>)
 800125e:	f01b f959 	bl	801c514 <iprintf>
    while (status != LFS_ERR_OK && status != LFS_ERR_NOMEM /*&& status != LFS_ERR_NOENT*/&& ++nTentativas < 10)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d009      	beq.n	800127c <FS_Montar+0x58>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f113 0f0c 	cmn.w	r3, #12
 800126e:	d005      	beq.n	800127c <FS_Montar+0x58>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	3301      	adds	r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	2b09      	cmp	r3, #9
 800127a:	dde6      	ble.n	800124a <FS_Montar+0x26>
    }
  }
  return status;
 800127c:	68fb      	ldr	r3, [r7, #12]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000148 	.word	0x20000148
 800128c:	0801dab8 	.word	0x0801dab8
 8001290:	0801dae0 	.word	0x0801dae0

08001294 <FS_InicializarFileSystem>:
/**
 * @brief Função de inicializa o FileSystem
 * @retval int Código de erro
 */
int FS_InicializarFileSystem(lfs_t *lfs)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  LOG("Iniciando FileSystem ...\r\n");
 800129c:	4818      	ldr	r0, [pc, #96]	; (8001300 <FS_InicializarFileSystem+0x6c>)
 800129e:	f01b f99f 	bl	801c5e0 <puts>
  /* creation of SemaforoFS */
  //SemaforoFSHandle = osSemaphoreNew(1, 1, &SemaforoFS_attributes);
#endif

  // mount the filesystem
  int err = FS_Montar(lfs);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffbe 	bl	8001224 <FS_Montar>
 80012a8:	60f8      	str	r0, [r7, #12]
  if (err)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d016      	beq.n	80012de <FS_InicializarFileSystem+0x4a>
    // reformat if we can't mount the filesystem
    // this should only happen on the first boot
    //debug_flash = 1;
    //LOG("Erro ao montar FileSystem - Cod Erro = [%5i]\r\n", err);
    //LOG("Formatando flash... ");
    err = lfs_format(lfs, &littlefs_config);
 80012b0:	4914      	ldr	r1, [pc, #80]	; (8001304 <FS_InicializarFileSystem+0x70>)
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f00d ff52 	bl	800f15c <lfs_format>
 80012b8:	60f8      	str	r0, [r7, #12]
    if (err)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <FS_InicializarFileSystem+0x38>
    {
      LOG("Erro ao formatar - Cod Erro = [%5i]\r\n", err);
 80012c0:	68f9      	ldr	r1, [r7, #12]
 80012c2:	4811      	ldr	r0, [pc, #68]	; (8001308 <FS_InicializarFileSystem+0x74>)
 80012c4:	f01b f926 	bl	801c514 <iprintf>
      return err;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	e015      	b.n	80012f8 <FS_InicializarFileSystem+0x64>
    }
    LOG("Formatacao realizada com sucesso - Cod Erro = [%5i]\r\n", err);
 80012cc:	68f9      	ldr	r1, [r7, #12]
 80012ce:	480f      	ldr	r0, [pc, #60]	; (800130c <FS_InicializarFileSystem+0x78>)
 80012d0:	f01b f920 	bl	801c514 <iprintf>
    err = lfs_mount(lfs, &littlefs_config);
 80012d4:	490b      	ldr	r1, [pc, #44]	; (8001304 <FS_InicializarFileSystem+0x70>)
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f00d ff56 	bl	800f188 <lfs_mount>
 80012dc:	60f8      	str	r0, [r7, #12]
    //debug_flash = 0;
  }
  if (err)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d004      	beq.n	80012ee <FS_InicializarFileSystem+0x5a>
    LOG("Erro ao montar FileSystem - Cod Erro = [%5i]\r\n", err);
 80012e4:	68f9      	ldr	r1, [r7, #12]
 80012e6:	480a      	ldr	r0, [pc, #40]	; (8001310 <FS_InicializarFileSystem+0x7c>)
 80012e8:	f01b f914 	bl	801c514 <iprintf>
 80012ec:	e003      	b.n	80012f6 <FS_InicializarFileSystem+0x62>
  else
    LOG("Inicializacao do FileSystem concluida - Cod Erro = %i\r\n", err);
 80012ee:	68f9      	ldr	r1, [r7, #12]
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <FS_InicializarFileSystem+0x80>)
 80012f2:	f01b f90f 	bl	801c514 <iprintf>
  return err;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0801db40 	.word	0x0801db40
 8001304:	20000148 	.word	0x20000148
 8001308:	0801db5c 	.word	0x0801db5c
 800130c:	0801db84 	.word	0x0801db84
 8001310:	0801dbbc 	.word	0x0801dbbc
 8001314:	0801dbec 	.word	0x0801dbec

08001318 <FS_CriarDiretorio>:
  }
  return err;
}

int FS_CriarDiretorio(lfs_t *lfs, const char *path)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  int status = lfs_mkdir(lfs, path);
 8001322:	6839      	ldr	r1, [r7, #0]
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f00d ffd5 	bl	800f2d4 <lfs_mkdir>
 800132a:	60f8      	str	r0, [r7, #12]
  if (status == LFS_ERR_OK)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <FS_CriarDiretorio+0x2c>
    LOG2("Diretorio %s criado com sucesso - ret = %i \r\n", path, status);
  else if (status == LFS_ERR_EXIST)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f113 0f11 	cmn.w	r3, #17
 8001338:	d004      	beq.n	8001344 <FS_CriarDiretorio+0x2c>
    LOG2("Diretorio %s ja existe - ret = %i \r\n", path, status);
  else
    LOG("Erro ao criar Diretorio %s - lfs_mkdir - ret = %i \r\n", path, status);
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	4804      	ldr	r0, [pc, #16]	; (8001350 <FS_CriarDiretorio+0x38>)
 8001340:	f01b f8e8 	bl	801c514 <iprintf>
  return status;
 8001344:	68fb      	ldr	r3, [r7, #12]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0801dc50 	.word	0x0801dc50

08001354 <FS_AbrirArquivo>:
 * @param  path  Ponteiro para a string contendo o path do arquivo
 * @param  flags Flags de controle que definem o modo de operação e funcionamento do arquivo
 * @retval int   Status da operação
 */
int FS_AbrirArquivo(lfs_t *lfs, lfs_file_t *file, const char *path, int flags)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
  int status = lfs_file_open(lfs, file, path, flags);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f00d ff23 	bl	800f1b4 <lfs_file_open>
 800136e:	6178      	str	r0, [r7, #20]

  if (status != LFS_ERR_OK && status != LFS_ERR_NOMEM /*&& status != LFS_ERR_NOENT*/)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d024      	beq.n	80013c0 <FS_AbrirArquivo+0x6c>
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f113 0f0c 	cmn.w	r3, #12
 800137c:	d020      	beq.n	80013c0 <FS_AbrirArquivo+0x6c>
  {
    LOG("Erro lfs_file_open - file %s - ret = %i \r\n", path, status);
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4812      	ldr	r0, [pc, #72]	; (80013cc <FS_AbrirArquivo+0x78>)
 8001384:	f01b f8c6 	bl	801c514 <iprintf>
    int nTentativas = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
    while (status != LFS_ERR_OK && status != LFS_ERR_NOMEM /*&& status != LFS_ERR_NOENT*/&& ++nTentativas < FS_MAX_TENTATIVAS)
 800138c:	e00b      	b.n	80013a6 <FS_AbrirArquivo+0x52>
    {
     // osDelay(1);
      status = lfs_file_open(lfs, file, path, flags);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f00d ff0d 	bl	800f1b4 <lfs_file_open>
 800139a:	6178      	str	r0, [r7, #20]
      LOG("Tentando novamente, lfs_file_open - file %s - ret = %i \r\n", path, status);
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	480b      	ldr	r0, [pc, #44]	; (80013d0 <FS_AbrirArquivo+0x7c>)
 80013a2:	f01b f8b7 	bl	801c514 <iprintf>
    while (status != LFS_ERR_OK && status != LFS_ERR_NOMEM /*&& status != LFS_ERR_NOENT*/&& ++nTentativas < FS_MAX_TENTATIVAS)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <FS_AbrirArquivo+0x6c>
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f113 0f0c 	cmn.w	r3, #12
 80013b2:	d005      	beq.n	80013c0 <FS_AbrirArquivo+0x6c>
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	3301      	adds	r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b18      	cmp	r3, #24
 80013be:	dde6      	ble.n	800138e <FS_AbrirArquivo+0x3a>
    }
  }
//	LOG("lfs_file_open - file %s - ret = %i \r\n", path, status);
  return status;
 80013c0:	697b      	ldr	r3, [r7, #20]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	0801dccc 	.word	0x0801dccc
 80013d0:	0801dcf8 	.word	0x0801dcf8

080013d4 <FS_FecharArquivo>:
 * @param  lfs  Ponteiro para o struct de controle do FileSystem
 * @param  file Ponteiro para o struct de controle do arquivo do FileSystem
 * @retval int  Status da operação
 */
int FS_FecharArquivo(lfs_t *lfs, lfs_file_t *file)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  //***FS_Flush(lfs, file);
  int nTentativas = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  int status = lfs_file_close(lfs, file);
 80013e2:	6839      	ldr	r1, [r7, #0]
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f00d ff19 	bl	800f21c <lfs_file_close>
 80013ea:	60b8      	str	r0, [r7, #8]
  while (status != LFS_ERR_OK && status != LFS_ERR_NOENT && ++nTentativas < FS_MAX_TENTATIVAS)
 80013ec:	e008      	b.n	8001400 <FS_FecharArquivo+0x2c>
  {
    LOG("Erro lfs_file_close - ret = %i \r\n", status);
 80013ee:	68b9      	ldr	r1, [r7, #8]
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <FS_FecharArquivo+0x50>)
 80013f2:	f01b f88f 	bl	801c514 <iprintf>
    //***FS_Flush(lfs, file);
    //osDelay(1);
    status = lfs_file_close(lfs, file);
 80013f6:	6839      	ldr	r1, [r7, #0]
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f00d ff0f 	bl	800f21c <lfs_file_close>
 80013fe:	60b8      	str	r0, [r7, #8]
  while (status != LFS_ERR_OK && status != LFS_ERR_NOENT && ++nTentativas < FS_MAX_TENTATIVAS)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d009      	beq.n	800141a <FS_FecharArquivo+0x46>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f113 0f02 	cmn.w	r3, #2
 800140c:	d005      	beq.n	800141a <FS_FecharArquivo+0x46>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3301      	adds	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b18      	cmp	r3, #24
 8001418:	dde9      	ble.n	80013ee <FS_FecharArquivo+0x1a>
  }
//	LOG("lfs_file_close - ret = %i \r\n", status);
  return status;
 800141a:	68bb      	ldr	r3, [r7, #8]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0801dd34 	.word	0x0801dd34

08001428 <FS_LerArquivo>:
 * @param  path Ponteiro para o buffer que receberá os dados lidos
 * @param  size Quantidade de bytes solicitados para leitura
 * @retval int  Quantidade de bytes lidos
 */
lfs_ssize_t FS_LerArquivo(lfs_t *lfs, lfs_file_t *file, void *buffer, lfs_size_t size)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  lfs_ssize_t qtdBytes = lfs_file_read(lfs, file, buffer, size);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f00d ff19 	bl	800f274 <lfs_file_read>
 8001442:	6178      	str	r0, [r7, #20]
  int nTentativas = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  while (qtdBytes < 0 && ++nTentativas < FS_MAX_TENTATIVAS)
 8001448:	e00a      	b.n	8001460 <FS_LerArquivo+0x38>
  {
    LOG("Erro lfs_file_read - ret = %li \r\n", qtdBytes);
 800144a:	6979      	ldr	r1, [r7, #20]
 800144c:	4810      	ldr	r0, [pc, #64]	; (8001490 <FS_LerArquivo+0x68>)
 800144e:	f01b f861 	bl	801c514 <iprintf>
  //  osDelay(1);
    qtdBytes = lfs_file_read(lfs, file, buffer, size);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f00d ff0b 	bl	800f274 <lfs_file_read>
 800145e:	6178      	str	r0, [r7, #20]
  while (qtdBytes < 0 && ++nTentativas < FS_MAX_TENTATIVAS)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	da05      	bge.n	8001472 <FS_LerArquivo+0x4a>
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	3301      	adds	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2b18      	cmp	r3, #24
 8001470:	ddeb      	ble.n	800144a <FS_LerArquivo+0x22>
  }
  if (qtdBytes != size)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	429a      	cmp	r2, r3
 8001478:	d004      	beq.n	8001484 <FS_LerArquivo+0x5c>
  {
    LOG("Erro lfs_file_read - Quantidade de bytes lidos (%li) diferente do solicitado (%li) \r\n", qtdBytes, size);
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	6979      	ldr	r1, [r7, #20]
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <FS_LerArquivo+0x6c>)
 8001480:	f01b f848 	bl	801c514 <iprintf>
  }
  return qtdBytes;
 8001484:	697b      	ldr	r3, [r7, #20]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	0801ddcc 	.word	0x0801ddcc
 8001494:	0801ddf0 	.word	0x0801ddf0

08001498 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80014a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <vApplicationGetIdleTaskMemory+0x30>)
 80014ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000198 	.word	0x20000198
 80014c8:	20000238 	.word	0x20000238

080014cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <MX_FREERTOS_Init+0x30>)
 80014d4:	1d3c      	adds	r4, r7, #4
 80014d6:	461d      	mov	r5, r3
 80014d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 fc8b 	bl	8005e04 <osThreadCreate>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a03      	ldr	r2, [pc, #12]	; (8001500 <MX_FREERTOS_Init+0x34>)
 80014f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80014f4:	bf00      	nop
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bdb0      	pop	{r4, r5, r7, pc}
 80014fc:	0801df60 	.word	0x0801df60
 8001500:	20000194 	.word	0x20000194

08001504 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800150c:	f003 ff26 	bl	800535c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001510:	2001      	movs	r0, #1
 8001512:	f004 fcc3 	bl	8005e9c <osDelay>
 8001516:	e7fb      	b.n	8001510 <StartDefaultTask+0xc>

08001518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <MX_GPIO_Init+0xd4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a2d      	ldr	r2, [pc, #180]	; (80015ec <MX_GPIO_Init+0xd4>)
 8001538:	f043 0310 	orr.w	r3, r3, #16
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MX_GPIO_Init+0xd4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0310 	and.w	r3, r3, #16
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <MX_GPIO_Init+0xd4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a26      	ldr	r2, [pc, #152]	; (80015ec <MX_GPIO_Init+0xd4>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <MX_GPIO_Init+0xd4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <MX_GPIO_Init+0xd4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <MX_GPIO_Init+0xd4>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MX_GPIO_Init+0xd4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <MX_GPIO_Init+0xd4>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <MX_GPIO_Init+0xd4>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_GPIO_Init+0xd4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_GPIO_Init+0xd4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a11      	ldr	r2, [pc, #68]	; (80015ec <MX_GPIO_Init+0xd4>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_GPIO_Init+0xd4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 80015ba:	2200      	movs	r2, #0
 80015bc:	f24e 1108 	movw	r1, #57608	; 0xe108
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <MX_GPIO_Init+0xd8>)
 80015c2:	f002 f9c3 	bl	800394c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 80015c6:	f24e 1308 	movw	r3, #57608	; 0xe108
 80015ca:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_GPIO_Init+0xd8>)
 80015e0:	f002 f818 	bl	8003614 <HAL_GPIO_Init>

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021000 	.word	0x40021000

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f8:	f000 fc68 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fc:	f000 f80e 	bl	800161c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001600:	f7ff ff8a 	bl	8001518 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001604:	f000 f88c 	bl	8001720 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  /*Initialize lib from winbond memory */
  IniciarFileSystem();
 8001608:	f7ff fbc2 	bl	8000d90 <IniciarFileSystem>

  TestarFileSystem();
 800160c:	f7ff fbdc 	bl	8000dc8 <TestarFileSystem>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001610:	f7ff ff5c 	bl	80014cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001614:	f004 fbdf 	bl	8005dd6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001618:	e7fe      	b.n	8001618 <main+0x24>
	...

0800161c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b094      	sub	sp, #80	; 0x50
 8001620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	f107 0320 	add.w	r3, r7, #32
 8001626:	2230      	movs	r2, #48	; 0x30
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f01b f902 	bl	801c834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <SystemClock_Config+0xcc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <SystemClock_Config+0xcc>)
 800164a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800164e:	6413      	str	r3, [r2, #64]	; 0x40
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <SystemClock_Config+0xcc>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <SystemClock_Config+0xd0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a21      	ldr	r2, [pc, #132]	; (80016ec <SystemClock_Config+0xd0>)
 8001666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <SystemClock_Config+0xd0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001678:	2301      	movs	r3, #1
 800167a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800167c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001682:	2302      	movs	r3, #2
 8001684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800168a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800168c:	2319      	movs	r3, #25
 800168e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 316;
 8001690:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001696:	2302      	movs	r3, #2
 8001698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800169a:	2304      	movs	r3, #4
 800169c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 f96c 	bl	8003980 <HAL_RCC_OscConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016ae:	f000 f831 	bl	8001714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b2:	230f      	movs	r3, #15
 80016b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b6:	2302      	movs	r3, #2
 80016b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2105      	movs	r1, #5
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 fbcd 	bl	8003e70 <HAL_RCC_ClockConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016dc:	f000 f81a 	bl	8001714 <Error_Handler>
  }
}
 80016e0:	bf00      	nop
 80016e2:	3750      	adds	r7, #80	; 0x50
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40007000 	.word	0x40007000

080016f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001702:	f000 fc05 	bl	8001f10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40002000 	.word	0x40002000

08001714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001718:	b672      	cpsid	i
}
 800171a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800171c:	e7fe      	b.n	800171c <Error_Handler+0x8>
	...

08001720 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_SPI2_Init+0x64>)
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <MX_SPI2_Init+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_SPI2_Init+0x64>)
 800172c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_SPI2_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_SPI2_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_SPI2_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_SPI2_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_SPI2_Init+0x64>)
 800174c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001750:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_SPI2_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_SPI2_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI2_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_SPI2_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI2_Init+0x64>)
 800176c:	220a      	movs	r2, #10
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_SPI2_Init+0x64>)
 8001772:	f002 fd7b 	bl	800426c <HAL_SPI_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800177c:	f7ff ffca 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000438 	.word	0x20000438
 8001788:	40003800 	.word	0x40003800

0800178c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a28      	ldr	r2, [pc, #160]	; (800184c <HAL_SPI_MspInit+0xc0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d14a      	bne.n	8001844 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_SPI_MspInit+0xc4>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <HAL_SPI_MspInit+0xc4>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_SPI_MspInit+0xc4>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_SPI_MspInit+0xc4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <HAL_SPI_MspInit+0xc4>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_SPI_MspInit+0xc4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_SPI_MspInit+0xc4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a18      	ldr	r2, [pc, #96]	; (8001850 <HAL_SPI_MspInit+0xc4>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_SPI_MspInit+0xc4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001802:	230c      	movs	r3, #12
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001812:	2305      	movs	r3, #5
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <HAL_SPI_MspInit+0xc8>)
 800181e:	f001 fef9 	bl	8003614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001834:	2305      	movs	r3, #5
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4806      	ldr	r0, [pc, #24]	; (8001858 <HAL_SPI_MspInit+0xcc>)
 8001840:	f001 fee8 	bl	8003614 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40003800 	.word	0x40003800
 8001850:	40023800 	.word	0x40023800
 8001854:	40020800 	.word	0x40020800
 8001858:	40020400 	.word	0x40020400

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_MspInit+0x54>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <HAL_MspInit+0x54>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x54>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_MspInit+0x54>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_MspInit+0x54>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_MspInit+0x54>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	210f      	movs	r1, #15
 800189e:	f06f 0001 	mvn.w	r0, #1
 80018a2:	f000 fc31 	bl	8002108 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	4b33      	ldr	r3, [pc, #204]	; (8001998 <HAL_InitTick+0xe4>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a32      	ldr	r2, [pc, #200]	; (8001998 <HAL_InitTick+0xe4>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
 80018d4:	4b30      	ldr	r3, [pc, #192]	; (8001998 <HAL_InitTick+0xe4>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e0:	f107 0210 	add.w	r2, r7, #16
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fc8c 	bl	8004208 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018fa:	f002 fc71 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 80018fe:	6378      	str	r0, [r7, #52]	; 0x34
 8001900:	e004      	b.n	800190c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001902:	f002 fc6d 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 8001906:	4603      	mov	r3, r0
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190e:	4a23      	ldr	r2, [pc, #140]	; (800199c <HAL_InitTick+0xe8>)
 8001910:	fba2 2303 	umull	r2, r3, r2, r3
 8001914:	0c9b      	lsrs	r3, r3, #18
 8001916:	3b01      	subs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800191a:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_InitTick+0xec>)
 800191c:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <HAL_InitTick+0xf0>)
 800191e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_InitTick+0xec>)
 8001922:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001926:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001928:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_InitTick+0xec>)
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_InitTick+0xec>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001934:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_InitTick+0xec>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_InitTick+0xec>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001940:	4817      	ldr	r0, [pc, #92]	; (80019a0 <HAL_InitTick+0xec>)
 8001942:	f003 fa69 	bl	8004e18 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800194c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001950:	2b00      	cmp	r3, #0
 8001952:	d11b      	bne.n	800198c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001954:	4812      	ldr	r0, [pc, #72]	; (80019a0 <HAL_InitTick+0xec>)
 8001956:	f003 fab9 	bl	8004ecc <HAL_TIM_Base_Start_IT>
 800195a:	4603      	mov	r3, r0
 800195c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001964:	2b00      	cmp	r3, #0
 8001966:	d111      	bne.n	800198c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001968:	202d      	movs	r0, #45	; 0x2d
 800196a:	f000 fbe9 	bl	8002140 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d808      	bhi.n	8001986 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	202d      	movs	r0, #45	; 0x2d
 800197a:	f000 fbc5 	bl	8002108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_InitTick+0xf4>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e002      	b.n	800198c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800198c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001990:	4618      	mov	r0, r3
 8001992:	3738      	adds	r7, #56	; 0x38
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	431bde83 	.word	0x431bde83
 80019a0:	20000490 	.word	0x20000490
 80019a4:	40002000 	.word	0x40002000
 80019a8:	20000008 	.word	0x20000008

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80019de:	f003 fae5 	bl	8004fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000490 	.word	0x20000490

080019ec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <ETH_IRQHandler+0x10>)
 80019f2:	f000 ff39 	bl	8002868 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20004ff8 	.word	0x20004ff8

08001a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return 1;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_kill>:

int _kill(int pid, int sig)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <_kill+0x20>)
 8001a1c:	2216      	movs	r2, #22
 8001a1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	2000c8d8 	.word	0x2000c8d8

08001a34 <_exit>:

void _exit (int status)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffe5 	bl	8001a10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a46:	e7fe      	b.n	8001a46 <_exit+0x12>

08001a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e00a      	b.n	8001a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5a:	f3af 8000 	nop.w
 8001a5e:	4601      	mov	r1, r0
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	60ba      	str	r2, [r7, #8]
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf0      	blt.n	8001a5a <_read+0x12>
  }

  return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e009      	b.n	8001aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	60ba      	str	r2, [r7, #8]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dbf1      	blt.n	8001a94 <_write+0x12>
  }
  return len;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_close>:

int _close(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_isatty>:

int _isatty(int file)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001afa:	2301      	movs	r3, #1
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d205      	bcs.n	8001b60 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <_sbrk+0x6c>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	20020000 	.word	0x20020000
 8001b84:	00000400 	.word	0x00000400
 8001b88:	200004d8 	.word	0x200004d8
 8001b8c:	2000c8e0 	.word	0x2000c8e0
 8001b90:	2000c8d8 	.word	0x2000c8d8

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bbc:	f7ff ffea 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bc2:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	; (8001c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be6:	f01a ff07 	bl	801c9f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7ff fd03 	bl	80015f4 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001bfc:	0802193c 	.word	0x0802193c
  ldr r2, =_sbss
 8001c00:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001c04:	2000c8e0 	.word	0x2000c8e0

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>

08001c0a <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <DP83848_RegisterBusIO+0x28>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <DP83848_RegisterBusIO+0x28>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <DP83848_RegisterBusIO+0x28>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c36:	e014      	b.n	8001c62 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d17c      	bne.n	8001d88 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e01c      	b.n	8001ce2 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	f107 0208 	add.w	r2, r7, #8
 8001cb0:	2119      	movs	r1, #25
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	4798      	blx	r3
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da03      	bge.n	8001cc4 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001cbc:	f06f 0304 	mvn.w	r3, #4
 8001cc0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001cc2:	e00b      	b.n	8001cdc <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d105      	bne.n	8001cdc <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
         break;
 8001cda:	e005      	b.n	8001ce8 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b1f      	cmp	r3, #31
 8001ce6:	d9df      	bls.n	8001ca8 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b1f      	cmp	r3, #31
 8001cee:	d902      	bls.n	8001cf6 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001cf0:	f06f 0302 	mvn.w	r3, #2
 8001cf4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d145      	bne.n	8001d88 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6810      	ldr	r0, [r2, #0]
 8001d04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4798      	blx	r3
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db37      	blt.n	8001d82 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6810      	ldr	r0, [r2, #0]
 8001d1a:	f107 0208 	add.w	r2, r7, #8
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4798      	blx	r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db28      	blt.n	8001d7a <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4798      	blx	r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001d32:	e01c      	b.n	8001d6e <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4798      	blx	r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d46:	d80e      	bhi.n	8001d66 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6810      	ldr	r0, [r2, #0]
 8001d50:	f107 0208 	add.w	r2, r7, #8
 8001d54:	2100      	movs	r1, #0
 8001d56:	4798      	blx	r3
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da07      	bge.n	8001d6e <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8001d5e:	f06f 0304 	mvn.w	r3, #4
 8001d62:	613b      	str	r3, [r7, #16]
                 break;
 8001d64:	e010      	b.n	8001d88 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8001d66:	f06f 0301 	mvn.w	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
               break;
 8001d6c:	e00c      	b.n	8001d88 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1dd      	bne.n	8001d34 <DP83848_Init+0xc6>
 8001d78:	e006      	b.n	8001d88 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8001d7a:	f06f 0304 	mvn.w	r3, #4
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	e002      	b.n	8001d88 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8001d82:	f06f 0303 	mvn.w	r3, #3
 8001d86:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d112      	bne.n	8001db4 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	4798      	blx	r3
 8001d94:	4603      	mov	r3, r0
 8001d96:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8001d98:	bf00      	nop
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	4798      	blx	r3
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001dac:	d9f5      	bls.n	8001d9a <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001db4:	693b      	ldr	r3, [r7, #16]
 }
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6810      	ldr	r0, [r2, #0]
 8001dd2:	f107 020c 	add.w	r2, r7, #12
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4798      	blx	r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da02      	bge.n	8001de6 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001de0:	f06f 0304 	mvn.w	r3, #4
 8001de4:	e06e      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6810      	ldr	r0, [r2, #0]
 8001dee:	f107 020c 	add.w	r2, r7, #12
 8001df2:	2101      	movs	r1, #1
 8001df4:	4798      	blx	r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da02      	bge.n	8001e02 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001dfc:	f06f 0304 	mvn.w	r3, #4
 8001e00:	e060      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e059      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6810      	ldr	r0, [r2, #0]
 8001e18:	f107 020c 	add.w	r2, r7, #12
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4798      	blx	r3
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da02      	bge.n	8001e2c <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001e26:	f06f 0304 	mvn.w	r3, #4
 8001e2a:	e04b      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d11b      	bne.n	8001e6e <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d006      	beq.n	8001e4e <DP83848_GetLinkState+0x90>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e03a      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e033      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001e66:	2304      	movs	r3, #4
 8001e68:	e02c      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001e6a:	2305      	movs	r3, #5
 8001e6c:	e02a      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6810      	ldr	r0, [r2, #0]
 8001e76:	f107 020c 	add.w	r2, r7, #12
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	4798      	blx	r3
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da02      	bge.n	8001e8a <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001e84:	f06f 0304 	mvn.w	r3, #4
 8001e88:	e01c      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001e94:	2306      	movs	r3, #6
 8001e96:	e015      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0306 	and.w	r3, r3, #6
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d101      	bne.n	8001ea6 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e00e      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0306 	and.w	r3, r3, #6
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e007      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0306 	and.w	r3, r3, #6
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d101      	bne.n	8001ec2 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	e000      	b.n	8001ec4 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001ec2:	2305      	movs	r3, #5
    }
  }
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_Init+0x40>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_Init+0x40>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_Init+0x40>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f8fc 	bl	80020f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	200f      	movs	r0, #15
 8001efc:	f7ff fcda 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff fcac 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	2000000c 	.word	0x2000000c
 8001f34:	200004dc 	.word	0x200004dc

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	200004dc 	.word	0x200004dc

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000000c 	.word	0x2000000c

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff ff4c 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211a:	f7ff ff61 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 800211e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	6978      	ldr	r0, [r7, #20]
 8002126:	f7ff ffb1 	bl	800208c <NVIC_EncodePriority>
 800212a:	4602      	mov	r2, r0
 800212c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff80 	bl	8002038 <__NVIC_SetPriority>
}
 8002138:	bf00      	nop
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff54 	bl	8001ffc <__NVIC_EnableIRQ>
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e06c      	b.n	8002248 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002174:	2b00      	cmp	r3, #0
 8002176:	d106      	bne.n	8002186 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2223      	movs	r2, #35	; 0x23
 800217c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f003 fbf9 	bl	8005978 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_ETH_Init+0xf4>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a30      	ldr	r2, [pc, #192]	; (8002250 <HAL_ETH_Init+0xf4>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <HAL_ETH_Init+0xf4>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021a2:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4927      	ldr	r1, [pc, #156]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_ETH_Init+0xf8>)
 80021be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d8:	f7ff feae 	bl	8001f38 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021de:	e011      	b.n	8002204 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021e0:	f7ff feaa 	bl	8001f38 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021ee:	d909      	bls.n	8002204 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2204      	movs	r2, #4
 80021f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	22e0      	movs	r2, #224	; 0xe0
 80021fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e021      	b.n	8002248 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1e4      	bne.n	80021e0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 ff56 	bl	80030c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fffd 	bl	800321c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f001 f853 	bl	80032ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	461a      	mov	r2, r3
 800222e:	2100      	movs	r1, #0
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 ffbb 	bl	80031ac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2210      	movs	r2, #16
 8002242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	40013800 	.word	0x40013800

08002258 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002266:	2b10      	cmp	r3, #16
 8002268:	d17f      	bne.n	800236a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2223      	movs	r2, #35	; 0x23
 800226e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002286:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002298:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800229c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80022b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2204      	movs	r2, #4
 80022b8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f9f8 	bl	80026b0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0208 	orr.w	r2, r2, #8
 80022ce:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022d8:	2001      	movs	r0, #1
 80022da:	f7ff fe39 	bl	8001f50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0204 	orr.w	r2, r2, #4
 80022f4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022fe:	2001      	movs	r0, #1
 8002300:	f7ff fe26 	bl	8001f50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fd7c 	bl	8002e0a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002328:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002340:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8002354:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8002358:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800235c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2223      	movs	r2, #35	; 0x23
 8002362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	e000      	b.n	800236c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002382:	2b23      	cmp	r3, #35	; 0x23
 8002384:	d170      	bne.n	8002468 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2223      	movs	r2, #35	; 0x23
 800238a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80023a0:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80023a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023a8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	f023 0302 	bic.w	r3, r3, #2
 80023d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023d8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0204 	bic.w	r2, r2, #4
 80023e8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f7ff fdac 	bl	8001f50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fd02 	bl	8002e0a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0208 	bic.w	r2, r2, #8
 8002414:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800241e:	2001      	movs	r0, #1
 8002420:	f7ff fd96 	bl	8001f50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e00e      	b.n	8002450 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	3212      	adds	r2, #18
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d9ed      	bls.n	8002432 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2210      	movs	r2, #16
 8002460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e045      	b.n	8002522 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249c:	2b23      	cmp	r3, #35	; 0x23
 800249e:	d13f      	bne.n	8002520 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80024a8:	2201      	movs	r2, #1
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 ff7b 	bl	80033a8 <ETH_Prepare_Tx_Descriptors>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f043 0202 	orr.w	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e02a      	b.n	8002522 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80024cc:	f3bf 8f4f 	dsb	sy
}
 80024d0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d904      	bls.n	80024ee <HAL_ETH_Transmit_IT+0x7c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	1f1a      	subs	r2, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00d      	beq.n	800251c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002508:	461a      	mov	r2, r3
 800250a:	2304      	movs	r3, #4
 800250c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002516:	461a      	mov	r2, r3
 8002518:	2300      	movs	r3, #0
 800251a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	e000      	b.n	8002522 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
  }
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b088      	sub	sp, #32
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0a8      	b.n	80026a8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	2b23      	cmp	r3, #35	; 0x23
 800255e:	d001      	beq.n	8002564 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0a1      	b.n	80026a8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	3212      	adds	r2, #18
 8002570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002574:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	f1c3 0304 	rsb	r3, r3, #4
 800257e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002580:	e06a      	b.n	8002658 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	69da      	ldr	r2, [r3, #28]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_ETH_ReadData+0x88>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d040      	beq.n	8002634 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00c      	beq.n	80025f6 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80025e6:	3b04      	subs	r3, #4
 80025e8:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800260e:	461a      	mov	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f003 fb6a 	bl	8005cec <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	3301      	adds	r3, #1
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d902      	bls.n	8002646 <HAL_ETH_ReadData+0x11c>
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3b04      	subs	r3, #4
 8002644:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	3212      	adds	r2, #18
 800264c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002650:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800265c:	2b00      	cmp	r3, #0
 800265e:	db06      	blt.n	800266e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	429a      	cmp	r2, r3
 8002666:	d202      	bcs.n	800266e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d089      	beq.n	8002582 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	441a      	add	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f814 	bl	80026b0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80026bc:	2301      	movs	r3, #1
 80026be:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026c4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	3212      	adds	r2, #18
 80026cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80026d8:	e03d      	b.n	8002756 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d112      	bne.n	8002708 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80026e2:	f107 0308 	add.w	r3, r7, #8
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fad0 	bl	8005c8c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	74fb      	strb	r3, [r7, #19]
 80026f6:	e007      	b.n	8002708 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	461a      	mov	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	461a      	mov	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d023      	beq.n	8002756 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	4a24      	ldr	r2, [pc, #144]	; (80027ac <ETH_UpdateDescriptor+0xfc>)
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	e003      	b.n	8002726 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002724:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d902      	bls.n	8002744 <ETH_UpdateDescriptor+0x94>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3b04      	subs	r3, #4
 8002742:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	3212      	adds	r2, #18
 800274a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274e:	617b      	str	r3, [r7, #20]
      desccount--;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	3b01      	subs	r3, #1
 8002754:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <ETH_UpdateDescriptor+0xb2>
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1bb      	bne.n	80026da <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	429a      	cmp	r2, r3
 800276a:	d01a      	beq.n	80027a2 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3301      	adds	r3, #1
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002776:	f3bf 8f5f 	dmb	sy
}
 800277a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6919      	ldr	r1, [r3, #16]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	18ca      	adds	r2, r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002794:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80027a2:	bf00      	nop
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	80004600 	.word	0x80004600

080027b0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3318      	adds	r3, #24
 80027bc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80027ce:	e03f      	b.n	8002850 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	3304      	adds	r3, #4
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d028      	beq.n	8002850 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68d9      	ldr	r1, [r3, #12]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db1b      	blt.n	800284c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	3304      	adds	r3, #4
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	f003 faa3 	bl	8005d6c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	3304      	adds	r3, #4
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	2200      	movs	r2, #0
 8002832:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	3301      	adds	r3, #1
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c
 800284a:	e001      	b.n	8002850 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_ETH_ReleaseTxPacket+0xac>
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1b9      	bne.n	80027d0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d112      	bne.n	80028a8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d109      	bne.n	80028a8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289c:	461a      	mov	r2, r3
 800289e:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_ETH_IRQHandler+0x178>)
 80028a0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f002 fdb0 	bl	8005408 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d113      	bne.n	80028e2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10a      	bne.n	80028e2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d4:	461a      	mov	r2, r3
 80028d6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80028da:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f002 fda3 	bl	8005428 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f4:	d14c      	bne.n	8002990 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002908:	d142      	bne.n	8002990 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f043 0208 	orr.w	r2, r3, #8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292c:	d11a      	bne.n	8002964 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <HAL_ETH_IRQHandler+0x17c>)
 800293a:	4013      	ands	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002954:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002958:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	22e0      	movs	r2, #224	; 0xe0
 800295e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002962:	e012      	b.n	800298a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	f248 6380 	movw	r3, #34432	; 0x8680
 8002972:	4013      	ands	r3, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002982:	461a      	mov	r2, r3
 8002984:	f248 6380 	movw	r3, #34432	; 0x8680
 8002988:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f002 fd5c 	bl	8005448 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d10e      	bne.n	80029bc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f81c 	bl	80029ec <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_ETH_IRQHandler+0x180>)
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <HAL_ETH_IRQHandler+0x180>)
 80029ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80029ce:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f815 	bl	8002a00 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	00010040 	.word	0x00010040
 80029e4:	007e2000 	.word	0x007e2000
 80029e8:	40013c00 	.word	0x40013c00

080029ec <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 031c 	and.w	r3, r3, #28
 8002a30:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	02db      	lsls	r3, r3, #11
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	019b      	lsls	r3, r3, #6
 8002a42:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0302 	bic.w	r3, r3, #2
 8002a52:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002a64:	f7ff fa68 	bl	8001f38 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a6a:	e00d      	b.n	8002a88 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002a6c:	f7ff fa64 	bl	8001f38 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7a:	d301      	bcc.n	8002a80 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e010      	b.n	8002aa2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1ec      	bne.n	8002a6c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f003 031c 	and.w	r3, r3, #28
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	02db      	lsls	r3, r3, #11
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	019b      	lsls	r3, r3, #6
 8002ad8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b04:	f7ff fa18 	bl	8001f38 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b0a:	e00d      	b.n	8002b28 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b0c:	f7ff fa14 	bl	8001f38 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1a:	d301      	bcc.n	8002b20 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e009      	b.n	8002b34 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1ec      	bne.n	8002b0c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0d9      	b.n	8002d04 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2301      	moveq	r3, #1
 8002bc0:	2300      	movne	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2301      	moveq	r3, #1
 8002c10:	2300      	movne	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf14      	ite	ne
 8002c42:	2301      	movne	r3, #1
 8002c44:	2300      	moveq	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bf14      	ite	ne
 8002c6a:	2301      	movne	r3, #1
 8002c6c:	2300      	moveq	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	0c1b      	lsrs	r3, r3, #16
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf14      	ite	ne
 8002cf4:	2301      	movne	r3, #1
 8002cf6:	2300      	moveq	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e00b      	b.n	8002d3c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d105      	bne.n	8002d3a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d2e:	6839      	ldr	r1, [r7, #0]
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f88f 	bl	8002e54 <ETH_SetMACConfig>

    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 031c 	bic.w	r3, r3, #28
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d5c:	f001 fa34 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8002d60:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <HAL_ETH_SetMDIOClockRange+0x98>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d908      	bls.n	8002d7c <HAL_ETH_SetMDIOClockRange+0x38>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d804      	bhi.n	8002d7c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f043 0308 	orr.w	r3, r3, #8
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e027      	b.n	8002dcc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d908      	bls.n	8002d96 <HAL_ETH_SetMDIOClockRange+0x52>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d204      	bcs.n	8002d96 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f043 030c 	orr.w	r3, r3, #12
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e01a      	b.n	8002dcc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d303      	bcc.n	8002da6 <HAL_ETH_SetMDIOClockRange+0x62>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d911      	bls.n	8002dca <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d908      	bls.n	8002dc0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d804      	bhi.n	8002dc0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	e005      	b.n	8002dcc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f043 0310 	orr.w	r3, r3, #16
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e000      	b.n	8002dcc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002dca:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	01312cff 	.word	0x01312cff
 8002de0:	02160ebf 	.word	0x02160ebf
 8002de4:	03938700 	.word	0x03938700
 8002de8:	05f5e0ff 	.word	0x05f5e0ff
 8002dec:	08f0d17f 	.word	0x08f0d17f

08002df0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e2c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f7ff f888 	bl	8001f50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e4a:	6193      	str	r3, [r2, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <ETH_SetMACConfig+0x15c>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	7c1b      	ldrb	r3, [r3, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <ETH_SetMACConfig+0x28>
 8002e76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e7a:	e000      	b.n	8002e7e <ETH_SetMACConfig+0x2a>
 8002e7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	7c5b      	ldrb	r3, [r3, #17]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <ETH_SetMACConfig+0x38>
 8002e86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e8a:	e000      	b.n	8002e8e <ETH_SetMACConfig+0x3a>
 8002e8c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e8e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	7fdb      	ldrb	r3, [r3, #31]
 8002e9a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e9c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ea2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	7f92      	ldrb	r2, [r2, #30]
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d102      	bne.n	8002eb2 <ETH_SetMACConfig+0x5e>
 8002eac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb0:	e000      	b.n	8002eb4 <ETH_SetMACConfig+0x60>
 8002eb2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002eb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	7f1b      	ldrb	r3, [r3, #28]
 8002eba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ebc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ec2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	791b      	ldrb	r3, [r3, #4]
 8002ec8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002eca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	d102      	bne.n	8002edc <ETH_SetMACConfig+0x88>
 8002ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eda:	e000      	b.n	8002ede <ETH_SetMACConfig+0x8a>
 8002edc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ede:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	7bdb      	ldrb	r3, [r3, #15]
 8002ee4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ee6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002eec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ef4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f7ff f81e 	bl	8001f50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f32:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f3a:	2a00      	cmp	r2, #0
 8002f3c:	d101      	bne.n	8002f42 <ETH_SetMACConfig+0xee>
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	e000      	b.n	8002f44 <ETH_SetMACConfig+0xf0>
 8002f42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f44:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002f52:	2a01      	cmp	r2, #1
 8002f54:	d101      	bne.n	8002f5a <ETH_SetMACConfig+0x106>
 8002f56:	2208      	movs	r2, #8
 8002f58:	e000      	b.n	8002f5c <ETH_SetMACConfig+0x108>
 8002f5a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002f64:	2a01      	cmp	r2, #1
 8002f66:	d101      	bne.n	8002f6c <ETH_SetMACConfig+0x118>
 8002f68:	2204      	movs	r2, #4
 8002f6a:	e000      	b.n	8002f6e <ETH_SetMACConfig+0x11a>
 8002f6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002f76:	2a01      	cmp	r2, #1
 8002f78:	d101      	bne.n	8002f7e <ETH_SetMACConfig+0x12a>
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	e000      	b.n	8002f80 <ETH_SetMACConfig+0x12c>
 8002f7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f80:	4313      	orrs	r3, r2
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7fe ffd9 	bl	8001f50 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	619a      	str	r2, [r3, #24]
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	ff20810f 	.word	0xff20810f

08002fb4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <ETH_SetDMAConfig+0x110>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	7b1b      	ldrb	r3, [r3, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <ETH_SetDMAConfig+0x2c>
 8002fda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fde:	e000      	b.n	8002fe2 <ETH_SetDMAConfig+0x2e>
 8002fe0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	7b5b      	ldrb	r3, [r3, #13]
 8002fe6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fe8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	7f52      	ldrb	r2, [r2, #29]
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	d102      	bne.n	8002ff8 <ETH_SetDMAConfig+0x44>
 8002ff2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ff6:	e000      	b.n	8002ffa <ETH_SetDMAConfig+0x46>
 8002ff8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ffa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	7b9b      	ldrb	r3, [r3, #14]
 8003000:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003002:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003008:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7f1b      	ldrb	r3, [r3, #28]
 800300e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003010:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	7f9b      	ldrb	r3, [r3, #30]
 8003016:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003018:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800301e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003026:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003028:	4313      	orrs	r3, r2
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003038:	461a      	mov	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800304a:	2001      	movs	r0, #1
 800304c:	f7fe ff80 	bl	8001f50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003058:	461a      	mov	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	791b      	ldrb	r3, [r3, #4]
 8003062:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003068:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800306e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003074:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800307c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800307e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003086:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800308c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003096:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800309a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7fe ff51 	bl	8001f50 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	f8de3f23 	.word	0xf8de3f23

080030c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0a6      	sub	sp, #152	; 0x98
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030dc:	2300      	movs	r3, #0
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003104:	2300      	movs	r3, #0
 8003106:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800310e:	2300      	movs	r3, #0
 8003110:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800311e:	2300      	movs	r3, #0
 8003120:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800312a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800312e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003134:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800313c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fe86 	bl	8002e54 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003148:	2301      	movs	r3, #1
 800314a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800314c:	2301      	movs	r3, #1
 800314e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003150:	2301      	movs	r3, #1
 8003152:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003156:	2301      	movs	r3, #1
 8003158:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800316a:	2300      	movs	r3, #0
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003174:	2301      	movs	r3, #1
 8003176:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800317e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003182:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003188:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003190:	2300      	movs	r3, #0
 8003192:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003198:	f107 0308 	add.w	r3, r7, #8
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ff08 	bl	8002fb4 <ETH_SetDMAConfig>
}
 80031a4:	bf00      	nop
 80031a6:	3798      	adds	r7, #152	; 0x98
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3305      	adds	r3, #5
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	3204      	adds	r2, #4
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <ETH_MACAddressConfig+0x68>)
 80031ce:	4413      	add	r3, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3303      	adds	r3, #3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	061a      	lsls	r2, r3, #24
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3302      	adds	r3, #2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3301      	adds	r3, #1
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	4313      	orrs	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <ETH_MACAddressConfig+0x6c>)
 80031fe:	4413      	add	r3, r2
 8003200:	461a      	mov	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	6013      	str	r3, [r2, #0]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40028040 	.word	0x40028040
 8003218:	40028044 	.word	0x40028044

0800321c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e03e      	b.n	80032a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	440b      	add	r3, r1
 800323a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	3206      	adds	r2, #6
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d80c      	bhi.n	800328c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68d9      	ldr	r1, [r3, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	60da      	str	r2, [r3, #12]
 800328a:	e004      	b.n	8003296 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	461a      	mov	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3301      	adds	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d9bd      	bls.n	800322a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c0:	611a      	str	r2, [r3, #16]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e046      	b.n	800336a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6919      	ldr	r1, [r3, #16]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003318:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003320:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	3212      	adds	r2, #18
 8003336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d80c      	bhi.n	800335a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6919      	ldr	r1, [r3, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	e004      	b.n	8003364 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	461a      	mov	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3301      	adds	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b03      	cmp	r3, #3
 800336e:	d9b5      	bls.n	80032dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339a:	60da      	str	r2, [r3, #12]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b08d      	sub	sp, #52	; 0x34
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3318      	adds	r3, #24
 80033b8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ea:	d007      	beq.n	80033fc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	3304      	adds	r3, #4
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80033fc:	2302      	movs	r3, #2
 80033fe:	e103      	b.n	8003608 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	3301      	adds	r3, #1
 8003404:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003418:	f023 031f 	bic.w	r3, r3, #31
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	6852      	ldr	r2, [r2, #4]
 8003420:	431a      	orrs	r2, r3
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	431a      	orrs	r2, r3
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003486:	f3bf 8f5f 	dmb	sy
}
 800348a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003498:	e084      	b.n	80035a4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e005      	b.n	80034c6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	3301      	adds	r3, #1
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d902      	bls.n	80034d8 <ETH_Prepare_Tx_Descriptors+0x130>
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	3b04      	subs	r3, #4
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034fa:	d007      	beq.n	800350c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	3304      	adds	r3, #4
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d029      	beq.n	8003560 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003518:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800351a:	2300      	movs	r3, #0
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 800351e:	e019      	b.n	8003554 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003520:	f3bf 8f5f 	dmb	sy
}
 8003524:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	3301      	adds	r3, #1
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	2b03      	cmp	r3, #3
 800353c:	d902      	bls.n	8003544 <ETH_Prepare_Tx_Descriptors+0x19c>
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	3b04      	subs	r3, #4
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800354c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	3301      	adds	r3, #1
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
 8003554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	429a      	cmp	r2, r3
 800355a:	d3e1      	bcc.n	8003520 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800355c:	2302      	movs	r3, #2
 800355e:	e053      	b.n	8003608 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	3301      	adds	r3, #1
 8003564:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800357e:	f023 031f 	bic.w	r3, r3, #31
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	6852      	ldr	r2, [r2, #4]
 8003586:	431a      	orrs	r2, r3
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	3301      	adds	r3, #1
 8003590:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003592:	f3bf 8f5f 	dmb	sy
}
 8003596:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af76 	bne.w	800349a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e005      	b.n	80035ce <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035de:	6979      	ldr	r1, [r7, #20]
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	3304      	adds	r3, #4
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ee:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80035f0:	b672      	cpsid	i
}
 80035f2:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	4413      	add	r3, r2
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003602:	b662      	cpsie	i
}
 8003604:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3734      	adds	r7, #52	; 0x34
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003614:	b480      	push	{r7}
 8003616:	b089      	sub	sp, #36	; 0x24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	e16b      	b.n	8003908 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003630:	2201      	movs	r2, #1
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	429a      	cmp	r2, r3
 800364a:	f040 815a 	bne.w	8003902 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d005      	beq.n	8003666 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003662:	2b02      	cmp	r3, #2
 8003664:	d130      	bne.n	80036c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	2203      	movs	r2, #3
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800369c:	2201      	movs	r2, #1
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 0201 	and.w	r2, r3, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d017      	beq.n	8003704 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	2203      	movs	r2, #3
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4013      	ands	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d123      	bne.n	8003758 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	08da      	lsrs	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3208      	adds	r2, #8
 8003718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800371c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	220f      	movs	r2, #15
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	08da      	lsrs	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3208      	adds	r2, #8
 8003752:	69b9      	ldr	r1, [r7, #24]
 8003754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	2203      	movs	r2, #3
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0203 	and.w	r2, r3, #3
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80b4 	beq.w	8003902 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b60      	ldr	r3, [pc, #384]	; (8003920 <HAL_GPIO_Init+0x30c>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	4a5f      	ldr	r2, [pc, #380]	; (8003920 <HAL_GPIO_Init+0x30c>)
 80037a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a8:	6453      	str	r3, [r2, #68]	; 0x44
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <HAL_GPIO_Init+0x30c>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037b6:	4a5b      	ldr	r2, [pc, #364]	; (8003924 <HAL_GPIO_Init+0x310>)
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	089b      	lsrs	r3, r3, #2
 80037bc:	3302      	adds	r3, #2
 80037be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	220f      	movs	r2, #15
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a52      	ldr	r2, [pc, #328]	; (8003928 <HAL_GPIO_Init+0x314>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d02b      	beq.n	800383a <HAL_GPIO_Init+0x226>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a51      	ldr	r2, [pc, #324]	; (800392c <HAL_GPIO_Init+0x318>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d025      	beq.n	8003836 <HAL_GPIO_Init+0x222>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_GPIO_Init+0x31c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01f      	beq.n	8003832 <HAL_GPIO_Init+0x21e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a4f      	ldr	r2, [pc, #316]	; (8003934 <HAL_GPIO_Init+0x320>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d019      	beq.n	800382e <HAL_GPIO_Init+0x21a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a4e      	ldr	r2, [pc, #312]	; (8003938 <HAL_GPIO_Init+0x324>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d013      	beq.n	800382a <HAL_GPIO_Init+0x216>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a4d      	ldr	r2, [pc, #308]	; (800393c <HAL_GPIO_Init+0x328>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00d      	beq.n	8003826 <HAL_GPIO_Init+0x212>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a4c      	ldr	r2, [pc, #304]	; (8003940 <HAL_GPIO_Init+0x32c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d007      	beq.n	8003822 <HAL_GPIO_Init+0x20e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a4b      	ldr	r2, [pc, #300]	; (8003944 <HAL_GPIO_Init+0x330>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_GPIO_Init+0x20a>
 800381a:	2307      	movs	r3, #7
 800381c:	e00e      	b.n	800383c <HAL_GPIO_Init+0x228>
 800381e:	2308      	movs	r3, #8
 8003820:	e00c      	b.n	800383c <HAL_GPIO_Init+0x228>
 8003822:	2306      	movs	r3, #6
 8003824:	e00a      	b.n	800383c <HAL_GPIO_Init+0x228>
 8003826:	2305      	movs	r3, #5
 8003828:	e008      	b.n	800383c <HAL_GPIO_Init+0x228>
 800382a:	2304      	movs	r3, #4
 800382c:	e006      	b.n	800383c <HAL_GPIO_Init+0x228>
 800382e:	2303      	movs	r3, #3
 8003830:	e004      	b.n	800383c <HAL_GPIO_Init+0x228>
 8003832:	2302      	movs	r3, #2
 8003834:	e002      	b.n	800383c <HAL_GPIO_Init+0x228>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_GPIO_Init+0x228>
 800383a:	2300      	movs	r3, #0
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	f002 0203 	and.w	r2, r2, #3
 8003842:	0092      	lsls	r2, r2, #2
 8003844:	4093      	lsls	r3, r2
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800384c:	4935      	ldr	r1, [pc, #212]	; (8003924 <HAL_GPIO_Init+0x310>)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	3302      	adds	r3, #2
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_GPIO_Init+0x334>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	43db      	mvns	r3, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4013      	ands	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800387e:	4a32      	ldr	r2, [pc, #200]	; (8003948 <HAL_GPIO_Init+0x334>)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003884:	4b30      	ldr	r3, [pc, #192]	; (8003948 <HAL_GPIO_Init+0x334>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038a8:	4a27      	ldr	r2, [pc, #156]	; (8003948 <HAL_GPIO_Init+0x334>)
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ae:	4b26      	ldr	r3, [pc, #152]	; (8003948 <HAL_GPIO_Init+0x334>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_GPIO_Init+0x334>)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <HAL_GPIO_Init+0x334>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038fc:	4a12      	ldr	r2, [pc, #72]	; (8003948 <HAL_GPIO_Init+0x334>)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3301      	adds	r3, #1
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	2b0f      	cmp	r3, #15
 800390c:	f67f ae90 	bls.w	8003630 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3724      	adds	r7, #36	; 0x24
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	40013800 	.word	0x40013800
 8003928:	40020000 	.word	0x40020000
 800392c:	40020400 	.word	0x40020400
 8003930:	40020800 	.word	0x40020800
 8003934:	40020c00 	.word	0x40020c00
 8003938:	40021000 	.word	0x40021000
 800393c:	40021400 	.word	0x40021400
 8003940:	40021800 	.word	0x40021800
 8003944:	40021c00 	.word	0x40021c00
 8003948:	40013c00 	.word	0x40013c00

0800394c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	807b      	strh	r3, [r7, #2]
 8003958:	4613      	mov	r3, r2
 800395a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800395c:	787b      	ldrb	r3, [r7, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003968:	e003      	b.n	8003972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800396a:	887b      	ldrh	r3, [r7, #2]
 800396c:	041a      	lsls	r2, r3, #16
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	619a      	str	r2, [r3, #24]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e267      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d075      	beq.n	8003a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399e:	4b88      	ldr	r3, [pc, #544]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d00c      	beq.n	80039c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039aa:	4b85      	ldr	r3, [pc, #532]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d112      	bne.n	80039dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b6:	4b82      	ldr	r3, [pc, #520]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c2:	d10b      	bne.n	80039dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	4b7e      	ldr	r3, [pc, #504]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05b      	beq.n	8003a88 <HAL_RCC_OscConfig+0x108>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d157      	bne.n	8003a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e242      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x74>
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a75      	ldr	r2, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e01d      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x98>
 80039fe:	4b70      	ldr	r3, [pc, #448]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6f      	ldr	r2, [pc, #444]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b6d      	ldr	r3, [pc, #436]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6c      	ldr	r2, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 8003a18:	4b69      	ldr	r3, [pc, #420]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a68      	ldr	r2, [pc, #416]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b66      	ldr	r3, [pc, #408]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a65      	ldr	r2, [pc, #404]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe fa7e 	bl	8001f38 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe fa7a 	bl	8001f38 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e207      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b5b      	ldr	r3, [pc, #364]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xc0>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fa6a 	bl	8001f38 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe fa66 	bl	8001f38 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	; 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1f3      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7a:	4b51      	ldr	r3, [pc, #324]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0xe8>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d063      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a96:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d11c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aae:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d116      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x152>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e1c7      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4937      	ldr	r1, [pc, #220]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae6:	e03a      	b.n	8003b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af0:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <HAL_RCC_OscConfig+0x244>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fe fa1f 	bl	8001f38 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afe:	f7fe fa1b 	bl	8001f38 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1a8      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4925      	ldr	r1, [pc, #148]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]
 8003b30:	e015      	b.n	8003b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b32:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <HAL_RCC_OscConfig+0x244>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe f9fe 	bl	8001f38 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fe f9fa 	bl	8001f38 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e187      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d036      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <HAL_RCC_OscConfig+0x248>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fe f9de 	bl	8001f38 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b80:	f7fe f9da 	bl	8001f38 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e167      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x240>)
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x200>
 8003b9e:	e01b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_OscConfig+0x248>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe f9c7 	bl	8001f38 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	e00e      	b.n	8003bcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fe f9c3 	bl	8001f38 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d907      	bls.n	8003bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e150      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	42470000 	.word	0x42470000
 8003bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	4b88      	ldr	r3, [pc, #544]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ea      	bne.n	8003bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8097 	beq.w	8003d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bea:	4b81      	ldr	r3, [pc, #516]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	4b7d      	ldr	r3, [pc, #500]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a7c      	ldr	r2, [pc, #496]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b7a      	ldr	r3, [pc, #488]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b77      	ldr	r3, [pc, #476]	; (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c22:	4b74      	ldr	r3, [pc, #464]	; (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a73      	ldr	r2, [pc, #460]	; (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe f983 	bl	8001f38 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fe f97f 	bl	8001f38 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e10c      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <HAL_RCC_OscConfig+0x474>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x2ea>
 8003c5c:	4b64      	ldr	r3, [pc, #400]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a63      	ldr	r2, [pc, #396]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
 8003c68:	e01c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x324>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x30c>
 8003c72:	4b5f      	ldr	r3, [pc, #380]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a5e      	ldr	r2, [pc, #376]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7e:	4b5c      	ldr	r3, [pc, #368]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a5b      	ldr	r2, [pc, #364]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x324>
 8003c8c:	4b58      	ldr	r3, [pc, #352]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a57      	ldr	r2, [pc, #348]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	4b55      	ldr	r3, [pc, #340]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4a54      	ldr	r2, [pc, #336]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	f023 0304 	bic.w	r3, r3, #4
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe f944 	bl	8001f38 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f940 	bl	8001f38 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0cb      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	4b49      	ldr	r3, [pc, #292]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ee      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x334>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd8:	f7fe f92e 	bl	8001f38 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fe f92a 	bl	8001f38 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e0b5      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf6:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ee      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d08:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	4a38      	ldr	r2, [pc, #224]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a1 	beq.w	8003e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d1e:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d05c      	beq.n	8003de4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d141      	bne.n	8003db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_RCC_OscConfig+0x478>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe f8fe 	bl	8001f38 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fe f8fa 	bl	8001f38 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e087      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	491b      	ldr	r1, [pc, #108]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x478>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fe f8d3 	bl	8001f38 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d96:	f7fe f8cf 	bl	8001f38 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e05c      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x416>
 8003db4:	e054      	b.n	8003e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_RCC_OscConfig+0x478>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe f8bc 	bl	8001f38 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe f8b8 	bl	8001f38 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e045      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x444>
 8003de2:	e03d      	b.n	8003e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e038      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40007000 	.word	0x40007000
 8003df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x4ec>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d028      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d121      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d11a      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d111      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	3b01      	subs	r3, #1
 8003e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800

08003e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0cc      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e84:	4b68      	ldr	r3, [pc, #416]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d90c      	bls.n	8003eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b65      	ldr	r3, [pc, #404]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b63      	ldr	r3, [pc, #396]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0b8      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ec4:	4b59      	ldr	r3, [pc, #356]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ece:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	4a52      	ldr	r2, [pc, #328]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b50      	ldr	r3, [pc, #320]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	494d      	ldr	r1, [pc, #308]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d044      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d119      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d003      	beq.n	8003f2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2e:	4b3f      	ldr	r3, [pc, #252]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e06f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e067      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f4e:	4b37      	ldr	r3, [pc, #220]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 0203 	bic.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4934      	ldr	r1, [pc, #208]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f60:	f7fd ffea 	bl	8001f38 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f7fd ffe6 	bl	8001f38 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e04f      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	4b2b      	ldr	r3, [pc, #172]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 020c 	and.w	r2, r3, #12
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d1eb      	bne.n	8003f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f90:	4b25      	ldr	r3, [pc, #148]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d20c      	bcs.n	8003fb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4916      	ldr	r1, [pc, #88]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	490e      	ldr	r1, [pc, #56]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ff6:	f000 f821 	bl	800403c <HAL_RCC_GetSysClockFreq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	490a      	ldr	r1, [pc, #40]	; (8004030 <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	5ccb      	ldrb	r3, [r1, r3]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fd fc4c 	bl	80018b4 <HAL_InitTick>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023c00 	.word	0x40023c00
 800402c:	40023800 	.word	0x40023800
 8004030:	0802158c 	.word	0x0802158c
 8004034:	20000004 	.word	0x20000004
 8004038:	20000008 	.word	0x20000008

0800403c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800403c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004040:	b090      	sub	sp, #64	; 0x40
 8004042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
 8004048:	2300      	movs	r3, #0
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404c:	2300      	movs	r3, #0
 800404e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b08      	cmp	r3, #8
 800405e:	d00d      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x40>
 8004060:	2b08      	cmp	r3, #8
 8004062:	f200 80a1 	bhi.w	80041a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x34>
 800406a:	2b04      	cmp	r3, #4
 800406c:	d003      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x3a>
 800406e:	e09b      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004074:	e09b      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004076:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004078:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800407a:	e098      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800407c:	4b4f      	ldr	r3, [pc, #316]	; (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004086:	4b4d      	ldr	r3, [pc, #308]	; (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d028      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004092:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	2200      	movs	r2, #0
 800409a:	623b      	str	r3, [r7, #32]
 800409c:	627a      	str	r2, [r7, #36]	; 0x24
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040a4:	2100      	movs	r1, #0
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040a8:	fb03 f201 	mul.w	r2, r3, r1
 80040ac:	2300      	movs	r3, #0
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	4a43      	ldr	r2, [pc, #268]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040b6:	fba0 1202 	umull	r1, r2, r0, r2
 80040ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040bc:	460a      	mov	r2, r1
 80040be:	62ba      	str	r2, [r7, #40]	; 0x28
 80040c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c2:	4413      	add	r3, r2
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c8:	2200      	movs	r2, #0
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	61fa      	str	r2, [r7, #28]
 80040ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040d6:	f7fc fcc9 	bl	8000a6c <__aeabi_uldivmod>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4613      	mov	r3, r2
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e2:	e053      	b.n	800418c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e4:	4b35      	ldr	r3, [pc, #212]	; (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	099b      	lsrs	r3, r3, #6
 80040ea:	2200      	movs	r2, #0
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	617a      	str	r2, [r7, #20]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040f6:	f04f 0b00 	mov.w	fp, #0
 80040fa:	4652      	mov	r2, sl
 80040fc:	465b      	mov	r3, fp
 80040fe:	f04f 0000 	mov.w	r0, #0
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	0159      	lsls	r1, r3, #5
 8004108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800410c:	0150      	lsls	r0, r2, #5
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	ebb2 080a 	subs.w	r8, r2, sl
 8004116:	eb63 090b 	sbc.w	r9, r3, fp
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004126:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800412a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800412e:	ebb2 0408 	subs.w	r4, r2, r8
 8004132:	eb63 0509 	sbc.w	r5, r3, r9
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	00eb      	lsls	r3, r5, #3
 8004140:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004144:	00e2      	lsls	r2, r4, #3
 8004146:	4614      	mov	r4, r2
 8004148:	461d      	mov	r5, r3
 800414a:	eb14 030a 	adds.w	r3, r4, sl
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	eb45 030b 	adc.w	r3, r5, fp
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004162:	4629      	mov	r1, r5
 8004164:	028b      	lsls	r3, r1, #10
 8004166:	4621      	mov	r1, r4
 8004168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800416c:	4621      	mov	r1, r4
 800416e:	028a      	lsls	r2, r1, #10
 8004170:	4610      	mov	r0, r2
 8004172:	4619      	mov	r1, r3
 8004174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004176:	2200      	movs	r2, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	60fa      	str	r2, [r7, #12]
 800417c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004180:	f7fc fc74 	bl	8000a6c <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_GetSysClockFreq+0x180>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	3301      	adds	r3, #1
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800419c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041a6:	e002      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80041aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3740      	adds	r7, #64	; 0x40
 80041b4:	46bd      	mov	sp, r7
 80041b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	017d7840 	.word	0x017d7840

080041c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000004 	.word	0x20000004

080041e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e4:	f7ff fff0 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	0a9b      	lsrs	r3, r3, #10
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	4903      	ldr	r1, [pc, #12]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f6:	5ccb      	ldrb	r3, [r1, r3]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40023800 	.word	0x40023800
 8004204:	0802159c 	.word	0x0802159c

08004208 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	220f      	movs	r2, #15
 8004216:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_GetClockConfig+0x5c>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0203 	and.w	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <HAL_RCC_GetClockConfig+0x5c>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_RCC_GetClockConfig+0x5c>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCC_GetClockConfig+0x5c>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	08db      	lsrs	r3, r3, #3
 8004242:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_RCC_GetClockConfig+0x60>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0207 	and.w	r2, r3, #7
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	601a      	str	r2, [r3, #0]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800
 8004268:	40023c00 	.word	0x40023c00

0800426c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e07b      	b.n	8004376 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428e:	d009      	beq.n	80042a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	61da      	str	r2, [r3, #28]
 8004296:	e005      	b.n	80042a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fd fa64 	bl	800178c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004328:	ea42 0103 	orr.w	r1, r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	f003 0104 	and.w	r1, r3, #4
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	f003 0210 	and.w	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69da      	ldr	r2, [r3, #28]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004364:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b088      	sub	sp, #32
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_SPI_Transmit+0x22>
 800439c:	2302      	movs	r3, #2
 800439e:	e12d      	b.n	80045fc <HAL_SPI_Transmit+0x27e>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043a8:	f7fd fdc6 	bl	8001f38 <HAL_GetTick>
 80043ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043be:	2302      	movs	r3, #2
 80043c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043c2:	e116      	b.n	80045f2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_SPI_Transmit+0x52>
 80043ca:	88fb      	ldrh	r3, [r7, #6]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d102      	bne.n	80043d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043d4:	e10d      	b.n	80045f2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2203      	movs	r2, #3
 80043da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441c:	d10f      	bne.n	800443e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800443c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d007      	beq.n	800445c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004464:	d14f      	bne.n	8004506 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_SPI_Transmit+0xf6>
 800446e:	8afb      	ldrh	r3, [r7, #22]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d142      	bne.n	80044fa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	881a      	ldrh	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004498:	e02f      	b.n	80044fa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d112      	bne.n	80044ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	881a      	ldrh	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	1c9a      	adds	r2, r3, #2
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80044cc:	e015      	b.n	80044fa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ce:	f7fd fd33 	bl	8001f38 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d803      	bhi.n	80044e6 <HAL_SPI_Transmit+0x168>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e4:	d102      	bne.n	80044ec <HAL_SPI_Transmit+0x16e>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80044f8:	e07b      	b.n	80045f2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1ca      	bne.n	800449a <HAL_SPI_Transmit+0x11c>
 8004504:	e050      	b.n	80045a8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_SPI_Transmit+0x196>
 800450e:	8afb      	ldrh	r3, [r7, #22]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d144      	bne.n	800459e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	7812      	ldrb	r2, [r2, #0]
 8004520:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800453a:	e030      	b.n	800459e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d113      	bne.n	8004572 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004570:	e015      	b.n	800459e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004572:	f7fd fce1 	bl	8001f38 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d803      	bhi.n	800458a <HAL_SPI_Transmit+0x20c>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004588:	d102      	bne.n	8004590 <HAL_SPI_Transmit+0x212>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800459c:	e029      	b.n	80045f2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1c9      	bne.n	800453c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	6839      	ldr	r1, [r7, #0]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fbdf 	bl	8004d70 <SPI_EndRxTxTransaction>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e003      	b.n	80045f2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b01      	cmp	r3, #1
 8004622:	d002      	beq.n	800462a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004624:	2302      	movs	r3, #2
 8004626:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004628:	e0fb      	b.n	8004822 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004632:	d112      	bne.n	800465a <HAL_SPI_Receive+0x56>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10e      	bne.n	800465a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2204      	movs	r2, #4
 8004640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004644:	88fa      	ldrh	r2, [r7, #6]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f8ef 	bl	8004834 <HAL_SPI_TransmitReceive>
 8004656:	4603      	mov	r3, r0
 8004658:	e0e8      	b.n	800482c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_SPI_Receive+0x64>
 8004664:	2302      	movs	r3, #2
 8004666:	e0e1      	b.n	800482c <HAL_SPI_Receive+0x228>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004670:	f7fd fc62 	bl	8001f38 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_SPI_Receive+0x7e>
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004686:	e0cc      	b.n	8004822 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2204      	movs	r2, #4
 800468c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ce:	d10f      	bne.n	80046f0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d007      	beq.n	800470e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800470c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d16a      	bne.n	80047ec <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004716:	e032      	b.n	800477e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	d115      	bne.n	8004752 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f103 020c 	add.w	r2, r3, #12
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	7812      	ldrb	r2, [r2, #0]
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004750:	e015      	b.n	800477e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004752:	f7fd fbf1 	bl	8001f38 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d803      	bhi.n	800476a <HAL_SPI_Receive+0x166>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004768:	d102      	bne.n	8004770 <HAL_SPI_Receive+0x16c>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800477c:	e051      	b.n	8004822 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1c7      	bne.n	8004718 <HAL_SPI_Receive+0x114>
 8004788:	e035      	b.n	80047f6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d113      	bne.n	80047c0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	b292      	uxth	r2, r2
 80047a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	1c9a      	adds	r2, r3, #2
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047be:	e015      	b.n	80047ec <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047c0:	f7fd fbba 	bl	8001f38 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d803      	bhi.n	80047d8 <HAL_SPI_Receive+0x1d4>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d6:	d102      	bne.n	80047de <HAL_SPI_Receive+0x1da>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80047ea:	e01a      	b.n	8004822 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1c9      	bne.n	800478a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	6839      	ldr	r1, [r7, #0]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fa52 	bl	8004ca4 <SPI_EndRxTransaction>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	75fb      	strb	r3, [r7, #23]
 8004818:	e003      	b.n	8004822 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800482a:	7dfb      	ldrb	r3, [r7, #23]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08c      	sub	sp, #48	; 0x30
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004842:	2301      	movs	r3, #1
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004852:	2b01      	cmp	r3, #1
 8004854:	d101      	bne.n	800485a <HAL_SPI_TransmitReceive+0x26>
 8004856:	2302      	movs	r3, #2
 8004858:	e198      	b.n	8004b8c <HAL_SPI_TransmitReceive+0x358>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004862:	f7fd fb69 	bl	8001f38 <HAL_GetTick>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004878:	887b      	ldrh	r3, [r7, #2]
 800487a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800487c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004880:	2b01      	cmp	r3, #1
 8004882:	d00f      	beq.n	80048a4 <HAL_SPI_TransmitReceive+0x70>
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488a:	d107      	bne.n	800489c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d103      	bne.n	800489c <HAL_SPI_TransmitReceive+0x68>
 8004894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004898:	2b04      	cmp	r3, #4
 800489a:	d003      	beq.n	80048a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800489c:	2302      	movs	r3, #2
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048a2:	e16d      	b.n	8004b80 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <HAL_SPI_TransmitReceive+0x82>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_SPI_TransmitReceive+0x82>
 80048b0:	887b      	ldrh	r3, [r7, #2]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80048bc:	e160      	b.n	8004b80 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d003      	beq.n	80048d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2205      	movs	r2, #5
 80048ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	887a      	ldrh	r2, [r7, #2]
 80048e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	887a      	ldrh	r2, [r7, #2]
 80048e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	887a      	ldrh	r2, [r7, #2]
 80048f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	887a      	ldrh	r2, [r7, #2]
 80048fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d007      	beq.n	8004926 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004924:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492e:	d17c      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_SPI_TransmitReceive+0x10a>
 8004938:	8b7b      	ldrh	r3, [r7, #26]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d16a      	bne.n	8004a14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	881a      	ldrh	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	1c9a      	adds	r2, r3, #2
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004962:	e057      	b.n	8004a14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b02      	cmp	r3, #2
 8004970:	d11b      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x176>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d016      	beq.n	80049aa <HAL_SPI_TransmitReceive+0x176>
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d113      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	881a      	ldrh	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	1c9a      	adds	r2, r3, #2
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d119      	bne.n	80049ec <HAL_SPI_TransmitReceive+0x1b8>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d014      	beq.n	80049ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	b292      	uxth	r2, r2
 80049ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	1c9a      	adds	r2, r3, #2
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049e8:	2301      	movs	r3, #1
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049ec:	f7fd faa4 	bl	8001f38 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d80b      	bhi.n	8004a14 <HAL_SPI_TransmitReceive+0x1e0>
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a02:	d007      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004a12:	e0b5      	b.n	8004b80 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1a2      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x130>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d19d      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x130>
 8004a28:	e080      	b.n	8004b2c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x204>
 8004a32:	8b7b      	ldrh	r3, [r7, #26]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d16f      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a5e:	e05b      	b.n	8004b18 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x274>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d017      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x274>
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d114      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	7812      	ldrb	r2, [r2, #0]
 8004a8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d119      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x2b6>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d014      	beq.n	8004aea <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aea:	f7fd fa25 	bl	8001f38 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d803      	bhi.n	8004b02 <HAL_SPI_TransmitReceive+0x2ce>
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b00:	d102      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x2d4>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d107      	bne.n	8004b18 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004b16:	e033      	b.n	8004b80 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d19e      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x22c>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d199      	bne.n	8004a60 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f91d 	bl	8004d70 <SPI_EndRxTxTransaction>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d006      	beq.n	8004b4a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b48:	e01a      	b.n	8004b80 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b76:	e003      	b.n	8004b80 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3730      	adds	r7, #48	; 0x30
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ba4:	f7fd f9c8 	bl	8001f38 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bb4:	f7fd f9c0 	bl	8001f38 <HAL_GetTick>
 8004bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bba:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	015b      	lsls	r3, r3, #5
 8004bc0:	0d1b      	lsrs	r3, r3, #20
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	fb02 f303 	mul.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bca:	e054      	b.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd2:	d050      	beq.n	8004c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bd4:	f7fd f9b0 	bl	8001f38 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d902      	bls.n	8004bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d13d      	bne.n	8004c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c02:	d111      	bne.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0c:	d004      	beq.n	8004c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c16:	d107      	bne.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c30:	d10f      	bne.n	8004c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e017      	b.n	8004c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d19b      	bne.n	8004bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000004 	.word	0x20000004

08004ca4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb8:	d111      	bne.n	8004cde <SPI_EndRxTransaction+0x3a>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc2:	d004      	beq.n	8004cce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ccc:	d107      	bne.n	8004cde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cdc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ce6:	d12a      	bne.n	8004d3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf0:	d012      	beq.n	8004d18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff ff49 	bl	8004b94 <SPI_WaitFlagStateUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d02d      	beq.n	8004d64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0c:	f043 0220 	orr.w	r2, r3, #32
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e026      	b.n	8004d66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2101      	movs	r1, #1
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff36 	bl	8004b94 <SPI_WaitFlagStateUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01a      	beq.n	8004d64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e013      	b.n	8004d66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2101      	movs	r1, #1
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff ff23 	bl	8004b94 <SPI_WaitFlagStateUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e000      	b.n	8004d66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2201      	movs	r2, #1
 8004d84:	2102      	movs	r1, #2
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff ff04 	bl	8004b94 <SPI_WaitFlagStateUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d007      	beq.n	8004da2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	f043 0220 	orr.w	r2, r3, #32
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e032      	b.n	8004e08 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004da2:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <SPI_EndRxTxTransaction+0xa0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1b      	ldr	r2, [pc, #108]	; (8004e14 <SPI_EndRxTxTransaction+0xa4>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	0d5b      	lsrs	r3, r3, #21
 8004dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc0:	d112      	bne.n	8004de8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2180      	movs	r1, #128	; 0x80
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f7ff fee1 	bl	8004b94 <SPI_WaitFlagStateUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d016      	beq.n	8004e06 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	f043 0220 	orr.w	r2, r3, #32
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e00f      	b.n	8004e08 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b80      	cmp	r3, #128	; 0x80
 8004e00:	d0f2      	beq.n	8004de8 <SPI_EndRxTxTransaction+0x78>
 8004e02:	e000      	b.n	8004e06 <SPI_EndRxTxTransaction+0x96>
        break;
 8004e04:	bf00      	nop
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20000004 	.word	0x20000004
 8004e14:	165e9f81 	.word	0x165e9f81

08004e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e041      	b.n	8004eae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f839 	bl	8004eb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f000 f9c0 	bl	80051dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
	...

08004ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d001      	beq.n	8004ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e04e      	b.n	8004f82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a23      	ldr	r2, [pc, #140]	; (8004f90 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d022      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x80>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0e:	d01d      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x80>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d018      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x80>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x80>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1c      	ldr	r2, [pc, #112]	; (8004f9c <HAL_TIM_Base_Start_IT+0xd0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x80>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x80>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x80>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d111      	bne.n	8004f70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b06      	cmp	r3, #6
 8004f5c:	d010      	beq.n	8004f80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6e:	e007      	b.n	8004f80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40001800 	.word	0x40001800

08004fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d020      	beq.n	8005010 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01b      	beq.n	8005010 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0202 	mvn.w	r2, #2
 8004fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8d2 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8c4 	bl	800518c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f8d5 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d020      	beq.n	800505c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01b      	beq.n	800505c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0204 	mvn.w	r2, #4
 800502c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f8ac 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f89e 	bl	800518c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f8af 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d020      	beq.n	80050a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01b      	beq.n	80050a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0208 	mvn.w	r2, #8
 8005078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2204      	movs	r2, #4
 800507e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f886 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f878 	bl	800518c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f889 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d020      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01b      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0210 	mvn.w	r2, #16
 80050c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2208      	movs	r2, #8
 80050ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f860 	bl	80051a0 <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f852 	bl	800518c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f863 	bl	80051b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0201 	mvn.w	r2, #1
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc faec 	bl	80016f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f906 	bl	8005348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00c      	beq.n	8005160 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f834 	bl	80051c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0220 	mvn.w	r2, #32
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8d8 	bl	8005334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a46      	ldr	r2, [pc, #280]	; (8005308 <TIM_Base_SetConfig+0x12c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fa:	d00f      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a43      	ldr	r2, [pc, #268]	; (800530c <TIM_Base_SetConfig+0x130>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00b      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a42      	ldr	r2, [pc, #264]	; (8005310 <TIM_Base_SetConfig+0x134>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d007      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a41      	ldr	r2, [pc, #260]	; (8005314 <TIM_Base_SetConfig+0x138>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a40      	ldr	r2, [pc, #256]	; (8005318 <TIM_Base_SetConfig+0x13c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d108      	bne.n	800522e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a35      	ldr	r2, [pc, #212]	; (8005308 <TIM_Base_SetConfig+0x12c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d02b      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523c:	d027      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a32      	ldr	r2, [pc, #200]	; (800530c <TIM_Base_SetConfig+0x130>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d023      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a31      	ldr	r2, [pc, #196]	; (8005310 <TIM_Base_SetConfig+0x134>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01f      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a30      	ldr	r2, [pc, #192]	; (8005314 <TIM_Base_SetConfig+0x138>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d01b      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a2f      	ldr	r2, [pc, #188]	; (8005318 <TIM_Base_SetConfig+0x13c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d017      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2e      	ldr	r2, [pc, #184]	; (800531c <TIM_Base_SetConfig+0x140>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2d      	ldr	r2, [pc, #180]	; (8005320 <TIM_Base_SetConfig+0x144>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00f      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2c      	ldr	r2, [pc, #176]	; (8005324 <TIM_Base_SetConfig+0x148>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <TIM_Base_SetConfig+0x14c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2a      	ldr	r2, [pc, #168]	; (800532c <TIM_Base_SetConfig+0x150>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a29      	ldr	r2, [pc, #164]	; (8005330 <TIM_Base_SetConfig+0x154>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d108      	bne.n	80052a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a10      	ldr	r2, [pc, #64]	; (8005308 <TIM_Base_SetConfig+0x12c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_Base_SetConfig+0xf8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a12      	ldr	r2, [pc, #72]	; (8005318 <TIM_Base_SetConfig+0x13c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d103      	bne.n	80052dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d105      	bne.n	80052fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	611a      	str	r2, [r3, #16]
  }
}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40010400 	.word	0x40010400
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400
 8005324:	40014800 	.word	0x40014800
 8005328:	40001800 	.word	0x40001800
 800532c:	40001c00 	.word	0x40001c00
 8005330:	40002000 	.word	0x40002000

08005334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800535c:	b5b0      	push	{r4, r5, r7, lr}
 800535e:	b08c      	sub	sp, #48	; 0x30
 8005360:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005362:	2100      	movs	r1, #0
 8005364:	2000      	movs	r0, #0
 8005366:	f00a f9c1 	bl	800f6ec <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800536a:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <MX_LWIP_Init+0x78>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005370:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <MX_LWIP_Init+0x7c>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <MX_LWIP_Init+0x80>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800537c:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <MX_LWIP_Init+0x84>)
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	4b18      	ldr	r3, [pc, #96]	; (80053e4 <MX_LWIP_Init+0x88>)
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	2300      	movs	r3, #0
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	4b14      	ldr	r3, [pc, #80]	; (80053dc <MX_LWIP_Init+0x80>)
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <MX_LWIP_Init+0x7c>)
 800538c:	4911      	ldr	r1, [pc, #68]	; (80053d4 <MX_LWIP_Init+0x78>)
 800538e:	4816      	ldr	r0, [pc, #88]	; (80053e8 <MX_LWIP_Init+0x8c>)
 8005390:	f00a ff76 	bl	8010280 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005394:	4814      	ldr	r0, [pc, #80]	; (80053e8 <MX_LWIP_Init+0x8c>)
 8005396:	f00b f92d 	bl	80105f4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800539a:	4813      	ldr	r0, [pc, #76]	; (80053e8 <MX_LWIP_Init+0x8c>)
 800539c:	f00b f93a 	bl	8010614 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80053a0:	4912      	ldr	r1, [pc, #72]	; (80053ec <MX_LWIP_Init+0x90>)
 80053a2:	4811      	ldr	r0, [pc, #68]	; (80053e8 <MX_LWIP_Init+0x8c>)
 80053a4:	f00b fa3c 	bl	8010820 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 1024);
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <MX_LWIP_Init+0x94>)
 80053aa:	1d3c      	adds	r4, r7, #4
 80053ac:	461d      	mov	r5, r3
 80053ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80053b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80053ba:	1d3b      	adds	r3, r7, #4
 80053bc:	490a      	ldr	r1, [pc, #40]	; (80053e8 <MX_LWIP_Init+0x8c>)
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fd20 	bl	8005e04 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80053c4:	4808      	ldr	r0, [pc, #32]	; (80053e8 <MX_LWIP_Init+0x8c>)
 80053c6:	f012 fb91 	bl	8017aec <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80053ca:	bf00      	nop
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bdb0      	pop	{r4, r5, r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000518 	.word	0x20000518
 80053d8:	2000051c 	.word	0x2000051c
 80053dc:	20000520 	.word	0x20000520
 80053e0:	0800f629 	.word	0x0800f629
 80053e4:	080058cd 	.word	0x080058cd
 80053e8:	200004e0 	.word	0x200004e0
 80053ec:	080053f5 	.word	0x080053f5
 80053f0:	0801df84 	.word	0x0801df84

080053f4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <HAL_ETH_RxCpltCallback+0x1c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fe71 	bl	80060fc <osSemaphoreRelease>
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20004ff0 	.word	0x20004ff0

08005428 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <HAL_ETH_TxCpltCallback+0x1c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fe61 	bl	80060fc <osSemaphoreRelease>
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20004ff4 	.word	0x20004ff4

08005448 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7fd fccd 	bl	8002df0 <HAL_ETH_GetDMAError>
 8005456:	4603      	mov	r3, r0
 8005458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545c:	2b80      	cmp	r3, #128	; 0x80
 800545e:	d104      	bne.n	800546a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005460:	4b04      	ldr	r3, [pc, #16]	; (8005474 <HAL_ETH_ErrorCallback+0x2c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fe49 	bl	80060fc <osSemaphoreRelease>
  }
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20004ff0 	.word	0x20004ff0

08005478 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	b0ac      	sub	sp, #176	; 0xb0
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8005492:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005496:	2264      	movs	r2, #100	; 0x64
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f017 f9ca 	bl	801c834 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80054a0:	4b90      	ldr	r3, [pc, #576]	; (80056e4 <low_level_init+0x26c>)
 80054a2:	4a91      	ldr	r2, [pc, #580]	; (80056e8 <low_level_init+0x270>)
 80054a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0xAE;
 80054a6:	23ae      	movs	r3, #174	; 0xae
 80054a8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x04;
 80054ac:	2304      	movs	r3, #4
 80054ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x65;
 80054b2:	2365      	movs	r3, #101	; 0x65
 80054b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x11;
 80054b8:	2311      	movs	r3, #17
 80054ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xC2;
 80054be:	23c2      	movs	r3, #194	; 0xc2
 80054c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xD9;
 80054c4:	23d9      	movs	r3, #217	; 0xd9
 80054c6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 80054ca:	4a86      	ldr	r2, [pc, #536]	; (80056e4 <low_level_init+0x26c>)
 80054cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054d0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80054d2:	4b84      	ldr	r3, [pc, #528]	; (80056e4 <low_level_init+0x26c>)
 80054d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80054d8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80054da:	4b82      	ldr	r3, [pc, #520]	; (80056e4 <low_level_init+0x26c>)
 80054dc:	4a83      	ldr	r2, [pc, #524]	; (80056ec <low_level_init+0x274>)
 80054de:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80054e0:	4b80      	ldr	r3, [pc, #512]	; (80056e4 <low_level_init+0x26c>)
 80054e2:	4a83      	ldr	r2, [pc, #524]	; (80056f0 <low_level_init+0x278>)
 80054e4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80054e6:	4b7f      	ldr	r3, [pc, #508]	; (80056e4 <low_level_init+0x26c>)
 80054e8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80054ec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80054ee:	487d      	ldr	r0, [pc, #500]	; (80056e4 <low_level_init+0x26c>)
 80054f0:	f7fc fe34 	bl	800215c <HAL_ETH_Init>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80054fa:	2238      	movs	r2, #56	; 0x38
 80054fc:	2100      	movs	r1, #0
 80054fe:	487d      	ldr	r0, [pc, #500]	; (80056f4 <low_level_init+0x27c>)
 8005500:	f017 f998 	bl	801c834 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005504:	4b7b      	ldr	r3, [pc, #492]	; (80056f4 <low_level_init+0x27c>)
 8005506:	2221      	movs	r2, #33	; 0x21
 8005508:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800550a:	4b7a      	ldr	r3, [pc, #488]	; (80056f4 <low_level_init+0x27c>)
 800550c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005510:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005512:	4b78      	ldr	r3, [pc, #480]	; (80056f4 <low_level_init+0x27c>)
 8005514:	2200      	movs	r2, #0
 8005516:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005518:	4877      	ldr	r0, [pc, #476]	; (80056f8 <low_level_init+0x280>)
 800551a:	f00a fd6b 	bl	800fff4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2206      	movs	r2, #6
 8005522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005526:	4b6f      	ldr	r3, [pc, #444]	; (80056e4 <low_level_init+0x26c>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	781a      	ldrb	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005532:	4b6c      	ldr	r3, [pc, #432]	; (80056e4 <low_level_init+0x26c>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	785a      	ldrb	r2, [r3, #1]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800553e:	4b69      	ldr	r3, [pc, #420]	; (80056e4 <low_level_init+0x26c>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	789a      	ldrb	r2, [r3, #2]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800554a:	4b66      	ldr	r3, [pc, #408]	; (80056e4 <low_level_init+0x26c>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	78da      	ldrb	r2, [r3, #3]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005556:	4b63      	ldr	r3, [pc, #396]	; (80056e4 <low_level_init+0x26c>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	791a      	ldrb	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005562:	4b60      	ldr	r3, [pc, #384]	; (80056e4 <low_level_init+0x26c>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	795a      	ldrb	r2, [r3, #5]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005574:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800557c:	f043 030a 	orr.w	r3, r3, #10
 8005580:	b2da      	uxtb	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8005588:	2300      	movs	r3, #0
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558c:	2300      	movs	r3, #0
 800558e:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8005590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005594:	2101      	movs	r1, #1
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fd30 	bl	8005ffc <osSemaphoreCreate>
 800559c:	4603      	mov	r3, r0
 800559e:	4a57      	ldr	r2, [pc, #348]	; (80056fc <low_level_init+0x284>)
 80055a0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80055a2:	2300      	movs	r3, #0
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
 80055a6:	2300      	movs	r3, #0
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80055aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ae:	2101      	movs	r1, #1
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fd23 	bl	8005ffc <osSemaphoreCreate>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4a51      	ldr	r2, [pc, #324]	; (8005700 <low_level_init+0x288>)
 80055ba:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80055bc:	4b4f      	ldr	r3, [pc, #316]	; (80056fc <low_level_init+0x284>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fd4c 	bl	8006060 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80055c8:	4b4d      	ldr	r3, [pc, #308]	; (8005700 <low_level_init+0x288>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fd46 	bl	8006060 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80055d4:	4b4b      	ldr	r3, [pc, #300]	; (8005704 <low_level_init+0x28c>)
 80055d6:	f107 0408 	add.w	r4, r7, #8
 80055da:	461d      	mov	r5, r3
 80055dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80055e8:	f107 0308 	add.w	r3, r7, #8
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fc08 	bl	8005e04 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80055f4:	4944      	ldr	r1, [pc, #272]	; (8005708 <low_level_init+0x290>)
 80055f6:	4845      	ldr	r0, [pc, #276]	; (800570c <low_level_init+0x294>)
 80055f8:	f7fc fb07 	bl	8001c0a <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80055fc:	4843      	ldr	r0, [pc, #268]	; (800570c <low_level_init+0x294>)
 80055fe:	f7fc fb36 	bl	8001c6e <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8005602:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005606:	2b00      	cmp	r3, #0
 8005608:	d165      	bne.n	80056d6 <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800560a:	4840      	ldr	r0, [pc, #256]	; (800570c <low_level_init+0x294>)
 800560c:	f7fc fbd7 	bl	8001dbe <DP83848_GetLinkState>
 8005610:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8005614:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005618:	2b01      	cmp	r3, #1
 800561a:	dc06      	bgt.n	800562a <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f00b f8cf 	bl	80107c0 <netif_set_link_down>
      netif_set_down(netif);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f00b f862 	bl	80106ec <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005628:	e057      	b.n	80056da <low_level_init+0x262>
      switch (PHYLinkState)
 800562a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800562e:	3b02      	subs	r3, #2
 8005630:	2b03      	cmp	r3, #3
 8005632:	d82b      	bhi.n	800568c <low_level_init+0x214>
 8005634:	a201      	add	r2, pc, #4	; (adr r2, 800563c <low_level_init+0x1c4>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	0800564d 	.word	0x0800564d
 8005640:	0800565f 	.word	0x0800565f
 8005644:	0800566f 	.word	0x0800566f
 8005648:	0800567f 	.word	0x0800567f
        duplex = ETH_FULLDUPLEX_MODE;
 800564c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8005654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800565c:	e01f      	b.n	800569e <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 800565e:	2300      	movs	r3, #0
 8005660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8005664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800566c:	e017      	b.n	800569e <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 800566e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800567c:	e00f      	b.n	800569e <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 800567e:	2300      	movs	r3, #0
 8005680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800568a:	e008      	b.n	800569e <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 800568c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8005694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800569c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800569e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056a2:	4619      	mov	r1, r3
 80056a4:	480f      	ldr	r0, [pc, #60]	; (80056e4 <low_level_init+0x26c>)
 80056a6:	f7fd fa49 	bl	8002b3c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80056aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056ae:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 80056b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056b4:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80056b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056ba:	4619      	mov	r1, r3
 80056bc:	4809      	ldr	r0, [pc, #36]	; (80056e4 <low_level_init+0x26c>)
 80056be:	f7fd fb27 	bl	8002d10 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80056c2:	4808      	ldr	r0, [pc, #32]	; (80056e4 <low_level_init+0x26c>)
 80056c4:	f7fc fdc8 	bl	8002258 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f00a ffa3 	bl	8010614 <netif_set_up>
    netif_set_link_up(netif);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f00b f83e 	bl	8010750 <netif_set_link_up>
}
 80056d4:	e001      	b.n	80056da <low_level_init+0x262>
    Error_Handler();
 80056d6:	f7fc f81d 	bl	8001714 <Error_Handler>
}
 80056da:	bf00      	nop
 80056dc:	37b0      	adds	r7, #176	; 0xb0
 80056de:	46bd      	mov	sp, r7
 80056e0:	bdb0      	pop	{r4, r5, r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20004ff8 	.word	0x20004ff8
 80056e8:	40028000 	.word	0x40028000
 80056ec:	20004f50 	.word	0x20004f50
 80056f0:	20004eb0 	.word	0x20004eb0
 80056f4:	200050a8 	.word	0x200050a8
 80056f8:	080215a4 	.word	0x080215a4
 80056fc:	20004ff0 	.word	0x20004ff0
 8005700:	20004ff4 	.word	0x20004ff4
 8005704:	0801dfa8 	.word	0x0801dfa8
 8005708:	20000010 	.word	0x20000010
 800570c:	200050e0 	.word	0x200050e0

08005710 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b092      	sub	sp, #72	; 0x48
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005728:	f107 030c 	add.w	r3, r7, #12
 800572c:	2230      	movs	r2, #48	; 0x30
 800572e:	2100      	movs	r1, #0
 8005730:	4618      	mov	r0, r3
 8005732:	f017 f87f 	bl	801c834 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005736:	f107 030c 	add.w	r3, r7, #12
 800573a:	2230      	movs	r2, #48	; 0x30
 800573c:	2100      	movs	r1, #0
 800573e:	4618      	mov	r0, r3
 8005740:	f017 f878 	bl	801c834 <memset>

  for(q = p; q != NULL; q = q->next)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	643b      	str	r3, [r7, #64]	; 0x40
 8005748:	e045      	b.n	80057d6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800574a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574c:	2b03      	cmp	r3, #3
 800574e:	d902      	bls.n	8005756 <low_level_output+0x46>
      return ERR_IF;
 8005750:	f06f 030b 	mvn.w	r3, #11
 8005754:	e06c      	b.n	8005830 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8005756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800575c:	4613      	mov	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	3348      	adds	r3, #72	; 0x48
 8005766:	443b      	add	r3, r7
 8005768:	3b3c      	subs	r3, #60	; 0x3c
 800576a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800576c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576e:	895b      	ldrh	r3, [r3, #10]
 8005770:	4619      	mov	r1, r3
 8005772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005774:	4613      	mov	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	3348      	adds	r3, #72	; 0x48
 800577e:	443b      	add	r3, r7
 8005780:	3b38      	subs	r3, #56	; 0x38
 8005782:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005786:	2b00      	cmp	r3, #0
 8005788:	d011      	beq.n	80057ae <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800578a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800578c:	1e5a      	subs	r2, r3, #1
 800578e:	f107 000c 	add.w	r0, r7, #12
 8005792:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005794:	460b      	mov	r3, r1
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	440b      	add	r3, r1
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	18c1      	adds	r1, r0, r3
 800579e:	4613      	mov	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	3348      	adds	r3, #72	; 0x48
 80057a8:	443b      	add	r3, r7
 80057aa:	3b34      	subs	r3, #52	; 0x34
 80057ac:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80057ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80057b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b8:	4613      	mov	r3, r2
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	4413      	add	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	3348      	adds	r3, #72	; 0x48
 80057c2:	443b      	add	r3, r7
 80057c4:	3b34      	subs	r3, #52	; 0x34
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80057ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057cc:	3301      	adds	r3, #1
 80057ce:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80057d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	643b      	str	r3, [r7, #64]	; 0x40
 80057d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1b6      	bne.n	800574a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	891b      	ldrh	r3, [r3, #8]
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b15      	ldr	r3, [pc, #84]	; (8005838 <low_level_output+0x128>)
 80057e4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80057e6:	4a14      	ldr	r2, [pc, #80]	; (8005838 <low_level_output+0x128>)
 80057e8:	f107 030c 	add.w	r3, r7, #12
 80057ec:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80057ee:	4a12      	ldr	r2, [pc, #72]	; (8005838 <low_level_output+0x128>)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80057f4:	6838      	ldr	r0, [r7, #0]
 80057f6:	f00b fc67 	bl	80110c8 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 80057fa:	490f      	ldr	r1, [pc, #60]	; (8005838 <low_level_output+0x128>)
 80057fc:	480f      	ldr	r0, [pc, #60]	; (800583c <low_level_output+0x12c>)
 80057fe:	f7fc fe38 	bl	8002472 <HAL_ETH_Transmit_IT>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10e      	bne.n	8005826 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005808:	bf00      	nop
 800580a:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <low_level_output+0x130>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fc24 	bl	8006060 <osSemaphoreWait>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f5      	bne.n	800580a <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800581e:	4807      	ldr	r0, [pc, #28]	; (800583c <low_level_output+0x12c>)
 8005820:	f7fc ffc6 	bl	80027b0 <HAL_ETH_ReleaseTxPacket>
 8005824:	e002      	b.n	800582c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8005826:	6838      	ldr	r0, [r7, #0]
 8005828:	f00b fba8 	bl	8010f7c <pbuf_free>
  }

  return errval;
 800582c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005830:	4618      	mov	r0, r3
 8005832:	3748      	adds	r7, #72	; 0x48
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	200050a8 	.word	0x200050a8
 800583c:	20004ff8 	.word	0x20004ff8
 8005840:	20004ff4 	.word	0x20004ff4

08005844 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <low_level_input+0x2c>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d105      	bne.n	8005864 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005858:	f107 030c 	add.w	r3, r7, #12
 800585c:	4619      	mov	r1, r3
 800585e:	4805      	ldr	r0, [pc, #20]	; (8005874 <low_level_input+0x30>)
 8005860:	f7fc fe63 	bl	800252a <HAL_ETH_ReadData>
  }

  return p;
 8005864:	68fb      	ldr	r3, [r7, #12]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20004eac 	.word	0x20004eac
 8005874:	20004ff8 	.word	0x20004ff8

08005878 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <ethernetif_input+0x50>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fbe5 	bl	8006060 <osSemaphoreWait>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f5      	bne.n	8005888 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800589c:	68b8      	ldr	r0, [r7, #8]
 800589e:	f7ff ffd1 	bl	8005844 <low_level_input>
 80058a2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	4798      	blx	r3
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f00b fb5e 	bl	8010f7c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1ea      	bne.n	800589c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80058c6:	e7df      	b.n	8005888 <ethernetif_input+0x10>
 80058c8:	20004ff0 	.word	0x20004ff0

080058cc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <ethernetif_init+0x1c>
 80058da:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <ethernetif_init+0x48>)
 80058dc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80058e0:	490d      	ldr	r1, [pc, #52]	; (8005918 <ethernetif_init+0x4c>)
 80058e2:	480e      	ldr	r0, [pc, #56]	; (800591c <ethernetif_init+0x50>)
 80058e4:	f016 fe16 	bl	801c514 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2273      	movs	r2, #115	; 0x73
 80058ec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2274      	movs	r2, #116	; 0x74
 80058f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a09      	ldr	r2, [pc, #36]	; (8005920 <ethernetif_init+0x54>)
 80058fc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a08      	ldr	r2, [pc, #32]	; (8005924 <ethernetif_init+0x58>)
 8005902:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fdb7 	bl	8005478 <low_level_init>

  return ERR_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	0801dfc4 	.word	0x0801dfc4
 8005918:	0801dfe0 	.word	0x0801dfe0
 800591c:	0801dff0 	.word	0x0801dff0
 8005920:	080199b9 	.word	0x080199b9
 8005924:	08005711 	.word	0x08005711

08005928 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	4809      	ldr	r0, [pc, #36]	; (800595c <pbuf_free_custom+0x34>)
 8005938:	f00a fc4c 	bl	80101d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800593c:	4b08      	ldr	r3, [pc, #32]	; (8005960 <pbuf_free_custom+0x38>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d107      	bne.n	8005954 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005944:	4b06      	ldr	r3, [pc, #24]	; (8005960 <pbuf_free_custom+0x38>)
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <pbuf_free_custom+0x3c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fbd4 	bl	80060fc <osSemaphoreRelease>
  }
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	080215a4 	.word	0x080215a4
 8005960:	20004eac 	.word	0x20004eac
 8005964:	20004ff0 	.word	0x20004ff0

08005968 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800596c:	f7fc fae4 	bl	8001f38 <HAL_GetTick>
 8005970:	4603      	mov	r3, r0
}
 8005972:	4618      	mov	r0, r3
 8005974:	bd80      	pop	{r7, pc}
	...

08005978 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08e      	sub	sp, #56	; 0x38
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a4a      	ldr	r2, [pc, #296]	; (8005ac0 <HAL_ETH_MspInit+0x148>)
 8005996:	4293      	cmp	r3, r2
 8005998:	f040 808d 	bne.w	8005ab6 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800599c:	2300      	movs	r3, #0
 800599e:	623b      	str	r3, [r7, #32]
 80059a0:	4b48      	ldr	r3, [pc, #288]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	4a47      	ldr	r2, [pc, #284]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059aa:	6313      	str	r3, [r2, #48]	; 0x30
 80059ac:	4b45      	ldr	r3, [pc, #276]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b4:	623b      	str	r3, [r7, #32]
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	4b41      	ldr	r3, [pc, #260]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	4a40      	ldr	r2, [pc, #256]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059c6:	6313      	str	r3, [r2, #48]	; 0x30
 80059c8:	4b3e      	ldr	r3, [pc, #248]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2300      	movs	r3, #0
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	4b3a      	ldr	r3, [pc, #232]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	4a39      	ldr	r2, [pc, #228]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059e2:	6313      	str	r3, [r2, #48]	; 0x30
 80059e4:	4b37      	ldr	r3, [pc, #220]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	4b33      	ldr	r3, [pc, #204]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	4a32      	ldr	r2, [pc, #200]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 80059fa:	f043 0304 	orr.w	r3, r3, #4
 80059fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005a00:	4b30      	ldr	r3, [pc, #192]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	f003 0304 	and.w	r3, r3, #4
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	4b2c      	ldr	r3, [pc, #176]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	4a2b      	ldr	r2, [pc, #172]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1c:	4b29      	ldr	r3, [pc, #164]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	4a24      	ldr	r2, [pc, #144]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 8005a32:	f043 0302 	orr.w	r3, r3, #2
 8005a36:	6313      	str	r3, [r2, #48]	; 0x30
 8005a38:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <HAL_ETH_MspInit+0x14c>)
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005a44:	2332      	movs	r3, #50	; 0x32
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a50:	2303      	movs	r3, #3
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a54:	230b      	movs	r3, #11
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	481a      	ldr	r0, [pc, #104]	; (8005ac8 <HAL_ETH_MspInit+0x150>)
 8005a60:	f7fd fdd8 	bl	8003614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005a64:	2386      	movs	r3, #134	; 0x86
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a70:	2303      	movs	r3, #3
 8005a72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a74:	230b      	movs	r3, #11
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4813      	ldr	r0, [pc, #76]	; (8005acc <HAL_ETH_MspInit+0x154>)
 8005a80:	f7fd fdc8 	bl	8003614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005a84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a92:	2303      	movs	r3, #3
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a96:	230b      	movs	r3, #11
 8005a98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	480b      	ldr	r0, [pc, #44]	; (8005ad0 <HAL_ETH_MspInit+0x158>)
 8005aa2:	f7fd fdb7 	bl	8003614 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2105      	movs	r1, #5
 8005aaa:	203d      	movs	r0, #61	; 0x3d
 8005aac:	f7fc fb2c 	bl	8002108 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005ab0:	203d      	movs	r0, #61	; 0x3d
 8005ab2:	f7fc fb45 	bl	8002140 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	3738      	adds	r7, #56	; 0x38
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40028000 	.word	0x40028000
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	40020800 	.word	0x40020800
 8005acc:	40020000 	.word	0x40020000
 8005ad0:	40020400 	.word	0x40020400

08005ad4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005ad8:	4802      	ldr	r0, [pc, #8]	; (8005ae4 <ETH_PHY_IO_Init+0x10>)
 8005ada:	f7fd f933 	bl	8002d44 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20004ff8 	.word	0x20004ff8

08005ae8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return 0;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	68f9      	ldr	r1, [r7, #12]
 8005b0a:	4807      	ldr	r0, [pc, #28]	; (8005b28 <ETH_PHY_IO_ReadReg+0x30>)
 8005b0c:	f7fc ff82 	bl	8002a14 <HAL_ETH_ReadPHYRegister>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b1a:	e000      	b.n	8005b1e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20004ff8 	.word	0x20004ff8

08005b2c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	68f9      	ldr	r1, [r7, #12]
 8005b3e:	4807      	ldr	r0, [pc, #28]	; (8005b5c <ETH_PHY_IO_WriteReg+0x30>)
 8005b40:	f7fc ffb3 	bl	8002aaa <HAL_ETH_WritePHYRegister>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b4e:	e000      	b.n	8005b52 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20004ff8 	.word	0x20004ff8

08005b60 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005b64:	f7fc f9e8 	bl	8001f38 <HAL_GetTick>
 8005b68:	4603      	mov	r3, r0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b0a0      	sub	sp, #128	; 0x80
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005b78:	f107 0308 	add.w	r3, r7, #8
 8005b7c:	2264      	movs	r2, #100	; 0x64
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f016 fe57 	bl	801c834 <memset>
  int32_t PHYLinkState = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b8e:	2300      	movs	r3, #0
 8005b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b92:	2300      	movs	r3, #0
 8005b94:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005b9a:	483a      	ldr	r0, [pc, #232]	; (8005c84 <ethernet_link_thread+0x114>)
 8005b9c:	f7fc f90f 	bl	8001dbe <DP83848_GetLinkState>
 8005ba0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8005ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ba8:	089b      	lsrs	r3, r3, #2
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00c      	beq.n	8005bce <ethernet_link_thread+0x5e>
 8005bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	dc09      	bgt.n	8005bce <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005bba:	4833      	ldr	r0, [pc, #204]	; (8005c88 <ethernet_link_thread+0x118>)
 8005bbc:	f7fc fbda 	bl	8002374 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005bc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005bc2:	f00a fd93 	bl	80106ec <netif_set_down>
    netif_set_link_down(netif);
 8005bc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005bc8:	f00a fdfa 	bl	80107c0 <netif_set_link_down>
 8005bcc:	e055      	b.n	8005c7a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d14e      	bne.n	8005c7a <ethernet_link_thread+0x10a>
 8005bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	dd4b      	ble.n	8005c7a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005be4:	3b02      	subs	r3, #2
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d82a      	bhi.n	8005c40 <ethernet_link_thread+0xd0>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <ethernet_link_thread+0x80>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c13 	.word	0x08005c13
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c33 	.word	0x08005c33
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c04:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005c06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c0a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005c10:	e017      	b.n	8005c42 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005c12:	2300      	movs	r3, #0
 8005c14:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005c16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c1a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005c20:	e00f      	b.n	8005c42 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c26:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005c30:	e007      	b.n	8005c42 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005c36:	2300      	movs	r3, #0
 8005c38:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005c3e:	e000      	b.n	8005c42 <ethernet_link_thread+0xd2>
    default:
      break;
 8005c40:	bf00      	nop
    }

    if(linkchanged)
 8005c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d018      	beq.n	8005c7a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005c48:	f107 0308 	add.w	r3, r7, #8
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	480e      	ldr	r0, [pc, #56]	; (8005c88 <ethernet_link_thread+0x118>)
 8005c50:	f7fc ff74 	bl	8002b3c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c56:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005c5c:	f107 0308 	add.w	r3, r7, #8
 8005c60:	4619      	mov	r1, r3
 8005c62:	4809      	ldr	r0, [pc, #36]	; (8005c88 <ethernet_link_thread+0x118>)
 8005c64:	f7fd f854 	bl	8002d10 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005c68:	4807      	ldr	r0, [pc, #28]	; (8005c88 <ethernet_link_thread+0x118>)
 8005c6a:	f7fc faf5 	bl	8002258 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005c6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c70:	f00a fcd0 	bl	8010614 <netif_set_up>
      netif_set_link_up(netif);
 8005c74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c76:	f00a fd6b 	bl	8010750 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005c7a:	2064      	movs	r0, #100	; 0x64
 8005c7c:	f000 f90e 	bl	8005e9c <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005c80:	e78b      	b.n	8005b9a <ethernet_link_thread+0x2a>
 8005c82:	bf00      	nop
 8005c84:	200050e0 	.word	0x200050e0
 8005c88:	20004ff8 	.word	0x20004ff8

08005c8c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005c94:	4812      	ldr	r0, [pc, #72]	; (8005ce0 <HAL_ETH_RxAllocateCallback+0x54>)
 8005c96:	f00a fa29 	bl	80100ec <memp_malloc_pool>
 8005c9a:	60f8      	str	r0, [r7, #12]
  if (p)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d014      	beq.n	8005ccc <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f103 0220 	add.w	r2, r3, #32
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4a0d      	ldr	r2, [pc, #52]	; (8005ce4 <HAL_ETH_RxAllocateCallback+0x58>)
 8005cb0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005cba:	9201      	str	r2, [sp, #4]
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2241      	movs	r2, #65	; 0x41
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f00a ff9f 	bl	8010c08 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005cca:	e005      	b.n	8005cd8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005ccc:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	080215a4 	.word	0x080215a4
 8005ce4:	08005929 	.word	0x08005929
 8005ce8:	20004eac 	.word	0x20004eac

08005cec <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3b20      	subs	r3, #32
 8005d0a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	2200      	movs	r2, #0
 8005d16:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	887a      	ldrh	r2, [r7, #2]
 8005d1c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e003      	b.n	8005d36 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	e009      	b.n	8005d58 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	891a      	ldrh	r2, [r3, #8]
 8005d48:	887b      	ldrh	r3, [r7, #2]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f2      	bne.n	8005d44 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	3724      	adds	r7, #36	; 0x24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f00b f901 	bl	8010f7c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	4603      	mov	r3, r0
 8005d8a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d94:	2b84      	cmp	r3, #132	; 0x84
 8005d96:	d005      	beq.n	8005da4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	3303      	adds	r3, #3
 8005da2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005da4:	68fb      	ldr	r3, [r7, #12]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db8:	f3ef 8305 	mrs	r3, IPSR
 8005dbc:	607b      	str	r3, [r7, #4]
  return(result);
 8005dbe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bf14      	ite	ne
 8005dc4:	2301      	movne	r3, #1
 8005dc6:	2300      	moveq	r3, #0
 8005dc8:	b2db      	uxtb	r3, r3
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005dda:	f001 fc73 	bl	80076c4 <vTaskStartScheduler>
  
  return osOK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005de8:	f7ff ffe3 	bl	8005db2 <inHandlerMode>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005df2:	f001 fd8b 	bl	800790c <xTaskGetTickCountFromISR>
 8005df6:	4603      	mov	r3, r0
 8005df8:	e002      	b.n	8005e00 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005dfa:	f001 fd77 	bl	80078ec <xTaskGetTickCount>
 8005dfe:	4603      	mov	r3, r0
  }
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e06:	b089      	sub	sp, #36	; 0x24
 8005e08:	af04      	add	r7, sp, #16
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d020      	beq.n	8005e58 <osThreadCreate+0x54>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01c      	beq.n	8005e58 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685c      	ldr	r4, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691e      	ldr	r6, [r3, #16]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff ffa6 	bl	8005d82 <makeFreeRtosPriority>
 8005e36:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e40:	9202      	str	r2, [sp, #8]
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	9100      	str	r1, [sp, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	4632      	mov	r2, r6
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f001 fa5b 	bl	8007308 <xTaskCreateStatic>
 8005e52:	4603      	mov	r3, r0
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e01c      	b.n	8005e92 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685c      	ldr	r4, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e64:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff ff88 	bl	8005d82 <makeFreeRtosPriority>
 8005e72:	4602      	mov	r2, r0
 8005e74:	f107 030c 	add.w	r3, r7, #12
 8005e78:	9301      	str	r3, [sp, #4]
 8005e7a:	9200      	str	r2, [sp, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	4632      	mov	r2, r6
 8005e80:	4629      	mov	r1, r5
 8005e82:	4620      	mov	r0, r4
 8005e84:	f001 fa9d 	bl	80073c2 <xTaskCreate>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d001      	beq.n	8005e92 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e000      	b.n	8005e94 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e92:	68fb      	ldr	r3, [r7, #12]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <osDelay+0x16>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	e000      	b.n	8005eb4 <osDelay+0x18>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 fbd1 	bl	800765c <vTaskDelay>
  
  return osOK;
 8005eba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d007      	beq.n	8005ee4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	2001      	movs	r0, #1
 8005edc:	f000 fc3f 	bl	800675e <xQueueCreateMutexStatic>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	e003      	b.n	8005eec <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f000 fc22 	bl	800672e <xQueueCreateMutex>
 8005eea:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <osMutexWait+0x18>
    return osErrorParameter;
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	e03a      	b.n	8005f82 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f16:	d103      	bne.n	8005f20 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e009      	b.n	8005f34 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d006      	beq.n	8005f34 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <osMutexWait+0x40>
      ticks = 1;
 8005f30:	2301      	movs	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005f34:	f7ff ff3d 	bl	8005db2 <inHandlerMode>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d017      	beq.n	8005f6e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005f3e:	f107 0308 	add.w	r3, r7, #8
 8005f42:	461a      	mov	r2, r3
 8005f44:	2100      	movs	r1, #0
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 f836 	bl	8006fb8 <xQueueReceiveFromISR>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d001      	beq.n	8005f56 <osMutexWait+0x62>
      return osErrorOS;
 8005f52:	23ff      	movs	r3, #255	; 0xff
 8005f54:	e015      	b.n	8005f82 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d011      	beq.n	8005f80 <osMutexWait+0x8c>
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <osMutexWait+0x98>)
 8005f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	e008      	b.n	8005f80 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 ff15 	bl	8006da0 <xQueueSemaphoreTake>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d001      	beq.n	8005f80 <osMutexWait+0x8c>
    return osErrorOS;
 8005f7c:	23ff      	movs	r3, #255	; 0xff
 8005f7e:	e000      	b.n	8005f82 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	e000ed04 	.word	0xe000ed04

08005f90 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005fa0:	f7ff ff07 	bl	8005db2 <inHandlerMode>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d016      	beq.n	8005fd8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005faa:	f107 0308 	add.w	r3, r7, #8
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fd88 	bl	8006ac6 <xQueueGiveFromISR>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d001      	beq.n	8005fc0 <osMutexRelease+0x30>
      return osErrorOS;
 8005fbc:	23ff      	movs	r3, #255	; 0xff
 8005fbe:	e017      	b.n	8005ff0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d013      	beq.n	8005fee <osMutexRelease+0x5e>
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <osMutexRelease+0x68>)
 8005fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	e00a      	b.n	8005fee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fbd8 	bl	8006794 <xQueueGenericSend>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d001      	beq.n	8005fee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005fea:	23ff      	movs	r3, #255	; 0xff
 8005fec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00f      	beq.n	800602e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10a      	bne.n	800602a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2203      	movs	r2, #3
 800601a:	9200      	str	r2, [sp, #0]
 800601c:	2200      	movs	r2, #0
 800601e:	2100      	movs	r1, #0
 8006020:	2001      	movs	r0, #1
 8006022:	f000 fa99 	bl	8006558 <xQueueGenericCreateStatic>
 8006026:	4603      	mov	r3, r0
 8006028:	e016      	b.n	8006058 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	e014      	b.n	8006058 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d110      	bne.n	8006056 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006034:	2203      	movs	r2, #3
 8006036:	2100      	movs	r1, #0
 8006038:	2001      	movs	r0, #1
 800603a:	f000 fb05 	bl	8006648 <xQueueGenericCreate>
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <osSemaphoreCreate+0x56>
 8006046:	2300      	movs	r3, #0
 8006048:	2200      	movs	r2, #0
 800604a:	2100      	movs	r1, #0
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fba1 	bl	8006794 <xQueueGenericSend>
      return sema;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	e000      	b.n	8006058 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006056:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800606a:	2300      	movs	r3, #0
 800606c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	e03a      	b.n	80060ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006082:	d103      	bne.n	800608c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e009      	b.n	80060a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d006      	beq.n	80060a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <osSemaphoreWait+0x40>
      ticks = 1;
 800609c:	2301      	movs	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80060a0:	f7ff fe87 	bl	8005db2 <inHandlerMode>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d017      	beq.n	80060da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80060aa:	f107 0308 	add.w	r3, r7, #8
 80060ae:	461a      	mov	r2, r3
 80060b0:	2100      	movs	r1, #0
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 ff80 	bl	8006fb8 <xQueueReceiveFromISR>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80060be:	23ff      	movs	r3, #255	; 0xff
 80060c0:	e015      	b.n	80060ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d011      	beq.n	80060ec <osSemaphoreWait+0x8c>
 80060c8:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <osSemaphoreWait+0x98>)
 80060ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	e008      	b.n	80060ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fe5f 	bl	8006da0 <xQueueSemaphoreTake>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d001      	beq.n	80060ec <osSemaphoreWait+0x8c>
    return osErrorOS;
 80060e8:	23ff      	movs	r3, #255	; 0xff
 80060ea:	e000      	b.n	80060ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006108:	2300      	movs	r3, #0
 800610a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800610c:	f7ff fe51 	bl	8005db2 <inHandlerMode>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d016      	beq.n	8006144 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006116:	f107 0308 	add.w	r3, r7, #8
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fcd2 	bl	8006ac6 <xQueueGiveFromISR>
 8006122:	4603      	mov	r3, r0
 8006124:	2b01      	cmp	r3, #1
 8006126:	d001      	beq.n	800612c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006128:	23ff      	movs	r3, #255	; 0xff
 800612a:	e017      	b.n	800615c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d013      	beq.n	800615a <osSemaphoreRelease+0x5e>
 8006132:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <osSemaphoreRelease+0x68>)
 8006134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	e00a      	b.n	800615a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006144:	2300      	movs	r3, #0
 8006146:	2200      	movs	r2, #0
 8006148:	2100      	movs	r1, #0
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fb22 	bl	8006794 <xQueueGenericSend>
 8006150:	4603      	mov	r3, r0
 8006152:	2b01      	cmp	r3, #1
 8006154:	d001      	beq.n	800615a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006156:	23ff      	movs	r3, #255	; 0xff
 8006158:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800615a:	68fb      	ldr	r3, [r7, #12]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006168:	b590      	push	{r4, r7, lr}
 800616a:	b085      	sub	sp, #20
 800616c:	af02      	add	r7, sp, #8
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d011      	beq.n	800619e <osMessageCreate+0x36>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	2400      	movs	r4, #0
 8006194:	9400      	str	r4, [sp, #0]
 8006196:	f000 f9df 	bl	8006558 <xQueueGenericCreateStatic>
 800619a:	4603      	mov	r3, r0
 800619c:	e008      	b.n	80061b0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	4619      	mov	r1, r3
 80061aa:	f000 fa4d 	bl	8006648 <xQueueGenericCreate>
 80061ae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd90      	pop	{r4, r7, pc}

080061b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <osMessagePut+0x1e>
    ticks = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80061d6:	f7ff fdec 	bl	8005db2 <inHandlerMode>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d018      	beq.n	8006212 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80061e0:	f107 0210 	add.w	r2, r7, #16
 80061e4:	f107 0108 	add.w	r1, r7, #8
 80061e8:	2300      	movs	r3, #0
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fbd0 	bl	8006990 <xQueueGenericSendFromISR>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d001      	beq.n	80061fa <osMessagePut+0x42>
      return osErrorOS;
 80061f6:	23ff      	movs	r3, #255	; 0xff
 80061f8:	e018      	b.n	800622c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d014      	beq.n	800622a <osMessagePut+0x72>
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <osMessagePut+0x7c>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	e00b      	b.n	800622a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006212:	f107 0108 	add.w	r1, r7, #8
 8006216:	2300      	movs	r3, #0
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 faba 	bl	8006794 <xQueueGenericSend>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d001      	beq.n	800622a <osMessagePut+0x72>
      return osErrorOS;
 8006226:	23ff      	movs	r3, #255	; 0xff
 8006228:	e000      	b.n	800622c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b08b      	sub	sp, #44	; 0x2c
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006252:	2380      	movs	r3, #128	; 0x80
 8006254:	617b      	str	r3, [r7, #20]
    return event;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	461c      	mov	r4, r3
 800625a:	f107 0314 	add.w	r3, r7, #20
 800625e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006266:	e054      	b.n	8006312 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006268:	2300      	movs	r3, #0
 800626a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006276:	d103      	bne.n	8006280 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
 800627e:	e009      	b.n	8006294 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d006      	beq.n	8006294 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <osMessageGet+0x5c>
      ticks = 1;
 8006290:	2301      	movs	r3, #1
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006294:	f7ff fd8d 	bl	8005db2 <inHandlerMode>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01c      	beq.n	80062d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800629e:	f107 0220 	add.w	r2, r7, #32
 80062a2:	f107 0314 	add.w	r3, r7, #20
 80062a6:	3304      	adds	r3, #4
 80062a8:	4619      	mov	r1, r3
 80062aa:	68b8      	ldr	r0, [r7, #8]
 80062ac:	f000 fe84 	bl	8006fb8 <xQueueReceiveFromISR>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d102      	bne.n	80062bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80062b6:	2310      	movs	r3, #16
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	e001      	b.n	80062c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01d      	beq.n	8006302 <osMessageGet+0xca>
 80062c6:	4b15      	ldr	r3, [pc, #84]	; (800631c <osMessageGet+0xe4>)
 80062c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	e014      	b.n	8006302 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	3304      	adds	r3, #4
 80062de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e0:	4619      	mov	r1, r3
 80062e2:	68b8      	ldr	r0, [r7, #8]
 80062e4:	f000 fc7c 	bl	8006be0 <xQueueReceive>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d102      	bne.n	80062f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80062ee:	2310      	movs	r3, #16
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	e006      	b.n	8006302 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <osMessageGet+0xc6>
 80062fa:	2300      	movs	r3, #0
 80062fc:	e000      	b.n	8006300 <osMessageGet+0xc8>
 80062fe:	2340      	movs	r3, #64	; 0x40
 8006300:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	461c      	mov	r4, r3
 8006306:	f107 0314 	add.w	r3, r7, #20
 800630a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800630e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	372c      	adds	r7, #44	; 0x2c
 8006316:	46bd      	mov	sp, r7
 8006318:	bd90      	pop	{r4, r7, pc}
 800631a:	bf00      	nop
 800631c:	e000ed04 	.word	0xe000ed04

08006320 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f103 0208 	add.w	r2, r3, #8
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006338:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f103 0208 	add.w	r2, r3, #8
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f103 0208 	add.w	r2, r3, #8
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d8:	d103      	bne.n	80063e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	e00c      	b.n	80063fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3308      	adds	r3, #8
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e002      	b.n	80063f0 <vListInsert+0x2e>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d2f6      	bcs.n	80063ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	601a      	str	r2, [r3, #0]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6892      	ldr	r2, [r2, #8]
 800644a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6852      	ldr	r2, [r2, #4]
 8006454:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	429a      	cmp	r2, r3
 800645e:	d103      	bne.n	8006468 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	1e5a      	subs	r2, r3, #1
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064b2:	f002 f887 	bl	80085c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	441a      	add	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	3b01      	subs	r3, #1
 80064e4:	68f9      	ldr	r1, [r7, #12]
 80064e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	22ff      	movs	r2, #255	; 0xff
 80064fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d114      	bne.n	8006532 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01a      	beq.n	8006546 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3310      	adds	r3, #16
 8006514:	4618      	mov	r0, r3
 8006516:	f001 fb49 	bl	8007bac <xTaskRemoveFromEventList>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d012      	beq.n	8006546 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006520:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <xQueueGenericReset+0xcc>)
 8006522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	e009      	b.n	8006546 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3310      	adds	r3, #16
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fef2 	bl	8006320 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3324      	adds	r3, #36	; 0x24
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff feed 	bl	8006320 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006546:	f002 f86d 	bl	8008624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800654a:	2301      	movs	r3, #1
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	e000ed04 	.word	0xe000ed04

08006558 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08e      	sub	sp, #56	; 0x38
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <xQueueGenericCreateStatic+0x52>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <xQueueGenericCreateStatic+0x56>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xQueueGenericCreateStatic+0x58>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	623b      	str	r3, [r7, #32]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <xQueueGenericCreateStatic+0x7e>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <xQueueGenericCreateStatic+0x82>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <xQueueGenericCreateStatic+0x84>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	61fb      	str	r3, [r7, #28]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065f6:	2348      	movs	r3, #72	; 0x48
 80065f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b48      	cmp	r3, #72	; 0x48
 80065fe:	d00a      	beq.n	8006616 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	61bb      	str	r3, [r7, #24]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006616:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00d      	beq.n	800663e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800662a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	4613      	mov	r3, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f83f 	bl	80066bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800663e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006640:	4618      	mov	r0, r3
 8006642:	3730      	adds	r7, #48	; 0x30
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <xQueueGenericCreate+0x2a>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	613b      	str	r3, [r7, #16]
}
 800666e:	bf00      	nop
 8006670:	e7fe      	b.n	8006670 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3348      	adds	r3, #72	; 0x48
 8006680:	4618      	mov	r0, r3
 8006682:	f002 f8c1 	bl	8008808 <pvPortMalloc>
 8006686:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d011      	beq.n	80066b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	3348      	adds	r3, #72	; 0x48
 8006696:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066a0:	79fa      	ldrb	r2, [r7, #7]
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	4613      	mov	r3, r2
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f805 	bl	80066bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066b2:	69bb      	ldr	r3, [r7, #24]
	}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3720      	adds	r7, #32
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d103      	bne.n	80066d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e002      	b.n	80066de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066ea:	2101      	movs	r1, #1
 80066ec:	69b8      	ldr	r0, [r7, #24]
 80066ee:	f7ff fecb 	bl	8006488 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00e      	beq.n	8006726 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800671a:	2300      	movs	r3, #0
 800671c:	2200      	movs	r2, #0
 800671e:	2100      	movs	r1, #0
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f837 	bl	8006794 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	4603      	mov	r3, r0
 8006736:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006738:	2301      	movs	r3, #1
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	2300      	movs	r3, #0
 800673e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	461a      	mov	r2, r3
 8006744:	6939      	ldr	r1, [r7, #16]
 8006746:	6978      	ldr	r0, [r7, #20]
 8006748:	f7ff ff7e 	bl	8006648 <xQueueGenericCreate>
 800674c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7ff ffd3 	bl	80066fa <prvInitialiseMutex>

		return xNewQueue;
 8006754:	68fb      	ldr	r3, [r7, #12]
	}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800675e:	b580      	push	{r7, lr}
 8006760:	b088      	sub	sp, #32
 8006762:	af02      	add	r7, sp, #8
 8006764:	4603      	mov	r3, r0
 8006766:	6039      	str	r1, [r7, #0]
 8006768:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800676a:	2301      	movs	r3, #1
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	2300      	movs	r3, #0
 8006770:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2200      	movs	r2, #0
 800677a:	6939      	ldr	r1, [r7, #16]
 800677c:	6978      	ldr	r0, [r7, #20]
 800677e:	f7ff feeb 	bl	8006558 <xQueueGenericCreateStatic>
 8006782:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff ffb8 	bl	80066fa <prvInitialiseMutex>

		return xNewQueue;
 800678a:	68fb      	ldr	r3, [r7, #12]
	}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08e      	sub	sp, #56	; 0x38
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067a2:	2300      	movs	r3, #0
 80067a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10a      	bne.n	80067c6 <xQueueGenericSend+0x32>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d103      	bne.n	80067d4 <xQueueGenericSend+0x40>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <xQueueGenericSend+0x44>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <xQueueGenericSend+0x46>
 80067d8:	2300      	movs	r3, #0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <xQueueGenericSend+0x60>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d103      	bne.n	8006802 <xQueueGenericSend+0x6e>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <xQueueGenericSend+0x72>
 8006802:	2301      	movs	r3, #1
 8006804:	e000      	b.n	8006808 <xQueueGenericSend+0x74>
 8006806:	2300      	movs	r3, #0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xQueueGenericSend+0x8e>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	623b      	str	r3, [r7, #32]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006822:	f001 fb83 	bl	8007f2c <xTaskGetSchedulerState>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <xQueueGenericSend+0x9e>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <xQueueGenericSend+0xa2>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <xQueueGenericSend+0xa4>
 8006836:	2300      	movs	r3, #0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <xQueueGenericSend+0xbe>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	61fb      	str	r3, [r7, #28]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006852:	f001 feb7 	bl	80085c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	429a      	cmp	r2, r3
 8006860:	d302      	bcc.n	8006868 <xQueueGenericSend+0xd4>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d129      	bne.n	80068bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800686e:	f000 fc3b 	bl	80070e8 <prvCopyDataToQueue>
 8006872:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	2b00      	cmp	r3, #0
 800687a:	d010      	beq.n	800689e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	3324      	adds	r3, #36	; 0x24
 8006880:	4618      	mov	r0, r3
 8006882:	f001 f993 	bl	8007bac <xTaskRemoveFromEventList>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d013      	beq.n	80068b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800688c:	4b3f      	ldr	r3, [pc, #252]	; (800698c <xQueueGenericSend+0x1f8>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	e00a      	b.n	80068b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d007      	beq.n	80068b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068a4:	4b39      	ldr	r3, [pc, #228]	; (800698c <xQueueGenericSend+0x1f8>)
 80068a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068b4:	f001 feb6 	bl	8008624 <vPortExitCritical>
				return pdPASS;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e063      	b.n	8006984 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d103      	bne.n	80068ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068c2:	f001 feaf 	bl	8008624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e05c      	b.n	8006984 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	4618      	mov	r0, r3
 80068d6:	f001 f9cb 	bl	8007c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068da:	2301      	movs	r3, #1
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068de:	f001 fea1 	bl	8008624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068e2:	f000 ff59 	bl	8007798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068e6:	f001 fe6d 	bl	80085c4 <vPortEnterCritical>
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068f0:	b25b      	sxtb	r3, r3
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f6:	d103      	bne.n	8006900 <xQueueGenericSend+0x16c>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006906:	b25b      	sxtb	r3, r3
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800690c:	d103      	bne.n	8006916 <xQueueGenericSend+0x182>
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006916:	f001 fe85 	bl	8008624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800691a:	1d3a      	adds	r2, r7, #4
 800691c:	f107 0314 	add.w	r3, r7, #20
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f001 f9ba 	bl	8007c9c <xTaskCheckForTimeOut>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d124      	bne.n	8006978 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800692e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006930:	f000 fcd2 	bl	80072d8 <prvIsQueueFull>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d018      	beq.n	800696c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	3310      	adds	r3, #16
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	4611      	mov	r1, r2
 8006942:	4618      	mov	r0, r3
 8006944:	f001 f90e 	bl	8007b64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800694a:	f000 fc5d 	bl	8007208 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800694e:	f000 ff31 	bl	80077b4 <xTaskResumeAll>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	f47f af7c 	bne.w	8006852 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800695a:	4b0c      	ldr	r3, [pc, #48]	; (800698c <xQueueGenericSend+0x1f8>)
 800695c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	e772      	b.n	8006852 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800696c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800696e:	f000 fc4b 	bl	8007208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006972:	f000 ff1f 	bl	80077b4 <xTaskResumeAll>
 8006976:	e76c      	b.n	8006852 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800697a:	f000 fc45 	bl	8007208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800697e:	f000 ff19 	bl	80077b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006982:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006984:	4618      	mov	r0, r3
 8006986:	3738      	adds	r7, #56	; 0x38
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b090      	sub	sp, #64	; 0x40
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10a      	bne.n	80069be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <xQueueGenericSendFromISR+0x3c>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <xQueueGenericSendFromISR+0x40>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <xQueueGenericSendFromISR+0x42>
 80069d0:	2300      	movs	r3, #0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d103      	bne.n	80069fa <xQueueGenericSendFromISR+0x6a>
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <xQueueGenericSendFromISR+0x6e>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <xQueueGenericSendFromISR+0x70>
 80069fe:	2300      	movs	r3, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	623b      	str	r3, [r7, #32]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a1a:	f001 feb5 	bl	8008788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a1e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	61fa      	str	r2, [r7, #28]
 8006a34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d302      	bcc.n	8006a4c <xQueueGenericSendFromISR+0xbc>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d12f      	bne.n	8006aac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a62:	f000 fb41 	bl	80070e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a6e:	d112      	bne.n	8006a96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d016      	beq.n	8006aa6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 f895 	bl	8007bac <xTaskRemoveFromEventList>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00e      	beq.n	8006aa6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	e007      	b.n	8006aa6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	b25a      	sxtb	r2, r3
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006aaa:	e001      	b.n	8006ab0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006aba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3740      	adds	r7, #64	; 0x40
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08e      	sub	sp, #56	; 0x38
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	623b      	str	r3, [r7, #32]
}
 8006aec:	bf00      	nop
 8006aee:	e7fe      	b.n	8006aee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	61fb      	str	r3, [r7, #28]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <xQueueGiveFromISR+0x58>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <xQueueGiveFromISR+0x5c>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <xQueueGiveFromISR+0x5e>
 8006b22:	2300      	movs	r3, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	61bb      	str	r3, [r7, #24]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b3e:	f001 fe23 	bl	8008788 <vPortValidateInterruptPriority>
	__asm volatile
 8006b42:	f3ef 8211 	mrs	r2, BASEPRI
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	617a      	str	r2, [r7, #20]
 8006b58:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b5a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d22b      	bcs.n	8006bc6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b88:	d112      	bne.n	8006bb0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d016      	beq.n	8006bc0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	3324      	adds	r3, #36	; 0x24
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 f808 	bl	8007bac <xTaskRemoveFromEventList>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00e      	beq.n	8006bc0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	2201      	movs	r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e007      	b.n	8006bc0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	b25a      	sxtb	r2, r3
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc4:	e001      	b.n	8006bca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f383 8811 	msr	BASEPRI, r3
}
 8006bd4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3738      	adds	r7, #56	; 0x38
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08c      	sub	sp, #48	; 0x30
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10a      	bne.n	8006c10 <xQueueReceive+0x30>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	623b      	str	r3, [r7, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <xQueueReceive+0x3e>
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <xQueueReceive+0x42>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <xQueueReceive+0x44>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <xQueueReceive+0x5e>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	61fb      	str	r3, [r7, #28]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c3e:	f001 f975 	bl	8007f2c <xTaskGetSchedulerState>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <xQueueReceive+0x6e>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <xQueueReceive+0x72>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <xQueueReceive+0x74>
 8006c52:	2300      	movs	r3, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <xQueueReceive+0x8e>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	61bb      	str	r3, [r7, #24]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c6e:	f001 fca9 	bl	80085c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01f      	beq.n	8006cbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c82:	f000 fa9b 	bl	80071bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	1e5a      	subs	r2, r3, #1
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00f      	beq.n	8006cb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	3310      	adds	r3, #16
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 ff86 	bl	8007bac <xTaskRemoveFromEventList>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ca6:	4b3d      	ldr	r3, [pc, #244]	; (8006d9c <xQueueReceive+0x1bc>)
 8006ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cb6:	f001 fcb5 	bl	8008624 <vPortExitCritical>
				return pdPASS;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e069      	b.n	8006d92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d103      	bne.n	8006ccc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cc4:	f001 fcae 	bl	8008624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e062      	b.n	8006d92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cd2:	f107 0310 	add.w	r3, r7, #16
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 ffca 	bl	8007c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ce0:	f001 fca0 	bl	8008624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ce4:	f000 fd58 	bl	8007798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ce8:	f001 fc6c 	bl	80085c4 <vPortEnterCritical>
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cf8:	d103      	bne.n	8006d02 <xQueueReceive+0x122>
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d0e:	d103      	bne.n	8006d18 <xQueueReceive+0x138>
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d18:	f001 fc84 	bl	8008624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d1c:	1d3a      	adds	r2, r7, #4
 8006d1e:	f107 0310 	add.w	r3, r7, #16
 8006d22:	4611      	mov	r1, r2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 ffb9 	bl	8007c9c <xTaskCheckForTimeOut>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d123      	bne.n	8006d78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d32:	f000 fabb 	bl	80072ac <prvIsQueueEmpty>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d017      	beq.n	8006d6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	3324      	adds	r3, #36	; 0x24
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 ff0d 	bl	8007b64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d4c:	f000 fa5c 	bl	8007208 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d50:	f000 fd30 	bl	80077b4 <xTaskResumeAll>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d189      	bne.n	8006c6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d5a:	4b10      	ldr	r3, [pc, #64]	; (8006d9c <xQueueReceive+0x1bc>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	e780      	b.n	8006c6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6e:	f000 fa4b 	bl	8007208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d72:	f000 fd1f 	bl	80077b4 <xTaskResumeAll>
 8006d76:	e77a      	b.n	8006c6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d7a:	f000 fa45 	bl	8007208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d7e:	f000 fd19 	bl	80077b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d84:	f000 fa92 	bl	80072ac <prvIsQueueEmpty>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f43f af6f 	beq.w	8006c6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3730      	adds	r7, #48	; 0x30
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	e000ed04 	.word	0xe000ed04

08006da0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08e      	sub	sp, #56	; 0x38
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	623b      	str	r3, [r7, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	61fb      	str	r3, [r7, #28]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006df0:	f001 f89c 	bl	8007f2c <xTaskGetSchedulerState>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d102      	bne.n	8006e00 <xQueueSemaphoreTake+0x60>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <xQueueSemaphoreTake+0x64>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e000      	b.n	8006e06 <xQueueSemaphoreTake+0x66>
 8006e04:	2300      	movs	r3, #0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	61bb      	str	r3, [r7, #24]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e20:	f001 fbd0 	bl	80085c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d024      	beq.n	8006e7a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	1e5a      	subs	r2, r3, #1
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e40:	f001 fa1c 	bl	800827c <pvTaskIncrementMutexHeldCount>
 8006e44:	4602      	mov	r2, r0
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00f      	beq.n	8006e72 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	3310      	adds	r3, #16
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fea8 	bl	8007bac <xTaskRemoveFromEventList>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d007      	beq.n	8006e72 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e62:	4b54      	ldr	r3, [pc, #336]	; (8006fb4 <xQueueSemaphoreTake+0x214>)
 8006e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e72:	f001 fbd7 	bl	8008624 <vPortExitCritical>
				return pdPASS;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e097      	b.n	8006faa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d111      	bne.n	8006ea4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	617b      	str	r3, [r7, #20]
}
 8006e98:	bf00      	nop
 8006e9a:	e7fe      	b.n	8006e9a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e9c:	f001 fbc2 	bl	8008624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e082      	b.n	8006faa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eaa:	f107 030c 	add.w	r3, r7, #12
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fede 	bl	8007c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eb8:	f001 fbb4 	bl	8008624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ebc:	f000 fc6c 	bl	8007798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ec0:	f001 fb80 	bl	80085c4 <vPortEnterCritical>
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eca:	b25b      	sxtb	r3, r3
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed0:	d103      	bne.n	8006eda <xQueueSemaphoreTake+0x13a>
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ee0:	b25b      	sxtb	r3, r3
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ee6:	d103      	bne.n	8006ef0 <xQueueSemaphoreTake+0x150>
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ef0:	f001 fb98 	bl	8008624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ef4:	463a      	mov	r2, r7
 8006ef6:	f107 030c 	add.w	r3, r7, #12
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 fecd 	bl	8007c9c <xTaskCheckForTimeOut>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d132      	bne.n	8006f6e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f0a:	f000 f9cf 	bl	80072ac <prvIsQueueEmpty>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d026      	beq.n	8006f62 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006f1c:	f001 fb52 	bl	80085c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f001 f81f 	bl	8007f68 <xTaskPriorityInherit>
 8006f2a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006f2c:	f001 fb7a 	bl	8008624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	4611      	mov	r1, r2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fe13 	bl	8007b64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f40:	f000 f962 	bl	8007208 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f44:	f000 fc36 	bl	80077b4 <xTaskResumeAll>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f47f af68 	bne.w	8006e20 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006f50:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <xQueueSemaphoreTake+0x214>)
 8006f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	e75e      	b.n	8006e20 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f64:	f000 f950 	bl	8007208 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f68:	f000 fc24 	bl	80077b4 <xTaskResumeAll>
 8006f6c:	e758      	b.n	8006e20 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f70:	f000 f94a 	bl	8007208 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f74:	f000 fc1e 	bl	80077b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f7a:	f000 f997 	bl	80072ac <prvIsQueueEmpty>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f43f af4d 	beq.w	8006e20 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00d      	beq.n	8006fa8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006f8c:	f001 fb1a 	bl	80085c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f92:	f000 f891 	bl	80070b8 <prvGetDisinheritPriorityAfterTimeout>
 8006f96:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 f8de 	bl	8008160 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006fa4:	f001 fb3e 	bl	8008624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3738      	adds	r7, #56	; 0x38
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	e000ed04 	.word	0xe000ed04

08006fb8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08e      	sub	sp, #56	; 0x38
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	623b      	str	r3, [r7, #32]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <xQueueReceiveFromISR+0x3a>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <xQueueReceiveFromISR+0x3e>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <xQueueReceiveFromISR+0x40>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	61fb      	str	r3, [r7, #28]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007012:	f001 fbb9 	bl	8008788 <vPortValidateInterruptPriority>
	__asm volatile
 8007016:	f3ef 8211 	mrs	r2, BASEPRI
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	61ba      	str	r2, [r7, #24]
 800702c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800702e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02f      	beq.n	800709e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800704c:	f000 f8b6 	bl	80071bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	1e5a      	subs	r2, r3, #1
 8007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007058:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007060:	d112      	bne.n	8007088 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d016      	beq.n	8007098 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	3310      	adds	r3, #16
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fd9c 	bl	8007bac <xTaskRemoveFromEventList>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00e      	beq.n	8007098 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00b      	beq.n	8007098 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	e007      	b.n	8007098 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800708c:	3301      	adds	r3, #1
 800708e:	b2db      	uxtb	r3, r3
 8007090:	b25a      	sxtb	r2, r3
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007098:	2301      	movs	r3, #1
 800709a:	637b      	str	r3, [r7, #52]	; 0x34
 800709c:	e001      	b.n	80070a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800709e:	2300      	movs	r3, #0
 80070a0:	637b      	str	r3, [r7, #52]	; 0x34
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f383 8811 	msr	BASEPRI, r3
}
 80070ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3738      	adds	r7, #56	; 0x38
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d006      	beq.n	80070d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f1c3 0307 	rsb	r3, r3, #7
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	e001      	b.n	80070da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070da:	68fb      	ldr	r3, [r7, #12]
	}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070f4:	2300      	movs	r3, #0
 80070f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10d      	bne.n	8007122 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d14d      	bne.n	80071aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	4618      	mov	r0, r3
 8007114:	f000 ff9e 	bl	8008054 <xTaskPriorityDisinherit>
 8007118:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	609a      	str	r2, [r3, #8]
 8007120:	e043      	b.n	80071aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d119      	bne.n	800715c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6858      	ldr	r0, [r3, #4]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	461a      	mov	r2, r3
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	f015 fc87 	bl	801ca46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	441a      	add	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	429a      	cmp	r2, r3
 8007150:	d32b      	bcc.n	80071aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	605a      	str	r2, [r3, #4]
 800715a:	e026      	b.n	80071aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68d8      	ldr	r0, [r3, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	461a      	mov	r2, r3
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	f015 fc6d 	bl	801ca46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	425b      	negs	r3, r3
 8007176:	441a      	add	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d207      	bcs.n	8007198 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	425b      	negs	r3, r3
 8007192:	441a      	add	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d105      	bne.n	80071aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071b2:	697b      	ldr	r3, [r7, #20]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d018      	beq.n	8007200 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	441a      	add	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d303      	bcc.n	80071f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68d9      	ldr	r1, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	461a      	mov	r2, r3
 80071fa:	6838      	ldr	r0, [r7, #0]
 80071fc:	f015 fc23 	bl	801ca46 <memcpy>
	}
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007210:	f001 f9d8 	bl	80085c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800721a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800721c:	e011      	b.n	8007242 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	d012      	beq.n	800724c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3324      	adds	r3, #36	; 0x24
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fcbe 	bl	8007bac <xTaskRemoveFromEventList>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007236:	f000 fd93 	bl	8007d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	3b01      	subs	r3, #1
 800723e:	b2db      	uxtb	r3, r3
 8007240:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007246:	2b00      	cmp	r3, #0
 8007248:	dce9      	bgt.n	800721e <prvUnlockQueue+0x16>
 800724a:	e000      	b.n	800724e <prvUnlockQueue+0x46>
					break;
 800724c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	22ff      	movs	r2, #255	; 0xff
 8007252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007256:	f001 f9e5 	bl	8008624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800725a:	f001 f9b3 	bl	80085c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007264:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007266:	e011      	b.n	800728c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d012      	beq.n	8007296 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3310      	adds	r3, #16
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fc99 	bl	8007bac <xTaskRemoveFromEventList>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007280:	f000 fd6e 	bl	8007d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	3b01      	subs	r3, #1
 8007288:	b2db      	uxtb	r3, r3
 800728a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800728c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007290:	2b00      	cmp	r3, #0
 8007292:	dce9      	bgt.n	8007268 <prvUnlockQueue+0x60>
 8007294:	e000      	b.n	8007298 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007296:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	22ff      	movs	r2, #255	; 0xff
 800729c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072a0:	f001 f9c0 	bl	8008624 <vPortExitCritical>
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072b4:	f001 f986 	bl	80085c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072c0:	2301      	movs	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	e001      	b.n	80072ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072ca:	f001 f9ab 	bl	8008624 <vPortExitCritical>

	return xReturn;
 80072ce:	68fb      	ldr	r3, [r7, #12]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072e0:	f001 f970 	bl	80085c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d102      	bne.n	80072f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072f0:	2301      	movs	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	e001      	b.n	80072fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072fa:	f001 f993 	bl	8008624 <vPortExitCritical>

	return xReturn;
 80072fe:	68fb      	ldr	r3, [r7, #12]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08e      	sub	sp, #56	; 0x38
 800730c:	af04      	add	r7, sp, #16
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <xTaskCreateStatic+0x2a>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	623b      	str	r3, [r7, #32]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <xTaskCreateStatic+0x46>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	61fb      	str	r3, [r7, #28]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800734e:	23a0      	movs	r3, #160	; 0xa0
 8007350:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2ba0      	cmp	r3, #160	; 0xa0
 8007356:	d00a      	beq.n	800736e <xTaskCreateStatic+0x66>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	61bb      	str	r3, [r7, #24]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800736e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01e      	beq.n	80073b4 <xTaskCreateStatic+0xac>
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01b      	beq.n	80073b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007384:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	2202      	movs	r2, #2
 800738a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800738e:	2300      	movs	r3, #0
 8007390:	9303      	str	r3, [sp, #12]
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	9302      	str	r3, [sp, #8]
 8007396:	f107 0314 	add.w	r3, r7, #20
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f850 	bl	800744c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073ae:	f000 f8eb 	bl	8007588 <prvAddNewTaskToReadyList>
 80073b2:	e001      	b.n	80073b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073b8:	697b      	ldr	r3, [r7, #20]
	}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3728      	adds	r7, #40	; 0x28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b08c      	sub	sp, #48	; 0x30
 80073c6:	af04      	add	r7, sp, #16
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	603b      	str	r3, [r7, #0]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073d2:	88fb      	ldrh	r3, [r7, #6]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 fa16 	bl	8008808 <pvPortMalloc>
 80073dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00e      	beq.n	8007402 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073e4:	20a0      	movs	r0, #160	; 0xa0
 80073e6:	f001 fa0f 	bl	8008808 <pvPortMalloc>
 80073ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	631a      	str	r2, [r3, #48]	; 0x30
 80073f8:	e005      	b.n	8007406 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073fa:	6978      	ldr	r0, [r7, #20]
 80073fc:	f001 fad0 	bl	80089a0 <vPortFree>
 8007400:	e001      	b.n	8007406 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d017      	beq.n	800743c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	2300      	movs	r3, #0
 8007418:	9303      	str	r3, [sp, #12]
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	9302      	str	r3, [sp, #8]
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68b9      	ldr	r1, [r7, #8]
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 f80e 	bl	800744c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007430:	69f8      	ldr	r0, [r7, #28]
 8007432:	f000 f8a9 	bl	8007588 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007436:	2301      	movs	r3, #1
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e002      	b.n	8007442 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800743c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007440:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007442:	69bb      	ldr	r3, [r7, #24]
	}
 8007444:	4618      	mov	r0, r3
 8007446:	3720      	adds	r7, #32
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007464:	3b01      	subs	r3, #1
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	4413      	add	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f023 0307 	bic.w	r3, r3, #7
 8007472:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <prvInitialiseNewTask+0x48>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	617b      	str	r3, [r7, #20]
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01f      	beq.n	80074da <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800749a:	2300      	movs	r3, #0
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	e012      	b.n	80074c6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	4413      	add	r3, r2
 80074a6:	7819      	ldrb	r1, [r3, #0]
 80074a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	4413      	add	r3, r2
 80074ae:	3334      	adds	r3, #52	; 0x34
 80074b0:	460a      	mov	r2, r1
 80074b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d006      	beq.n	80074ce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	3301      	adds	r3, #1
 80074c4:	61fb      	str	r3, [r7, #28]
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	2b0f      	cmp	r3, #15
 80074ca:	d9e9      	bls.n	80074a0 <prvInitialiseNewTask+0x54>
 80074cc:	e000      	b.n	80074d0 <prvInitialiseNewTask+0x84>
			{
				break;
 80074ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074d8:	e003      	b.n	80074e2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	2b06      	cmp	r3, #6
 80074e6:	d901      	bls.n	80074ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074e8:	2306      	movs	r3, #6
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	2200      	movs	r2, #0
 80074fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	3304      	adds	r3, #4
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe ff2c 	bl	8006360 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	3318      	adds	r3, #24
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe ff27 	bl	8006360 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	f1c3 0207 	rsb	r2, r3, #7
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007526:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	2200      	movs	r2, #0
 8007534:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	334c      	adds	r3, #76	; 0x4c
 800753c:	224c      	movs	r2, #76	; 0x4c
 800753e:	2100      	movs	r1, #0
 8007540:	4618      	mov	r0, r3
 8007542:	f015 f977 	bl	801c834 <memset>
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	4a0c      	ldr	r2, [pc, #48]	; (800757c <prvInitialiseNewTask+0x130>)
 800754a:	651a      	str	r2, [r3, #80]	; 0x50
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	4a0c      	ldr	r2, [pc, #48]	; (8007580 <prvInitialiseNewTask+0x134>)
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	4a0b      	ldr	r2, [pc, #44]	; (8007584 <prvInitialiseNewTask+0x138>)
 8007556:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	68f9      	ldr	r1, [r7, #12]
 800755c:	69b8      	ldr	r0, [r7, #24]
 800755e:	f000 ff07 	bl	8008370 <pxPortInitialiseStack>
 8007562:	4602      	mov	r2, r0
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007572:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007574:	bf00      	nop
 8007576:	3720      	adds	r7, #32
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	2000c79c 	.word	0x2000c79c
 8007580:	2000c804 	.word	0x2000c804
 8007584:	2000c86c 	.word	0x2000c86c

08007588 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007590:	f001 f818 	bl	80085c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007594:	4b2a      	ldr	r3, [pc, #168]	; (8007640 <prvAddNewTaskToReadyList+0xb8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3301      	adds	r3, #1
 800759a:	4a29      	ldr	r2, [pc, #164]	; (8007640 <prvAddNewTaskToReadyList+0xb8>)
 800759c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800759e:	4b29      	ldr	r3, [pc, #164]	; (8007644 <prvAddNewTaskToReadyList+0xbc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075a6:	4a27      	ldr	r2, [pc, #156]	; (8007644 <prvAddNewTaskToReadyList+0xbc>)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075ac:	4b24      	ldr	r3, [pc, #144]	; (8007640 <prvAddNewTaskToReadyList+0xb8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d110      	bne.n	80075d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075b4:	f000 fbf8 	bl	8007da8 <prvInitialiseTaskLists>
 80075b8:	e00d      	b.n	80075d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075ba:	4b23      	ldr	r3, [pc, #140]	; (8007648 <prvAddNewTaskToReadyList+0xc0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d109      	bne.n	80075d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075c2:	4b20      	ldr	r3, [pc, #128]	; (8007644 <prvAddNewTaskToReadyList+0xbc>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d802      	bhi.n	80075d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075d0:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <prvAddNewTaskToReadyList+0xbc>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075d6:	4b1d      	ldr	r3, [pc, #116]	; (800764c <prvAddNewTaskToReadyList+0xc4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	4a1b      	ldr	r2, [pc, #108]	; (800764c <prvAddNewTaskToReadyList+0xc4>)
 80075de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	2201      	movs	r2, #1
 80075e6:	409a      	lsls	r2, r3
 80075e8:	4b19      	ldr	r3, [pc, #100]	; (8007650 <prvAddNewTaskToReadyList+0xc8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	4a18      	ldr	r2, [pc, #96]	; (8007650 <prvAddNewTaskToReadyList+0xc8>)
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4a15      	ldr	r2, [pc, #84]	; (8007654 <prvAddNewTaskToReadyList+0xcc>)
 8007600:	441a      	add	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3304      	adds	r3, #4
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f7fe feb6 	bl	800637a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800760e:	f001 f809 	bl	8008624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007612:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <prvAddNewTaskToReadyList+0xc0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00e      	beq.n	8007638 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <prvAddNewTaskToReadyList+0xbc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	429a      	cmp	r2, r3
 8007626:	d207      	bcs.n	8007638 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007628:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <prvAddNewTaskToReadyList+0xd0>)
 800762a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20005200 	.word	0x20005200
 8007644:	20005100 	.word	0x20005100
 8007648:	2000520c 	.word	0x2000520c
 800764c:	2000521c 	.word	0x2000521c
 8007650:	20005208 	.word	0x20005208
 8007654:	20005104 	.word	0x20005104
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d017      	beq.n	800769e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800766e:	4b13      	ldr	r3, [pc, #76]	; (80076bc <vTaskDelay+0x60>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <vTaskDelay+0x30>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	60bb      	str	r3, [r7, #8]
}
 8007688:	bf00      	nop
 800768a:	e7fe      	b.n	800768a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800768c:	f000 f884 	bl	8007798 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007690:	2100      	movs	r1, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fe06 	bl	80082a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007698:	f000 f88c 	bl	80077b4 <xTaskResumeAll>
 800769c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d107      	bne.n	80076b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80076a4:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <vTaskDelay+0x64>)
 80076a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076b4:	bf00      	nop
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20005228 	.word	0x20005228
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	; 0x28
 80076c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076d2:	463a      	mov	r2, r7
 80076d4:	1d39      	adds	r1, r7, #4
 80076d6:	f107 0308 	add.w	r3, r7, #8
 80076da:	4618      	mov	r0, r3
 80076dc:	f7f9 fedc 	bl	8001498 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	9202      	str	r2, [sp, #8]
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	2300      	movs	r3, #0
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	2300      	movs	r3, #0
 80076f0:	460a      	mov	r2, r1
 80076f2:	4921      	ldr	r1, [pc, #132]	; (8007778 <vTaskStartScheduler+0xb4>)
 80076f4:	4821      	ldr	r0, [pc, #132]	; (800777c <vTaskStartScheduler+0xb8>)
 80076f6:	f7ff fe07 	bl	8007308 <xTaskCreateStatic>
 80076fa:	4603      	mov	r3, r0
 80076fc:	4a20      	ldr	r2, [pc, #128]	; (8007780 <vTaskStartScheduler+0xbc>)
 80076fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007700:	4b1f      	ldr	r3, [pc, #124]	; (8007780 <vTaskStartScheduler+0xbc>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	e001      	b.n	8007712 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d11b      	bne.n	8007750 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	613b      	str	r3, [r7, #16]
}
 800772a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800772c:	4b15      	ldr	r3, [pc, #84]	; (8007784 <vTaskStartScheduler+0xc0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	334c      	adds	r3, #76	; 0x4c
 8007732:	4a15      	ldr	r2, [pc, #84]	; (8007788 <vTaskStartScheduler+0xc4>)
 8007734:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007736:	4b15      	ldr	r3, [pc, #84]	; (800778c <vTaskStartScheduler+0xc8>)
 8007738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800773c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800773e:	4b14      	ldr	r3, [pc, #80]	; (8007790 <vTaskStartScheduler+0xcc>)
 8007740:	2201      	movs	r2, #1
 8007742:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007744:	4b13      	ldr	r3, [pc, #76]	; (8007794 <vTaskStartScheduler+0xd0>)
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800774a:	f000 fe99 	bl	8008480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800774e:	e00e      	b.n	800776e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007756:	d10a      	bne.n	800776e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	60fb      	str	r3, [r7, #12]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <vTaskStartScheduler+0xa8>
}
 800776e:	bf00      	nop
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	0801e018 	.word	0x0801e018
 800777c:	08007d79 	.word	0x08007d79
 8007780:	20005224 	.word	0x20005224
 8007784:	20005100 	.word	0x20005100
 8007788:	20000090 	.word	0x20000090
 800778c:	20005220 	.word	0x20005220
 8007790:	2000520c 	.word	0x2000520c
 8007794:	20005204 	.word	0x20005204

08007798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <vTaskSuspendAll+0x18>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3301      	adds	r3, #1
 80077a2:	4a03      	ldr	r2, [pc, #12]	; (80077b0 <vTaskSuspendAll+0x18>)
 80077a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077a6:	bf00      	nop
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20005228 	.word	0x20005228

080077b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077be:	2300      	movs	r3, #0
 80077c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077c2:	4b41      	ldr	r3, [pc, #260]	; (80078c8 <xTaskResumeAll+0x114>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	603b      	str	r3, [r7, #0]
}
 80077dc:	bf00      	nop
 80077de:	e7fe      	b.n	80077de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077e0:	f000 fef0 	bl	80085c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077e4:	4b38      	ldr	r3, [pc, #224]	; (80078c8 <xTaskResumeAll+0x114>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	4a37      	ldr	r2, [pc, #220]	; (80078c8 <xTaskResumeAll+0x114>)
 80077ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ee:	4b36      	ldr	r3, [pc, #216]	; (80078c8 <xTaskResumeAll+0x114>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d161      	bne.n	80078ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077f6:	4b35      	ldr	r3, [pc, #212]	; (80078cc <xTaskResumeAll+0x118>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d05d      	beq.n	80078ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077fe:	e02e      	b.n	800785e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007800:	4b33      	ldr	r3, [pc, #204]	; (80078d0 <xTaskResumeAll+0x11c>)
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3318      	adds	r3, #24
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe fe11 	bl	8006434 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3304      	adds	r3, #4
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fe0c 	bl	8006434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	2201      	movs	r2, #1
 8007822:	409a      	lsls	r2, r3
 8007824:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <xTaskResumeAll+0x120>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4313      	orrs	r3, r2
 800782a:	4a2a      	ldr	r2, [pc, #168]	; (80078d4 <xTaskResumeAll+0x120>)
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4a27      	ldr	r2, [pc, #156]	; (80078d8 <xTaskResumeAll+0x124>)
 800783c:	441a      	add	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3304      	adds	r3, #4
 8007842:	4619      	mov	r1, r3
 8007844:	4610      	mov	r0, r2
 8007846:	f7fe fd98 	bl	800637a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784e:	4b23      	ldr	r3, [pc, #140]	; (80078dc <xTaskResumeAll+0x128>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	429a      	cmp	r2, r3
 8007856:	d302      	bcc.n	800785e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007858:	4b21      	ldr	r3, [pc, #132]	; (80078e0 <xTaskResumeAll+0x12c>)
 800785a:	2201      	movs	r2, #1
 800785c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800785e:	4b1c      	ldr	r3, [pc, #112]	; (80078d0 <xTaskResumeAll+0x11c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1cc      	bne.n	8007800 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800786c:	f000 fb3e 	bl	8007eec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007870:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <xTaskResumeAll+0x130>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d010      	beq.n	800789e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800787c:	f000 f858 	bl	8007930 <xTaskIncrementTick>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007886:	4b16      	ldr	r3, [pc, #88]	; (80078e0 <xTaskResumeAll+0x12c>)
 8007888:	2201      	movs	r2, #1
 800788a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3b01      	subs	r3, #1
 8007890:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1f1      	bne.n	800787c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007898:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <xTaskResumeAll+0x130>)
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800789e:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <xTaskResumeAll+0x12c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078a6:	2301      	movs	r3, #1
 80078a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078aa:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <xTaskResumeAll+0x134>)
 80078ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078ba:	f000 feb3 	bl	8008624 <vPortExitCritical>

	return xAlreadyYielded;
 80078be:	68bb      	ldr	r3, [r7, #8]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20005228 	.word	0x20005228
 80078cc:	20005200 	.word	0x20005200
 80078d0:	200051c0 	.word	0x200051c0
 80078d4:	20005208 	.word	0x20005208
 80078d8:	20005104 	.word	0x20005104
 80078dc:	20005100 	.word	0x20005100
 80078e0:	20005214 	.word	0x20005214
 80078e4:	20005210 	.word	0x20005210
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <xTaskGetTickCount+0x1c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078f8:	687b      	ldr	r3, [r7, #4]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20005204 	.word	0x20005204

0800790c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007912:	f000 ff39 	bl	8008788 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007916:	2300      	movs	r3, #0
 8007918:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800791a:	4b04      	ldr	r3, [pc, #16]	; (800792c <xTaskGetTickCountFromISR+0x20>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007920:	683b      	ldr	r3, [r7, #0]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20005204 	.word	0x20005204

08007930 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800793a:	4b4e      	ldr	r3, [pc, #312]	; (8007a74 <xTaskIncrementTick+0x144>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f040 808e 	bne.w	8007a60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007944:	4b4c      	ldr	r3, [pc, #304]	; (8007a78 <xTaskIncrementTick+0x148>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3301      	adds	r3, #1
 800794a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800794c:	4a4a      	ldr	r2, [pc, #296]	; (8007a78 <xTaskIncrementTick+0x148>)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d120      	bne.n	800799a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007958:	4b48      	ldr	r3, [pc, #288]	; (8007a7c <xTaskIncrementTick+0x14c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <xTaskIncrementTick+0x48>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	603b      	str	r3, [r7, #0]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <xTaskIncrementTick+0x46>
 8007978:	4b40      	ldr	r3, [pc, #256]	; (8007a7c <xTaskIncrementTick+0x14c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	4b40      	ldr	r3, [pc, #256]	; (8007a80 <xTaskIncrementTick+0x150>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a3e      	ldr	r2, [pc, #248]	; (8007a7c <xTaskIncrementTick+0x14c>)
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	4a3e      	ldr	r2, [pc, #248]	; (8007a80 <xTaskIncrementTick+0x150>)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	4b3d      	ldr	r3, [pc, #244]	; (8007a84 <xTaskIncrementTick+0x154>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	4a3c      	ldr	r2, [pc, #240]	; (8007a84 <xTaskIncrementTick+0x154>)
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	f000 faa9 	bl	8007eec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800799a:	4b3b      	ldr	r3, [pc, #236]	; (8007a88 <xTaskIncrementTick+0x158>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d348      	bcc.n	8007a36 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079a4:	4b35      	ldr	r3, [pc, #212]	; (8007a7c <xTaskIncrementTick+0x14c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ae:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <xTaskIncrementTick+0x158>)
 80079b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079b4:	601a      	str	r2, [r3, #0]
					break;
 80079b6:	e03e      	b.n	8007a36 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b8:	4b30      	ldr	r3, [pc, #192]	; (8007a7c <xTaskIncrementTick+0x14c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d203      	bcs.n	80079d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079d0:	4a2d      	ldr	r2, [pc, #180]	; (8007a88 <xTaskIncrementTick+0x158>)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079d6:	e02e      	b.n	8007a36 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	3304      	adds	r3, #4
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe fd29 	bl	8006434 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d004      	beq.n	80079f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	3318      	adds	r3, #24
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe fd20 	bl	8006434 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	2201      	movs	r2, #1
 80079fa:	409a      	lsls	r2, r3
 80079fc:	4b23      	ldr	r3, [pc, #140]	; (8007a8c <xTaskIncrementTick+0x15c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	4a22      	ldr	r2, [pc, #136]	; (8007a8c <xTaskIncrementTick+0x15c>)
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4a1f      	ldr	r2, [pc, #124]	; (8007a90 <xTaskIncrementTick+0x160>)
 8007a14:	441a      	add	r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f7fe fcac 	bl	800637a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a26:	4b1b      	ldr	r3, [pc, #108]	; (8007a94 <xTaskIncrementTick+0x164>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d3b9      	bcc.n	80079a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a34:	e7b6      	b.n	80079a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a36:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <xTaskIncrementTick+0x164>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3c:	4914      	ldr	r1, [pc, #80]	; (8007a90 <xTaskIncrementTick+0x160>)
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	440b      	add	r3, r1
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d901      	bls.n	8007a52 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a52:	4b11      	ldr	r3, [pc, #68]	; (8007a98 <xTaskIncrementTick+0x168>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d007      	beq.n	8007a6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e004      	b.n	8007a6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a60:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <xTaskIncrementTick+0x16c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	4a0d      	ldr	r2, [pc, #52]	; (8007a9c <xTaskIncrementTick+0x16c>)
 8007a68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a6a:	697b      	ldr	r3, [r7, #20]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	20005228 	.word	0x20005228
 8007a78:	20005204 	.word	0x20005204
 8007a7c:	200051b8 	.word	0x200051b8
 8007a80:	200051bc 	.word	0x200051bc
 8007a84:	20005218 	.word	0x20005218
 8007a88:	20005220 	.word	0x20005220
 8007a8c:	20005208 	.word	0x20005208
 8007a90:	20005104 	.word	0x20005104
 8007a94:	20005100 	.word	0x20005100
 8007a98:	20005214 	.word	0x20005214
 8007a9c:	20005210 	.word	0x20005210

08007aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aa6:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <vTaskSwitchContext+0xac>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007aae:	4b28      	ldr	r3, [pc, #160]	; (8007b50 <vTaskSwitchContext+0xb0>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ab4:	e044      	b.n	8007b40 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007ab6:	4b26      	ldr	r3, [pc, #152]	; (8007b50 <vTaskSwitchContext+0xb0>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007abc:	4b25      	ldr	r3, [pc, #148]	; (8007b54 <vTaskSwitchContext+0xb4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	fab3 f383 	clz	r3, r3
 8007ac8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007aca:	7afb      	ldrb	r3, [r7, #11]
 8007acc:	f1c3 031f 	rsb	r3, r3, #31
 8007ad0:	617b      	str	r3, [r7, #20]
 8007ad2:	4921      	ldr	r1, [pc, #132]	; (8007b58 <vTaskSwitchContext+0xb8>)
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10a      	bne.n	8007afc <vTaskSwitchContext+0x5c>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	607b      	str	r3, [r7, #4]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <vTaskSwitchContext+0x5a>
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4a14      	ldr	r2, [pc, #80]	; (8007b58 <vTaskSwitchContext+0xb8>)
 8007b08:	4413      	add	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d104      	bne.n	8007b2c <vTaskSwitchContext+0x8c>
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	605a      	str	r2, [r3, #4]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <vTaskSwitchContext+0xbc>)
 8007b34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b36:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <vTaskSwitchContext+0xbc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	334c      	adds	r3, #76	; 0x4c
 8007b3c:	4a08      	ldr	r2, [pc, #32]	; (8007b60 <vTaskSwitchContext+0xc0>)
 8007b3e:	6013      	str	r3, [r2, #0]
}
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	20005228 	.word	0x20005228
 8007b50:	20005214 	.word	0x20005214
 8007b54:	20005208 	.word	0x20005208
 8007b58:	20005104 	.word	0x20005104
 8007b5c:	20005100 	.word	0x20005100
 8007b60:	20000090 	.word	0x20000090

08007b64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	60fb      	str	r3, [r7, #12]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b8a:	4b07      	ldr	r3, [pc, #28]	; (8007ba8 <vTaskPlaceOnEventList+0x44>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3318      	adds	r3, #24
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7fe fc15 	bl	80063c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b98:	2101      	movs	r1, #1
 8007b9a:	6838      	ldr	r0, [r7, #0]
 8007b9c:	f000 fb82 	bl	80082a4 <prvAddCurrentTaskToDelayedList>
}
 8007ba0:	bf00      	nop
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20005100 	.word	0x20005100

08007bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	60fb      	str	r3, [r7, #12]
}
 8007bd4:	bf00      	nop
 8007bd6:	e7fe      	b.n	8007bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	3318      	adds	r3, #24
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe fc29 	bl	8006434 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007be2:	4b1d      	ldr	r3, [pc, #116]	; (8007c58 <xTaskRemoveFromEventList+0xac>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d11c      	bne.n	8007c24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	3304      	adds	r3, #4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fc20 	bl	8006434 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	409a      	lsls	r2, r3
 8007bfc:	4b17      	ldr	r3, [pc, #92]	; (8007c5c <xTaskRemoveFromEventList+0xb0>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	4a16      	ldr	r2, [pc, #88]	; (8007c5c <xTaskRemoveFromEventList+0xb0>)
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <xTaskRemoveFromEventList+0xb4>)
 8007c14:	441a      	add	r2, r3
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f7fe fbac 	bl	800637a <vListInsertEnd>
 8007c22:	e005      	b.n	8007c30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	3318      	adds	r3, #24
 8007c28:	4619      	mov	r1, r3
 8007c2a:	480e      	ldr	r0, [pc, #56]	; (8007c64 <xTaskRemoveFromEventList+0xb8>)
 8007c2c:	f7fe fba5 	bl	800637a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c34:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <xTaskRemoveFromEventList+0xbc>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d905      	bls.n	8007c4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c42:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <xTaskRemoveFromEventList+0xc0>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	e001      	b.n	8007c4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c4e:	697b      	ldr	r3, [r7, #20]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	20005228 	.word	0x20005228
 8007c5c:	20005208 	.word	0x20005208
 8007c60:	20005104 	.word	0x20005104
 8007c64:	200051c0 	.word	0x200051c0
 8007c68:	20005100 	.word	0x20005100
 8007c6c:	20005214 	.word	0x20005214

08007c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <vTaskInternalSetTimeOutState+0x24>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c80:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <vTaskInternalSetTimeOutState+0x28>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	605a      	str	r2, [r3, #4]
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	20005218 	.word	0x20005218
 8007c98:	20005204 	.word	0x20005204

08007c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	613b      	str	r3, [r7, #16]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10a      	bne.n	8007cde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	60fb      	str	r3, [r7, #12]
}
 8007cda:	bf00      	nop
 8007cdc:	e7fe      	b.n	8007cdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007cde:	f000 fc71 	bl	80085c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ce2:	4b1d      	ldr	r3, [pc, #116]	; (8007d58 <xTaskCheckForTimeOut+0xbc>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cfa:	d102      	bne.n	8007d02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	e023      	b.n	8007d4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <xTaskCheckForTimeOut+0xc0>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d007      	beq.n	8007d1e <xTaskCheckForTimeOut+0x82>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d302      	bcc.n	8007d1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	61fb      	str	r3, [r7, #28]
 8007d1c:	e015      	b.n	8007d4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d20b      	bcs.n	8007d40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff ff9b 	bl	8007c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61fb      	str	r3, [r7, #28]
 8007d3e:	e004      	b.n	8007d4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d46:	2301      	movs	r3, #1
 8007d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d4a:	f000 fc6b 	bl	8008624 <vPortExitCritical>

	return xReturn;
 8007d4e:	69fb      	ldr	r3, [r7, #28]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20005204 	.word	0x20005204
 8007d5c:	20005218 	.word	0x20005218

08007d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d64:	4b03      	ldr	r3, [pc, #12]	; (8007d74 <vTaskMissedYield+0x14>)
 8007d66:	2201      	movs	r2, #1
 8007d68:	601a      	str	r2, [r3, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	20005214 	.word	0x20005214

08007d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d80:	f000 f852 	bl	8007e28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d84:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <prvIdleTask+0x28>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d9f9      	bls.n	8007d80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d8c:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <prvIdleTask+0x2c>)
 8007d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d92:	601a      	str	r2, [r3, #0]
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d9c:	e7f0      	b.n	8007d80 <prvIdleTask+0x8>
 8007d9e:	bf00      	nop
 8007da0:	20005104 	.word	0x20005104
 8007da4:	e000ed04 	.word	0xe000ed04

08007da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dae:	2300      	movs	r3, #0
 8007db0:	607b      	str	r3, [r7, #4]
 8007db2:	e00c      	b.n	8007dce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4a12      	ldr	r2, [pc, #72]	; (8007e08 <prvInitialiseTaskLists+0x60>)
 8007dc0:	4413      	add	r3, r2
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe faac 	bl	8006320 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	607b      	str	r3, [r7, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b06      	cmp	r3, #6
 8007dd2:	d9ef      	bls.n	8007db4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dd4:	480d      	ldr	r0, [pc, #52]	; (8007e0c <prvInitialiseTaskLists+0x64>)
 8007dd6:	f7fe faa3 	bl	8006320 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dda:	480d      	ldr	r0, [pc, #52]	; (8007e10 <prvInitialiseTaskLists+0x68>)
 8007ddc:	f7fe faa0 	bl	8006320 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007de0:	480c      	ldr	r0, [pc, #48]	; (8007e14 <prvInitialiseTaskLists+0x6c>)
 8007de2:	f7fe fa9d 	bl	8006320 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007de6:	480c      	ldr	r0, [pc, #48]	; (8007e18 <prvInitialiseTaskLists+0x70>)
 8007de8:	f7fe fa9a 	bl	8006320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dec:	480b      	ldr	r0, [pc, #44]	; (8007e1c <prvInitialiseTaskLists+0x74>)
 8007dee:	f7fe fa97 	bl	8006320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007df2:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <prvInitialiseTaskLists+0x78>)
 8007df4:	4a05      	ldr	r2, [pc, #20]	; (8007e0c <prvInitialiseTaskLists+0x64>)
 8007df6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007df8:	4b0a      	ldr	r3, [pc, #40]	; (8007e24 <prvInitialiseTaskLists+0x7c>)
 8007dfa:	4a05      	ldr	r2, [pc, #20]	; (8007e10 <prvInitialiseTaskLists+0x68>)
 8007dfc:	601a      	str	r2, [r3, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20005104 	.word	0x20005104
 8007e0c:	20005190 	.word	0x20005190
 8007e10:	200051a4 	.word	0x200051a4
 8007e14:	200051c0 	.word	0x200051c0
 8007e18:	200051d4 	.word	0x200051d4
 8007e1c:	200051ec 	.word	0x200051ec
 8007e20:	200051b8 	.word	0x200051b8
 8007e24:	200051bc 	.word	0x200051bc

08007e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e2e:	e019      	b.n	8007e64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e30:	f000 fbc8 	bl	80085c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e34:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <prvCheckTasksWaitingTermination+0x50>)
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe faf7 	bl	8006434 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e46:	4b0d      	ldr	r3, [pc, #52]	; (8007e7c <prvCheckTasksWaitingTermination+0x54>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	4a0b      	ldr	r2, [pc, #44]	; (8007e7c <prvCheckTasksWaitingTermination+0x54>)
 8007e4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <prvCheckTasksWaitingTermination+0x58>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	4a0a      	ldr	r2, [pc, #40]	; (8007e80 <prvCheckTasksWaitingTermination+0x58>)
 8007e58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e5a:	f000 fbe3 	bl	8008624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f810 	bl	8007e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <prvCheckTasksWaitingTermination+0x58>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e1      	bne.n	8007e30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	200051d4 	.word	0x200051d4
 8007e7c:	20005200 	.word	0x20005200
 8007e80:	200051e8 	.word	0x200051e8

08007e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	334c      	adds	r3, #76	; 0x4c
 8007e90:	4618      	mov	r0, r3
 8007e92:	f014 fd15 	bl	801c8c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d108      	bne.n	8007eb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fd7b 	bl	80089a0 <vPortFree>
				vPortFree( pxTCB );
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fd78 	bl	80089a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007eb0:	e018      	b.n	8007ee4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d103      	bne.n	8007ec4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fd6f 	bl	80089a0 <vPortFree>
	}
 8007ec2:	e00f      	b.n	8007ee4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d00a      	beq.n	8007ee4 <prvDeleteTCB+0x60>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	60fb      	str	r3, [r7, #12]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <prvDeleteTCB+0x5e>
	}
 8007ee4:	bf00      	nop
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <prvResetNextTaskUnblockTime+0x38>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d104      	bne.n	8007f06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <prvResetNextTaskUnblockTime+0x3c>)
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f04:	e008      	b.n	8007f18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f06:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <prvResetNextTaskUnblockTime+0x38>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	4a04      	ldr	r2, [pc, #16]	; (8007f28 <prvResetNextTaskUnblockTime+0x3c>)
 8007f16:	6013      	str	r3, [r2, #0]
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	200051b8 	.word	0x200051b8
 8007f28:	20005220 	.word	0x20005220

08007f2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <xTaskGetSchedulerState+0x34>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d102      	bne.n	8007f40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	607b      	str	r3, [r7, #4]
 8007f3e:	e008      	b.n	8007f52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f40:	4b08      	ldr	r3, [pc, #32]	; (8007f64 <xTaskGetSchedulerState+0x38>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d102      	bne.n	8007f4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f48:	2302      	movs	r3, #2
 8007f4a:	607b      	str	r3, [r7, #4]
 8007f4c:	e001      	b.n	8007f52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f52:	687b      	ldr	r3, [r7, #4]
	}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	2000520c 	.word	0x2000520c
 8007f64:	20005228 	.word	0x20005228

08007f68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d05e      	beq.n	800803c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f82:	4b31      	ldr	r3, [pc, #196]	; (8008048 <xTaskPriorityInherit+0xe0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d24e      	bcs.n	800802a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	db06      	blt.n	8007fa2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f94:	4b2c      	ldr	r3, [pc, #176]	; (8008048 <xTaskPriorityInherit+0xe0>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	f1c3 0207 	rsb	r2, r3, #7
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6959      	ldr	r1, [r3, #20]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4a26      	ldr	r2, [pc, #152]	; (800804c <xTaskPriorityInherit+0xe4>)
 8007fb4:	4413      	add	r3, r2
 8007fb6:	4299      	cmp	r1, r3
 8007fb8:	d12f      	bne.n	800801a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fa38 	bl	8006434 <uxListRemove>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fce:	2201      	movs	r2, #1
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	43da      	mvns	r2, r3
 8007fd6:	4b1e      	ldr	r3, [pc, #120]	; (8008050 <xTaskPriorityInherit+0xe8>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	4a1c      	ldr	r2, [pc, #112]	; (8008050 <xTaskPriorityInherit+0xe8>)
 8007fde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fe0:	4b19      	ldr	r3, [pc, #100]	; (8008048 <xTaskPriorityInherit+0xe0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	2201      	movs	r2, #1
 8007ff0:	409a      	lsls	r2, r3
 8007ff2:	4b17      	ldr	r3, [pc, #92]	; (8008050 <xTaskPriorityInherit+0xe8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	4a15      	ldr	r2, [pc, #84]	; (8008050 <xTaskPriorityInherit+0xe8>)
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4a10      	ldr	r2, [pc, #64]	; (800804c <xTaskPriorityInherit+0xe4>)
 800800a:	441a      	add	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	3304      	adds	r3, #4
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f7fe f9b1 	bl	800637a <vListInsertEnd>
 8008018:	e004      	b.n	8008024 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800801a:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <xTaskPriorityInherit+0xe0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008024:	2301      	movs	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	e008      	b.n	800803c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <xTaskPriorityInherit+0xe0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	429a      	cmp	r2, r3
 8008036:	d201      	bcs.n	800803c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008038:	2301      	movs	r3, #1
 800803a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800803c:	68fb      	ldr	r3, [r7, #12]
	}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20005100 	.word	0x20005100
 800804c:	20005104 	.word	0x20005104
 8008050:	20005208 	.word	0x20005208

08008054 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d06e      	beq.n	8008148 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800806a:	4b3a      	ldr	r3, [pc, #232]	; (8008154 <xTaskPriorityDisinherit+0x100>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	429a      	cmp	r2, r3
 8008072:	d00a      	beq.n	800808a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	60fb      	str	r3, [r7, #12]
}
 8008086:	bf00      	nop
 8008088:	e7fe      	b.n	8008088 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	60bb      	str	r3, [r7, #8]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ac:	1e5a      	subs	r2, r3, #1
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d044      	beq.n	8008148 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d140      	bne.n	8008148 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	3304      	adds	r3, #4
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe f9b2 	bl	8006434 <uxListRemove>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d115      	bne.n	8008102 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080da:	491f      	ldr	r1, [pc, #124]	; (8008158 <xTaskPriorityDisinherit+0x104>)
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xTaskPriorityDisinherit+0xae>
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	2201      	movs	r2, #1
 80080f2:	fa02 f303 	lsl.w	r3, r2, r3
 80080f6:	43da      	mvns	r2, r3
 80080f8:	4b18      	ldr	r3, [pc, #96]	; (800815c <xTaskPriorityDisinherit+0x108>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4013      	ands	r3, r2
 80080fe:	4a17      	ldr	r2, [pc, #92]	; (800815c <xTaskPriorityDisinherit+0x108>)
 8008100:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	f1c3 0207 	rsb	r2, r3, #7
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	2201      	movs	r2, #1
 800811c:	409a      	lsls	r2, r3
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <xTaskPriorityDisinherit+0x108>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4313      	orrs	r3, r2
 8008124:	4a0d      	ldr	r2, [pc, #52]	; (800815c <xTaskPriorityDisinherit+0x108>)
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4a08      	ldr	r2, [pc, #32]	; (8008158 <xTaskPriorityDisinherit+0x104>)
 8008136:	441a      	add	r2, r3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	3304      	adds	r3, #4
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f7fe f91b 	bl	800637a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008148:	697b      	ldr	r3, [r7, #20]
	}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20005100 	.word	0x20005100
 8008158:	20005104 	.word	0x20005104
 800815c:	20005208 	.word	0x20005208

08008160 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800816e:	2301      	movs	r3, #1
 8008170:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d077      	beq.n	8008268 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	60fb      	str	r3, [r7, #12]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	429a      	cmp	r2, r3
 800819e:	d902      	bls.n	80081a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	e002      	b.n	80081ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d058      	beq.n	8008268 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d153      	bne.n	8008268 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081c0:	4b2b      	ldr	r3, [pc, #172]	; (8008270 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d10a      	bne.n	80081e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	60bb      	str	r3, [r7, #8]
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	db04      	blt.n	80081fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	f1c3 0207 	rsb	r2, r3, #7
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	6959      	ldr	r1, [r3, #20]
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a19      	ldr	r2, [pc, #100]	; (8008274 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800820e:	4413      	add	r3, r2
 8008210:	4299      	cmp	r1, r3
 8008212:	d129      	bne.n	8008268 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	3304      	adds	r3, #4
 8008218:	4618      	mov	r0, r3
 800821a:	f7fe f90b 	bl	8006434 <uxListRemove>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008228:	2201      	movs	r2, #1
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	43da      	mvns	r2, r3
 8008230:	4b11      	ldr	r3, [pc, #68]	; (8008278 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4013      	ands	r3, r2
 8008236:	4a10      	ldr	r2, [pc, #64]	; (8008278 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008238:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	2201      	movs	r2, #1
 8008240:	409a      	lsls	r2, r3
 8008242:	4b0d      	ldr	r3, [pc, #52]	; (8008278 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4313      	orrs	r3, r2
 8008248:	4a0b      	ldr	r2, [pc, #44]	; (8008278 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4a06      	ldr	r2, [pc, #24]	; (8008274 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800825a:	441a      	add	r2, r3
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	3304      	adds	r3, #4
 8008260:	4619      	mov	r1, r3
 8008262:	4610      	mov	r0, r2
 8008264:	f7fe f889 	bl	800637a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008268:	bf00      	nop
 800826a:	3720      	adds	r7, #32
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20005100 	.word	0x20005100
 8008274:	20005104 	.word	0x20005104
 8008278:	20005208 	.word	0x20005208

0800827c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008288:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800828e:	3201      	adds	r2, #1
 8008290:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008292:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008294:	681b      	ldr	r3, [r3, #0]
	}
 8008296:	4618      	mov	r0, r3
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20005100 	.word	0x20005100

080082a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082ae:	4b29      	ldr	r3, [pc, #164]	; (8008354 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082b4:	4b28      	ldr	r3, [pc, #160]	; (8008358 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe f8ba 	bl	8006434 <uxListRemove>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80082c6:	4b24      	ldr	r3, [pc, #144]	; (8008358 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	2201      	movs	r2, #1
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	43da      	mvns	r2, r3
 80082d4:	4b21      	ldr	r3, [pc, #132]	; (800835c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4013      	ands	r3, r2
 80082da:	4a20      	ldr	r2, [pc, #128]	; (800835c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e4:	d10a      	bne.n	80082fc <prvAddCurrentTaskToDelayedList+0x58>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d007      	beq.n	80082fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ec:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4619      	mov	r1, r3
 80082f4:	481a      	ldr	r0, [pc, #104]	; (8008360 <prvAddCurrentTaskToDelayedList+0xbc>)
 80082f6:	f7fe f840 	bl	800637a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082fa:	e026      	b.n	800834a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4413      	add	r3, r2
 8008302:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008304:	4b14      	ldr	r3, [pc, #80]	; (8008358 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	429a      	cmp	r2, r3
 8008312:	d209      	bcs.n	8008328 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008314:	4b13      	ldr	r3, [pc, #76]	; (8008364 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <prvAddCurrentTaskToDelayedList+0xb4>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3304      	adds	r3, #4
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7fe f84e 	bl	80063c2 <vListInsert>
}
 8008326:	e010      	b.n	800834a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <prvAddCurrentTaskToDelayedList+0xc4>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <prvAddCurrentTaskToDelayedList+0xb4>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3304      	adds	r3, #4
 8008332:	4619      	mov	r1, r3
 8008334:	4610      	mov	r0, r2
 8008336:	f7fe f844 	bl	80063c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800833a:	4b0c      	ldr	r3, [pc, #48]	; (800836c <prvAddCurrentTaskToDelayedList+0xc8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	429a      	cmp	r2, r3
 8008342:	d202      	bcs.n	800834a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008344:	4a09      	ldr	r2, [pc, #36]	; (800836c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6013      	str	r3, [r2, #0]
}
 800834a:	bf00      	nop
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20005204 	.word	0x20005204
 8008358:	20005100 	.word	0x20005100
 800835c:	20005208 	.word	0x20005208
 8008360:	200051ec 	.word	0x200051ec
 8008364:	200051bc 	.word	0x200051bc
 8008368:	200051b8 	.word	0x200051b8
 800836c:	20005220 	.word	0x20005220

08008370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3b04      	subs	r3, #4
 8008380:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3b04      	subs	r3, #4
 800838e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f023 0201 	bic.w	r2, r3, #1
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3b04      	subs	r3, #4
 800839e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083a0:	4a0c      	ldr	r2, [pc, #48]	; (80083d4 <pxPortInitialiseStack+0x64>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3b14      	subs	r3, #20
 80083aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3b04      	subs	r3, #4
 80083b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f06f 0202 	mvn.w	r2, #2
 80083be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3b20      	subs	r3, #32
 80083c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083c6:	68fb      	ldr	r3, [r7, #12]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	080083d9 	.word	0x080083d9

080083d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <prvTaskExitError+0x54>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ea:	d00a      	beq.n	8008402 <prvTaskExitError+0x2a>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	60fb      	str	r3, [r7, #12]
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <prvTaskExitError+0x28>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	60bb      	str	r3, [r7, #8]
}
 8008414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008416:	bf00      	nop
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d0fc      	beq.n	8008418 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	20000024 	.word	0x20000024

08008430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008430:	4b07      	ldr	r3, [pc, #28]	; (8008450 <pxCurrentTCBConst2>)
 8008432:	6819      	ldr	r1, [r3, #0]
 8008434:	6808      	ldr	r0, [r1, #0]
 8008436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843a:	f380 8809 	msr	PSP, r0
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f04f 0000 	mov.w	r0, #0
 8008446:	f380 8811 	msr	BASEPRI, r0
 800844a:	4770      	bx	lr
 800844c:	f3af 8000 	nop.w

08008450 <pxCurrentTCBConst2>:
 8008450:	20005100 	.word	0x20005100
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop

08008458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008458:	4808      	ldr	r0, [pc, #32]	; (800847c <prvPortStartFirstTask+0x24>)
 800845a:	6800      	ldr	r0, [r0, #0]
 800845c:	6800      	ldr	r0, [r0, #0]
 800845e:	f380 8808 	msr	MSP, r0
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f380 8814 	msr	CONTROL, r0
 800846a:	b662      	cpsie	i
 800846c:	b661      	cpsie	f
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	df00      	svc	0
 8008478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800847a:	bf00      	nop
 800847c:	e000ed08 	.word	0xe000ed08

08008480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008486:	4b46      	ldr	r3, [pc, #280]	; (80085a0 <xPortStartScheduler+0x120>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a46      	ldr	r2, [pc, #280]	; (80085a4 <xPortStartScheduler+0x124>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d10a      	bne.n	80084a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	613b      	str	r3, [r7, #16]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80084a6:	4b3e      	ldr	r3, [pc, #248]	; (80085a0 <xPortStartScheduler+0x120>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a3f      	ldr	r2, [pc, #252]	; (80085a8 <xPortStartScheduler+0x128>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d10a      	bne.n	80084c6 <xPortStartScheduler+0x46>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	60fb      	str	r3, [r7, #12]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084c6:	4b39      	ldr	r3, [pc, #228]	; (80085ac <xPortStartScheduler+0x12c>)
 80084c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	22ff      	movs	r2, #255	; 0xff
 80084d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	4b31      	ldr	r3, [pc, #196]	; (80085b0 <xPortStartScheduler+0x130>)
 80084ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084ee:	4b31      	ldr	r3, [pc, #196]	; (80085b4 <xPortStartScheduler+0x134>)
 80084f0:	2207      	movs	r2, #7
 80084f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084f4:	e009      	b.n	800850a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80084f6:	4b2f      	ldr	r3, [pc, #188]	; (80085b4 <xPortStartScheduler+0x134>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	4a2d      	ldr	r2, [pc, #180]	; (80085b4 <xPortStartScheduler+0x134>)
 80084fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	b2db      	uxtb	r3, r3
 8008508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b80      	cmp	r3, #128	; 0x80
 8008514:	d0ef      	beq.n	80084f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008516:	4b27      	ldr	r3, [pc, #156]	; (80085b4 <xPortStartScheduler+0x134>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f1c3 0307 	rsb	r3, r3, #7
 800851e:	2b04      	cmp	r3, #4
 8008520:	d00a      	beq.n	8008538 <xPortStartScheduler+0xb8>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	60bb      	str	r3, [r7, #8]
}
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008538:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <xPortStartScheduler+0x134>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	4a1d      	ldr	r2, [pc, #116]	; (80085b4 <xPortStartScheduler+0x134>)
 8008540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008542:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <xPortStartScheduler+0x134>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800854a:	4a1a      	ldr	r2, [pc, #104]	; (80085b4 <xPortStartScheduler+0x134>)
 800854c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	b2da      	uxtb	r2, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008556:	4b18      	ldr	r3, [pc, #96]	; (80085b8 <xPortStartScheduler+0x138>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a17      	ldr	r2, [pc, #92]	; (80085b8 <xPortStartScheduler+0x138>)
 800855c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008562:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <xPortStartScheduler+0x138>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a14      	ldr	r2, [pc, #80]	; (80085b8 <xPortStartScheduler+0x138>)
 8008568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800856c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800856e:	f000 f8dd 	bl	800872c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008572:	4b12      	ldr	r3, [pc, #72]	; (80085bc <xPortStartScheduler+0x13c>)
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008578:	f000 f8fc 	bl	8008774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800857c:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <xPortStartScheduler+0x140>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a0f      	ldr	r2, [pc, #60]	; (80085c0 <xPortStartScheduler+0x140>)
 8008582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008588:	f7ff ff66 	bl	8008458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800858c:	f7ff fa88 	bl	8007aa0 <vTaskSwitchContext>
	prvTaskExitError();
 8008590:	f7ff ff22 	bl	80083d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	e000ed00 	.word	0xe000ed00
 80085a4:	410fc271 	.word	0x410fc271
 80085a8:	410fc270 	.word	0x410fc270
 80085ac:	e000e400 	.word	0xe000e400
 80085b0:	2000522c 	.word	0x2000522c
 80085b4:	20005230 	.word	0x20005230
 80085b8:	e000ed20 	.word	0xe000ed20
 80085bc:	20000024 	.word	0x20000024
 80085c0:	e000ef34 	.word	0xe000ef34

080085c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	607b      	str	r3, [r7, #4]
}
 80085dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085de:	4b0f      	ldr	r3, [pc, #60]	; (800861c <vPortEnterCritical+0x58>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3301      	adds	r3, #1
 80085e4:	4a0d      	ldr	r2, [pc, #52]	; (800861c <vPortEnterCritical+0x58>)
 80085e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085e8:	4b0c      	ldr	r3, [pc, #48]	; (800861c <vPortEnterCritical+0x58>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d10f      	bne.n	8008610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085f0:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <vPortEnterCritical+0x5c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <vPortEnterCritical+0x4c>
	__asm volatile
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	603b      	str	r3, [r7, #0]
}
 800860c:	bf00      	nop
 800860e:	e7fe      	b.n	800860e <vPortEnterCritical+0x4a>
	}
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	20000024 	.word	0x20000024
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800862a:	4b12      	ldr	r3, [pc, #72]	; (8008674 <vPortExitCritical+0x50>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10a      	bne.n	8008648 <vPortExitCritical+0x24>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	607b      	str	r3, [r7, #4]
}
 8008644:	bf00      	nop
 8008646:	e7fe      	b.n	8008646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <vPortExitCritical+0x50>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3b01      	subs	r3, #1
 800864e:	4a09      	ldr	r2, [pc, #36]	; (8008674 <vPortExitCritical+0x50>)
 8008650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008652:	4b08      	ldr	r3, [pc, #32]	; (8008674 <vPortExitCritical+0x50>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d105      	bne.n	8008666 <vPortExitCritical+0x42>
 800865a:	2300      	movs	r3, #0
 800865c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	f383 8811 	msr	BASEPRI, r3
}
 8008664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	20000024 	.word	0x20000024
	...

08008680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008680:	f3ef 8009 	mrs	r0, PSP
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <pxCurrentTCBConst>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	f01e 0f10 	tst.w	lr, #16
 8008690:	bf08      	it	eq
 8008692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	6010      	str	r0, [r2, #0]
 800869c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086a4:	f380 8811 	msr	BASEPRI, r0
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f7ff f9f6 	bl	8007aa0 <vTaskSwitchContext>
 80086b4:	f04f 0000 	mov.w	r0, #0
 80086b8:	f380 8811 	msr	BASEPRI, r0
 80086bc:	bc09      	pop	{r0, r3}
 80086be:	6819      	ldr	r1, [r3, #0]
 80086c0:	6808      	ldr	r0, [r1, #0]
 80086c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c6:	f01e 0f10 	tst.w	lr, #16
 80086ca:	bf08      	it	eq
 80086cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086d0:	f380 8809 	msr	PSP, r0
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	f3af 8000 	nop.w

080086e0 <pxCurrentTCBConst>:
 80086e0:	20005100 	.word	0x20005100
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop

080086e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	607b      	str	r3, [r7, #4]
}
 8008700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008702:	f7ff f915 	bl	8007930 <xTaskIncrementTick>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800870c:	4b06      	ldr	r3, [pc, #24]	; (8008728 <SysTick_Handler+0x40>)
 800870e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	2300      	movs	r3, #0
 8008716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f383 8811 	msr	BASEPRI, r3
}
 800871e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	e000ed04 	.word	0xe000ed04

0800872c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <vPortSetupTimerInterrupt+0x34>)
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008736:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <vPortSetupTimerInterrupt+0x38>)
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800873c:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <vPortSetupTimerInterrupt+0x3c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a0a      	ldr	r2, [pc, #40]	; (800876c <vPortSetupTimerInterrupt+0x40>)
 8008742:	fba2 2303 	umull	r2, r3, r2, r3
 8008746:	099b      	lsrs	r3, r3, #6
 8008748:	4a09      	ldr	r2, [pc, #36]	; (8008770 <vPortSetupTimerInterrupt+0x44>)
 800874a:	3b01      	subs	r3, #1
 800874c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800874e:	4b04      	ldr	r3, [pc, #16]	; (8008760 <vPortSetupTimerInterrupt+0x34>)
 8008750:	2207      	movs	r2, #7
 8008752:	601a      	str	r2, [r3, #0]
}
 8008754:	bf00      	nop
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	e000e010 	.word	0xe000e010
 8008764:	e000e018 	.word	0xe000e018
 8008768:	20000004 	.word	0x20000004
 800876c:	10624dd3 	.word	0x10624dd3
 8008770:	e000e014 	.word	0xe000e014

08008774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008784 <vPortEnableVFP+0x10>
 8008778:	6801      	ldr	r1, [r0, #0]
 800877a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800877e:	6001      	str	r1, [r0, #0]
 8008780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008782:	bf00      	nop
 8008784:	e000ed88 	.word	0xe000ed88

08008788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800878e:	f3ef 8305 	mrs	r3, IPSR
 8008792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b0f      	cmp	r3, #15
 8008798:	d914      	bls.n	80087c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800879a:	4a17      	ldr	r2, [pc, #92]	; (80087f8 <vPortValidateInterruptPriority+0x70>)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4413      	add	r3, r2
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087a4:	4b15      	ldr	r3, [pc, #84]	; (80087fc <vPortValidateInterruptPriority+0x74>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	7afa      	ldrb	r2, [r7, #11]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d20a      	bcs.n	80087c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	607b      	str	r3, [r7, #4]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087c4:	4b0e      	ldr	r3, [pc, #56]	; (8008800 <vPortValidateInterruptPriority+0x78>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087cc:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <vPortValidateInterruptPriority+0x7c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d90a      	bls.n	80087ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	603b      	str	r3, [r7, #0]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <vPortValidateInterruptPriority+0x60>
	}
 80087ea:	bf00      	nop
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	e000e3f0 	.word	0xe000e3f0
 80087fc:	2000522c 	.word	0x2000522c
 8008800:	e000ed0c 	.word	0xe000ed0c
 8008804:	20005230 	.word	0x20005230

08008808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08a      	sub	sp, #40	; 0x28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008810:	2300      	movs	r3, #0
 8008812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008814:	f7fe ffc0 	bl	8007798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008818:	4b5b      	ldr	r3, [pc, #364]	; (8008988 <pvPortMalloc+0x180>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008820:	f000 f920 	bl	8008a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008824:	4b59      	ldr	r3, [pc, #356]	; (800898c <pvPortMalloc+0x184>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4013      	ands	r3, r2
 800882c:	2b00      	cmp	r3, #0
 800882e:	f040 8093 	bne.w	8008958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d01d      	beq.n	8008874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008838:	2208      	movs	r2, #8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4413      	add	r3, r2
 800883e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	2b00      	cmp	r3, #0
 8008848:	d014      	beq.n	8008874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f023 0307 	bic.w	r3, r3, #7
 8008850:	3308      	adds	r3, #8
 8008852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <pvPortMalloc+0x6c>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	617b      	str	r3, [r7, #20]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d06e      	beq.n	8008958 <pvPortMalloc+0x150>
 800887a:	4b45      	ldr	r3, [pc, #276]	; (8008990 <pvPortMalloc+0x188>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	429a      	cmp	r2, r3
 8008882:	d869      	bhi.n	8008958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008884:	4b43      	ldr	r3, [pc, #268]	; (8008994 <pvPortMalloc+0x18c>)
 8008886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008888:	4b42      	ldr	r3, [pc, #264]	; (8008994 <pvPortMalloc+0x18c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800888e:	e004      	b.n	800889a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d903      	bls.n	80088ac <pvPortMalloc+0xa4>
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1f1      	bne.n	8008890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088ac:	4b36      	ldr	r3, [pc, #216]	; (8008988 <pvPortMalloc+0x180>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d050      	beq.n	8008958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2208      	movs	r2, #8
 80088bc:	4413      	add	r3, r2
 80088be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	1ad2      	subs	r2, r2, r3
 80088d0:	2308      	movs	r3, #8
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d91f      	bls.n	8008918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4413      	add	r3, r2
 80088de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <pvPortMalloc+0xf8>
	__asm volatile
 80088ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	613b      	str	r3, [r7, #16]
}
 80088fc:	bf00      	nop
 80088fe:	e7fe      	b.n	80088fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	1ad2      	subs	r2, r2, r3
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008912:	69b8      	ldr	r0, [r7, #24]
 8008914:	f000 f908 	bl	8008b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008918:	4b1d      	ldr	r3, [pc, #116]	; (8008990 <pvPortMalloc+0x188>)
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	4a1b      	ldr	r2, [pc, #108]	; (8008990 <pvPortMalloc+0x188>)
 8008924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008926:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <pvPortMalloc+0x188>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	4b1b      	ldr	r3, [pc, #108]	; (8008998 <pvPortMalloc+0x190>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	429a      	cmp	r2, r3
 8008930:	d203      	bcs.n	800893a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008932:	4b17      	ldr	r3, [pc, #92]	; (8008990 <pvPortMalloc+0x188>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a18      	ldr	r2, [pc, #96]	; (8008998 <pvPortMalloc+0x190>)
 8008938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	4b13      	ldr	r3, [pc, #76]	; (800898c <pvPortMalloc+0x184>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	431a      	orrs	r2, r3
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	2200      	movs	r2, #0
 800894c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800894e:	4b13      	ldr	r3, [pc, #76]	; (800899c <pvPortMalloc+0x194>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3301      	adds	r3, #1
 8008954:	4a11      	ldr	r2, [pc, #68]	; (800899c <pvPortMalloc+0x194>)
 8008956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008958:	f7fe ff2c 	bl	80077b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <pvPortMalloc+0x174>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	60fb      	str	r3, [r7, #12]
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <pvPortMalloc+0x172>
	return pvReturn;
 800897c:	69fb      	ldr	r3, [r7, #28]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3728      	adds	r7, #40	; 0x28
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20008e3c 	.word	0x20008e3c
 800898c:	20008e50 	.word	0x20008e50
 8008990:	20008e40 	.word	0x20008e40
 8008994:	20008e34 	.word	0x20008e34
 8008998:	20008e44 	.word	0x20008e44
 800899c:	20008e48 	.word	0x20008e48

080089a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d04d      	beq.n	8008a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089b2:	2308      	movs	r3, #8
 80089b4:	425b      	negs	r3, r3
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4413      	add	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	685a      	ldr	r2, [r3, #4]
 80089c4:	4b24      	ldr	r3, [pc, #144]	; (8008a58 <vPortFree+0xb8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4013      	ands	r3, r2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10a      	bne.n	80089e4 <vPortFree+0x44>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	60fb      	str	r3, [r7, #12]
}
 80089e0:	bf00      	nop
 80089e2:	e7fe      	b.n	80089e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00a      	beq.n	8008a02 <vPortFree+0x62>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	60bb      	str	r3, [r7, #8]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	4b14      	ldr	r3, [pc, #80]	; (8008a58 <vPortFree+0xb8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01e      	beq.n	8008a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d11a      	bne.n	8008a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <vPortFree+0xb8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	43db      	mvns	r3, r3
 8008a22:	401a      	ands	r2, r3
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a28:	f7fe feb6 	bl	8007798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <vPortFree+0xbc>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4413      	add	r3, r2
 8008a36:	4a09      	ldr	r2, [pc, #36]	; (8008a5c <vPortFree+0xbc>)
 8008a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a3a:	6938      	ldr	r0, [r7, #16]
 8008a3c:	f000 f874 	bl	8008b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a40:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <vPortFree+0xc0>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3301      	adds	r3, #1
 8008a46:	4a06      	ldr	r2, [pc, #24]	; (8008a60 <vPortFree+0xc0>)
 8008a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a4a:	f7fe feb3 	bl	80077b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a4e:	bf00      	nop
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20008e50 	.word	0x20008e50
 8008a5c:	20008e40 	.word	0x20008e40
 8008a60:	20008e4c 	.word	0x20008e4c

08008a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a70:	4b27      	ldr	r3, [pc, #156]	; (8008b10 <prvHeapInit+0xac>)
 8008a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00c      	beq.n	8008a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3307      	adds	r3, #7
 8008a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0307 	bic.w	r3, r3, #7
 8008a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	4a1f      	ldr	r2, [pc, #124]	; (8008b10 <prvHeapInit+0xac>)
 8008a94:	4413      	add	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a9c:	4a1d      	ldr	r2, [pc, #116]	; (8008b14 <prvHeapInit+0xb0>)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008aa2:	4b1c      	ldr	r3, [pc, #112]	; (8008b14 <prvHeapInit+0xb0>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	4413      	add	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0307 	bic.w	r3, r3, #7
 8008abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4a15      	ldr	r2, [pc, #84]	; (8008b18 <prvHeapInit+0xb4>)
 8008ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ac6:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <prvHeapInit+0xb4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ace:	4b12      	ldr	r3, [pc, #72]	; (8008b18 <prvHeapInit+0xb4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	1ad2      	subs	r2, r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <prvHeapInit+0xb4>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	4a0a      	ldr	r2, [pc, #40]	; (8008b1c <prvHeapInit+0xb8>)
 8008af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	4a09      	ldr	r2, [pc, #36]	; (8008b20 <prvHeapInit+0xbc>)
 8008afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008afc:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <prvHeapInit+0xc0>)
 8008afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b02:	601a      	str	r2, [r3, #0]
}
 8008b04:	bf00      	nop
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	20005234 	.word	0x20005234
 8008b14:	20008e34 	.word	0x20008e34
 8008b18:	20008e3c 	.word	0x20008e3c
 8008b1c:	20008e44 	.word	0x20008e44
 8008b20:	20008e40 	.word	0x20008e40
 8008b24:	20008e50 	.word	0x20008e50

08008b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b30:	4b28      	ldr	r3, [pc, #160]	; (8008bd4 <prvInsertBlockIntoFreeList+0xac>)
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	e002      	b.n	8008b3c <prvInsertBlockIntoFreeList+0x14>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d8f7      	bhi.n	8008b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	4413      	add	r3, r2
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d108      	bne.n	8008b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	441a      	add	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	441a      	add	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d118      	bne.n	8008bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d00d      	beq.n	8008ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	441a      	add	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e008      	b.n	8008bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	e003      	b.n	8008bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d002      	beq.n	8008bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bc6:	bf00      	nop
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	20008e34 	.word	0x20008e34
 8008bd8:	20008e3c 	.word	0x20008e3c

08008bdc <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4293      	cmp	r3, r2
 8008bec:	bf38      	it	cc
 8008bee:	4613      	movcc	r3, r2
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	bf28      	it	cs
 8008c0e:	4613      	movcs	r3, r2
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	fb01 f202 	mul.w	r2, r1, r2
 8008c34:	1a9b      	subs	r3, r3, r2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	1ad3      	subs	r3, r2, r3
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	4413      	add	r3, r2
 8008c56:	3b01      	subs	r3, #1
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff ffde 	bl	8008c1c <lfs_aligndown>
 8008c60:	4603      	mov	r3, r0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	fab3 f383 	clz	r3, r3
 8008c7a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	fa93 f3a3 	rbit	r3, r3
 8008c98:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7f7 fef3 	bl	8000a9c <__popcountsi2>
 8008cb6:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	1ad3      	subs	r3, r2, r3
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8008ce4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7ff ffee 	bl	8008cdc <lfs_fromle32>
 8008d00:	4603      	mov	r3, r0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff ffed 	bl	8008d0a <lfs_frombe32>
 8008d30:	4603      	mov	r3, r0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f013 fa18 	bl	801c178 <malloc>
 8008d48:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f013 fa14 	bl	801c188 <free>
#else
    (void)p;
#endif
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d78:	601a      	str	r2, [r3, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	68d8      	ldr	r0, [r3, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	21ff      	movs	r1, #255	; 0xff
 8008d9e:	f013 fd49 	bl	801c834 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008da8:	601a      	str	r2, [r3, #0]
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8008db4:	b5b0      	push	{r4, r5, r7, lr}
 8008db6:	b08a      	sub	sp, #40	; 0x28
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d208      	bcs.n	8008de4 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8008dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd6:	441a      	add	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ddc:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8008dde:	429a      	cmp	r2, r3
 8008de0:	f240 811b 	bls.w	800901a <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8008de4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008de8:	e11c      	b.n	8009024 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8008dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dec:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d03f      	beq.n	8008e74 <lfs_bd_read+0xc0>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d13a      	bne.n	8008e74 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8008e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d232      	bcs.n	8008e74 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d324      	bcc.n	8008e62 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	6859      	ldr	r1, [r3, #4]
 8008e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e22:	1acb      	subs	r3, r1, r3
 8008e24:	4413      	add	r3, r2
 8008e26:	4619      	mov	r1, r3
 8008e28:	69b8      	ldr	r0, [r7, #24]
 8008e2a:	f7ff fee7 	bl	8008bfc <lfs_min>
 8008e2e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e3a:	1acb      	subs	r3, r1, r3
 8008e3c:	4413      	add	r3, r2
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	4619      	mov	r1, r3
 8008e42:	69f8      	ldr	r0, [r7, #28]
 8008e44:	f013 fdff 	bl	801ca46 <memcpy>

                data += diff;
 8008e48:	69fa      	ldr	r2, [r7, #28]
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8008e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	4413      	add	r3, r2
 8008e56:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8008e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8008e60:	e0db      	b.n	800901a <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	69b8      	ldr	r0, [r7, #24]
 8008e6e:	f7ff fec5 	bl	8008bfc <lfs_min>
 8008e72:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d13a      	bne.n	8008ef4 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	4413      	add	r3, r2
        if (block == rcache->block &&
 8008e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d232      	bcs.n	8008ef4 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d324      	bcc.n	8008ee2 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689a      	ldr	r2, [r3, #8]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6859      	ldr	r1, [r3, #4]
 8008ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea2:	1acb      	subs	r3, r1, r3
 8008ea4:	4413      	add	r3, r2
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	69b8      	ldr	r0, [r7, #24]
 8008eaa:	f7ff fea7 	bl	8008bfc <lfs_min>
 8008eae:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008eba:	1acb      	subs	r3, r1, r3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	69ba      	ldr	r2, [r7, #24]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	69f8      	ldr	r0, [r7, #28]
 8008ec4:	f013 fdbf 	bl	801ca46 <memcpy>

                data += diff;
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	4413      	add	r3, r2
 8008ece:	61fb      	str	r3, [r7, #28]
                off += diff;
 8008ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8008ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8008ee0:	e09b      	b.n	800901a <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	4619      	mov	r1, r3
 8008eec:	69b8      	ldr	r0, [r7, #24]
 8008eee:	f7ff fe85 	bl	8008bfc <lfs_min>
 8008ef2:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8008ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d336      	bcc.n	8008f6a <lfs_bd_read+0x1b6>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f00:	695a      	ldr	r2, [r3, #20]
 8008f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f08:	fb01 f202 	mul.w	r2, r1, r2
 8008f0c:	1a9b      	subs	r3, r3, r2
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d12b      	bne.n	8008f6a <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f16:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8008f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d325      	bcc.n	8008f6a <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	4619      	mov	r1, r3
 8008f26:	69b8      	ldr	r0, [r7, #24]
 8008f28:	f7ff fe78 	bl	8008c1c <lfs_aligndown>
 8008f2c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f32:	685c      	ldr	r4, [r3, #4]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f42:	47a0      	blx	r4
 8008f44:	6178      	str	r0, [r7, #20]
            if (err) {
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <lfs_bd_read+0x19c>
                return err;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	e069      	b.n	8009024 <lfs_bd_read+0x270>
            }

            data += diff;
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	4413      	add	r3, r2
 8008f56:	61fb      	str	r3, [r7, #28]
            off += diff;
 8008f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8008f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8008f68:	e057      	b.n	800901a <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f6e:	6a1b      	ldr	r3, [r3, #32]
 8008f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d305      	bcc.n	8008f82 <lfs_bd_read+0x1ce>
 8008f76:	4b2d      	ldr	r3, [pc, #180]	; (800902c <lfs_bd_read+0x278>)
 8008f78:	4a2d      	ldr	r2, [pc, #180]	; (8009030 <lfs_bd_read+0x27c>)
 8008f7a:	216b      	movs	r1, #107	; 0x6b
 8008f7c:	482d      	ldr	r0, [pc, #180]	; (8009034 <lfs_bd_read+0x280>)
 8008f7e:	f013 f8dd 	bl	801c13c <__assert_func>
        rcache->block = block;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f86:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008f92:	f7ff fe43 	bl	8008c1c <lfs_aligndown>
 8008f96:	4602      	mov	r2, r0
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8008f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fa6:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f7ff fe4b 	bl	8008c46 <lfs_alignup>
 8008fb0:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fb6:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4610      	mov	r0, r2
 8008fbc:	f7ff fe1e 	bl	8008bfc <lfs_min>
 8008fc0:	4602      	mov	r2, r0
                - rcache->off,
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8008fc6:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7ff fe13 	bl	8008bfc <lfs_min>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe0:	685c      	ldr	r4, [r3, #4]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6819      	ldr	r1, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	47a0      	blx	r4
 8008ffc:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	dd05      	ble.n	8009010 <lfs_bd_read+0x25c>
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <lfs_bd_read+0x284>)
 8009006:	4a0a      	ldr	r2, [pc, #40]	; (8009030 <lfs_bd_read+0x27c>)
 8009008:	2176      	movs	r1, #118	; 0x76
 800900a:	480a      	ldr	r0, [pc, #40]	; (8009034 <lfs_bd_read+0x280>)
 800900c:	f013 f896 	bl	801c13c <__assert_func>
        if (err) {
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <lfs_bd_read+0x266>
            return err;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	e004      	b.n	8009024 <lfs_bd_read+0x270>
    while (size > 0) {
 800901a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901c:	2b00      	cmp	r3, #0
 800901e:	f47f aee4 	bne.w	8008dea <lfs_bd_read+0x36>
        }
    }

    return 0;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3720      	adds	r7, #32
 8009028:	46bd      	mov	sp, r7
 800902a:	bdb0      	pop	{r4, r5, r7, pc}
 800902c:	0801e020 	.word	0x0801e020
 8009030:	080215b0 	.word	0x080215b0
 8009034:	0801e040 	.word	0x0801e040
 8009038:	0801e06c 	.word	0x0801e06c

0800903c <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800903c:	b580      	push	{r7, lr}
 800903e:	b08e      	sub	sp, #56	; 0x38
 8009040:	af04      	add	r7, sp, #16
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 800904e:	2300      	movs	r3, #0
 8009050:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8009052:	2300      	movs	r3, #0
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
 8009056:	e039      	b.n	80090cc <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8009058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	2108      	movs	r1, #8
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fdcb 	bl	8008bfc <lfs_min>
 8009066:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	1ad1      	subs	r1, r2, r3
 800906e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	4413      	add	r3, r2
 8009074:	69fa      	ldr	r2, [r7, #28]
 8009076:	9203      	str	r2, [sp, #12]
 8009078:	f107 0210 	add.w	r2, r7, #16
 800907c:	9202      	str	r2, [sp, #8]
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	460b      	mov	r3, r1
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7ff fe92 	bl	8008db4 <lfs_bd_read>
 8009090:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <lfs_bd_cmp+0x60>
            return res;
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	e01c      	b.n	80090d6 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 800909c:	6a3a      	ldr	r2, [r7, #32]
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	18d1      	adds	r1, r2, r3
 80090a2:	f107 0310 	add.w	r3, r7, #16
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f013 fb99 	bl	801c7e0 <memcmp>
 80090ae:	61b8      	str	r0, [r7, #24]
        if (res) {
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d006      	beq.n	80090c4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	da01      	bge.n	80090c0 <lfs_bd_cmp+0x84>
 80090bc:	2301      	movs	r3, #1
 80090be:	e00a      	b.n	80090d6 <lfs_bd_cmp+0x9a>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e008      	b.n	80090d6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 80090c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	4413      	add	r3, r2
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
 80090cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d3c1      	bcc.n	8009058 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3728      	adds	r7, #40	; 0x28
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80090e0:	b5b0      	push	{r4, r5, r7, lr}
 80090e2:	b08c      	sub	sp, #48	; 0x30
 80090e4:	af04      	add	r7, sp, #16
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090f6:	d061      	beq.n	80091bc <lfs_bd_flush+0xdc>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f113 0f02 	cmn.w	r3, #2
 8009100:	d05c      	beq.n	80091bc <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	429a      	cmp	r2, r3
 800910e:	d305      	bcc.n	800911c <lfs_bd_flush+0x3c>
 8009110:	4b2d      	ldr	r3, [pc, #180]	; (80091c8 <lfs_bd_flush+0xe8>)
 8009112:	4a2e      	ldr	r2, [pc, #184]	; (80091cc <lfs_bd_flush+0xec>)
 8009114:	219e      	movs	r1, #158	; 0x9e
 8009116:	482e      	ldr	r0, [pc, #184]	; (80091d0 <lfs_bd_flush+0xf0>)
 8009118:	f013 f810 	bl	801c13c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f7ff fd8c 	bl	8008c46 <lfs_alignup>
 800912e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009134:	689c      	ldr	r4, [r3, #8]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6819      	ldr	r1, [r3, #0]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	462b      	mov	r3, r5
 800914c:	47a0      	blx	r4
 800914e:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	dd05      	ble.n	8009162 <lfs_bd_flush+0x82>
 8009156:	4b1f      	ldr	r3, [pc, #124]	; (80091d4 <lfs_bd_flush+0xf4>)
 8009158:	4a1c      	ldr	r2, [pc, #112]	; (80091cc <lfs_bd_flush+0xec>)
 800915a:	21a2      	movs	r1, #162	; 0xa2
 800915c:	481c      	ldr	r0, [pc, #112]	; (80091d0 <lfs_bd_flush+0xf0>)
 800915e:	f012 ffed 	bl	801c13c <__assert_func>
        if (err) {
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <lfs_bd_flush+0x8c>
            return err;
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	e028      	b.n	80091be <lfs_bd_flush+0xde>
        }

        if (validate) {
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d020      	beq.n	80091b4 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8009172:	6879      	ldr	r1, [r7, #4]
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f7ff fdf7 	bl	8008d68 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8009186:	69f8      	ldr	r0, [r7, #28]
 8009188:	9003      	str	r0, [sp, #12]
 800918a:	9102      	str	r1, [sp, #8]
 800918c:	9201      	str	r2, [sp, #4]
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	2100      	movs	r1, #0
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff ff50 	bl	800903c <lfs_bd_cmp>
 800919c:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	da01      	bge.n	80091a8 <lfs_bd_flush+0xc8>
                return res;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	e00a      	b.n	80091be <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 80091ae:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80091b2:	e004      	b.n	80091be <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff fde5 	bl	8008d86 <lfs_cache_zero>
    }

    return 0;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3720      	adds	r7, #32
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bdb0      	pop	{r4, r5, r7, pc}
 80091c6:	bf00      	nop
 80091c8:	0801e078 	.word	0x0801e078
 80091cc:	080215bc 	.word	0x080215bc
 80091d0:	0801e040 	.word	0x0801e040
 80091d4:	0801e06c 	.word	0x0801e06c

080091d8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f7ff fdbd 	bl	8008d68 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80091ee:	78fb      	ldrb	r3, [r7, #3]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7ff ff73 	bl	80090e0 <lfs_bd_flush>
 80091fa:	6178      	str	r0, [r7, #20]
    if (err) {
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <lfs_bd_sync+0x2e>
        return err;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	e011      	b.n	800922a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b00      	cmp	r3, #0
 800921a:	dd05      	ble.n	8009228 <lfs_bd_sync+0x50>
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <lfs_bd_sync+0x5c>)
 800921e:	4a06      	ldr	r2, [pc, #24]	; (8009238 <lfs_bd_sync+0x60>)
 8009220:	21c8      	movs	r1, #200	; 0xc8
 8009222:	4806      	ldr	r0, [pc, #24]	; (800923c <lfs_bd_sync+0x64>)
 8009224:	f012 ff8a 	bl	801c13c <__assert_func>
    return err;
 8009228:	697b      	ldr	r3, [r7, #20]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	0801e06c 	.word	0x0801e06c
 8009238:	080215cc 	.word	0x080215cc
 800923c:	0801e040 	.word	0x0801e040

08009240 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	f113 0f02 	cmn.w	r3, #2
 8009258:	d00b      	beq.n	8009272 <lfs_bd_prog+0x32>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009262:	429a      	cmp	r2, r3
 8009264:	d305      	bcc.n	8009272 <lfs_bd_prog+0x32>
 8009266:	4b47      	ldr	r3, [pc, #284]	; (8009384 <lfs_bd_prog+0x144>)
 8009268:	4a47      	ldr	r2, [pc, #284]	; (8009388 <lfs_bd_prog+0x148>)
 800926a:	21d3      	movs	r1, #211	; 0xd3
 800926c:	4847      	ldr	r0, [pc, #284]	; (800938c <lfs_bd_prog+0x14c>)
 800926e:	f012 ff65 	bl	801c13c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8009272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009276:	441a      	add	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	429a      	cmp	r2, r3
 8009280:	d977      	bls.n	8009372 <lfs_bd_prog+0x132>
 8009282:	4b43      	ldr	r3, [pc, #268]	; (8009390 <lfs_bd_prog+0x150>)
 8009284:	4a40      	ldr	r2, [pc, #256]	; (8009388 <lfs_bd_prog+0x148>)
 8009286:	21d4      	movs	r1, #212	; 0xd4
 8009288:	4840      	ldr	r0, [pc, #256]	; (800938c <lfs_bd_prog+0x14c>)
 800928a:	f012 ff57 	bl	801c13c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009294:	429a      	cmp	r2, r3
 8009296:	d151      	bne.n	800933c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800929c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800929e:	429a      	cmp	r2, r3
 80092a0:	d34c      	bcc.n	800933c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ac:	4413      	add	r3, r2
                off >= pcache->off &&
 80092ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d243      	bcs.n	800933c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	6859      	ldr	r1, [r3, #4]
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80092c2:	4413      	add	r3, r2
 80092c4:	4619      	mov	r1, r3
 80092c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092c8:	f7ff fc98 	bl	8008bfc <lfs_min>
 80092cc:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092d8:	1acb      	subs	r3, r1, r3
 80092da:	4413      	add	r3, r2
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	69f9      	ldr	r1, [r7, #28]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f013 fbb0 	bl	801ca46 <memcpy>

            data += diff;
 80092e6:	69fa      	ldr	r2, [r7, #28]
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	4413      	add	r3, r2
 80092ec:	61fb      	str	r3, [r7, #28]
            off += diff;
 80092ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	4413      	add	r3, r2
 80092f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80092f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6898      	ldr	r0, [r3, #8]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	4619      	mov	r1, r3
 800930c:	f7ff fc66 	bl	8008bdc <lfs_max>
 8009310:	4602      	mov	r2, r0
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	689a      	ldr	r2, [r3, #8]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800931e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009320:	429a      	cmp	r2, r3
 8009322:	d126      	bne.n	8009372 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	68b9      	ldr	r1, [r7, #8]
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff fed8 	bl	80090e0 <lfs_bd_flush>
 8009330:	6178      	str	r0, [r7, #20]
                if (err) {
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d01c      	beq.n	8009372 <lfs_bd_prog+0x132>
                    return err;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	e01e      	b.n	800937a <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009344:	d005      	beq.n	8009352 <lfs_bd_prog+0x112>
 8009346:	4b13      	ldr	r3, [pc, #76]	; (8009394 <lfs_bd_prog+0x154>)
 8009348:	4a0f      	ldr	r2, [pc, #60]	; (8009388 <lfs_bd_prog+0x148>)
 800934a:	21f1      	movs	r1, #241	; 0xf1
 800934c:	480f      	ldr	r0, [pc, #60]	; (800938c <lfs_bd_prog+0x14c>)
 800934e:	f012 fef5 	bl	801c13c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009356:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	4619      	mov	r1, r3
 8009360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009362:	f7ff fc5b 	bl	8008c1c <lfs_aligndown>
 8009366:	4602      	mov	r2, r0
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8009372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009374:	2b00      	cmp	r3, #0
 8009376:	d18a      	bne.n	800928e <lfs_bd_prog+0x4e>
    }

    return 0;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3720      	adds	r7, #32
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	0801e0a0 	.word	0x0801e0a0
 8009388:	080215d8 	.word	0x080215d8
 800938c:	0801e040 	.word	0x0801e040
 8009390:	0801e0dc 	.word	0x0801e0dc
 8009394:	0801e100 	.word	0x0801e100

08009398 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093a6:	6a1b      	ldr	r3, [r3, #32]
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d305      	bcc.n	80093ba <lfs_bd_erase+0x22>
 80093ae:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <lfs_bd_erase+0x54>)
 80093b0:	4a0f      	ldr	r2, [pc, #60]	; (80093f0 <lfs_bd_erase+0x58>)
 80093b2:	21ff      	movs	r1, #255	; 0xff
 80093b4:	480f      	ldr	r0, [pc, #60]	; (80093f4 <lfs_bd_erase+0x5c>)
 80093b6:	f012 fec1 	bl	801c13c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	4610      	mov	r0, r2
 80093c8:	4798      	blx	r3
 80093ca:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	dd06      	ble.n	80093e0 <lfs_bd_erase+0x48>
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <lfs_bd_erase+0x60>)
 80093d4:	4a06      	ldr	r2, [pc, #24]	; (80093f0 <lfs_bd_erase+0x58>)
 80093d6:	f240 1101 	movw	r1, #257	; 0x101
 80093da:	4806      	ldr	r0, [pc, #24]	; (80093f4 <lfs_bd_erase+0x5c>)
 80093dc:	f012 feae 	bl	801c13c <__assert_func>
    return err;
 80093e0:	68fb      	ldr	r3, [r7, #12]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	0801e020 	.word	0x0801e020
 80093f0:	080215e4 	.word	0x080215e4
 80093f4:	0801e040 	.word	0x0801e040
 80093f8:	0801e06c 	.word	0x0801e06c

080093fc <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3304      	adds	r3, #4
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	601a      	str	r2, [r3, #0]
}
 800941a:	bf00      	nop
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009436:	d005      	beq.n	8009444 <lfs_pair_isnull+0x1e>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3304      	adds	r3, #4
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009442:	d101      	bne.n	8009448 <lfs_pair_isnull+0x22>
 8009444:	2301      	movs	r3, #1
 8009446:	e000      	b.n	800944a <lfs_pair_isnull+0x24>
 8009448:	2300      	movs	r3, #0
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	b2db      	uxtb	r3, r3
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d017      	beq.n	80094a2 <lfs_pair_cmp+0x46>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3304      	adds	r3, #4
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	3304      	adds	r3, #4
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d00f      	beq.n	80094a2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	3304      	adds	r3, #4
 800948a:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800948c:	429a      	cmp	r2, r3
 800948e:	d008      	beq.n	80094a2 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3304      	adds	r3, #4
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800949a:	429a      	cmp	r2, r3
 800949c:	d001      	beq.n	80094a2 <lfs_pair_cmp+0x46>
 800949e:	2301      	movs	r3, #1
 80094a0:	e000      	b.n	80094a4 <lfs_pair_cmp+0x48>
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d107      	bne.n	80094d6 <lfs_pair_sync+0x26>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3304      	adds	r3, #4
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	3304      	adds	r3, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d00d      	beq.n	80094f2 <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	3304      	adds	r3, #4
 80094de:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d108      	bne.n	80094f6 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3304      	adds	r3, #4
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d101      	bne.n	80094f6 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80094f2:	2301      	movs	r3, #1
 80094f4:	e000      	b.n	80094f8 <lfs_pair_sync+0x48>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	b2db      	uxtb	r3, r3
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800950a:	b590      	push	{r4, r7, lr}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff fbe0 	bl	8008cdc <lfs_fromle32>
 800951c:	4602      	mov	r2, r0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	3304      	adds	r3, #4
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	1d1c      	adds	r4, r3, #4
 800952c:	4610      	mov	r0, r2
 800952e:	f7ff fbd5 	bl	8008cdc <lfs_fromle32>
 8009532:	4603      	mov	r3, r0
 8009534:	6023      	str	r3, [r4, #0]
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	bd90      	pop	{r4, r7, pc}

0800953e <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800953e:	b590      	push	{r4, r7, lr}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff fbd1 	bl	8008cf2 <lfs_tole32>
 8009550:	4602      	mov	r2, r0
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3304      	adds	r3, #4
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	1d1c      	adds	r4, r3, #4
 8009560:	4610      	mov	r0, r2
 8009562:	f7ff fbc6 	bl	8008cf2 <lfs_tole32>
 8009566:	4603      	mov	r3, r0
 8009568:	6023      	str	r3, [r4, #0]
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bd90      	pop	{r4, r7, pc}

08009572 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8009572:	b480      	push	{r7}
 8009574:	b083      	sub	sp, #12
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	43db      	mvns	r3, r3
 800957e:	0fdb      	lsrs	r3, r3, #31
 8009580:	b2db      	uxtb	r3, r3
}
 8009582:	4618      	mov	r0, r3
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800958e:	b480      	push	{r7}
 8009590:	b083      	sub	sp, #12
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	059b      	lsls	r3, r3, #22
 800959a:	159b      	asrs	r3, r3, #22
 800959c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095a0:	bf0c      	ite	eq
 80095a2:	2301      	moveq	r3, #1
 80095a4:	2300      	movne	r3, #0
 80095a6:	b2db      	uxtb	r3, r3
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	0d1b      	lsrs	r3, r3, #20
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095c6:	b29b      	uxth	r3, r3
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	0d1b      	lsrs	r3, r3, #20
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095e6:	b29b      	uxth	r3, r3
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	0d1b      	lsrs	r3, r3, #20
 8009600:	b2db      	uxtb	r3, r3
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7ff ffec 	bl	80095f4 <lfs_tag_chunk>
 800961c:	4603      	mov	r3, r0
 800961e:	b25b      	sxtb	r3, r3
}
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	0a9b      	lsrs	r3, r3, #10
 8009634:	b29b      	uxth	r3, r3
 8009636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800963a:	b29b      	uxth	r3, r3
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7ff ff8f 	bl	800958e <lfs_tag_isdelete>
 8009670:	4603      	mov	r3, r0
 8009672:	461a      	mov	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4413      	add	r3, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff ffe5 	bl	8009648 <lfs_tag_size>
 800967e:	4603      	mov	r3, r0
 8009680:	3304      	adds	r3, #4
}
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]
 8009698:	e012      	b.n	80096c0 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	6819      	ldr	r1, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	4413      	add	r3, r2
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4403      	add	r3, r0
 80096b6:	404a      	eors	r2, r1
 80096b8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3301      	adds	r3, #1
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	dde9      	ble.n	800969a <lfs_gstate_xor+0x10>
    }
}
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80096dc:	2300      	movs	r3, #0
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	e00b      	b.n	80096fa <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	4413      	add	r3, r2
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <lfs_gstate_iszero+0x20>
            return false;
 80096f0:	2300      	movs	r3, #0
 80096f2:	e006      	b.n	8009702 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	3301      	adds	r3, #1
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	ddf0      	ble.n	80096e2 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8009700:	2301      	movs	r3, #1
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4618      	mov	r0, r3
 800971c:	f7ff ff94 	bl	8009648 <lfs_tag_size>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	bf14      	ite	ne
 8009726:	2301      	movne	r3, #1
 8009728:	2300      	moveq	r3, #0
 800972a:	b2db      	uxtb	r3, r3
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff ff81 	bl	8009648 <lfs_tag_size>
 8009746:	4603      	mov	r3, r0
 8009748:	b2db      	uxtb	r3, r3
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff ff28 	bl	80095b4 <lfs_tag_type1>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	bf14      	ite	ne
 800976a:	2301      	movne	r3, #1
 800976c:	2300      	moveq	r3, #0
 800976e:	b2db      	uxtb	r3, r3
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4618      	mov	r0, r3
 8009788:	f7ff ff14 	bl	80095b4 <lfs_tag_type1>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <lfs_gstate_hasmovehere+0x30>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3304      	adds	r3, #4
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff fe5f 	bl	800945c <lfs_pair_cmp>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <lfs_gstate_hasmovehere+0x30>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <lfs_gstate_hasmovehere+0x32>
 80097a8:	2300      	movs	r3, #0
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	b2db      	uxtb	r3, r3
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fa89 	bl	8008cdc <lfs_fromle32>
 80097ca:	4602      	mov	r2, r0
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff fa81 	bl	8008cdc <lfs_fromle32>
 80097da:	4602      	mov	r2, r0
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff fa79 	bl	8008cdc <lfs_fromle32>
 80097ea:	4602      	mov	r2, r0
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	609a      	str	r2, [r3, #8]
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff fa74 	bl	8008cf2 <lfs_tole32>
 800980a:	4602      	mov	r2, r0
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff fa6c 	bl	8008cf2 <lfs_tole32>
 800981a:	4602      	mov	r2, r0
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff fa64 	bl	8008cf2 <lfs_tole32>
 800982a:	4602      	mov	r2, r0
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	609a      	str	r2, [r3, #8]
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff fa49 	bl	8008cdc <lfs_fromle32>
 800984a:	4602      	mov	r2, r0
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	4618      	mov	r0, r3
 8009856:	f7ff fa41 	bl	8008cdc <lfs_fromle32>
 800985a:	4602      	mov	r2, r0
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	605a      	str	r2, [r3, #4]
}
 8009860:	bf00      	nop
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff fa3c 	bl	8008cf2 <lfs_tole32>
 800987a:	4602      	mov	r2, r0
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff fa34 	bl	8008cf2 <lfs_tole32>
 800988a:	4602      	mov	r2, r0
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	605a      	str	r2, [r3, #4]
}
 8009890:	bf00      	nop
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff fa19 	bl	8008cdc <lfs_fromle32>
 80098aa:	4602      	mov	r2, r0
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff fa11 	bl	8008cdc <lfs_fromle32>
 80098ba:	4602      	mov	r2, r0
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff fa09 	bl	8008cdc <lfs_fromle32>
 80098ca:	4602      	mov	r2, r0
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fa01 	bl	8008cdc <lfs_fromle32>
 80098da:	4602      	mov	r2, r0
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7ff f9f9 	bl	8008cdc <lfs_fromle32>
 80098ea:	4602      	mov	r2, r0
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff f9f1 	bl	8008cdc <lfs_fromle32>
 80098fa:	4602      	mov	r2, r0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	615a      	str	r2, [r3, #20]
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff f9ec 	bl	8008cf2 <lfs_tole32>
 800991a:	4602      	mov	r2, r0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff f9e4 	bl	8008cf2 <lfs_tole32>
 800992a:	4602      	mov	r2, r0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff f9dc 	bl	8008cf2 <lfs_tole32>
 800993a:	4602      	mov	r2, r0
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff f9d4 	bl	8008cf2 <lfs_tole32>
 800994a:	4602      	mov	r2, r0
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff f9cc 	bl	8008cf2 <lfs_tole32>
 800995a:	4602      	mov	r2, r0
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	695b      	ldr	r3, [r3, #20]
 8009964:	4618      	mov	r0, r3
 8009966:	f7ff f9c4 	bl	8008cf2 <lfs_tole32>
 800996a:	4602      	mov	r2, r0
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	615a      	str	r2, [r3, #20]
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8009982:	1d3b      	adds	r3, r7, #4
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e009      	b.n	800999c <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d101      	bne.n	8009996 <lfs_mlist_isopen+0x1e>
            return true;
 8009992:	2301      	movs	r3, #1
 8009994:	e007      	b.n	80099a6 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	60fb      	str	r3, [r7, #12]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f1      	bne.n	8009988 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	3328      	adds	r3, #40	; 0x28
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	e00d      	b.n	80099e0 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d105      	bne.n	80099da <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	601a      	str	r2, [r3, #0]
            break;
 80099d8:	e007      	b.n	80099ea <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1ed      	bne.n	80099c4 <lfs_mlist_remove+0x12>
        }
    }
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009a0e:	bf00      	nop
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8009a1a:	b480      	push	{r7}
 8009a1c:	b085      	sub	sp, #20
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	4413      	add	r3, r2
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009a3c:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8009a3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a42:	fb01 f202 	mul.w	r2, r1, r2
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d212      	bcs.n	8009a7a <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	095b      	lsrs	r3, r3, #5
 8009a5c:	009a      	lsls	r2, r3, #2
 8009a5e:	440a      	add	r2, r1
 8009a60:	6811      	ldr	r1, [r2, #0]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	f002 021f 	and.w	r2, r2, #31
 8009a68:	2001      	movs	r0, #1
 8009a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4403      	add	r3, r0
 8009a76:	430a      	orrs	r2, r1
 8009a78:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a94:	6a1a      	ldr	r2, [r3, #32]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009a9a:	bf00      	nop
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b082      	sub	sp, #8
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff ffe4 	bl	8009a88 <lfs_alloc_ack>
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af02      	add	r7, sp, #8
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8009ad2:	e04f      	b.n	8009b74 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ad8:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae8:	1e5a      	subs	r2, r3, #1
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	095b      	lsrs	r3, r3, #5
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f003 031f 	and.w	r3, r3, #31
 8009b02:	2101      	movs	r1, #1
 8009b04:	fa01 f303 	lsl.w	r3, r1, r3
 8009b08:	4013      	ands	r3, r2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d132      	bne.n	8009b74 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	4413      	add	r3, r2
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009b1a:	6a12      	ldr	r2, [r2, #32]
 8009b1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b20:	fb01 f202 	mul.w	r2, r1, r2
 8009b24:	1a9a      	subs	r2, r3, r2
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8009b2a:	e009      	b.n	8009b40 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b3a:	1e5a      	subs	r2, r3, #1
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d011      	beq.n	8009b70 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b54:	095b      	lsrs	r3, r3, #5
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b60:	f003 031f 	and.w	r3, r3, #31
 8009b64:	2101      	movs	r1, #1
 8009b66:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6a:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1dd      	bne.n	8009b2c <lfs_alloc+0x64>
                }

                return 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	e050      	b.n	8009c16 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d1a9      	bne.n	8009ad4 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10f      	bne.n	8009ba8 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b90:	4413      	add	r3, r2
 8009b92:	4a23      	ldr	r2, [pc, #140]	; (8009c20 <lfs_alloc+0x158>)
 8009b94:	9200      	str	r2, [sp, #0]
 8009b96:	f240 2247 	movw	r2, #583	; 0x247
 8009b9a:	4922      	ldr	r1, [pc, #136]	; (8009c24 <lfs_alloc+0x15c>)
 8009b9c:	4822      	ldr	r0, [pc, #136]	; (8009c28 <lfs_alloc+0x160>)
 8009b9e:	f012 fcb9 	bl	801c514 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8009ba2:	f06f 031b 	mvn.w	r3, #27
 8009ba6:	e036      	b.n	8009c16 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb0:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009bb6:	6a12      	ldr	r2, [r2, #32]
 8009bb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bbc:	fb01 f202 	mul.w	r2, r1, r2
 8009bc0:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bcc:	00da      	lsls	r2, r3, #3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f7ff f811 	bl	8008bfc <lfs_min>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	f012 fe1e 	bl	801c834 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	490b      	ldr	r1, [pc, #44]	; (8009c2c <lfs_alloc+0x164>)
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f004 fe30 	bl	800e864 <lfs_fs_rawtraverse>
 8009c04:	60f8      	str	r0, [r7, #12]
        if (err) {
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f43f af62 	beq.w	8009ad2 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7ff ff49 	bl	8009aa6 <lfs_alloc_drop>
            return err;
 8009c14:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	0801e14c 	.word	0x0801e14c
 8009c24:	0801e040 	.word	0x0801e040
 8009c28:	0801e124 	.word	0x0801e124
 8009c2c:	08009a1b 	.word	0x08009a1b

08009c30 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8009c30:	b590      	push	{r4, r7, lr}
 8009c32:	b08f      	sub	sp, #60	; 0x3c
 8009c34:	af04      	add	r7, sp, #16
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	333c      	adds	r3, #60	; 0x3c
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff fd8e 	bl	8009778 <lfs_gstate_hasmovehere>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 80ba 	beq.w	8009dd8 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff fcdf 	bl	8009628 <lfs_tag_id>
 8009c6a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 80b3 	beq.w	8009dd8 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff fcd6 	bl	8009628 <lfs_tag_id>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	461c      	mov	r4, r3
 8009c80:	6838      	ldr	r0, [r7, #0]
 8009c82:	f7ff fcd1 	bl	8009628 <lfs_tag_id>
 8009c86:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8009c88:	429c      	cmp	r4, r3
 8009c8a:	f200 80a5 	bhi.w	8009dd8 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009c94:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8009c96:	e09f      	b.n	8009dd8 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff fce1 	bl	8009662 <lfs_tag_dsize>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	1a9b      	subs	r3, r3, r2
 8009ca6:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8009cac:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8009cb2:	2204      	movs	r2, #4
 8009cb4:	9203      	str	r2, [sp, #12]
 8009cb6:	f107 0210 	add.w	r2, r7, #16
 8009cba:	9202      	str	r2, [sp, #8]
 8009cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbe:	9201      	str	r2, [sp, #4]
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	2304      	movs	r3, #4
 8009cc4:	460a      	mov	r2, r1
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f7ff f873 	bl	8008db4 <lfs_bd_read>
 8009cce:	61b8      	str	r0, [r7, #24]
        if (err) {
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <lfs_dir_getslice+0xaa>
            return err;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	e08a      	b.n	8009df0 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7ff f814 	bl	8008d0a <lfs_frombe32>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	4053      	eors	r3, r2
 8009ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cec:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff fc9a 	bl	8009628 <lfs_tag_id>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d02b      	beq.n	8009d52 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8009cfa:	69f8      	ldr	r0, [r7, #28]
 8009cfc:	f7ff fc5a 	bl	80095b4 <lfs_tag_type1>
 8009d00:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8009d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d06:	d124      	bne.n	8009d52 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8009d08:	69f8      	ldr	r0, [r7, #28]
 8009d0a:	f7ff fc8d 	bl	8009628 <lfs_tag_id>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	461c      	mov	r4, r3
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff fc85 	bl	8009628 <lfs_tag_id>
 8009d1e:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8009d20:	429c      	cmp	r4, r3
 8009d22:	d816      	bhi.n	8009d52 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	1ad2      	subs	r2, r2, r3
 8009d2a:	4b33      	ldr	r3, [pc, #204]	; (8009df8 <lfs_dir_getslice+0x1c8>)
 8009d2c:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8009d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d36:	69fa      	ldr	r2, [r7, #28]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d102      	bne.n	8009d42 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8009d3c:	f06f 0301 	mvn.w	r3, #1
 8009d40:	e056      	b.n	8009df0 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8009d42:	69f8      	ldr	r0, [r7, #28]
 8009d44:	f7ff fc63 	bl	800960e <lfs_tag_splice>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	029a      	lsls	r2, r3, #10
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	4413      	add	r3, r2
 8009d50:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	401a      	ands	r2, r3
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	1ac9      	subs	r1, r1, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	400b      	ands	r3, r1
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d138      	bne.n	8009dd8 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8009d66:	69f8      	ldr	r0, [r7, #28]
 8009d68:	f7ff fc11 	bl	800958e <lfs_tag_isdelete>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8009d72:	f06f 0301 	mvn.w	r3, #1
 8009d76:	e03b      	b.n	8009df0 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8009d78:	69f8      	ldr	r0, [r7, #28]
 8009d7a:	f7ff fc65 	bl	8009648 <lfs_tag_size>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe ff3a 	bl	8008bfc <lfs_min>
 8009d88:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8009d8a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d94:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8009d96:	3204      	adds	r2, #4
 8009d98:	6979      	ldr	r1, [r7, #20]
 8009d9a:	9103      	str	r1, [sp, #12]
 8009d9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d9e:	9102      	str	r1, [sp, #8]
 8009da0:	9201      	str	r2, [sp, #4]
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	4602      	mov	r2, r0
 8009da8:	2100      	movs	r1, #0
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f7ff f802 	bl	8008db4 <lfs_bd_read>
 8009db0:	61b8      	str	r0, [r7, #24]
            if (err) {
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <lfs_dir_getslice+0x18c>
                return err;
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	e019      	b.n	8009df0 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8009dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	18d0      	adds	r0, r2, r3
 8009dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	461a      	mov	r2, r3
 8009dca:	2100      	movs	r1, #0
 8009dcc:	f012 fd32 	bl	801c834 <memset>

            return tag + gdiff;
 8009dd0:	6a3a      	ldr	r2, [r7, #32]
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	e00b      	b.n	8009df0 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff fc41 	bl	8009662 <lfs_tag_dsize>
 8009de0:	4603      	mov	r3, r0
 8009de2:	3304      	adds	r3, #4
 8009de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de6:	429a      	cmp	r2, r3
 8009de8:	f4bf af56 	bcs.w	8009c98 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8009dec:	f06f 0301 	mvn.w	r3, #1
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	372c      	adds	r7, #44	; 0x2c
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd90      	pop	{r4, r7, pc}
 8009df8:	000ffc00 	.word	0x000ffc00

08009dfc <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af04      	add	r7, sp, #16
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8009e0a:	6838      	ldr	r0, [r7, #0]
 8009e0c:	f7ff fc1c 	bl	8009648 <lfs_tag_size>
 8009e10:	4603      	mov	r3, r0
 8009e12:	9302      	str	r3, [sp, #8]
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	68b9      	ldr	r1, [r7, #8]
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f7ff ff04 	bl	8009c30 <lfs_dir_getslice>
 8009e28:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b08c      	sub	sp, #48	; 0x30
 8009e36:	af04      	add	r7, sp, #16
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	607a      	str	r2, [r7, #4]
 8009e3e:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8009e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e48:	441a      	add	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	f240 80c0 	bls.w	8009fd6 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8009e56:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8009e5a:	e0c1      	b.n	8009fe0 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8009e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e5e:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d03f      	beq.n	8009ee6 <lfs_dir_getread+0xb4>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f113 0f02 	cmn.w	r3, #2
 8009e6e:	d13a      	bne.n	8009ee6 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8009e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d232      	bcs.n	8009ee6 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d324      	bcc.n	8009ed4 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6859      	ldr	r1, [r3, #4]
 8009e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e94:	1acb      	subs	r3, r1, r3
 8009e96:	4413      	add	r3, r2
 8009e98:	4619      	mov	r1, r3
 8009e9a:	69b8      	ldr	r0, [r7, #24]
 8009e9c:	f7fe feae 	bl	8008bfc <lfs_min>
 8009ea0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68da      	ldr	r2, [r3, #12]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009eac:	1acb      	subs	r3, r1, r3
 8009eae:	4413      	add	r3, r2
 8009eb0:	69ba      	ldr	r2, [r7, #24]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	69f8      	ldr	r0, [r7, #28]
 8009eb6:	f012 fdc6 	bl	801ca46 <memcpy>

                data += diff;
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	61fb      	str	r3, [r7, #28]
                off += diff;
 8009ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8009eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8009ed2:	e080      	b.n	8009fd6 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	4619      	mov	r1, r3
 8009ede:	69b8      	ldr	r0, [r7, #24]
 8009ee0:	f7fe fe8c 	bl	8008bfc <lfs_min>
 8009ee4:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f113 0f02 	cmn.w	r3, #2
 8009eee:	d13a      	bne.n	8009f66 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8009efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d232      	bcs.n	8009f66 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d324      	bcc.n	8009f54 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6859      	ldr	r1, [r3, #4]
 8009f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f14:	1acb      	subs	r3, r1, r3
 8009f16:	4413      	add	r3, r2
 8009f18:	4619      	mov	r1, r3
 8009f1a:	69b8      	ldr	r0, [r7, #24]
 8009f1c:	f7fe fe6e 	bl	8008bfc <lfs_min>
 8009f20:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f2c:	1acb      	subs	r3, r1, r3
 8009f2e:	4413      	add	r3, r2
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	4619      	mov	r1, r3
 8009f34:	69f8      	ldr	r0, [r7, #28]
 8009f36:	f012 fd86 	bl	801ca46 <memcpy>

                data += diff;
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	4413      	add	r3, r2
 8009f40:	61fb      	str	r3, [r7, #28]
                off += diff;
 8009f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	4413      	add	r3, r2
 8009f48:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8009f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8009f52:	e040      	b.n	8009fd6 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	69b8      	ldr	r0, [r7, #24]
 8009f60:	f7fe fe4c 	bl	8008bfc <lfs_min>
 8009f64:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	f06f 0201 	mvn.w	r2, #1
 8009f6c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f72:	695b      	ldr	r3, [r3, #20]
 8009f74:	4619      	mov	r1, r3
 8009f76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f78:	f7fe fe50 	bl	8008c1c <lfs_aligndown>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8009f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	441a      	add	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4610      	mov	r0, r2
 8009f92:	f7fe fe58 	bl	8008c46 <lfs_alignup>
 8009f96:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f7fe fe2b 	bl	8008bfc <lfs_min>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6889      	ldr	r1, [r1, #8]
 8009fb8:	9102      	str	r1, [sp, #8]
 8009fba:	9201      	str	r2, [sp, #4]
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fc2:	68b9      	ldr	r1, [r7, #8]
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7ff fe33 	bl	8009c30 <lfs_dir_getslice>
 8009fca:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	da01      	bge.n	8009fd6 <lfs_dir_getread+0x1a4>
            return err;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	e004      	b.n	8009fe0 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8009fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f47f af3f 	bne.w	8009e5c <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3720      	adds	r7, #32
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8009fe8:	b590      	push	{r4, r7, lr}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <lfs_dir_traverse_filter+0x1e>
 800a002:	4b24      	ldr	r3, [pc, #144]	; (800a094 <lfs_dir_traverse_filter+0xac>)
 800a004:	e000      	b.n	800a008 <lfs_dir_traverse_filter+0x20>
 800a006:	4b24      	ldr	r3, [pc, #144]	; (800a098 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800a008:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	405a      	eors	r2, r3
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	4013      	ands	r3, r2
 800a016:	2b00      	cmp	r3, #0
 800a018:	d014      	beq.n	800a044 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff fab5 	bl	800958e <lfs_tag_isdelete>
 800a024:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10c      	bne.n	800a044 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	4a19      	ldr	r2, [pc, #100]	; (800a094 <lfs_dir_traverse_filter+0xac>)
 800a02e:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	4b19      	ldr	r3, [pc, #100]	; (800a09c <lfs_dir_traverse_filter+0xb4>)
 800a036:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a038:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a03c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800a040:	429a      	cmp	r2, r3
 800a042:	d104      	bne.n	800a04e <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
        return true;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e01e      	b.n	800a08c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a04e:	68b8      	ldr	r0, [r7, #8]
 800a050:	f7ff fab0 	bl	80095b4 <lfs_tag_type1>
 800a054:	4603      	mov	r3, r0
 800a056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a05a:	d116      	bne.n	800a08a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800a05c:	68b8      	ldr	r0, [r7, #8]
 800a05e:	f7ff fae3 	bl	8009628 <lfs_tag_id>
 800a062:	4603      	mov	r3, r0
 800a064:	461c      	mov	r4, r3
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7ff fadc 	bl	8009628 <lfs_tag_id>
 800a070:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a072:	429c      	cmp	r4, r3
 800a074:	d809      	bhi.n	800a08a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a076:	68b8      	ldr	r0, [r7, #8]
 800a078:	f7ff fac9 	bl	800960e <lfs_tag_splice>
 800a07c:	4603      	mov	r3, r0
 800a07e:	029a      	lsls	r2, r3, #10
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	441a      	add	r2, r3
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	601a      	str	r2, [r3, #0]
    }

    return false;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	371c      	adds	r7, #28
 800a090:	46bd      	mov	sp, r7
 800a092:	bd90      	pop	{r4, r7, pc}
 800a094:	7ffffc00 	.word	0x7ffffc00
 800a098:	700ffc00 	.word	0x700ffc00
 800a09c:	000ffc00 	.word	0x000ffc00

0800a0a0 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a0a0:	b590      	push	{r4, r7, lr}
 800a0a2:	b0c1      	sub	sp, #260	; 0x104
 800a0a4:	af04      	add	r7, sp, #16
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800a0b4:	6838      	ldr	r0, [r7, #0]
 800a0b6:	f7ff fad4 	bl	8009662 <lfs_tag_dsize>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	441a      	add	r2, r3
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d237      	bcs.n	800a138 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 800a0c8:	6838      	ldr	r0, [r7, #0]
 800a0ca:	f7ff faca 	bl	8009662 <lfs_tag_dsize>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800a0d6:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 800a0dc:	2204      	movs	r2, #4
 800a0de:	9203      	str	r2, [sp, #12]
 800a0e0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800a0e4:	9202      	str	r2, [sp, #8]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	9201      	str	r2, [sp, #4]
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2304      	movs	r3, #4
 800a0ee:	460a      	mov	r2, r1
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7fe fe5e 	bl	8008db4 <lfs_bd_read>
 800a0f8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 800a0fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <lfs_dir_traverse+0x6a>
                    return err;
 800a104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a108:	e3a6      	b.n	800a858 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800a10a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe fdfc 	bl	8008d0a <lfs_frombe32>
 800a112:	4602      	mov	r2, r0
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	4053      	eors	r3, r2
 800a118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a11c:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3304      	adds	r3, #4
 800a128:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 800a12a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a12e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 800a132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a134:	603b      	str	r3, [r7, #0]
 800a136:	e01b      	b.n	800a170 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 800a138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	dd13      	ble.n	800a168 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 800a140:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 800a148:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 800a152:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a156:	3308      	adds	r3, #8
 800a158:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 800a15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a160:	3b01      	subs	r3, #1
 800a162:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a166:	e003      	b.n	800a170 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 800a16e:	e2a2      	b.n	800a6b6 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800a170:	4b7e      	ldr	r3, [pc, #504]	; (800a36c <lfs_dir_traverse+0x2cc>)
 800a172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800a176:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a17c:	405a      	eors	r2, r3
 800a17e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800a182:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a186:	400b      	ands	r3, r1
 800a188:	4013      	ands	r3, r2
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f040 8285 	bne.w	800a69a <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800a190:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800a194:	f7ff fa48 	bl	8009628 <lfs_tag_id>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80f0 	beq.w	800a380 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800a1a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d906      	bls.n	800a1b6 <lfs_dir_traverse+0x116>
 800a1a8:	4b71      	ldr	r3, [pc, #452]	; (800a370 <lfs_dir_traverse+0x2d0>)
 800a1aa:	4a72      	ldr	r2, [pc, #456]	; (800a374 <lfs_dir_traverse+0x2d4>)
 800a1ac:	f240 314e 	movw	r1, #846	; 0x34e
 800a1b0:	4871      	ldr	r0, [pc, #452]	; (800a378 <lfs_dir_traverse+0x2d8>)
 800a1b2:	f011 ffc3 	bl	801c13c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800a1b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1b8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a1bc:	4613      	mov	r3, r2
 800a1be:	011b      	lsls	r3, r3, #4
 800a1c0:	1a9b      	subs	r3, r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	33f0      	adds	r3, #240	; 0xf0
 800a1c6:	443b      	add	r3, r7
 800a1c8:	3b98      	subs	r3, #152	; 0x98
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	33f0      	adds	r3, #240	; 0xf0
 800a1dc:	443b      	add	r3, r7
 800a1de:	3b94      	subs	r3, #148	; 0x94
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	1a9b      	subs	r3, r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	33f0      	adds	r3, #240	; 0xf0
 800a1f2:	443b      	add	r3, r7
 800a1f4:	3b90      	subs	r3, #144	; 0x90
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a1fe:	4613      	mov	r3, r2
 800a200:	011b      	lsls	r3, r3, #4
 800a202:	1a9b      	subs	r3, r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	33f0      	adds	r3, #240	; 0xf0
 800a208:	443b      	add	r3, r7
 800a20a:	3b8c      	subs	r3, #140	; 0x8c
 800a20c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a216:	4613      	mov	r3, r2
 800a218:	011b      	lsls	r3, r3, #4
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	33f0      	adds	r3, #240	; 0xf0
 800a220:	443b      	add	r3, r7
 800a222:	3b88      	subs	r3, #136	; 0x88
 800a224:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a22e:	4613      	mov	r3, r2
 800a230:	011b      	lsls	r3, r3, #4
 800a232:	1a9b      	subs	r3, r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	33f0      	adds	r3, #240	; 0xf0
 800a238:	443b      	add	r3, r7
 800a23a:	3b84      	subs	r3, #132	; 0x84
 800a23c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a246:	4613      	mov	r3, r2
 800a248:	011b      	lsls	r3, r3, #4
 800a24a:	1a9b      	subs	r3, r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	33f0      	adds	r3, #240	; 0xf0
 800a250:	443b      	add	r3, r7
 800a252:	3b80      	subs	r3, #128	; 0x80
 800a254:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a25e:	4613      	mov	r3, r2
 800a260:	011b      	lsls	r3, r3, #4
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	33f0      	adds	r3, #240	; 0xf0
 800a268:	443b      	add	r3, r7
 800a26a:	3b7c      	subs	r3, #124	; 0x7c
 800a26c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800a270:	801a      	strh	r2, [r3, #0]
 800a272:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a276:	4613      	mov	r3, r2
 800a278:	011b      	lsls	r3, r3, #4
 800a27a:	1a9b      	subs	r3, r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	33f0      	adds	r3, #240	; 0xf0
 800a280:	443b      	add	r3, r7
 800a282:	3b7a      	subs	r3, #122	; 0x7a
 800a284:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800a288:	801a      	strh	r2, [r3, #0]
 800a28a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a28e:	4613      	mov	r3, r2
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	1a9b      	subs	r3, r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	33f0      	adds	r3, #240	; 0xf0
 800a298:	443b      	add	r3, r7
 800a29a:	3b78      	subs	r3, #120	; 0x78
 800a29c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800a2a0:	801a      	strh	r2, [r3, #0]
 800a2a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	1a9b      	subs	r3, r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	33f0      	adds	r3, #240	; 0xf0
 800a2b0:	443b      	add	r3, r7
 800a2b2:	3b74      	subs	r3, #116	; 0x74
 800a2b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a2be:	4613      	mov	r3, r2
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	1a9b      	subs	r3, r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	33f0      	adds	r3, #240	; 0xf0
 800a2c8:	443b      	add	r3, r7
 800a2ca:	3b70      	subs	r3, #112	; 0x70
 800a2cc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800a2d0:	601a      	str	r2, [r3, #0]
 800a2d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	011b      	lsls	r3, r3, #4
 800a2da:	1a9b      	subs	r3, r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	33f0      	adds	r3, #240	; 0xf0
 800a2e0:	443b      	add	r3, r7
 800a2e2:	3b6c      	subs	r3, #108	; 0x6c
 800a2e4:	6019      	str	r1, [r3, #0]
 800a2e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	1a9b      	subs	r3, r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	33f0      	adds	r3, #240	; 0xf0
 800a2f4:	443b      	add	r3, r7
 800a2f6:	3b68      	subs	r3, #104	; 0x68
 800a2f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a302:	4613      	mov	r3, r2
 800a304:	011b      	lsls	r3, r3, #4
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	33f0      	adds	r3, #240	; 0xf0
 800a30c:	443b      	add	r3, r7
 800a30e:	3b68      	subs	r3, #104	; 0x68
 800a310:	3304      	adds	r3, #4
 800a312:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a31a:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800a31e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a322:	3301      	adds	r3, #1
 800a324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 800a346:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <lfs_dir_traverse+0x2dc>)
 800a348:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 800a34c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a350:	1e5a      	subs	r2, r3, #1
 800a352:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a356:	4613      	mov	r3, r2
 800a358:	011b      	lsls	r3, r3, #4
 800a35a:	1a9b      	subs	r3, r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	3328      	adds	r3, #40	; 0x28
 800a360:	440b      	add	r3, r1
 800a362:	3304      	adds	r3, #4
 800a364:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 800a368:	e19e      	b.n	800a6a8 <lfs_dir_traverse+0x608>
 800a36a:	bf00      	nop
 800a36c:	7ff00000 	.word	0x7ff00000
 800a370:	0801e150 	.word	0x0801e150
 800a374:	080215f4 	.word	0x080215f4
 800a378:	0801e040 	.word	0x0801e040
 800a37c:	08009fe9 	.word	0x08009fe9
            }
        }

popped:
 800a380:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800a382:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 800a386:	f7ff f94f 	bl	8009628 <lfs_tag_id>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d015      	beq.n	800a3bc <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800a390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a392:	4618      	mov	r0, r3
 800a394:	f7ff f948 	bl	8009628 <lfs_tag_id>
 800a398:	4603      	mov	r3, r0
 800a39a:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800a39c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	f200 817c 	bhi.w	800a69e <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800a3a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff f93d 	bl	8009628 <lfs_tag_id>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	f240 8171 	bls.w	800a69e <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800a3bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff f908 	bl	80095d4 <lfs_tag_type3>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f43f ae74 	beq.w	800a0b4 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800a3cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff f900 	bl	80095d4 <lfs_tag_type3>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f240 1301 	movw	r3, #257	; 0x101
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	f040 80e0 	bne.w	800a5a2 <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800a3e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a3e6:	4ab1      	ldr	r2, [pc, #708]	; (800a6ac <lfs_dir_traverse+0x60c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	f000 815a 	beq.w	800a6a2 <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800a3ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	011b      	lsls	r3, r3, #4
 800a3f6:	1a9b      	subs	r3, r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	33f0      	adds	r3, #240	; 0xf0
 800a3fc:	443b      	add	r3, r7
 800a3fe:	3b98      	subs	r3, #152	; 0x98
 800a400:	4618      	mov	r0, r3
 800a402:	233c      	movs	r3, #60	; 0x3c
 800a404:	461a      	mov	r2, r3
 800a406:	2100      	movs	r1, #0
 800a408:	f012 fa14 	bl	801c834 <memset>
 800a40c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a410:	4613      	mov	r3, r2
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	1a9b      	subs	r3, r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	33f0      	adds	r3, #240	; 0xf0
 800a41a:	443b      	add	r3, r7
 800a41c:	3b98      	subs	r3, #152	; 0x98
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a426:	4613      	mov	r3, r2
 800a428:	011b      	lsls	r3, r3, #4
 800a42a:	1a9b      	subs	r3, r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	33f0      	adds	r3, #240	; 0xf0
 800a430:	443b      	add	r3, r7
 800a432:	3b94      	subs	r3, #148	; 0x94
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]
 800a438:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a43c:	4613      	mov	r3, r2
 800a43e:	011b      	lsls	r3, r3, #4
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	33f0      	adds	r3, #240	; 0xf0
 800a446:	443b      	add	r3, r7
 800a448:	3b90      	subs	r3, #144	; 0x90
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a452:	4613      	mov	r3, r2
 800a454:	011b      	lsls	r3, r3, #4
 800a456:	1a9b      	subs	r3, r3, r2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	33f0      	adds	r3, #240	; 0xf0
 800a45c:	443b      	add	r3, r7
 800a45e:	3b8c      	subs	r3, #140	; 0x8c
 800a460:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a46a:	4613      	mov	r3, r2
 800a46c:	011b      	lsls	r3, r3, #4
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	33f0      	adds	r3, #240	; 0xf0
 800a474:	443b      	add	r3, r7
 800a476:	3b88      	subs	r3, #136	; 0x88
 800a478:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a482:	4613      	mov	r3, r2
 800a484:	011b      	lsls	r3, r3, #4
 800a486:	1a9b      	subs	r3, r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	33f0      	adds	r3, #240	; 0xf0
 800a48c:	443b      	add	r3, r7
 800a48e:	3b84      	subs	r3, #132	; 0x84
 800a490:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a49a:	4613      	mov	r3, r2
 800a49c:	011b      	lsls	r3, r3, #4
 800a49e:	1a9b      	subs	r3, r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	33f0      	adds	r3, #240	; 0xf0
 800a4a4:	443b      	add	r3, r7
 800a4a6:	3b80      	subs	r3, #128	; 0x80
 800a4a8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	011b      	lsls	r3, r3, #4
 800a4b6:	1a9b      	subs	r3, r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	33f0      	adds	r3, #240	; 0xf0
 800a4bc:	443b      	add	r3, r7
 800a4be:	3b7c      	subs	r3, #124	; 0x7c
 800a4c0:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 800a4c4:	801a      	strh	r2, [r3, #0]
 800a4c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	011b      	lsls	r3, r3, #4
 800a4ce:	1a9b      	subs	r3, r3, r2
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	33f0      	adds	r3, #240	; 0xf0
 800a4d4:	443b      	add	r3, r7
 800a4d6:	3b7a      	subs	r3, #122	; 0x7a
 800a4d8:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 800a4dc:	801a      	strh	r2, [r3, #0]
 800a4de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	011b      	lsls	r3, r3, #4
 800a4e6:	1a9b      	subs	r3, r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	33f0      	adds	r3, #240	; 0xf0
 800a4ec:	443b      	add	r3, r7
 800a4ee:	3b78      	subs	r3, #120	; 0x78
 800a4f0:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 800a4f4:	801a      	strh	r2, [r3, #0]
 800a4f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	011b      	lsls	r3, r3, #4
 800a4fe:	1a9b      	subs	r3, r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	33f0      	adds	r3, #240	; 0xf0
 800a504:	443b      	add	r3, r7
 800a506:	3b74      	subs	r3, #116	; 0x74
 800a508:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a512:	4613      	mov	r3, r2
 800a514:	011b      	lsls	r3, r3, #4
 800a516:	1a9b      	subs	r3, r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	33f0      	adds	r3, #240	; 0xf0
 800a51c:	443b      	add	r3, r7
 800a51e:	3b70      	subs	r3, #112	; 0x70
 800a520:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800a524:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800a526:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a52a:	3301      	adds	r3, #1
 800a52c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 800a530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff f888 	bl	8009648 <lfs_tag_size>
 800a538:	4603      	mov	r3, r0
 800a53a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800a53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff f871 	bl	8009628 <lfs_tag_id>
 800a546:	4603      	mov	r3, r0
 800a548:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 800a54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a550:	60bb      	str	r3, [r7, #8]
            off = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800a556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a55a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800a55c:	2300      	movs	r3, #0
 800a55e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800a568:	4b51      	ldr	r3, [pc, #324]	; (800a6b0 <lfs_dir_traverse+0x610>)
 800a56a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800a56e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a572:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 800a576:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800a57a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 800a57e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800a582:	3301      	adds	r3, #1
 800a584:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 800a588:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 800a58c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	b29a      	uxth	r2, r3
 800a594:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800a598:	4413      	add	r3, r2
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 800a5a0:	e588      	b.n	800a0b4 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800a5a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7ff f815 	bl	80095d4 <lfs_tag_type3>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800a5b0:	d159      	bne.n	800a666 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5b8:	e04b      	b.n	800a652 <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 800a5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a5c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	4413      	add	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5d4:	4413      	add	r3, r2
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a5dc:	051c      	lsls	r4, r3, #20
 800a5de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff f821 	bl	8009628 <lfs_tag_id>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800a5ee:	4413      	add	r3, r2
 800a5f0:	029b      	lsls	r3, r3, #10
 800a5f2:	ea44 0103 	orr.w	r1, r4, r3
 800a5f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	461a      	mov	r2, r3
 800a604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a608:	4413      	add	r3, r2
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800a60e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a612:	4613      	mov	r3, r2
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	4413      	add	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	461a      	mov	r2, r3
 800a61c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a620:	4413      	add	r3, r2
 800a622:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a624:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a628:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a62c:	4798      	blx	r3
 800a62e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 800a632:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a636:	2b00      	cmp	r3, #0
 800a638:	da02      	bge.n	800a640 <lfs_dir_traverse+0x5a0>
                    return res;
 800a63a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a63e:	e10b      	b.n	800a858 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 800a640:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a644:	2b00      	cmp	r3, #0
 800a646:	d12e      	bne.n	800a6a6 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a64c:	3301      	adds	r3, #1
 800a64e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe fff7 	bl	8009648 <lfs_tag_size>
 800a65a:	4602      	mov	r2, r0
 800a65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a660:	4293      	cmp	r3, r2
 800a662:	d3aa      	bcc.n	800a5ba <lfs_dir_traverse+0x51a>
 800a664:	e526      	b.n	800a0b4 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800a666:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 800a66a:	029a      	lsls	r2, r3, #10
 800a66c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a66e:	18d1      	adds	r1, r2, r3
 800a670:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a674:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a678:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a67c:	4798      	blx	r3
 800a67e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 800a682:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a686:	2b00      	cmp	r3, #0
 800a688:	da02      	bge.n	800a690 <lfs_dir_traverse+0x5f0>
                return res;
 800a68a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a68e:	e0e3      	b.n	800a858 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 800a690:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10d      	bne.n	800a6b4 <lfs_dir_traverse+0x614>
 800a698:	e50c      	b.n	800a0b4 <lfs_dir_traverse+0x14>
                continue;
 800a69a:	bf00      	nop
 800a69c:	e50a      	b.n	800a0b4 <lfs_dir_traverse+0x14>
            continue;
 800a69e:	bf00      	nop
 800a6a0:	e508      	b.n	800a0b4 <lfs_dir_traverse+0x14>
                continue;
 800a6a2:	bf00      	nop
 800a6a4:	e506      	b.n	800a0b4 <lfs_dir_traverse+0x14>
                    break;
 800a6a6:	bf00      	nop
        {
 800a6a8:	e504      	b.n	800a0b4 <lfs_dir_traverse+0x14>
 800a6aa:	bf00      	nop
 800a6ac:	08009fe9 	.word	0x08009fe9
 800a6b0:	600ffc00 	.word	0x600ffc00
                break;
 800a6b4:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800a6b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 80ca 	beq.w	800a854 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800a6c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6c4:	1e5a      	subs	r2, r3, #1
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	011b      	lsls	r3, r3, #4
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	33f0      	adds	r3, #240	; 0xf0
 800a6d0:	443b      	add	r3, r7
 800a6d2:	3b98      	subs	r3, #152	; 0x98
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800a6d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6dc:	1e5a      	subs	r2, r3, #1
 800a6de:	4613      	mov	r3, r2
 800a6e0:	011b      	lsls	r3, r3, #4
 800a6e2:	1a9b      	subs	r3, r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	33f0      	adds	r3, #240	; 0xf0
 800a6e8:	443b      	add	r3, r7
 800a6ea:	3b94      	subs	r3, #148	; 0x94
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800a6f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6f4:	1e5a      	subs	r2, r3, #1
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	33f0      	adds	r3, #240	; 0xf0
 800a700:	443b      	add	r3, r7
 800a702:	3b90      	subs	r3, #144	; 0x90
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800a708:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a70c:	1e5a      	subs	r2, r3, #1
 800a70e:	4613      	mov	r3, r2
 800a710:	011b      	lsls	r3, r3, #4
 800a712:	1a9b      	subs	r3, r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	33f0      	adds	r3, #240	; 0xf0
 800a718:	443b      	add	r3, r7
 800a71a:	3b8c      	subs	r3, #140	; 0x8c
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 800a722:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a726:	1e5a      	subs	r2, r3, #1
 800a728:	4613      	mov	r3, r2
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	1a9b      	subs	r3, r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	33f0      	adds	r3, #240	; 0xf0
 800a732:	443b      	add	r3, r7
 800a734:	3b88      	subs	r3, #136	; 0x88
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 800a73c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a740:	1e5a      	subs	r2, r3, #1
 800a742:	4613      	mov	r3, r2
 800a744:	011b      	lsls	r3, r3, #4
 800a746:	1a9b      	subs	r3, r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	33f0      	adds	r3, #240	; 0xf0
 800a74c:	443b      	add	r3, r7
 800a74e:	3b84      	subs	r3, #132	; 0x84
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 800a756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a75a:	1e5a      	subs	r2, r3, #1
 800a75c:	4613      	mov	r3, r2
 800a75e:	011b      	lsls	r3, r3, #4
 800a760:	1a9b      	subs	r3, r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	33f0      	adds	r3, #240	; 0xf0
 800a766:	443b      	add	r3, r7
 800a768:	3b80      	subs	r3, #128	; 0x80
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 800a770:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a774:	1e5a      	subs	r2, r3, #1
 800a776:	4613      	mov	r3, r2
 800a778:	011b      	lsls	r3, r3, #4
 800a77a:	1a9b      	subs	r3, r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	33f0      	adds	r3, #240	; 0xf0
 800a780:	443b      	add	r3, r7
 800a782:	3b7c      	subs	r3, #124	; 0x7c
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 800a78a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a78e:	1e5a      	subs	r2, r3, #1
 800a790:	4613      	mov	r3, r2
 800a792:	011b      	lsls	r3, r3, #4
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	33f0      	adds	r3, #240	; 0xf0
 800a79a:	443b      	add	r3, r7
 800a79c:	3b7a      	subs	r3, #122	; 0x7a
 800a79e:	881b      	ldrh	r3, [r3, #0]
 800a7a0:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 800a7a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7a8:	1e5a      	subs	r2, r3, #1
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	011b      	lsls	r3, r3, #4
 800a7ae:	1a9b      	subs	r3, r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	33f0      	adds	r3, #240	; 0xf0
 800a7b4:	443b      	add	r3, r7
 800a7b6:	3b78      	subs	r3, #120	; 0x78
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 800a7be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7c2:	1e5a      	subs	r2, r3, #1
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	1a9b      	subs	r3, r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	33f0      	adds	r3, #240	; 0xf0
 800a7ce:	443b      	add	r3, r7
 800a7d0:	3b74      	subs	r3, #116	; 0x74
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 800a7d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7dc:	1e5a      	subs	r2, r3, #1
 800a7de:	4613      	mov	r3, r2
 800a7e0:	011b      	lsls	r3, r3, #4
 800a7e2:	1a9b      	subs	r3, r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	33f0      	adds	r3, #240	; 0xf0
 800a7e8:	443b      	add	r3, r7
 800a7ea:	3b70      	subs	r3, #112	; 0x70
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 800a7f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a7f6:	1e5a      	subs	r2, r3, #1
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	011b      	lsls	r3, r3, #4
 800a7fc:	1a9b      	subs	r3, r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	33f0      	adds	r3, #240	; 0xf0
 800a802:	443b      	add	r3, r7
 800a804:	3b6c      	subs	r3, #108	; 0x6c
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 800a80a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a80e:	1e5a      	subs	r2, r3, #1
 800a810:	4613      	mov	r3, r2
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	1a9b      	subs	r3, r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	33f0      	adds	r3, #240	; 0xf0
 800a81a:	443b      	add	r3, r7
 800a81c:	3b68      	subs	r3, #104	; 0x68
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 800a824:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a828:	1e5a      	subs	r2, r3, #1
 800a82a:	4613      	mov	r3, r2
 800a82c:	011b      	lsls	r3, r3, #4
 800a82e:	1a9b      	subs	r3, r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	33f0      	adds	r3, #240	; 0xf0
 800a834:	443b      	add	r3, r7
 800a836:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 800a83a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a83e:	3204      	adds	r2, #4
 800a840:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a844:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800a848:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a84c:	3b01      	subs	r3, #1
 800a84e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 800a852:	e596      	b.n	800a382 <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 800a854:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 800a858:	4618      	mov	r0, r3
 800a85a:	37f4      	adds	r7, #244	; 0xf4
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd90      	pop	{r4, r7, pc}

0800a860 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a860:	b590      	push	{r4, r7, lr}
 800a862:	b09f      	sub	sp, #124	; 0x7c
 800a864:	af04      	add	r7, sp, #16
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
 800a86c:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800a86e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a872:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d207      	bcs.n	800a892 <lfs_dir_fetchmatch+0x32>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3304      	adds	r3, #4
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d302      	bcc.n	800a898 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800a892:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a896:	e342      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800a898:	2300      	movs	r3, #0
 800a89a:	633b      	str	r3, [r7, #48]	; 0x30
 800a89c:	2300      	movs	r3, #0
 800a89e:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8a8:	e052      	b.n	800a950 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800a8aa:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a8ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800a8b4:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a8b6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a8ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8bc:	0092      	lsls	r2, r2, #2
 800a8be:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800a8c0:	2104      	movs	r1, #4
 800a8c2:	9103      	str	r1, [sp, #12]
 800a8c4:	9202      	str	r2, [sp, #8]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	9201      	str	r2, [sp, #4]
 800a8ca:	9300      	str	r3, [sp, #0]
 800a8cc:	2304      	movs	r3, #4
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7fe fa6e 	bl	8008db4 <lfs_bd_read>
 800a8d8:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800a8da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	3368      	adds	r3, #104	; 0x68
 800a8e0:	443b      	add	r3, r7
 800a8e2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe f9f8 	bl	8008cdc <lfs_fromle32>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	3368      	adds	r3, #104	; 0x68
 800a8f4:	443b      	add	r3, r7
 800a8f6:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d005      	beq.n	800a90c <lfs_dir_fetchmatch+0xac>
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a906:	d001      	beq.n	800a90c <lfs_dir_fetchmatch+0xac>
            return err;
 800a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90a:	e308      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 800a90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a912:	d01a      	beq.n	800a94a <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800a914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	3368      	adds	r3, #104	; 0x68
 800a91a:	443b      	add	r3, r7
 800a91c:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800a920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a922:	3301      	adds	r3, #1
 800a924:	2b00      	cmp	r3, #0
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	bfb8      	it	lt
 800a92c:	425b      	neglt	r3, r3
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	3368      	adds	r3, #104	; 0x68
 800a932:	443b      	add	r3, r7
 800a934:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a938:	4619      	mov	r1, r3
 800a93a:	4610      	mov	r0, r2
 800a93c:	f7fe f9c0 	bl	8008cc0 <lfs_scmp>
 800a940:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800a942:	2b00      	cmp	r3, #0
 800a944:	dd01      	ble.n	800a94a <lfs_dir_fetchmatch+0xea>
            r = i;
 800a946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a948:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800a94a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a94c:	3301      	adds	r3, #1
 800a94e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a952:	2b01      	cmp	r3, #1
 800a954:	dda9      	ble.n	800a8aa <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800a956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	bfb8      	it	lt
 800a960:	425b      	neglt	r3, r3
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	4413      	add	r3, r2
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800a96e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a970:	3301      	adds	r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	bfb8      	it	lt
 800a97a:	425b      	neglt	r3, r3
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	4413      	add	r3, r2
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800a988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	bfb8      	it	lt
 800a992:	425b      	neglt	r3, r3
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	3368      	adds	r3, #104	; 0x68
 800a998:	443b      	add	r3, r7
 800a99a:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9ac:	e2a3      	b.n	800aef6 <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800a9b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9b6:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800a9be:	4a96      	ldr	r2, [pc, #600]	; (800ac18 <lfs_dir_fetchmatch+0x3b8>)
 800a9c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9c8:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800a9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d4:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe f989 	bl	8008cf2 <lfs_tole32>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	2204      	movs	r2, #4
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9f2:	f004 fce5 	bl	800f3c0 <lfs_crc>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe f96c 	bl	8008cdc <lfs_fromle32>
 800aa04:	4602      	mov	r2, r0
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800aa0a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800aa0c:	f7fe fe29 	bl	8009662 <lfs_tag_dsize>
 800aa10:	4602      	mov	r2, r0
 800aa12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa14:	4413      	add	r3, r2
 800aa16:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800aa18:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa1e:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2204      	movs	r2, #4
 800aa26:	9203      	str	r2, [sp, #12]
 800aa28:	f107 0220 	add.w	r2, r7, #32
 800aa2c:	9202      	str	r2, [sp, #8]
 800aa2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa30:	9201      	str	r2, [sp, #4]
 800aa32:	9300      	str	r3, [sp, #0]
 800aa34:	4603      	mov	r3, r0
 800aa36:	460a      	mov	r2, r1
 800aa38:	2100      	movs	r1, #0
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7fe f9ba 	bl	8008db4 <lfs_bd_read>
 800aa40:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800aa42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d009      	beq.n	800aa5c <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800aa48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa4a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800aa4e:	d103      	bne.n	800aa58 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	2200      	movs	r2, #0
 800aa54:	759a      	strb	r2, [r3, #22]
                    break;
 800aa56:	e1d6      	b.n	800ae06 <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 800aa58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa5a:	e260      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	f107 0120 	add.w	r1, r7, #32
 800aa62:	2204      	movs	r2, #4
 800aa64:	4618      	mov	r0, r3
 800aa66:	f004 fcab 	bl	800f3c0 <lfs_crc>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe f94a 	bl	8008d0a <lfs_frombe32>
 800aa76:	4602      	mov	r2, r0
 800aa78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa7a:	4053      	eors	r3, r2
 800aa7c:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe fd76 	bl	8009572 <lfs_tag_isvalid>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f083 0301 	eor.w	r3, r3, #1
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d01b      	beq.n	800aaca <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800aa92:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800aa94:	f7fe fd8e 	bl	80095b4 <lfs_tag_type1>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800aa9e:	d10d      	bne.n	800aabc <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800aaa8:	6992      	ldr	r2, [r2, #24]
 800aaaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800aaae:	fb01 f202 	mul.w	r2, r1, r2
 800aab2:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d101      	bne.n	800aabc <lfs_dir_fetchmatch+0x25c>
 800aab8:	2301      	movs	r3, #1
 800aaba:	e000      	b.n	800aabe <lfs_dir_fetchmatch+0x25e>
 800aabc:	2300      	movs	r3, #0
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	759a      	strb	r2, [r3, #22]
                break;
 800aac8:	e19d      	b.n	800ae06 <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe fdc8 	bl	8009662 <lfs_tag_dsize>
 800aad2:	4602      	mov	r2, r0
 800aad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aad6:	441a      	add	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d903      	bls.n	800aaea <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2200      	movs	r2, #0
 800aae6:	759a      	strb	r2, [r3, #22]
                break;
 800aae8:	e18d      	b.n	800ae06 <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fe fd5f 	bl	80095b4 <lfs_tag_type1>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800aafc:	d164      	bne.n	800abc8 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800aafe:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab04:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab0c:	3204      	adds	r2, #4
 800ab0e:	2104      	movs	r1, #4
 800ab10:	9103      	str	r1, [sp, #12]
 800ab12:	f107 011c 	add.w	r1, r7, #28
 800ab16:	9102      	str	r1, [sp, #8]
 800ab18:	9201      	str	r2, [sp, #4]
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	4623      	mov	r3, r4
 800ab1e:	4602      	mov	r2, r0
 800ab20:	2100      	movs	r1, #0
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7fe f946 	bl	8008db4 <lfs_bd_read>
 800ab28:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800ab2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d009      	beq.n	800ab44 <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800ab30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab32:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ab36:	d103      	bne.n	800ab40 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	759a      	strb	r2, [r3, #22]
                        break;
 800ab3e:	e162      	b.n	800ae06 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 800ab40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800ab42:	e1ec      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe f8c8 	bl	8008cdc <lfs_fromle32>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800ab50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d003      	beq.n	800ab60 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	759a      	strb	r2, [r3, #22]
                    break;
 800ab5e:	e152      	b.n	800ae06 <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fd46 	bl	80095f4 <lfs_tag_chunk>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	07db      	lsls	r3, r3, #31
 800ab6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab6e:	4053      	eors	r3, r2
 800ab70:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab76:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f004 fc1f 	bl	800f3c0 <lfs_crc>
 800ab82:	4602      	mov	r2, r0
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800ab88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab8a:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fd67 	bl	8009662 <lfs_tag_dsize>
 800ab94:	4602      	mov	r2, r0
 800ab96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab98:	441a      	add	r2, r3
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aba2:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800abaa:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800abac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800abb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800abbe:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800abc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abc4:	627b      	str	r3, [r7, #36]	; 0x24
 800abc6:	e720      	b.n	800aa0a <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800abc8:	2304      	movs	r3, #4
 800abca:	647b      	str	r3, [r7, #68]	; 0x44
 800abcc:	e032      	b.n	800ac34 <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800abce:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abd4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abde:	440a      	add	r2, r1
 800abe0:	2101      	movs	r1, #1
 800abe2:	9103      	str	r1, [sp, #12]
 800abe4:	f107 011b 	add.w	r1, r7, #27
 800abe8:	9102      	str	r1, [sp, #8]
 800abea:	9201      	str	r2, [sp, #4]
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	4623      	mov	r3, r4
 800abf0:	4602      	mov	r2, r0
 800abf2:	2100      	movs	r1, #0
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7fe f8dd 	bl	8008db4 <lfs_bd_read>
 800abfa:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800abfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00c      	beq.n	800ac1c <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800ac02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac04:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ac08:	d103      	bne.n	800ac12 <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	759a      	strb	r2, [r3, #22]
 800ac10:	e018      	b.n	800ac44 <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800ac12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800ac14:	e183      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
 800ac16:	bf00      	nop
 800ac18:	0801e190 	.word	0x0801e190
                }

                crc = lfs_crc(crc, &dat, 1);
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	f107 011b 	add.w	r1, r7, #27
 800ac22:	2201      	movs	r2, #1
 800ac24:	4618      	mov	r0, r3
 800ac26:	f004 fbcb 	bl	800f3c0 <lfs_crc>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800ac2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac30:	3301      	adds	r3, #1
 800ac32:	647b      	str	r3, [r7, #68]	; 0x44
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fd13 	bl	8009662 <lfs_tag_dsize>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d3c4      	bcc.n	800abce <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fe fcb4 	bl	80095b4 <lfs_tag_type1>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d113      	bne.n	800ac7a <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fe fce7 	bl	8009628 <lfs_tag_id>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac62:	4293      	cmp	r3, r2
 800ac64:	f200 8083 	bhi.w	800ad6e <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe fcdc 	bl	8009628 <lfs_tag_id>
 800ac70:	4603      	mov	r3, r0
 800ac72:	3301      	adds	r3, #1
 800ac74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ac78:	e079      	b.n	800ad6e <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe fc99 	bl	80095b4 <lfs_tag_type1>
 800ac82:	4603      	mov	r3, r0
 800ac84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac88:	d134      	bne.n	800acf4 <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fe fcbe 	bl	800960e <lfs_tag_splice>
 800ac92:	4603      	mov	r3, r0
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800aca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aca2:	4ba1      	ldr	r3, [pc, #644]	; (800af28 <lfs_dir_fetchmatch+0x6c8>)
 800aca4:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800aca6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800acaa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800acae:	6a3a      	ldr	r2, [r7, #32]
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d104      	bne.n	800acbe <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800acb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acba:	64bb      	str	r3, [r7, #72]	; 0x48
 800acbc:	e057      	b.n	800ad6e <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 800acbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc4:	d053      	beq.n	800ad6e <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	4618      	mov	r0, r3
 800acca:	f7fe fcad 	bl	8009628 <lfs_tag_id>
 800acce:	4603      	mov	r3, r0
 800acd0:	461c      	mov	r4, r3
 800acd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fe fca7 	bl	8009628 <lfs_tag_id>
 800acda:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800acdc:	429c      	cmp	r4, r3
 800acde:	d846      	bhi.n	800ad6e <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fc93 	bl	800960e <lfs_tag_splice>
 800ace8:	4603      	mov	r3, r0
 800acea:	029a      	lsls	r2, r3, #10
 800acec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acee:	4413      	add	r3, r2
 800acf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800acf2:	e03c      	b.n	800ad6e <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fe fc5c 	bl	80095b4 <lfs_tag_type1>
 800acfc:	4603      	mov	r3, r0
 800acfe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ad02:	d134      	bne.n	800ad6e <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fc74 	bl	80095f4 <lfs_tag_chunk>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	bf14      	ite	ne
 800ad16:	2301      	movne	r3, #1
 800ad18:	2300      	moveq	r3, #0
 800ad1a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800ad1e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad24:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad2c:	3204      	adds	r2, #4
 800ad2e:	2108      	movs	r1, #8
 800ad30:	9103      	str	r1, [sp, #12]
 800ad32:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ad36:	9102      	str	r1, [sp, #8]
 800ad38:	9201      	str	r2, [sp, #4]
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	4623      	mov	r3, r4
 800ad3e:	4602      	mov	r2, r0
 800ad40:	2100      	movs	r1, #0
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7fe f836 	bl	8008db4 <lfs_bd_read>
 800ad48:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800ad4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d009      	beq.n	800ad64 <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 800ad50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad52:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ad56:	d103      	bne.n	800ad60 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	759a      	strb	r2, [r3, #22]
                        break;
 800ad5e:	e052      	b.n	800ae06 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 800ad60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad62:	e0dc      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 800ad64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe fbce 	bl	800950a <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800ad6e:	6a3a      	ldr	r2, [r7, #32]
 800ad70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad72:	405a      	eors	r2, r3
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	4013      	ands	r3, r2
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f47f ae46 	bne.w	800aa0a <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800ad7e:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800ad84:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800ad86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad88:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800ad8a:	617b      	str	r3, [r7, #20]
 800ad8c:	f107 0210 	add.w	r2, r7, #16
 800ad90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad94:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ad98:	4798      	blx	r3
 800ad9a:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	da09      	bge.n	800adb6 <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 800ada2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ada4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ada8:	d103      	bne.n	800adb2 <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	2200      	movs	r2, #0
 800adae:	759a      	strb	r2, [r3, #22]
 800adb0:	e029      	b.n	800ae06 <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 800adb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800adb4:	e0b3      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 800adb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d102      	bne.n	800adc2 <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	64bb      	str	r3, [r7, #72]	; 0x48
 800adc0:	e623      	b.n	800aa0a <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800adc2:	6a3a      	ldr	r2, [r7, #32]
 800adc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adc6:	405a      	eors	r2, r3
 800adc8:	4b58      	ldr	r3, [pc, #352]	; (800af2c <lfs_dir_fetchmatch+0x6cc>)
 800adca:	4013      	ands	r3, r2
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d103      	bne.n	800add8 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800add0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800add4:	64bb      	str	r3, [r7, #72]	; 0x48
 800add6:	e618      	b.n	800aa0a <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 800add8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adda:	2b02      	cmp	r3, #2
 800addc:	f47f ae15 	bne.w	800aa0a <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fc20 	bl	8009628 <lfs_tag_id>
 800ade8:	4603      	mov	r3, r0
 800adea:	461c      	mov	r4, r3
 800adec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe fc1a 	bl	8009628 <lfs_tag_id>
 800adf4:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800adf6:	429c      	cmp	r4, r3
 800adf8:	f63f ae07 	bhi.w	800aa0a <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae02:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae04:	e601      	b.n	800aa0a <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d100      	bne.n	800ae10 <lfs_dir_fetchmatch+0x5b0>
 800ae0e:	e05d      	b.n	800aecc <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	333c      	adds	r3, #60	; 0x3c
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	4611      	mov	r1, r2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fe fcad 	bl	8009778 <lfs_gstate_hasmovehere>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d028      	beq.n	800ae76 <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe fbfd 	bl	8009628 <lfs_tag_id>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	461c      	mov	r4, r3
 800ae32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fe fbf7 	bl	8009628 <lfs_tag_id>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	d104      	bne.n	800ae4a <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 800ae40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae46:	667b      	str	r3, [r7, #100]	; 0x64
 800ae48:	e015      	b.n	800ae76 <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 800ae4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae50:	d011      	beq.n	800ae76 <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fe fbe6 	bl	8009628 <lfs_tag_id>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	461c      	mov	r4, r3
 800ae60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fe fbe0 	bl	8009628 <lfs_tag_id>
 800ae68:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800ae6a:	429c      	cmp	r4, r3
 800ae6c:	d203      	bcs.n	800ae76 <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800ae6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae70:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ae74:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800ae76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00f      	beq.n	800ae9c <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800ae7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fbd2 	bl	8009628 <lfs_tag_id>
 800ae84:	4603      	mov	r3, r0
 800ae86:	461a      	mov	r2, r3
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	8a9b      	ldrh	r3, [r3, #20]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4610      	mov	r0, r2
 800ae90:	f7fd feb4 	bl	8008bfc <lfs_min>
 800ae94:	4603      	mov	r3, r0
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae9a:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 800ae9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe fb67 	bl	8009572 <lfs_tag_isvalid>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <lfs_dir_fetchmatch+0x64e>
                return besttag;
 800aeaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeac:	e037      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 800aeae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fe fbb9 	bl	8009628 <lfs_tag_id>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	461a      	mov	r2, r3
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	8a9b      	ldrh	r3, [r3, #20]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d202      	bcs.n	800aec8 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 800aec2:	f06f 0301 	mvn.w	r3, #1
 800aec6:	e02a      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	e028      	b.n	800af1e <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fe fa94 	bl	80093fc <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800aed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aed6:	3301      	adds	r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f003 0301 	and.w	r3, r3, #1
 800aede:	bfb8      	it	lt
 800aee0:	425b      	neglt	r3, r3
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	3368      	adds	r3, #104	; 0x68
 800aee6:	443b      	add	r3, r7
 800aee8:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800aef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aef2:	3301      	adds	r3, #1
 800aef4:	65bb      	str	r3, [r7, #88]	; 0x58
 800aef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	f77f ad58 	ble.w	800a9ae <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	490a      	ldr	r1, [pc, #40]	; (800af30 <lfs_dir_fetchmatch+0x6d0>)
 800af08:	9101      	str	r1, [sp, #4]
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	4613      	mov	r3, r2
 800af0e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800af12:	4908      	ldr	r1, [pc, #32]	; (800af34 <lfs_dir_fetchmatch+0x6d4>)
 800af14:	4808      	ldr	r0, [pc, #32]	; (800af38 <lfs_dir_fetchmatch+0x6d8>)
 800af16:	f011 fafd 	bl	801c514 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800af1a:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800af1e:	4618      	mov	r0, r3
 800af20:	376c      	adds	r7, #108	; 0x6c
 800af22:	46bd      	mov	sp, r7
 800af24:	bd90      	pop	{r4, r7, pc}
 800af26:	bf00      	nop
 800af28:	000ffc00 	.word	0x000ffc00
 800af2c:	7ffffc00 	.word	0x7ffffc00
 800af30:	0801e14c 	.word	0x0801e14c
 800af34:	0801e040 	.word	0x0801e040
 800af38:	0801e158 	.word	0x0801e158

0800af3c <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b088      	sub	sp, #32
 800af40:	af04      	add	r7, sp, #16
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800af48:	2300      	movs	r3, #0
 800af4a:	9303      	str	r3, [sp, #12]
 800af4c:	2300      	movs	r3, #0
 800af4e:	9302      	str	r3, [sp, #8]
 800af50:	2300      	movs	r3, #0
 800af52:	9301      	str	r3, [sp, #4]
 800af54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	68b9      	ldr	r1, [r7, #8]
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f7ff fc7c 	bl	800a860 <lfs_dir_fetchmatch>
 800af68:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
	...

0800af74 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800af74:	b580      	push	{r7, lr}
 800af76:	b08a      	sub	sp, #40	; 0x28
 800af78:	af02      	add	r7, sp, #8
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800af80:	f107 0310 	add.w	r3, r7, #16
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	4b12      	ldr	r3, [pc, #72]	; (800afd0 <lfs_dir_getgstate+0x5c>)
 800af88:	4a12      	ldr	r2, [pc, #72]	; (800afd4 <lfs_dir_getgstate+0x60>)
 800af8a:	68b9      	ldr	r1, [r7, #8]
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f7fe ff35 	bl	8009dfc <lfs_dir_get>
 800af92:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	2b00      	cmp	r3, #0
 800af98:	da05      	bge.n	800afa6 <lfs_dir_getgstate+0x32>
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	f113 0f02 	cmn.w	r3, #2
 800afa0:	d001      	beq.n	800afa6 <lfs_dir_getgstate+0x32>
        return res;
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	e00f      	b.n	800afc6 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	f113 0f02 	cmn.w	r3, #2
 800afac:	d00a      	beq.n	800afc4 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800afae:	f107 0310 	add.w	r3, r7, #16
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fe fc00 	bl	80097b8 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800afb8:	f107 0310 	add.w	r3, r7, #16
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fe fb63 	bl	800968a <lfs_gstate_xor>
    }

    return 0;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3720      	adds	r7, #32
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	7ff0000c 	.word	0x7ff0000c
 800afd4:	7ff00000 	.word	0x7ff00000

0800afd8 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08a      	sub	sp, #40	; 0x28
 800afdc:	af02      	add	r7, sp, #8
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	4613      	mov	r3, r2
 800afe6:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800afe8:	88fb      	ldrh	r3, [r7, #6]
 800afea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800afee:	4293      	cmp	r3, r2
 800aff0:	d10b      	bne.n	800b00a <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	3308      	adds	r3, #8
 800aff6:	4932      	ldr	r1, [pc, #200]	; (800b0c0 <lfs_dir_getinfo+0xe8>)
 800aff8:	461a      	mov	r2, r3
 800affa:	460b      	mov	r3, r1
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2202      	movs	r2, #2
 800b004:	701a      	strb	r2, [r3, #0]
        return 0;
 800b006:	2300      	movs	r3, #0
 800b008:	e055      	b.n	800b0b6 <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	029a      	lsls	r2, r3, #10
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b012:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800b014:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	4613      	mov	r3, r2
 800b01e:	4a29      	ldr	r2, [pc, #164]	; (800b0c4 <lfs_dir_getinfo+0xec>)
 800b020:	68b9      	ldr	r1, [r7, #8]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f7fe feea 	bl	8009dfc <lfs_dir_get>
 800b028:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	da01      	bge.n	800b034 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	e040      	b.n	800b0b6 <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	4618      	mov	r0, r3
 800b038:	f7fe facc 	bl	80095d4 <lfs_tag_type3>
 800b03c:	4603      	mov	r3, r0
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800b044:	88fb      	ldrh	r3, [r7, #6]
 800b046:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b048:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b04c:	f043 0308 	orr.w	r3, r3, #8
 800b050:	f107 0214 	add.w	r2, r7, #20
 800b054:	9200      	str	r2, [sp, #0]
 800b056:	4a1c      	ldr	r2, [pc, #112]	; (800b0c8 <lfs_dir_getinfo+0xf0>)
 800b058:	68b9      	ldr	r1, [r7, #8]
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f7fe fece 	bl	8009dfc <lfs_dir_get>
 800b060:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	2b00      	cmp	r3, #0
 800b066:	da01      	bge.n	800b06c <lfs_dir_getinfo+0x94>
        return (int)tag;
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	e024      	b.n	800b0b6 <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800b06c:	f107 0314 	add.w	r3, r7, #20
 800b070:	4618      	mov	r0, r3
 800b072:	f7fe fbe1 	bl	8009838 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fe faab 	bl	80095d4 <lfs_tag_type3>
 800b07e:	4603      	mov	r3, r0
 800b080:	461a      	mov	r2, r3
 800b082:	f240 2302 	movw	r3, #514	; 0x202
 800b086:	429a      	cmp	r2, r3
 800b088:	d103      	bne.n	800b092 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	605a      	str	r2, [r3, #4]
 800b090:	e010      	b.n	800b0b4 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	4618      	mov	r0, r3
 800b096:	f7fe fa9d 	bl	80095d4 <lfs_tag_type3>
 800b09a:	4603      	mov	r3, r0
 800b09c:	461a      	mov	r2, r3
 800b09e:	f240 2301 	movw	r3, #513	; 0x201
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d106      	bne.n	800b0b4 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fe facd 	bl	8009648 <lfs_tag_size>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	605a      	str	r2, [r3, #4]
    }

    return 0;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3720      	adds	r7, #32
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	0801e198 	.word	0x0801e198
 800b0c4:	780ffc00 	.word	0x780ffc00
 800b0c8:	700ffc00 	.word	0x700ffc00

0800b0cc <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800b0cc:	b590      	push	{r4, r7, lr}
 800b0ce:	b08f      	sub	sp, #60	; 0x3c
 800b0d0:	af04      	add	r7, sp, #16
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	689c      	ldr	r4, [r3, #8]
 800b0ea:	68b8      	ldr	r0, [r7, #8]
 800b0ec:	f7fe faac 	bl	8009648 <lfs_tag_size>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f7fd fd81 	bl	8008bfc <lfs_min>
 800b0fa:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800b0fc:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	69fa      	ldr	r2, [r7, #28]
 800b104:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800b106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b108:	6849      	ldr	r1, [r1, #4]
 800b10a:	69b8      	ldr	r0, [r7, #24]
 800b10c:	9003      	str	r0, [sp, #12]
 800b10e:	9102      	str	r1, [sp, #8]
 800b110:	9201      	str	r2, [sp, #4]
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	4622      	mov	r2, r4
 800b118:	2100      	movs	r1, #0
 800b11a:	6a38      	ldr	r0, [r7, #32]
 800b11c:	f7fd ff8e 	bl	800903c <lfs_bd_cmp>
 800b120:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <lfs_dir_find_match+0x60>
        return res;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	e014      	b.n	800b156 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	689c      	ldr	r4, [r3, #8]
 800b130:	68b8      	ldr	r0, [r7, #8]
 800b132:	f7fe fa89 	bl	8009648 <lfs_tag_size>
 800b136:	4603      	mov	r3, r0
 800b138:	429c      	cmp	r4, r3
 800b13a:	d00b      	beq.n	800b154 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	689c      	ldr	r4, [r3, #8]
 800b140:	68b8      	ldr	r0, [r7, #8]
 800b142:	f7fe fa81 	bl	8009648 <lfs_tag_size>
 800b146:	4603      	mov	r3, r0
 800b148:	429c      	cmp	r4, r3
 800b14a:	d201      	bcs.n	800b150 <lfs_dir_find_match+0x84>
 800b14c:	2301      	movs	r3, #1
 800b14e:	e002      	b.n	800b156 <lfs_dir_find_match+0x8a>
 800b150:	2302      	movs	r3, #2
 800b152:	e000      	b.n	800b156 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	372c      	adds	r7, #44	; 0x2c
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd90      	pop	{r4, r7, pc}
	...

0800b160 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800b160:	b590      	push	{r4, r7, lr}
 800b162:	b093      	sub	sp, #76	; 0x4c
 800b164:	af04      	add	r7, sp, #16
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
 800b16c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800b180:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800b182:	4b6e      	ldr	r3, [pc, #440]	; (800b33c <lfs_dir_find+0x1dc>)
 800b184:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6a1a      	ldr	r2, [r3, #32]
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800b196:	496a      	ldr	r1, [pc, #424]	; (800b340 <lfs_dir_find+0x1e0>)
 800b198:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b19a:	f011 fb71 	bl	801c880 <strspn>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a2:	4413      	add	r3, r2
 800b1a4:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800b1a6:	4966      	ldr	r1, [pc, #408]	; (800b340 <lfs_dir_find+0x1e0>)
 800b1a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b1aa:	f011 fb58 	bl	801c85e <strcspn>
 800b1ae:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d105      	bne.n	800b1c2 <lfs_dir_find+0x62>
 800b1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b8:	781a      	ldrb	r2, [r3, #0]
 800b1ba:	4b62      	ldr	r3, [pc, #392]	; (800b344 <lfs_dir_find+0x1e4>)
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d00a      	beq.n	800b1d8 <lfs_dir_find+0x78>
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d10c      	bne.n	800b1e2 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	495f      	ldr	r1, [pc, #380]	; (800b348 <lfs_dir_find+0x1e8>)
 800b1cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b1ce:	f011 fb07 	bl	801c7e0 <memcmp>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d104      	bne.n	800b1e2 <lfs_dir_find+0x82>
            name += namelen;
 800b1d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	4413      	add	r3, r2
 800b1de:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800b1e0:	e7d9      	b.n	800b196 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800b1e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	4413      	add	r3, r2
 800b1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800b1ee:	4954      	ldr	r1, [pc, #336]	; (800b340 <lfs_dir_find+0x1e0>)
 800b1f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1f2:	f011 fb45 	bl	801c880 <strspn>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fa:	4413      	add	r3, r2
 800b1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800b1fe:	4950      	ldr	r1, [pc, #320]	; (800b340 <lfs_dir_find+0x1e0>)
 800b200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b202:	f011 fb2c 	bl	801c85e <strcspn>
 800b206:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d01d      	beq.n	800b24a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	2b02      	cmp	r3, #2
 800b212:	d112      	bne.n	800b23a <lfs_dir_find+0xda>
 800b214:	2202      	movs	r2, #2
 800b216:	494c      	ldr	r1, [pc, #304]	; (800b348 <lfs_dir_find+0x1e8>)
 800b218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b21a:	f011 fae1 	bl	801c7e0 <memcmp>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10a      	bne.n	800b23a <lfs_dir_find+0xda>
                depth -= 1;
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	3b01      	subs	r3, #1
 800b228:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d107      	bne.n	800b240 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800b230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	4413      	add	r3, r2
 800b236:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800b238:	e7ad      	b.n	800b196 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	3301      	adds	r3, #1
 800b23e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 800b240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	4413      	add	r3, r2
 800b246:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800b248:	e7d1      	b.n	800b1ee <lfs_dir_find+0x8e>
                break;
 800b24a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800b24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d101      	bne.n	800b258 <lfs_dir_find+0xf8>
            return tag;
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	e06c      	b.n	800b332 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b25c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	4618      	mov	r0, r3
 800b262:	f7fe f9b7 	bl	80095d4 <lfs_tag_type3>
 800b266:	4603      	mov	r3, r0
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d002      	beq.n	800b272 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800b26c:	f06f 0313 	mvn.w	r3, #19
 800b270:	e05f      	b.n	800b332 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800b272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b274:	4618      	mov	r0, r3
 800b276:	f7fe f9d7 	bl	8009628 <lfs_tag_id>
 800b27a:	4603      	mov	r3, r0
 800b27c:	461a      	mov	r2, r3
 800b27e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b282:	429a      	cmp	r2, r3
 800b284:	d01c      	beq.n	800b2c0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fe f9cd 	bl	8009628 <lfs_tag_id>
 800b28e:	4603      	mov	r3, r0
 800b290:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b296:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b29e:	9200      	str	r2, [sp, #0]
 800b2a0:	4a2a      	ldr	r2, [pc, #168]	; (800b34c <lfs_dir_find+0x1ec>)
 800b2a2:	68b9      	ldr	r1, [r7, #8]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f7fe fda9 	bl	8009dfc <lfs_dir_get>
 800b2aa:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	da01      	bge.n	800b2b6 <lfs_dir_find+0x156>
                return res;
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	e03d      	b.n	800b332 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	3318      	adds	r3, #24
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe f925 	bl	800950a <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800b2c6:	212f      	movs	r1, #47	; 0x2f
 800b2c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b2ca:	f011 fabb 	bl	801c844 <strchr>
 800b2ce:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <lfs_dir_find+0x178>
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	e000      	b.n	800b2da <lfs_dir_find+0x17a>
 800b2d8:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	613a      	str	r2, [r7, #16]
 800b2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2e0:	617a      	str	r2, [r7, #20]
 800b2e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2e4:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b2e6:	f107 0210 	add.w	r2, r7, #16
 800b2ea:	9203      	str	r2, [sp, #12]
 800b2ec:	4a18      	ldr	r2, [pc, #96]	; (800b350 <lfs_dir_find+0x1f0>)
 800b2ee:	9202      	str	r2, [sp, #8]
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800b2fa:	4622      	mov	r2, r4
 800b2fc:	68b9      	ldr	r1, [r7, #8]
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7ff faae 	bl	800a860 <lfs_dir_fetchmatch>
 800b304:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800b306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b308:	2b00      	cmp	r3, #0
 800b30a:	da01      	bge.n	800b310 <lfs_dir_find+0x1b0>
                return tag;
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	e010      	b.n	800b332 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	2b00      	cmp	r3, #0
 800b314:	d004      	beq.n	800b320 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800b316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	4413      	add	r3, r2
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800b31e:	e73a      	b.n	800b196 <lfs_dir_find+0x36>
            if (!dir->split) {
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	7ddb      	ldrb	r3, [r3, #23]
 800b324:	f083 0301 	eor.w	r3, r3, #1
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0c8      	beq.n	800b2c0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800b32e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800b332:	4618      	mov	r0, r3
 800b334:	373c      	adds	r7, #60	; 0x3c
 800b336:	46bd      	mov	sp, r7
 800b338:	bd90      	pop	{r4, r7, pc}
 800b33a:	bf00      	nop
 800b33c:	002ffc00 	.word	0x002ffc00
 800b340:	0801e198 	.word	0x0801e198
 800b344:	0801e19c 	.word	0x0801e19c
 800b348:	0801e1a0 	.word	0x0801e1a0
 800b34c:	700ffc00 	.word	0x700ffc00
 800b350:	0800b0cd 	.word	0x0800b0cd

0800b354 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800b354:	b590      	push	{r4, r7, lr}
 800b356:	b08b      	sub	sp, #44	; 0x2c
 800b358:	af04      	add	r7, sp, #16
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f103 0010 	add.w	r0, r3, #16
 800b368:	68fc      	ldr	r4, [r7, #12]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	6852      	ldr	r2, [r2, #4]
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	9103      	str	r1, [sp, #12]
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	9102      	str	r1, [sp, #8]
 800b37a:	9201      	str	r2, [sp, #4]
 800b37c:	9300      	str	r3, [sp, #0]
 800b37e:	2300      	movs	r3, #0
 800b380:	4622      	mov	r2, r4
 800b382:	4601      	mov	r1, r0
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f7fd ff5b 	bl	8009240 <lfs_bd_prog>
 800b38a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <lfs_dir_commitprog+0x42>
        return err;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	e010      	b.n	800b3b8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	6879      	ldr	r1, [r7, #4]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f004 f80e 	bl	800f3c0 <lfs_crc>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	685a      	ldr	r2, [r3, #4]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	441a      	add	r2, r3
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	605a      	str	r2, [r3, #4]
    return 0;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	371c      	adds	r7, #28
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd90      	pop	{r4, r7, pc}

0800b3c0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800b3c0:	b590      	push	{r4, r7, lr}
 800b3c2:	b08f      	sub	sp, #60	; 0x3c
 800b3c4:	af04      	add	r7, sp, #16
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
 800b3cc:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7fe f947 	bl	8009662 <lfs_tag_dsize>
 800b3d4:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	441a      	add	r2, r3
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d902      	bls.n	800b3ec <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800b3e6:	f06f 031b 	mvn.w	r3, #27
 800b3ea:	e065      	b.n	800b4b8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	4053      	eors	r3, r2
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fd fc92 	bl	8008d22 <lfs_tobe32>
 800b3fe:	4603      	mov	r3, r0
 800b400:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800b402:	f107 0214 	add.w	r2, r7, #20
 800b406:	2304      	movs	r3, #4
 800b408:	68b9      	ldr	r1, [r7, #8]
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff ffa2 	bl	800b354 <lfs_dir_commitprog>
 800b410:	61f8      	str	r0, [r7, #28]
    if (err) {
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <lfs_dir_commitattr+0x5c>
        return err;
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	e04d      	b.n	800b4b8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	db0c      	blt.n	800b43c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	3b04      	subs	r3, #4
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	68b9      	ldr	r1, [r7, #8]
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f7ff ff92 	bl	800b354 <lfs_dir_commitprog>
 800b430:	61f8      	str	r0, [r7, #28]
        if (err) {
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d039      	beq.n	800b4ac <lfs_dir_commitattr+0xec>
            return err;
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	e03d      	b.n	800b4b8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b440:	2300      	movs	r3, #0
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
 800b444:	e02d      	b.n	800b4a2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800b446:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800b448:	6a3a      	ldr	r2, [r7, #32]
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800b44e:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800b458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b45a:	440a      	add	r2, r1
 800b45c:	2101      	movs	r1, #1
 800b45e:	9103      	str	r1, [sp, #12]
 800b460:	f107 0113 	add.w	r1, r7, #19
 800b464:	9102      	str	r1, [sp, #8]
 800b466:	9201      	str	r2, [sp, #4]
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	4623      	mov	r3, r4
 800b46c:	4602      	mov	r2, r0
 800b46e:	2100      	movs	r1, #0
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f7fd fc9f 	bl	8008db4 <lfs_bd_read>
 800b476:	61f8      	str	r0, [r7, #28]
            if (err) {
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d001      	beq.n	800b482 <lfs_dir_commitattr+0xc2>
                return err;
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	e01a      	b.n	800b4b8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800b482:	f107 0213 	add.w	r2, r7, #19
 800b486:	2301      	movs	r3, #1
 800b488:	68b9      	ldr	r1, [r7, #8]
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f7ff ff62 	bl	800b354 <lfs_dir_commitprog>
 800b490:	61f8      	str	r0, [r7, #28]
            if (err) {
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d001      	beq.n	800b49c <lfs_dir_commitattr+0xdc>
                return err;
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	e00d      	b.n	800b4b8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	3301      	adds	r3, #1
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b4a2:	6a3b      	ldr	r3, [r7, #32]
 800b4a4:	3b04      	subs	r3, #4
 800b4a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d3cc      	bcc.n	800b446 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	609a      	str	r2, [r3, #8]
    return 0;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	372c      	adds	r7, #44	; 0x2c
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd90      	pop	{r4, r7, pc}

0800b4c0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800b4c0:	b590      	push	{r4, r7, lr}
 800b4c2:	b097      	sub	sp, #92	; 0x5c
 800b4c4:	af04      	add	r7, sp, #16
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4d6:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	f7fd fbb3 	bl	8008c46 <lfs_alignup>
 800b4e0:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800b4ea:	e0a6      	b.n	800b63a <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800b4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fd fb7c 	bl	8008bfc <lfs_min>
 800b504:	4602      	mov	r2, r0
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	4413      	add	r3, r2
 800b50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800b50c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	429a      	cmp	r2, r3
 800b512:	d206      	bcs.n	800b522 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800b514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b516:	3b08      	subs	r3, #8
 800b518:	4619      	mov	r1, r3
 800b51a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b51c:	f7fd fb6e 	bl	8008bfc <lfs_min>
 800b520:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800b522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b526:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800b528:	6879      	ldr	r1, [r7, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2204      	movs	r2, #4
 800b530:	9203      	str	r2, [sp, #12]
 800b532:	f107 0214 	add.w	r2, r7, #20
 800b536:	9202      	str	r2, [sp, #8]
 800b538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b53a:	9201      	str	r2, [sp, #4]
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	2304      	movs	r3, #4
 800b540:	460a      	mov	r2, r1
 800b542:	2100      	movs	r1, #0
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7fd fc35 	bl	8008db4 <lfs_bd_read>
 800b54a:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d005      	beq.n	800b55e <lfs_dir_commitcrc+0x9e>
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b558:	d001      	beq.n	800b55e <lfs_dir_commitcrc+0x9e>
            return err;
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	e0e8      	b.n	800b730 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	4618      	mov	r0, r3
 800b562:	f7fd fbd2 	bl	8008d0a <lfs_frombe32>
 800b566:	4603      	mov	r3, r0
 800b568:	43db      	mvns	r3, r3
 800b56a:	0fdb      	lsrs	r3, r3, #31
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	bf14      	ite	ne
 800b570:	2301      	movne	r3, #1
 800b572:	2300      	moveq	r3, #0
 800b574:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800b576:	7efb      	ldrb	r3, [r7, #27]
 800b578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b57c:	051a      	lsls	r2, r3, #20
 800b57e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b580:	6a3b      	ldr	r3, [r7, #32]
 800b582:	1acb      	subs	r3, r1, r3
 800b584:	4313      	orrs	r3, r2
 800b586:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800b58a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800b58e:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	689a      	ldr	r2, [r3, #8]
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	4053      	eors	r3, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f7fd fbc2 	bl	8008d22 <lfs_tobe32>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	f107 010c 	add.w	r1, r7, #12
 800b5aa:	2204      	movs	r2, #4
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f003 ff07 	bl	800f3c0 <lfs_crc>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fd fb98 	bl	8008cf2 <lfs_tole32>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f103 0010 	add.w	r0, r3, #16
 800b5cc:	687c      	ldr	r4, [r7, #4]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	6852      	ldr	r2, [r2, #4]
 800b5d6:	2108      	movs	r1, #8
 800b5d8:	9103      	str	r1, [sp, #12]
 800b5da:	f107 010c 	add.w	r1, r7, #12
 800b5de:	9102      	str	r1, [sp, #8]
 800b5e0:	9201      	str	r2, [sp, #4]
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	4601      	mov	r1, r0
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f7fd fe28 	bl	8009240 <lfs_bd_prog>
 800b5f0:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <lfs_dir_commitcrc+0x13c>
            return err;
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	e099      	b.n	800b730 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800b5fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d106      	bne.n	800b610 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	3304      	adds	r3, #4
 800b608:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe f818 	bl	8009648 <lfs_tag_size>
 800b618:	4603      	mov	r3, r0
 800b61a:	1d1a      	adds	r2, r3, #4
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	441a      	add	r2, r3
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800b626:	7efb      	ldrb	r3, [r7, #27]
 800b628:	07da      	lsls	r2, r3, #31
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	405a      	eors	r2, r3
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b638:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b640:	429a      	cmp	r2, r3
 800b642:	f63f af53 	bhi.w	800b4ec <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f103 0110 	add.w	r1, r3, #16
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	2300      	movs	r3, #0
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7fd fdc1 	bl	80091d8 <lfs_bd_sync>
 800b656:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <lfs_dir_commitcrc+0x1a2>
        return err;
 800b65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b660:	e066      	b.n	800b730 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800b668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66a:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800b66c:	e05b      	b.n	800b726 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800b66e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b672:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800b674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b676:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b678:	e030      	b.n	800b6dc <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800b67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b67c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b67e:	429a      	cmp	r2, r3
 800b680:	d106      	bne.n	800b690 <lfs_dir_commitcrc+0x1d0>
 800b682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b686:	429a      	cmp	r2, r3
 800b688:	d002      	beq.n	800b690 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800b68a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800b68e:	e04f      	b.n	800b730 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800b690:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800b692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800b698:	1d18      	adds	r0, r3, #4
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	9203      	str	r2, [sp, #12]
 800b6a2:	f107 020b 	add.w	r2, r7, #11
 800b6a6:	9202      	str	r2, [sp, #8]
 800b6a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6aa:	9201      	str	r2, [sp, #4]
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	460a      	mov	r2, r1
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7fd fb7d 	bl	8008db4 <lfs_bd_read>
 800b6ba:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <lfs_dir_commitcrc+0x206>
                return err;
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	e034      	b.n	800b730 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800b6c6:	f107 030b 	add.w	r3, r7, #11
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6d0:	f003 fe76 	bl	800f3c0 <lfs_crc>
 800b6d4:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800b6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d8:	3301      	adds	r3, #1
 800b6da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6de:	3304      	adds	r3, #4
 800b6e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d3c9      	bcc.n	800b67a <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800b6ec:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800b6f0:	e01e      	b.n	800b730 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800b6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fd fa7d 	bl	8008bfc <lfs_min>
 800b702:	4602      	mov	r2, r0
 800b704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b706:	4413      	add	r3, r2
 800b708:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800b70a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70e:	429a      	cmp	r2, r3
 800b710:	d206      	bcs.n	800b720 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800b712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b714:	3b08      	subs	r3, #8
 800b716:	4619      	mov	r1, r3
 800b718:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b71a:	f7fd fa6f 	bl	8008bfc <lfs_min>
 800b71e:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800b720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b722:	3304      	adds	r3, #4
 800b724:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800b726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d39f      	bcc.n	800b66e <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	374c      	adds	r7, #76	; 0x4c
 800b734:	46bd      	mov	sp, r7
 800b736:	bd90      	pop	{r4, r7, pc}

0800b738 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af04      	add	r7, sp, #16
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800b742:	2300      	movs	r3, #0
 800b744:	617b      	str	r3, [r7, #20]
 800b746:	e016      	b.n	800b776 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	3301      	adds	r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f003 0301 	and.w	r3, r3, #1
 800b752:	bfb8      	it	lt
 800b754:	425b      	neglt	r3, r3
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	4413      	add	r3, r2
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7fe f9b2 	bl	8009ac8 <lfs_alloc>
 800b764:	60f8      	str	r0, [r7, #12]
        if (err) {
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <lfs_dir_alloc+0x38>
            return err;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	e058      	b.n	800b822 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	3301      	adds	r3, #1
 800b774:	617b      	str	r3, [r7, #20]
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	dde5      	ble.n	800b748 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	2200      	movs	r2, #0
 800b780:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800b782:	6879      	ldr	r1, [r7, #4]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800b78c:	2004      	movs	r0, #4
 800b78e:	9003      	str	r0, [sp, #12]
 800b790:	9202      	str	r2, [sp, #8]
 800b792:	2200      	movs	r2, #0
 800b794:	9201      	str	r2, [sp, #4]
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	2304      	movs	r3, #4
 800b79a:	460a      	mov	r2, r1
 800b79c:	2100      	movs	r1, #0
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7fd fb08 	bl	8008db4 <lfs_bd_read>
 800b7a4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fd fa96 	bl	8008cdc <lfs_fromle32>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d005      	beq.n	800b7c8 <lfs_dir_alloc+0x90>
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b7c2:	d001      	beq.n	800b7c8 <lfs_dir_alloc+0x90>
        return err;
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	e02c      	b.n	800b822 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	dd0e      	ble.n	800b7f0 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	689a      	ldr	r2, [r3, #8]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7dc:	3301      	adds	r3, #1
 800b7de:	f043 0301 	orr.w	r3, r3, #1
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	f7fd fa2e 	bl	8008c46 <lfs_alignup>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	2204      	movs	r2, #4
 800b7f4:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7fc:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2200      	movs	r2, #0
 800b802:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b80a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b812:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2200      	movs	r2, #0
 800b818:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2200      	movs	r2, #0
 800b81e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3718      	adds	r7, #24
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b092      	sub	sp, #72	; 0x48
 800b82e:	af04      	add	r7, sp, #16
 800b830:	60f8      	str	r0, [r7, #12]
 800b832:	60b9      	str	r1, [r7, #8]
 800b834:	607a      	str	r2, [r7, #4]
 800b836:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800b838:	f107 0310 	add.w	r3, r7, #16
 800b83c:	4619      	mov	r1, r3
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f7ff ff7a 	bl	800b738 <lfs_dir_alloc>
 800b844:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800b846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <lfs_dir_split+0x26>
        return err;
 800b84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84e:	e03c      	b.n	800b8ca <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	7ddb      	ldrb	r3, [r3, #23]
 800b854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800b864:	f107 0110 	add.w	r1, r7, #16
 800b868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b86c:	9302      	str	r3, [sp, #8]
 800b86e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	f000 f879 	bl	800b974 <lfs_dir_compact>
 800b882:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 800b884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b886:	2b00      	cmp	r3, #0
 800b888:	da01      	bge.n	800b88e <lfs_dir_split+0x64>
        return res;
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	e01d      	b.n	800b8ca <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800b894:	697a      	ldr	r2, [r7, #20]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	2201      	movs	r2, #1
 800b89e:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3320      	adds	r3, #32
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	4610      	mov	r0, r2
 800b8aa:	f7fd fdd7 	bl	800945c <lfs_pair_cmp>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d109      	bne.n	800b8c8 <lfs_dir_split+0x9e>
 800b8b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d105      	bne.n	800b8c8 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3738      	adds	r7, #56	; 0x38
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b086      	sub	sp, #24
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	60f8      	str	r0, [r7, #12]
 800b8da:	60b9      	str	r1, [r7, #8]
 800b8dc:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800b8e2:	68b8      	ldr	r0, [r7, #8]
 800b8e4:	f7fd febd 	bl	8009662 <lfs_tag_dsize>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	441a      	add	r2, r3
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	601a      	str	r2, [r3, #0]
    return 0;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b086      	sub	sp, #24
 800b902:	af00      	add	r7, sp, #0
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	60b9      	str	r1, [r7, #8]
 800b908:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	6859      	ldr	r1, [r3, #4]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	f7ff fd51 	bl	800b3c0 <lfs_dir_commitattr>
 800b91e:	4603      	mov	r3, r0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dd11      	ble.n	800b960 <lfs_dir_needsrelocation+0x38>
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	3301      	adds	r3, #1
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b946:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b948:	3201      	adds	r2, #1
 800b94a:	f042 0201 	orr.w	r2, r2, #1
 800b94e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b952:	fb01 f202 	mul.w	r2, r1, r2
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <lfs_dir_needsrelocation+0x38>
 800b95c:	2301      	movs	r3, #1
 800b95e:	e000      	b.n	800b962 <lfs_dir_needsrelocation+0x3a>
 800b960:	2300      	movs	r3, #0
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	b2db      	uxtb	r3, r3
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800b974:	b580      	push	{r7, lr}
 800b976:	b0a4      	sub	sp, #144	; 0x90
 800b978:	af0a      	add	r7, sp, #40	; 0x28
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 800b982:	2300      	movs	r3, #0
 800b984:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 800b988:	68b9      	ldr	r1, [r7, #8]
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7ff ffcc 	bl	800b928 <lfs_dir_needsrelocation>
 800b990:	4603      	mov	r3, r0
 800b992:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 800b9a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00e      	beq.n	800b9c6 <lfs_dir_compact+0x52>
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	657a      	str	r2, [r7, #84]	; 0x54
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b9b2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fd fd4f 	bl	800945c <lfs_pair_cmp>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f040 8155 	bne.w	800bc70 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800b9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9d4:	647b      	str	r3, [r7, #68]	; 0x44
 800b9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9da:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9dc:	2300      	movs	r3, #0
 800b9de:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d004      	beq.n	800b9f4 <lfs_dir_compact+0x80>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9f0:	3b08      	subs	r3, #8
 800b9f2:	e003      	b.n	800b9fc <lfs_dir_compact+0x88>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9f8:	69db      	ldr	r3, [r3, #28]
 800b9fa:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800b9fc:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	4619      	mov	r1, r3
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f7fd fcc7 	bl	8009398 <lfs_bd_erase>
 800ba0a:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800ba0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d006      	beq.n	800ba20 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 800ba12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba14:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ba18:	f000 812c 	beq.w	800bc74 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 800ba1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba1e:	e177      	b.n	800bd10 <lfs_dir_compact+0x39c>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	689b      	ldr	r3, [r3, #8]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fd f964 	bl	8008cf2 <lfs_tole32>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800ba36:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ba3a:	2304      	movs	r3, #4
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f7ff fc89 	bl	800b354 <lfs_dir_commitprog>
 800ba42:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fd f947 	bl	8008cdc <lfs_fromle32>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	609a      	str	r2, [r3, #8]
            if (err) {
 800ba54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d006      	beq.n	800ba68 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 800ba5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba5c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ba60:	f000 810a 	beq.w	800bc78 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 800ba64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba66:	e153      	b.n	800bd10 <lfs_dir_compact+0x39c>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800ba68:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ba6c:	425b      	negs	r3, r3
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	637a      	str	r2, [r7, #52]	; 0x34
 800ba76:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ba7a:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800ba7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ba80:	9208      	str	r2, [sp, #32]
 800ba82:	4aa5      	ldr	r2, [pc, #660]	; (800bd18 <lfs_dir_compact+0x3a4>)
 800ba84:	9207      	str	r2, [sp, #28]
 800ba86:	9306      	str	r3, [sp, #24]
 800ba88:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800ba8c:	9305      	str	r3, [sp, #20]
 800ba8e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800ba92:	9304      	str	r3, [sp, #16]
 800ba94:	2300      	movs	r3, #0
 800ba96:	9303      	str	r3, [sp, #12]
 800ba98:	4ba0      	ldr	r3, [pc, #640]	; (800bd1c <lfs_dir_compact+0x3a8>)
 800ba9a:	9302      	str	r3, [sp, #8]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	9301      	str	r3, [sp, #4]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baa8:	2200      	movs	r2, #0
 800baaa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f7fe faf7 	bl	800a0a0 <lfs_dir_traverse>
 800bab2:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 800bab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d006      	beq.n	800bac8 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 800baba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800babc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bac0:	f000 80dc 	beq.w	800bc7c <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 800bac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bac6:	e123      	b.n	800bd10 <lfs_dir_compact+0x39c>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	3318      	adds	r3, #24
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fd fcaa 	bl	8009426 <lfs_pair_isnull>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f083 0301 	eor.w	r3, r3, #1
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	d022      	beq.n	800bb24 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	3318      	adds	r3, #24
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fd fd2b 	bl	800953e <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	7ddb      	ldrb	r3, [r3, #23]
 800baec:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800baf0:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800baf2:	4a8b      	ldr	r2, [pc, #556]	; (800bd20 <lfs_dir_compact+0x3ac>)
 800baf4:	431a      	orrs	r2, r3
                        dir->tail);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800bafa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f7ff fc5e 	bl	800b3c0 <lfs_dir_commitattr>
 800bb04:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	3318      	adds	r3, #24
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fd fcfd 	bl	800950a <lfs_pair_fromle32>
                if (err) {
 800bb10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d006      	beq.n	800bb24 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 800bb16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb18:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bb1c:	f000 80b0 	beq.w	800bc80 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 800bb20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb22:	e0f5      	b.n	800bd10 <lfs_dir_compact+0x39c>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800bb24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	605a      	str	r2, [r3, #4]
 800bb2e:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800bb30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bb34:	f083 0301 	eor.w	r3, r3, #1
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d011      	beq.n	800bb62 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800bb44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb48:	4611      	mov	r1, r2
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fd fd9d 	bl	800968a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb5a:	4611      	mov	r1, r2
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f7fd fd94 	bl	800968a <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800bb68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fd fd8b 	bl	800968a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800bb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800bb80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb84:	461a      	mov	r2, r3
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff f9f3 	bl	800af74 <lfs_dir_getgstate>
 800bb8e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800bb90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <lfs_dir_compact+0x226>
                return err;
 800bb96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb98:	e0ba      	b.n	800bd10 <lfs_dir_compact+0x39c>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800bb9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fd fd98 	bl	80096d4 <lfs_gstate_iszero>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f083 0301 	eor.w	r3, r3, #1
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d016      	beq.n	800bbde <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 800bbb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fd fe1f 	bl	80097f8 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800bbba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbbe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bbc2:	4a58      	ldr	r2, [pc, #352]	; (800bd24 <lfs_dir_compact+0x3b0>)
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f7ff fbfb 	bl	800b3c0 <lfs_dir_commitattr>
 800bbca:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800bbcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d005      	beq.n	800bbde <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 800bbd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbd4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bbd8:	d054      	beq.n	800bc84 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 800bbda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbdc:	e098      	b.n	800bd10 <lfs_dir_compact+0x39c>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800bbde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff fc6b 	bl	800b4c0 <lfs_dir_commitcrc>
 800bbea:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 800bbec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d005      	beq.n	800bbfe <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 800bbf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbf4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bbf8:	d046      	beq.n	800bc88 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 800bbfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbfc:	e088      	b.n	800bd10 <lfs_dir_compact+0x39c>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800bbfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bc04:	6992      	ldr	r2, [r2, #24]
 800bc06:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc0a:	fb01 f202 	mul.w	r2, r1, r2
 800bc0e:	1a9b      	subs	r3, r3, r2
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d006      	beq.n	800bc22 <lfs_dir_compact+0x2ae>
 800bc14:	4b44      	ldr	r3, [pc, #272]	; (800bd28 <lfs_dir_compact+0x3b4>)
 800bc16:	4a45      	ldr	r2, [pc, #276]	; (800bd2c <lfs_dir_compact+0x3b8>)
 800bc18:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 800bc1c:	4844      	ldr	r0, [pc, #272]	; (800bd30 <lfs_dir_compact+0x3bc>)
 800bc1e:	f010 fa8d 	bl	801c13c <__assert_func>
            lfs_pair_swap(dir->pair);
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fd fbe9 	bl	80093fc <lfs_pair_swap>
            dir->count = end - begin;
 800bc2a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800bc2e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800bc3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800bc40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3348      	adds	r3, #72	; 0x48
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	605a      	str	r2, [r3, #4]
 800bc50:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800bc52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bc56:	f083 0301 	eor.w	r3, r3, #1
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d054      	beq.n	800bd0a <lfs_dir_compact+0x396>
                lfs->gdisk = lfs->gstate;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	333c      	adds	r3, #60	; 0x3c
 800bc66:	3230      	adds	r2, #48	; 0x30
 800bc68:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800bc6e:	e04c      	b.n	800bd0a <lfs_dir_compact+0x396>
        goto relocate;
 800bc70:	bf00      	nop
 800bc72:	e00a      	b.n	800bc8a <lfs_dir_compact+0x316>
                    goto relocate;
 800bc74:	bf00      	nop
 800bc76:	e008      	b.n	800bc8a <lfs_dir_compact+0x316>
                    goto relocate;
 800bc78:	bf00      	nop
 800bc7a:	e006      	b.n	800bc8a <lfs_dir_compact+0x316>
                    goto relocate;
 800bc7c:	bf00      	nop
 800bc7e:	e004      	b.n	800bc8a <lfs_dir_compact+0x316>
                        goto relocate;
 800bc80:	bf00      	nop
 800bc82:	e002      	b.n	800bc8a <lfs_dir_compact+0x316>
                        goto relocate;
 800bc84:	bf00      	nop
 800bc86:	e000      	b.n	800bc8a <lfs_dir_compact+0x316>
                    goto relocate;
 800bc88:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3310      	adds	r3, #16
 800bc94:	4619      	mov	r1, r3
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f7fd f866 	bl	8008d68 <lfs_cache_drop>
        if (!tired) {
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	617a      	str	r2, [r7, #20]
 800bca2:	2201      	movs	r2, #1
 800bca4:	61ba      	str	r2, [r7, #24]
 800bca6:	f107 0214 	add.w	r2, r7, #20
 800bcaa:	4611      	mov	r1, r2
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fd fbd5 	bl	800945c <lfs_pair_cmp>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10c      	bne.n	800bcd2 <lfs_dir_compact+0x35e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	4a1d      	ldr	r2, [pc, #116]	; (800bd34 <lfs_dir_compact+0x3c0>)
 800bcbe:	9200      	str	r2, [sp, #0]
 800bcc0:	f240 725f 	movw	r2, #1887	; 0x75f
 800bcc4:	491a      	ldr	r1, [pc, #104]	; (800bd30 <lfs_dir_compact+0x3bc>)
 800bcc6:	481c      	ldr	r0, [pc, #112]	; (800bd38 <lfs_dir_compact+0x3c4>)
 800bcc8:	f010 fc24 	bl	801c514 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800bccc:	f06f 031b 	mvn.w	r3, #27
 800bcd0:	e01e      	b.n	800bd10 <lfs_dir_compact+0x39c>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f7fd fef5 	bl	8009ac8 <lfs_alloc>
 800bcde:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800bce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00c      	beq.n	800bd00 <lfs_dir_compact+0x38c>
 800bce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bce8:	f113 0f1c 	cmn.w	r3, #28
 800bcec:	d106      	bne.n	800bcfc <lfs_dir_compact+0x388>
 800bcee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bcf2:	f083 0301 	eor.w	r3, r3, #1
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d001      	beq.n	800bd00 <lfs_dir_compact+0x38c>
            return err;
 800bcfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcfe:	e007      	b.n	800bd10 <lfs_dir_compact+0x39c>
        }

        tired = false;
 800bd00:	2300      	movs	r3, #0
 800bd02:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 800bd06:	bf00      	nop
    while (true) {
 800bd08:	e65d      	b.n	800b9c6 <lfs_dir_compact+0x52>
        break;
 800bd0a:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 800bd0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3768      	adds	r7, #104	; 0x68
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	0800b8ff 	.word	0x0800b8ff
 800bd1c:	400ffc00 	.word	0x400ffc00
 800bd20:	000ffc08 	.word	0x000ffc08
 800bd24:	7ffffc0c 	.word	0x7ffffc0c
 800bd28:	0801e1a4 	.word	0x0801e1a4
 800bd2c:	08021608 	.word	0x08021608
 800bd30:	0801e040 	.word	0x0801e040
 800bd34:	0801e14c 	.word	0x0801e14c
 800bd38:	0801e1cc 	.word	0x0801e1cc

0800bd3c <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800bd3c:	b590      	push	{r4, r7, lr}
 800bd3e:	b097      	sub	sp, #92	; 0x5c
 800bd40:	af0a      	add	r7, sp, #40	; 0x28
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 800bd4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 800bd50:	e058      	b.n	800be04 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd5c:	b292      	uxth	r2, r2
 800bd5e:	4252      	negs	r2, r2
 800bd60:	b292      	uxth	r2, r2
 800bd62:	b212      	sxth	r2, r2
 800bd64:	f107 0118 	add.w	r1, r7, #24
 800bd68:	9108      	str	r1, [sp, #32]
 800bd6a:	4974      	ldr	r1, [pc, #464]	; (800bf3c <lfs_dir_splittingcompact+0x200>)
 800bd6c:	9107      	str	r1, [sp, #28]
 800bd6e:	9206      	str	r2, [sp, #24]
 800bd70:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800bd74:	9205      	str	r2, [sp, #20]
 800bd76:	9304      	str	r3, [sp, #16]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9303      	str	r3, [sp, #12]
 800bd7c:	4b70      	ldr	r3, [pc, #448]	; (800bf40 <lfs_dir_splittingcompact+0x204>)
 800bd7e:	9302      	str	r3, [sp, #8]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f7fe f985 	bl	800a0a0 <lfs_dir_traverse>
 800bd96:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <lfs_dir_splittingcompact+0x66>
                return err;
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	e0c7      	b.n	800bf32 <lfs_dir_splittingcompact+0x1f6>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 800bda2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800bda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	2bfe      	cmp	r3, #254	; 0xfe
 800bdac:	d822      	bhi.n	800bdf4 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdb2:	69db      	ldr	r3, [r3, #28]
 800bdb4:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d004      	beq.n	800bdcc <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800bdc8:	085b      	lsrs	r3, r3, #1
 800bdca:	e003      	b.n	800bdd4 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdd0:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800bdd2:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bdd8:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 800bdda:	4611      	mov	r1, r2
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7fc ff32 	bl	8008c46 <lfs_alignup>
 800bde2:	4603      	mov	r3, r0
 800bde4:	4619      	mov	r1, r3
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7fc ff08 	bl	8008bfc <lfs_min>
 800bdec:	4602      	mov	r2, r0
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d20e      	bcs.n	800be12 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 800bdf4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800bdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	085b      	lsrs	r3, r3, #1
 800bdfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be00:	4413      	add	r3, r2
 800be02:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 800be04:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800be08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d8a0      	bhi.n	800bd52 <lfs_dir_splittingcompact+0x16>
 800be10:	e000      	b.n	800be14 <lfs_dir_splittingcompact+0xd8>
                break;
 800be12:	bf00      	nop
        }

        if (split == begin) {
 800be14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800be18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d02d      	beq.n	800be7a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	b29b      	uxth	r3, r3
 800be22:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800be26:	9202      	str	r2, [sp, #8]
 800be28:	9301      	str	r3, [sp, #4]
 800be2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	68b9      	ldr	r1, [r7, #8]
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7ff fcf8 	bl	800b82a <lfs_dir_split>
 800be3a:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d005      	beq.n	800be4e <lfs_dir_splittingcompact+0x112>
 800be42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be44:	f113 0f1c 	cmn.w	r3, #28
 800be48:	d001      	beq.n	800be4e <lfs_dir_splittingcompact+0x112>
            return err;
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	e071      	b.n	800bf32 <lfs_dir_splittingcompact+0x1f6>
        }

        if (err) {
 800be4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00e      	beq.n	800be72 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	4939      	ldr	r1, [pc, #228]	; (800bf44 <lfs_dir_splittingcompact+0x208>)
 800be5e:	9101      	str	r1, [sp, #4]
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	4613      	mov	r3, r2
 800be64:	f240 72a9 	movw	r2, #1961	; 0x7a9
 800be68:	4937      	ldr	r1, [pc, #220]	; (800bf48 <lfs_dir_splittingcompact+0x20c>)
 800be6a:	4838      	ldr	r0, [pc, #224]	; (800bf4c <lfs_dir_splittingcompact+0x210>)
 800be6c:	f010 fb52 	bl	801c514 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 800be70:	e004      	b.n	800be7c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 800be72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 800be78:	e767      	b.n	800bd4a <lfs_dir_splittingcompact+0xe>
            break;
 800be7a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 800be7c:	68b9      	ldr	r1, [r7, #8]
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7ff fd52 	bl	800b928 <lfs_dir_needsrelocation>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d044      	beq.n	800bf14 <lfs_dir_splittingcompact+0x1d8>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	2200      	movs	r2, #0
 800be8e:	613a      	str	r2, [r7, #16]
 800be90:	2201      	movs	r2, #1
 800be92:	617a      	str	r2, [r7, #20]
 800be94:	f107 0210 	add.w	r2, r7, #16
 800be98:	4611      	mov	r1, r2
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7fd fade 	bl	800945c <lfs_pair_cmp>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d136      	bne.n	800bf14 <lfs_dir_splittingcompact+0x1d8>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f003 f93e 	bl	800f128 <lfs_fs_rawsize>
 800beac:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	da01      	bge.n	800beb8 <lfs_dir_splittingcompact+0x17c>
            return size;
 800beb4:	6a3b      	ldr	r3, [r7, #32]
 800beb6:	e03c      	b.n	800bf32 <lfs_dir_splittingcompact+0x1f6>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bebc:	6a1b      	ldr	r3, [r3, #32]
 800bebe:	085a      	lsrs	r2, r3, #1
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d926      	bls.n	800bf14 <lfs_dir_splittingcompact+0x1d8>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800bec6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800beca:	9302      	str	r3, [sp, #8]
 800becc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	68b9      	ldr	r1, [r7, #8]
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f7ff fca4 	bl	800b82a <lfs_dir_split>
 800bee2:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d005      	beq.n	800bef6 <lfs_dir_splittingcompact+0x1ba>
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	f113 0f1c 	cmn.w	r3, #28
 800bef0:	d001      	beq.n	800bef6 <lfs_dir_splittingcompact+0x1ba>
                return err;
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	e01d      	b.n	800bf32 <lfs_dir_splittingcompact+0x1f6>
            }

            if (err) {
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d007      	beq.n	800bf0c <lfs_dir_splittingcompact+0x1d0>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 800befc:	4b11      	ldr	r3, [pc, #68]	; (800bf44 <lfs_dir_splittingcompact+0x208>)
 800befe:	f240 72c7 	movw	r2, #1991	; 0x7c7
 800bf02:	4911      	ldr	r1, [pc, #68]	; (800bf48 <lfs_dir_splittingcompact+0x20c>)
 800bf04:	4812      	ldr	r0, [pc, #72]	; (800bf50 <lfs_dir_splittingcompact+0x214>)
 800bf06:	f010 fb05 	bl	801c514 <iprintf>
 800bf0a:	e003      	b.n	800bf14 <lfs_dir_splittingcompact+0x1d8>
            } else {
                end = begin;
 800bf0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bf10:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 800bf14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bf18:	9302      	str	r3, [sp, #8]
 800bf1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f7ff fd22 	bl	800b974 <lfs_dir_compact>
 800bf30:	4603      	mov	r3, r0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3734      	adds	r7, #52	; 0x34
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd90      	pop	{r4, r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	0800b8d3 	.word	0x0800b8d3
 800bf40:	400ffc00 	.word	0x400ffc00
 800bf44:	0801e14c 	.word	0x0801e14c
 800bf48:	0801e040 	.word	0x0801e040
 800bf4c:	0801e204 	.word	0x0801e204
 800bf50:	0801e234 	.word	0x0801e234

0800bf54 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 800bf54:	b5b0      	push	{r4, r5, r7, lr}
 800bf56:	b0a6      	sub	sp, #152	; 0x98
 800bf58:	af0a      	add	r7, sp, #40	; 0x28
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	603b      	str	r3, [r7, #0]
    int state = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 800bf66:	2300      	movs	r3, #0
 800bf68:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	667b      	str	r3, [r7, #100]	; 0x64
 800bf70:	e06d      	b.n	800c04e <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800bf72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf74:	00db      	lsls	r3, r3, #3
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	4413      	add	r3, r2
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fd fb29 	bl	80095d4 <lfs_tag_type3>
 800bf82:	4603      	mov	r3, r0
 800bf84:	461a      	mov	r2, r3
 800bf86:	f240 4301 	movw	r3, #1025	; 0x401
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d106      	bne.n	800bf9c <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	8a9b      	ldrh	r3, [r3, #20]
 800bf92:	3301      	adds	r3, #1
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	829a      	strh	r2, [r3, #20]
 800bf9a:	e055      	b.n	800c048 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800bf9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fd fb14 	bl	80095d4 <lfs_tag_type3>
 800bfac:	4603      	mov	r3, r0
 800bfae:	461a      	mov	r2, r3
 800bfb0:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d114      	bne.n	800bfe2 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	8a9b      	ldrh	r3, [r3, #20]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d106      	bne.n	800bfce <lfs_dir_relocatingcommit+0x7a>
 800bfc0:	4ba4      	ldr	r3, [pc, #656]	; (800c254 <lfs_dir_relocatingcommit+0x300>)
 800bfc2:	4aa5      	ldr	r2, [pc, #660]	; (800c258 <lfs_dir_relocatingcommit+0x304>)
 800bfc4:	f240 71df 	movw	r1, #2015	; 0x7df
 800bfc8:	48a4      	ldr	r0, [pc, #656]	; (800c25c <lfs_dir_relocatingcommit+0x308>)
 800bfca:	f010 f8b7 	bl	801c13c <__assert_func>
            dir->count -= 1;
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	8a9b      	ldrh	r3, [r3, #20]
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800bfe0:	e032      	b.n	800c048 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800bfe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	4413      	add	r3, r2
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fd fae1 	bl	80095b4 <lfs_tag_type1>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bff8:	d126      	bne.n	800c048 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800bffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	4413      	add	r3, r2
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800c00a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	4413      	add	r3, r2
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800c01a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c01c:	00db      	lsls	r3, r3, #3
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	4413      	add	r3, r2
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4618      	mov	r0, r3
 800c026:	f7fd fae5 	bl	80095f4 <lfs_tag_chunk>
 800c02a:	4603      	mov	r3, r0
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b00      	cmp	r3, #0
 800c032:	bf14      	ite	ne
 800c034:	2301      	movne	r3, #1
 800c036:	2300      	moveq	r3, #0
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	3318      	adds	r3, #24
 800c042:	4618      	mov	r0, r3
 800c044:	f7fd fa61 	bl	800950a <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800c048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c04a:	3301      	adds	r3, #1
 800c04c:	667b      	str	r3, [r7, #100]	; 0x64
 800c04e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c054:	429a      	cmp	r2, r3
 800c056:	db8c      	blt.n	800bf72 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800c058:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d02b      	beq.n	800c0b8 <lfs_dir_relocatingcommit+0x164>
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	8a9b      	ldrh	r3, [r3, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d127      	bne.n	800c0b8 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 800c068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d106      	bne.n	800c07e <lfs_dir_relocatingcommit+0x12a>
 800c070:	4b7b      	ldr	r3, [pc, #492]	; (800c260 <lfs_dir_relocatingcommit+0x30c>)
 800c072:	4a79      	ldr	r2, [pc, #484]	; (800c258 <lfs_dir_relocatingcommit+0x304>)
 800c074:	f240 71ec 	movw	r1, #2028	; 0x7ec
 800c078:	4878      	ldr	r0, [pc, #480]	; (800c25c <lfs_dir_relocatingcommit+0x308>)
 800c07a:	f010 f85f 	bl	801c13c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c084:	4619      	mov	r1, r3
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f002 fd12 	bl	800eab0 <lfs_fs_pred>
 800c08c:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 800c08e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c090:	2b00      	cmp	r3, #0
 800c092:	d005      	beq.n	800c0a0 <lfs_dir_relocatingcommit+0x14c>
 800c094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c096:	f113 0f02 	cmn.w	r3, #2
 800c09a:	d001      	beq.n	800c0a0 <lfs_dir_relocatingcommit+0x14c>
            return err;
 800c09c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c09e:	e204      	b.n	800c4aa <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 800c0a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0a2:	f113 0f02 	cmn.w	r3, #2
 800c0a6:	d007      	beq.n	800c0b8 <lfs_dir_relocatingcommit+0x164>
 800c0a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0ac:	7ddb      	ldrb	r3, [r3, #23]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d002      	beq.n	800c0b8 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 800c0b6:	e121      	b.n	800c2fc <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	7d9b      	ldrb	r3, [r3, #22]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 80fb 	beq.w	800c2b8 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800c0c6:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800c0cc:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800c0d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800c0de:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d004      	beq.n	800c0f4 <lfs_dir_relocatingcommit+0x1a0>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0f0:	3b08      	subs	r3, #8
 800c0f2:	e003      	b.n	800c0fc <lfs_dir_relocatingcommit+0x1a8>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0f8:	69db      	ldr	r3, [r3, #28]
 800c0fa:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800c0fc:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	3318      	adds	r3, #24
 800c102:	4618      	mov	r0, r3
 800c104:	f7fd fa1b 	bl	800953e <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	68da      	ldr	r2, [r3, #12]
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	62bb      	str	r3, [r7, #40]	; 0x28
 800c114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c118:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 800c11a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c11e:	9308      	str	r3, [sp, #32]
 800c120:	4b50      	ldr	r3, [pc, #320]	; (800c264 <lfs_dir_relocatingcommit+0x310>)
 800c122:	9307      	str	r3, [sp, #28]
 800c124:	2300      	movs	r3, #0
 800c126:	9306      	str	r3, [sp, #24]
 800c128:	2300      	movs	r3, #0
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	2300      	movs	r3, #0
 800c12e:	9304      	str	r3, [sp, #16]
 800c130:	2300      	movs	r3, #0
 800c132:	9303      	str	r3, [sp, #12]
 800c134:	2300      	movs	r3, #0
 800c136:	9302      	str	r3, [sp, #8]
 800c138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c13c:	9301      	str	r3, [sp, #4]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	460b      	mov	r3, r1
 800c144:	68b9      	ldr	r1, [r7, #8]
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7fd ffaa 	bl	800a0a0 <lfs_dir_traverse>
 800c14c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	3318      	adds	r3, #24
 800c152:	4618      	mov	r0, r3
 800c154:	f7fd f9d9 	bl	800950a <lfs_pair_fromle32>
        if (err) {
 800c158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00b      	beq.n	800c176 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c160:	f113 0f1c 	cmn.w	r3, #28
 800c164:	f000 80aa 	beq.w	800c2bc <lfs_dir_relocatingcommit+0x368>
 800c168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c16a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c16e:	f000 80a5 	beq.w	800c2bc <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 800c172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c174:	e199      	b.n	800c4aa <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800c176:	f107 031c 	add.w	r3, r7, #28
 800c17a:	2200      	movs	r2, #0
 800c17c:	601a      	str	r2, [r3, #0]
 800c17e:	605a      	str	r2, [r3, #4]
 800c180:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c188:	f107 031c 	add.w	r3, r7, #28
 800c18c:	4611      	mov	r1, r2
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fd fa7b 	bl	800968a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c19a:	f107 031c 	add.w	r3, r7, #28
 800c19e:	4611      	mov	r1, r2
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7fd fa72 	bl	800968a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800c1ac:	f107 031c 	add.w	r3, r7, #28
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fd fa69 	bl	800968a <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c1be:	f023 0303 	bic.w	r3, r3, #3
 800c1c2:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 800c1c4:	f107 031c 	add.w	r3, r7, #28
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fd fa83 	bl	80096d4 <lfs_gstate_iszero>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	f083 0301 	eor.w	r3, r3, #1
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d027      	beq.n	800c22a <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800c1da:	f107 031c 	add.w	r3, r7, #28
 800c1de:	461a      	mov	r2, r3
 800c1e0:	68b9      	ldr	r1, [r7, #8]
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f7fe fec6 	bl	800af74 <lfs_dir_getgstate>
 800c1e8:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 800c1ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d001      	beq.n	800c1f4 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 800c1f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1f2:	e15a      	b.n	800c4aa <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 800c1f4:	f107 031c 	add.w	r3, r7, #28
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fd fafd 	bl	80097f8 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800c1fe:	f107 031c 	add.w	r3, r7, #28
 800c202:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800c206:	4a18      	ldr	r2, [pc, #96]	; (800c268 <lfs_dir_relocatingcommit+0x314>)
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f7ff f8d9 	bl	800b3c0 <lfs_dir_commitattr>
 800c20e:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800c210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c212:	2b00      	cmp	r3, #0
 800c214:	d009      	beq.n	800c22a <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c218:	f113 0f1c 	cmn.w	r3, #28
 800c21c:	d050      	beq.n	800c2c0 <lfs_dir_relocatingcommit+0x36c>
 800c21e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c220:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c224:	d04c      	beq.n	800c2c0 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 800c226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c228:	e13f      	b.n	800c4aa <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800c22a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c22e:	4619      	mov	r1, r3
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f7ff f945 	bl	800b4c0 <lfs_dir_commitcrc>
 800c236:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 800c238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d016      	beq.n	800c26c <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c240:	f113 0f1c 	cmn.w	r3, #28
 800c244:	d03e      	beq.n	800c2c4 <lfs_dir_relocatingcommit+0x370>
 800c246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c248:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c24c:	d03a      	beq.n	800c2c4 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 800c24e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c250:	e12b      	b.n	800c4aa <lfs_dir_relocatingcommit+0x556>
 800c252:	bf00      	nop
 800c254:	0801e260 	.word	0x0801e260
 800c258:	08021618 	.word	0x08021618
 800c25c:	0801e040 	.word	0x0801e040
 800c260:	0801e270 	.word	0x0801e270
 800c264:	0800b8ff 	.word	0x0800b8ff
 800c268:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800c26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c272:	6992      	ldr	r2, [r2, #24]
 800c274:	fbb3 f1f2 	udiv	r1, r3, r2
 800c278:	fb01 f202 	mul.w	r2, r1, r2
 800c27c:	1a9b      	subs	r3, r3, r2
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d006      	beq.n	800c290 <lfs_dir_relocatingcommit+0x33c>
 800c282:	4b8c      	ldr	r3, [pc, #560]	; (800c4b4 <lfs_dir_relocatingcommit+0x560>)
 800c284:	4a8c      	ldr	r2, [pc, #560]	; (800c4b8 <lfs_dir_relocatingcommit+0x564>)
 800c286:	f640 0136 	movw	r1, #2102	; 0x836
 800c28a:	488c      	ldr	r0, [pc, #560]	; (800c4bc <lfs_dir_relocatingcommit+0x568>)
 800c28c:	f00f ff56 	bl	801c13c <__assert_func>
        dir->off = commit.off;
 800c290:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800c296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	333c      	adds	r3, #60	; 0x3c
 800c2a2:	3230      	adds	r2, #48	; 0x30
 800c2a4:	ca07      	ldmia	r2, {r0, r1, r2}
 800c2a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	3348      	adds	r3, #72	; 0x48
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	601a      	str	r2, [r3, #0]
 800c2b2:	605a      	str	r2, [r3, #4]
 800c2b4:	609a      	str	r2, [r3, #8]
 800c2b6:	e021      	b.n	800c2fc <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 800c2b8:	bf00      	nop
 800c2ba:	e004      	b.n	800c2c6 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800c2bc:	bf00      	nop
 800c2be:	e002      	b.n	800c2c6 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 800c2c0:	bf00      	nop
 800c2c2:	e000      	b.n	800c2c6 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 800c2c4:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3310      	adds	r3, #16
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f7fc fd4b 	bl	8008d68 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	8a9b      	ldrh	r3, [r3, #20]
 800c2d6:	9302      	str	r3, [sp, #8]
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9301      	str	r3, [sp, #4]
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f7ff fd27 	bl	800bd3c <lfs_dir_splittingcompact>
 800c2ee:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 800c2f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	da01      	bge.n	800c2fa <lfs_dir_relocatingcommit+0x3a6>
        return state;
 800c2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2f8:	e0d7      	b.n	800c4aa <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 800c2fa:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	64bb      	str	r3, [r7, #72]	; 0x48
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	3304      	adds	r3, #4
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c30e:	663b      	str	r3, [r7, #96]	; 0x60
 800c310:	e0c6      	b.n	800c4a0 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 800c312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c314:	3308      	adds	r3, #8
 800c316:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c31a:	4611      	mov	r1, r2
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fd f89d 	bl	800945c <lfs_pair_cmp>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	f040 80b8 	bne.w	800c49a <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 800c32a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	f103 0408 	add.w	r4, r3, #8
 800c332:	4615      	mov	r5, r2
 800c334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c338:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c33c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 800c340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c342:	3308      	adds	r3, #8
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	429a      	cmp	r2, r3
 800c348:	f000 809d 	beq.w	800c486 <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 800c34c:	2300      	movs	r3, #0
 800c34e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c350:	e07b      	b.n	800c44a <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	4413      	add	r3, r2
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fd f939 	bl	80095d4 <lfs_tag_type3>
 800c362:	4603      	mov	r3, r0
 800c364:	461a      	mov	r2, r3
 800c366:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d115      	bne.n	800c39a <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 800c36e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c370:	889c      	ldrh	r4, [r3, #4]
 800c372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c374:	00db      	lsls	r3, r3, #3
 800c376:	683a      	ldr	r2, [r7, #0]
 800c378:	4413      	add	r3, r2
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7fd f953 	bl	8009628 <lfs_tag_id>
 800c382:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c384:	429c      	cmp	r4, r3
 800c386:	d108      	bne.n	800c39a <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 800c388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c38a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c38e:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 800c390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c396:	60da      	str	r2, [r3, #12]
 800c398:	e054      	b.n	800c444 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fd f915 	bl	80095d4 <lfs_tag_type3>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d11c      	bne.n	800c3f0 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 800c3b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3b8:	889c      	ldrh	r4, [r3, #4]
 800c3ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	683a      	ldr	r2, [r7, #0]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7fd f92f 	bl	8009628 <lfs_tag_id>
 800c3ca:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c3cc:	429c      	cmp	r4, r3
 800c3ce:	d90f      	bls.n	800c3f0 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 800c3d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3d2:	889b      	ldrh	r3, [r3, #4]
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3da:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800c3dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3de:	799b      	ldrb	r3, [r3, #6]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d12f      	bne.n	800c444 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 800c3e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e8:	1e5a      	subs	r2, r3, #1
 800c3ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3ec:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 800c3ee:	e029      	b.n	800c444 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800c3f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	683a      	ldr	r2, [r7, #0]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fd f8ea 	bl	80095d4 <lfs_tag_type3>
 800c400:	4603      	mov	r3, r0
 800c402:	461a      	mov	r2, r3
 800c404:	f240 4301 	movw	r3, #1025	; 0x401
 800c408:	429a      	cmp	r2, r3
 800c40a:	d11b      	bne.n	800c444 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 800c40c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c40e:	889c      	ldrh	r4, [r3, #4]
 800c410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	4413      	add	r3, r2
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fd f904 	bl	8009628 <lfs_tag_id>
 800c420:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800c422:	429c      	cmp	r4, r3
 800c424:	d30e      	bcc.n	800c444 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 800c426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c428:	889b      	ldrh	r3, [r3, #4]
 800c42a:	3301      	adds	r3, #1
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c430:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 800c432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c434:	799b      	ldrb	r3, [r3, #6]
 800c436:	2b02      	cmp	r3, #2
 800c438:	d104      	bne.n	800c444 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 800c43a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c442:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 800c444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c446:	3301      	adds	r3, #1
 800c448:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c44a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c44c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c450:	429a      	cmp	r2, r3
 800c452:	f6ff af7e 	blt.w	800c352 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 800c456:	e016      	b.n	800c486 <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 800c458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c45a:	889a      	ldrh	r2, [r3, #4]
 800c45c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c45e:	8b9b      	ldrh	r3, [r3, #28]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	b29a      	uxth	r2, r3
 800c464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c466:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800c468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c46a:	f103 0108 	add.w	r1, r3, #8
 800c46e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c470:	3320      	adds	r3, #32
 800c472:	461a      	mov	r2, r3
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f7fe fd61 	bl	800af3c <lfs_dir_fetch>
 800c47a:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 800c47c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <lfs_dir_relocatingcommit+0x532>
                    return err;
 800c482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c484:	e011      	b.n	800c4aa <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 800c486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c488:	889a      	ldrh	r2, [r3, #4]
 800c48a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c48c:	8b9b      	ldrh	r3, [r3, #28]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d303      	bcc.n	800c49a <lfs_dir_relocatingcommit+0x546>
 800c492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c494:	7fdb      	ldrb	r3, [r3, #31]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1de      	bne.n	800c458 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c49a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	663b      	str	r3, [r7, #96]	; 0x60
 800c4a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f47f af35 	bne.w	800c312 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 800c4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3770      	adds	r7, #112	; 0x70
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bdb0      	pop	{r4, r5, r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	0801e1a4 	.word	0x0801e1a4
 800c4b8:	08021618 	.word	0x08021618
 800c4bc:	0801e040 	.word	0x0801e040

0800c4c0 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800c4c0:	b5b0      	push	{r4, r5, r7, lr}
 800c4c2:	b0ba      	sub	sp, #232	; 0xe8
 800c4c4:	af02      	add	r7, sp, #8
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
 800c4cc:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c4d6:	e045      	b.n	800c564 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800c4d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4dc:	3308      	adds	r3, #8
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d03a      	beq.n	800c55a <lfs_dir_orphaningcommit+0x9a>
 800c4e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fc ffb4 	bl	800945c <lfs_pair_cmp>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d12f      	bne.n	800c55a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c4fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4fe:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800c500:	2b01      	cmp	r3, #1
 800c502:	d12a      	bne.n	800c55a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d023      	beq.n	800c55a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800c512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800c51e:	429a      	cmp	r2, r3
 800c520:	d91b      	bls.n	800c55a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800c522:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f001 f9de 	bl	800d8e8 <lfs_file_outline>
 800c52c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 800c530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <lfs_dir_orphaningcommit+0x7e>
                return err;
 800c538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c53c:	e274      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
            }

            err = lfs_file_flush(lfs, f);
 800c53e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f001 f9f1 	bl	800d92a <lfs_file_flush>
 800c548:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 800c54c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c550:	2b00      	cmp	r3, #0
 800c552:	d002      	beq.n	800c55a <lfs_dir_orphaningcommit+0x9a>
                return err;
 800c554:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c558:	e266      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800c55a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1b5      	bne.n	800c4d8 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800c582:	461d      	mov	r5, r3
 800c584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c588:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c58c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800c596:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f7ff fcd6 	bl	800bf54 <lfs_dir_relocatingcommit>
 800c5a8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 800c5ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	da02      	bge.n	800c5ba <lfs_dir_orphaningcommit+0xfa>
        return state;
 800c5b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5b8:	e236      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fc ff4a 	bl	800945c <lfs_pair_cmp>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d109      	bne.n	800c5e2 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	461d      	mov	r5, r3
 800c5d2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800c5d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c5da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c5de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 800c5e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d14a      	bne.n	800c680 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	3348      	adds	r3, #72	; 0x48
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	68b9      	ldr	r1, [r7, #8]
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f7fe fcbe 	bl	800af74 <lfs_dir_getgstate>
 800c5f8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 800c5fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c600:	2b00      	cmp	r3, #0
 800c602:	d002      	beq.n	800c60a <lfs_dir_orphaningcommit+0x14a>
            return err;
 800c604:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c608:	e20e      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 800c60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c60c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 800c610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	3318      	adds	r3, #24
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fc ff8f 	bl	800953e <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	7ddb      	ldrb	r3, [r3, #23]
 800c624:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800c628:	051a      	lsls	r2, r3, #20
 800c62a:	4bc0      	ldr	r3, [pc, #768]	; (800c92c <lfs_dir_orphaningcommit+0x46c>)
 800c62c:	4313      	orrs	r3, r2
 800c62e:	667b      	str	r3, [r7, #100]	; 0x64
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	3318      	adds	r3, #24
 800c634:	66bb      	str	r3, [r7, #104]	; 0x68
 800c636:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c63a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800c63e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800c642:	2000      	movs	r0, #0
 800c644:	9001      	str	r0, [sp, #4]
 800c646:	2001      	movs	r0, #1
 800c648:	9000      	str	r0, [sp, #0]
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f7ff fc82 	bl	800bf54 <lfs_dir_relocatingcommit>
 800c650:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	3318      	adds	r3, #24
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fc ff56 	bl	800950a <lfs_pair_fromle32>
        if (state < 0) {
 800c65e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c662:	2b00      	cmp	r3, #0
 800c664:	da02      	bge.n	800c66c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 800c666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c66a:	e1dd      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
        }

        ldir = pdir;
 800c66c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800c670:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800c674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c678:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c67c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 800c680:	2300      	movs	r3, #0
 800c682:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 800c686:	e1c3      	b.n	800ca10 <lfs_dir_orphaningcommit+0x550>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f103 0220 	add.w	r2, r3, #32
 800c694:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c698:	4611      	mov	r1, r2
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fc fede 	bl	800945c <lfs_pair_cmp>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d107      	bne.n	800c6b6 <lfs_dir_orphaningcommit+0x1f6>
            lfs->root[0] = ldir.pair[0];
 800c6a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 800c6ae:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6be:	e037      	b.n	800c730 <lfs_dir_orphaningcommit+0x270>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 800c6c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c6c4:	f103 0208 	add.w	r2, r3, #8
 800c6c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fc fec4 	bl	800945c <lfs_pair_cmp>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d109      	bne.n	800c6ee <lfs_dir_orphaningcommit+0x22e>
                d->m.pair[0] = ldir.pair[0];
 800c6da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c6de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c6e2:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 800c6e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c6e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c6ec:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 800c6ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c6f2:	799b      	ldrb	r3, [r3, #6]
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d116      	bne.n	800c726 <lfs_dir_orphaningcommit+0x266>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 800c6f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c6fc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c700:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f7fc fea8 	bl	800945c <lfs_pair_cmp>
 800c70c:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d109      	bne.n	800c726 <lfs_dir_orphaningcommit+0x266>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 800c712:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c716:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c71a:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 800c71c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c720:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c724:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c726:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c730:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1c3      	bne.n	800c6c0 <lfs_dir_orphaningcommit+0x200>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 800c738:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c73c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c740:	4619      	mov	r1, r3
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f002 fa3c 	bl	800ebc0 <lfs_fs_parent>
 800c748:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 800c74c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c750:	2b00      	cmp	r3, #0
 800c752:	da07      	bge.n	800c764 <lfs_dir_orphaningcommit+0x2a4>
 800c754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c758:	f113 0f02 	cmn.w	r3, #2
 800c75c:	d002      	beq.n	800c764 <lfs_dir_orphaningcommit+0x2a4>
            return tag;
 800c75e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c762:	e161      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 800c764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c768:	f113 0f02 	cmn.w	r3, #2
 800c76c:	bf14      	ite	ne
 800c76e:	2301      	movne	r3, #1
 800c770:	2300      	moveq	r3, #0
 800c772:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 800c776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c77a:	f113 0f02 	cmn.w	r3, #2
 800c77e:	f000 808f 	beq.w	800c8a0 <lfs_dir_orphaningcommit+0x3e0>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 800c782:	2101      	movs	r1, #1
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f002 fa73 	bl	800ec70 <lfs_fs_preporphans>
 800c78a:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 800c78e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c792:	2b00      	cmp	r3, #0
 800c794:	d002      	beq.n	800c79c <lfs_dir_orphaningcommit+0x2dc>
                return err;
 800c796:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c79a:	e145      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800c79c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c7a0:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	3330      	adds	r3, #48	; 0x30
 800c7a8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fc ffe2 	bl	8009778 <lfs_gstate_hasmovehere>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d01e      	beq.n	800c7f8 <lfs_dir_orphaningcommit+0x338>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7fc ff32 	bl	8009628 <lfs_tag_id>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f002 fa87 	bl	800ece4 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 800c7d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fc ff24 	bl	8009628 <lfs_tag_id>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d205      	bcs.n	800c7f8 <lfs_dir_orphaningcommit+0x338>
                    tag -= LFS_MKTAG(0, 1, 0);
 800c7ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c7f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c7f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 800c7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7fa:	657b      	str	r3, [r7, #84]	; 0x54
 800c7fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7fe:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 800c800:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c804:	4618      	mov	r0, r3
 800c806:	f7fc fe9a 	bl	800953e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 800c80a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c80e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c812:	4293      	cmp	r3, r2
 800c814:	d007      	beq.n	800c826 <lfs_dir_orphaningcommit+0x366>
 800c816:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c81a:	029b      	lsls	r3, r3, #10
 800c81c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800c820:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800c824:	e000      	b.n	800c828 <lfs_dir_orphaningcommit+0x368>
 800c826:	2300      	movs	r3, #0
 800c828:	647b      	str	r3, [r7, #68]	; 0x44
 800c82a:	2300      	movs	r3, #0
 800c82c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c82e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c832:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c834:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c838:	653b      	str	r3, [r7, #80]	; 0x50
 800c83a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c83e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800c842:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800c846:	2000      	movs	r0, #0
 800c848:	9001      	str	r0, [sp, #4]
 800c84a:	2002      	movs	r0, #2
 800c84c:	9000      	str	r0, [sp, #0]
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f7ff fb80 	bl	800bf54 <lfs_dir_relocatingcommit>
 800c854:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800c858:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fc fe54 	bl	800950a <lfs_pair_fromle32>
            if (state < 0) {
 800c862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c866:	2b00      	cmp	r3, #0
 800c868:	da02      	bge.n	800c870 <lfs_dir_orphaningcommit+0x3b0>
                return state;
 800c86a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c86e:	e0db      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
            }

            if (state == LFS_OK_RELOCATED) {
 800c870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c874:	2b01      	cmp	r3, #1
 800c876:	d113      	bne.n	800c8a0 <lfs_dir_orphaningcommit+0x3e0>
                lpair[0] = ppair[0];
 800c878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c87a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 800c87e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 800c884:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800c888:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800c88c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c88e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c890:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 800c898:	2301      	movs	r3, #1
 800c89a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800c89e:	e0b7      	b.n	800ca10 <lfs_dir_orphaningcommit+0x550>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 800c8a0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c8a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f002 f900 	bl	800eab0 <lfs_fs_pred>
 800c8b0:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 800c8b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d007      	beq.n	800c8cc <lfs_dir_orphaningcommit+0x40c>
 800c8bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8c0:	f113 0f02 	cmn.w	r3, #2
 800c8c4:	d002      	beq.n	800c8cc <lfs_dir_orphaningcommit+0x40c>
            return err;
 800c8c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8ca:	e0ad      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 800c8cc:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00b      	beq.n	800c8ec <lfs_dir_orphaningcommit+0x42c>
 800c8d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8d8:	f113 0f02 	cmn.w	r3, #2
 800c8dc:	d106      	bne.n	800c8ec <lfs_dir_orphaningcommit+0x42c>
 800c8de:	4b14      	ldr	r3, [pc, #80]	; (800c930 <lfs_dir_orphaningcommit+0x470>)
 800c8e0:	4a14      	ldr	r2, [pc, #80]	; (800c934 <lfs_dir_orphaningcommit+0x474>)
 800c8e2:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800c8e6:	4814      	ldr	r0, [pc, #80]	; (800c938 <lfs_dir_orphaningcommit+0x478>)
 800c8e8:	f00f fc28 	bl	801c13c <__assert_func>

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 800c8ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c8f0:	f113 0f02 	cmn.w	r3, #2
 800c8f4:	f000 808c 	beq.w	800ca10 <lfs_dir_orphaningcommit+0x550>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	3330      	adds	r3, #48	; 0x30
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fc ff06 	bl	800970e <lfs_gstate_hasorphans>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d019      	beq.n	800c93c <lfs_dir_orphaningcommit+0x47c>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 800c908:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800c90c:	425b      	negs	r3, r3
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	b25b      	sxtb	r3, r3
 800c912:	4619      	mov	r1, r3
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f002 f9ab 	bl	800ec70 <lfs_fs_preporphans>
 800c91a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 800c91e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00a      	beq.n	800c93c <lfs_dir_orphaningcommit+0x47c>
                    return err;
 800c926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c92a:	e07d      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
 800c92c:	000ffc08 	.word	0x000ffc08
 800c930:	0801e278 	.word	0x0801e278
 800c934:	08021634 	.word	0x08021634
 800c938:	0801e040 	.word	0x0801e040
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 800c93c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c940:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	3330      	adds	r3, #48	; 0x30
 800c948:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c94c:	4611      	mov	r1, r2
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fc ff12 	bl	8009778 <lfs_gstate_hasmovehere>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00d      	beq.n	800c976 <lfs_dir_orphaningcommit+0x4b6>
                moveid = lfs_tag_id(lfs->gstate.tag);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fc fe62 	bl	8009628 <lfs_tag_id>
 800c964:	4603      	mov	r3, r0
 800c966:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800c96a:	2200      	movs	r2, #0
 800c96c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f002 f9b7 	bl	800ece4 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 800c976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c978:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 800c97c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c97e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 800c982:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c986:	4618      	mov	r0, r3
 800c988:	f7fc fdd9 	bl	800953e <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 800c98c:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c990:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c994:	4293      	cmp	r3, r2
 800c996:	d007      	beq.n	800c9a8 <lfs_dir_orphaningcommit+0x4e8>
 800c998:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c99c:	029b      	lsls	r3, r3, #10
 800c99e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800c9a2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800c9a6:	e000      	b.n	800c9aa <lfs_dir_orphaningcommit+0x4ea>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9b0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c9b4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800c9b8:	051a      	lsls	r2, r3, #20
 800c9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ca30 <lfs_dir_orphaningcommit+0x570>)
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c9c4:	633b      	str	r3, [r7, #48]	; 0x30
 800c9c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9ca:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800c9ce:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	9001      	str	r0, [sp, #4]
 800c9d6:	2002      	movs	r0, #2
 800c9d8:	9000      	str	r0, [sp, #0]
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f7ff faba 	bl	800bf54 <lfs_dir_relocatingcommit>
 800c9e0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 800c9e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fc fd8e 	bl	800950a <lfs_pair_fromle32>
            if (state < 0) {
 800c9ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	da02      	bge.n	800c9fc <lfs_dir_orphaningcommit+0x53c>
                return state;
 800c9f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9fa:	e015      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
            }

            ldir = pdir;
 800c9fc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800ca00:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 800ca04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ca0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 800ca10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	f43f ae37 	beq.w	800c688 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 800ca1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d001      	beq.n	800ca26 <lfs_dir_orphaningcommit+0x566>
 800ca22:	2303      	movs	r3, #3
 800ca24:	e000      	b.n	800ca28 <lfs_dir_orphaningcommit+0x568>
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	37e0      	adds	r7, #224	; 0xe0
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca30:	000ffc08 	.word	0x000ffc08

0800ca34 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b086      	sub	sp, #24
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	68b9      	ldr	r1, [r7, #8]
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7ff fd39 	bl	800c4c0 <lfs_dir_orphaningcommit>
 800ca4e:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	da01      	bge.n	800ca5a <lfs_dir_commit+0x26>
        return orphans;
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	e00d      	b.n	800ca76 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d009      	beq.n	800ca74 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 800ca60:	2100      	movs	r1, #0
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f002 f9c2 	bl	800edec <lfs_fs_deorphan>
 800ca68:	6138      	str	r0, [r7, #16]
        if (err) {
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <lfs_dir_commit+0x40>
            return err;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	e000      	b.n	800ca76 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3718      	adds	r7, #24
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 800ca80:	b5b0      	push	{r4, r5, r7, lr}
 800ca82:	b0b8      	sub	sp, #224	; 0xe0
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f002 fb1c 	bl	800f0c8 <lfs_fs_forceconsistency>
 800ca90:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800ca94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <lfs_rawmkdir+0x22>
        return err;
 800ca9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caa0:	e128      	b.n	800ccf4 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 800caaa:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 800caae:	463a      	mov	r2, r7
 800cab0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800cab4:	f103 0108 	add.w	r1, r3, #8
 800cab8:	4603      	mov	r3, r0
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7fe fb50 	bl	800b160 <lfs_dir_find>
 800cac0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 800cac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cac8:	f113 0f02 	cmn.w	r3, #2
 800cacc:	d105      	bne.n	800cada <lfs_rawmkdir+0x5a>
 800cace:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800cad2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d109      	bne.n	800caee <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 800cada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cade:	2b00      	cmp	r3, #0
 800cae0:	da02      	bge.n	800cae8 <lfs_rawmkdir+0x68>
 800cae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cae6:	e105      	b.n	800ccf4 <lfs_rawmkdir+0x274>
 800cae8:	f06f 0310 	mvn.w	r3, #16
 800caec:	e102      	b.n	800ccf4 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7f3 fb6d 	bl	80001d0 <strlen>
 800caf6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cafe:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d902      	bls.n	800cb0c <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 800cb06:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800cb0a:	e0f3      	b.n	800ccf4 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7fc ffbb 	bl	8009a88 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 800cb12:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800cb16:	4619      	mov	r1, r3
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f7fe fe0d 	bl	800b738 <lfs_dir_alloc>
 800cb1e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800cb22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d002      	beq.n	800cb30 <lfs_rawmkdir+0xb0>
        return err;
 800cb2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb2e:	e0e1      	b.n	800ccf4 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 800cb30:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800cb34:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800cb38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cb40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 800cb44:	e012      	b.n	800cb6c <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 800cb46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cb4a:	f103 0218 	add.w	r2, r3, #24
 800cb4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cb52:	4619      	mov	r1, r3
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7fe f9f1 	bl	800af3c <lfs_dir_fetch>
 800cb5a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800cb5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d002      	beq.n	800cb6c <lfs_rawmkdir+0xec>
            return err;
 800cb66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb6a:	e0c3      	b.n	800ccf4 <lfs_rawmkdir+0x274>
    while (pred.split) {
 800cb6c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1e8      	bne.n	800cb46 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 800cb74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cb78:	3318      	adds	r3, #24
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fc fcdf 	bl	800953e <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 800cb80:	4b5e      	ldr	r3, [pc, #376]	; (800ccfc <lfs_rawmkdir+0x27c>)
 800cb82:	667b      	str	r3, [r7, #100]	; 0x64
 800cb84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cb88:	3318      	adds	r3, #24
 800cb8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb8c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800cb90:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800cb94:	2301      	movs	r3, #1
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7ff ff4c 	bl	800ca34 <lfs_dir_commit>
 800cb9c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 800cba0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cba4:	3318      	adds	r3, #24
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fc fcaf 	bl	800950a <lfs_pair_fromle32>
    if (err) {
 800cbac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <lfs_rawmkdir+0x13a>
        return err;
 800cbb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbb8:	e09c      	b.n	800ccf4 <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 800cbba:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d04c      	beq.n	800cc5c <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 800cbc2:	2101      	movs	r1, #1
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f002 f853 	bl	800ec70 <lfs_fs_preporphans>
 800cbca:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800cbce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d002      	beq.n	800cbdc <lfs_rawmkdir+0x15c>
            return err;
 800cbd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbda:	e08b      	b.n	800ccf4 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800cbee:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 800cbf0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fc fca2 	bl	800953e <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 800cbfa:	4b40      	ldr	r3, [pc, #256]	; (800ccfc <lfs_rawmkdir+0x27c>)
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800cc02:	61bb      	str	r3, [r7, #24]
 800cc04:	f107 0214 	add.w	r2, r7, #20
 800cc08:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff ff10 	bl	800ca34 <lfs_dir_commit>
 800cc14:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 800cc18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fc fc74 	bl	800950a <lfs_pair_fromle32>
        if (err) {
 800cc22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d006      	beq.n	800cc38 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 800cc2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 800cc32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc36:	e05d      	b.n	800ccf4 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 800cc38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 800cc40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f002 f813 	bl	800ec70 <lfs_fs_preporphans>
 800cc4a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800cc4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d002      	beq.n	800cc5c <lfs_rawmkdir+0x1dc>
            return err;
 800cc56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc5a:	e04b      	b.n	800ccf4 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 800cc5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fc fc6c 	bl	800953e <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 800cc66:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800cc6a:	029b      	lsls	r3, r3, #10
 800cc6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc76:	2300      	movs	r3, #0
 800cc78:	643b      	str	r3, [r7, #64]	; 0x40
 800cc7a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800cc7e:	029a      	lsls	r2, r3, #10
 800cc80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc84:	4313      	orrs	r3, r2
 800cc86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cc8a:	647b      	str	r3, [r7, #68]	; 0x44
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc90:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800cc94:	029b      	lsls	r3, r3, #10
 800cc96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc9a:	f043 0308 	orr.w	r3, r3, #8
 800cc9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cca0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800cca4:	653b      	str	r3, [r7, #80]	; 0x50
 800cca6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800ccaa:	f083 0301 	eor.w	r3, r3, #1
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <lfs_rawmkdir+0x238>
 800ccb4:	4b11      	ldr	r3, [pc, #68]	; (800ccfc <lfs_rawmkdir+0x27c>)
 800ccb6:	e000      	b.n	800ccba <lfs_rawmkdir+0x23a>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	657b      	str	r3, [r7, #84]	; 0x54
 800ccbc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ccc0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ccc2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ccc6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800ccca:	f103 0108 	add.w	r1, r3, #8
 800ccce:	2304      	movs	r3, #4
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7ff feaf 	bl	800ca34 <lfs_dir_commit>
 800ccd6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 800ccda:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fc fc13 	bl	800950a <lfs_pair_fromle32>
    if (err) {
 800cce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d002      	beq.n	800ccf2 <lfs_rawmkdir+0x272>
        return err;
 800ccec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccf0:	e000      	b.n	800ccf4 <lfs_rawmkdir+0x274>
    }

    return 0;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	37e0      	adds	r7, #224	; 0xe0
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bdb0      	pop	{r4, r5, r7, pc}
 800ccfc:	600ffc08 	.word	0x600ffc08

0800cd00 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 800cd00:	b590      	push	{r4, r7, lr}
 800cd02:	b08d      	sub	sp, #52	; 0x34
 800cd04:	af02      	add	r7, sp, #8
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	f103 0108 	add.w	r1, r3, #8
 800cd12:	1d3a      	adds	r2, r7, #4
 800cd14:	2300      	movs	r3, #0
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f7fe fa22 	bl	800b160 <lfs_dir_find>
 800cd1c:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	da01      	bge.n	800cd28 <lfs_dir_rawopen+0x28>
        return tag;
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	e05e      	b.n	800cde6 <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fc fc52 	bl	80095d4 <lfs_tag_type3>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d002      	beq.n	800cd3c <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 800cd36:	f06f 0313 	mvn.w	r3, #19
 800cd3a:	e054      	b.n	800cde6 <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fc fc72 	bl	8009628 <lfs_tag_id>
 800cd44:	4603      	mov	r3, r0
 800cd46:	461a      	mov	r2, r3
 800cd48:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d106      	bne.n	800cd5e <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5a:	61bb      	str	r3, [r7, #24]
 800cd5c:	e01f      	b.n	800cd9e <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 800cd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fc fc5e 	bl	8009628 <lfs_tag_id>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800cd70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd74:	f043 0308 	orr.w	r3, r3, #8
 800cd78:	f107 0214 	add.w	r2, r7, #20
 800cd7c:	9200      	str	r2, [sp, #0]
 800cd7e:	4a1c      	ldr	r2, [pc, #112]	; (800cdf0 <lfs_dir_rawopen+0xf0>)
 800cd80:	4621      	mov	r1, r4
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7fd f83a 	bl	8009dfc <lfs_dir_get>
 800cd88:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	da01      	bge.n	800cd94 <lfs_dir_rawopen+0x94>
            return res;
 800cd90:	6a3b      	ldr	r3, [r7, #32]
 800cd92:	e028      	b.n	800cde6 <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 800cd94:	f107 0314 	add.w	r3, r7, #20
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fc fbb6 	bl	800950a <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	3308      	adds	r3, #8
 800cda2:	f107 0214 	add.w	r2, r7, #20
 800cda6:	4619      	mov	r1, r3
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f7fe f8c7 	bl	800af3c <lfs_dir_fetch>
 800cdae:	61f8      	str	r0, [r7, #28]
    if (err) {
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <lfs_dir_rawopen+0xba>
        return err;
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	e015      	b.n	800cde6 <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	689a      	ldr	r2, [r3, #8]
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	68da      	ldr	r2, [r3, #12]
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2202      	movs	r2, #2
 800cdda:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 800cddc:	68b9      	ldr	r1, [r7, #8]
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f7fc fe09 	bl	80099f6 <lfs_mlist_append>

    return 0;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	372c      	adds	r7, #44	; 0x2c
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd90      	pop	{r4, r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	700ffc00 	.word	0x700ffc00

0800cdf4 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 800cdfe:	6839      	ldr	r1, [r7, #0]
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7fc fdd6 	bl	80099b2 <lfs_mlist_remove>

    return 0;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 800ce1c:	f44f 7284 	mov.w	r2, #264	; 0x108
 800ce20:	2100      	movs	r1, #0
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f00f fd06 	bl	801c834 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d110      	bne.n	800ce52 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2202      	movs	r2, #2
 800ce34:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	3308      	adds	r3, #8
 800ce3a:	4935      	ldr	r1, [pc, #212]	; (800cf10 <lfs_dir_rawread+0x100>)
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	460b      	mov	r3, r1
 800ce40:	881b      	ldrh	r3, [r3, #0]
 800ce42:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce48:	1c5a      	adds	r2, r3, #1
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e05a      	b.n	800cf08 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d110      	bne.n	800ce7c <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2202      	movs	r2, #2
 800ce5e:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3308      	adds	r3, #8
 800ce64:	4a2b      	ldr	r2, [pc, #172]	; (800cf14 <lfs_dir_rawread+0x104>)
 800ce66:	8811      	ldrh	r1, [r2, #0]
 800ce68:	7892      	ldrb	r2, [r2, #2]
 800ce6a:	8019      	strh	r1, [r3, #0]
 800ce6c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce72:	1c5a      	adds	r2, r3, #1
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e045      	b.n	800cf08 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	889a      	ldrh	r2, [r3, #4]
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	8b9b      	ldrh	r3, [r3, #28]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d11a      	bne.n	800cebe <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	7fdb      	ldrb	r3, [r3, #31]
 800ce8c:	f083 0301 	eor.w	r3, r3, #1
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d001      	beq.n	800ce9a <lfs_dir_rawread+0x8a>
                return false;
 800ce96:	2300      	movs	r3, #0
 800ce98:	e036      	b.n	800cf08 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	f103 0108 	add.w	r1, r3, #8
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	3320      	adds	r3, #32
 800cea4:	461a      	mov	r2, r3
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f7fe f848 	bl	800af3c <lfs_dir_fetch>
 800ceac:	6178      	str	r0, [r7, #20]
            if (err) {
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <lfs_dir_rawread+0xa8>
                return err;
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	e027      	b.n	800cf08 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2200      	movs	r2, #0
 800cebc:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	f103 0108 	add.w	r1, r3, #8
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	889a      	ldrh	r2, [r3, #4]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f7fe f884 	bl	800afd8 <lfs_dir_getinfo>
 800ced0:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d005      	beq.n	800cee4 <lfs_dir_rawread+0xd4>
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	f113 0f02 	cmn.w	r3, #2
 800cede:	d001      	beq.n	800cee4 <lfs_dir_rawread+0xd4>
            return err;
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	e011      	b.n	800cf08 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	889b      	ldrh	r3, [r3, #4]
 800cee8:	3301      	adds	r3, #1
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	f113 0f02 	cmn.w	r3, #2
 800cef6:	d100      	bne.n	800cefa <lfs_dir_rawread+0xea>
    while (true) {
 800cef8:	e7c0      	b.n	800ce7c <lfs_dir_rawread+0x6c>
            break;
 800cefa:	bf00      	nop
        }
    }

    dir->pos += 1;
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf00:	1c5a      	adds	r2, r3, #1
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 800cf06:	2301      	movs	r3, #1
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3718      	adds	r7, #24
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	0801e19c 	.word	0x0801e19c
 800cf14:	0801e1a0 	.word	0x0801e1a0

0800cf18 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800cf18:	b590      	push	{r4, r7, lr}
 800cf1a:	b087      	sub	sp, #28
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	3b08      	subs	r3, #8
 800cf30:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf3a:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d101      	bne.n	800cf46 <lfs_ctz_index+0x2e>
        return 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	e01c      	b.n	800cf80 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fb feac 	bl	8008ca8 <lfs_popc>
 800cf50:	4603      	mov	r3, r0
 800cf52:	3302      	adds	r3, #2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	1ad2      	subs	r2, r2, r3
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf60:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	fb02 f303 	mul.w	r3, r2, r3
 800cf6a:	697a      	ldr	r2, [r7, #20]
 800cf6c:	1ad4      	subs	r4, r2, r3
 800cf6e:	68f8      	ldr	r0, [r7, #12]
 800cf70:	f7fb fe9a 	bl	8008ca8 <lfs_popc>
 800cf74:	4603      	mov	r3, r0
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	1ae2      	subs	r2, r4, r3
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	601a      	str	r2, [r3, #0]
    return i;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	371c      	adds	r7, #28
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd90      	pop	{r4, r7, pc}

0800cf88 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800cf88:	b590      	push	{r4, r7, lr}
 800cf8a:	b08f      	sub	sp, #60	; 0x3c
 800cf8c:	af04      	add	r7, sp, #16
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
 800cf94:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d108      	bne.n	800cfae <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800cf9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfa2:	601a      	str	r2, [r3, #0]
        *off = 0;
 800cfa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	601a      	str	r2, [r3, #0]
        return 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	e053      	b.n	800d056 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800cfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb0:	3b01      	subs	r3, #1
 800cfb2:	617b      	str	r3, [r7, #20]
 800cfb4:	f107 0314 	add.w	r3, r7, #20
 800cfb8:	4619      	mov	r1, r3
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f7ff ffac 	bl	800cf18 <lfs_ctz_index>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800cfc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cfc8:	4619      	mov	r1, r3
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f7ff ffa4 	bl	800cf18 <lfs_ctz_index>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800cfd4:	e034      	b.n	800d040 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800cfd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	3301      	adds	r3, #1
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fb fe43 	bl	8008c6a <lfs_npw2>
 800cfe4:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800cfe6:	1e5c      	subs	r4, r3, #1
 800cfe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfea:	f7fb fe4e 	bl	8008c8a <lfs_ctz>
 800cfee:	4603      	mov	r3, r0
 800cff0:	4619      	mov	r1, r3
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7fb fe02 	bl	8008bfc <lfs_min>
 800cff8:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	69fa      	ldr	r2, [r7, #28]
 800cffe:	0092      	lsls	r2, r2, #2
 800d000:	2104      	movs	r1, #4
 800d002:	9103      	str	r1, [sp, #12]
 800d004:	4639      	mov	r1, r7
 800d006:	9102      	str	r1, [sp, #8]
 800d008:	9201      	str	r2, [sp, #4]
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	2304      	movs	r3, #4
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	68b9      	ldr	r1, [r7, #8]
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f7fb fece 	bl	8008db4 <lfs_bd_read>
 800d018:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fb fe5d 	bl	8008cdc <lfs_fromle32>
 800d022:	4603      	mov	r3, r0
 800d024:	603b      	str	r3, [r7, #0]
        if (err) {
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <lfs_ctz_find+0xa8>
            return err;
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	e012      	b.n	800d056 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800d030:	2201      	movs	r2, #1
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	fa02 f303 	lsl.w	r3, r2, r3
 800d038:	461a      	mov	r2, r3
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	1a9b      	subs	r3, r3, r2
 800d03e:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800d040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d042:	6a3b      	ldr	r3, [r7, #32]
 800d044:	429a      	cmp	r2, r3
 800d046:	d8c6      	bhi.n	800cfd6 <lfs_ctz_find+0x4e>
    }

    *block = head;
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d04c:	601a      	str	r2, [r3, #0]
    *off = pos;
 800d04e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d052:	601a      	str	r2, [r3, #0]
    return 0;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	372c      	adds	r7, #44	; 0x2c
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd90      	pop	{r4, r7, pc}

0800d05e <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800d05e:	b580      	push	{r7, lr}
 800d060:	b092      	sub	sp, #72	; 0x48
 800d062:	af04      	add	r7, sp, #16
 800d064:	60f8      	str	r0, [r7, #12]
 800d066:	60b9      	str	r1, [r7, #8]
 800d068:	607a      	str	r2, [r7, #4]
 800d06a:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800d06c:	f107 0320 	add.w	r3, r7, #32
 800d070:	4619      	mov	r1, r3
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f7fc fd28 	bl	8009ac8 <lfs_alloc>
 800d078:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <lfs_ctz_extend+0x26>
            return err;
 800d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d082:	e0e0      	b.n	800d246 <lfs_ctz_extend+0x1e8>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800d084:	6a3b      	ldr	r3, [r7, #32]
 800d086:	4619      	mov	r1, r3
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f7fc f985 	bl	8009398 <lfs_bd_erase>
 800d08e:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800d090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d092:	2b00      	cmp	r3, #0
 800d094:	d006      	beq.n	800d0a4 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800d096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d098:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d09c:	f000 80cb 	beq.w	800d236 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800d0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a2:	e0d0      	b.n	800d246 <lfs_ctz_extend+0x1e8>
            }

            if (size == 0) {
 800d0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d107      	bne.n	800d0ba <lfs_ctz_extend+0x5c>
                *block = nblock;
 800d0aa:	6a3a      	ldr	r2, [r7, #32]
 800d0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ae:	601a      	str	r2, [r3, #0]
                *off = 0;
 800d0b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	601a      	str	r2, [r3, #0]
                return 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e0c5      	b.n	800d246 <lfs_ctz_extend+0x1e8>
            }

            lfs_size_t noff = size - 1;
 800d0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800d0c0:	f107 031c 	add.w	r3, r7, #28
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f7ff ff26 	bl	800cf18 <lfs_ctz_index>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0da:	69da      	ldr	r2, [r3, #28]
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d044      	beq.n	800d16c <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e6:	e035      	b.n	800d154 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800d0e8:	69fa      	ldr	r2, [r7, #28]
 800d0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ec:	1ad2      	subs	r2, r2, r3
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	9303      	str	r3, [sp, #12]
 800d0f2:	f107 0317 	add.w	r3, r7, #23
 800d0f6:	9302      	str	r3, [sp, #8]
 800d0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fa:	9301      	str	r3, [sp, #4]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	4613      	mov	r3, r2
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	2100      	movs	r1, #0
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f7fb fe54 	bl	8008db4 <lfs_bd_read>
 800d10c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	2b00      	cmp	r3, #0
 800d112:	d001      	beq.n	800d118 <lfs_ctz_extend+0xba>
                        return err;
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	e096      	b.n	800d246 <lfs_ctz_extend+0x1e8>
                    }

                    err = lfs_bd_prog(lfs,
 800d118:	6a3b      	ldr	r3, [r7, #32]
 800d11a:	2201      	movs	r2, #1
 800d11c:	9203      	str	r2, [sp, #12]
 800d11e:	f107 0217 	add.w	r2, r7, #23
 800d122:	9202      	str	r2, [sp, #8]
 800d124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d126:	9201      	str	r2, [sp, #4]
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	2301      	movs	r3, #1
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	68b9      	ldr	r1, [r7, #8]
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7fc f885 	bl	8009240 <lfs_bd_prog>
 800d136:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800d138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d007      	beq.n	800d14e <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d140:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d144:	d101      	bne.n	800d14a <lfs_ctz_extend+0xec>
                            goto relocate;
 800d146:	bf00      	nop
                    goto relocate;
 800d148:	e075      	b.n	800d236 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800d14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800d14c:	e07b      	b.n	800d246 <lfs_ctz_extend+0x1e8>
                for (lfs_off_t i = 0; i < noff; i++) {
 800d14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d150:	3301      	adds	r3, #1
 800d152:	637b      	str	r3, [r7, #52]	; 0x34
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d158:	429a      	cmp	r2, r3
 800d15a:	d3c5      	bcc.n	800d0e8 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800d15c:	6a3a      	ldr	r2, [r7, #32]
 800d15e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d160:	601a      	str	r2, [r3, #0]
                *off = noff;
 800d162:	69fa      	ldr	r2, [r7, #28]
 800d164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d166:	601a      	str	r2, [r3, #0]
                return 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	e06c      	b.n	800d246 <lfs_ctz_extend+0x1e8>
            }

            // append block
            index += 1;
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	3301      	adds	r3, #1
 800d170:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800d172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d174:	f7fb fd89 	bl	8008c8a <lfs_ctz>
 800d178:	4603      	mov	r3, r0
 800d17a:	3301      	adds	r3, #1
 800d17c:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800d182:	2300      	movs	r3, #0
 800d184:	633b      	str	r3, [r7, #48]	; 0x30
 800d186:	e049      	b.n	800d21c <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fb fdb1 	bl	8008cf2 <lfs_tole32>
 800d190:	4603      	mov	r3, r0
 800d192:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d198:	0092      	lsls	r2, r2, #2
 800d19a:	2104      	movs	r1, #4
 800d19c:	9103      	str	r1, [sp, #12]
 800d19e:	f107 0118 	add.w	r1, r7, #24
 800d1a2:	9102      	str	r1, [sp, #8]
 800d1a4:	9201      	str	r2, [sp, #4]
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	68b9      	ldr	r1, [r7, #8]
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f7fc f846 	bl	8009240 <lfs_bd_prog>
 800d1b4:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fb fd8f 	bl	8008cdc <lfs_fromle32>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	61bb      	str	r3, [r7, #24]
                if (err) {
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d005      	beq.n	800d1d4 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d1ce:	d034      	beq.n	800d23a <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800d1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d2:	e038      	b.n	800d246 <lfs_ctz_extend+0x1e8>
                }

                if (i != skips-1) {
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d01b      	beq.n	800d216 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1e2:	0092      	lsls	r2, r2, #2
 800d1e4:	2104      	movs	r1, #4
 800d1e6:	9103      	str	r1, [sp, #12]
 800d1e8:	f107 0118 	add.w	r1, r7, #24
 800d1ec:	9102      	str	r1, [sp, #8]
 800d1ee:	9201      	str	r2, [sp, #4]
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	2304      	movs	r3, #4
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f7fb fddb 	bl	8008db4 <lfs_bd_read>
 800d1fe:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	4618      	mov	r0, r3
 800d204:	f7fb fd6a 	bl	8008cdc <lfs_fromle32>
 800d208:	4603      	mov	r3, r0
 800d20a:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800d20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d001      	beq.n	800d216 <lfs_ctz_extend+0x1b8>
                        return err;
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	e017      	b.n	800d246 <lfs_ctz_extend+0x1e8>
            for (lfs_off_t i = 0; i < skips; i++) {
 800d216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d218:	3301      	adds	r3, #1
 800d21a:	633b      	str	r3, [r7, #48]	; 0x30
 800d21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d220:	429a      	cmp	r2, r3
 800d222:	d3b1      	bcc.n	800d188 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800d224:	6a3a      	ldr	r2, [r7, #32]
 800d226:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d228:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800d22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22c:	009a      	lsls	r2, r3, #2
 800d22e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d230:	601a      	str	r2, [r3, #0]
            return 0;
 800d232:	2300      	movs	r3, #0
 800d234:	e007      	b.n	800d246 <lfs_ctz_extend+0x1e8>
                    goto relocate;
 800d236:	bf00      	nop
 800d238:	e000      	b.n	800d23c <lfs_ctz_extend+0x1de>
                        goto relocate;
 800d23a:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800d23c:	68b9      	ldr	r1, [r7, #8]
 800d23e:	68f8      	ldr	r0, [r7, #12]
 800d240:	f7fb fd92 	bl	8008d68 <lfs_cache_drop>
    while (true) {
 800d244:	e712      	b.n	800d06c <lfs_ctz_extend+0xe>
    }
}
 800d246:	4618      	mov	r0, r3
 800d248:	3738      	adds	r7, #56	; 0x38
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800d24e:	b580      	push	{r7, lr}
 800d250:	b090      	sub	sp, #64	; 0x40
 800d252:	af04      	add	r7, sp, #16
 800d254:	60f8      	str	r0, [r7, #12]
 800d256:	60b9      	str	r1, [r7, #8]
 800d258:	607a      	str	r2, [r7, #4]
 800d25a:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800d25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <lfs_ctz_traverse+0x18>
        return 0;
 800d262:	2300      	movs	r3, #0
 800d264:	e06b      	b.n	800d33e <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	3b01      	subs	r3, #1
 800d26a:	61fb      	str	r3, [r7, #28]
 800d26c:	f107 031c 	add.w	r3, r7, #28
 800d270:	4619      	mov	r1, r3
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f7ff fe50 	bl	800cf18 <lfs_ctz_index>
 800d278:	4603      	mov	r3, r0
 800d27a:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800d27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d282:	4798      	blx	r3
 800d284:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <lfs_ctz_traverse+0x42>
            return err;
 800d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28e:	e056      	b.n	800d33e <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	2b00      	cmp	r3, #0
 800d294:	d101      	bne.n	800d29a <lfs_ctz_traverse+0x4c>
            return 0;
 800d296:	2300      	movs	r3, #0
 800d298:	e051      	b.n	800d33e <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	f1c3 0302 	rsb	r3, r3, #2
 800d2a4:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800d2a6:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800d2a8:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800d2ac:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800d2ae:	9303      	str	r3, [sp, #12]
 800d2b0:	f107 0314 	add.w	r3, r7, #20
 800d2b4:	9302      	str	r3, [sp, #8]
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	68b9      	ldr	r1, [r7, #8]
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f7fb fd75 	bl	8008db4 <lfs_bd_read>
 800d2ca:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fb fd04 	bl	8008cdc <lfs_fromle32>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fb fcfe 	bl	8008cdc <lfs_fromle32>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	61bb      	str	r3, [r7, #24]
        if (err) {
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <lfs_ctz_traverse+0xa0>
            return err;
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ec:	e027      	b.n	800d33e <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2f2:	e012      	b.n	800d31a <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	3330      	adds	r3, #48	; 0x30
 800d2fa:	443b      	add	r3, r7
 800d2fc:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800d300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d302:	4611      	mov	r1, r2
 800d304:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d306:	4798      	blx	r3
 800d308:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <lfs_ctz_traverse+0xc6>
                return err;
 800d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d312:	e014      	b.n	800d33e <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800d314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d316:	3301      	adds	r3, #1
 800d318:	62bb      	str	r3, [r7, #40]	; 0x28
 800d31a:	6a3b      	ldr	r3, [r7, #32]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d320:	429a      	cmp	r2, r3
 800d322:	dbe7      	blt.n	800d2f4 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800d324:	6a3b      	ldr	r3, [r7, #32]
 800d326:	3b01      	subs	r3, #1
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	3330      	adds	r3, #48	; 0x30
 800d32c:	443b      	add	r3, r7
 800d32e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800d332:	603b      	str	r3, [r7, #0]
        index -= count;
 800d334:	6a3b      	ldr	r3, [r7, #32]
 800d336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800d33c:	e79e      	b.n	800d27c <lfs_ctz_traverse+0x2e>
    }
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3730      	adds	r7, #48	; 0x30
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
	...

0800d348 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800d348:	b5b0      	push	{r4, r5, r7, lr}
 800d34a:	b09a      	sub	sp, #104	; 0x68
 800d34c:	af02      	add	r7, sp, #8
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
 800d354:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	f003 0302 	and.w	r3, r3, #2
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d008      	beq.n	800d372 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f001 feb1 	bl	800f0c8 <lfs_fs_forceconsistency>
 800d366:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 800d368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d001      	beq.n	800d372 <lfs_file_rawopencfg+0x2a>
            return err;
 800d36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d370:	e1b0      	b.n	800d6d4 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d376:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	2200      	movs	r2, #0
 800d382:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2200      	movs	r2, #0
 800d388:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2200      	movs	r2, #0
 800d38e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	f103 0108 	add.w	r1, r3, #8
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	3304      	adds	r3, #4
 800d39a:	1d3a      	adds	r2, r7, #4
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f7fd fedf 	bl	800b160 <lfs_dir_find>
 800d3a2:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800d3a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	da0c      	bge.n	800d3c4 <lfs_file_rawopencfg+0x7c>
 800d3aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3ac:	f113 0f02 	cmn.w	r3, #2
 800d3b0:	d105      	bne.n	800d3be <lfs_file_rawopencfg+0x76>
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	889b      	ldrh	r3, [r3, #4]
 800d3b6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d102      	bne.n	800d3c4 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800d3be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800d3c2:	e17c      	b.n	800d6be <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800d3ca:	68b9      	ldr	r1, [r7, #8]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7fc fb12 	bl	80099f6 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800d3d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3d4:	f113 0f02 	cmn.w	r3, #2
 800d3d8:	d14e      	bne.n	800d478 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d103      	bne.n	800d3ec <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 800d3e4:	f06f 0301 	mvn.w	r3, #1
 800d3e8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800d3ea:	e168      	b.n	800d6be <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7f2 feee 	bl	80001d0 <strlen>
 800d3f4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d903      	bls.n	800d408 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 800d400:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800d404:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800d406:	e15a      	b.n	800d6be <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	f103 0108 	add.w	r1, r3, #8
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	889b      	ldrh	r3, [r3, #4]
 800d412:	029b      	lsls	r3, r3, #10
 800d414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d41c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d41e:	2300      	movs	r3, #0
 800d420:	633b      	str	r3, [r7, #48]	; 0x30
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	889b      	ldrh	r3, [r3, #4]
 800d426:	029a      	lsls	r2, r3, #10
 800d428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d42a:	4313      	orrs	r3, r2
 800d42c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d430:	637b      	str	r3, [r7, #52]	; 0x34
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	63bb      	str	r3, [r7, #56]	; 0x38
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	889b      	ldrh	r3, [r3, #4]
 800d43a:	029b      	lsls	r3, r3, #10
 800d43c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d444:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d446:	2300      	movs	r3, #0
 800d448:	643b      	str	r3, [r7, #64]	; 0x40
 800d44a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d44e:	2303      	movs	r3, #3
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f7ff faef 	bl	800ca34 <lfs_dir_commit>
 800d456:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 800d458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d45a:	f113 0f1c 	cmn.w	r3, #28
 800d45e:	d001      	beq.n	800d464 <lfs_file_rawopencfg+0x11c>
 800d460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d462:	e001      	b.n	800d468 <lfs_file_rawopencfg+0x120>
 800d464:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800d468:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 800d46a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f040 8125 	bne.w	800d6bc <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800d472:	4b9a      	ldr	r3, [pc, #616]	; (800d6dc <lfs_file_rawopencfg+0x394>)
 800d474:	65bb      	str	r3, [r7, #88]	; 0x58
 800d476:	e044      	b.n	800d502 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d003      	beq.n	800d48a <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 800d482:	f06f 0310 	mvn.w	r3, #16
 800d486:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800d488:	e119      	b.n	800d6be <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800d48a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fc f8a1 	bl	80095d4 <lfs_tag_type3>
 800d492:	4603      	mov	r3, r0
 800d494:	2b01      	cmp	r3, #1
 800d496:	d003      	beq.n	800d4a0 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 800d498:	f06f 0314 	mvn.w	r3, #20
 800d49c:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800d49e:	e10e      	b.n	800d6be <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00e      	beq.n	800d4c8 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	889b      	ldrh	r3, [r3, #4]
 800d4ae:	029b      	lsls	r3, r3, #10
 800d4b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4b8:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	631a      	str	r2, [r3, #48]	; 0x30
 800d4c6:	e01c      	b.n	800d502 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	889b      	ldrh	r3, [r3, #4]
 800d4d2:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800d4d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4d8:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800d4e0:	9200      	str	r2, [sp, #0]
 800d4e2:	4a7f      	ldr	r2, [pc, #508]	; (800d6e0 <lfs_file_rawopencfg+0x398>)
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f7fc fc89 	bl	8009dfc <lfs_dir_get>
 800d4ea:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 800d4ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	da02      	bge.n	800d4f8 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 800d4f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4f4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800d4f6:	e0e2      	b.n	800d6be <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	3328      	adds	r3, #40	; 0x28
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fc f99b 	bl	8009838 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800d502:	2300      	movs	r3, #0
 800d504:	657b      	str	r3, [r7, #84]	; 0x54
 800d506:	e063      	b.n	800d5d0 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d03c      	beq.n	800d58e <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d51e:	6859      	ldr	r1, [r3, #4]
 800d520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d522:	4613      	mov	r3, r2
 800d524:	005b      	lsls	r3, r3, #1
 800d526:	4413      	add	r3, r2
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	440b      	add	r3, r1
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800d532:	051a      	lsls	r2, r3, #20
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	889b      	ldrh	r3, [r3, #4]
 800d538:	029b      	lsls	r3, r3, #10
 800d53a:	ea42 0103 	orr.w	r1, r2, r3
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d542:	6858      	ldr	r0, [r3, #4]
 800d544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d546:	4613      	mov	r3, r2
 800d548:	005b      	lsls	r3, r3, #1
 800d54a:	4413      	add	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4403      	add	r3, r0
 800d550:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d552:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d55a:	6859      	ldr	r1, [r3, #4]
 800d55c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d55e:	4613      	mov	r3, r2
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	4413      	add	r3, r2
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	4603      	mov	r3, r0
 800d56e:	4a5d      	ldr	r2, [pc, #372]	; (800d6e4 <lfs_file_rawopencfg+0x39c>)
 800d570:	4621      	mov	r1, r4
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f7fc fc42 	bl	8009dfc <lfs_dir_get>
 800d578:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800d57a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	da06      	bge.n	800d58e <lfs_file_rawopencfg+0x246>
 800d580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d582:	f113 0f02 	cmn.w	r3, #2
 800d586:	d002      	beq.n	800d58e <lfs_file_rawopencfg+0x246>
                err = res;
 800d588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d58a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800d58c:	e097      	b.n	800d6be <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d592:	f003 0302 	and.w	r3, r3, #2
 800d596:	2b00      	cmp	r3, #0
 800d598:	d017      	beq.n	800d5ca <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d59e:	6859      	ldr	r1, [r3, #4]
 800d5a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	005b      	lsls	r3, r3, #1
 800d5a6:	4413      	add	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	440b      	add	r3, r1
 800d5ac:	689a      	ldr	r2, [r3, #8]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d903      	bls.n	800d5be <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 800d5b6:	f06f 031b 	mvn.w	r3, #27
 800d5ba:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800d5bc:	e07f      	b.n	800d6be <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800d5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	657b      	str	r3, [r7, #84]	; 0x54
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d395      	bcc.n	800d508 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d005      	beq.n	800d5f2 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	64da      	str	r2, [r3, #76]	; 0x4c
 800d5f0:	e010      	b.n	800d614 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fb fb9e 	bl	8008d3a <lfs_malloc>
 800d5fe:	4602      	mov	r2, r0
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d103      	bne.n	800d614 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 800d60c:	f06f 030b 	mvn.w	r3, #11
 800d610:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800d612:	e054      	b.n	800d6be <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	3340      	adds	r3, #64	; 0x40
 800d618:	4619      	mov	r1, r3
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f7fb fbb3 	bl	8008d86 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800d620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d622:	4618      	mov	r0, r3
 800d624:	f7fb ffd6 	bl	80095d4 <lfs_tag_type3>
 800d628:	4603      	mov	r3, r0
 800d62a:	461a      	mov	r2, r3
 800d62c:	f240 2301 	movw	r3, #513	; 0x201
 800d630:	429a      	cmp	r2, r3
 800d632:	d141      	bne.n	800d6b8 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f06f 0201 	mvn.w	r2, #1
 800d63a:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 800d63c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fc f802 	bl	8009648 <lfs_tag_size>
 800d644:	4602      	mov	r2, r0
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	2200      	movs	r2, #0
 800d662:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d672:	2b00      	cmp	r3, #0
 800d674:	d020      	beq.n	800d6b8 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	889b      	ldrh	r3, [r3, #4]
 800d680:	029c      	lsls	r4, r3, #10
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d686:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fb fab6 	bl	8008bfc <lfs_min>
 800d690:	4603      	mov	r3, r0
 800d692:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d694:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	4a0f      	ldr	r2, [pc, #60]	; (800d6e0 <lfs_file_rawopencfg+0x398>)
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7fc fba9 	bl	8009dfc <lfs_dir_get>
 800d6aa:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 800d6ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	da02      	bge.n	800d6b8 <lfs_file_rawopencfg+0x370>
                err = res;
 800d6b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800d6b6:	e002      	b.n	800d6be <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	e00b      	b.n	800d6d4 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 800d6bc:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 800d6ca:	68b9      	ldr	r1, [r7, #8]
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f000 f823 	bl	800d718 <lfs_file_rawclose>
    return err;
 800d6d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3760      	adds	r7, #96	; 0x60
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bdb0      	pop	{r4, r5, r7, pc}
 800d6dc:	20100000 	.word	0x20100000
 800d6e0:	700ffc00 	.word	0x700ffc00
 800d6e4:	7ffffc00 	.word	0x7ffffc00

0800d6e8 <lfs_file_rawopen>:

#ifndef LFS_NO_MALLOC
static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af02      	add	r7, sp, #8
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	60b9      	str	r1, [r7, #8]
 800d6f2:	607a      	str	r2, [r7, #4]
 800d6f4:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 800d6f6:	4b07      	ldr	r3, [pc, #28]	; (800d714 <lfs_file_rawopen+0x2c>)
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f7ff fe21 	bl	800d348 <lfs_file_rawopencfg>
 800d706:	6178      	str	r0, [r7, #20]
    return err;
 800d708:	697b      	ldr	r3, [r7, #20]
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3718      	adds	r7, #24
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	0802164c 	.word	0x0802164c

0800d718 <lfs_file_rawclose>:
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800d722:	6839      	ldr	r1, [r7, #0]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 f9c3 	bl	800dab0 <lfs_file_rawsync>
 800d72a:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f7fc f93f 	bl	80099b2 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d104      	bne.n	800d748 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d742:	4618      	mov	r0, r3
 800d744:	f7fb fb05 	bl	8008d52 <lfs_free>
    }

    return err;
 800d748:	68fb      	ldr	r3, [r7, #12]
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
	...

0800d754 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800d754:	b590      	push	{r4, r7, lr}
 800d756:	b08d      	sub	sp, #52	; 0x34
 800d758:	af06      	add	r7, sp, #24
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800d75e:	f107 030c 	add.w	r3, r7, #12
 800d762:	4619      	mov	r1, r3
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7fc f9af 	bl	8009ac8 <lfs_alloc>
 800d76a:	6138      	str	r0, [r7, #16]
        if (err) {
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <lfs_file_relocate+0x22>
            return err;
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	e0b2      	b.n	800d8dc <lfs_file_relocate+0x188>
        }

        err = lfs_bd_erase(lfs, nblock);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7fb fe0c 	bl	8009398 <lfs_bd_erase>
 800d780:	6138      	str	r0, [r7, #16]
        if (err) {
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d006      	beq.n	800d796 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d78e:	f000 809b 	beq.w	800d8c8 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	e0a2      	b.n	800d8dc <lfs_file_relocate+0x188>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800d796:	2300      	movs	r3, #0
 800d798:	617b      	str	r3, [r7, #20]
 800d79a:	e069      	b.n	800d870 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d027      	beq.n	800d7f8 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	f103 0008 	add.w	r0, r3, #8
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	889b      	ldrh	r3, [r3, #4]
 800d7c0:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800d7c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d7c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7ca:	2101      	movs	r1, #1
 800d7cc:	9105      	str	r1, [sp, #20]
 800d7ce:	f107 010b 	add.w	r1, r7, #11
 800d7d2:	9104      	str	r1, [sp, #16]
 800d7d4:	6979      	ldr	r1, [r7, #20]
 800d7d6:	9103      	str	r1, [sp, #12]
 800d7d8:	9302      	str	r3, [sp, #8]
 800d7da:	4b42      	ldr	r3, [pc, #264]	; (800d8e4 <lfs_file_relocate+0x190>)
 800d7dc:	9301      	str	r3, [sp, #4]
 800d7de:	9200      	str	r2, [sp, #0]
 800d7e0:	4623      	mov	r3, r4
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	4601      	mov	r1, r0
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7fc fb23 	bl	8009e32 <lfs_dir_getread>
 800d7ec:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d01e      	beq.n	800d832 <lfs_file_relocate+0xde>
                    return err;
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	e071      	b.n	800d8dc <lfs_file_relocate+0x188>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800d7fe:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	1ad4      	subs	r4, r2, r3
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80c:	2201      	movs	r2, #1
 800d80e:	9203      	str	r2, [sp, #12]
 800d810:	f107 020b 	add.w	r2, r7, #11
 800d814:	9202      	str	r2, [sp, #8]
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	9201      	str	r2, [sp, #4]
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	4623      	mov	r3, r4
 800d81e:	4602      	mov	r2, r0
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f7fb fac7 	bl	8008db4 <lfs_bd_read>
 800d826:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d001      	beq.n	800d832 <lfs_file_relocate+0xde>
                    return err;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	e054      	b.n	800d8dc <lfs_file_relocate+0x188>
                }
            }

            err = lfs_bd_prog(lfs,
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f103 0110 	add.w	r1, r3, #16
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2201      	movs	r2, #1
 800d83e:	9203      	str	r2, [sp, #12]
 800d840:	f107 020b 	add.w	r2, r7, #11
 800d844:	9202      	str	r2, [sp, #8]
 800d846:	697a      	ldr	r2, [r7, #20]
 800d848:	9201      	str	r2, [sp, #4]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	2301      	movs	r3, #1
 800d84e:	4602      	mov	r2, r0
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7fb fcf5 	bl	8009240 <lfs_bd_prog>
 800d856:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d005      	beq.n	800d86a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d864:	d032      	beq.n	800d8cc <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	e038      	b.n	800d8dc <lfs_file_relocate+0x188>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	3301      	adds	r3, #1
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	429a      	cmp	r2, r3
 800d878:	d390      	bcc.n	800d79c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	69d9      	ldr	r1, [r3, #28]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d888:	461a      	mov	r2, r3
 800d88a:	f00f f8dc 	bl	801ca46 <memcpy>
        file->cache.block = lfs->pcache.block;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	691a      	ldr	r2, [r3, #16]
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	695a      	ldr	r2, [r3, #20]
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	699a      	ldr	r2, [r3, #24]
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	3310      	adds	r3, #16
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7fb fa6a 	bl	8008d86 <lfs_cache_zero>

        file->block = nblock;
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	e009      	b.n	800d8dc <lfs_file_relocate+0x188>
                goto relocate;
 800d8c8:	bf00      	nop
 800d8ca:	e000      	b.n	800d8ce <lfs_file_relocate+0x17a>
                    goto relocate;
 800d8cc:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	3310      	adds	r3, #16
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7fb fa47 	bl	8008d68 <lfs_cache_drop>
    while (true) {
 800d8da:	e740      	b.n	800d75e <lfs_file_relocate+0xa>
    }
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	371c      	adds	r7, #28
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd90      	pop	{r4, r7, pc}
 800d8e4:	fff7fc00 	.word	0xfff7fc00

0800d8e8 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7fc f8c4 	bl	8009a88 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800d900:	6839      	ldr	r1, [r7, #0]
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff ff26 	bl	800d754 <lfs_file_relocate>
 800d908:	60f8      	str	r0, [r7, #12]
    if (err) {
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <lfs_file_outline+0x2c>
        return err;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	e006      	b.n	800d922 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d918:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800d92a:	b590      	push	{r4, r7, lr}
 800d92c:	b09d      	sub	sp, #116	; 0x74
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d011      	beq.n	800d964 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d105      	bne.n	800d958 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	3340      	adds	r3, #64	; 0x40
 800d950:	4619      	mov	r1, r3
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f7fb fa08 	bl	8008d68 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 809a 	beq.w	800daa6 <lfs_file_flush+0x17c>
        lfs_off_t pos = file->pos;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d976:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d97c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d980:	2b00      	cmp	r3, #0
 800d982:	d16c      	bne.n	800da5e <lfs_file_flush+0x134>
            // copy over anything after current branch
            lfs_file_t orig = {
 800d984:	f107 030c 	add.w	r3, r7, #12
 800d988:	2254      	movs	r2, #84	; 0x54
 800d98a:	2100      	movs	r1, #0
 800d98c:	4618      	mov	r0, r3
 800d98e:	f00e ff51 	bl	801c834 <memset>
                .ctz.head = file->ctz.head,
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 800d996:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800d99c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d99e:	2301      	movs	r3, #1
 800d9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 800d9a6:	643b      	str	r3, [r7, #64]	; 0x40
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800d9ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7fb f9d5 	bl	8008d68 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800d9be:	e02b      	b.n	800da18 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 800d9c0:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800d9c4:	f107 010c 	add.w	r1, r7, #12
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f8fc 	bl	800dbc8 <lfs_file_flushedread>
 800d9d0:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800d9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	da01      	bge.n	800d9dc <lfs_file_flush+0xb2>
                    return res;
 800d9d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9da:	e065      	b.n	800daa8 <lfs_file_flush+0x17e>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 800d9dc:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 f9f7 	bl	800ddd8 <lfs_file_flushedwrite>
 800d9ea:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800d9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	da01      	bge.n	800d9f6 <lfs_file_flush+0xcc>
                    return res;
 800d9f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9f4:	e058      	b.n	800daa8 <lfs_file_flush+0x17e>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9fe:	d00b      	beq.n	800da18 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800da00:	f107 030c 	add.w	r3, r7, #12
 800da04:	3340      	adds	r3, #64	; 0x40
 800da06:	4619      	mov	r1, r3
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7fb f9ad 	bl	8008d68 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4619      	mov	r1, r3
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7fb f9a8 	bl	8008d68 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da20:	429a      	cmp	r2, r3
 800da22:	d3cd      	bcc.n	800d9c0 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	2301      	movs	r3, #1
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f7fb fb56 	bl	80090e0 <lfs_bd_flush>
 800da34:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800da36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d01c      	beq.n	800da76 <lfs_file_flush+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 800da3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da3e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800da42:	d001      	beq.n	800da48 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800da44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da46:	e02f      	b.n	800daa8 <lfs_file_flush+0x17e>
                        goto relocate;
 800da48:	bf00      	nop

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
                err = lfs_file_relocate(lfs, file);
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7ff fe81 	bl	800d754 <lfs_file_relocate>
 800da52:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800da54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da56:	2b00      	cmp	r3, #0
 800da58:	d0e4      	beq.n	800da24 <lfs_file_flush+0xfa>
                    return err;
 800da5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da5c:	e024      	b.n	800daa8 <lfs_file_flush+0x17e>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da66:	4619      	mov	r1, r3
 800da68:	4610      	mov	r0, r2
 800da6a:	f7fb f8b7 	bl	8008bdc <lfs_max>
 800da6e:	4602      	mov	r2, r0
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	635a      	str	r2, [r3, #52]	; 0x34
 800da74:	e000      	b.n	800da78 <lfs_file_flush+0x14e>
                break;
 800da76:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800daa4:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3774      	adds	r7, #116	; 0x74
 800daac:	46bd      	mov	sp, r7
 800daae:	bd90      	pop	{r4, r7, pc}

0800dab0 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b090      	sub	sp, #64	; 0x40
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dabe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800dac6:	2300      	movs	r3, #0
 800dac8:	e07a      	b.n	800dbc0 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7ff ff2c 	bl	800d92a <lfs_file_flush>
 800dad2:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d007      	beq.n	800daea <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dade:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 800dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae8:	e06a      	b.n	800dbc0 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d063      	beq.n	800dbbe <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	3308      	adds	r3, #8
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fb fc93 	bl	8009426 <lfs_pair_isnull>
 800db00:	4603      	mov	r3, r0
 800db02:	f083 0301 	eor.w	r3, r3, #1
 800db06:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d058      	beq.n	800dbbe <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d009      	beq.n	800db2c <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 800db18:	f240 2301 	movw	r3, #513	; 0x201
 800db1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db22:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db28:	637b      	str	r3, [r7, #52]	; 0x34
 800db2a:	e014      	b.n	800db56 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 800db2c:	f240 2302 	movw	r3, #514	; 0x202
 800db30:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db38:	3228      	adds	r2, #40	; 0x28
 800db3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db3e:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800db42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db46:	4618      	mov	r0, r3
 800db48:	f7fb fe8e 	bl	8009868 <lfs_ctz_tole32>
            buffer = &ctz;
 800db4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800db50:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800db52:	2308      	movs	r3, #8
 800db54:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	f103 0108 	add.w	r1, r3, #8
 800db5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800db5e:	051a      	lsls	r2, r3, #20
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	889b      	ldrh	r3, [r3, #4]
 800db64:	029b      	lsls	r3, r3, #10
 800db66:	431a      	orrs	r2, r3
 800db68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6a:	4313      	orrs	r3, r2
 800db6c:	61bb      	str	r3, [r7, #24]
 800db6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db70:	61fb      	str	r3, [r7, #28]
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	889b      	ldrh	r3, [r3, #4]
 800db76:	029a      	lsls	r2, r3, #10
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	4313      	orrs	r3, r2
 800db80:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800db84:	623b      	str	r3, [r7, #32]
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	627b      	str	r3, [r7, #36]	; 0x24
 800db8e:	f107 0218 	add.w	r2, r7, #24
 800db92:	2302      	movs	r3, #2
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7fe ff4d 	bl	800ca34 <lfs_dir_commit>
 800db9a:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d007      	beq.n	800dbb2 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	e006      	b.n	800dbc0 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800dbbe:	2300      	movs	r3, #0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3740      	adds	r7, #64	; 0x40
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800dbc8:	b5b0      	push	{r4, r5, r7, lr}
 800dbca:	b090      	sub	sp, #64	; 0x40
 800dbcc:	af06      	add	r7, sp, #24
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
 800dbd4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d301      	bcc.n	800dbee <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	e0b7      	b.n	800dd5e <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6838      	ldr	r0, [r7, #0]
 800dbfc:	f7fa fffe 	bl	8008bfc <lfs_min>
 800dc00:	6038      	str	r0, [r7, #0]
    nsize = size;
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 800dc06:	e0a5      	b.n	800dd54 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d006      	beq.n	800dc22 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc1c:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d130      	bne.n	800dc84 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d11c      	bne.n	800dc68 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dc40:	68b9      	ldr	r1, [r7, #8]
 800dc42:	3138      	adds	r1, #56	; 0x38
 800dc44:	68b8      	ldr	r0, [r7, #8]
 800dc46:	303c      	adds	r0, #60	; 0x3c
 800dc48:	9003      	str	r0, [sp, #12]
 800dc4a:	9102      	str	r1, [sp, #8]
 800dc4c:	9201      	str	r2, [sp, #4]
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	462b      	mov	r3, r5
 800dc52:	4622      	mov	r2, r4
 800dc54:	2100      	movs	r1, #0
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff f996 	bl	800cf88 <lfs_ctz_find>
 800dc5c:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d009      	beq.n	800dc78 <lfs_file_flushedread+0xb0>
                    return err;
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	e07a      	b.n	800dd5e <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	f06f 0201 	mvn.w	r2, #1
 800dc6e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc88:	69da      	ldr	r2, [r3, #28]
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc8e:	1ad3      	subs	r3, r2, r3
 800dc90:	4619      	mov	r1, r3
 800dc92:	6a38      	ldr	r0, [r7, #32]
 800dc94:	f7fa ffb2 	bl	8008bfc <lfs_min>
 800dc98:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d026      	beq.n	800dcf4 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	f103 0408 	add.w	r4, r3, #8
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcb6:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	889b      	ldrh	r3, [r3, #4]
 800dcbc:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800dcbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dcc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcc6:	68b9      	ldr	r1, [r7, #8]
 800dcc8:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800dcca:	69b8      	ldr	r0, [r7, #24]
 800dccc:	9005      	str	r0, [sp, #20]
 800dcce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcd0:	9004      	str	r0, [sp, #16]
 800dcd2:	9103      	str	r1, [sp, #12]
 800dcd4:	9302      	str	r3, [sp, #8]
 800dcd6:	4b24      	ldr	r3, [pc, #144]	; (800dd68 <lfs_file_flushedread+0x1a0>)
 800dcd8:	9301      	str	r3, [sp, #4]
 800dcda:	9200      	str	r2, [sp, #0]
 800dcdc:	462b      	mov	r3, r5
 800dcde:	2200      	movs	r2, #0
 800dce0:	4621      	mov	r1, r4
 800dce2:	68f8      	ldr	r0, [r7, #12]
 800dce4:	f7fc f8a5 	bl	8009e32 <lfs_dir_getread>
 800dce8:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d01d      	beq.n	800dd2c <lfs_file_flushedread+0x164>
                return err;
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	e034      	b.n	800dd5e <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcfe:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800dd08:	69b9      	ldr	r1, [r7, #24]
 800dd0a:	9103      	str	r1, [sp, #12]
 800dd0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd0e:	9102      	str	r1, [sp, #8]
 800dd10:	9201      	str	r2, [sp, #4]
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	4623      	mov	r3, r4
 800dd16:	4602      	mov	r2, r0
 800dd18:	2100      	movs	r1, #0
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7fb f84a 	bl	8008db4 <lfs_bd_read>
 800dd20:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d001      	beq.n	800dd2c <lfs_file_flushedread+0x164>
                return err;
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	e018      	b.n	800dd5e <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	441a      	add	r2, r3
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	441a      	add	r2, r3
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800dd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	4413      	add	r3, r2
 800dd4a:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 800dd4c:	6a3a      	ldr	r2, [r7, #32]
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f47f af56 	bne.w	800dc08 <lfs_file_flushedread+0x40>
    }

    return size;
 800dd5c:	683b      	ldr	r3, [r7, #0]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3728      	adds	r7, #40	; 0x28
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bdb0      	pop	{r4, r5, r7, pc}
 800dd66:	bf00      	nop
 800dd68:	fff7fc00 	.word	0xfff7fc00

0800dd6c <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
 800dd78:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d106      	bne.n	800dd94 <lfs_file_rawread+0x28>
 800dd86:	4b11      	ldr	r3, [pc, #68]	; (800ddcc <lfs_file_rawread+0x60>)
 800dd88:	4a11      	ldr	r2, [pc, #68]	; (800ddd0 <lfs_file_rawread+0x64>)
 800dd8a:	f640 41ea 	movw	r1, #3306	; 0xcea
 800dd8e:	4811      	ldr	r0, [pc, #68]	; (800ddd4 <lfs_file_rawread+0x68>)
 800dd90:	f00e f9d4 	bl	801c13c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d009      	beq.n	800ddb4 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800dda0:	68b9      	ldr	r1, [r7, #8]
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f7ff fdc1 	bl	800d92a <lfs_file_flush>
 800dda8:	6178      	str	r0, [r7, #20]
        if (err) {
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d001      	beq.n	800ddb4 <lfs_file_rawread+0x48>
            return err;
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	e006      	b.n	800ddc2 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	68b9      	ldr	r1, [r7, #8]
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f7ff ff04 	bl	800dbc8 <lfs_file_flushedread>
 800ddc0:	4603      	mov	r3, r0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3718      	adds	r7, #24
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	0801e2a0 	.word	0x0801e2a0
 800ddd0:	08021658 	.word	0x08021658
 800ddd4:	0801e040 	.word	0x0801e040

0800ddd8 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800ddd8:	b5b0      	push	{r4, r5, r7, lr}
 800ddda:	b090      	sub	sp, #64	; 0x40
 800dddc:	af04      	add	r7, sp, #16
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
 800dde4:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f000 810c 	beq.w	800e014 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	441a      	add	r2, r3
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de08:	4619      	mov	r1, r3
 800de0a:	4610      	mov	r0, r2
 800de0c:	f7fa fee6 	bl	8008bdc <lfs_max>
 800de10:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d004      	beq.n	800de2c <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 800de28:	08db      	lsrs	r3, r3, #3
 800de2a:	e003      	b.n	800de34 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de30:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 800de32:	08db      	lsrs	r3, r3, #3
 800de34:	4619      	mov	r1, r3
 800de36:	4610      	mov	r0, r2
 800de38:	f7fa fee0 	bl	8008bfc <lfs_min>
 800de3c:	4603      	mov	r3, r0
 800de3e:	4619      	mov	r1, r3
 800de40:	f240 30fe 	movw	r0, #1022	; 0x3fe
 800de44:	f7fa feda 	bl	8008bfc <lfs_min>
 800de48:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800de4a:	429c      	cmp	r4, r3
 800de4c:	f240 80e2 	bls.w	800e014 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800de50:	68b9      	ldr	r1, [r7, #8]
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f7ff fd48 	bl	800d8e8 <lfs_file_outline>
 800de58:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f000 80d9 	beq.w	800e014 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	e0d5      	b.n	800e01e <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d006      	beq.n	800de8c <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de86:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 800de88:	429a      	cmp	r2, r3
 800de8a:	d16b      	bne.n	800df64 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d157      	bne.n	800df48 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d12d      	bne.n	800df00 <lfs_file_flushedwrite+0x128>
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d029      	beq.n	800df00 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800deba:	68ba      	ldr	r2, [r7, #8]
 800debc:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800debe:	3a01      	subs	r2, #1
 800dec0:	68b9      	ldr	r1, [r7, #8]
 800dec2:	3138      	adds	r1, #56	; 0x38
 800dec4:	68b8      	ldr	r0, [r7, #8]
 800dec6:	303c      	adds	r0, #60	; 0x3c
 800dec8:	9003      	str	r0, [sp, #12]
 800deca:	9102      	str	r1, [sp, #8]
 800decc:	9201      	str	r2, [sp, #4]
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	462b      	mov	r3, r5
 800ded2:	4622      	mov	r2, r4
 800ded4:	2100      	movs	r1, #0
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7ff f856 	bl	800cf88 <lfs_ctz_find>
 800dedc:	6238      	str	r0, [r7, #32]
                    if (err) {
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d007      	beq.n	800def4 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 800def0:	6a3b      	ldr	r3, [r7, #32]
 800def2:	e094      	b.n	800e01e <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	3340      	adds	r3, #64	; 0x40
 800def8:	4619      	mov	r1, r3
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	f7fa ff43 	bl	8008d86 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f7fb fdc1 	bl	8009a88 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800df0c:	68fc      	ldr	r4, [r7, #12]
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	3238      	adds	r2, #56	; 0x38
 800df1a:	68b9      	ldr	r1, [r7, #8]
 800df1c:	313c      	adds	r1, #60	; 0x3c
 800df1e:	9102      	str	r1, [sp, #8]
 800df20:	9201      	str	r2, [sp, #4]
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	462b      	mov	r3, r5
 800df26:	4622      	mov	r2, r4
 800df28:	4601      	mov	r1, r0
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7ff f897 	bl	800d05e <lfs_ctz_extend>
 800df30:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d00f      	beq.n	800df58 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df3c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	e06a      	b.n	800e01e <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	f06f 0201 	mvn.w	r2, #1
 800df4e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df68:	69da      	ldr	r2, [r3, #28]
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	4619      	mov	r1, r3
 800df72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df74:	f7fa fe42 	bl	8008bfc <lfs_min>
 800df78:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800df80:	68fc      	ldr	r4, [r7, #12]
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800df8a:	69b9      	ldr	r1, [r7, #24]
 800df8c:	9103      	str	r1, [sp, #12]
 800df8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df90:	9102      	str	r1, [sp, #8]
 800df92:	9201      	str	r2, [sp, #4]
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	2301      	movs	r3, #1
 800df98:	4622      	mov	r2, r4
 800df9a:	4601      	mov	r1, r0
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f7fb f94f 	bl	8009240 <lfs_bd_prog>
 800dfa2:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d01c      	beq.n	800dfe4 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800dfb0:	d007      	beq.n	800dfc2 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	e02d      	b.n	800e01e <lfs_file_flushedwrite+0x246>
                    goto relocate;
 800dfc2:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800dfc4:	68b9      	ldr	r1, [r7, #8]
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f7ff fbc4 	bl	800d754 <lfs_file_relocate>
 800dfcc:	6178      	str	r0, [r7, #20]
            if (err) {
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d0d2      	beq.n	800df7a <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfd8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	e01c      	b.n	800e01e <lfs_file_flushedwrite+0x246>
            break;
 800dfe4:	bf00      	nop
            }
        }

        file->pos += diff;
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfea:	69bb      	ldr	r3, [r7, #24]
 800dfec:	441a      	add	r2, r3
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	441a      	add	r2, r3
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800dffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	4413      	add	r3, r2
 800e004:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800e006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	1ad3      	subs	r3, r2, r3
 800e00c:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f7fb fd3a 	bl	8009a88 <lfs_alloc_ack>
    while (nsize > 0) {
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	2b00      	cmp	r3, #0
 800e018:	f47f af2b 	bne.w	800de72 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 800e01c:	683b      	ldr	r3, [r7, #0]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3730      	adds	r7, #48	; 0x30
 800e022:	46bd      	mov	sp, r7
 800e024:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e028 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800e028:	b580      	push	{r7, lr}
 800e02a:	b08c      	sub	sp, #48	; 0x30
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 800e038:	2300      	movs	r3, #0
 800e03a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e040:	695b      	ldr	r3, [r3, #20]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d106      	bne.n	800e054 <lfs_init+0x2c>
 800e046:	4b92      	ldr	r3, [pc, #584]	; (800e290 <lfs_init+0x268>)
 800e048:	4a92      	ldr	r2, [pc, #584]	; (800e294 <lfs_init+0x26c>)
 800e04a:	f640 7146 	movw	r1, #3910	; 0xf46
 800e04e:	4892      	ldr	r0, [pc, #584]	; (800e298 <lfs_init+0x270>)
 800e050:	f00e f874 	bl	801c13c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e058:	699b      	ldr	r3, [r3, #24]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d106      	bne.n	800e06c <lfs_init+0x44>
 800e05e:	4b8f      	ldr	r3, [pc, #572]	; (800e29c <lfs_init+0x274>)
 800e060:	4a8c      	ldr	r2, [pc, #560]	; (800e294 <lfs_init+0x26c>)
 800e062:	f640 7147 	movw	r1, #3911	; 0xf47
 800e066:	488c      	ldr	r0, [pc, #560]	; (800e298 <lfs_init+0x270>)
 800e068:	f00e f868 	bl	801c13c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e072:	2b00      	cmp	r3, #0
 800e074:	d106      	bne.n	800e084 <lfs_init+0x5c>
 800e076:	4b8a      	ldr	r3, [pc, #552]	; (800e2a0 <lfs_init+0x278>)
 800e078:	4a86      	ldr	r2, [pc, #536]	; (800e294 <lfs_init+0x26c>)
 800e07a:	f640 7148 	movw	r1, #3912	; 0xf48
 800e07e:	4886      	ldr	r0, [pc, #536]	; (800e298 <lfs_init+0x270>)
 800e080:	f00e f85c 	bl	801c13c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e08a:	687a      	ldr	r2, [r7, #4]
 800e08c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e08e:	6952      	ldr	r2, [r2, #20]
 800e090:	fbb3 f1f2 	udiv	r1, r3, r2
 800e094:	fb01 f202 	mul.w	r2, r1, r2
 800e098:	1a9b      	subs	r3, r3, r2
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d006      	beq.n	800e0ac <lfs_init+0x84>
 800e09e:	4b81      	ldr	r3, [pc, #516]	; (800e2a4 <lfs_init+0x27c>)
 800e0a0:	4a7c      	ldr	r2, [pc, #496]	; (800e294 <lfs_init+0x26c>)
 800e0a2:	f640 714c 	movw	r1, #3916	; 0xf4c
 800e0a6:	487c      	ldr	r0, [pc, #496]	; (800e298 <lfs_init+0x270>)
 800e0a8:	f00e f848 	bl	801c13c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e0b6:	6992      	ldr	r2, [r2, #24]
 800e0b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0bc:	fb01 f202 	mul.w	r2, r1, r2
 800e0c0:	1a9b      	subs	r3, r3, r2
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d006      	beq.n	800e0d4 <lfs_init+0xac>
 800e0c6:	4b78      	ldr	r3, [pc, #480]	; (800e2a8 <lfs_init+0x280>)
 800e0c8:	4a72      	ldr	r2, [pc, #456]	; (800e294 <lfs_init+0x26c>)
 800e0ca:	f640 714d 	movw	r1, #3917	; 0xf4d
 800e0ce:	4872      	ldr	r0, [pc, #456]	; (800e298 <lfs_init+0x270>)
 800e0d0:	f00e f834 	bl	801c13c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0d8:	69db      	ldr	r3, [r3, #28]
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e0de:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800e0e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0e4:	fb01 f202 	mul.w	r2, r1, r2
 800e0e8:	1a9b      	subs	r3, r3, r2
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d006      	beq.n	800e0fc <lfs_init+0xd4>
 800e0ee:	4b6f      	ldr	r3, [pc, #444]	; (800e2ac <lfs_init+0x284>)
 800e0f0:	4a68      	ldr	r2, [pc, #416]	; (800e294 <lfs_init+0x26c>)
 800e0f2:	f640 714e 	movw	r1, #3918	; 0xf4e
 800e0f6:	4868      	ldr	r0, [pc, #416]	; (800e298 <lfs_init+0x270>)
 800e0f8:	f00e f820 	bl	801c13c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e100:	69db      	ldr	r3, [r3, #28]
 800e102:	3b08      	subs	r3, #8
 800e104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e108:	fbb2 f3f3 	udiv	r3, r2, r3
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7fa fdac 	bl	8008c6a <lfs_npw2>
 800e112:	4603      	mov	r3, r0
 800e114:	009a      	lsls	r2, r3, #2
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e11a:	69db      	ldr	r3, [r3, #28]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d906      	bls.n	800e12e <lfs_init+0x106>
 800e120:	4b63      	ldr	r3, [pc, #396]	; (800e2b0 <lfs_init+0x288>)
 800e122:	4a5c      	ldr	r2, [pc, #368]	; (800e294 <lfs_init+0x26c>)
 800e124:	f640 7151 	movw	r1, #3921	; 0xf51
 800e128:	485b      	ldr	r0, [pc, #364]	; (800e298 <lfs_init+0x270>)
 800e12a:	f00e f807 	bl	801c13c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e134:	2b00      	cmp	r3, #0
 800e136:	d106      	bne.n	800e146 <lfs_init+0x11e>
 800e138:	4b5e      	ldr	r3, [pc, #376]	; (800e2b4 <lfs_init+0x28c>)
 800e13a:	4a56      	ldr	r2, [pc, #344]	; (800e294 <lfs_init+0x26c>)
 800e13c:	f640 715a 	movw	r1, #3930	; 0xf5a
 800e140:	4855      	ldr	r0, [pc, #340]	; (800e298 <lfs_init+0x270>)
 800e142:	f00d fffb 	bl	801c13c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d005      	beq.n	800e15c <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	60da      	str	r2, [r3, #12]
 800e15a:	e010      	b.n	800e17e <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e162:	4618      	mov	r0, r3
 800e164:	f7fa fde9 	bl	8008d3a <lfs_malloc>
 800e168:	4602      	mov	r2, r0
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d103      	bne.n	800e17e <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800e176:	f06f 030b 	mvn.w	r3, #11
 800e17a:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800e17c:	e0fd      	b.n	800e37a <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e184:	2b00      	cmp	r3, #0
 800e186:	d005      	beq.n	800e194 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e18c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	61da      	str	r2, [r3, #28]
 800e192:	e010      	b.n	800e1b6 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fa fdcd 	bl	8008d3a <lfs_malloc>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	69db      	ldr	r3, [r3, #28]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d103      	bne.n	800e1b6 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800e1ae:	f06f 030b 	mvn.w	r3, #11
 800e1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800e1b4:	e0e1      	b.n	800e37a <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7fa fde3 	bl	8008d86 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3310      	adds	r3, #16
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f7fa fddd 	bl	8008d86 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d106      	bne.n	800e1e4 <lfs_init+0x1bc>
 800e1d6:	4b38      	ldr	r3, [pc, #224]	; (800e2b8 <lfs_init+0x290>)
 800e1d8:	4a2e      	ldr	r2, [pc, #184]	; (800e294 <lfs_init+0x26c>)
 800e1da:	f640 7178 	movw	r1, #3960	; 0xf78
 800e1de:	482e      	ldr	r0, [pc, #184]	; (800e298 <lfs_init+0x270>)
 800e1e0:	f00d ffac 	bl	801c13c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ea:	f003 0307 	and.w	r3, r3, #7
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d106      	bne.n	800e200 <lfs_init+0x1d8>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f8:	f003 0303 	and.w	r3, r3, #3
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d006      	beq.n	800e20e <lfs_init+0x1e6>
 800e200:	4b2e      	ldr	r3, [pc, #184]	; (800e2bc <lfs_init+0x294>)
 800e202:	4a24      	ldr	r2, [pc, #144]	; (800e294 <lfs_init+0x26c>)
 800e204:	f640 7179 	movw	r1, #3961	; 0xf79
 800e208:	4823      	ldr	r0, [pc, #140]	; (800e298 <lfs_init+0x270>)
 800e20a:	f00d ff97 	bl	801c13c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e214:	2b00      	cmp	r3, #0
 800e216:	d005      	beq.n	800e224 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e21c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	665a      	str	r2, [r3, #100]	; 0x64
 800e222:	e010      	b.n	800e246 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fa fd85 	bl	8008d3a <lfs_malloc>
 800e230:	4602      	mov	r2, r0
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d103      	bne.n	800e246 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800e23e:	f06f 030b 	mvn.w	r3, #11
 800e242:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800e244:	e099      	b.n	800e37a <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e24c:	2bff      	cmp	r3, #255	; 0xff
 800e24e:	d906      	bls.n	800e25e <lfs_init+0x236>
 800e250:	4b1b      	ldr	r3, [pc, #108]	; (800e2c0 <lfs_init+0x298>)
 800e252:	4a10      	ldr	r2, [pc, #64]	; (800e294 <lfs_init+0x26c>)
 800e254:	f640 7186 	movw	r1, #3974	; 0xf86
 800e258:	480f      	ldr	r0, [pc, #60]	; (800e298 <lfs_init+0x270>)
 800e25a:	f00d ff6f 	bl	801c13c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d102      	bne.n	800e276 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	22ff      	movs	r2, #255	; 0xff
 800e274:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	da23      	bge.n	800e2c8 <lfs_init+0x2a0>
 800e280:	4b10      	ldr	r3, [pc, #64]	; (800e2c4 <lfs_init+0x29c>)
 800e282:	4a04      	ldr	r2, [pc, #16]	; (800e294 <lfs_init+0x26c>)
 800e284:	f640 718c 	movw	r1, #3980	; 0xf8c
 800e288:	4803      	ldr	r0, [pc, #12]	; (800e298 <lfs_init+0x270>)
 800e28a:	f00d ff57 	bl	801c13c <__assert_func>
 800e28e:	bf00      	nop
 800e290:	0801e300 	.word	0x0801e300
 800e294:	0802166c 	.word	0x0802166c
 800e298:	0801e040 	.word	0x0801e040
 800e29c:	0801e31c 	.word	0x0801e31c
 800e2a0:	0801e338 	.word	0x0801e338
 800e2a4:	0801e354 	.word	0x0801e354
 800e2a8:	0801e384 	.word	0x0801e384
 800e2ac:	0801e3b4 	.word	0x0801e3b4
 800e2b0:	0801e3e8 	.word	0x0801e3e8
 800e2b4:	0801e434 	.word	0x0801e434
 800e2b8:	0801e450 	.word	0x0801e450
 800e2bc:	0801e470 	.word	0x0801e470
 800e2c0:	0801e4c4 	.word	0x0801e4c4
 800e2c4:	0801e4e0 	.word	0x0801e4e0
    lfs->file_max = lfs->cfg->file_max;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d103      	bne.n	800e2e2 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e2e0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2e8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d906      	bls.n	800e2fe <lfs_init+0x2d6>
 800e2f0:	4b26      	ldr	r3, [pc, #152]	; (800e38c <lfs_init+0x364>)
 800e2f2:	4a27      	ldr	r2, [pc, #156]	; (800e390 <lfs_init+0x368>)
 800e2f4:	f640 7192 	movw	r1, #3986	; 0xf92
 800e2f8:	4826      	ldr	r0, [pc, #152]	; (800e394 <lfs_init+0x36c>)
 800e2fa:	f00d ff1f 	bl	801c13c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d103      	bne.n	800e318 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800e316:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e31c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e322:	69db      	ldr	r3, [r3, #28]
 800e324:	429a      	cmp	r2, r3
 800e326:	d906      	bls.n	800e336 <lfs_init+0x30e>
 800e328:	4b1b      	ldr	r3, [pc, #108]	; (800e398 <lfs_init+0x370>)
 800e32a:	4a19      	ldr	r2, [pc, #100]	; (800e390 <lfs_init+0x368>)
 800e32c:	f640 7198 	movw	r1, #3992	; 0xf98
 800e330:	4818      	ldr	r0, [pc, #96]	; (800e394 <lfs_init+0x36c>)
 800e332:	f00d ff03 	bl	801c13c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e33c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e344:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	333c      	adds	r3, #60	; 0x3c
 800e356:	2200      	movs	r2, #0
 800e358:	601a      	str	r2, [r3, #0]
 800e35a:	605a      	str	r2, [r3, #4]
 800e35c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3330      	adds	r3, #48	; 0x30
 800e362:	2200      	movs	r2, #0
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	605a      	str	r2, [r3, #4]
 800e368:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	3348      	adds	r3, #72	; 0x48
 800e36e:	2200      	movs	r2, #0
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	605a      	str	r2, [r3, #4]
 800e374:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800e376:	2300      	movs	r3, #0
 800e378:	e003      	b.n	800e382 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f80e 	bl	800e39c <lfs_deinit>
    return err;
 800e380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e382:	4618      	mov	r0, r3
 800e384:	3730      	adds	r7, #48	; 0x30
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	0801e504 	.word	0x0801e504
 800e390:	0802166c 	.word	0x0802166c
 800e394:	0801e040 	.word	0x0801e040
 800e398:	0801e520 	.word	0x0801e520

0800e39c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d104      	bne.n	800e3b8 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fa fccd 	bl	8008d52 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d104      	bne.n	800e3cc <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	69db      	ldr	r3, [r3, #28]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fa fcc3 	bl	8008d52 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d104      	bne.n	800e3e0 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fa fcb9 	bl	8008d52 <lfs_free>
    }

    return 0;
 800e3e0:	2300      	movs	r3, #0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
	...

0800e3ec <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b0a0      	sub	sp, #128	; 0x80
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
    int err = 0;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800e3fa:	6839      	ldr	r1, [r7, #0]
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7ff fe13 	bl	800e028 <lfs_init>
 800e402:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800e404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <lfs_rawformat+0x22>
            return err;
 800e40a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e40c:	e082      	b.n	800e514 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e418:	461a      	mov	r2, r3
 800e41a:	2100      	movs	r1, #0
 800e41c:	f00e fa0a 	bl	801c834 <memset>
        lfs->free.off = 0;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42c:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e432:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800e434:	4619      	mov	r1, r3
 800e436:	4610      	mov	r0, r2
 800e438:	f7fa fbe0 	bl	8008bfc <lfs_min>
 800e43c:	4602      	mov	r2, r0
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7fb fb1d 	bl	8009a88 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800e44e:	f107 030c 	add.w	r3, r7, #12
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7fd f96f 	bl	800b738 <lfs_dir_alloc>
 800e45a:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800e45c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d14f      	bne.n	800e502 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800e462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e466:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e46c:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 800e46e:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e474:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 800e476:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800e47c:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800e482:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800e488:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 800e48a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fb fa3a 	bl	8009908 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800e494:	4b21      	ldr	r3, [pc, #132]	; (800e51c <lfs_rawformat+0x130>)
 800e496:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e498:	2300      	movs	r3, #0
 800e49a:	653b      	str	r3, [r7, #80]	; 0x50
 800e49c:	4b20      	ldr	r3, [pc, #128]	; (800e520 <lfs_rawformat+0x134>)
 800e49e:	657b      	str	r3, [r7, #84]	; 0x54
 800e4a0:	4b20      	ldr	r3, [pc, #128]	; (800e524 <lfs_rawformat+0x138>)
 800e4a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800e4a4:	4b20      	ldr	r3, [pc, #128]	; (800e528 <lfs_rawformat+0x13c>)
 800e4a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e4ac:	663b      	str	r3, [r7, #96]	; 0x60
 800e4ae:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e4b2:	f107 010c 	add.w	r1, r7, #12
 800e4b6:	2303      	movs	r3, #3
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f7fe fabb 	bl	800ca34 <lfs_dir_commit>
 800e4be:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800e4c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d11f      	bne.n	800e506 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800e4cc:	f107 010c 	add.w	r1, r7, #12
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f7fe faad 	bl	800ca34 <lfs_dir_commit>
 800e4da:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800e4dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d113      	bne.n	800e50a <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	633b      	str	r3, [r7, #48]	; 0x30
 800e4ea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e4ee:	f107 030c 	add.w	r3, r7, #12
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f7fc fd21 	bl	800af3c <lfs_dir_fetch>
 800e4fa:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800e4fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	e004      	b.n	800e50c <lfs_rawformat+0x120>
            goto cleanup;
 800e502:	bf00      	nop
 800e504:	e002      	b.n	800e50c <lfs_rawformat+0x120>
            goto cleanup;
 800e506:	bf00      	nop
 800e508:	e000      	b.n	800e50c <lfs_rawformat+0x120>
            goto cleanup;
 800e50a:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7ff ff45 	bl	800e39c <lfs_deinit>
    return err;
 800e512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 800e514:	4618      	mov	r0, r3
 800e516:	3780      	adds	r7, #128	; 0x80
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	40100000 	.word	0x40100000
 800e520:	0ff00008 	.word	0x0ff00008
 800e524:	0801e550 	.word	0x0801e550
 800e528:	20100018 	.word	0x20100018

0800e52c <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b09c      	sub	sp, #112	; 0x70
 800e530:	af04      	add	r7, sp, #16
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800e536:	6839      	ldr	r1, [r7, #0]
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff fd75 	bl	800e028 <lfs_init>
 800e53e:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 800e540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <lfs_rawmount+0x1e>
        return err;
 800e546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e548:	e17b      	b.n	800e842 <lfs_rawmount+0x316>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800e54a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e54e:	2220      	movs	r2, #32
 800e550:	2100      	movs	r1, #0
 800e552:	4618      	mov	r0, r3
 800e554:	f00e f96e 	bl	801c834 <memset>
 800e558:	2301      	movs	r3, #1
 800e55a:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 800e560:	e10b      	b.n	800e77a <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e566:	6a1b      	ldr	r3, [r3, #32]
 800e568:	085b      	lsrs	r3, r3, #1
 800e56a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d303      	bcc.n	800e578 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 800e570:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800e574:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e576:	e160      	b.n	800e83a <lfs_rawmount+0x30e>
        }
        cycle += 1;
 800e578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e57a:	3301      	adds	r3, #1
 800e57c:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	627b      	str	r3, [r7, #36]	; 0x24
 800e582:	4ba0      	ldr	r3, [pc, #640]	; (800e804 <lfs_rawmount+0x2d8>)
 800e584:	62bb      	str	r3, [r7, #40]	; 0x28
 800e586:	2308      	movs	r3, #8
 800e588:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800e58a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e58e:	f103 0218 	add.w	r2, r3, #24
 800e592:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800e596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e59a:	9303      	str	r3, [sp, #12]
 800e59c:	4b9a      	ldr	r3, [pc, #616]	; (800e808 <lfs_rawmount+0x2dc>)
 800e59e:	9302      	str	r3, [sp, #8]
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	9301      	str	r3, [sp, #4]
 800e5a4:	4b99      	ldr	r3, [pc, #612]	; (800e80c <lfs_rawmount+0x2e0>)
 800e5a6:	9300      	str	r3, [sp, #0]
 800e5a8:	4b99      	ldr	r3, [pc, #612]	; (800e810 <lfs_rawmount+0x2e4>)
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7fc f958 	bl	800a860 <lfs_dir_fetchmatch>
 800e5b0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800e5b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	da02      	bge.n	800e5be <lfs_rawmount+0x92>
            err = tag;
 800e5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5ba:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e5bc:	e13d      	b.n	800e83a <lfs_rawmount+0x30e>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800e5be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f000 80cd 	beq.w	800e760 <lfs_rawmount+0x234>
 800e5c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fa ffe0 	bl	800958e <lfs_tag_isdelete>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	f083 0301 	eor.w	r3, r3, #1
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f000 80c2 	beq.w	800e760 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 800e5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800e5e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800e5e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800e5ec:	f107 030c 	add.w	r3, r7, #12
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	4b88      	ldr	r3, [pc, #544]	; (800e814 <lfs_rawmount+0x2e8>)
 800e5f4:	4a86      	ldr	r2, [pc, #536]	; (800e810 <lfs_rawmount+0x2e4>)
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7fb fc00 	bl	8009dfc <lfs_dir_get>
 800e5fc:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800e5fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e600:	2b00      	cmp	r3, #0
 800e602:	da02      	bge.n	800e60a <lfs_rawmount+0xde>
                err = tag;
 800e604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e606:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e608:	e117      	b.n	800e83a <lfs_rawmount+0x30e>
            }
            lfs_superblock_fromle32(&superblock);
 800e60a:	f107 030c 	add.w	r3, r7, #12
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fb f942 	bl	8009898 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	0c1b      	lsrs	r3, r3, #16
 800e618:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800e622:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800e626:	2b02      	cmp	r3, #2
 800e628:	d103      	bne.n	800e632 <lfs_rawmount+0x106>
 800e62a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d011      	beq.n	800e656 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800e632:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800e636:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800e63a:	4977      	ldr	r1, [pc, #476]	; (800e818 <lfs_rawmount+0x2ec>)
 800e63c:	9101      	str	r1, [sp, #4]
 800e63e:	9300      	str	r3, [sp, #0]
 800e640:	4613      	mov	r3, r2
 800e642:	f241 0233 	movw	r2, #4147	; 0x1033
 800e646:	4975      	ldr	r1, [pc, #468]	; (800e81c <lfs_rawmount+0x2f0>)
 800e648:	4875      	ldr	r0, [pc, #468]	; (800e820 <lfs_rawmount+0x2f4>)
 800e64a:	f00d ff63 	bl	801c514 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800e64e:	f06f 0315 	mvn.w	r3, #21
 800e652:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e654:	e083      	b.n	800e75e <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d018      	beq.n	800e68e <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 800e65c:	69ba      	ldr	r2, [r7, #24]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e662:	429a      	cmp	r2, r3
 800e664:	d910      	bls.n	800e688 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800e666:	69ba      	ldr	r2, [r7, #24]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e66c:	496a      	ldr	r1, [pc, #424]	; (800e818 <lfs_rawmount+0x2ec>)
 800e66e:	9101      	str	r1, [sp, #4]
 800e670:	9300      	str	r3, [sp, #0]
 800e672:	4613      	mov	r3, r2
 800e674:	f241 023c 	movw	r2, #4156	; 0x103c
 800e678:	4968      	ldr	r1, [pc, #416]	; (800e81c <lfs_rawmount+0x2f0>)
 800e67a:	486a      	ldr	r0, [pc, #424]	; (800e824 <lfs_rawmount+0x2f8>)
 800e67c:	f00d ff4a 	bl	801c514 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800e680:	f06f 0315 	mvn.w	r3, #21
 800e684:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800e686:	e06a      	b.n	800e75e <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 800e688:	69ba      	ldr	r2, [r7, #24]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d018      	beq.n	800e6c6 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 800e694:	69fa      	ldr	r2, [r7, #28]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d910      	bls.n	800e6c0 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800e69e:	69fa      	ldr	r2, [r7, #28]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6a4:	495c      	ldr	r1, [pc, #368]	; (800e818 <lfs_rawmount+0x2ec>)
 800e6a6:	9101      	str	r1, [sp, #4]
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	4613      	mov	r3, r2
 800e6ac:	f241 0247 	movw	r2, #4167	; 0x1047
 800e6b0:	495a      	ldr	r1, [pc, #360]	; (800e81c <lfs_rawmount+0x2f0>)
 800e6b2:	485d      	ldr	r0, [pc, #372]	; (800e828 <lfs_rawmount+0x2fc>)
 800e6b4:	f00d ff2e 	bl	801c514 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800e6b8:	f06f 0315 	mvn.w	r3, #21
 800e6bc:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800e6be:	e04e      	b.n	800e75e <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 800e6c0:	69fa      	ldr	r2, [r7, #28]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800e6c6:	6a3b      	ldr	r3, [r7, #32]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d018      	beq.n	800e6fe <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 800e6cc:	6a3a      	ldr	r2, [r7, #32]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d910      	bls.n	800e6f8 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800e6d6:	6a3a      	ldr	r2, [r7, #32]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6dc:	494e      	ldr	r1, [pc, #312]	; (800e818 <lfs_rawmount+0x2ec>)
 800e6de:	9101      	str	r1, [sp, #4]
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	f241 0252 	movw	r2, #4178	; 0x1052
 800e6e8:	494c      	ldr	r1, [pc, #304]	; (800e81c <lfs_rawmount+0x2f0>)
 800e6ea:	4850      	ldr	r0, [pc, #320]	; (800e82c <lfs_rawmount+0x300>)
 800e6ec:	f00d ff12 	bl	801c514 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800e6f0:	f06f 0315 	mvn.w	r3, #21
 800e6f4:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800e6f6:	e032      	b.n	800e75e <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 800e6f8:	6a3a      	ldr	r2, [r7, #32]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 800e6fe:	697a      	ldr	r2, [r7, #20]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e704:	6a1b      	ldr	r3, [r3, #32]
 800e706:	429a      	cmp	r2, r3
 800e708:	d011      	beq.n	800e72e <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 800e70a:	697a      	ldr	r2, [r7, #20]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e710:	6a1b      	ldr	r3, [r3, #32]
 800e712:	4941      	ldr	r1, [pc, #260]	; (800e818 <lfs_rawmount+0x2ec>)
 800e714:	9101      	str	r1, [sp, #4]
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	4613      	mov	r3, r2
 800e71a:	f241 025c 	movw	r2, #4188	; 0x105c
 800e71e:	493f      	ldr	r1, [pc, #252]	; (800e81c <lfs_rawmount+0x2f0>)
 800e720:	4843      	ldr	r0, [pc, #268]	; (800e830 <lfs_rawmount+0x304>)
 800e722:	f00d fef7 	bl	801c514 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 800e726:	f06f 0315 	mvn.w	r3, #21
 800e72a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e72c:	e017      	b.n	800e75e <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 800e72e:	693a      	ldr	r2, [r7, #16]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e734:	69db      	ldr	r3, [r3, #28]
 800e736:	429a      	cmp	r2, r3
 800e738:	d012      	beq.n	800e760 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 800e73a:	693a      	ldr	r2, [r7, #16]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e740:	69db      	ldr	r3, [r3, #28]
 800e742:	4935      	ldr	r1, [pc, #212]	; (800e818 <lfs_rawmount+0x2ec>)
 800e744:	9101      	str	r1, [sp, #4]
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	4613      	mov	r3, r2
 800e74a:	f241 0263 	movw	r2, #4195	; 0x1063
 800e74e:	4933      	ldr	r1, [pc, #204]	; (800e81c <lfs_rawmount+0x2f0>)
 800e750:	4838      	ldr	r0, [pc, #224]	; (800e834 <lfs_rawmount+0x308>)
 800e752:	f00d fedf 	bl	801c514 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 800e756:	f06f 0315 	mvn.w	r3, #21
 800e75a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e75c:	bf00      	nop
            goto cleanup;
 800e75e:	e06c      	b.n	800e83a <lfs_rawmount+0x30e>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e76a:	4619      	mov	r1, r3
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f7fc fc01 	bl	800af74 <lfs_dir_getgstate>
 800e772:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 800e774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e776:	2b00      	cmp	r3, #0
 800e778:	d15e      	bne.n	800e838 <lfs_rawmount+0x30c>
    while (!lfs_pair_isnull(dir.tail)) {
 800e77a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e77e:	3318      	adds	r3, #24
 800e780:	4618      	mov	r0, r3
 800e782:	f7fa fe50 	bl	8009426 <lfs_pair_isnull>
 800e786:	4603      	mov	r3, r0
 800e788:	f083 0301 	eor.w	r3, r3, #1
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	f47f aee7 	bne.w	800e562 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	3320      	adds	r3, #32
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fa fe44 	bl	8009426 <lfs_pair_isnull>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d003      	beq.n	800e7ac <lfs_rawmount+0x280>
        err = LFS_ERR_INVAL;
 800e7a4:	f06f 0315 	mvn.w	r3, #21
 800e7a8:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800e7aa:	e046      	b.n	800e83a <lfs_rawmount+0x30e>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3330      	adds	r3, #48	; 0x30
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fa ff8f 	bl	80096d4 <lfs_gstate_iszero>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fa fed9 	bl	8009572 <lfs_tag_isvalid>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	f083 0301 	eor.w	r3, r3, #1
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ce:	441a      	add	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	333c      	adds	r3, #60	; 0x3c
 800e7da:	3230      	adds	r2, #48	; 0x30
 800e7dc:	ca07      	ldmia	r2, {r0, r1, r2}
 800e7de:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e7ea:	6a12      	ldr	r2, [r2, #32]
 800e7ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7f0:	fb01 f202 	mul.w	r2, r1, r2
 800e7f4:	1a9a      	subs	r2, r3, r2
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f7fb f953 	bl	8009aa6 <lfs_alloc_drop>

    return 0;
 800e800:	2300      	movs	r3, #0
 800e802:	e01e      	b.n	800e842 <lfs_rawmount+0x316>
 800e804:	0801e550 	.word	0x0801e550
 800e808:	0800b0cd 	.word	0x0800b0cd
 800e80c:	0ff00008 	.word	0x0ff00008
 800e810:	7ffffc00 	.word	0x7ffffc00
 800e814:	20100018 	.word	0x20100018
 800e818:	0801e14c 	.word	0x0801e14c
 800e81c:	0801e040 	.word	0x0801e040
 800e820:	0801e55c 	.word	0x0801e55c
 800e824:	0801e588 	.word	0x0801e588
 800e828:	0801e5bc 	.word	0x0801e5bc
 800e82c:	0801e5f0 	.word	0x0801e5f0
 800e830:	0801e624 	.word	0x0801e624
 800e834:	0801e658 	.word	0x0801e658
            goto cleanup;
 800e838:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f000 f806 	bl	800e84c <lfs_rawunmount>
    return err;
 800e840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800e842:	4618      	mov	r0, r3
 800e844:	3760      	adds	r7, #96	; 0x60
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop

0800e84c <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7ff fda1 	bl	800e39c <lfs_deinit>
 800e85a:	4603      	mov	r3, r0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3708      	adds	r7, #8
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800e864:	b590      	push	{r4, r7, lr}
 800e866:	b09d      	sub	sp, #116	; 0x74
 800e868:	af04      	add	r7, sp, #16
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800e872:	f107 0318 	add.w	r3, r7, #24
 800e876:	2220      	movs	r2, #32
 800e878:	2100      	movs	r1, #0
 800e87a:	4618      	mov	r0, r3
 800e87c:	f00d ffda 	bl	801c834 <memset>
 800e880:	2301      	movs	r3, #1
 800e882:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800e884:	2300      	movs	r3, #0
 800e886:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800e888:	e0a7      	b.n	800e9da <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e88e:	6a1b      	ldr	r3, [r3, #32]
 800e890:	085b      	lsrs	r3, r3, #1
 800e892:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e894:	429a      	cmp	r2, r3
 800e896:	d302      	bcc.n	800e89e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 800e898:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800e89c:	e102      	b.n	800eaa4 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 800e89e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800e8a8:	e013      	b.n	800e8d2 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 800e8aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8ac:	3306      	adds	r3, #6
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	3360      	adds	r3, #96	; 0x60
 800e8b2:	443b      	add	r3, r7
 800e8b4:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	4798      	blx	r3
 800e8c0:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 800e8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <lfs_fs_rawtraverse+0x68>
                return err;
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ca:	e0eb      	b.n	800eaa4 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 800e8cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e8d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	dde8      	ble.n	800e8aa <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800e8d8:	f107 0318 	add.w	r3, r7, #24
 800e8dc:	f103 0218 	add.w	r2, r3, #24
 800e8e0:	f107 0318 	add.w	r3, r7, #24
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	f7fc fb28 	bl	800af3c <lfs_dir_fetch>
 800e8ec:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800e8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <lfs_fs_rawtraverse+0x94>
            return err;
 800e8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f6:	e0d5      	b.n	800eaa4 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e8fe:	e067      	b.n	800e9d0 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800e900:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e904:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800e906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e90a:	f043 0308 	orr.w	r3, r3, #8
 800e90e:	f107 0118 	add.w	r1, r7, #24
 800e912:	f107 0210 	add.w	r2, r7, #16
 800e916:	9200      	str	r2, [sp, #0]
 800e918:	4a64      	ldr	r2, [pc, #400]	; (800eaac <lfs_fs_rawtraverse+0x248>)
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f7fb fa6e 	bl	8009dfc <lfs_dir_get>
 800e920:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800e922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e924:	2b00      	cmp	r3, #0
 800e926:	da05      	bge.n	800e934 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 800e928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e92a:	f113 0f02 	cmn.w	r3, #2
 800e92e:	d049      	beq.n	800e9c4 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 800e930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e932:	e0b7      	b.n	800eaa4 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 800e934:	f107 0310 	add.w	r3, r7, #16
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fa ff7d 	bl	8009838 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800e93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e940:	4618      	mov	r0, r3
 800e942:	f7fa fe47 	bl	80095d4 <lfs_tag_type3>
 800e946:	4603      	mov	r3, r0
 800e948:	461a      	mov	r2, r3
 800e94a:	f240 2302 	movw	r3, #514	; 0x202
 800e94e:	429a      	cmp	r2, r3
 800e950:	d113      	bne.n	800e97a <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800e952:	68f9      	ldr	r1, [r7, #12]
 800e954:	6938      	ldr	r0, [r7, #16]
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	9202      	str	r2, [sp, #8]
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	9201      	str	r2, [sp, #4]
 800e960:	9300      	str	r3, [sp, #0]
 800e962:	4603      	mov	r3, r0
 800e964:	460a      	mov	r2, r1
 800e966:	2100      	movs	r1, #0
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	f7fe fc70 	bl	800d24e <lfs_ctz_traverse>
 800e96e:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800e970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e972:	2b00      	cmp	r3, #0
 800e974:	d027      	beq.n	800e9c6 <lfs_fs_rawtraverse+0x162>
                    return err;
 800e976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e978:	e094      	b.n	800eaa4 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800e97a:	78fb      	ldrb	r3, [r7, #3]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d022      	beq.n	800e9c6 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800e980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e982:	4618      	mov	r0, r3
 800e984:	f7fa fe26 	bl	80095d4 <lfs_tag_type3>
 800e988:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800e98a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e98e:	d11a      	bne.n	800e9c6 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 800e990:	2300      	movs	r3, #0
 800e992:	653b      	str	r3, [r7, #80]	; 0x50
 800e994:	e012      	b.n	800e9bc <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 800e996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	f107 0210 	add.w	r2, r7, #16
 800e99e:	4413      	add	r3, r2
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	4798      	blx	r3
 800e9aa:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800e9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <lfs_fs_rawtraverse+0x152>
                        return err;
 800e9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b4:	e076      	b.n	800eaa4 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 800e9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	653b      	str	r3, [r7, #80]	; 0x50
 800e9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	dde9      	ble.n	800e996 <lfs_fs_rawtraverse+0x132>
 800e9c2:	e000      	b.n	800e9c6 <lfs_fs_rawtraverse+0x162>
                    continue;
 800e9c4:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800e9c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e9d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e9d2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d392      	bcc.n	800e900 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 800e9da:	f107 0318 	add.w	r3, r7, #24
 800e9de:	3318      	adds	r3, #24
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7fa fd20 	bl	8009426 <lfs_pair_isnull>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	f083 0301 	eor.w	r3, r3, #1
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f47f af4b 	bne.w	800e88a <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e9fa:	e04f      	b.n	800ea9c <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 800e9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9fe:	799b      	ldrb	r3, [r3, #6]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d147      	bne.n	800ea94 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800ea04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d01d      	beq.n	800ea4c <lfs_fs_rawtraverse+0x1e8>
 800ea10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d117      	bne.n	800ea4c <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800ea1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea1e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea26:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800ea28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	9202      	str	r2, [sp, #8]
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	9201      	str	r2, [sp, #4]
 800ea34:	9300      	str	r3, [sp, #0]
 800ea36:	4623      	mov	r3, r4
 800ea38:	4602      	mov	r2, r0
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	f7fe fc07 	bl	800d24e <lfs_ctz_traverse>
 800ea40:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800ea42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d001      	beq.n	800ea4c <lfs_fs_rawtraverse+0x1e8>
                return err;
 800ea48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea4a:	e02b      	b.n	800eaa4 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800ea4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d01e      	beq.n	800ea96 <lfs_fs_rawtraverse+0x232>
 800ea58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d118      	bne.n	800ea96 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800ea64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea66:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea6e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800ea70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	9202      	str	r2, [sp, #8]
 800ea78:	68ba      	ldr	r2, [r7, #8]
 800ea7a:	9201      	str	r2, [sp, #4]
 800ea7c:	9300      	str	r3, [sp, #0]
 800ea7e:	4623      	mov	r3, r4
 800ea80:	4602      	mov	r2, r0
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f7fe fbe3 	bl	800d24e <lfs_ctz_traverse>
 800ea88:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800ea8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d002      	beq.n	800ea96 <lfs_fs_rawtraverse+0x232>
                return err;
 800ea90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea92:	e007      	b.n	800eaa4 <lfs_fs_rawtraverse+0x240>
            continue;
 800ea94:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800ea96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1ac      	bne.n	800e9fc <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3764      	adds	r7, #100	; 0x64
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd90      	pop	{r4, r7, pc}
 800eaac:	700ffc00 	.word	0x700ffc00

0800eab0 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b086      	sub	sp, #24
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2200      	movs	r2, #0
 800eac0:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800eacc:	e024      	b.n	800eb18 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ead2:	6a1b      	ldr	r3, [r3, #32]
 800ead4:	085b      	lsrs	r3, r3, #1
 800ead6:	697a      	ldr	r2, [r7, #20]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d302      	bcc.n	800eae2 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800eadc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800eae0:	e027      	b.n	800eb32 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	3301      	adds	r3, #1
 800eae6:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	3318      	adds	r3, #24
 800eaec:	68b9      	ldr	r1, [r7, #8]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fa fcb4 	bl	800945c <lfs_pair_cmp>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <lfs_fs_pred+0x4e>
            return 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	e019      	b.n	800eb32 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	3318      	adds	r3, #24
 800eb02:	461a      	mov	r2, r3
 800eb04:	6879      	ldr	r1, [r7, #4]
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f7fc fa18 	bl	800af3c <lfs_dir_fetch>
 800eb0c:	6138      	str	r0, [r7, #16]
        if (err) {
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d001      	beq.n	800eb18 <lfs_fs_pred+0x68>
            return err;
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	e00c      	b.n	800eb32 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	3318      	adds	r3, #24
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fa fc82 	bl	8009426 <lfs_pair_isnull>
 800eb22:	4603      	mov	r3, r0
 800eb24:	f083 0301 	eor.w	r3, r3, #1
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1cf      	bne.n	800eace <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800eb2e:	f06f 0301 	mvn.w	r3, #1
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3718      	adds	r7, #24
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800eb3a:	b5b0      	push	{r4, r5, r7, lr}
 800eb3c:	b08e      	sub	sp, #56	; 0x38
 800eb3e:	af04      	add	r7, sp, #16
 800eb40:	60f8      	str	r0, [r7, #12]
 800eb42:	60b9      	str	r1, [r7, #8]
 800eb44:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800eb54:	6a3b      	ldr	r3, [r7, #32]
 800eb56:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800eb5a:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800eb5c:	6a3b      	ldr	r3, [r7, #32]
 800eb5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb60:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	69fa      	ldr	r2, [r7, #28]
 800eb68:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 800eb6a:	2108      	movs	r1, #8
 800eb6c:	9103      	str	r1, [sp, #12]
 800eb6e:	f107 0110 	add.w	r1, r7, #16
 800eb72:	9102      	str	r1, [sp, #8]
 800eb74:	9201      	str	r2, [sp, #4]
 800eb76:	9300      	str	r3, [sp, #0]
 800eb78:	462b      	mov	r3, r5
 800eb7a:	4622      	mov	r2, r4
 800eb7c:	4601      	mov	r1, r0
 800eb7e:	6a38      	ldr	r0, [r7, #32]
 800eb80:	f7fa f918 	bl	8008db4 <lfs_bd_read>
 800eb84:	61b8      	str	r0, [r7, #24]
    if (err) {
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d001      	beq.n	800eb90 <lfs_fs_parent_match+0x56>
        return err;
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	e012      	b.n	800ebb6 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800eb90:	f107 0310 	add.w	r3, r7, #16
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7fa fcb8 	bl	800950a <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9c:	1d1a      	adds	r2, r3, #4
 800eb9e:	f107 0310 	add.w	r3, r7, #16
 800eba2:	4611      	mov	r1, r2
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fa fc59 	bl	800945c <lfs_pair_cmp>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	bf14      	ite	ne
 800ebb0:	2301      	movne	r3, #1
 800ebb2:	2300      	moveq	r3, #0
 800ebb4:	b2db      	uxtb	r3, r3
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3728      	adds	r7, #40	; 0x28
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ebc0 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b08e      	sub	sp, #56	; 0x38
 800ebc4:	af04      	add	r7, sp, #16
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800ebdc:	e030      	b.n	800ec40 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebe2:	6a1b      	ldr	r3, [r3, #32]
 800ebe4:	085b      	lsrs	r3, r3, #1
 800ebe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d302      	bcc.n	800ebf2 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800ebec:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800ebf0:	e033      	b.n	800ec5a <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800ec06:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800ec0e:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800ec10:	f107 0314 	add.w	r3, r7, #20
 800ec14:	9303      	str	r3, [sp, #12]
 800ec16:	4b13      	ldr	r3, [pc, #76]	; (800ec64 <lfs_fs_parent+0xa4>)
 800ec18:	9302      	str	r3, [sp, #8]
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	9301      	str	r3, [sp, #4]
 800ec1e:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <lfs_fs_parent+0xa8>)
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	4b12      	ldr	r3, [pc, #72]	; (800ec6c <lfs_fs_parent+0xac>)
 800ec24:	6879      	ldr	r1, [r7, #4]
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f7fb fe1a 	bl	800a860 <lfs_dir_fetchmatch>
 800ec2c:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800ec2e:	6a3b      	ldr	r3, [r7, #32]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d005      	beq.n	800ec40 <lfs_fs_parent+0x80>
 800ec34:	6a3b      	ldr	r3, [r7, #32]
 800ec36:	f113 0f02 	cmn.w	r3, #2
 800ec3a:	d001      	beq.n	800ec40 <lfs_fs_parent+0x80>
            return tag;
 800ec3c:	6a3b      	ldr	r3, [r7, #32]
 800ec3e:	e00c      	b.n	800ec5a <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	3318      	adds	r3, #24
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fa fbee 	bl	8009426 <lfs_pair_isnull>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	f083 0301 	eor.w	r3, r3, #1
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1c3      	bne.n	800ebde <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800ec56:	f06f 0301 	mvn.w	r3, #1
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3728      	adds	r7, #40	; 0x28
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	0800eb3b 	.word	0x0800eb3b
 800ec68:	20000008 	.word	0x20000008
 800ec6c:	7ff003ff 	.word	0x7ff003ff

0800ec70 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800ec70:	b590      	push	{r4, r7, lr}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fa fce1 	bl	8009648 <lfs_tag_size>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10a      	bne.n	800eca2 <lfs_fs_preporphans+0x32>
 800ec8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	da06      	bge.n	800eca2 <lfs_fs_preporphans+0x32>
 800ec94:	4b10      	ldr	r3, [pc, #64]	; (800ecd8 <lfs_fs_preporphans+0x68>)
 800ec96:	4a11      	ldr	r2, [pc, #68]	; (800ecdc <lfs_fs_preporphans+0x6c>)
 800ec98:	f241 114c 	movw	r1, #4428	; 0x114c
 800ec9c:	4810      	ldr	r0, [pc, #64]	; (800ece0 <lfs_fs_preporphans+0x70>)
 800ec9e:	f00d fa4d 	bl	801c13c <__assert_func>
    lfs->gstate.tag += orphans;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecaa:	441a      	add	r2, r3
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	3330      	adds	r3, #48	; 0x30
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fa fd26 	bl	800970e <lfs_gstate_hasorphans>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800ecc6:	ea44 0203 	orr.w	r2, r4, r3
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd90      	pop	{r4, r7, pc}
 800ecd8:	0801e688 	.word	0x0801e688
 800ecdc:	08021678 	.word	0x08021678
 800ece0:	0801e040 	.word	0x0801e040

0800ece4 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	460b      	mov	r3, r1
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf6:	4a17      	ldr	r2, [pc, #92]	; (800ed54 <lfs_fs_prepmove+0x70>)
 800ecf8:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800ecfa:	897b      	ldrh	r3, [r7, #10]
 800ecfc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ed00:	428b      	cmp	r3, r1
 800ed02:	d006      	beq.n	800ed12 <lfs_fs_prepmove+0x2e>
 800ed04:	897b      	ldrh	r3, [r7, #10]
 800ed06:	029b      	lsls	r3, r3, #10
 800ed08:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800ed0c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800ed10:	e000      	b.n	800ed14 <lfs_fs_prepmove+0x30>
 800ed12:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800ed14:	431a      	orrs	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800ed1a:	897b      	ldrh	r3, [r7, #10]
 800ed1c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d002      	beq.n	800ed2a <lfs_fs_prepmove+0x46>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	e000      	b.n	800ed2c <lfs_fs_prepmove+0x48>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800ed30:	897b      	ldrh	r3, [r7, #10]
 800ed32:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d003      	beq.n	800ed42 <lfs_fs_prepmove+0x5e>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	e000      	b.n	800ed44 <lfs_fs_prepmove+0x60>
 800ed42:	2300      	movs	r3, #0
 800ed44:	68fa      	ldr	r2, [r7, #12]
 800ed46:	6393      	str	r3, [r2, #56]	; 0x38
}
 800ed48:	bf00      	nop
 800ed4a:	3714      	adds	r7, #20
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr
 800ed54:	800003ff 	.word	0x800003ff

0800ed58 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b090      	sub	sp, #64	; 0x40
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	333c      	adds	r3, #60	; 0x3c
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fa fcf4 	bl	8009752 <lfs_gstate_hasmove>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	f083 0301 	eor.w	r3, r3, #1
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d001      	beq.n	800ed7a <lfs_fs_demove+0x22>
        return 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	e033      	b.n	800ede2 <lfs_fs_demove+0x8a>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800ed80:	f107 0318 	add.w	r3, r7, #24
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f7fc f8d8 	bl	800af3c <lfs_dir_fetch>
 800ed8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 800ed8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <lfs_fs_demove+0x40>
        return err;
 800ed94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed96:	e024      	b.n	800ede2 <lfs_fs_demove+0x8a>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fa fc43 	bl	8009628 <lfs_tag_id>
 800eda2:	4603      	mov	r3, r0
 800eda4:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800eda6:	2200      	movs	r2, #0
 800eda8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7ff ff99 	bl	800ece4 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800edb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800edb4:	029b      	lsls	r3, r3, #10
 800edb6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800edba:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800edbe:	613b      	str	r3, [r7, #16]
 800edc0:	2300      	movs	r3, #0
 800edc2:	617b      	str	r3, [r7, #20]
 800edc4:	f107 0210 	add.w	r2, r7, #16
 800edc8:	f107 0118 	add.w	r1, r7, #24
 800edcc:	2301      	movs	r3, #1
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7fd fe30 	bl	800ca34 <lfs_dir_commit>
 800edd4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800edd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d001      	beq.n	800ede0 <lfs_fs_demove+0x88>
        return err;
 800eddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edde:	e000      	b.n	800ede2 <lfs_fs_demove+0x8a>
    }

    return 0;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3740      	adds	r7, #64	; 0x40
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
	...

0800edec <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 800edec:	b5b0      	push	{r4, r5, r7, lr}
 800edee:	b0b0      	sub	sp, #192	; 0xc0
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	3330      	adds	r3, #48	; 0x30
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7fa fc86 	bl	800970e <lfs_gstate_hasorphans>
 800ee02:	4603      	mov	r3, r0
 800ee04:	f083 0301 	eor.w	r3, r3, #1
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <lfs_fs_deorphan+0x26>
        return 0;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e14f      	b.n	800f0b2 <lfs_fs_deorphan+0x2c6>
    }

    int8_t found = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800ee18:	f107 030c 	add.w	r3, r7, #12
 800ee1c:	2220      	movs	r2, #32
 800ee1e:	2100      	movs	r1, #0
 800ee20:	4618      	mov	r0, r3
 800ee22:	f00d fd07 	bl	801c834 <memset>
 800ee26:	2301      	movs	r3, #1
 800ee28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 800ee30:	e11b      	b.n	800f06a <lfs_fs_deorphan+0x27e>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800ee32:	f107 030c 	add.w	r3, r7, #12
 800ee36:	f103 0218 	add.w	r2, r3, #24
 800ee3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7fc f87b 	bl	800af3c <lfs_dir_fetch>
 800ee46:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 800ee4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d002      	beq.n	800ee58 <lfs_fs_deorphan+0x6c>
                return err;
 800ee52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ee56:	e12c      	b.n	800f0b2 <lfs_fs_deorphan+0x2c6>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 800ee58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee5c:	f083 0301 	eor.w	r3, r3, #1
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f000 80f7 	beq.w	800f056 <lfs_fs_deorphan+0x26a>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800ee68:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800ee6c:	f107 030c 	add.w	r3, r7, #12
 800ee70:	3318      	adds	r3, #24
 800ee72:	4619      	mov	r1, r3
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f7ff fea3 	bl	800ebc0 <lfs_fs_parent>
 800ee7a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 800ee7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	da07      	bge.n	800ee96 <lfs_fs_deorphan+0xaa>
 800ee86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee8a:	f113 0f02 	cmn.w	r3, #2
 800ee8e:	d002      	beq.n	800ee96 <lfs_fs_deorphan+0xaa>
                    return tag;
 800ee90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee94:	e10d      	b.n	800f0b2 <lfs_fs_deorphan+0x2c6>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 800ee96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee9a:	f113 0f02 	cmn.w	r3, #2
 800ee9e:	d14b      	bne.n	800ef38 <lfs_fs_deorphan+0x14c>
 800eea0:	78fb      	ldrb	r3, [r7, #3]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d048      	beq.n	800ef38 <lfs_fs_deorphan+0x14c>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800eeac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f7fc f85e 	bl	800af74 <lfs_dir_getgstate>
 800eeb8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 800eebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <lfs_fs_deorphan+0xde>
                        return err;
 800eec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800eec8:	e0f3      	b.n	800f0b2 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 800eeca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eece:	3318      	adds	r3, #24
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fa fb34 	bl	800953e <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800eed6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eeda:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800eede:	051a      	lsls	r2, r3, #20
 800eee0:	4b76      	ldr	r3, [pc, #472]	; (800f0bc <lfs_fs_deorphan+0x2d0>)
 800eee2:	4313      	orrs	r3, r2
 800eee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800eee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eeec:	3318      	adds	r3, #24
 800eeee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800eef2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800eef6:	f107 010c 	add.w	r1, r7, #12
 800eefa:	2301      	movs	r3, #1
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7fd fadf 	bl	800c4c0 <lfs_dir_orphaningcommit>
 800ef02:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 800ef06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ef0a:	3318      	adds	r3, #24
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fa fafc 	bl	800950a <lfs_pair_fromle32>
                    if (state < 0) {
 800ef12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	da02      	bge.n	800ef20 <lfs_fs_deorphan+0x134>
                        return state;
 800ef1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 800ef1e:	e0c8      	b.n	800f0b2 <lfs_fs_deorphan+0x2c6>
                    }

                    found += 1;
 800ef20:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800ef24:	3301      	adds	r3, #1
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 800ef2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ef30:	2b03      	cmp	r3, #3
 800ef32:	f040 808e 	bne.w	800f052 <lfs_fs_deorphan+0x266>
                        goto restart;
 800ef36:	e76f      	b.n	800ee18 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 800ef38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef3c:	f113 0f02 	cmn.w	r3, #2
 800ef40:	f000 8089 	beq.w	800f056 <lfs_fs_deorphan+0x26a>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 800ef44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ef48:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800ef4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	4613      	mov	r3, r2
 800ef54:	4a5a      	ldr	r2, [pc, #360]	; (800f0c0 <lfs_fs_deorphan+0x2d4>)
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7fa ff50 	bl	8009dfc <lfs_dir_get>
 800ef5c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 800ef60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	da02      	bge.n	800ef6e <lfs_fs_deorphan+0x182>
                        return state;
 800ef68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ef6c:	e0a1      	b.n	800f0b2 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 800ef6e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7fa fac9 	bl	800950a <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 800ef78:	f107 030c 	add.w	r3, r7, #12
 800ef7c:	f103 0218 	add.w	r2, r3, #24
 800ef80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ef84:	4611      	mov	r1, r2
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fa fa92 	bl	80094b0 <lfs_pair_sync>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	f083 0301 	eor.w	r3, r3, #1
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d05e      	beq.n	800f056 <lfs_fs_deorphan+0x26a>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 800ef98:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800ef9c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	3330      	adds	r3, #48	; 0x30
 800efa4:	f107 020c 	add.w	r2, r7, #12
 800efa8:	4611      	mov	r1, r2
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fa fbe4 	bl	8009778 <lfs_gstate_hasmovehere>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d00d      	beq.n	800efd2 <lfs_fs_deorphan+0x1e6>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fa fb34 	bl	8009628 <lfs_tag_id>
 800efc0:	4603      	mov	r3, r0
 800efc2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800efc6:	2200      	movs	r2, #0
 800efc8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7ff fe89 	bl	800ece4 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 800efd2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fa fab1 	bl	800953e <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 800efdc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800efe0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d007      	beq.n	800eff8 <lfs_fs_deorphan+0x20c>
 800efe8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800efec:	029b      	lsls	r3, r3, #10
 800efee:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800eff2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800eff6:	e000      	b.n	800effa <lfs_fs_deorphan+0x20e>
 800eff8:	2300      	movs	r3, #0
 800effa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800effc:	2300      	movs	r3, #0
 800effe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f002:	4b30      	ldr	r3, [pc, #192]	; (800f0c4 <lfs_fs_deorphan+0x2d8>)
 800f004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f008:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f00c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f010:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800f014:	f107 010c 	add.w	r1, r7, #12
 800f018:	2302      	movs	r3, #2
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7fd fa50 	bl	800c4c0 <lfs_dir_orphaningcommit>
 800f020:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 800f024:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fa fa6e 	bl	800950a <lfs_pair_fromle32>
                        if (state < 0) {
 800f02e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f032:	2b00      	cmp	r3, #0
 800f034:	da02      	bge.n	800f03c <lfs_fs_deorphan+0x250>
                            return state;
 800f036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 800f03a:	e03a      	b.n	800f0b2 <lfs_fs_deorphan+0x2c6>
                        }

                        found += 1;
 800f03c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800f040:	3301      	adds	r3, #1
 800f042:	b2db      	uxtb	r3, r3
 800f044:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 800f048:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f04c:	2b03      	cmp	r3, #3
 800f04e:	d10c      	bne.n	800f06a <lfs_fs_deorphan+0x27e>
 800f050:	e6e2      	b.n	800ee18 <lfs_fs_deorphan+0x2c>
                    continue;
 800f052:	bf00      	nop
 800f054:	e009      	b.n	800f06a <lfs_fs_deorphan+0x27e>
                        continue;
                    }
                }
            }

            pdir = dir;
 800f056:	f107 040c 	add.w	r4, r7, #12
 800f05a:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 800f05e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f062:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 800f06a:	f107 030c 	add.w	r3, r7, #12
 800f06e:	3318      	adds	r3, #24
 800f070:	4618      	mov	r0, r3
 800f072:	f7fa f9d8 	bl	8009426 <lfs_pair_isnull>
 800f076:	4603      	mov	r3, r0
 800f078:	f083 0301 	eor.w	r3, r3, #1
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	f47f aed7 	bne.w	800ee32 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	3330      	adds	r3, #48	; 0x30
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fa fb53 	bl	8009734 <lfs_gstate_getorphans>
 800f08e:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 800f090:	461a      	mov	r2, r3
 800f092:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 800f096:	4619      	mov	r1, r3
 800f098:	4610      	mov	r0, r2
 800f09a:	f7f9 fdaf 	bl	8008bfc <lfs_min>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	425b      	negs	r3, r3
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	b25b      	sxtb	r3, r3
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7ff fde0 	bl	800ec70 <lfs_fs_preporphans>
 800f0b0:	4603      	mov	r3, r0
            found));
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	37b8      	adds	r7, #184	; 0xb8
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bdb0      	pop	{r4, r5, r7, pc}
 800f0ba:	bf00      	nop
 800f0bc:	000ffc08 	.word	0x000ffc08
 800f0c0:	7ffffc00 	.word	0x7ffffc00
 800f0c4:	600ffc08 	.word	0x600ffc08

0800f0c8 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f7ff fe41 	bl	800ed58 <lfs_fs_demove>
 800f0d6:	60f8      	str	r0, [r7, #12]
    if (err) {
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <lfs_fs_forceconsistency+0x1a>
        return err;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	e00a      	b.n	800f0f8 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 800f0e2:	2101      	movs	r1, #1
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff fe81 	bl	800edec <lfs_fs_deorphan>
 800f0ea:	60f8      	str	r0, [r7, #12]
    if (err) {
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d001      	beq.n	800f0f6 <lfs_fs_forceconsistency+0x2e>
        return err;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	e000      	b.n	800f0f8 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 800f0f6:	2300      	movs	r3, #0
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3710      	adds	r7, #16
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	1c5a      	adds	r2, r3, #1
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	601a      	str	r2, [r3, #0]
    return 0;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3714      	adds	r7, #20
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr
	...

0800f128 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800f130:	2300      	movs	r3, #0
 800f132:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800f134:	f107 0208 	add.w	r2, r7, #8
 800f138:	2300      	movs	r3, #0
 800f13a:	4907      	ldr	r1, [pc, #28]	; (800f158 <lfs_fs_rawsize+0x30>)
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7ff fb91 	bl	800e864 <lfs_fs_rawtraverse>
 800f142:	60f8      	str	r0, [r7, #12]
    if (err) {
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d001      	beq.n	800f14e <lfs_fs_rawsize+0x26>
        return err;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	e000      	b.n	800f150 <lfs_fs_rawsize+0x28>
    }

    return size;
 800f14e:	68bb      	ldr	r3, [r7, #8]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	0800f101 	.word	0x0800f101

0800f15c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800f166:	2300      	movs	r3, #0
 800f168:	60fb      	str	r3, [r7, #12]
    if (err) {
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d001      	beq.n	800f174 <lfs_format+0x18>
        return err;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	e005      	b.n	800f180 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800f174:	6839      	ldr	r1, [r7, #0]
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff f938 	bl	800e3ec <lfs_rawformat>
 800f17c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800f17e:	68fb      	ldr	r3, [r7, #12]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]
    if (err) {
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d001      	beq.n	800f1a0 <lfs_mount+0x18>
        return err;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	e005      	b.n	800f1ac <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800f1a0:	6839      	ldr	r1, [r7, #0]
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7ff f9c2 	bl	800e52c <lfs_rawmount>
 800f1a8:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3710      	adds	r7, #16
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b086      	sub	sp, #24
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	607a      	str	r2, [r7, #4]
 800f1c0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	617b      	str	r3, [r7, #20]
    if (err) {
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d001      	beq.n	800f1d0 <lfs_file_open+0x1c>
        return err;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	e01a      	b.n	800f206 <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1d4:	68b9      	ldr	r1, [r7, #8]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fa fbce 	bl	8009978 <lfs_mlist_isopen>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	f083 0301 	eor.w	r3, r3, #1
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d106      	bne.n	800f1f6 <lfs_file_open+0x42>
 800f1e8:	4b09      	ldr	r3, [pc, #36]	; (800f210 <lfs_file_open+0x5c>)
 800f1ea:	4a0a      	ldr	r2, [pc, #40]	; (800f214 <lfs_file_open+0x60>)
 800f1ec:	f241 5166 	movw	r1, #5478	; 0x1566
 800f1f0:	4809      	ldr	r0, [pc, #36]	; (800f218 <lfs_file_open+0x64>)
 800f1f2:	f00c ffa3 	bl	801c13c <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	68b9      	ldr	r1, [r7, #8]
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f7fe fa73 	bl	800d6e8 <lfs_file_rawopen>
 800f202:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800f204:	697b      	ldr	r3, [r7, #20]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3718      	adds	r7, #24
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}
 800f20e:	bf00      	nop
 800f210:	0801e6bc 	.word	0x0801e6bc
 800f214:	0802168c 	.word	0x0802168c
 800f218:	0801e040 	.word	0x0801e040

0800f21c <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800f226:	2300      	movs	r3, #0
 800f228:	60fb      	str	r3, [r7, #12]
    if (err) {
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <lfs_file_close+0x18>
        return err;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	e015      	b.n	800f260 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f238:	6839      	ldr	r1, [r7, #0]
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fa fb9c 	bl	8009978 <lfs_mlist_isopen>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d106      	bne.n	800f254 <lfs_file_close+0x38>
 800f246:	4b08      	ldr	r3, [pc, #32]	; (800f268 <lfs_file_close+0x4c>)
 800f248:	4a08      	ldr	r2, [pc, #32]	; (800f26c <lfs_file_close+0x50>)
 800f24a:	f241 518a 	movw	r1, #5514	; 0x158a
 800f24e:	4808      	ldr	r0, [pc, #32]	; (800f270 <lfs_file_close+0x54>)
 800f250:	f00c ff74 	bl	801c13c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 800f254:	6839      	ldr	r1, [r7, #0]
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7fe fa5e 	bl	800d718 <lfs_file_rawclose>
 800f25c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800f25e:	68fb      	ldr	r3, [r7, #12]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3710      	adds	r7, #16
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	0801e6f4 	.word	0x0801e6f4
 800f26c:	0802169c 	.word	0x0802169c
 800f270:	0801e040 	.word	0x0801e040

0800f274 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800f282:	2300      	movs	r3, #0
 800f284:	617b      	str	r3, [r7, #20]
    if (err) {
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d001      	beq.n	800f290 <lfs_file_read+0x1c>
        return err;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	e017      	b.n	800f2c0 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f294:	68b9      	ldr	r1, [r7, #8]
 800f296:	4618      	mov	r0, r3
 800f298:	f7fa fb6e 	bl	8009978 <lfs_mlist_isopen>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d106      	bne.n	800f2b0 <lfs_file_read+0x3c>
 800f2a2:	4b09      	ldr	r3, [pc, #36]	; (800f2c8 <lfs_file_read+0x54>)
 800f2a4:	4a09      	ldr	r2, [pc, #36]	; (800f2cc <lfs_file_read+0x58>)
 800f2a6:	f241 51ac 	movw	r1, #5548	; 0x15ac
 800f2aa:	4809      	ldr	r0, [pc, #36]	; (800f2d0 <lfs_file_read+0x5c>)
 800f2ac:	f00c ff46 	bl	801c13c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	68b9      	ldr	r1, [r7, #8]
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	f7fe fd58 	bl	800dd6c <lfs_file_rawread>
 800f2bc:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 800f2be:	693b      	ldr	r3, [r7, #16]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	0801e6f4 	.word	0x0801e6f4
 800f2cc:	080216ac 	.word	0x080216ac
 800f2d0:	0801e040 	.word	0x0801e040

0800f2d4 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800f2de:	2300      	movs	r3, #0
 800f2e0:	60fb      	str	r3, [r7, #12]
    if (err) {
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d001      	beq.n	800f2ec <lfs_mkdir+0x18>
        return err;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	e005      	b.n	800f2f8 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 800f2ec:	6839      	ldr	r1, [r7, #0]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7fd fbc6 	bl	800ca80 <lfs_rawmkdir>
 800f2f4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800f30c:	2300      	movs	r3, #0
 800f30e:	617b      	str	r3, [r7, #20]
    if (err) {
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d001      	beq.n	800f31a <lfs_dir_open+0x1a>
        return err;
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	e019      	b.n	800f34e <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f31e:	68b9      	ldr	r1, [r7, #8]
 800f320:	4618      	mov	r0, r3
 800f322:	f7fa fb29 	bl	8009978 <lfs_mlist_isopen>
 800f326:	4603      	mov	r3, r0
 800f328:	f083 0301 	eor.w	r3, r3, #1
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d106      	bne.n	800f340 <lfs_dir_open+0x40>
 800f332:	4b09      	ldr	r3, [pc, #36]	; (800f358 <lfs_dir_open+0x58>)
 800f334:	4a09      	ldr	r2, [pc, #36]	; (800f35c <lfs_dir_open+0x5c>)
 800f336:	f241 612d 	movw	r1, #5677	; 0x162d
 800f33a:	4809      	ldr	r0, [pc, #36]	; (800f360 <lfs_dir_open+0x60>)
 800f33c:	f00c fefe 	bl	801c13c <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	68b9      	ldr	r1, [r7, #8]
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f7fd fcdb 	bl	800cd00 <lfs_dir_rawopen>
 800f34a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800f34c:	697b      	ldr	r3, [r7, #20]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3718      	adds	r7, #24
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
 800f356:	bf00      	nop
 800f358:	0801e72c 	.word	0x0801e72c
 800f35c:	080216bc 	.word	0x080216bc
 800f360:	0801e040 	.word	0x0801e040

0800f364 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800f36e:	2300      	movs	r3, #0
 800f370:	60fb      	str	r3, [r7, #12]
    if (err) {
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d001      	beq.n	800f37c <lfs_dir_close+0x18>
        return err;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	e005      	b.n	800f388 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 800f37c:	6839      	ldr	r1, [r7, #0]
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7fd fd38 	bl	800cdf4 <lfs_dir_rawclose>
 800f384:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800f386:	68fb      	ldr	r3, [r7, #12]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 800f390:	b580      	push	{r7, lr}
 800f392:	b086      	sub	sp, #24
 800f394:	af00      	add	r7, sp, #0
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	60b9      	str	r1, [r7, #8]
 800f39a:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 800f39c:	2300      	movs	r3, #0
 800f39e:	617b      	str	r3, [r7, #20]
    if (err) {
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d001      	beq.n	800f3aa <lfs_dir_read+0x1a>
        return err;
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	e006      	b.n	800f3b8 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	68b9      	ldr	r1, [r7, #8]
 800f3ae:	68f8      	ldr	r0, [r7, #12]
 800f3b0:	f7fd fd2e 	bl	800ce10 <lfs_dir_rawread>
 800f3b4:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 800f3b6:	697b      	ldr	r3, [r7, #20]
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3718      	adds	r7, #24
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800f3c0:	b480      	push	{r7}
 800f3c2:	b087      	sub	sp, #28
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	617b      	str	r3, [r7, #20]
 800f3d4:	e024      	b.n	800f420 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	091a      	lsrs	r2, r3, #4
 800f3da:	6939      	ldr	r1, [r7, #16]
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	440b      	add	r3, r1
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	404b      	eors	r3, r1
 800f3e8:	f003 030f 	and.w	r3, r3, #15
 800f3ec:	4912      	ldr	r1, [pc, #72]	; (800f438 <lfs_crc+0x78>)
 800f3ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f3f2:	4053      	eors	r3, r2
 800f3f4:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	091a      	lsrs	r2, r3, #4
 800f3fa:	6939      	ldr	r1, [r7, #16]
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	440b      	add	r3, r1
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	091b      	lsrs	r3, r3, #4
 800f404:	b2db      	uxtb	r3, r3
 800f406:	4619      	mov	r1, r3
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	404b      	eors	r3, r1
 800f40c:	f003 030f 	and.w	r3, r3, #15
 800f410:	4909      	ldr	r1, [pc, #36]	; (800f438 <lfs_crc+0x78>)
 800f412:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f416:	4053      	eors	r3, r2
 800f418:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	3301      	adds	r3, #1
 800f41e:	617b      	str	r3, [r7, #20]
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	429a      	cmp	r2, r3
 800f426:	d3d6      	bcc.n	800f3d6 <lfs_crc+0x16>
    }

    return crc;
 800f428:	68fb      	ldr	r3, [r7, #12]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	371c      	adds	r7, #28
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	080216cc 	.word	0x080216cc

0800f43c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f446:	f007 fae1 	bl	8016a0c <sys_timeouts_sleeptime>
 800f44a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f452:	d10b      	bne.n	800f46c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f454:	4813      	ldr	r0, [pc, #76]	; (800f4a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800f456:	f00c fa0c 	bl	801b872 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f45a:	2200      	movs	r2, #0
 800f45c:	6839      	ldr	r1, [r7, #0]
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f00c f97e 	bl	801b760 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f464:	480f      	ldr	r0, [pc, #60]	; (800f4a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800f466:	f00c f9f5 	bl	801b854 <sys_mutex_lock>
    return;
 800f46a:	e018      	b.n	800f49e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d102      	bne.n	800f478 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f472:	f007 fa91 	bl	8016998 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f476:	e7e6      	b.n	800f446 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f478:	480a      	ldr	r0, [pc, #40]	; (800f4a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800f47a:	f00c f9fa 	bl	801b872 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	6839      	ldr	r1, [r7, #0]
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f00c f96c 	bl	801b760 <sys_arch_mbox_fetch>
 800f488:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f48a:	4806      	ldr	r0, [pc, #24]	; (800f4a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800f48c:	f00c f9e2 	bl	801b854 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f496:	d102      	bne.n	800f49e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f498:	f007 fa7e 	bl	8016998 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f49c:	e7d3      	b.n	800f446 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f49e:	3710      	adds	r7, #16
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	20008e60 	.word	0x20008e60

0800f4a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f4b0:	4810      	ldr	r0, [pc, #64]	; (800f4f4 <tcpip_thread+0x4c>)
 800f4b2:	f00c f9cf 	bl	801b854 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f4b6:	4b10      	ldr	r3, [pc, #64]	; (800f4f8 <tcpip_thread+0x50>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d005      	beq.n	800f4ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f4be:	4b0e      	ldr	r3, [pc, #56]	; (800f4f8 <tcpip_thread+0x50>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	4a0e      	ldr	r2, [pc, #56]	; (800f4fc <tcpip_thread+0x54>)
 800f4c4:	6812      	ldr	r2, [r2, #0]
 800f4c6:	4610      	mov	r0, r2
 800f4c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f4ca:	f107 030c 	add.w	r3, r7, #12
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	480b      	ldr	r0, [pc, #44]	; (800f500 <tcpip_thread+0x58>)
 800f4d2:	f7ff ffb3 	bl	800f43c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d106      	bne.n	800f4ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f4dc:	4b09      	ldr	r3, [pc, #36]	; (800f504 <tcpip_thread+0x5c>)
 800f4de:	2291      	movs	r2, #145	; 0x91
 800f4e0:	4909      	ldr	r1, [pc, #36]	; (800f508 <tcpip_thread+0x60>)
 800f4e2:	480a      	ldr	r0, [pc, #40]	; (800f50c <tcpip_thread+0x64>)
 800f4e4:	f00d f816 	bl	801c514 <iprintf>
      continue;
 800f4e8:	e003      	b.n	800f4f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 f80f 	bl	800f510 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f4f2:	e7ea      	b.n	800f4ca <tcpip_thread+0x22>
 800f4f4:	20008e60 	.word	0x20008e60
 800f4f8:	20008e54 	.word	0x20008e54
 800f4fc:	20008e58 	.word	0x20008e58
 800f500:	20008e5c 	.word	0x20008e5c
 800f504:	0801e764 	.word	0x0801e764
 800f508:	0801e794 	.word	0x0801e794
 800f50c:	0801e7b4 	.word	0x0801e7b4

0800f510 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d026      	beq.n	800f56e <tcpip_thread_handle_msg+0x5e>
 800f520:	2b02      	cmp	r3, #2
 800f522:	dc2b      	bgt.n	800f57c <tcpip_thread_handle_msg+0x6c>
 800f524:	2b00      	cmp	r3, #0
 800f526:	d002      	beq.n	800f52e <tcpip_thread_handle_msg+0x1e>
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d015      	beq.n	800f558 <tcpip_thread_handle_msg+0x48>
 800f52c:	e026      	b.n	800f57c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	6850      	ldr	r0, [r2, #4]
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	6892      	ldr	r2, [r2, #8]
 800f53a:	4611      	mov	r1, r2
 800f53c:	4798      	blx	r3
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d004      	beq.n	800f54e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	4618      	mov	r0, r3
 800f54a:	f001 fd17 	bl	8010f7c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f54e:	6879      	ldr	r1, [r7, #4]
 800f550:	2009      	movs	r0, #9
 800f552:	f000 fe63 	bl	801021c <memp_free>
      break;
 800f556:	e018      	b.n	800f58a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	6892      	ldr	r2, [r2, #8]
 800f560:	4610      	mov	r0, r2
 800f562:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f564:	6879      	ldr	r1, [r7, #4]
 800f566:	2008      	movs	r0, #8
 800f568:	f000 fe58 	bl	801021c <memp_free>
      break;
 800f56c:	e00d      	b.n	800f58a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	6892      	ldr	r2, [r2, #8]
 800f576:	4610      	mov	r0, r2
 800f578:	4798      	blx	r3
      break;
 800f57a:	e006      	b.n	800f58a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f57c:	4b05      	ldr	r3, [pc, #20]	; (800f594 <tcpip_thread_handle_msg+0x84>)
 800f57e:	22cf      	movs	r2, #207	; 0xcf
 800f580:	4905      	ldr	r1, [pc, #20]	; (800f598 <tcpip_thread_handle_msg+0x88>)
 800f582:	4806      	ldr	r0, [pc, #24]	; (800f59c <tcpip_thread_handle_msg+0x8c>)
 800f584:	f00c ffc6 	bl	801c514 <iprintf>
      break;
 800f588:	bf00      	nop
  }
}
 800f58a:	bf00      	nop
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	0801e764 	.word	0x0801e764
 800f598:	0801e794 	.word	0x0801e794
 800f59c:	0801e7b4 	.word	0x0801e7b4

0800f5a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b086      	sub	sp, #24
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f5ac:	481a      	ldr	r0, [pc, #104]	; (800f618 <tcpip_inpkt+0x78>)
 800f5ae:	f00c f916 	bl	801b7de <sys_mbox_valid>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d105      	bne.n	800f5c4 <tcpip_inpkt+0x24>
 800f5b8:	4b18      	ldr	r3, [pc, #96]	; (800f61c <tcpip_inpkt+0x7c>)
 800f5ba:	22fc      	movs	r2, #252	; 0xfc
 800f5bc:	4918      	ldr	r1, [pc, #96]	; (800f620 <tcpip_inpkt+0x80>)
 800f5be:	4819      	ldr	r0, [pc, #100]	; (800f624 <tcpip_inpkt+0x84>)
 800f5c0:	f00c ffa8 	bl	801c514 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f5c4:	2009      	movs	r0, #9
 800f5c6:	f000 fdb3 	bl	8010130 <memp_malloc>
 800f5ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d102      	bne.n	800f5d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f5d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5d6:	e01a      	b.n	800f60e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	68ba      	ldr	r2, [r7, #8]
 800f5e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f5f0:	6979      	ldr	r1, [r7, #20]
 800f5f2:	4809      	ldr	r0, [pc, #36]	; (800f618 <tcpip_inpkt+0x78>)
 800f5f4:	f00c f89a 	bl	801b72c <sys_mbox_trypost>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d006      	beq.n	800f60c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f5fe:	6979      	ldr	r1, [r7, #20]
 800f600:	2009      	movs	r0, #9
 800f602:	f000 fe0b 	bl	801021c <memp_free>
    return ERR_MEM;
 800f606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f60a:	e000      	b.n	800f60e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f60c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3718      	adds	r7, #24
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	20008e5c 	.word	0x20008e5c
 800f61c:	0801e764 	.word	0x0801e764
 800f620:	0801e7dc 	.word	0x0801e7dc
 800f624:	0801e7b4 	.word	0x0801e7b4

0800f628 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f638:	f003 0318 	and.w	r3, r3, #24
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d006      	beq.n	800f64e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f640:	4a08      	ldr	r2, [pc, #32]	; (800f664 <tcpip_input+0x3c>)
 800f642:	6839      	ldr	r1, [r7, #0]
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7ff ffab 	bl	800f5a0 <tcpip_inpkt>
 800f64a:	4603      	mov	r3, r0
 800f64c:	e005      	b.n	800f65a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f64e:	4a06      	ldr	r2, [pc, #24]	; (800f668 <tcpip_input+0x40>)
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f7ff ffa4 	bl	800f5a0 <tcpip_inpkt>
 800f658:	4603      	mov	r3, r0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	0801b53d 	.word	0x0801b53d
 800f668:	0801a409 	.word	0x0801a409

0800f66c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f676:	4819      	ldr	r0, [pc, #100]	; (800f6dc <tcpip_try_callback+0x70>)
 800f678:	f00c f8b1 	bl	801b7de <sys_mbox_valid>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d106      	bne.n	800f690 <tcpip_try_callback+0x24>
 800f682:	4b17      	ldr	r3, [pc, #92]	; (800f6e0 <tcpip_try_callback+0x74>)
 800f684:	f240 125d 	movw	r2, #349	; 0x15d
 800f688:	4916      	ldr	r1, [pc, #88]	; (800f6e4 <tcpip_try_callback+0x78>)
 800f68a:	4817      	ldr	r0, [pc, #92]	; (800f6e8 <tcpip_try_callback+0x7c>)
 800f68c:	f00c ff42 	bl	801c514 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f690:	2008      	movs	r0, #8
 800f692:	f000 fd4d 	bl	8010130 <memp_malloc>
 800f696:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d102      	bne.n	800f6a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f69e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6a2:	e017      	b.n	800f6d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	683a      	ldr	r2, [r7, #0]
 800f6b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f6b6:	68f9      	ldr	r1, [r7, #12]
 800f6b8:	4808      	ldr	r0, [pc, #32]	; (800f6dc <tcpip_try_callback+0x70>)
 800f6ba:	f00c f837 	bl	801b72c <sys_mbox_trypost>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d006      	beq.n	800f6d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f6c4:	68f9      	ldr	r1, [r7, #12]
 800f6c6:	2008      	movs	r0, #8
 800f6c8:	f000 fda8 	bl	801021c <memp_free>
    return ERR_MEM;
 800f6cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6d0:	e000      	b.n	800f6d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f6d2:	2300      	movs	r3, #0
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3710      	adds	r7, #16
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}
 800f6dc:	20008e5c 	.word	0x20008e5c
 800f6e0:	0801e764 	.word	0x0801e764
 800f6e4:	0801e7dc 	.word	0x0801e7dc
 800f6e8:	0801e7b4 	.word	0x0801e7b4

0800f6ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af02      	add	r7, sp, #8
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f6f6:	f000 f871 	bl	800f7dc <lwip_init>

  tcpip_init_done = initfunc;
 800f6fa:	4a17      	ldr	r2, [pc, #92]	; (800f758 <tcpip_init+0x6c>)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f700:	4a16      	ldr	r2, [pc, #88]	; (800f75c <tcpip_init+0x70>)
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f706:	2106      	movs	r1, #6
 800f708:	4815      	ldr	r0, [pc, #84]	; (800f760 <tcpip_init+0x74>)
 800f70a:	f00b ffed 	bl	801b6e8 <sys_mbox_new>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d006      	beq.n	800f722 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f714:	4b13      	ldr	r3, [pc, #76]	; (800f764 <tcpip_init+0x78>)
 800f716:	f240 2261 	movw	r2, #609	; 0x261
 800f71a:	4913      	ldr	r1, [pc, #76]	; (800f768 <tcpip_init+0x7c>)
 800f71c:	4813      	ldr	r0, [pc, #76]	; (800f76c <tcpip_init+0x80>)
 800f71e:	f00c fef9 	bl	801c514 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f722:	4813      	ldr	r0, [pc, #76]	; (800f770 <tcpip_init+0x84>)
 800f724:	f00c f87a 	bl	801b81c <sys_mutex_new>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d006      	beq.n	800f73c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f72e:	4b0d      	ldr	r3, [pc, #52]	; (800f764 <tcpip_init+0x78>)
 800f730:	f240 2265 	movw	r2, #613	; 0x265
 800f734:	490f      	ldr	r1, [pc, #60]	; (800f774 <tcpip_init+0x88>)
 800f736:	480d      	ldr	r0, [pc, #52]	; (800f76c <tcpip_init+0x80>)
 800f738:	f00c feec 	bl	801c514 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f73c:	2300      	movs	r3, #0
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f744:	2200      	movs	r2, #0
 800f746:	490c      	ldr	r1, [pc, #48]	; (800f778 <tcpip_init+0x8c>)
 800f748:	480c      	ldr	r0, [pc, #48]	; (800f77c <tcpip_init+0x90>)
 800f74a:	f00c f89f 	bl	801b88c <sys_thread_new>
}
 800f74e:	bf00      	nop
 800f750:	3708      	adds	r7, #8
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	20008e54 	.word	0x20008e54
 800f75c:	20008e58 	.word	0x20008e58
 800f760:	20008e5c 	.word	0x20008e5c
 800f764:	0801e764 	.word	0x0801e764
 800f768:	0801e7ec 	.word	0x0801e7ec
 800f76c:	0801e7b4 	.word	0x0801e7b4
 800f770:	20008e60 	.word	0x20008e60
 800f774:	0801e810 	.word	0x0801e810
 800f778:	0800f4a9 	.word	0x0800f4a9
 800f77c:	0801e834 	.word	0x0801e834

0800f780 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
 800f786:	4603      	mov	r3, r0
 800f788:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f78a:	88fb      	ldrh	r3, [r7, #6]
 800f78c:	021b      	lsls	r3, r3, #8
 800f78e:	b21a      	sxth	r2, r3
 800f790:	88fb      	ldrh	r3, [r7, #6]
 800f792:	0a1b      	lsrs	r3, r3, #8
 800f794:	b29b      	uxth	r3, r3
 800f796:	b21b      	sxth	r3, r3
 800f798:	4313      	orrs	r3, r2
 800f79a:	b21b      	sxth	r3, r3
 800f79c:	b29b      	uxth	r3, r3
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	370c      	adds	r7, #12
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr

0800f7aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f7aa:	b480      	push	{r7}
 800f7ac:	b083      	sub	sp, #12
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	061a      	lsls	r2, r3, #24
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	021b      	lsls	r3, r3, #8
 800f7ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f7be:	431a      	orrs	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	0a1b      	lsrs	r3, r3, #8
 800f7c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f7c8:	431a      	orrs	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	0e1b      	lsrs	r3, r3, #24
 800f7ce:	4313      	orrs	r3, r2
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr

0800f7dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f7e6:	f00c f80b 	bl	801b800 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f7ea:	f000 f8d5 	bl	800f998 <mem_init>
  memp_init();
 800f7ee:	f000 fc31 	bl	8010054 <memp_init>
  pbuf_init();
  netif_init();
 800f7f2:	f000 fd3d 	bl	8010270 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f7f6:	f007 f941 	bl	8016a7c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f7fa:	f001 fe69 	bl	80114d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f7fe:	f007 f883 	bl	8016908 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f802:	bf00      	nop
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
	...

0800f80c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	4603      	mov	r3, r0
 800f814:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f816:	4b05      	ldr	r3, [pc, #20]	; (800f82c <ptr_to_mem+0x20>)
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	88fb      	ldrh	r3, [r7, #6]
 800f81c:	4413      	add	r3, r2
}
 800f81e:	4618      	mov	r0, r3
 800f820:	370c      	adds	r7, #12
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	200094d0 	.word	0x200094d0

0800f830 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f838:	4b05      	ldr	r3, [pc, #20]	; (800f850 <mem_to_ptr+0x20>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	1ad3      	subs	r3, r2, r3
 800f840:	b29b      	uxth	r3, r3
}
 800f842:	4618      	mov	r0, r3
 800f844:	370c      	adds	r7, #12
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr
 800f84e:	bf00      	nop
 800f850:	200094d0 	.word	0x200094d0

0800f854 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f854:	b590      	push	{r4, r7, lr}
 800f856:	b085      	sub	sp, #20
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f85c:	4b45      	ldr	r3, [pc, #276]	; (800f974 <plug_holes+0x120>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	429a      	cmp	r2, r3
 800f864:	d206      	bcs.n	800f874 <plug_holes+0x20>
 800f866:	4b44      	ldr	r3, [pc, #272]	; (800f978 <plug_holes+0x124>)
 800f868:	f240 12df 	movw	r2, #479	; 0x1df
 800f86c:	4943      	ldr	r1, [pc, #268]	; (800f97c <plug_holes+0x128>)
 800f86e:	4844      	ldr	r0, [pc, #272]	; (800f980 <plug_holes+0x12c>)
 800f870:	f00c fe50 	bl	801c514 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f874:	4b43      	ldr	r3, [pc, #268]	; (800f984 <plug_holes+0x130>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d306      	bcc.n	800f88c <plug_holes+0x38>
 800f87e:	4b3e      	ldr	r3, [pc, #248]	; (800f978 <plug_holes+0x124>)
 800f880:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f884:	4940      	ldr	r1, [pc, #256]	; (800f988 <plug_holes+0x134>)
 800f886:	483e      	ldr	r0, [pc, #248]	; (800f980 <plug_holes+0x12c>)
 800f888:	f00c fe44 	bl	801c514 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	791b      	ldrb	r3, [r3, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d006      	beq.n	800f8a2 <plug_holes+0x4e>
 800f894:	4b38      	ldr	r3, [pc, #224]	; (800f978 <plug_holes+0x124>)
 800f896:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f89a:	493c      	ldr	r1, [pc, #240]	; (800f98c <plug_holes+0x138>)
 800f89c:	4838      	ldr	r0, [pc, #224]	; (800f980 <plug_holes+0x12c>)
 800f89e:	f00c fe39 	bl	801c514 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	881b      	ldrh	r3, [r3, #0]
 800f8a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f8aa:	d906      	bls.n	800f8ba <plug_holes+0x66>
 800f8ac:	4b32      	ldr	r3, [pc, #200]	; (800f978 <plug_holes+0x124>)
 800f8ae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f8b2:	4937      	ldr	r1, [pc, #220]	; (800f990 <plug_holes+0x13c>)
 800f8b4:	4832      	ldr	r0, [pc, #200]	; (800f980 <plug_holes+0x12c>)
 800f8b6:	f00c fe2d 	bl	801c514 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	881b      	ldrh	r3, [r3, #0]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7ff ffa4 	bl	800f80c <ptr_to_mem>
 800f8c4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d024      	beq.n	800f918 <plug_holes+0xc4>
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	791b      	ldrb	r3, [r3, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d120      	bne.n	800f918 <plug_holes+0xc4>
 800f8d6:	4b2b      	ldr	r3, [pc, #172]	; (800f984 <plug_holes+0x130>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d01b      	beq.n	800f918 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f8e0:	4b2c      	ldr	r3, [pc, #176]	; (800f994 <plug_holes+0x140>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	68fa      	ldr	r2, [r7, #12]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d102      	bne.n	800f8f0 <plug_holes+0x9c>
      lfree = mem;
 800f8ea:	4a2a      	ldr	r2, [pc, #168]	; (800f994 <plug_holes+0x140>)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	881a      	ldrh	r2, [r3, #0]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	881b      	ldrh	r3, [r3, #0]
 800f8fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f900:	d00a      	beq.n	800f918 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	881b      	ldrh	r3, [r3, #0]
 800f906:	4618      	mov	r0, r3
 800f908:	f7ff ff80 	bl	800f80c <ptr_to_mem>
 800f90c:	4604      	mov	r4, r0
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7ff ff8e 	bl	800f830 <mem_to_ptr>
 800f914:	4603      	mov	r3, r0
 800f916:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	885b      	ldrh	r3, [r3, #2]
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7ff ff75 	bl	800f80c <ptr_to_mem>
 800f922:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d01f      	beq.n	800f96c <plug_holes+0x118>
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	791b      	ldrb	r3, [r3, #4]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d11b      	bne.n	800f96c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f934:	4b17      	ldr	r3, [pc, #92]	; (800f994 <plug_holes+0x140>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d102      	bne.n	800f944 <plug_holes+0xf0>
      lfree = pmem;
 800f93e:	4a15      	ldr	r2, [pc, #84]	; (800f994 <plug_holes+0x140>)
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	881a      	ldrh	r2, [r3, #0]
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f954:	d00a      	beq.n	800f96c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	881b      	ldrh	r3, [r3, #0]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7ff ff56 	bl	800f80c <ptr_to_mem>
 800f960:	4604      	mov	r4, r0
 800f962:	68b8      	ldr	r0, [r7, #8]
 800f964:	f7ff ff64 	bl	800f830 <mem_to_ptr>
 800f968:	4603      	mov	r3, r0
 800f96a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f96c:	bf00      	nop
 800f96e:	3714      	adds	r7, #20
 800f970:	46bd      	mov	sp, r7
 800f972:	bd90      	pop	{r4, r7, pc}
 800f974:	200094d0 	.word	0x200094d0
 800f978:	0801e844 	.word	0x0801e844
 800f97c:	0801e874 	.word	0x0801e874
 800f980:	0801e88c 	.word	0x0801e88c
 800f984:	200094d4 	.word	0x200094d4
 800f988:	0801e8b4 	.word	0x0801e8b4
 800f98c:	0801e8d0 	.word	0x0801e8d0
 800f990:	0801e8ec 	.word	0x0801e8ec
 800f994:	200094dc 	.word	0x200094dc

0800f998 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f99e:	4b1f      	ldr	r3, [pc, #124]	; (800fa1c <mem_init+0x84>)
 800f9a0:	3303      	adds	r3, #3
 800f9a2:	f023 0303 	bic.w	r3, r3, #3
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	4b1d      	ldr	r3, [pc, #116]	; (800fa20 <mem_init+0x88>)
 800f9aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f9ac:	4b1c      	ldr	r3, [pc, #112]	; (800fa20 <mem_init+0x88>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f9b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f9c6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f9ca:	f7ff ff1f 	bl	800f80c <ptr_to_mem>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	4a14      	ldr	r2, [pc, #80]	; (800fa24 <mem_init+0x8c>)
 800f9d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f9d4:	4b13      	ldr	r3, [pc, #76]	; (800fa24 <mem_init+0x8c>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f9dc:	4b11      	ldr	r3, [pc, #68]	; (800fa24 <mem_init+0x8c>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f9e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f9e6:	4b0f      	ldr	r3, [pc, #60]	; (800fa24 <mem_init+0x8c>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f9ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f9f0:	4b0b      	ldr	r3, [pc, #44]	; (800fa20 <mem_init+0x88>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a0c      	ldr	r2, [pc, #48]	; (800fa28 <mem_init+0x90>)
 800f9f6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f9f8:	480c      	ldr	r0, [pc, #48]	; (800fa2c <mem_init+0x94>)
 800f9fa:	f00b ff0f 	bl	801b81c <sys_mutex_new>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d006      	beq.n	800fa12 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fa04:	4b0a      	ldr	r3, [pc, #40]	; (800fa30 <mem_init+0x98>)
 800fa06:	f240 221f 	movw	r2, #543	; 0x21f
 800fa0a:	490a      	ldr	r1, [pc, #40]	; (800fa34 <mem_init+0x9c>)
 800fa0c:	480a      	ldr	r0, [pc, #40]	; (800fa38 <mem_init+0xa0>)
 800fa0e:	f00c fd81 	bl	801c514 <iprintf>
  }
}
 800fa12:	bf00      	nop
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	20008e7c 	.word	0x20008e7c
 800fa20:	200094d0 	.word	0x200094d0
 800fa24:	200094d4 	.word	0x200094d4
 800fa28:	200094dc 	.word	0x200094dc
 800fa2c:	200094d8 	.word	0x200094d8
 800fa30:	0801e844 	.word	0x0801e844
 800fa34:	0801e918 	.word	0x0801e918
 800fa38:	0801e88c 	.word	0x0801e88c

0800fa3c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b086      	sub	sp, #24
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7ff fef3 	bl	800f830 <mem_to_ptr>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff feda 	bl	800f80c <ptr_to_mem>
 800fa58:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	885b      	ldrh	r3, [r3, #2]
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7ff fed4 	bl	800f80c <ptr_to_mem>
 800fa64:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	881b      	ldrh	r3, [r3, #0]
 800fa6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fa6e:	d818      	bhi.n	800faa2 <mem_link_valid+0x66>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	885b      	ldrh	r3, [r3, #2]
 800fa74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fa78:	d813      	bhi.n	800faa2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fa7e:	8afa      	ldrh	r2, [r7, #22]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d004      	beq.n	800fa8e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	8afa      	ldrh	r2, [r7, #22]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d109      	bne.n	800faa2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fa8e:	4b08      	ldr	r3, [pc, #32]	; (800fab0 <mem_link_valid+0x74>)
 800fa90:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fa92:	693a      	ldr	r2, [r7, #16]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d006      	beq.n	800faa6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	885b      	ldrh	r3, [r3, #2]
 800fa9c:	8afa      	ldrh	r2, [r7, #22]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d001      	beq.n	800faa6 <mem_link_valid+0x6a>
    return 0;
 800faa2:	2300      	movs	r3, #0
 800faa4:	e000      	b.n	800faa8 <mem_link_valid+0x6c>
  }
  return 1;
 800faa6:	2301      	movs	r3, #1
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3718      	adds	r7, #24
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	200094d4 	.word	0x200094d4

0800fab4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b088      	sub	sp, #32
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d070      	beq.n	800fba4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f003 0303 	and.w	r3, r3, #3
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d00d      	beq.n	800fae8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800facc:	4b37      	ldr	r3, [pc, #220]	; (800fbac <mem_free+0xf8>)
 800face:	f240 2273 	movw	r2, #627	; 0x273
 800fad2:	4937      	ldr	r1, [pc, #220]	; (800fbb0 <mem_free+0xfc>)
 800fad4:	4837      	ldr	r0, [pc, #220]	; (800fbb4 <mem_free+0x100>)
 800fad6:	f00c fd1d 	bl	801c514 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fada:	f00b fefd 	bl	801b8d8 <sys_arch_protect>
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	68f8      	ldr	r0, [r7, #12]
 800fae2:	f00b ff07 	bl	801b8f4 <sys_arch_unprotect>
    return;
 800fae6:	e05e      	b.n	800fba6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	3b08      	subs	r3, #8
 800faec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800faee:	4b32      	ldr	r3, [pc, #200]	; (800fbb8 <mem_free+0x104>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	69fa      	ldr	r2, [r7, #28]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d306      	bcc.n	800fb06 <mem_free+0x52>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f103 020c 	add.w	r2, r3, #12
 800fafe:	4b2f      	ldr	r3, [pc, #188]	; (800fbbc <mem_free+0x108>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d90d      	bls.n	800fb22 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fb06:	4b29      	ldr	r3, [pc, #164]	; (800fbac <mem_free+0xf8>)
 800fb08:	f240 227f 	movw	r2, #639	; 0x27f
 800fb0c:	492c      	ldr	r1, [pc, #176]	; (800fbc0 <mem_free+0x10c>)
 800fb0e:	4829      	ldr	r0, [pc, #164]	; (800fbb4 <mem_free+0x100>)
 800fb10:	f00c fd00 	bl	801c514 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fb14:	f00b fee0 	bl	801b8d8 <sys_arch_protect>
 800fb18:	6138      	str	r0, [r7, #16]
 800fb1a:	6938      	ldr	r0, [r7, #16]
 800fb1c:	f00b feea 	bl	801b8f4 <sys_arch_unprotect>
    return;
 800fb20:	e041      	b.n	800fba6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fb22:	4828      	ldr	r0, [pc, #160]	; (800fbc4 <mem_free+0x110>)
 800fb24:	f00b fe96 	bl	801b854 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	791b      	ldrb	r3, [r3, #4]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d110      	bne.n	800fb52 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fb30:	4b1e      	ldr	r3, [pc, #120]	; (800fbac <mem_free+0xf8>)
 800fb32:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fb36:	4924      	ldr	r1, [pc, #144]	; (800fbc8 <mem_free+0x114>)
 800fb38:	481e      	ldr	r0, [pc, #120]	; (800fbb4 <mem_free+0x100>)
 800fb3a:	f00c fceb 	bl	801c514 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fb3e:	4821      	ldr	r0, [pc, #132]	; (800fbc4 <mem_free+0x110>)
 800fb40:	f00b fe97 	bl	801b872 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fb44:	f00b fec8 	bl	801b8d8 <sys_arch_protect>
 800fb48:	6178      	str	r0, [r7, #20]
 800fb4a:	6978      	ldr	r0, [r7, #20]
 800fb4c:	f00b fed2 	bl	801b8f4 <sys_arch_unprotect>
    return;
 800fb50:	e029      	b.n	800fba6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800fb52:	69f8      	ldr	r0, [r7, #28]
 800fb54:	f7ff ff72 	bl	800fa3c <mem_link_valid>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d110      	bne.n	800fb80 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fb5e:	4b13      	ldr	r3, [pc, #76]	; (800fbac <mem_free+0xf8>)
 800fb60:	f240 2295 	movw	r2, #661	; 0x295
 800fb64:	4919      	ldr	r1, [pc, #100]	; (800fbcc <mem_free+0x118>)
 800fb66:	4813      	ldr	r0, [pc, #76]	; (800fbb4 <mem_free+0x100>)
 800fb68:	f00c fcd4 	bl	801c514 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fb6c:	4815      	ldr	r0, [pc, #84]	; (800fbc4 <mem_free+0x110>)
 800fb6e:	f00b fe80 	bl	801b872 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fb72:	f00b feb1 	bl	801b8d8 <sys_arch_protect>
 800fb76:	61b8      	str	r0, [r7, #24]
 800fb78:	69b8      	ldr	r0, [r7, #24]
 800fb7a:	f00b febb 	bl	801b8f4 <sys_arch_unprotect>
    return;
 800fb7e:	e012      	b.n	800fba6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	2200      	movs	r2, #0
 800fb84:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fb86:	4b12      	ldr	r3, [pc, #72]	; (800fbd0 <mem_free+0x11c>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	69fa      	ldr	r2, [r7, #28]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d202      	bcs.n	800fb96 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fb90:	4a0f      	ldr	r2, [pc, #60]	; (800fbd0 <mem_free+0x11c>)
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fb96:	69f8      	ldr	r0, [r7, #28]
 800fb98:	f7ff fe5c 	bl	800f854 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fb9c:	4809      	ldr	r0, [pc, #36]	; (800fbc4 <mem_free+0x110>)
 800fb9e:	f00b fe68 	bl	801b872 <sys_mutex_unlock>
 800fba2:	e000      	b.n	800fba6 <mem_free+0xf2>
    return;
 800fba4:	bf00      	nop
}
 800fba6:	3720      	adds	r7, #32
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	0801e844 	.word	0x0801e844
 800fbb0:	0801e934 	.word	0x0801e934
 800fbb4:	0801e88c 	.word	0x0801e88c
 800fbb8:	200094d0 	.word	0x200094d0
 800fbbc:	200094d4 	.word	0x200094d4
 800fbc0:	0801e958 	.word	0x0801e958
 800fbc4:	200094d8 	.word	0x200094d8
 800fbc8:	0801e974 	.word	0x0801e974
 800fbcc:	0801e99c 	.word	0x0801e99c
 800fbd0:	200094dc 	.word	0x200094dc

0800fbd4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b088      	sub	sp, #32
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	460b      	mov	r3, r1
 800fbde:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fbe0:	887b      	ldrh	r3, [r7, #2]
 800fbe2:	3303      	adds	r3, #3
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	f023 0303 	bic.w	r3, r3, #3
 800fbea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fbec:	8bfb      	ldrh	r3, [r7, #30]
 800fbee:	2b0b      	cmp	r3, #11
 800fbf0:	d801      	bhi.n	800fbf6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fbf2:	230c      	movs	r3, #12
 800fbf4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fbf6:	8bfb      	ldrh	r3, [r7, #30]
 800fbf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fbfc:	d803      	bhi.n	800fc06 <mem_trim+0x32>
 800fbfe:	8bfa      	ldrh	r2, [r7, #30]
 800fc00:	887b      	ldrh	r3, [r7, #2]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d201      	bcs.n	800fc0a <mem_trim+0x36>
    return NULL;
 800fc06:	2300      	movs	r3, #0
 800fc08:	e0d8      	b.n	800fdbc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fc0a:	4b6e      	ldr	r3, [pc, #440]	; (800fdc4 <mem_trim+0x1f0>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d304      	bcc.n	800fc1e <mem_trim+0x4a>
 800fc14:	4b6c      	ldr	r3, [pc, #432]	; (800fdc8 <mem_trim+0x1f4>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d306      	bcc.n	800fc2c <mem_trim+0x58>
 800fc1e:	4b6b      	ldr	r3, [pc, #428]	; (800fdcc <mem_trim+0x1f8>)
 800fc20:	f240 22d1 	movw	r2, #721	; 0x2d1
 800fc24:	496a      	ldr	r1, [pc, #424]	; (800fdd0 <mem_trim+0x1fc>)
 800fc26:	486b      	ldr	r0, [pc, #428]	; (800fdd4 <mem_trim+0x200>)
 800fc28:	f00c fc74 	bl	801c514 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fc2c:	4b65      	ldr	r3, [pc, #404]	; (800fdc4 <mem_trim+0x1f0>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d304      	bcc.n	800fc40 <mem_trim+0x6c>
 800fc36:	4b64      	ldr	r3, [pc, #400]	; (800fdc8 <mem_trim+0x1f4>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d307      	bcc.n	800fc50 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fc40:	f00b fe4a 	bl	801b8d8 <sys_arch_protect>
 800fc44:	60b8      	str	r0, [r7, #8]
 800fc46:	68b8      	ldr	r0, [r7, #8]
 800fc48:	f00b fe54 	bl	801b8f4 <sys_arch_unprotect>
    return rmem;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	e0b5      	b.n	800fdbc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	3b08      	subs	r3, #8
 800fc54:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fc56:	69b8      	ldr	r0, [r7, #24]
 800fc58:	f7ff fdea 	bl	800f830 <mem_to_ptr>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	881a      	ldrh	r2, [r3, #0]
 800fc64:	8afb      	ldrh	r3, [r7, #22]
 800fc66:	1ad3      	subs	r3, r2, r3
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	3b08      	subs	r3, #8
 800fc6c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fc6e:	8bfa      	ldrh	r2, [r7, #30]
 800fc70:	8abb      	ldrh	r3, [r7, #20]
 800fc72:	429a      	cmp	r2, r3
 800fc74:	d906      	bls.n	800fc84 <mem_trim+0xb0>
 800fc76:	4b55      	ldr	r3, [pc, #340]	; (800fdcc <mem_trim+0x1f8>)
 800fc78:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800fc7c:	4956      	ldr	r1, [pc, #344]	; (800fdd8 <mem_trim+0x204>)
 800fc7e:	4855      	ldr	r0, [pc, #340]	; (800fdd4 <mem_trim+0x200>)
 800fc80:	f00c fc48 	bl	801c514 <iprintf>
  if (newsize > size) {
 800fc84:	8bfa      	ldrh	r2, [r7, #30]
 800fc86:	8abb      	ldrh	r3, [r7, #20]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d901      	bls.n	800fc90 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	e095      	b.n	800fdbc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800fc90:	8bfa      	ldrh	r2, [r7, #30]
 800fc92:	8abb      	ldrh	r3, [r7, #20]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d101      	bne.n	800fc9c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	e08f      	b.n	800fdbc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fc9c:	484f      	ldr	r0, [pc, #316]	; (800fddc <mem_trim+0x208>)
 800fc9e:	f00b fdd9 	bl	801b854 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	881b      	ldrh	r3, [r3, #0]
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7ff fdb0 	bl	800f80c <ptr_to_mem>
 800fcac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	791b      	ldrb	r3, [r3, #4]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d13f      	bne.n	800fd36 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcbe:	d106      	bne.n	800fcce <mem_trim+0xfa>
 800fcc0:	4b42      	ldr	r3, [pc, #264]	; (800fdcc <mem_trim+0x1f8>)
 800fcc2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800fcc6:	4946      	ldr	r1, [pc, #280]	; (800fde0 <mem_trim+0x20c>)
 800fcc8:	4842      	ldr	r0, [pc, #264]	; (800fdd4 <mem_trim+0x200>)
 800fcca:	f00c fc23 	bl	801c514 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	881b      	ldrh	r3, [r3, #0]
 800fcd2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fcd4:	8afa      	ldrh	r2, [r7, #22]
 800fcd6:	8bfb      	ldrh	r3, [r7, #30]
 800fcd8:	4413      	add	r3, r2
 800fcda:	b29b      	uxth	r3, r3
 800fcdc:	3308      	adds	r3, #8
 800fcde:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800fce0:	4b40      	ldr	r3, [pc, #256]	; (800fde4 <mem_trim+0x210>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	693a      	ldr	r2, [r7, #16]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d106      	bne.n	800fcf8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800fcea:	89fb      	ldrh	r3, [r7, #14]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff fd8d 	bl	800f80c <ptr_to_mem>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	4a3b      	ldr	r2, [pc, #236]	; (800fde4 <mem_trim+0x210>)
 800fcf6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fcf8:	89fb      	ldrh	r3, [r7, #14]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7ff fd86 	bl	800f80c <ptr_to_mem>
 800fd00:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	2200      	movs	r2, #0
 800fd06:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800fd08:	693b      	ldr	r3, [r7, #16]
 800fd0a:	89ba      	ldrh	r2, [r7, #12]
 800fd0c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	8afa      	ldrh	r2, [r7, #22]
 800fd12:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	89fa      	ldrh	r2, [r7, #14]
 800fd18:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	881b      	ldrh	r3, [r3, #0]
 800fd1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fd22:	d047      	beq.n	800fdb4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	881b      	ldrh	r3, [r3, #0]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff fd6f 	bl	800f80c <ptr_to_mem>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	89fb      	ldrh	r3, [r7, #14]
 800fd32:	8053      	strh	r3, [r2, #2]
 800fd34:	e03e      	b.n	800fdb4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fd36:	8bfb      	ldrh	r3, [r7, #30]
 800fd38:	f103 0214 	add.w	r2, r3, #20
 800fd3c:	8abb      	ldrh	r3, [r7, #20]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d838      	bhi.n	800fdb4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fd42:	8afa      	ldrh	r2, [r7, #22]
 800fd44:	8bfb      	ldrh	r3, [r7, #30]
 800fd46:	4413      	add	r3, r2
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	3308      	adds	r3, #8
 800fd4c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	881b      	ldrh	r3, [r3, #0]
 800fd52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fd56:	d106      	bne.n	800fd66 <mem_trim+0x192>
 800fd58:	4b1c      	ldr	r3, [pc, #112]	; (800fdcc <mem_trim+0x1f8>)
 800fd5a:	f240 3216 	movw	r2, #790	; 0x316
 800fd5e:	4920      	ldr	r1, [pc, #128]	; (800fde0 <mem_trim+0x20c>)
 800fd60:	481c      	ldr	r0, [pc, #112]	; (800fdd4 <mem_trim+0x200>)
 800fd62:	f00c fbd7 	bl	801c514 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fd66:	89fb      	ldrh	r3, [r7, #14]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7ff fd4f 	bl	800f80c <ptr_to_mem>
 800fd6e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800fd70:	4b1c      	ldr	r3, [pc, #112]	; (800fde4 <mem_trim+0x210>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	693a      	ldr	r2, [r7, #16]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d202      	bcs.n	800fd80 <mem_trim+0x1ac>
      lfree = mem2;
 800fd7a:	4a1a      	ldr	r2, [pc, #104]	; (800fde4 <mem_trim+0x210>)
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	2200      	movs	r2, #0
 800fd84:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fd86:	69bb      	ldr	r3, [r7, #24]
 800fd88:	881a      	ldrh	r2, [r3, #0]
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	8afa      	ldrh	r2, [r7, #22]
 800fd92:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800fd94:	69bb      	ldr	r3, [r7, #24]
 800fd96:	89fa      	ldrh	r2, [r7, #14]
 800fd98:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fda2:	d007      	beq.n	800fdb4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	881b      	ldrh	r3, [r3, #0]
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7ff fd2f 	bl	800f80c <ptr_to_mem>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	89fb      	ldrh	r3, [r7, #14]
 800fdb2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fdb4:	4809      	ldr	r0, [pc, #36]	; (800fddc <mem_trim+0x208>)
 800fdb6:	f00b fd5c 	bl	801b872 <sys_mutex_unlock>
  return rmem;
 800fdba:	687b      	ldr	r3, [r7, #4]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3720      	adds	r7, #32
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	200094d0 	.word	0x200094d0
 800fdc8:	200094d4 	.word	0x200094d4
 800fdcc:	0801e844 	.word	0x0801e844
 800fdd0:	0801e9d0 	.word	0x0801e9d0
 800fdd4:	0801e88c 	.word	0x0801e88c
 800fdd8:	0801e9e8 	.word	0x0801e9e8
 800fddc:	200094d8 	.word	0x200094d8
 800fde0:	0801ea08 	.word	0x0801ea08
 800fde4:	200094dc 	.word	0x200094dc

0800fde8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b088      	sub	sp, #32
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	4603      	mov	r3, r0
 800fdf0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fdf2:	88fb      	ldrh	r3, [r7, #6]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d101      	bne.n	800fdfc <mem_malloc+0x14>
    return NULL;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	e0e2      	b.n	800ffc2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fdfc:	88fb      	ldrh	r3, [r7, #6]
 800fdfe:	3303      	adds	r3, #3
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	f023 0303 	bic.w	r3, r3, #3
 800fe06:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800fe08:	8bbb      	ldrh	r3, [r7, #28]
 800fe0a:	2b0b      	cmp	r3, #11
 800fe0c:	d801      	bhi.n	800fe12 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fe0e:	230c      	movs	r3, #12
 800fe10:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fe12:	8bbb      	ldrh	r3, [r7, #28]
 800fe14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe18:	d803      	bhi.n	800fe22 <mem_malloc+0x3a>
 800fe1a:	8bba      	ldrh	r2, [r7, #28]
 800fe1c:	88fb      	ldrh	r3, [r7, #6]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d201      	bcs.n	800fe26 <mem_malloc+0x3e>
    return NULL;
 800fe22:	2300      	movs	r3, #0
 800fe24:	e0cd      	b.n	800ffc2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fe26:	4869      	ldr	r0, [pc, #420]	; (800ffcc <mem_malloc+0x1e4>)
 800fe28:	f00b fd14 	bl	801b854 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fe2c:	4b68      	ldr	r3, [pc, #416]	; (800ffd0 <mem_malloc+0x1e8>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7ff fcfd 	bl	800f830 <mem_to_ptr>
 800fe36:	4603      	mov	r3, r0
 800fe38:	83fb      	strh	r3, [r7, #30]
 800fe3a:	e0b7      	b.n	800ffac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fe3c:	8bfb      	ldrh	r3, [r7, #30]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7ff fce4 	bl	800f80c <ptr_to_mem>
 800fe44:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	791b      	ldrb	r3, [r3, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	f040 80a7 	bne.w	800ff9e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	881b      	ldrh	r3, [r3, #0]
 800fe54:	461a      	mov	r2, r3
 800fe56:	8bfb      	ldrh	r3, [r7, #30]
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	f1a3 0208 	sub.w	r2, r3, #8
 800fe5e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800fe60:	429a      	cmp	r2, r3
 800fe62:	f0c0 809c 	bcc.w	800ff9e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	881b      	ldrh	r3, [r3, #0]
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	8bfb      	ldrh	r3, [r7, #30]
 800fe6e:	1ad3      	subs	r3, r2, r3
 800fe70:	f1a3 0208 	sub.w	r2, r3, #8
 800fe74:	8bbb      	ldrh	r3, [r7, #28]
 800fe76:	3314      	adds	r3, #20
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d333      	bcc.n	800fee4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fe7c:	8bfa      	ldrh	r2, [r7, #30]
 800fe7e:	8bbb      	ldrh	r3, [r7, #28]
 800fe80:	4413      	add	r3, r2
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	3308      	adds	r3, #8
 800fe86:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fe88:	8a7b      	ldrh	r3, [r7, #18]
 800fe8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fe8e:	d106      	bne.n	800fe9e <mem_malloc+0xb6>
 800fe90:	4b50      	ldr	r3, [pc, #320]	; (800ffd4 <mem_malloc+0x1ec>)
 800fe92:	f240 3287 	movw	r2, #903	; 0x387
 800fe96:	4950      	ldr	r1, [pc, #320]	; (800ffd8 <mem_malloc+0x1f0>)
 800fe98:	4850      	ldr	r0, [pc, #320]	; (800ffdc <mem_malloc+0x1f4>)
 800fe9a:	f00c fb3b 	bl	801c514 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fe9e:	8a7b      	ldrh	r3, [r7, #18]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7ff fcb3 	bl	800f80c <ptr_to_mem>
 800fea6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2200      	movs	r2, #0
 800feac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	881a      	ldrh	r2, [r3, #0]
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	8bfa      	ldrh	r2, [r7, #30]
 800feba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	8a7a      	ldrh	r2, [r7, #18]
 800fec0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	2201      	movs	r2, #1
 800fec6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	881b      	ldrh	r3, [r3, #0]
 800fecc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fed0:	d00b      	beq.n	800feea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	881b      	ldrh	r3, [r3, #0]
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7ff fc98 	bl	800f80c <ptr_to_mem>
 800fedc:	4602      	mov	r2, r0
 800fede:	8a7b      	ldrh	r3, [r7, #18]
 800fee0:	8053      	strh	r3, [r2, #2]
 800fee2:	e002      	b.n	800feea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	2201      	movs	r2, #1
 800fee8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800feea:	4b39      	ldr	r3, [pc, #228]	; (800ffd0 <mem_malloc+0x1e8>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d127      	bne.n	800ff44 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800fef4:	4b36      	ldr	r3, [pc, #216]	; (800ffd0 <mem_malloc+0x1e8>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fefa:	e005      	b.n	800ff08 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fefc:	69bb      	ldr	r3, [r7, #24]
 800fefe:	881b      	ldrh	r3, [r3, #0]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7ff fc83 	bl	800f80c <ptr_to_mem>
 800ff06:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	791b      	ldrb	r3, [r3, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d004      	beq.n	800ff1a <mem_malloc+0x132>
 800ff10:	4b33      	ldr	r3, [pc, #204]	; (800ffe0 <mem_malloc+0x1f8>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	69ba      	ldr	r2, [r7, #24]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d1f0      	bne.n	800fefc <mem_malloc+0x114>
          }
          lfree = cur;
 800ff1a:	4a2d      	ldr	r2, [pc, #180]	; (800ffd0 <mem_malloc+0x1e8>)
 800ff1c:	69bb      	ldr	r3, [r7, #24]
 800ff1e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ff20:	4b2b      	ldr	r3, [pc, #172]	; (800ffd0 <mem_malloc+0x1e8>)
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	4b2e      	ldr	r3, [pc, #184]	; (800ffe0 <mem_malloc+0x1f8>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d00b      	beq.n	800ff44 <mem_malloc+0x15c>
 800ff2c:	4b28      	ldr	r3, [pc, #160]	; (800ffd0 <mem_malloc+0x1e8>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	791b      	ldrb	r3, [r3, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d006      	beq.n	800ff44 <mem_malloc+0x15c>
 800ff36:	4b27      	ldr	r3, [pc, #156]	; (800ffd4 <mem_malloc+0x1ec>)
 800ff38:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ff3c:	4929      	ldr	r1, [pc, #164]	; (800ffe4 <mem_malloc+0x1fc>)
 800ff3e:	4827      	ldr	r0, [pc, #156]	; (800ffdc <mem_malloc+0x1f4>)
 800ff40:	f00c fae8 	bl	801c514 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ff44:	4821      	ldr	r0, [pc, #132]	; (800ffcc <mem_malloc+0x1e4>)
 800ff46:	f00b fc94 	bl	801b872 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ff4a:	8bba      	ldrh	r2, [r7, #28]
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	4413      	add	r3, r2
 800ff50:	3308      	adds	r3, #8
 800ff52:	4a23      	ldr	r2, [pc, #140]	; (800ffe0 <mem_malloc+0x1f8>)
 800ff54:	6812      	ldr	r2, [r2, #0]
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d906      	bls.n	800ff68 <mem_malloc+0x180>
 800ff5a:	4b1e      	ldr	r3, [pc, #120]	; (800ffd4 <mem_malloc+0x1ec>)
 800ff5c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ff60:	4921      	ldr	r1, [pc, #132]	; (800ffe8 <mem_malloc+0x200>)
 800ff62:	481e      	ldr	r0, [pc, #120]	; (800ffdc <mem_malloc+0x1f4>)
 800ff64:	f00c fad6 	bl	801c514 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	f003 0303 	and.w	r3, r3, #3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d006      	beq.n	800ff80 <mem_malloc+0x198>
 800ff72:	4b18      	ldr	r3, [pc, #96]	; (800ffd4 <mem_malloc+0x1ec>)
 800ff74:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ff78:	491c      	ldr	r1, [pc, #112]	; (800ffec <mem_malloc+0x204>)
 800ff7a:	4818      	ldr	r0, [pc, #96]	; (800ffdc <mem_malloc+0x1f4>)
 800ff7c:	f00c faca 	bl	801c514 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	f003 0303 	and.w	r3, r3, #3
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d006      	beq.n	800ff98 <mem_malloc+0x1b0>
 800ff8a:	4b12      	ldr	r3, [pc, #72]	; (800ffd4 <mem_malloc+0x1ec>)
 800ff8c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ff90:	4917      	ldr	r1, [pc, #92]	; (800fff0 <mem_malloc+0x208>)
 800ff92:	4812      	ldr	r0, [pc, #72]	; (800ffdc <mem_malloc+0x1f4>)
 800ff94:	f00c fabe 	bl	801c514 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	3308      	adds	r3, #8
 800ff9c:	e011      	b.n	800ffc2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ff9e:	8bfb      	ldrh	r3, [r7, #30]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7ff fc33 	bl	800f80c <ptr_to_mem>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	881b      	ldrh	r3, [r3, #0]
 800ffaa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ffac:	8bfa      	ldrh	r2, [r7, #30]
 800ffae:	8bbb      	ldrh	r3, [r7, #28]
 800ffb0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	f4ff af41 	bcc.w	800fe3c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ffba:	4804      	ldr	r0, [pc, #16]	; (800ffcc <mem_malloc+0x1e4>)
 800ffbc:	f00b fc59 	bl	801b872 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ffc0:	2300      	movs	r3, #0
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3720      	adds	r7, #32
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	200094d8 	.word	0x200094d8
 800ffd0:	200094dc 	.word	0x200094dc
 800ffd4:	0801e844 	.word	0x0801e844
 800ffd8:	0801ea08 	.word	0x0801ea08
 800ffdc:	0801e88c 	.word	0x0801e88c
 800ffe0:	200094d4 	.word	0x200094d4
 800ffe4:	0801ea1c 	.word	0x0801ea1c
 800ffe8:	0801ea38 	.word	0x0801ea38
 800ffec:	0801ea68 	.word	0x0801ea68
 800fff0:	0801ea98 	.word	0x0801ea98

0800fff4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b085      	sub	sp, #20
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	689b      	ldr	r3, [r3, #8]
 8010000:	2200      	movs	r2, #0
 8010002:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	3303      	adds	r3, #3
 801000a:	f023 0303 	bic.w	r3, r3, #3
 801000e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010010:	2300      	movs	r3, #0
 8010012:	60fb      	str	r3, [r7, #12]
 8010014:	e011      	b.n	801003a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	689b      	ldr	r3, [r3, #8]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	68ba      	ldr	r2, [r7, #8]
 8010026:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	881b      	ldrh	r3, [r3, #0]
 801002c:	461a      	mov	r2, r3
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	4413      	add	r3, r2
 8010032:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	3301      	adds	r3, #1
 8010038:	60fb      	str	r3, [r7, #12]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	885b      	ldrh	r3, [r3, #2]
 801003e:	461a      	mov	r2, r3
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	4293      	cmp	r3, r2
 8010044:	dbe7      	blt.n	8010016 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010046:	bf00      	nop
 8010048:	bf00      	nop
 801004a:	3714      	adds	r7, #20
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801005a:	2300      	movs	r3, #0
 801005c:	80fb      	strh	r3, [r7, #6]
 801005e:	e009      	b.n	8010074 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010060:	88fb      	ldrh	r3, [r7, #6]
 8010062:	4a08      	ldr	r2, [pc, #32]	; (8010084 <memp_init+0x30>)
 8010064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010068:	4618      	mov	r0, r3
 801006a:	f7ff ffc3 	bl	800fff4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801006e:	88fb      	ldrh	r3, [r7, #6]
 8010070:	3301      	adds	r3, #1
 8010072:	80fb      	strh	r3, [r7, #6]
 8010074:	88fb      	ldrh	r3, [r7, #6]
 8010076:	2b0c      	cmp	r3, #12
 8010078:	d9f2      	bls.n	8010060 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801007a:	bf00      	nop
 801007c:	bf00      	nop
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	080217a8 	.word	0x080217a8

08010088 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010090:	f00b fc22 	bl	801b8d8 <sys_arch_protect>
 8010094:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	689b      	ldr	r3, [r3, #8]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d015      	beq.n	80100d0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	68ba      	ldr	r2, [r7, #8]
 80100aa:	6812      	ldr	r2, [r2, #0]
 80100ac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	f003 0303 	and.w	r3, r3, #3
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d006      	beq.n	80100c6 <do_memp_malloc_pool+0x3e>
 80100b8:	4b09      	ldr	r3, [pc, #36]	; (80100e0 <do_memp_malloc_pool+0x58>)
 80100ba:	f44f 728c 	mov.w	r2, #280	; 0x118
 80100be:	4909      	ldr	r1, [pc, #36]	; (80100e4 <do_memp_malloc_pool+0x5c>)
 80100c0:	4809      	ldr	r0, [pc, #36]	; (80100e8 <do_memp_malloc_pool+0x60>)
 80100c2:	f00c fa27 	bl	801c514 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f00b fc14 	bl	801b8f4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	e003      	b.n	80100d8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80100d0:	68f8      	ldr	r0, [r7, #12]
 80100d2:	f00b fc0f 	bl	801b8f4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80100d6:	2300      	movs	r3, #0
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3710      	adds	r7, #16
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	0801eabc 	.word	0x0801eabc
 80100e4:	0801eaec 	.word	0x0801eaec
 80100e8:	0801eb10 	.word	0x0801eb10

080100ec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d106      	bne.n	8010108 <memp_malloc_pool+0x1c>
 80100fa:	4b0a      	ldr	r3, [pc, #40]	; (8010124 <memp_malloc_pool+0x38>)
 80100fc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010100:	4909      	ldr	r1, [pc, #36]	; (8010128 <memp_malloc_pool+0x3c>)
 8010102:	480a      	ldr	r0, [pc, #40]	; (801012c <memp_malloc_pool+0x40>)
 8010104:	f00c fa06 	bl	801c514 <iprintf>
  if (desc == NULL) {
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <memp_malloc_pool+0x26>
    return NULL;
 801010e:	2300      	movs	r3, #0
 8010110:	e003      	b.n	801011a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7ff ffb8 	bl	8010088 <do_memp_malloc_pool>
 8010118:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801011a:	4618      	mov	r0, r3
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	0801eabc 	.word	0x0801eabc
 8010128:	0801eb38 	.word	0x0801eb38
 801012c:	0801eb10 	.word	0x0801eb10

08010130 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	4603      	mov	r3, r0
 8010138:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801013a:	79fb      	ldrb	r3, [r7, #7]
 801013c:	2b0c      	cmp	r3, #12
 801013e:	d908      	bls.n	8010152 <memp_malloc+0x22>
 8010140:	4b0a      	ldr	r3, [pc, #40]	; (801016c <memp_malloc+0x3c>)
 8010142:	f240 1257 	movw	r2, #343	; 0x157
 8010146:	490a      	ldr	r1, [pc, #40]	; (8010170 <memp_malloc+0x40>)
 8010148:	480a      	ldr	r0, [pc, #40]	; (8010174 <memp_malloc+0x44>)
 801014a:	f00c f9e3 	bl	801c514 <iprintf>
 801014e:	2300      	movs	r3, #0
 8010150:	e008      	b.n	8010164 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010152:	79fb      	ldrb	r3, [r7, #7]
 8010154:	4a08      	ldr	r2, [pc, #32]	; (8010178 <memp_malloc+0x48>)
 8010156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801015a:	4618      	mov	r0, r3
 801015c:	f7ff ff94 	bl	8010088 <do_memp_malloc_pool>
 8010160:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010162:	68fb      	ldr	r3, [r7, #12]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	0801eabc 	.word	0x0801eabc
 8010170:	0801eb4c 	.word	0x0801eb4c
 8010174:	0801eb10 	.word	0x0801eb10
 8010178:	080217a8 	.word	0x080217a8

0801017c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	f003 0303 	and.w	r3, r3, #3
 801018c:	2b00      	cmp	r3, #0
 801018e:	d006      	beq.n	801019e <do_memp_free_pool+0x22>
 8010190:	4b0d      	ldr	r3, [pc, #52]	; (80101c8 <do_memp_free_pool+0x4c>)
 8010192:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010196:	490d      	ldr	r1, [pc, #52]	; (80101cc <do_memp_free_pool+0x50>)
 8010198:	480d      	ldr	r0, [pc, #52]	; (80101d0 <do_memp_free_pool+0x54>)
 801019a:	f00c f9bb 	bl	801c514 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80101a2:	f00b fb99 	bl	801b8d8 <sys_arch_protect>
 80101a6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	68fa      	ldr	r2, [r7, #12]
 80101b8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80101ba:	68b8      	ldr	r0, [r7, #8]
 80101bc:	f00b fb9a 	bl	801b8f4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80101c0:	bf00      	nop
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	0801eabc 	.word	0x0801eabc
 80101cc:	0801eb6c 	.word	0x0801eb6c
 80101d0:	0801eb10 	.word	0x0801eb10

080101d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d106      	bne.n	80101f2 <memp_free_pool+0x1e>
 80101e4:	4b0a      	ldr	r3, [pc, #40]	; (8010210 <memp_free_pool+0x3c>)
 80101e6:	f240 1295 	movw	r2, #405	; 0x195
 80101ea:	490a      	ldr	r1, [pc, #40]	; (8010214 <memp_free_pool+0x40>)
 80101ec:	480a      	ldr	r0, [pc, #40]	; (8010218 <memp_free_pool+0x44>)
 80101ee:	f00c f991 	bl	801c514 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d007      	beq.n	8010208 <memp_free_pool+0x34>
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d004      	beq.n	8010208 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80101fe:	6839      	ldr	r1, [r7, #0]
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f7ff ffbb 	bl	801017c <do_memp_free_pool>
 8010206:	e000      	b.n	801020a <memp_free_pool+0x36>
    return;
 8010208:	bf00      	nop
}
 801020a:	3708      	adds	r7, #8
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	0801eabc 	.word	0x0801eabc
 8010214:	0801eb38 	.word	0x0801eb38
 8010218:	0801eb10 	.word	0x0801eb10

0801021c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	4603      	mov	r3, r0
 8010224:	6039      	str	r1, [r7, #0]
 8010226:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	2b0c      	cmp	r3, #12
 801022c:	d907      	bls.n	801023e <memp_free+0x22>
 801022e:	4b0c      	ldr	r3, [pc, #48]	; (8010260 <memp_free+0x44>)
 8010230:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010234:	490b      	ldr	r1, [pc, #44]	; (8010264 <memp_free+0x48>)
 8010236:	480c      	ldr	r0, [pc, #48]	; (8010268 <memp_free+0x4c>)
 8010238:	f00c f96c 	bl	801c514 <iprintf>
 801023c:	e00c      	b.n	8010258 <memp_free+0x3c>

  if (mem == NULL) {
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d008      	beq.n	8010256 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010244:	79fb      	ldrb	r3, [r7, #7]
 8010246:	4a09      	ldr	r2, [pc, #36]	; (801026c <memp_free+0x50>)
 8010248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801024c:	6839      	ldr	r1, [r7, #0]
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff ff94 	bl	801017c <do_memp_free_pool>
 8010254:	e000      	b.n	8010258 <memp_free+0x3c>
    return;
 8010256:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	0801eabc 	.word	0x0801eabc
 8010264:	0801eb8c 	.word	0x0801eb8c
 8010268:	0801eb10 	.word	0x0801eb10
 801026c:	080217a8 	.word	0x080217a8

08010270 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010270:	b480      	push	{r7}
 8010272:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010274:	bf00      	nop
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr
	...

08010280 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b086      	sub	sp, #24
 8010284:	af00      	add	r7, sp, #0
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	607a      	str	r2, [r7, #4]
 801028c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d108      	bne.n	80102a6 <netif_add+0x26>
 8010294:	4b5b      	ldr	r3, [pc, #364]	; (8010404 <netif_add+0x184>)
 8010296:	f240 1227 	movw	r2, #295	; 0x127
 801029a:	495b      	ldr	r1, [pc, #364]	; (8010408 <netif_add+0x188>)
 801029c:	485b      	ldr	r0, [pc, #364]	; (801040c <netif_add+0x18c>)
 801029e:	f00c f939 	bl	801c514 <iprintf>
 80102a2:	2300      	movs	r3, #0
 80102a4:	e0a9      	b.n	80103fa <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80102a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d108      	bne.n	80102be <netif_add+0x3e>
 80102ac:	4b55      	ldr	r3, [pc, #340]	; (8010404 <netif_add+0x184>)
 80102ae:	f44f 7294 	mov.w	r2, #296	; 0x128
 80102b2:	4957      	ldr	r1, [pc, #348]	; (8010410 <netif_add+0x190>)
 80102b4:	4855      	ldr	r0, [pc, #340]	; (801040c <netif_add+0x18c>)
 80102b6:	f00c f92d 	bl	801c514 <iprintf>
 80102ba:	2300      	movs	r3, #0
 80102bc:	e09d      	b.n	80103fa <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d101      	bne.n	80102c8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80102c4:	4b53      	ldr	r3, [pc, #332]	; (8010414 <netif_add+0x194>)
 80102c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d101      	bne.n	80102d2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80102ce:	4b51      	ldr	r3, [pc, #324]	; (8010414 <netif_add+0x194>)
 80102d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d101      	bne.n	80102dc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80102d8:	4b4e      	ldr	r3, [pc, #312]	; (8010414 <netif_add+0x194>)
 80102da:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2200      	movs	r2, #0
 80102e0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2200      	movs	r2, #0
 80102e6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2200      	movs	r2, #0
 80102ec:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	4a49      	ldr	r2, [pc, #292]	; (8010418 <netif_add+0x198>)
 80102f2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2200      	movs	r2, #0
 80102f8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	3324      	adds	r3, #36	; 0x24
 8010306:	2204      	movs	r2, #4
 8010308:	2100      	movs	r1, #0
 801030a:	4618      	mov	r0, r3
 801030c:	f00c fa92 	bl	801c834 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2200      	movs	r2, #0
 8010314:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6a3a      	ldr	r2, [r7, #32]
 801031a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801031c:	4b3f      	ldr	r3, [pc, #252]	; (801041c <netif_add+0x19c>)
 801031e:	781a      	ldrb	r2, [r3, #0]
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801032a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	68b9      	ldr	r1, [r7, #8]
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f000 f914 	bl	8010560 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	4798      	blx	r3
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d001      	beq.n	8010348 <netif_add+0xc8>
    return NULL;
 8010344:	2300      	movs	r3, #0
 8010346:	e058      	b.n	80103fa <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801034e:	2bff      	cmp	r3, #255	; 0xff
 8010350:	d103      	bne.n	801035a <netif_add+0xda>
        netif->num = 0;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2200      	movs	r2, #0
 8010356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801035a:	2300      	movs	r3, #0
 801035c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801035e:	4b30      	ldr	r3, [pc, #192]	; (8010420 <netif_add+0x1a0>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	617b      	str	r3, [r7, #20]
 8010364:	e02b      	b.n	80103be <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010366:	697a      	ldr	r2, [r7, #20]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	429a      	cmp	r2, r3
 801036c:	d106      	bne.n	801037c <netif_add+0xfc>
 801036e:	4b25      	ldr	r3, [pc, #148]	; (8010404 <netif_add+0x184>)
 8010370:	f240 128b 	movw	r2, #395	; 0x18b
 8010374:	492b      	ldr	r1, [pc, #172]	; (8010424 <netif_add+0x1a4>)
 8010376:	4825      	ldr	r0, [pc, #148]	; (801040c <netif_add+0x18c>)
 8010378:	f00c f8cc 	bl	801c514 <iprintf>
        num_netifs++;
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	3301      	adds	r3, #1
 8010380:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	2bff      	cmp	r3, #255	; 0xff
 8010386:	dd06      	ble.n	8010396 <netif_add+0x116>
 8010388:	4b1e      	ldr	r3, [pc, #120]	; (8010404 <netif_add+0x184>)
 801038a:	f240 128d 	movw	r2, #397	; 0x18d
 801038e:	4926      	ldr	r1, [pc, #152]	; (8010428 <netif_add+0x1a8>)
 8010390:	481e      	ldr	r0, [pc, #120]	; (801040c <netif_add+0x18c>)
 8010392:	f00c f8bf 	bl	801c514 <iprintf>
        if (netif2->num == netif->num) {
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d108      	bne.n	80103b8 <netif_add+0x138>
          netif->num++;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103ac:	3301      	adds	r3, #1
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80103b6:	e005      	b.n	80103c4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	617b      	str	r3, [r7, #20]
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d1d0      	bne.n	8010366 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d1be      	bne.n	8010348 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103d0:	2bfe      	cmp	r3, #254	; 0xfe
 80103d2:	d103      	bne.n	80103dc <netif_add+0x15c>
    netif_num = 0;
 80103d4:	4b11      	ldr	r3, [pc, #68]	; (801041c <netif_add+0x19c>)
 80103d6:	2200      	movs	r2, #0
 80103d8:	701a      	strb	r2, [r3, #0]
 80103da:	e006      	b.n	80103ea <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103e2:	3301      	adds	r3, #1
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	4b0d      	ldr	r3, [pc, #52]	; (801041c <netif_add+0x19c>)
 80103e8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80103ea:	4b0d      	ldr	r3, [pc, #52]	; (8010420 <netif_add+0x1a0>)
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80103f2:	4a0b      	ldr	r2, [pc, #44]	; (8010420 <netif_add+0x1a0>)
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80103f8:	68fb      	ldr	r3, [r7, #12]
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3718      	adds	r7, #24
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}
 8010402:	bf00      	nop
 8010404:	0801eba8 	.word	0x0801eba8
 8010408:	0801ec3c 	.word	0x0801ec3c
 801040c:	0801ebf8 	.word	0x0801ebf8
 8010410:	0801ec58 	.word	0x0801ec58
 8010414:	0802182c 	.word	0x0802182c
 8010418:	08010843 	.word	0x08010843
 801041c:	2000c5d4 	.word	0x2000c5d4
 8010420:	2000c5cc 	.word	0x2000c5cc
 8010424:	0801ec7c 	.word	0x0801ec7c
 8010428:	0801ec90 	.word	0x0801ec90

0801042c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f002 fb91 	bl	8012b60 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801043e:	6839      	ldr	r1, [r7, #0]
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f006 ffa7 	bl	8017394 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010446:	bf00      	nop
 8010448:	3708      	adds	r7, #8
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
	...

08010450 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b086      	sub	sp, #24
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d106      	bne.n	8010470 <netif_do_set_ipaddr+0x20>
 8010462:	4b1d      	ldr	r3, [pc, #116]	; (80104d8 <netif_do_set_ipaddr+0x88>)
 8010464:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010468:	491c      	ldr	r1, [pc, #112]	; (80104dc <netif_do_set_ipaddr+0x8c>)
 801046a:	481d      	ldr	r0, [pc, #116]	; (80104e0 <netif_do_set_ipaddr+0x90>)
 801046c:	f00c f852 	bl	801c514 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d106      	bne.n	8010484 <netif_do_set_ipaddr+0x34>
 8010476:	4b18      	ldr	r3, [pc, #96]	; (80104d8 <netif_do_set_ipaddr+0x88>)
 8010478:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801047c:	4917      	ldr	r1, [pc, #92]	; (80104dc <netif_do_set_ipaddr+0x8c>)
 801047e:	4818      	ldr	r0, [pc, #96]	; (80104e0 <netif_do_set_ipaddr+0x90>)
 8010480:	f00c f848 	bl	801c514 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	3304      	adds	r3, #4
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	429a      	cmp	r2, r3
 8010490:	d01c      	beq.n	80104cc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	3304      	adds	r3, #4
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80104a2:	f107 0314 	add.w	r3, r7, #20
 80104a6:	4619      	mov	r1, r3
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff ffbf 	bl	801042c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d002      	beq.n	80104ba <netif_do_set_ipaddr+0x6a>
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	e000      	b.n	80104bc <netif_do_set_ipaddr+0x6c>
 80104ba:	2300      	movs	r3, #0
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80104c0:	2101      	movs	r1, #1
 80104c2:	68f8      	ldr	r0, [r7, #12]
 80104c4:	f000 f8d2 	bl	801066c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80104c8:	2301      	movs	r3, #1
 80104ca:	e000      	b.n	80104ce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3718      	adds	r7, #24
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	0801eba8 	.word	0x0801eba8
 80104dc:	0801ecc0 	.word	0x0801ecc0
 80104e0:	0801ebf8 	.word	0x0801ebf8

080104e4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80104e4:	b480      	push	{r7}
 80104e6:	b085      	sub	sp, #20
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	3308      	adds	r3, #8
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d00a      	beq.n	8010514 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d002      	beq.n	801050a <netif_do_set_netmask+0x26>
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	e000      	b.n	801050c <netif_do_set_netmask+0x28>
 801050a:	2300      	movs	r3, #0
 801050c:	68fa      	ldr	r2, [r7, #12]
 801050e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010510:	2301      	movs	r3, #1
 8010512:	e000      	b.n	8010516 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010514:	2300      	movs	r3, #0
}
 8010516:	4618      	mov	r0, r3
 8010518:	3714      	adds	r7, #20
 801051a:	46bd      	mov	sp, r7
 801051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010520:	4770      	bx	lr

08010522 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010522:	b480      	push	{r7}
 8010524:	b085      	sub	sp, #20
 8010526:	af00      	add	r7, sp, #0
 8010528:	60f8      	str	r0, [r7, #12]
 801052a:	60b9      	str	r1, [r7, #8]
 801052c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	330c      	adds	r3, #12
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	429a      	cmp	r2, r3
 801053a:	d00a      	beq.n	8010552 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d002      	beq.n	8010548 <netif_do_set_gw+0x26>
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	e000      	b.n	801054a <netif_do_set_gw+0x28>
 8010548:	2300      	movs	r3, #0
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801054e:	2301      	movs	r3, #1
 8010550:	e000      	b.n	8010554 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010552:	2300      	movs	r3, #0
}
 8010554:	4618      	mov	r0, r3
 8010556:	3714      	adds	r7, #20
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr

08010560 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b088      	sub	sp, #32
 8010564:	af00      	add	r7, sp, #0
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
 801056c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801056e:	2300      	movs	r3, #0
 8010570:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010572:	2300      	movs	r3, #0
 8010574:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d101      	bne.n	8010580 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801057c:	4b1c      	ldr	r3, [pc, #112]	; (80105f0 <netif_set_addr+0x90>)
 801057e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010586:	4b1a      	ldr	r3, [pc, #104]	; (80105f0 <netif_set_addr+0x90>)
 8010588:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d101      	bne.n	8010594 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010590:	4b17      	ldr	r3, [pc, #92]	; (80105f0 <netif_set_addr+0x90>)
 8010592:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d003      	beq.n	80105a2 <netif_set_addr+0x42>
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d101      	bne.n	80105a6 <netif_set_addr+0x46>
 80105a2:	2301      	movs	r3, #1
 80105a4:	e000      	b.n	80105a8 <netif_set_addr+0x48>
 80105a6:	2300      	movs	r3, #0
 80105a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d006      	beq.n	80105be <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80105b0:	f107 0310 	add.w	r3, r7, #16
 80105b4:	461a      	mov	r2, r3
 80105b6:	68b9      	ldr	r1, [r7, #8]
 80105b8:	68f8      	ldr	r0, [r7, #12]
 80105ba:	f7ff ff49 	bl	8010450 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80105be:	69fa      	ldr	r2, [r7, #28]
 80105c0:	6879      	ldr	r1, [r7, #4]
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f7ff ff8e 	bl	80104e4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80105c8:	69ba      	ldr	r2, [r7, #24]
 80105ca:	6839      	ldr	r1, [r7, #0]
 80105cc:	68f8      	ldr	r0, [r7, #12]
 80105ce:	f7ff ffa8 	bl	8010522 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d106      	bne.n	80105e6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80105d8:	f107 0310 	add.w	r3, r7, #16
 80105dc:	461a      	mov	r2, r3
 80105de:	68b9      	ldr	r1, [r7, #8]
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f7ff ff35 	bl	8010450 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80105e6:	bf00      	nop
 80105e8:	3720      	adds	r7, #32
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	0802182c 	.word	0x0802182c

080105f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80105fc:	4a04      	ldr	r2, [pc, #16]	; (8010610 <netif_set_default+0x1c>)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010602:	bf00      	nop
 8010604:	370c      	adds	r7, #12
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop
 8010610:	2000c5d0 	.word	0x2000c5d0

08010614 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b082      	sub	sp, #8
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d107      	bne.n	8010632 <netif_set_up+0x1e>
 8010622:	4b0f      	ldr	r3, [pc, #60]	; (8010660 <netif_set_up+0x4c>)
 8010624:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010628:	490e      	ldr	r1, [pc, #56]	; (8010664 <netif_set_up+0x50>)
 801062a:	480f      	ldr	r0, [pc, #60]	; (8010668 <netif_set_up+0x54>)
 801062c:	f00b ff72 	bl	801c514 <iprintf>
 8010630:	e013      	b.n	801065a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010638:	f003 0301 	and.w	r3, r3, #1
 801063c:	2b00      	cmp	r3, #0
 801063e:	d10c      	bne.n	801065a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010646:	f043 0301 	orr.w	r3, r3, #1
 801064a:	b2da      	uxtb	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010652:	2103      	movs	r1, #3
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 f809 	bl	801066c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	0801eba8 	.word	0x0801eba8
 8010664:	0801ed30 	.word	0x0801ed30
 8010668:	0801ebf8 	.word	0x0801ebf8

0801066c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	460b      	mov	r3, r1
 8010676:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d106      	bne.n	801068c <netif_issue_reports+0x20>
 801067e:	4b18      	ldr	r3, [pc, #96]	; (80106e0 <netif_issue_reports+0x74>)
 8010680:	f240 326d 	movw	r2, #877	; 0x36d
 8010684:	4917      	ldr	r1, [pc, #92]	; (80106e4 <netif_issue_reports+0x78>)
 8010686:	4818      	ldr	r0, [pc, #96]	; (80106e8 <netif_issue_reports+0x7c>)
 8010688:	f00b ff44 	bl	801c514 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010692:	f003 0304 	and.w	r3, r3, #4
 8010696:	2b00      	cmp	r3, #0
 8010698:	d01e      	beq.n	80106d8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80106a0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d017      	beq.n	80106d8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80106a8:	78fb      	ldrb	r3, [r7, #3]
 80106aa:	f003 0301 	and.w	r3, r3, #1
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d013      	beq.n	80106da <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	3304      	adds	r3, #4
 80106b6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00e      	beq.n	80106da <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80106c2:	f003 0308 	and.w	r3, r3, #8
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d007      	beq.n	80106da <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	3304      	adds	r3, #4
 80106ce:	4619      	mov	r1, r3
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f009 fc5f 	bl	8019f94 <etharp_request>
 80106d6:	e000      	b.n	80106da <netif_issue_reports+0x6e>
    return;
 80106d8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80106da:	3708      	adds	r7, #8
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	0801eba8 	.word	0x0801eba8
 80106e4:	0801ed4c 	.word	0x0801ed4c
 80106e8:	0801ebf8 	.word	0x0801ebf8

080106ec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d107      	bne.n	801070a <netif_set_down+0x1e>
 80106fa:	4b12      	ldr	r3, [pc, #72]	; (8010744 <netif_set_down+0x58>)
 80106fc:	f240 329b 	movw	r2, #923	; 0x39b
 8010700:	4911      	ldr	r1, [pc, #68]	; (8010748 <netif_set_down+0x5c>)
 8010702:	4812      	ldr	r0, [pc, #72]	; (801074c <netif_set_down+0x60>)
 8010704:	f00b ff06 	bl	801c514 <iprintf>
 8010708:	e019      	b.n	801073e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010710:	f003 0301 	and.w	r3, r3, #1
 8010714:	2b00      	cmp	r3, #0
 8010716:	d012      	beq.n	801073e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801071e:	f023 0301 	bic.w	r3, r3, #1
 8010722:	b2da      	uxtb	r2, r3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010730:	f003 0308 	and.w	r3, r3, #8
 8010734:	2b00      	cmp	r3, #0
 8010736:	d002      	beq.n	801073e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f008 ffe5 	bl	8019708 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801073e:	3708      	adds	r7, #8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	0801eba8 	.word	0x0801eba8
 8010748:	0801ed70 	.word	0x0801ed70
 801074c:	0801ebf8 	.word	0x0801ebf8

08010750 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d107      	bne.n	801076e <netif_set_link_up+0x1e>
 801075e:	4b15      	ldr	r3, [pc, #84]	; (80107b4 <netif_set_link_up+0x64>)
 8010760:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010764:	4914      	ldr	r1, [pc, #80]	; (80107b8 <netif_set_link_up+0x68>)
 8010766:	4815      	ldr	r0, [pc, #84]	; (80107bc <netif_set_link_up+0x6c>)
 8010768:	f00b fed4 	bl	801c514 <iprintf>
 801076c:	e01e      	b.n	80107ac <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010774:	f003 0304 	and.w	r3, r3, #4
 8010778:	2b00      	cmp	r3, #0
 801077a:	d117      	bne.n	80107ac <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010782:	f043 0304 	orr.w	r3, r3, #4
 8010786:	b2da      	uxtb	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f007 fa2a 	bl	8017be8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010794:	2103      	movs	r1, #3
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7ff ff68 	bl	801066c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	69db      	ldr	r3, [r3, #28]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d003      	beq.n	80107ac <netif_set_link_up+0x5c>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	69db      	ldr	r3, [r3, #28]
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	0801eba8 	.word	0x0801eba8
 80107b8:	0801ed90 	.word	0x0801ed90
 80107bc:	0801ebf8 	.word	0x0801ebf8

080107c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d107      	bne.n	80107de <netif_set_link_down+0x1e>
 80107ce:	4b11      	ldr	r3, [pc, #68]	; (8010814 <netif_set_link_down+0x54>)
 80107d0:	f240 4206 	movw	r2, #1030	; 0x406
 80107d4:	4910      	ldr	r1, [pc, #64]	; (8010818 <netif_set_link_down+0x58>)
 80107d6:	4811      	ldr	r0, [pc, #68]	; (801081c <netif_set_link_down+0x5c>)
 80107d8:	f00b fe9c 	bl	801c514 <iprintf>
 80107dc:	e017      	b.n	801080e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107e4:	f003 0304 	and.w	r3, r3, #4
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d010      	beq.n	801080e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107f2:	f023 0304 	bic.w	r3, r3, #4
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	69db      	ldr	r3, [r3, #28]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d003      	beq.n	801080e <netif_set_link_down+0x4e>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	69db      	ldr	r3, [r3, #28]
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}
 8010814:	0801eba8 	.word	0x0801eba8
 8010818:	0801edb4 	.word	0x0801edb4
 801081c:	0801ebf8 	.word	0x0801ebf8

08010820 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010820:	b480      	push	{r7}
 8010822:	b083      	sub	sp, #12
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d002      	beq.n	8010836 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	683a      	ldr	r2, [r7, #0]
 8010834:	61da      	str	r2, [r3, #28]
  }
}
 8010836:	bf00      	nop
 8010838:	370c      	adds	r7, #12
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr

08010842 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010842:	b480      	push	{r7}
 8010844:	b085      	sub	sp, #20
 8010846:	af00      	add	r7, sp, #0
 8010848:	60f8      	str	r0, [r7, #12]
 801084a:	60b9      	str	r1, [r7, #8]
 801084c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801084e:	f06f 030b 	mvn.w	r3, #11
}
 8010852:	4618      	mov	r0, r3
 8010854:	3714      	adds	r7, #20
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
	...

08010860 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010860:	b480      	push	{r7}
 8010862:	b085      	sub	sp, #20
 8010864:	af00      	add	r7, sp, #0
 8010866:	4603      	mov	r3, r0
 8010868:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801086a:	79fb      	ldrb	r3, [r7, #7]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d013      	beq.n	8010898 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010870:	4b0d      	ldr	r3, [pc, #52]	; (80108a8 <netif_get_by_index+0x48>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	60fb      	str	r3, [r7, #12]
 8010876:	e00c      	b.n	8010892 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801087e:	3301      	adds	r3, #1
 8010880:	b2db      	uxtb	r3, r3
 8010882:	79fa      	ldrb	r2, [r7, #7]
 8010884:	429a      	cmp	r2, r3
 8010886:	d101      	bne.n	801088c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	e006      	b.n	801089a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	60fb      	str	r3, [r7, #12]
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d1ef      	bne.n	8010878 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010898:	2300      	movs	r3, #0
}
 801089a:	4618      	mov	r0, r3
 801089c:	3714      	adds	r7, #20
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop
 80108a8:	2000c5cc 	.word	0x2000c5cc

080108ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80108b2:	f00b f811 	bl	801b8d8 <sys_arch_protect>
 80108b6:	6038      	str	r0, [r7, #0]
 80108b8:	4b0d      	ldr	r3, [pc, #52]	; (80108f0 <pbuf_free_ooseq+0x44>)
 80108ba:	2200      	movs	r2, #0
 80108bc:	701a      	strb	r2, [r3, #0]
 80108be:	6838      	ldr	r0, [r7, #0]
 80108c0:	f00b f818 	bl	801b8f4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80108c4:	4b0b      	ldr	r3, [pc, #44]	; (80108f4 <pbuf_free_ooseq+0x48>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	607b      	str	r3, [r7, #4]
 80108ca:	e00a      	b.n	80108e2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d003      	beq.n	80108dc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f002 f981 	bl	8012bdc <tcp_free_ooseq>
      return;
 80108da:	e005      	b.n	80108e8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	607b      	str	r3, [r7, #4]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d1f1      	bne.n	80108cc <pbuf_free_ooseq+0x20>
    }
  }
}
 80108e8:	3708      	adds	r7, #8
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	2000c5d5 	.word	0x2000c5d5
 80108f4:	2000c5e4 	.word	0x2000c5e4

080108f8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010900:	f7ff ffd4 	bl	80108ac <pbuf_free_ooseq>
}
 8010904:	bf00      	nop
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010912:	f00a ffe1 	bl	801b8d8 <sys_arch_protect>
 8010916:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010918:	4b0f      	ldr	r3, [pc, #60]	; (8010958 <pbuf_pool_is_empty+0x4c>)
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801091e:	4b0e      	ldr	r3, [pc, #56]	; (8010958 <pbuf_pool_is_empty+0x4c>)
 8010920:	2201      	movs	r2, #1
 8010922:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f00a ffe5 	bl	801b8f4 <sys_arch_unprotect>

  if (!queued) {
 801092a:	78fb      	ldrb	r3, [r7, #3]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10f      	bne.n	8010950 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010930:	2100      	movs	r1, #0
 8010932:	480a      	ldr	r0, [pc, #40]	; (801095c <pbuf_pool_is_empty+0x50>)
 8010934:	f7fe fe9a 	bl	800f66c <tcpip_try_callback>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d008      	beq.n	8010950 <pbuf_pool_is_empty+0x44>
 801093e:	f00a ffcb 	bl	801b8d8 <sys_arch_protect>
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	4b04      	ldr	r3, [pc, #16]	; (8010958 <pbuf_pool_is_empty+0x4c>)
 8010946:	2200      	movs	r2, #0
 8010948:	701a      	strb	r2, [r3, #0]
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f00a ffd2 	bl	801b8f4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010950:	bf00      	nop
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}
 8010958:	2000c5d5 	.word	0x2000c5d5
 801095c:	080108f9 	.word	0x080108f9

08010960 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010960:	b480      	push	{r7}
 8010962:	b085      	sub	sp, #20
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	4611      	mov	r1, r2
 801096c:	461a      	mov	r2, r3
 801096e:	460b      	mov	r3, r1
 8010970:	80fb      	strh	r3, [r7, #6]
 8010972:	4613      	mov	r3, r2
 8010974:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	2200      	movs	r2, #0
 801097a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	68ba      	ldr	r2, [r7, #8]
 8010980:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	88fa      	ldrh	r2, [r7, #6]
 8010986:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	88ba      	ldrh	r2, [r7, #4]
 801098c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801098e:	8b3b      	ldrh	r3, [r7, #24]
 8010990:	b2da      	uxtb	r2, r3
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	7f3a      	ldrb	r2, [r7, #28]
 801099a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	2201      	movs	r2, #1
 80109a0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2200      	movs	r2, #0
 80109a6:	73da      	strb	r2, [r3, #15]
}
 80109a8:	bf00      	nop
 80109aa:	3714      	adds	r7, #20
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08c      	sub	sp, #48	; 0x30
 80109b8:	af02      	add	r7, sp, #8
 80109ba:	4603      	mov	r3, r0
 80109bc:	71fb      	strb	r3, [r7, #7]
 80109be:	460b      	mov	r3, r1
 80109c0:	80bb      	strh	r3, [r7, #4]
 80109c2:	4613      	mov	r3, r2
 80109c4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80109c6:	79fb      	ldrb	r3, [r7, #7]
 80109c8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80109ca:	887b      	ldrh	r3, [r7, #2]
 80109cc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80109d0:	d07f      	beq.n	8010ad2 <pbuf_alloc+0x11e>
 80109d2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80109d6:	f300 80c8 	bgt.w	8010b6a <pbuf_alloc+0x1b6>
 80109da:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80109de:	d010      	beq.n	8010a02 <pbuf_alloc+0x4e>
 80109e0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80109e4:	f300 80c1 	bgt.w	8010b6a <pbuf_alloc+0x1b6>
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d002      	beq.n	80109f2 <pbuf_alloc+0x3e>
 80109ec:	2b41      	cmp	r3, #65	; 0x41
 80109ee:	f040 80bc 	bne.w	8010b6a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80109f2:	887a      	ldrh	r2, [r7, #2]
 80109f4:	88bb      	ldrh	r3, [r7, #4]
 80109f6:	4619      	mov	r1, r3
 80109f8:	2000      	movs	r0, #0
 80109fa:	f000 f8d1 	bl	8010ba0 <pbuf_alloc_reference>
 80109fe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010a00:	e0bd      	b.n	8010b7e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010a02:	2300      	movs	r3, #0
 8010a04:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010a06:	2300      	movs	r3, #0
 8010a08:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010a0a:	88bb      	ldrh	r3, [r7, #4]
 8010a0c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010a0e:	200c      	movs	r0, #12
 8010a10:	f7ff fb8e 	bl	8010130 <memp_malloc>
 8010a14:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d109      	bne.n	8010a30 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010a1c:	f7ff ff76 	bl	801090c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d002      	beq.n	8010a2c <pbuf_alloc+0x78>
            pbuf_free(p);
 8010a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a28:	f000 faa8 	bl	8010f7c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	e0a7      	b.n	8010b80 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a32:	3303      	adds	r3, #3
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	f023 0303 	bic.w	r3, r3, #3
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	8b7a      	ldrh	r2, [r7, #26]
 8010a44:	4293      	cmp	r3, r2
 8010a46:	bf28      	it	cs
 8010a48:	4613      	movcs	r3, r2
 8010a4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a4e:	3310      	adds	r3, #16
 8010a50:	693a      	ldr	r2, [r7, #16]
 8010a52:	4413      	add	r3, r2
 8010a54:	3303      	adds	r3, #3
 8010a56:	f023 0303 	bic.w	r3, r3, #3
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	89f9      	ldrh	r1, [r7, #14]
 8010a5e:	8b7a      	ldrh	r2, [r7, #26]
 8010a60:	2300      	movs	r3, #0
 8010a62:	9301      	str	r3, [sp, #4]
 8010a64:	887b      	ldrh	r3, [r7, #2]
 8010a66:	9300      	str	r3, [sp, #0]
 8010a68:	460b      	mov	r3, r1
 8010a6a:	4601      	mov	r1, r0
 8010a6c:	6938      	ldr	r0, [r7, #16]
 8010a6e:	f7ff ff77 	bl	8010960 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	f003 0303 	and.w	r3, r3, #3
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d006      	beq.n	8010a8c <pbuf_alloc+0xd8>
 8010a7e:	4b42      	ldr	r3, [pc, #264]	; (8010b88 <pbuf_alloc+0x1d4>)
 8010a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a84:	4941      	ldr	r1, [pc, #260]	; (8010b8c <pbuf_alloc+0x1d8>)
 8010a86:	4842      	ldr	r0, [pc, #264]	; (8010b90 <pbuf_alloc+0x1dc>)
 8010a88:	f00b fd44 	bl	801c514 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a8e:	3303      	adds	r3, #3
 8010a90:	f023 0303 	bic.w	r3, r3, #3
 8010a94:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010a98:	d106      	bne.n	8010aa8 <pbuf_alloc+0xf4>
 8010a9a:	4b3b      	ldr	r3, [pc, #236]	; (8010b88 <pbuf_alloc+0x1d4>)
 8010a9c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010aa0:	493c      	ldr	r1, [pc, #240]	; (8010b94 <pbuf_alloc+0x1e0>)
 8010aa2:	483b      	ldr	r0, [pc, #236]	; (8010b90 <pbuf_alloc+0x1dc>)
 8010aa4:	f00b fd36 	bl	801c514 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d102      	bne.n	8010ab4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8010ab2:	e002      	b.n	8010aba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010ab4:	69fb      	ldr	r3, [r7, #28]
 8010ab6:	693a      	ldr	r2, [r7, #16]
 8010ab8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010abe:	8b7a      	ldrh	r2, [r7, #26]
 8010ac0:	89fb      	ldrh	r3, [r7, #14]
 8010ac2:	1ad3      	subs	r3, r2, r3
 8010ac4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010aca:	8b7b      	ldrh	r3, [r7, #26]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d19e      	bne.n	8010a0e <pbuf_alloc+0x5a>
      break;
 8010ad0:	e055      	b.n	8010b7e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010ad2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ad4:	3303      	adds	r3, #3
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	f023 0303 	bic.w	r3, r3, #3
 8010adc:	b29a      	uxth	r2, r3
 8010ade:	88bb      	ldrh	r3, [r7, #4]
 8010ae0:	3303      	adds	r3, #3
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	f023 0303 	bic.w	r3, r3, #3
 8010ae8:	b29b      	uxth	r3, r3
 8010aea:	4413      	add	r3, r2
 8010aec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010aee:	8b3b      	ldrh	r3, [r7, #24]
 8010af0:	3310      	adds	r3, #16
 8010af2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010af4:	8b3a      	ldrh	r2, [r7, #24]
 8010af6:	88bb      	ldrh	r3, [r7, #4]
 8010af8:	3303      	adds	r3, #3
 8010afa:	f023 0303 	bic.w	r3, r3, #3
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d306      	bcc.n	8010b10 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010b02:	8afa      	ldrh	r2, [r7, #22]
 8010b04:	88bb      	ldrh	r3, [r7, #4]
 8010b06:	3303      	adds	r3, #3
 8010b08:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d201      	bcs.n	8010b14 <pbuf_alloc+0x160>
        return NULL;
 8010b10:	2300      	movs	r3, #0
 8010b12:	e035      	b.n	8010b80 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010b14:	8afb      	ldrh	r3, [r7, #22]
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7ff f966 	bl	800fde8 <mem_malloc>
 8010b1c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d101      	bne.n	8010b28 <pbuf_alloc+0x174>
        return NULL;
 8010b24:	2300      	movs	r3, #0
 8010b26:	e02b      	b.n	8010b80 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b2a:	3310      	adds	r3, #16
 8010b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b2e:	4413      	add	r3, r2
 8010b30:	3303      	adds	r3, #3
 8010b32:	f023 0303 	bic.w	r3, r3, #3
 8010b36:	4618      	mov	r0, r3
 8010b38:	88b9      	ldrh	r1, [r7, #4]
 8010b3a:	88ba      	ldrh	r2, [r7, #4]
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	9301      	str	r3, [sp, #4]
 8010b40:	887b      	ldrh	r3, [r7, #2]
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	460b      	mov	r3, r1
 8010b46:	4601      	mov	r1, r0
 8010b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b4a:	f7ff ff09 	bl	8010960 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	f003 0303 	and.w	r3, r3, #3
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d010      	beq.n	8010b7c <pbuf_alloc+0x1c8>
 8010b5a:	4b0b      	ldr	r3, [pc, #44]	; (8010b88 <pbuf_alloc+0x1d4>)
 8010b5c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010b60:	490d      	ldr	r1, [pc, #52]	; (8010b98 <pbuf_alloc+0x1e4>)
 8010b62:	480b      	ldr	r0, [pc, #44]	; (8010b90 <pbuf_alloc+0x1dc>)
 8010b64:	f00b fcd6 	bl	801c514 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010b68:	e008      	b.n	8010b7c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010b6a:	4b07      	ldr	r3, [pc, #28]	; (8010b88 <pbuf_alloc+0x1d4>)
 8010b6c:	f240 1227 	movw	r2, #295	; 0x127
 8010b70:	490a      	ldr	r1, [pc, #40]	; (8010b9c <pbuf_alloc+0x1e8>)
 8010b72:	4807      	ldr	r0, [pc, #28]	; (8010b90 <pbuf_alloc+0x1dc>)
 8010b74:	f00b fcce 	bl	801c514 <iprintf>
      return NULL;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	e001      	b.n	8010b80 <pbuf_alloc+0x1cc>
      break;
 8010b7c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3728      	adds	r7, #40	; 0x28
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	0801edd8 	.word	0x0801edd8
 8010b8c:	0801ee08 	.word	0x0801ee08
 8010b90:	0801ee38 	.word	0x0801ee38
 8010b94:	0801ee60 	.word	0x0801ee60
 8010b98:	0801ee94 	.word	0x0801ee94
 8010b9c:	0801eec0 	.word	0x0801eec0

08010ba0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b086      	sub	sp, #24
 8010ba4:	af02      	add	r7, sp, #8
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	460b      	mov	r3, r1
 8010baa:	807b      	strh	r3, [r7, #2]
 8010bac:	4613      	mov	r3, r2
 8010bae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010bb0:	883b      	ldrh	r3, [r7, #0]
 8010bb2:	2b41      	cmp	r3, #65	; 0x41
 8010bb4:	d009      	beq.n	8010bca <pbuf_alloc_reference+0x2a>
 8010bb6:	883b      	ldrh	r3, [r7, #0]
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d006      	beq.n	8010bca <pbuf_alloc_reference+0x2a>
 8010bbc:	4b0f      	ldr	r3, [pc, #60]	; (8010bfc <pbuf_alloc_reference+0x5c>)
 8010bbe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010bc2:	490f      	ldr	r1, [pc, #60]	; (8010c00 <pbuf_alloc_reference+0x60>)
 8010bc4:	480f      	ldr	r0, [pc, #60]	; (8010c04 <pbuf_alloc_reference+0x64>)
 8010bc6:	f00b fca5 	bl	801c514 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010bca:	200b      	movs	r0, #11
 8010bcc:	f7ff fab0 	bl	8010130 <memp_malloc>
 8010bd0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d101      	bne.n	8010bdc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	e00b      	b.n	8010bf4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010bdc:	8879      	ldrh	r1, [r7, #2]
 8010bde:	887a      	ldrh	r2, [r7, #2]
 8010be0:	2300      	movs	r3, #0
 8010be2:	9301      	str	r3, [sp, #4]
 8010be4:	883b      	ldrh	r3, [r7, #0]
 8010be6:	9300      	str	r3, [sp, #0]
 8010be8:	460b      	mov	r3, r1
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f7ff feb7 	bl	8010960 <pbuf_init_alloced_pbuf>
  return p;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	0801edd8 	.word	0x0801edd8
 8010c00:	0801eedc 	.word	0x0801eedc
 8010c04:	0801ee38 	.word	0x0801ee38

08010c08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b088      	sub	sp, #32
 8010c0c:	af02      	add	r7, sp, #8
 8010c0e:	607b      	str	r3, [r7, #4]
 8010c10:	4603      	mov	r3, r0
 8010c12:	73fb      	strb	r3, [r7, #15]
 8010c14:	460b      	mov	r3, r1
 8010c16:	81bb      	strh	r3, [r7, #12]
 8010c18:	4613      	mov	r3, r2
 8010c1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010c1c:	7bfb      	ldrb	r3, [r7, #15]
 8010c1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010c20:	8a7b      	ldrh	r3, [r7, #18]
 8010c22:	3303      	adds	r3, #3
 8010c24:	f023 0203 	bic.w	r2, r3, #3
 8010c28:	89bb      	ldrh	r3, [r7, #12]
 8010c2a:	441a      	add	r2, r3
 8010c2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d901      	bls.n	8010c36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010c32:	2300      	movs	r3, #0
 8010c34:	e018      	b.n	8010c68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010c36:	6a3b      	ldr	r3, [r7, #32]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d007      	beq.n	8010c4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010c3c:	8a7b      	ldrh	r3, [r7, #18]
 8010c3e:	3303      	adds	r3, #3
 8010c40:	f023 0303 	bic.w	r3, r3, #3
 8010c44:	6a3a      	ldr	r2, [r7, #32]
 8010c46:	4413      	add	r3, r2
 8010c48:	617b      	str	r3, [r7, #20]
 8010c4a:	e001      	b.n	8010c50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	89b9      	ldrh	r1, [r7, #12]
 8010c54:	89ba      	ldrh	r2, [r7, #12]
 8010c56:	2302      	movs	r3, #2
 8010c58:	9301      	str	r3, [sp, #4]
 8010c5a:	897b      	ldrh	r3, [r7, #10]
 8010c5c:	9300      	str	r3, [sp, #0]
 8010c5e:	460b      	mov	r3, r1
 8010c60:	6979      	ldr	r1, [r7, #20]
 8010c62:	f7ff fe7d 	bl	8010960 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010c66:	687b      	ldr	r3, [r7, #4]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3718      	adds	r7, #24
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d106      	bne.n	8010c90 <pbuf_realloc+0x20>
 8010c82:	4b3a      	ldr	r3, [pc, #232]	; (8010d6c <pbuf_realloc+0xfc>)
 8010c84:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010c88:	4939      	ldr	r1, [pc, #228]	; (8010d70 <pbuf_realloc+0x100>)
 8010c8a:	483a      	ldr	r0, [pc, #232]	; (8010d74 <pbuf_realloc+0x104>)
 8010c8c:	f00b fc42 	bl	801c514 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	891b      	ldrh	r3, [r3, #8]
 8010c94:	887a      	ldrh	r2, [r7, #2]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d263      	bcs.n	8010d62 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	891a      	ldrh	r2, [r3, #8]
 8010c9e:	887b      	ldrh	r3, [r7, #2]
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010ca4:	887b      	ldrh	r3, [r7, #2]
 8010ca6:	817b      	strh	r3, [r7, #10]
  q = p;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010cac:	e018      	b.n	8010ce0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	895b      	ldrh	r3, [r3, #10]
 8010cb2:	897a      	ldrh	r2, [r7, #10]
 8010cb4:	1ad3      	subs	r3, r2, r3
 8010cb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	891a      	ldrh	r2, [r3, #8]
 8010cbc:	893b      	ldrh	r3, [r7, #8]
 8010cbe:	1ad3      	subs	r3, r2, r3
 8010cc0:	b29a      	uxth	r2, r3
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d106      	bne.n	8010ce0 <pbuf_realloc+0x70>
 8010cd2:	4b26      	ldr	r3, [pc, #152]	; (8010d6c <pbuf_realloc+0xfc>)
 8010cd4:	f240 12af 	movw	r2, #431	; 0x1af
 8010cd8:	4927      	ldr	r1, [pc, #156]	; (8010d78 <pbuf_realloc+0x108>)
 8010cda:	4826      	ldr	r0, [pc, #152]	; (8010d74 <pbuf_realloc+0x104>)
 8010cdc:	f00b fc1a 	bl	801c514 <iprintf>
  while (rem_len > q->len) {
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	895b      	ldrh	r3, [r3, #10]
 8010ce4:	897a      	ldrh	r2, [r7, #10]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d8e1      	bhi.n	8010cae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	7b1b      	ldrb	r3, [r3, #12]
 8010cee:	f003 030f 	and.w	r3, r3, #15
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d121      	bne.n	8010d3a <pbuf_realloc+0xca>
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	895b      	ldrh	r3, [r3, #10]
 8010cfa:	897a      	ldrh	r2, [r7, #10]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d01c      	beq.n	8010d3a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	7b5b      	ldrb	r3, [r3, #13]
 8010d04:	f003 0302 	and.w	r3, r3, #2
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d116      	bne.n	8010d3a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	685a      	ldr	r2, [r3, #4]
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	1ad3      	subs	r3, r2, r3
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	897b      	ldrh	r3, [r7, #10]
 8010d18:	4413      	add	r3, r2
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	68f8      	ldr	r0, [r7, #12]
 8010d20:	f7fe ff58 	bl	800fbd4 <mem_trim>
 8010d24:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d106      	bne.n	8010d3a <pbuf_realloc+0xca>
 8010d2c:	4b0f      	ldr	r3, [pc, #60]	; (8010d6c <pbuf_realloc+0xfc>)
 8010d2e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010d32:	4912      	ldr	r1, [pc, #72]	; (8010d7c <pbuf_realloc+0x10c>)
 8010d34:	480f      	ldr	r0, [pc, #60]	; (8010d74 <pbuf_realloc+0x104>)
 8010d36:	f00b fbed 	bl	801c514 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	897a      	ldrh	r2, [r7, #10]
 8010d3e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	895a      	ldrh	r2, [r3, #10]
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d004      	beq.n	8010d5a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4618      	mov	r0, r3
 8010d56:	f000 f911 	bl	8010f7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	601a      	str	r2, [r3, #0]
 8010d60:	e000      	b.n	8010d64 <pbuf_realloc+0xf4>
    return;
 8010d62:	bf00      	nop

}
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	0801edd8 	.word	0x0801edd8
 8010d70:	0801eef0 	.word	0x0801eef0
 8010d74:	0801ee38 	.word	0x0801ee38
 8010d78:	0801ef08 	.word	0x0801ef08
 8010d7c:	0801ef20 	.word	0x0801ef20

08010d80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b086      	sub	sp, #24
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d106      	bne.n	8010da2 <pbuf_add_header_impl+0x22>
 8010d94:	4b2b      	ldr	r3, [pc, #172]	; (8010e44 <pbuf_add_header_impl+0xc4>)
 8010d96:	f240 12df 	movw	r2, #479	; 0x1df
 8010d9a:	492b      	ldr	r1, [pc, #172]	; (8010e48 <pbuf_add_header_impl+0xc8>)
 8010d9c:	482b      	ldr	r0, [pc, #172]	; (8010e4c <pbuf_add_header_impl+0xcc>)
 8010d9e:	f00b fbb9 	bl	801c514 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d003      	beq.n	8010db0 <pbuf_add_header_impl+0x30>
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010dae:	d301      	bcc.n	8010db4 <pbuf_add_header_impl+0x34>
    return 1;
 8010db0:	2301      	movs	r3, #1
 8010db2:	e043      	b.n	8010e3c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d101      	bne.n	8010dbe <pbuf_add_header_impl+0x3e>
    return 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	e03e      	b.n	8010e3c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	891a      	ldrh	r2, [r3, #8]
 8010dc6:	8a7b      	ldrh	r3, [r7, #18]
 8010dc8:	4413      	add	r3, r2
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	8a7a      	ldrh	r2, [r7, #18]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d901      	bls.n	8010dd6 <pbuf_add_header_impl+0x56>
    return 1;
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e032      	b.n	8010e3c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	7b1b      	ldrb	r3, [r3, #12]
 8010dda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010ddc:	8a3b      	ldrh	r3, [r7, #16]
 8010dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d00c      	beq.n	8010e00 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	685a      	ldr	r2, [r3, #4]
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	425b      	negs	r3, r3
 8010dee:	4413      	add	r3, r2
 8010df0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	3310      	adds	r3, #16
 8010df6:	697a      	ldr	r2, [r7, #20]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d20d      	bcs.n	8010e18 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	e01d      	b.n	8010e3c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010e00:	79fb      	ldrb	r3, [r7, #7]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d006      	beq.n	8010e14 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	685a      	ldr	r2, [r3, #4]
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	425b      	negs	r3, r3
 8010e0e:	4413      	add	r3, r2
 8010e10:	617b      	str	r3, [r7, #20]
 8010e12:	e001      	b.n	8010e18 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010e14:	2301      	movs	r3, #1
 8010e16:	e011      	b.n	8010e3c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	697a      	ldr	r2, [r7, #20]
 8010e1c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	895a      	ldrh	r2, [r3, #10]
 8010e22:	8a7b      	ldrh	r3, [r7, #18]
 8010e24:	4413      	add	r3, r2
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	891a      	ldrh	r2, [r3, #8]
 8010e30:	8a7b      	ldrh	r3, [r7, #18]
 8010e32:	4413      	add	r3, r2
 8010e34:	b29a      	uxth	r2, r3
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	811a      	strh	r2, [r3, #8]


  return 0;
 8010e3a:	2300      	movs	r3, #0
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3718      	adds	r7, #24
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	0801edd8 	.word	0x0801edd8
 8010e48:	0801ef3c 	.word	0x0801ef3c
 8010e4c:	0801ee38 	.word	0x0801ee38

08010e50 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
 8010e58:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	6839      	ldr	r1, [r7, #0]
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f7ff ff8e 	bl	8010d80 <pbuf_add_header_impl>
 8010e64:	4603      	mov	r3, r0
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3708      	adds	r7, #8
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
	...

08010e70 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d106      	bne.n	8010e8e <pbuf_remove_header+0x1e>
 8010e80:	4b20      	ldr	r3, [pc, #128]	; (8010f04 <pbuf_remove_header+0x94>)
 8010e82:	f240 224b 	movw	r2, #587	; 0x24b
 8010e86:	4920      	ldr	r1, [pc, #128]	; (8010f08 <pbuf_remove_header+0x98>)
 8010e88:	4820      	ldr	r0, [pc, #128]	; (8010f0c <pbuf_remove_header+0x9c>)
 8010e8a:	f00b fb43 	bl	801c514 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d003      	beq.n	8010e9c <pbuf_remove_header+0x2c>
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e9a:	d301      	bcc.n	8010ea0 <pbuf_remove_header+0x30>
    return 1;
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	e02c      	b.n	8010efa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d101      	bne.n	8010eaa <pbuf_remove_header+0x3a>
    return 0;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	e027      	b.n	8010efa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	895b      	ldrh	r3, [r3, #10]
 8010eb2:	89fa      	ldrh	r2, [r7, #14]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d908      	bls.n	8010eca <pbuf_remove_header+0x5a>
 8010eb8:	4b12      	ldr	r3, [pc, #72]	; (8010f04 <pbuf_remove_header+0x94>)
 8010eba:	f240 2255 	movw	r2, #597	; 0x255
 8010ebe:	4914      	ldr	r1, [pc, #80]	; (8010f10 <pbuf_remove_header+0xa0>)
 8010ec0:	4812      	ldr	r0, [pc, #72]	; (8010f0c <pbuf_remove_header+0x9c>)
 8010ec2:	f00b fb27 	bl	801c514 <iprintf>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	e017      	b.n	8010efa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	685a      	ldr	r2, [r3, #4]
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	441a      	add	r2, r3
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	895a      	ldrh	r2, [r3, #10]
 8010ee0:	89fb      	ldrh	r3, [r7, #14]
 8010ee2:	1ad3      	subs	r3, r2, r3
 8010ee4:	b29a      	uxth	r2, r3
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	891a      	ldrh	r2, [r3, #8]
 8010eee:	89fb      	ldrh	r3, [r7, #14]
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	b29a      	uxth	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010ef8:	2300      	movs	r3, #0
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	0801edd8 	.word	0x0801edd8
 8010f08:	0801ef3c 	.word	0x0801ef3c
 8010f0c:	0801ee38 	.word	0x0801ee38
 8010f10:	0801ef48 	.word	0x0801ef48

08010f14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	807b      	strh	r3, [r7, #2]
 8010f20:	4613      	mov	r3, r2
 8010f22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010f24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	da08      	bge.n	8010f3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010f2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f30:	425b      	negs	r3, r3
 8010f32:	4619      	mov	r1, r3
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7ff ff9b 	bl	8010e70 <pbuf_remove_header>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	e007      	b.n	8010f4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010f3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f42:	787a      	ldrb	r2, [r7, #1]
 8010f44:	4619      	mov	r1, r3
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7ff ff1a 	bl	8010d80 <pbuf_add_header_impl>
 8010f4c:	4603      	mov	r3, r0
  }
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b082      	sub	sp, #8
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	460b      	mov	r3, r1
 8010f60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010f62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f66:	2201      	movs	r2, #1
 8010f68:	4619      	mov	r1, r3
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f7ff ffd2 	bl	8010f14 <pbuf_header_impl>
 8010f70:	4603      	mov	r3, r0
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3708      	adds	r7, #8
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
	...

08010f7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b088      	sub	sp, #32
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d10b      	bne.n	8010fa2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d106      	bne.n	8010f9e <pbuf_free+0x22>
 8010f90:	4b3b      	ldr	r3, [pc, #236]	; (8011080 <pbuf_free+0x104>)
 8010f92:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010f96:	493b      	ldr	r1, [pc, #236]	; (8011084 <pbuf_free+0x108>)
 8010f98:	483b      	ldr	r0, [pc, #236]	; (8011088 <pbuf_free+0x10c>)
 8010f9a:	f00b fabb 	bl	801c514 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	e069      	b.n	8011076 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010fa6:	e062      	b.n	801106e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010fa8:	f00a fc96 	bl	801b8d8 <sys_arch_protect>
 8010fac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	7b9b      	ldrb	r3, [r3, #14]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d106      	bne.n	8010fc4 <pbuf_free+0x48>
 8010fb6:	4b32      	ldr	r3, [pc, #200]	; (8011080 <pbuf_free+0x104>)
 8010fb8:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010fbc:	4933      	ldr	r1, [pc, #204]	; (801108c <pbuf_free+0x110>)
 8010fbe:	4832      	ldr	r0, [pc, #200]	; (8011088 <pbuf_free+0x10c>)
 8010fc0:	f00b faa8 	bl	801c514 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	7b9b      	ldrb	r3, [r3, #14]
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	b2da      	uxtb	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	739a      	strb	r2, [r3, #14]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	7b9b      	ldrb	r3, [r3, #14]
 8010fd4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010fd6:	69b8      	ldr	r0, [r7, #24]
 8010fd8:	f00a fc8c 	bl	801b8f4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010fdc:	7dfb      	ldrb	r3, [r7, #23]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d143      	bne.n	801106a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	7b1b      	ldrb	r3, [r3, #12]
 8010fec:	f003 030f 	and.w	r3, r3, #15
 8010ff0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	7b5b      	ldrb	r3, [r3, #13]
 8010ff6:	f003 0302 	and.w	r3, r3, #2
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d011      	beq.n	8011022 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d106      	bne.n	8011018 <pbuf_free+0x9c>
 801100a:	4b1d      	ldr	r3, [pc, #116]	; (8011080 <pbuf_free+0x104>)
 801100c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011010:	491f      	ldr	r1, [pc, #124]	; (8011090 <pbuf_free+0x114>)
 8011012:	481d      	ldr	r0, [pc, #116]	; (8011088 <pbuf_free+0x10c>)
 8011014:	f00b fa7e 	bl	801c514 <iprintf>
        pc->custom_free_function(p);
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	691b      	ldr	r3, [r3, #16]
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	4798      	blx	r3
 8011020:	e01d      	b.n	801105e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011022:	7bfb      	ldrb	r3, [r7, #15]
 8011024:	2b02      	cmp	r3, #2
 8011026:	d104      	bne.n	8011032 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011028:	6879      	ldr	r1, [r7, #4]
 801102a:	200c      	movs	r0, #12
 801102c:	f7ff f8f6 	bl	801021c <memp_free>
 8011030:	e015      	b.n	801105e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011032:	7bfb      	ldrb	r3, [r7, #15]
 8011034:	2b01      	cmp	r3, #1
 8011036:	d104      	bne.n	8011042 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011038:	6879      	ldr	r1, [r7, #4]
 801103a:	200b      	movs	r0, #11
 801103c:	f7ff f8ee 	bl	801021c <memp_free>
 8011040:	e00d      	b.n	801105e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011042:	7bfb      	ldrb	r3, [r7, #15]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d103      	bne.n	8011050 <pbuf_free+0xd4>
          mem_free(p);
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f7fe fd33 	bl	800fab4 <mem_free>
 801104e:	e006      	b.n	801105e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011050:	4b0b      	ldr	r3, [pc, #44]	; (8011080 <pbuf_free+0x104>)
 8011052:	f240 320f 	movw	r2, #783	; 0x30f
 8011056:	490f      	ldr	r1, [pc, #60]	; (8011094 <pbuf_free+0x118>)
 8011058:	480b      	ldr	r0, [pc, #44]	; (8011088 <pbuf_free+0x10c>)
 801105a:	f00b fa5b 	bl	801c514 <iprintf>
        }
      }
      count++;
 801105e:	7ffb      	ldrb	r3, [r7, #31]
 8011060:	3301      	adds	r3, #1
 8011062:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	607b      	str	r3, [r7, #4]
 8011068:	e001      	b.n	801106e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801106a:	2300      	movs	r3, #0
 801106c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d199      	bne.n	8010fa8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011074:	7ffb      	ldrb	r3, [r7, #31]
}
 8011076:	4618      	mov	r0, r3
 8011078:	3720      	adds	r7, #32
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	0801edd8 	.word	0x0801edd8
 8011084:	0801ef3c 	.word	0x0801ef3c
 8011088:	0801ee38 	.word	0x0801ee38
 801108c:	0801ef68 	.word	0x0801ef68
 8011090:	0801ef80 	.word	0x0801ef80
 8011094:	0801efa4 	.word	0x0801efa4

08011098 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011098:	b480      	push	{r7}
 801109a:	b085      	sub	sp, #20
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80110a0:	2300      	movs	r3, #0
 80110a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80110a4:	e005      	b.n	80110b2 <pbuf_clen+0x1a>
    ++len;
 80110a6:	89fb      	ldrh	r3, [r7, #14]
 80110a8:	3301      	adds	r3, #1
 80110aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d1f6      	bne.n	80110a6 <pbuf_clen+0xe>
  }
  return len;
 80110b8:	89fb      	ldrh	r3, [r7, #14]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3714      	adds	r7, #20
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr
	...

080110c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d016      	beq.n	8011104 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80110d6:	f00a fbff 	bl	801b8d8 <sys_arch_protect>
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	7b9b      	ldrb	r3, [r3, #14]
 80110e0:	3301      	adds	r3, #1
 80110e2:	b2da      	uxtb	r2, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	739a      	strb	r2, [r3, #14]
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f00a fc03 	bl	801b8f4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	7b9b      	ldrb	r3, [r3, #14]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d106      	bne.n	8011104 <pbuf_ref+0x3c>
 80110f6:	4b05      	ldr	r3, [pc, #20]	; (801110c <pbuf_ref+0x44>)
 80110f8:	f240 3242 	movw	r2, #834	; 0x342
 80110fc:	4904      	ldr	r1, [pc, #16]	; (8011110 <pbuf_ref+0x48>)
 80110fe:	4805      	ldr	r0, [pc, #20]	; (8011114 <pbuf_ref+0x4c>)
 8011100:	f00b fa08 	bl	801c514 <iprintf>
  }
}
 8011104:	bf00      	nop
 8011106:	3710      	adds	r7, #16
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}
 801110c:	0801edd8 	.word	0x0801edd8
 8011110:	0801efb8 	.word	0x0801efb8
 8011114:	0801ee38 	.word	0x0801ee38

08011118 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d002      	beq.n	801112e <pbuf_cat+0x16>
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d107      	bne.n	801113e <pbuf_cat+0x26>
 801112e:	4b20      	ldr	r3, [pc, #128]	; (80111b0 <pbuf_cat+0x98>)
 8011130:	f240 3259 	movw	r2, #857	; 0x359
 8011134:	491f      	ldr	r1, [pc, #124]	; (80111b4 <pbuf_cat+0x9c>)
 8011136:	4820      	ldr	r0, [pc, #128]	; (80111b8 <pbuf_cat+0xa0>)
 8011138:	f00b f9ec 	bl	801c514 <iprintf>
 801113c:	e034      	b.n	80111a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	60fb      	str	r3, [r7, #12]
 8011142:	e00a      	b.n	801115a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	891a      	ldrh	r2, [r3, #8]
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	891b      	ldrh	r3, [r3, #8]
 801114c:	4413      	add	r3, r2
 801114e:	b29a      	uxth	r2, r3
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	60fb      	str	r3, [r7, #12]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d1f0      	bne.n	8011144 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	891a      	ldrh	r2, [r3, #8]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	895b      	ldrh	r3, [r3, #10]
 801116a:	429a      	cmp	r2, r3
 801116c:	d006      	beq.n	801117c <pbuf_cat+0x64>
 801116e:	4b10      	ldr	r3, [pc, #64]	; (80111b0 <pbuf_cat+0x98>)
 8011170:	f240 3262 	movw	r2, #866	; 0x362
 8011174:	4911      	ldr	r1, [pc, #68]	; (80111bc <pbuf_cat+0xa4>)
 8011176:	4810      	ldr	r0, [pc, #64]	; (80111b8 <pbuf_cat+0xa0>)
 8011178:	f00b f9cc 	bl	801c514 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d006      	beq.n	8011192 <pbuf_cat+0x7a>
 8011184:	4b0a      	ldr	r3, [pc, #40]	; (80111b0 <pbuf_cat+0x98>)
 8011186:	f240 3263 	movw	r2, #867	; 0x363
 801118a:	490d      	ldr	r1, [pc, #52]	; (80111c0 <pbuf_cat+0xa8>)
 801118c:	480a      	ldr	r0, [pc, #40]	; (80111b8 <pbuf_cat+0xa0>)
 801118e:	f00b f9c1 	bl	801c514 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	891a      	ldrh	r2, [r3, #8]
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	891b      	ldrh	r3, [r3, #8]
 801119a:	4413      	add	r3, r2
 801119c:	b29a      	uxth	r2, r3
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	683a      	ldr	r2, [r7, #0]
 80111a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80111a8:	3710      	adds	r7, #16
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	0801edd8 	.word	0x0801edd8
 80111b4:	0801efcc 	.word	0x0801efcc
 80111b8:	0801ee38 	.word	0x0801ee38
 80111bc:	0801f004 	.word	0x0801f004
 80111c0:	0801f034 	.word	0x0801f034

080111c4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80111ce:	6839      	ldr	r1, [r7, #0]
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7ff ffa1 	bl	8011118 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80111d6:	6838      	ldr	r0, [r7, #0]
 80111d8:	f7ff ff76 	bl	80110c8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80111dc:	bf00      	nop
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b086      	sub	sp, #24
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80111ee:	2300      	movs	r3, #0
 80111f0:	617b      	str	r3, [r7, #20]
 80111f2:	2300      	movs	r3, #0
 80111f4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d008      	beq.n	801120e <pbuf_copy+0x2a>
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d005      	beq.n	801120e <pbuf_copy+0x2a>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	891a      	ldrh	r2, [r3, #8]
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	891b      	ldrh	r3, [r3, #8]
 801120a:	429a      	cmp	r2, r3
 801120c:	d209      	bcs.n	8011222 <pbuf_copy+0x3e>
 801120e:	4b57      	ldr	r3, [pc, #348]	; (801136c <pbuf_copy+0x188>)
 8011210:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011214:	4956      	ldr	r1, [pc, #344]	; (8011370 <pbuf_copy+0x18c>)
 8011216:	4857      	ldr	r0, [pc, #348]	; (8011374 <pbuf_copy+0x190>)
 8011218:	f00b f97c 	bl	801c514 <iprintf>
 801121c:	f06f 030f 	mvn.w	r3, #15
 8011220:	e09f      	b.n	8011362 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	895b      	ldrh	r3, [r3, #10]
 8011226:	461a      	mov	r2, r3
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	1ad2      	subs	r2, r2, r3
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	895b      	ldrh	r3, [r3, #10]
 8011230:	4619      	mov	r1, r3
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	1acb      	subs	r3, r1, r3
 8011236:	429a      	cmp	r2, r3
 8011238:	d306      	bcc.n	8011248 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	895b      	ldrh	r3, [r3, #10]
 801123e:	461a      	mov	r2, r3
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	1ad3      	subs	r3, r2, r3
 8011244:	60fb      	str	r3, [r7, #12]
 8011246:	e005      	b.n	8011254 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	895b      	ldrh	r3, [r3, #10]
 801124c:	461a      	mov	r2, r3
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	1ad3      	subs	r3, r2, r3
 8011252:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	685a      	ldr	r2, [r3, #4]
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	18d0      	adds	r0, r2, r3
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	685a      	ldr	r2, [r3, #4]
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	4413      	add	r3, r2
 8011264:	68fa      	ldr	r2, [r7, #12]
 8011266:	4619      	mov	r1, r3
 8011268:	f00b fbed 	bl	801ca46 <memcpy>
    offset_to += len;
 801126c:	697a      	ldr	r2, [r7, #20]
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	4413      	add	r3, r2
 8011272:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011274:	693a      	ldr	r2, [r7, #16]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	4413      	add	r3, r2
 801127a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	895b      	ldrh	r3, [r3, #10]
 8011280:	461a      	mov	r2, r3
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	4293      	cmp	r3, r2
 8011286:	d906      	bls.n	8011296 <pbuf_copy+0xb2>
 8011288:	4b38      	ldr	r3, [pc, #224]	; (801136c <pbuf_copy+0x188>)
 801128a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801128e:	493a      	ldr	r1, [pc, #232]	; (8011378 <pbuf_copy+0x194>)
 8011290:	4838      	ldr	r0, [pc, #224]	; (8011374 <pbuf_copy+0x190>)
 8011292:	f00b f93f 	bl	801c514 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	895b      	ldrh	r3, [r3, #10]
 801129a:	461a      	mov	r2, r3
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	4293      	cmp	r3, r2
 80112a0:	d906      	bls.n	80112b0 <pbuf_copy+0xcc>
 80112a2:	4b32      	ldr	r3, [pc, #200]	; (801136c <pbuf_copy+0x188>)
 80112a4:	f240 32da 	movw	r2, #986	; 0x3da
 80112a8:	4934      	ldr	r1, [pc, #208]	; (801137c <pbuf_copy+0x198>)
 80112aa:	4832      	ldr	r0, [pc, #200]	; (8011374 <pbuf_copy+0x190>)
 80112ac:	f00b f932 	bl	801c514 <iprintf>
    if (offset_from >= p_from->len) {
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	895b      	ldrh	r3, [r3, #10]
 80112b4:	461a      	mov	r2, r3
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	4293      	cmp	r3, r2
 80112ba:	d304      	bcc.n	80112c6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80112bc:	2300      	movs	r3, #0
 80112be:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	895b      	ldrh	r3, [r3, #10]
 80112ca:	461a      	mov	r2, r3
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	4293      	cmp	r3, r2
 80112d0:	d114      	bne.n	80112fc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80112d2:	2300      	movs	r3, #0
 80112d4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d10c      	bne.n	80112fc <pbuf_copy+0x118>
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d009      	beq.n	80112fc <pbuf_copy+0x118>
 80112e8:	4b20      	ldr	r3, [pc, #128]	; (801136c <pbuf_copy+0x188>)
 80112ea:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80112ee:	4924      	ldr	r1, [pc, #144]	; (8011380 <pbuf_copy+0x19c>)
 80112f0:	4820      	ldr	r0, [pc, #128]	; (8011374 <pbuf_copy+0x190>)
 80112f2:	f00b f90f 	bl	801c514 <iprintf>
 80112f6:	f06f 030f 	mvn.w	r3, #15
 80112fa:	e032      	b.n	8011362 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d013      	beq.n	801132a <pbuf_copy+0x146>
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	895a      	ldrh	r2, [r3, #10]
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	891b      	ldrh	r3, [r3, #8]
 801130a:	429a      	cmp	r2, r3
 801130c:	d10d      	bne.n	801132a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d009      	beq.n	801132a <pbuf_copy+0x146>
 8011316:	4b15      	ldr	r3, [pc, #84]	; (801136c <pbuf_copy+0x188>)
 8011318:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801131c:	4919      	ldr	r1, [pc, #100]	; (8011384 <pbuf_copy+0x1a0>)
 801131e:	4815      	ldr	r0, [pc, #84]	; (8011374 <pbuf_copy+0x190>)
 8011320:	f00b f8f8 	bl	801c514 <iprintf>
 8011324:	f06f 0305 	mvn.w	r3, #5
 8011328:	e01b      	b.n	8011362 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d013      	beq.n	8011358 <pbuf_copy+0x174>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	895a      	ldrh	r2, [r3, #10]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	891b      	ldrh	r3, [r3, #8]
 8011338:	429a      	cmp	r2, r3
 801133a:	d10d      	bne.n	8011358 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d009      	beq.n	8011358 <pbuf_copy+0x174>
 8011344:	4b09      	ldr	r3, [pc, #36]	; (801136c <pbuf_copy+0x188>)
 8011346:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801134a:	490e      	ldr	r1, [pc, #56]	; (8011384 <pbuf_copy+0x1a0>)
 801134c:	4809      	ldr	r0, [pc, #36]	; (8011374 <pbuf_copy+0x190>)
 801134e:	f00b f8e1 	bl	801c514 <iprintf>
 8011352:	f06f 0305 	mvn.w	r3, #5
 8011356:	e004      	b.n	8011362 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	2b00      	cmp	r3, #0
 801135c:	f47f af61 	bne.w	8011222 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3718      	adds	r7, #24
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	0801edd8 	.word	0x0801edd8
 8011370:	0801f080 	.word	0x0801f080
 8011374:	0801ee38 	.word	0x0801ee38
 8011378:	0801f0b0 	.word	0x0801f0b0
 801137c:	0801f0c8 	.word	0x0801f0c8
 8011380:	0801f0e4 	.word	0x0801f0e4
 8011384:	0801f0f4 	.word	0x0801f0f4

08011388 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b088      	sub	sp, #32
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	4611      	mov	r1, r2
 8011394:	461a      	mov	r2, r3
 8011396:	460b      	mov	r3, r1
 8011398:	80fb      	strh	r3, [r7, #6]
 801139a:	4613      	mov	r3, r2
 801139c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801139e:	2300      	movs	r3, #0
 80113a0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d108      	bne.n	80113be <pbuf_copy_partial+0x36>
 80113ac:	4b2b      	ldr	r3, [pc, #172]	; (801145c <pbuf_copy_partial+0xd4>)
 80113ae:	f240 420a 	movw	r2, #1034	; 0x40a
 80113b2:	492b      	ldr	r1, [pc, #172]	; (8011460 <pbuf_copy_partial+0xd8>)
 80113b4:	482b      	ldr	r0, [pc, #172]	; (8011464 <pbuf_copy_partial+0xdc>)
 80113b6:	f00b f8ad 	bl	801c514 <iprintf>
 80113ba:	2300      	movs	r3, #0
 80113bc:	e04a      	b.n	8011454 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d108      	bne.n	80113d6 <pbuf_copy_partial+0x4e>
 80113c4:	4b25      	ldr	r3, [pc, #148]	; (801145c <pbuf_copy_partial+0xd4>)
 80113c6:	f240 420b 	movw	r2, #1035	; 0x40b
 80113ca:	4927      	ldr	r1, [pc, #156]	; (8011468 <pbuf_copy_partial+0xe0>)
 80113cc:	4825      	ldr	r0, [pc, #148]	; (8011464 <pbuf_copy_partial+0xdc>)
 80113ce:	f00b f8a1 	bl	801c514 <iprintf>
 80113d2:	2300      	movs	r3, #0
 80113d4:	e03e      	b.n	8011454 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	61fb      	str	r3, [r7, #28]
 80113da:	e034      	b.n	8011446 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80113dc:	88bb      	ldrh	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d00a      	beq.n	80113f8 <pbuf_copy_partial+0x70>
 80113e2:	69fb      	ldr	r3, [r7, #28]
 80113e4:	895b      	ldrh	r3, [r3, #10]
 80113e6:	88ba      	ldrh	r2, [r7, #4]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d305      	bcc.n	80113f8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80113ec:	69fb      	ldr	r3, [r7, #28]
 80113ee:	895b      	ldrh	r3, [r3, #10]
 80113f0:	88ba      	ldrh	r2, [r7, #4]
 80113f2:	1ad3      	subs	r3, r2, r3
 80113f4:	80bb      	strh	r3, [r7, #4]
 80113f6:	e023      	b.n	8011440 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	895a      	ldrh	r2, [r3, #10]
 80113fc:	88bb      	ldrh	r3, [r7, #4]
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011402:	8b3a      	ldrh	r2, [r7, #24]
 8011404:	88fb      	ldrh	r3, [r7, #6]
 8011406:	429a      	cmp	r2, r3
 8011408:	d901      	bls.n	801140e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801140a:	88fb      	ldrh	r3, [r7, #6]
 801140c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801140e:	8b7b      	ldrh	r3, [r7, #26]
 8011410:	68ba      	ldr	r2, [r7, #8]
 8011412:	18d0      	adds	r0, r2, r3
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	685a      	ldr	r2, [r3, #4]
 8011418:	88bb      	ldrh	r3, [r7, #4]
 801141a:	4413      	add	r3, r2
 801141c:	8b3a      	ldrh	r2, [r7, #24]
 801141e:	4619      	mov	r1, r3
 8011420:	f00b fb11 	bl	801ca46 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011424:	8afa      	ldrh	r2, [r7, #22]
 8011426:	8b3b      	ldrh	r3, [r7, #24]
 8011428:	4413      	add	r3, r2
 801142a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801142c:	8b7a      	ldrh	r2, [r7, #26]
 801142e:	8b3b      	ldrh	r3, [r7, #24]
 8011430:	4413      	add	r3, r2
 8011432:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011434:	88fa      	ldrh	r2, [r7, #6]
 8011436:	8b3b      	ldrh	r3, [r7, #24]
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801143c:	2300      	movs	r3, #0
 801143e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	61fb      	str	r3, [r7, #28]
 8011446:	88fb      	ldrh	r3, [r7, #6]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <pbuf_copy_partial+0xca>
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1c4      	bne.n	80113dc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011452:	8afb      	ldrh	r3, [r7, #22]
}
 8011454:	4618      	mov	r0, r3
 8011456:	3720      	adds	r7, #32
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}
 801145c:	0801edd8 	.word	0x0801edd8
 8011460:	0801f120 	.word	0x0801f120
 8011464:	0801ee38 	.word	0x0801ee38
 8011468:	0801f140 	.word	0x0801f140

0801146c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b084      	sub	sp, #16
 8011470:	af00      	add	r7, sp, #0
 8011472:	4603      	mov	r3, r0
 8011474:	603a      	str	r2, [r7, #0]
 8011476:	71fb      	strb	r3, [r7, #7]
 8011478:	460b      	mov	r3, r1
 801147a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	8919      	ldrh	r1, [r3, #8]
 8011480:	88ba      	ldrh	r2, [r7, #4]
 8011482:	79fb      	ldrb	r3, [r7, #7]
 8011484:	4618      	mov	r0, r3
 8011486:	f7ff fa95 	bl	80109b4 <pbuf_alloc>
 801148a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d101      	bne.n	8011496 <pbuf_clone+0x2a>
    return NULL;
 8011492:	2300      	movs	r3, #0
 8011494:	e011      	b.n	80114ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011496:	6839      	ldr	r1, [r7, #0]
 8011498:	68f8      	ldr	r0, [r7, #12]
 801149a:	f7ff fea3 	bl	80111e4 <pbuf_copy>
 801149e:	4603      	mov	r3, r0
 80114a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80114a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d006      	beq.n	80114b8 <pbuf_clone+0x4c>
 80114aa:	4b06      	ldr	r3, [pc, #24]	; (80114c4 <pbuf_clone+0x58>)
 80114ac:	f240 5224 	movw	r2, #1316	; 0x524
 80114b0:	4905      	ldr	r1, [pc, #20]	; (80114c8 <pbuf_clone+0x5c>)
 80114b2:	4806      	ldr	r0, [pc, #24]	; (80114cc <pbuf_clone+0x60>)
 80114b4:	f00b f82e 	bl	801c514 <iprintf>
  return q;
 80114b8:	68fb      	ldr	r3, [r7, #12]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	0801edd8 	.word	0x0801edd8
 80114c8:	0801f24c 	.word	0x0801f24c
 80114cc:	0801ee38 	.word	0x0801ee38

080114d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80114d4:	f00a ff0c 	bl	801c2f0 <rand>
 80114d8:	4603      	mov	r3, r0
 80114da:	b29b      	uxth	r3, r3
 80114dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	4b01      	ldr	r3, [pc, #4]	; (80114f0 <tcp_init+0x20>)
 80114ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80114ec:	bf00      	nop
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	20000028 	.word	0x20000028

080114f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	7d1b      	ldrb	r3, [r3, #20]
 8011500:	2b01      	cmp	r3, #1
 8011502:	d105      	bne.n	8011510 <tcp_free+0x1c>
 8011504:	4b06      	ldr	r3, [pc, #24]	; (8011520 <tcp_free+0x2c>)
 8011506:	22d4      	movs	r2, #212	; 0xd4
 8011508:	4906      	ldr	r1, [pc, #24]	; (8011524 <tcp_free+0x30>)
 801150a:	4807      	ldr	r0, [pc, #28]	; (8011528 <tcp_free+0x34>)
 801150c:	f00b f802 	bl	801c514 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011510:	6879      	ldr	r1, [r7, #4]
 8011512:	2001      	movs	r0, #1
 8011514:	f7fe fe82 	bl	801021c <memp_free>
}
 8011518:	bf00      	nop
 801151a:	3708      	adds	r7, #8
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}
 8011520:	0801f2d8 	.word	0x0801f2d8
 8011524:	0801f308 	.word	0x0801f308
 8011528:	0801f31c 	.word	0x0801f31c

0801152c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	7d1b      	ldrb	r3, [r3, #20]
 8011538:	2b01      	cmp	r3, #1
 801153a:	d105      	bne.n	8011548 <tcp_free_listen+0x1c>
 801153c:	4b06      	ldr	r3, [pc, #24]	; (8011558 <tcp_free_listen+0x2c>)
 801153e:	22df      	movs	r2, #223	; 0xdf
 8011540:	4906      	ldr	r1, [pc, #24]	; (801155c <tcp_free_listen+0x30>)
 8011542:	4807      	ldr	r0, [pc, #28]	; (8011560 <tcp_free_listen+0x34>)
 8011544:	f00a ffe6 	bl	801c514 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011548:	6879      	ldr	r1, [r7, #4]
 801154a:	2002      	movs	r0, #2
 801154c:	f7fe fe66 	bl	801021c <memp_free>
}
 8011550:	bf00      	nop
 8011552:	3708      	adds	r7, #8
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	0801f2d8 	.word	0x0801f2d8
 801155c:	0801f344 	.word	0x0801f344
 8011560:	0801f31c 	.word	0x0801f31c

08011564 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011568:	f000 fea2 	bl	80122b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801156c:	4b07      	ldr	r3, [pc, #28]	; (801158c <tcp_tmr+0x28>)
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	3301      	adds	r3, #1
 8011572:	b2da      	uxtb	r2, r3
 8011574:	4b05      	ldr	r3, [pc, #20]	; (801158c <tcp_tmr+0x28>)
 8011576:	701a      	strb	r2, [r3, #0]
 8011578:	4b04      	ldr	r3, [pc, #16]	; (801158c <tcp_tmr+0x28>)
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	f003 0301 	and.w	r3, r3, #1
 8011580:	2b00      	cmp	r3, #0
 8011582:	d001      	beq.n	8011588 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011584:	f000 fb54 	bl	8011c30 <tcp_slowtmr>
  }
}
 8011588:	bf00      	nop
 801158a:	bd80      	pop	{r7, pc}
 801158c:	2000c5ed 	.word	0x2000c5ed

08011590 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d105      	bne.n	80115ac <tcp_remove_listener+0x1c>
 80115a0:	4b0d      	ldr	r3, [pc, #52]	; (80115d8 <tcp_remove_listener+0x48>)
 80115a2:	22ff      	movs	r2, #255	; 0xff
 80115a4:	490d      	ldr	r1, [pc, #52]	; (80115dc <tcp_remove_listener+0x4c>)
 80115a6:	480e      	ldr	r0, [pc, #56]	; (80115e0 <tcp_remove_listener+0x50>)
 80115a8:	f00a ffb4 	bl	801c514 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	60fb      	str	r3, [r7, #12]
 80115b0:	e00a      	b.n	80115c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115b6:	683a      	ldr	r2, [r7, #0]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d102      	bne.n	80115c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2200      	movs	r2, #0
 80115c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	68db      	ldr	r3, [r3, #12]
 80115c6:	60fb      	str	r3, [r7, #12]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d1f1      	bne.n	80115b2 <tcp_remove_listener+0x22>
    }
  }
}
 80115ce:	bf00      	nop
 80115d0:	bf00      	nop
 80115d2:	3710      	adds	r7, #16
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}
 80115d8:	0801f2d8 	.word	0x0801f2d8
 80115dc:	0801f360 	.word	0x0801f360
 80115e0:	0801f31c 	.word	0x0801f31c

080115e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d106      	bne.n	8011600 <tcp_listen_closed+0x1c>
 80115f2:	4b14      	ldr	r3, [pc, #80]	; (8011644 <tcp_listen_closed+0x60>)
 80115f4:	f240 1211 	movw	r2, #273	; 0x111
 80115f8:	4913      	ldr	r1, [pc, #76]	; (8011648 <tcp_listen_closed+0x64>)
 80115fa:	4814      	ldr	r0, [pc, #80]	; (801164c <tcp_listen_closed+0x68>)
 80115fc:	f00a ff8a 	bl	801c514 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	7d1b      	ldrb	r3, [r3, #20]
 8011604:	2b01      	cmp	r3, #1
 8011606:	d006      	beq.n	8011616 <tcp_listen_closed+0x32>
 8011608:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <tcp_listen_closed+0x60>)
 801160a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801160e:	4910      	ldr	r1, [pc, #64]	; (8011650 <tcp_listen_closed+0x6c>)
 8011610:	480e      	ldr	r0, [pc, #56]	; (801164c <tcp_listen_closed+0x68>)
 8011612:	f00a ff7f 	bl	801c514 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011616:	2301      	movs	r3, #1
 8011618:	60fb      	str	r3, [r7, #12]
 801161a:	e00b      	b.n	8011634 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801161c:	4a0d      	ldr	r2, [pc, #52]	; (8011654 <tcp_listen_closed+0x70>)
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	6879      	ldr	r1, [r7, #4]
 8011628:	4618      	mov	r0, r3
 801162a:	f7ff ffb1 	bl	8011590 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	3301      	adds	r3, #1
 8011632:	60fb      	str	r3, [r7, #12]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	2b03      	cmp	r3, #3
 8011638:	d9f0      	bls.n	801161c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801163a:	bf00      	nop
 801163c:	bf00      	nop
 801163e:	3710      	adds	r7, #16
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	0801f2d8 	.word	0x0801f2d8
 8011648:	0801f388 	.word	0x0801f388
 801164c:	0801f31c 	.word	0x0801f31c
 8011650:	0801f394 	.word	0x0801f394
 8011654:	080217f4 	.word	0x080217f4

08011658 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011658:	b5b0      	push	{r4, r5, r7, lr}
 801165a:	b088      	sub	sp, #32
 801165c:	af04      	add	r7, sp, #16
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	460b      	mov	r3, r1
 8011662:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d106      	bne.n	8011678 <tcp_close_shutdown+0x20>
 801166a:	4b63      	ldr	r3, [pc, #396]	; (80117f8 <tcp_close_shutdown+0x1a0>)
 801166c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011670:	4962      	ldr	r1, [pc, #392]	; (80117fc <tcp_close_shutdown+0x1a4>)
 8011672:	4863      	ldr	r0, [pc, #396]	; (8011800 <tcp_close_shutdown+0x1a8>)
 8011674:	f00a ff4e 	bl	801c514 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011678:	78fb      	ldrb	r3, [r7, #3]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d066      	beq.n	801174c <tcp_close_shutdown+0xf4>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	7d1b      	ldrb	r3, [r3, #20]
 8011682:	2b04      	cmp	r3, #4
 8011684:	d003      	beq.n	801168e <tcp_close_shutdown+0x36>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	7d1b      	ldrb	r3, [r3, #20]
 801168a:	2b07      	cmp	r3, #7
 801168c:	d15e      	bne.n	801174c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011692:	2b00      	cmp	r3, #0
 8011694:	d104      	bne.n	80116a0 <tcp_close_shutdown+0x48>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801169a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801169e:	d055      	beq.n	801174c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	8b5b      	ldrh	r3, [r3, #26]
 80116a4:	f003 0310 	and.w	r3, r3, #16
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d106      	bne.n	80116ba <tcp_close_shutdown+0x62>
 80116ac:	4b52      	ldr	r3, [pc, #328]	; (80117f8 <tcp_close_shutdown+0x1a0>)
 80116ae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80116b2:	4954      	ldr	r1, [pc, #336]	; (8011804 <tcp_close_shutdown+0x1ac>)
 80116b4:	4852      	ldr	r0, [pc, #328]	; (8011800 <tcp_close_shutdown+0x1a8>)
 80116b6:	f00a ff2d 	bl	801c514 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80116c2:	687d      	ldr	r5, [r7, #4]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	3304      	adds	r3, #4
 80116c8:	687a      	ldr	r2, [r7, #4]
 80116ca:	8ad2      	ldrh	r2, [r2, #22]
 80116cc:	6879      	ldr	r1, [r7, #4]
 80116ce:	8b09      	ldrh	r1, [r1, #24]
 80116d0:	9102      	str	r1, [sp, #8]
 80116d2:	9201      	str	r2, [sp, #4]
 80116d4:	9300      	str	r3, [sp, #0]
 80116d6:	462b      	mov	r3, r5
 80116d8:	4622      	mov	r2, r4
 80116da:	4601      	mov	r1, r0
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f004 fe91 	bl	8016404 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f001 f8c6 	bl	8012874 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80116e8:	4b47      	ldr	r3, [pc, #284]	; (8011808 <tcp_close_shutdown+0x1b0>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d105      	bne.n	80116fe <tcp_close_shutdown+0xa6>
 80116f2:	4b45      	ldr	r3, [pc, #276]	; (8011808 <tcp_close_shutdown+0x1b0>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	4a43      	ldr	r2, [pc, #268]	; (8011808 <tcp_close_shutdown+0x1b0>)
 80116fa:	6013      	str	r3, [r2, #0]
 80116fc:	e013      	b.n	8011726 <tcp_close_shutdown+0xce>
 80116fe:	4b42      	ldr	r3, [pc, #264]	; (8011808 <tcp_close_shutdown+0x1b0>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	60fb      	str	r3, [r7, #12]
 8011704:	e00c      	b.n	8011720 <tcp_close_shutdown+0xc8>
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	429a      	cmp	r2, r3
 801170e:	d104      	bne.n	801171a <tcp_close_shutdown+0xc2>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	68da      	ldr	r2, [r3, #12]
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	60da      	str	r2, [r3, #12]
 8011718:	e005      	b.n	8011726 <tcp_close_shutdown+0xce>
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	60fb      	str	r3, [r7, #12]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d1ef      	bne.n	8011706 <tcp_close_shutdown+0xae>
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2200      	movs	r2, #0
 801172a:	60da      	str	r2, [r3, #12]
 801172c:	4b37      	ldr	r3, [pc, #220]	; (801180c <tcp_close_shutdown+0x1b4>)
 801172e:	2201      	movs	r2, #1
 8011730:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011732:	4b37      	ldr	r3, [pc, #220]	; (8011810 <tcp_close_shutdown+0x1b8>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	429a      	cmp	r2, r3
 801173a:	d102      	bne.n	8011742 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801173c:	f003 fd5e 	bl	80151fc <tcp_trigger_input_pcb_close>
 8011740:	e002      	b.n	8011748 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f7ff fed6 	bl	80114f4 <tcp_free>
      }
      return ERR_OK;
 8011748:	2300      	movs	r3, #0
 801174a:	e050      	b.n	80117ee <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	7d1b      	ldrb	r3, [r3, #20]
 8011750:	2b02      	cmp	r3, #2
 8011752:	d03b      	beq.n	80117cc <tcp_close_shutdown+0x174>
 8011754:	2b02      	cmp	r3, #2
 8011756:	dc44      	bgt.n	80117e2 <tcp_close_shutdown+0x18a>
 8011758:	2b00      	cmp	r3, #0
 801175a:	d002      	beq.n	8011762 <tcp_close_shutdown+0x10a>
 801175c:	2b01      	cmp	r3, #1
 801175e:	d02a      	beq.n	80117b6 <tcp_close_shutdown+0x15e>
 8011760:	e03f      	b.n	80117e2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	8adb      	ldrh	r3, [r3, #22]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d021      	beq.n	80117ae <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801176a:	4b2a      	ldr	r3, [pc, #168]	; (8011814 <tcp_close_shutdown+0x1bc>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	429a      	cmp	r2, r3
 8011772:	d105      	bne.n	8011780 <tcp_close_shutdown+0x128>
 8011774:	4b27      	ldr	r3, [pc, #156]	; (8011814 <tcp_close_shutdown+0x1bc>)
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	4a26      	ldr	r2, [pc, #152]	; (8011814 <tcp_close_shutdown+0x1bc>)
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	e013      	b.n	80117a8 <tcp_close_shutdown+0x150>
 8011780:	4b24      	ldr	r3, [pc, #144]	; (8011814 <tcp_close_shutdown+0x1bc>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	60bb      	str	r3, [r7, #8]
 8011786:	e00c      	b.n	80117a2 <tcp_close_shutdown+0x14a>
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	429a      	cmp	r2, r3
 8011790:	d104      	bne.n	801179c <tcp_close_shutdown+0x144>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	68da      	ldr	r2, [r3, #12]
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	60da      	str	r2, [r3, #12]
 801179a:	e005      	b.n	80117a8 <tcp_close_shutdown+0x150>
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	68db      	ldr	r3, [r3, #12]
 80117a0:	60bb      	str	r3, [r7, #8]
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d1ef      	bne.n	8011788 <tcp_close_shutdown+0x130>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f7ff fea0 	bl	80114f4 <tcp_free>
      break;
 80117b4:	e01a      	b.n	80117ec <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f7ff ff14 	bl	80115e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80117bc:	6879      	ldr	r1, [r7, #4]
 80117be:	4816      	ldr	r0, [pc, #88]	; (8011818 <tcp_close_shutdown+0x1c0>)
 80117c0:	f001 f8a8 	bl	8012914 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7ff feb1 	bl	801152c <tcp_free_listen>
      break;
 80117ca:	e00f      	b.n	80117ec <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80117cc:	6879      	ldr	r1, [r7, #4]
 80117ce:	480e      	ldr	r0, [pc, #56]	; (8011808 <tcp_close_shutdown+0x1b0>)
 80117d0:	f001 f8a0 	bl	8012914 <tcp_pcb_remove>
 80117d4:	4b0d      	ldr	r3, [pc, #52]	; (801180c <tcp_close_shutdown+0x1b4>)
 80117d6:	2201      	movs	r2, #1
 80117d8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f7ff fe8a 	bl	80114f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80117e0:	e004      	b.n	80117ec <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f000 f81a 	bl	801181c <tcp_close_shutdown_fin>
 80117e8:	4603      	mov	r3, r0
 80117ea:	e000      	b.n	80117ee <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3710      	adds	r7, #16
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bdb0      	pop	{r4, r5, r7, pc}
 80117f6:	bf00      	nop
 80117f8:	0801f2d8 	.word	0x0801f2d8
 80117fc:	0801f3ac 	.word	0x0801f3ac
 8011800:	0801f31c 	.word	0x0801f31c
 8011804:	0801f3cc 	.word	0x0801f3cc
 8011808:	2000c5e4 	.word	0x2000c5e4
 801180c:	2000c5ec 	.word	0x2000c5ec
 8011810:	2000c624 	.word	0x2000c624
 8011814:	2000c5dc 	.word	0x2000c5dc
 8011818:	2000c5e0 	.word	0x2000c5e0

0801181c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d106      	bne.n	8011838 <tcp_close_shutdown_fin+0x1c>
 801182a:	4b2e      	ldr	r3, [pc, #184]	; (80118e4 <tcp_close_shutdown_fin+0xc8>)
 801182c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011830:	492d      	ldr	r1, [pc, #180]	; (80118e8 <tcp_close_shutdown_fin+0xcc>)
 8011832:	482e      	ldr	r0, [pc, #184]	; (80118ec <tcp_close_shutdown_fin+0xd0>)
 8011834:	f00a fe6e 	bl	801c514 <iprintf>

  switch (pcb->state) {
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	7d1b      	ldrb	r3, [r3, #20]
 801183c:	2b07      	cmp	r3, #7
 801183e:	d020      	beq.n	8011882 <tcp_close_shutdown_fin+0x66>
 8011840:	2b07      	cmp	r3, #7
 8011842:	dc2b      	bgt.n	801189c <tcp_close_shutdown_fin+0x80>
 8011844:	2b03      	cmp	r3, #3
 8011846:	d002      	beq.n	801184e <tcp_close_shutdown_fin+0x32>
 8011848:	2b04      	cmp	r3, #4
 801184a:	d00d      	beq.n	8011868 <tcp_close_shutdown_fin+0x4c>
 801184c:	e026      	b.n	801189c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f003 fee6 	bl	8015620 <tcp_send_fin>
 8011854:	4603      	mov	r3, r0
 8011856:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d11f      	bne.n	80118a0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2205      	movs	r2, #5
 8011864:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011866:	e01b      	b.n	80118a0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f003 fed9 	bl	8015620 <tcp_send_fin>
 801186e:	4603      	mov	r3, r0
 8011870:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d114      	bne.n	80118a4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2205      	movs	r2, #5
 801187e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011880:	e010      	b.n	80118a4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f003 fecc 	bl	8015620 <tcp_send_fin>
 8011888:	4603      	mov	r3, r0
 801188a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801188c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d109      	bne.n	80118a8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2209      	movs	r2, #9
 8011898:	751a      	strb	r2, [r3, #20]
      }
      break;
 801189a:	e005      	b.n	80118a8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801189c:	2300      	movs	r3, #0
 801189e:	e01c      	b.n	80118da <tcp_close_shutdown_fin+0xbe>
      break;
 80118a0:	bf00      	nop
 80118a2:	e002      	b.n	80118aa <tcp_close_shutdown_fin+0x8e>
      break;
 80118a4:	bf00      	nop
 80118a6:	e000      	b.n	80118aa <tcp_close_shutdown_fin+0x8e>
      break;
 80118a8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80118aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d103      	bne.n	80118ba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f003 fff2 	bl	801589c <tcp_output>
 80118b8:	e00d      	b.n	80118d6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80118ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118c2:	d108      	bne.n	80118d6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	8b5b      	ldrh	r3, [r3, #26]
 80118c8:	f043 0308 	orr.w	r3, r3, #8
 80118cc:	b29a      	uxth	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80118d2:	2300      	movs	r3, #0
 80118d4:	e001      	b.n	80118da <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80118d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3710      	adds	r7, #16
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	0801f2d8 	.word	0x0801f2d8
 80118e8:	0801f388 	.word	0x0801f388
 80118ec:	0801f31c 	.word	0x0801f31c

080118f0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d109      	bne.n	8011912 <tcp_close+0x22>
 80118fe:	4b0f      	ldr	r3, [pc, #60]	; (801193c <tcp_close+0x4c>)
 8011900:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011904:	490e      	ldr	r1, [pc, #56]	; (8011940 <tcp_close+0x50>)
 8011906:	480f      	ldr	r0, [pc, #60]	; (8011944 <tcp_close+0x54>)
 8011908:	f00a fe04 	bl	801c514 <iprintf>
 801190c:	f06f 030f 	mvn.w	r3, #15
 8011910:	e00f      	b.n	8011932 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	7d1b      	ldrb	r3, [r3, #20]
 8011916:	2b01      	cmp	r3, #1
 8011918:	d006      	beq.n	8011928 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	8b5b      	ldrh	r3, [r3, #26]
 801191e:	f043 0310 	orr.w	r3, r3, #16
 8011922:	b29a      	uxth	r2, r3
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011928:	2101      	movs	r1, #1
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7ff fe94 	bl	8011658 <tcp_close_shutdown>
 8011930:	4603      	mov	r3, r0
}
 8011932:	4618      	mov	r0, r3
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	0801f2d8 	.word	0x0801f2d8
 8011940:	0801f3e8 	.word	0x0801f3e8
 8011944:	0801f31c 	.word	0x0801f31c

08011948 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b08e      	sub	sp, #56	; 0x38
 801194c:	af04      	add	r7, sp, #16
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d107      	bne.n	8011968 <tcp_abandon+0x20>
 8011958:	4b52      	ldr	r3, [pc, #328]	; (8011aa4 <tcp_abandon+0x15c>)
 801195a:	f240 223d 	movw	r2, #573	; 0x23d
 801195e:	4952      	ldr	r1, [pc, #328]	; (8011aa8 <tcp_abandon+0x160>)
 8011960:	4852      	ldr	r0, [pc, #328]	; (8011aac <tcp_abandon+0x164>)
 8011962:	f00a fdd7 	bl	801c514 <iprintf>
 8011966:	e099      	b.n	8011a9c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	7d1b      	ldrb	r3, [r3, #20]
 801196c:	2b01      	cmp	r3, #1
 801196e:	d106      	bne.n	801197e <tcp_abandon+0x36>
 8011970:	4b4c      	ldr	r3, [pc, #304]	; (8011aa4 <tcp_abandon+0x15c>)
 8011972:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011976:	494e      	ldr	r1, [pc, #312]	; (8011ab0 <tcp_abandon+0x168>)
 8011978:	484c      	ldr	r0, [pc, #304]	; (8011aac <tcp_abandon+0x164>)
 801197a:	f00a fdcb 	bl	801c514 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	7d1b      	ldrb	r3, [r3, #20]
 8011982:	2b0a      	cmp	r3, #10
 8011984:	d107      	bne.n	8011996 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011986:	6879      	ldr	r1, [r7, #4]
 8011988:	484a      	ldr	r0, [pc, #296]	; (8011ab4 <tcp_abandon+0x16c>)
 801198a:	f000 ffc3 	bl	8012914 <tcp_pcb_remove>
    tcp_free(pcb);
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f7ff fdb0 	bl	80114f4 <tcp_free>
 8011994:	e082      	b.n	8011a9c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011996:	2300      	movs	r3, #0
 8011998:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801199a:	2300      	movs	r3, #0
 801199c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119a2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119a8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119b0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	691b      	ldr	r3, [r3, #16]
 80119b6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	7d1b      	ldrb	r3, [r3, #20]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d126      	bne.n	8011a0e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	8adb      	ldrh	r3, [r3, #22]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d02e      	beq.n	8011a26 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80119c8:	4b3b      	ldr	r3, [pc, #236]	; (8011ab8 <tcp_abandon+0x170>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d105      	bne.n	80119de <tcp_abandon+0x96>
 80119d2:	4b39      	ldr	r3, [pc, #228]	; (8011ab8 <tcp_abandon+0x170>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	4a37      	ldr	r2, [pc, #220]	; (8011ab8 <tcp_abandon+0x170>)
 80119da:	6013      	str	r3, [r2, #0]
 80119dc:	e013      	b.n	8011a06 <tcp_abandon+0xbe>
 80119de:	4b36      	ldr	r3, [pc, #216]	; (8011ab8 <tcp_abandon+0x170>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	61fb      	str	r3, [r7, #28]
 80119e4:	e00c      	b.n	8011a00 <tcp_abandon+0xb8>
 80119e6:	69fb      	ldr	r3, [r7, #28]
 80119e8:	68db      	ldr	r3, [r3, #12]
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d104      	bne.n	80119fa <tcp_abandon+0xb2>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	68da      	ldr	r2, [r3, #12]
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	60da      	str	r2, [r3, #12]
 80119f8:	e005      	b.n	8011a06 <tcp_abandon+0xbe>
 80119fa:	69fb      	ldr	r3, [r7, #28]
 80119fc:	68db      	ldr	r3, [r3, #12]
 80119fe:	61fb      	str	r3, [r7, #28]
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d1ef      	bne.n	80119e6 <tcp_abandon+0x9e>
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	60da      	str	r2, [r3, #12]
 8011a0c:	e00b      	b.n	8011a26 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	8adb      	ldrh	r3, [r3, #22]
 8011a16:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011a18:	6879      	ldr	r1, [r7, #4]
 8011a1a:	4828      	ldr	r0, [pc, #160]	; (8011abc <tcp_abandon+0x174>)
 8011a1c:	f000 ff7a 	bl	8012914 <tcp_pcb_remove>
 8011a20:	4b27      	ldr	r3, [pc, #156]	; (8011ac0 <tcp_abandon+0x178>)
 8011a22:	2201      	movs	r2, #1
 8011a24:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d004      	beq.n	8011a38 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a32:	4618      	mov	r0, r3
 8011a34:	f000 fd1c 	bl	8012470 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d004      	beq.n	8011a4a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a44:	4618      	mov	r0, r3
 8011a46:	f000 fd13 	bl	8012470 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d004      	beq.n	8011a5c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a56:	4618      	mov	r0, r3
 8011a58:	f000 fd0a 	bl	8012470 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00e      	beq.n	8011a80 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011a62:	6879      	ldr	r1, [r7, #4]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	3304      	adds	r3, #4
 8011a68:	687a      	ldr	r2, [r7, #4]
 8011a6a:	8b12      	ldrh	r2, [r2, #24]
 8011a6c:	9202      	str	r2, [sp, #8]
 8011a6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011a70:	9201      	str	r2, [sp, #4]
 8011a72:	9300      	str	r3, [sp, #0]
 8011a74:	460b      	mov	r3, r1
 8011a76:	697a      	ldr	r2, [r7, #20]
 8011a78:	69b9      	ldr	r1, [r7, #24]
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f004 fcc2 	bl	8016404 <tcp_rst>
    }
    last_state = pcb->state;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	7d1b      	ldrb	r3, [r3, #20]
 8011a84:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f7ff fd34 	bl	80114f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d004      	beq.n	8011a9c <tcp_abandon+0x154>
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	f06f 010c 	mvn.w	r1, #12
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	4798      	blx	r3
  }
}
 8011a9c:	3728      	adds	r7, #40	; 0x28
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	0801f2d8 	.word	0x0801f2d8
 8011aa8:	0801f41c 	.word	0x0801f41c
 8011aac:	0801f31c 	.word	0x0801f31c
 8011ab0:	0801f438 	.word	0x0801f438
 8011ab4:	2000c5e8 	.word	0x2000c5e8
 8011ab8:	2000c5dc 	.word	0x2000c5dc
 8011abc:	2000c5e4 	.word	0x2000c5e4
 8011ac0:	2000c5ec 	.word	0x2000c5ec

08011ac4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011acc:	2101      	movs	r1, #1
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f7ff ff3a 	bl	8011948 <tcp_abandon>
}
 8011ad4:	bf00      	nop
 8011ad6:	3708      	adds	r7, #8
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d106      	bne.n	8011af8 <tcp_update_rcv_ann_wnd+0x1c>
 8011aea:	4b25      	ldr	r3, [pc, #148]	; (8011b80 <tcp_update_rcv_ann_wnd+0xa4>)
 8011aec:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011af0:	4924      	ldr	r1, [pc, #144]	; (8011b84 <tcp_update_rcv_ann_wnd+0xa8>)
 8011af2:	4825      	ldr	r0, [pc, #148]	; (8011b88 <tcp_update_rcv_ann_wnd+0xac>)
 8011af4:	f00a fd0e 	bl	801c514 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011b00:	4413      	add	r3, r2
 8011b02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011b0c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011b10:	bf28      	it	cs
 8011b12:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011b16:	b292      	uxth	r2, r2
 8011b18:	4413      	add	r3, r2
 8011b1a:	68fa      	ldr	r2, [r7, #12]
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	db08      	blt.n	8011b34 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b2e:	68fa      	ldr	r2, [r7, #12]
 8011b30:	1ad3      	subs	r3, r2, r3
 8011b32:	e020      	b.n	8011b76 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b3c:	1ad3      	subs	r3, r2, r3
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	dd03      	ble.n	8011b4a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2200      	movs	r2, #0
 8011b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011b48:	e014      	b.n	8011b74 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b5c:	d306      	bcc.n	8011b6c <tcp_update_rcv_ann_wnd+0x90>
 8011b5e:	4b08      	ldr	r3, [pc, #32]	; (8011b80 <tcp_update_rcv_ann_wnd+0xa4>)
 8011b60:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011b64:	4909      	ldr	r1, [pc, #36]	; (8011b8c <tcp_update_rcv_ann_wnd+0xb0>)
 8011b66:	4808      	ldr	r0, [pc, #32]	; (8011b88 <tcp_update_rcv_ann_wnd+0xac>)
 8011b68:	f00a fcd4 	bl	801c514 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	b29a      	uxth	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011b74:	2300      	movs	r3, #0
  }
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3710      	adds	r7, #16
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	0801f2d8 	.word	0x0801f2d8
 8011b84:	0801f534 	.word	0x0801f534
 8011b88:	0801f31c 	.word	0x0801f31c
 8011b8c:	0801f558 	.word	0x0801f558

08011b90 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	460b      	mov	r3, r1
 8011b9a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d107      	bne.n	8011bb2 <tcp_recved+0x22>
 8011ba2:	4b1f      	ldr	r3, [pc, #124]	; (8011c20 <tcp_recved+0x90>)
 8011ba4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011ba8:	491e      	ldr	r1, [pc, #120]	; (8011c24 <tcp_recved+0x94>)
 8011baa:	481f      	ldr	r0, [pc, #124]	; (8011c28 <tcp_recved+0x98>)
 8011bac:	f00a fcb2 	bl	801c514 <iprintf>
 8011bb0:	e032      	b.n	8011c18 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	7d1b      	ldrb	r3, [r3, #20]
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d106      	bne.n	8011bc8 <tcp_recved+0x38>
 8011bba:	4b19      	ldr	r3, [pc, #100]	; (8011c20 <tcp_recved+0x90>)
 8011bbc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011bc0:	491a      	ldr	r1, [pc, #104]	; (8011c2c <tcp_recved+0x9c>)
 8011bc2:	4819      	ldr	r0, [pc, #100]	; (8011c28 <tcp_recved+0x98>)
 8011bc4:	f00a fca6 	bl	801c514 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011bcc:	887b      	ldrh	r3, [r7, #2]
 8011bce:	4413      	add	r3, r2
 8011bd0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011bd2:	89fb      	ldrh	r3, [r7, #14]
 8011bd4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011bd8:	d804      	bhi.n	8011be4 <tcp_recved+0x54>
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011bde:	89fa      	ldrh	r2, [r7, #14]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d204      	bcs.n	8011bee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011bea:	851a      	strh	r2, [r3, #40]	; 0x28
 8011bec:	e002      	b.n	8011bf4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	89fa      	ldrh	r2, [r7, #14]
 8011bf2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f7ff ff71 	bl	8011adc <tcp_update_rcv_ann_wnd>
 8011bfa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011c02:	d309      	bcc.n	8011c18 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	8b5b      	ldrh	r3, [r3, #26]
 8011c08:	f043 0302 	orr.w	r3, r3, #2
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f003 fe42 	bl	801589c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	0801f2d8 	.word	0x0801f2d8
 8011c24:	0801f574 	.word	0x0801f574
 8011c28:	0801f31c 	.word	0x0801f31c
 8011c2c:	0801f58c 	.word	0x0801f58c

08011c30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011c30:	b5b0      	push	{r4, r5, r7, lr}
 8011c32:	b090      	sub	sp, #64	; 0x40
 8011c34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011c36:	2300      	movs	r3, #0
 8011c38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011c3c:	4b94      	ldr	r3, [pc, #592]	; (8011e90 <tcp_slowtmr+0x260>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	3301      	adds	r3, #1
 8011c42:	4a93      	ldr	r2, [pc, #588]	; (8011e90 <tcp_slowtmr+0x260>)
 8011c44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011c46:	4b93      	ldr	r3, [pc, #588]	; (8011e94 <tcp_slowtmr+0x264>)
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	3301      	adds	r3, #1
 8011c4c:	b2da      	uxtb	r2, r3
 8011c4e:	4b91      	ldr	r3, [pc, #580]	; (8011e94 <tcp_slowtmr+0x264>)
 8011c50:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011c52:	2300      	movs	r3, #0
 8011c54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011c56:	4b90      	ldr	r3, [pc, #576]	; (8011e98 <tcp_slowtmr+0x268>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011c5c:	e29f      	b.n	801219e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c60:	7d1b      	ldrb	r3, [r3, #20]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d106      	bne.n	8011c74 <tcp_slowtmr+0x44>
 8011c66:	4b8d      	ldr	r3, [pc, #564]	; (8011e9c <tcp_slowtmr+0x26c>)
 8011c68:	f240 42be 	movw	r2, #1214	; 0x4be
 8011c6c:	498c      	ldr	r1, [pc, #560]	; (8011ea0 <tcp_slowtmr+0x270>)
 8011c6e:	488d      	ldr	r0, [pc, #564]	; (8011ea4 <tcp_slowtmr+0x274>)
 8011c70:	f00a fc50 	bl	801c514 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c76:	7d1b      	ldrb	r3, [r3, #20]
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d106      	bne.n	8011c8a <tcp_slowtmr+0x5a>
 8011c7c:	4b87      	ldr	r3, [pc, #540]	; (8011e9c <tcp_slowtmr+0x26c>)
 8011c7e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011c82:	4989      	ldr	r1, [pc, #548]	; (8011ea8 <tcp_slowtmr+0x278>)
 8011c84:	4887      	ldr	r0, [pc, #540]	; (8011ea4 <tcp_slowtmr+0x274>)
 8011c86:	f00a fc45 	bl	801c514 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8c:	7d1b      	ldrb	r3, [r3, #20]
 8011c8e:	2b0a      	cmp	r3, #10
 8011c90:	d106      	bne.n	8011ca0 <tcp_slowtmr+0x70>
 8011c92:	4b82      	ldr	r3, [pc, #520]	; (8011e9c <tcp_slowtmr+0x26c>)
 8011c94:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011c98:	4984      	ldr	r1, [pc, #528]	; (8011eac <tcp_slowtmr+0x27c>)
 8011c9a:	4882      	ldr	r0, [pc, #520]	; (8011ea4 <tcp_slowtmr+0x274>)
 8011c9c:	f00a fc3a 	bl	801c514 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca2:	7f9a      	ldrb	r2, [r3, #30]
 8011ca4:	4b7b      	ldr	r3, [pc, #492]	; (8011e94 <tcp_slowtmr+0x264>)
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d105      	bne.n	8011cb8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011cb6:	e272      	b.n	801219e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011cb8:	4b76      	ldr	r3, [pc, #472]	; (8011e94 <tcp_slowtmr+0x264>)
 8011cba:	781a      	ldrb	r2, [r3, #0]
 8011cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cbe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cce:	7d1b      	ldrb	r3, [r3, #20]
 8011cd0:	2b02      	cmp	r3, #2
 8011cd2:	d10a      	bne.n	8011cea <tcp_slowtmr+0xba>
 8011cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011cda:	2b05      	cmp	r3, #5
 8011cdc:	d905      	bls.n	8011cea <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ce8:	e11e      	b.n	8011f28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011cf0:	2b0b      	cmp	r3, #11
 8011cf2:	d905      	bls.n	8011d00 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011cfe:	e113      	b.n	8011f28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d075      	beq.n	8011df6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d006      	beq.n	8011d20 <tcp_slowtmr+0xf0>
 8011d12:	4b62      	ldr	r3, [pc, #392]	; (8011e9c <tcp_slowtmr+0x26c>)
 8011d14:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011d18:	4965      	ldr	r1, [pc, #404]	; (8011eb0 <tcp_slowtmr+0x280>)
 8011d1a:	4862      	ldr	r0, [pc, #392]	; (8011ea4 <tcp_slowtmr+0x274>)
 8011d1c:	f00a fbfa 	bl	801c514 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d106      	bne.n	8011d36 <tcp_slowtmr+0x106>
 8011d28:	4b5c      	ldr	r3, [pc, #368]	; (8011e9c <tcp_slowtmr+0x26c>)
 8011d2a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011d2e:	4961      	ldr	r1, [pc, #388]	; (8011eb4 <tcp_slowtmr+0x284>)
 8011d30:	485c      	ldr	r0, [pc, #368]	; (8011ea4 <tcp_slowtmr+0x274>)
 8011d32:	f00a fbef 	bl	801c514 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d3c:	2b0b      	cmp	r3, #11
 8011d3e:	d905      	bls.n	8011d4c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d44:	3301      	adds	r3, #1
 8011d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011d4a:	e0ed      	b.n	8011f28 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d52:	3b01      	subs	r3, #1
 8011d54:	4a58      	ldr	r2, [pc, #352]	; (8011eb8 <tcp_slowtmr+0x288>)
 8011d56:	5cd3      	ldrb	r3, [r2, r3]
 8011d58:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d60:	7c7a      	ldrb	r2, [r7, #17]
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d907      	bls.n	8011d76 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011d7c:	7c7a      	ldrb	r2, [r7, #17]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	f200 80d2 	bhi.w	8011f28 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011d84:	2301      	movs	r3, #1
 8011d86:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d108      	bne.n	8011da4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d94:	f004 fc2a 	bl	80165ec <tcp_zero_window_probe>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d014      	beq.n	8011dc8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011d9e:	2300      	movs	r3, #0
 8011da0:	623b      	str	r3, [r7, #32]
 8011da2:	e011      	b.n	8011dc8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011daa:	4619      	mov	r1, r3
 8011dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dae:	f003 faef 	bl	8015390 <tcp_split_unsent_seg>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d107      	bne.n	8011dc8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011db8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011dba:	f003 fd6f 	bl	801589c <tcp_output>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d101      	bne.n	8011dc8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011dc8:	6a3b      	ldr	r3, [r7, #32]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	f000 80ac 	beq.w	8011f28 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011dde:	2b06      	cmp	r3, #6
 8011de0:	f200 80a2 	bhi.w	8011f28 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011dea:	3301      	adds	r3, #1
 8011dec:	b2da      	uxtb	r2, r3
 8011dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011df4:	e098      	b.n	8011f28 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011df8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	db0f      	blt.n	8011e20 <tcp_slowtmr+0x1f0>
 8011e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011e06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d008      	beq.n	8011e20 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	3301      	adds	r3, #1
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	b21a      	sxth	r2, r3
 8011e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e22:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e28:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	db7b      	blt.n	8011f28 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011e32:	f004 f827 	bl	8015e84 <tcp_rexmit_rto_prepare>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d007      	beq.n	8011e4c <tcp_slowtmr+0x21c>
 8011e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d171      	bne.n	8011f28 <tcp_slowtmr+0x2f8>
 8011e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d06d      	beq.n	8011f28 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4e:	7d1b      	ldrb	r3, [r3, #20]
 8011e50:	2b02      	cmp	r3, #2
 8011e52:	d03a      	beq.n	8011eca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e5a:	2b0c      	cmp	r3, #12
 8011e5c:	bf28      	it	cs
 8011e5e:	230c      	movcs	r3, #12
 8011e60:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011e68:	10db      	asrs	r3, r3, #3
 8011e6a:	b21b      	sxth	r3, r3
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011e74:	4413      	add	r3, r2
 8011e76:	7efa      	ldrb	r2, [r7, #27]
 8011e78:	4910      	ldr	r1, [pc, #64]	; (8011ebc <tcp_slowtmr+0x28c>)
 8011e7a:	5c8a      	ldrb	r2, [r1, r2]
 8011e7c:	4093      	lsls	r3, r2
 8011e7e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011e86:	4293      	cmp	r3, r2
 8011e88:	dc1a      	bgt.n	8011ec0 <tcp_slowtmr+0x290>
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	b21a      	sxth	r2, r3
 8011e8e:	e019      	b.n	8011ec4 <tcp_slowtmr+0x294>
 8011e90:	2000c5d8 	.word	0x2000c5d8
 8011e94:	2000c5ee 	.word	0x2000c5ee
 8011e98:	2000c5e4 	.word	0x2000c5e4
 8011e9c:	0801f2d8 	.word	0x0801f2d8
 8011ea0:	0801f61c 	.word	0x0801f61c
 8011ea4:	0801f31c 	.word	0x0801f31c
 8011ea8:	0801f648 	.word	0x0801f648
 8011eac:	0801f674 	.word	0x0801f674
 8011eb0:	0801f6a4 	.word	0x0801f6a4
 8011eb4:	0801f6d8 	.word	0x0801f6d8
 8011eb8:	080217ec 	.word	0x080217ec
 8011ebc:	080217dc 	.word	0x080217dc
 8011ec0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ecc:	2200      	movs	r2, #0
 8011ece:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011edc:	4293      	cmp	r3, r2
 8011ede:	bf28      	it	cs
 8011ee0:	4613      	movcs	r3, r2
 8011ee2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011ee4:	8a7b      	ldrh	r3, [r7, #18]
 8011ee6:	085b      	lsrs	r3, r3, #1
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011efa:	005b      	lsls	r3, r3, #1
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d206      	bcs.n	8011f10 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f06:	005b      	lsls	r3, r3, #1
 8011f08:	b29a      	uxth	r2, r3
 8011f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f12:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f24:	f004 f81e 	bl	8015f64 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2a:	7d1b      	ldrb	r3, [r3, #20]
 8011f2c:	2b06      	cmp	r3, #6
 8011f2e:	d111      	bne.n	8011f54 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f32:	8b5b      	ldrh	r3, [r3, #26]
 8011f34:	f003 0310 	and.w	r3, r3, #16
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d00b      	beq.n	8011f54 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f3c:	4b9d      	ldr	r3, [pc, #628]	; (80121b4 <tcp_slowtmr+0x584>)
 8011f3e:	681a      	ldr	r2, [r3, #0]
 8011f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f42:	6a1b      	ldr	r3, [r3, #32]
 8011f44:	1ad3      	subs	r3, r2, r3
 8011f46:	2b28      	cmp	r3, #40	; 0x28
 8011f48:	d904      	bls.n	8011f54 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f4e:	3301      	adds	r3, #1
 8011f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f56:	7a5b      	ldrb	r3, [r3, #9]
 8011f58:	f003 0308 	and.w	r3, r3, #8
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d04c      	beq.n	8011ffa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f62:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011f64:	2b04      	cmp	r3, #4
 8011f66:	d003      	beq.n	8011f70 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011f6c:	2b07      	cmp	r3, #7
 8011f6e:	d144      	bne.n	8011ffa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f70:	4b90      	ldr	r3, [pc, #576]	; (80121b4 <tcp_slowtmr+0x584>)
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f76:	6a1b      	ldr	r3, [r3, #32]
 8011f78:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011f80:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011f84:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011f88:	498b      	ldr	r1, [pc, #556]	; (80121b8 <tcp_slowtmr+0x588>)
 8011f8a:	fba1 1303 	umull	r1, r3, r1, r3
 8011f8e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d90a      	bls.n	8011faa <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f98:	3301      	adds	r3, #1
 8011f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011f9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011fa8:	e027      	b.n	8011ffa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011faa:	4b82      	ldr	r3, [pc, #520]	; (80121b4 <tcp_slowtmr+0x584>)
 8011fac:	681a      	ldr	r2, [r3, #0]
 8011fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb0:	6a1b      	ldr	r3, [r3, #32]
 8011fb2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	4b7e      	ldr	r3, [pc, #504]	; (80121bc <tcp_slowtmr+0x58c>)
 8011fc4:	fb00 f303 	mul.w	r3, r0, r3
 8011fc8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011fca:	497b      	ldr	r1, [pc, #492]	; (80121b8 <tcp_slowtmr+0x588>)
 8011fcc:	fba1 1303 	umull	r1, r3, r1, r3
 8011fd0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d911      	bls.n	8011ffa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011fd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fd8:	f004 fac8 	bl	801656c <tcp_keepalive>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011fe2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d107      	bne.n	8011ffa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011ff0:	3301      	adds	r3, #1
 8011ff2:	b2da      	uxtb	r2, r3
 8011ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d011      	beq.n	8012026 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012002:	4b6c      	ldr	r3, [pc, #432]	; (80121b4 <tcp_slowtmr+0x584>)
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012008:	6a1b      	ldr	r3, [r3, #32]
 801200a:	1ad2      	subs	r2, r2, r3
 801200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012012:	4619      	mov	r1, r3
 8012014:	460b      	mov	r3, r1
 8012016:	005b      	lsls	r3, r3, #1
 8012018:	440b      	add	r3, r1
 801201a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801201c:	429a      	cmp	r2, r3
 801201e:	d302      	bcc.n	8012026 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012022:	f000 fddb 	bl	8012bdc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012028:	7d1b      	ldrb	r3, [r3, #20]
 801202a:	2b03      	cmp	r3, #3
 801202c:	d10b      	bne.n	8012046 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801202e:	4b61      	ldr	r3, [pc, #388]	; (80121b4 <tcp_slowtmr+0x584>)
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012034:	6a1b      	ldr	r3, [r3, #32]
 8012036:	1ad3      	subs	r3, r2, r3
 8012038:	2b28      	cmp	r3, #40	; 0x28
 801203a:	d904      	bls.n	8012046 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012040:	3301      	adds	r3, #1
 8012042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012048:	7d1b      	ldrb	r3, [r3, #20]
 801204a:	2b09      	cmp	r3, #9
 801204c:	d10b      	bne.n	8012066 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801204e:	4b59      	ldr	r3, [pc, #356]	; (80121b4 <tcp_slowtmr+0x584>)
 8012050:	681a      	ldr	r2, [r3, #0]
 8012052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012054:	6a1b      	ldr	r3, [r3, #32]
 8012056:	1ad3      	subs	r3, r2, r3
 8012058:	2bf0      	cmp	r3, #240	; 0xf0
 801205a:	d904      	bls.n	8012066 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801205c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012060:	3301      	adds	r3, #1
 8012062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801206a:	2b00      	cmp	r3, #0
 801206c:	d060      	beq.n	8012130 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012074:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012078:	f000 fbfc 	bl	8012874 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207e:	2b00      	cmp	r3, #0
 8012080:	d010      	beq.n	80120a4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012082:	4b4f      	ldr	r3, [pc, #316]	; (80121c0 <tcp_slowtmr+0x590>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012088:	429a      	cmp	r2, r3
 801208a:	d106      	bne.n	801209a <tcp_slowtmr+0x46a>
 801208c:	4b4d      	ldr	r3, [pc, #308]	; (80121c4 <tcp_slowtmr+0x594>)
 801208e:	f240 526d 	movw	r2, #1389	; 0x56d
 8012092:	494d      	ldr	r1, [pc, #308]	; (80121c8 <tcp_slowtmr+0x598>)
 8012094:	484d      	ldr	r0, [pc, #308]	; (80121cc <tcp_slowtmr+0x59c>)
 8012096:	f00a fa3d 	bl	801c514 <iprintf>
        prev->next = pcb->next;
 801209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209c:	68da      	ldr	r2, [r3, #12]
 801209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a0:	60da      	str	r2, [r3, #12]
 80120a2:	e00f      	b.n	80120c4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80120a4:	4b46      	ldr	r3, [pc, #280]	; (80121c0 <tcp_slowtmr+0x590>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d006      	beq.n	80120bc <tcp_slowtmr+0x48c>
 80120ae:	4b45      	ldr	r3, [pc, #276]	; (80121c4 <tcp_slowtmr+0x594>)
 80120b0:	f240 5271 	movw	r2, #1393	; 0x571
 80120b4:	4946      	ldr	r1, [pc, #280]	; (80121d0 <tcp_slowtmr+0x5a0>)
 80120b6:	4845      	ldr	r0, [pc, #276]	; (80121cc <tcp_slowtmr+0x59c>)
 80120b8:	f00a fa2c 	bl	801c514 <iprintf>
        tcp_active_pcbs = pcb->next;
 80120bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	4a3f      	ldr	r2, [pc, #252]	; (80121c0 <tcp_slowtmr+0x590>)
 80120c2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80120c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d013      	beq.n	80120f4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80120cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80120d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80120d4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80120d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d8:	3304      	adds	r3, #4
 80120da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120dc:	8ad2      	ldrh	r2, [r2, #22]
 80120de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120e0:	8b09      	ldrh	r1, [r1, #24]
 80120e2:	9102      	str	r1, [sp, #8]
 80120e4:	9201      	str	r2, [sp, #4]
 80120e6:	9300      	str	r3, [sp, #0]
 80120e8:	462b      	mov	r3, r5
 80120ea:	4622      	mov	r2, r4
 80120ec:	4601      	mov	r1, r0
 80120ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120f0:	f004 f988 	bl	8016404 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80120f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f6:	691b      	ldr	r3, [r3, #16]
 80120f8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80120fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fc:	7d1b      	ldrb	r3, [r3, #20]
 80120fe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012102:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012106:	68db      	ldr	r3, [r3, #12]
 8012108:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801210a:	6838      	ldr	r0, [r7, #0]
 801210c:	f7ff f9f2 	bl	80114f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012110:	4b30      	ldr	r3, [pc, #192]	; (80121d4 <tcp_slowtmr+0x5a4>)
 8012112:	2200      	movs	r2, #0
 8012114:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d004      	beq.n	8012126 <tcp_slowtmr+0x4f6>
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f06f 010c 	mvn.w	r1, #12
 8012122:	68b8      	ldr	r0, [r7, #8]
 8012124:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012126:	4b2b      	ldr	r3, [pc, #172]	; (80121d4 <tcp_slowtmr+0x5a4>)
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d037      	beq.n	801219e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801212e:	e590      	b.n	8011c52 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012132:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	68db      	ldr	r3, [r3, #12]
 8012138:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801213c:	7f1b      	ldrb	r3, [r3, #28]
 801213e:	3301      	adds	r3, #1
 8012140:	b2da      	uxtb	r2, r3
 8012142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012144:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012148:	7f1a      	ldrb	r2, [r3, #28]
 801214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214c:	7f5b      	ldrb	r3, [r3, #29]
 801214e:	429a      	cmp	r2, r3
 8012150:	d325      	bcc.n	801219e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8012152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012154:	2200      	movs	r2, #0
 8012156:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012158:	4b1e      	ldr	r3, [pc, #120]	; (80121d4 <tcp_slowtmr+0x5a4>)
 801215a:	2200      	movs	r2, #0
 801215c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012164:	2b00      	cmp	r3, #0
 8012166:	d00b      	beq.n	8012180 <tcp_slowtmr+0x550>
 8012168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801216a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801216e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012170:	6912      	ldr	r2, [r2, #16]
 8012172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012174:	4610      	mov	r0, r2
 8012176:	4798      	blx	r3
 8012178:	4603      	mov	r3, r0
 801217a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801217e:	e002      	b.n	8012186 <tcp_slowtmr+0x556>
 8012180:	2300      	movs	r3, #0
 8012182:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012186:	4b13      	ldr	r3, [pc, #76]	; (80121d4 <tcp_slowtmr+0x5a4>)
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d000      	beq.n	8012190 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801218e:	e560      	b.n	8011c52 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012190:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012194:	2b00      	cmp	r3, #0
 8012196:	d102      	bne.n	801219e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8012198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801219a:	f003 fb7f 	bl	801589c <tcp_output>
  while (pcb != NULL) {
 801219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f47f ad5c 	bne.w	8011c5e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80121a6:	2300      	movs	r3, #0
 80121a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80121aa:	4b0b      	ldr	r3, [pc, #44]	; (80121d8 <tcp_slowtmr+0x5a8>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80121b0:	e067      	b.n	8012282 <tcp_slowtmr+0x652>
 80121b2:	bf00      	nop
 80121b4:	2000c5d8 	.word	0x2000c5d8
 80121b8:	10624dd3 	.word	0x10624dd3
 80121bc:	000124f8 	.word	0x000124f8
 80121c0:	2000c5e4 	.word	0x2000c5e4
 80121c4:	0801f2d8 	.word	0x0801f2d8
 80121c8:	0801f710 	.word	0x0801f710
 80121cc:	0801f31c 	.word	0x0801f31c
 80121d0:	0801f73c 	.word	0x0801f73c
 80121d4:	2000c5ec 	.word	0x2000c5ec
 80121d8:	2000c5e8 	.word	0x2000c5e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80121dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121de:	7d1b      	ldrb	r3, [r3, #20]
 80121e0:	2b0a      	cmp	r3, #10
 80121e2:	d006      	beq.n	80121f2 <tcp_slowtmr+0x5c2>
 80121e4:	4b2b      	ldr	r3, [pc, #172]	; (8012294 <tcp_slowtmr+0x664>)
 80121e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80121ea:	492b      	ldr	r1, [pc, #172]	; (8012298 <tcp_slowtmr+0x668>)
 80121ec:	482b      	ldr	r0, [pc, #172]	; (801229c <tcp_slowtmr+0x66c>)
 80121ee:	f00a f991 	bl	801c514 <iprintf>
    pcb_remove = 0;
 80121f2:	2300      	movs	r3, #0
 80121f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80121f8:	4b29      	ldr	r3, [pc, #164]	; (80122a0 <tcp_slowtmr+0x670>)
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fe:	6a1b      	ldr	r3, [r3, #32]
 8012200:	1ad3      	subs	r3, r2, r3
 8012202:	2bf0      	cmp	r3, #240	; 0xf0
 8012204:	d904      	bls.n	8012210 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801220a:	3301      	adds	r3, #1
 801220c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012214:	2b00      	cmp	r3, #0
 8012216:	d02f      	beq.n	8012278 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801221a:	f000 fb2b 	bl	8012874 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012220:	2b00      	cmp	r3, #0
 8012222:	d010      	beq.n	8012246 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012224:	4b1f      	ldr	r3, [pc, #124]	; (80122a4 <tcp_slowtmr+0x674>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801222a:	429a      	cmp	r2, r3
 801222c:	d106      	bne.n	801223c <tcp_slowtmr+0x60c>
 801222e:	4b19      	ldr	r3, [pc, #100]	; (8012294 <tcp_slowtmr+0x664>)
 8012230:	f240 52af 	movw	r2, #1455	; 0x5af
 8012234:	491c      	ldr	r1, [pc, #112]	; (80122a8 <tcp_slowtmr+0x678>)
 8012236:	4819      	ldr	r0, [pc, #100]	; (801229c <tcp_slowtmr+0x66c>)
 8012238:	f00a f96c 	bl	801c514 <iprintf>
        prev->next = pcb->next;
 801223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223e:	68da      	ldr	r2, [r3, #12]
 8012240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012242:	60da      	str	r2, [r3, #12]
 8012244:	e00f      	b.n	8012266 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012246:	4b17      	ldr	r3, [pc, #92]	; (80122a4 <tcp_slowtmr+0x674>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801224c:	429a      	cmp	r2, r3
 801224e:	d006      	beq.n	801225e <tcp_slowtmr+0x62e>
 8012250:	4b10      	ldr	r3, [pc, #64]	; (8012294 <tcp_slowtmr+0x664>)
 8012252:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012256:	4915      	ldr	r1, [pc, #84]	; (80122ac <tcp_slowtmr+0x67c>)
 8012258:	4810      	ldr	r0, [pc, #64]	; (801229c <tcp_slowtmr+0x66c>)
 801225a:	f00a f95b 	bl	801c514 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	4a10      	ldr	r2, [pc, #64]	; (80122a4 <tcp_slowtmr+0x674>)
 8012264:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012268:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012270:	69f8      	ldr	r0, [r7, #28]
 8012272:	f7ff f93f 	bl	80114f4 <tcp_free>
 8012276:	e004      	b.n	8012282 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012284:	2b00      	cmp	r3, #0
 8012286:	d1a9      	bne.n	80121dc <tcp_slowtmr+0x5ac>
    }
  }
}
 8012288:	bf00      	nop
 801228a:	bf00      	nop
 801228c:	3730      	adds	r7, #48	; 0x30
 801228e:	46bd      	mov	sp, r7
 8012290:	bdb0      	pop	{r4, r5, r7, pc}
 8012292:	bf00      	nop
 8012294:	0801f2d8 	.word	0x0801f2d8
 8012298:	0801f768 	.word	0x0801f768
 801229c:	0801f31c 	.word	0x0801f31c
 80122a0:	2000c5d8 	.word	0x2000c5d8
 80122a4:	2000c5e8 	.word	0x2000c5e8
 80122a8:	0801f798 	.word	0x0801f798
 80122ac:	0801f7c0 	.word	0x0801f7c0

080122b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80122b6:	4b2d      	ldr	r3, [pc, #180]	; (801236c <tcp_fasttmr+0xbc>)
 80122b8:	781b      	ldrb	r3, [r3, #0]
 80122ba:	3301      	adds	r3, #1
 80122bc:	b2da      	uxtb	r2, r3
 80122be:	4b2b      	ldr	r3, [pc, #172]	; (801236c <tcp_fasttmr+0xbc>)
 80122c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80122c2:	4b2b      	ldr	r3, [pc, #172]	; (8012370 <tcp_fasttmr+0xc0>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80122c8:	e048      	b.n	801235c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	7f9a      	ldrb	r2, [r3, #30]
 80122ce:	4b27      	ldr	r3, [pc, #156]	; (801236c <tcp_fasttmr+0xbc>)
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d03f      	beq.n	8012356 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80122d6:	4b25      	ldr	r3, [pc, #148]	; (801236c <tcp_fasttmr+0xbc>)
 80122d8:	781a      	ldrb	r2, [r3, #0]
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	8b5b      	ldrh	r3, [r3, #26]
 80122e2:	f003 0301 	and.w	r3, r3, #1
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d010      	beq.n	801230c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	8b5b      	ldrh	r3, [r3, #26]
 80122ee:	f043 0302 	orr.w	r3, r3, #2
 80122f2:	b29a      	uxth	r2, r3
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f003 facf 	bl	801589c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	8b5b      	ldrh	r3, [r3, #26]
 8012302:	f023 0303 	bic.w	r3, r3, #3
 8012306:	b29a      	uxth	r2, r3
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	8b5b      	ldrh	r3, [r3, #26]
 8012310:	f003 0308 	and.w	r3, r3, #8
 8012314:	2b00      	cmp	r3, #0
 8012316:	d009      	beq.n	801232c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	8b5b      	ldrh	r3, [r3, #26]
 801231c:	f023 0308 	bic.w	r3, r3, #8
 8012320:	b29a      	uxth	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7ff fa78 	bl	801181c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00a      	beq.n	8012350 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801233a:	4b0e      	ldr	r3, [pc, #56]	; (8012374 <tcp_fasttmr+0xc4>)
 801233c:	2200      	movs	r2, #0
 801233e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f000 f819 	bl	8012378 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012346:	4b0b      	ldr	r3, [pc, #44]	; (8012374 <tcp_fasttmr+0xc4>)
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d000      	beq.n	8012350 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801234e:	e7b8      	b.n	80122c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	607b      	str	r3, [r7, #4]
 8012354:	e002      	b.n	801235c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d1b3      	bne.n	80122ca <tcp_fasttmr+0x1a>
    }
  }
}
 8012362:	bf00      	nop
 8012364:	bf00      	nop
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	2000c5ee 	.word	0x2000c5ee
 8012370:	2000c5e4 	.word	0x2000c5e4
 8012374:	2000c5ec 	.word	0x2000c5ec

08012378 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012378:	b590      	push	{r4, r7, lr}
 801237a:	b085      	sub	sp, #20
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d109      	bne.n	801239a <tcp_process_refused_data+0x22>
 8012386:	4b37      	ldr	r3, [pc, #220]	; (8012464 <tcp_process_refused_data+0xec>)
 8012388:	f240 6209 	movw	r2, #1545	; 0x609
 801238c:	4936      	ldr	r1, [pc, #216]	; (8012468 <tcp_process_refused_data+0xf0>)
 801238e:	4837      	ldr	r0, [pc, #220]	; (801246c <tcp_process_refused_data+0xf4>)
 8012390:	f00a f8c0 	bl	801c514 <iprintf>
 8012394:	f06f 030f 	mvn.w	r3, #15
 8012398:	e060      	b.n	801245c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801239e:	7b5b      	ldrb	r3, [r3, #13]
 80123a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80123a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2200      	movs	r2, #0
 80123ac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d00b      	beq.n	80123d0 <tcp_process_refused_data+0x58>
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6918      	ldr	r0, [r3, #16]
 80123c2:	2300      	movs	r3, #0
 80123c4:	68ba      	ldr	r2, [r7, #8]
 80123c6:	6879      	ldr	r1, [r7, #4]
 80123c8:	47a0      	blx	r4
 80123ca:	4603      	mov	r3, r0
 80123cc:	73fb      	strb	r3, [r7, #15]
 80123ce:	e007      	b.n	80123e0 <tcp_process_refused_data+0x68>
 80123d0:	2300      	movs	r3, #0
 80123d2:	68ba      	ldr	r2, [r7, #8]
 80123d4:	6879      	ldr	r1, [r7, #4]
 80123d6:	2000      	movs	r0, #0
 80123d8:	f000 f8a4 	bl	8012524 <tcp_recv_null>
 80123dc:	4603      	mov	r3, r0
 80123de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80123e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d12a      	bne.n	801243e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80123e8:	7bbb      	ldrb	r3, [r7, #14]
 80123ea:	f003 0320 	and.w	r3, r3, #32
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d033      	beq.n	801245a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80123fa:	d005      	beq.n	8012408 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012400:	3301      	adds	r3, #1
 8012402:	b29a      	uxth	r2, r3
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801240e:	2b00      	cmp	r3, #0
 8012410:	d00b      	beq.n	801242a <tcp_process_refused_data+0xb2>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6918      	ldr	r0, [r3, #16]
 801241c:	2300      	movs	r3, #0
 801241e:	2200      	movs	r2, #0
 8012420:	6879      	ldr	r1, [r7, #4]
 8012422:	47a0      	blx	r4
 8012424:	4603      	mov	r3, r0
 8012426:	73fb      	strb	r3, [r7, #15]
 8012428:	e001      	b.n	801242e <tcp_process_refused_data+0xb6>
 801242a:	2300      	movs	r3, #0
 801242c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012432:	f113 0f0d 	cmn.w	r3, #13
 8012436:	d110      	bne.n	801245a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012438:	f06f 030c 	mvn.w	r3, #12
 801243c:	e00e      	b.n	801245c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801243e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012442:	f113 0f0d 	cmn.w	r3, #13
 8012446:	d102      	bne.n	801244e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012448:	f06f 030c 	mvn.w	r3, #12
 801244c:	e006      	b.n	801245c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	68ba      	ldr	r2, [r7, #8]
 8012452:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012454:	f06f 0304 	mvn.w	r3, #4
 8012458:	e000      	b.n	801245c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801245a:	2300      	movs	r3, #0
}
 801245c:	4618      	mov	r0, r3
 801245e:	3714      	adds	r7, #20
 8012460:	46bd      	mov	sp, r7
 8012462:	bd90      	pop	{r4, r7, pc}
 8012464:	0801f2d8 	.word	0x0801f2d8
 8012468:	0801f7e8 	.word	0x0801f7e8
 801246c:	0801f31c 	.word	0x0801f31c

08012470 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012478:	e007      	b.n	801248a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f000 f80a 	bl	801249a <tcp_seg_free>
    seg = next;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d1f4      	bne.n	801247a <tcp_segs_free+0xa>
  }
}
 8012490:	bf00      	nop
 8012492:	bf00      	nop
 8012494:	3710      	adds	r7, #16
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}

0801249a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801249a:	b580      	push	{r7, lr}
 801249c:	b082      	sub	sp, #8
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d00c      	beq.n	80124c2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d004      	beq.n	80124ba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7fe fd61 	bl	8010f7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80124ba:	6879      	ldr	r1, [r7, #4]
 80124bc:	2003      	movs	r0, #3
 80124be:	f7fd fead 	bl	801021c <memp_free>
  }
}
 80124c2:	bf00      	nop
 80124c4:	3708      	adds	r7, #8
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
	...

080124cc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d106      	bne.n	80124e8 <tcp_seg_copy+0x1c>
 80124da:	4b0f      	ldr	r3, [pc, #60]	; (8012518 <tcp_seg_copy+0x4c>)
 80124dc:	f240 6282 	movw	r2, #1666	; 0x682
 80124e0:	490e      	ldr	r1, [pc, #56]	; (801251c <tcp_seg_copy+0x50>)
 80124e2:	480f      	ldr	r0, [pc, #60]	; (8012520 <tcp_seg_copy+0x54>)
 80124e4:	f00a f816 	bl	801c514 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80124e8:	2003      	movs	r0, #3
 80124ea:	f7fd fe21 	bl	8010130 <memp_malloc>
 80124ee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d101      	bne.n	80124fa <tcp_seg_copy+0x2e>
    return NULL;
 80124f6:	2300      	movs	r3, #0
 80124f8:	e00a      	b.n	8012510 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80124fa:	2210      	movs	r2, #16
 80124fc:	6879      	ldr	r1, [r7, #4]
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f00a faa1 	bl	801ca46 <memcpy>
  pbuf_ref(cseg->p);
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	4618      	mov	r0, r3
 801250a:	f7fe fddd 	bl	80110c8 <pbuf_ref>
  return cseg;
 801250e:	68fb      	ldr	r3, [r7, #12]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}
 8012518:	0801f2d8 	.word	0x0801f2d8
 801251c:	0801f82c 	.word	0x0801f82c
 8012520:	0801f31c 	.word	0x0801f31c

08012524 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b084      	sub	sp, #16
 8012528:	af00      	add	r7, sp, #0
 801252a:	60f8      	str	r0, [r7, #12]
 801252c:	60b9      	str	r1, [r7, #8]
 801252e:	607a      	str	r2, [r7, #4]
 8012530:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d109      	bne.n	801254c <tcp_recv_null+0x28>
 8012538:	4b12      	ldr	r3, [pc, #72]	; (8012584 <tcp_recv_null+0x60>)
 801253a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801253e:	4912      	ldr	r1, [pc, #72]	; (8012588 <tcp_recv_null+0x64>)
 8012540:	4812      	ldr	r0, [pc, #72]	; (801258c <tcp_recv_null+0x68>)
 8012542:	f009 ffe7 	bl	801c514 <iprintf>
 8012546:	f06f 030f 	mvn.w	r3, #15
 801254a:	e016      	b.n	801257a <tcp_recv_null+0x56>

  if (p != NULL) {
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d009      	beq.n	8012566 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	891b      	ldrh	r3, [r3, #8]
 8012556:	4619      	mov	r1, r3
 8012558:	68b8      	ldr	r0, [r7, #8]
 801255a:	f7ff fb19 	bl	8011b90 <tcp_recved>
    pbuf_free(p);
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f7fe fd0c 	bl	8010f7c <pbuf_free>
 8012564:	e008      	b.n	8012578 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d104      	bne.n	8012578 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801256e:	68b8      	ldr	r0, [r7, #8]
 8012570:	f7ff f9be 	bl	80118f0 <tcp_close>
 8012574:	4603      	mov	r3, r0
 8012576:	e000      	b.n	801257a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012578:	2300      	movs	r3, #0
}
 801257a:	4618      	mov	r0, r3
 801257c:	3710      	adds	r7, #16
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
 8012582:	bf00      	nop
 8012584:	0801f2d8 	.word	0x0801f2d8
 8012588:	0801f848 	.word	0x0801f848
 801258c:	0801f31c 	.word	0x0801f31c

08012590 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b086      	sub	sp, #24
 8012594:	af00      	add	r7, sp, #0
 8012596:	4603      	mov	r3, r0
 8012598:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	db01      	blt.n	80125a6 <tcp_kill_prio+0x16>
 80125a2:	79fb      	ldrb	r3, [r7, #7]
 80125a4:	e000      	b.n	80125a8 <tcp_kill_prio+0x18>
 80125a6:	237f      	movs	r3, #127	; 0x7f
 80125a8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80125aa:	7afb      	ldrb	r3, [r7, #11]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d034      	beq.n	801261a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80125b0:	7afb      	ldrb	r3, [r7, #11]
 80125b2:	3b01      	subs	r3, #1
 80125b4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80125b6:	2300      	movs	r3, #0
 80125b8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80125ba:	2300      	movs	r3, #0
 80125bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80125be:	4b19      	ldr	r3, [pc, #100]	; (8012624 <tcp_kill_prio+0x94>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	617b      	str	r3, [r7, #20]
 80125c4:	e01f      	b.n	8012606 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	7d5b      	ldrb	r3, [r3, #21]
 80125ca:	7afa      	ldrb	r2, [r7, #11]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d80c      	bhi.n	80125ea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80125d4:	7afa      	ldrb	r2, [r7, #11]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d112      	bne.n	8012600 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80125da:	4b13      	ldr	r3, [pc, #76]	; (8012628 <tcp_kill_prio+0x98>)
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	6a1b      	ldr	r3, [r3, #32]
 80125e2:	1ad3      	subs	r3, r2, r3
 80125e4:	68fa      	ldr	r2, [r7, #12]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d80a      	bhi.n	8012600 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80125ea:	4b0f      	ldr	r3, [pc, #60]	; (8012628 <tcp_kill_prio+0x98>)
 80125ec:	681a      	ldr	r2, [r3, #0]
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	6a1b      	ldr	r3, [r3, #32]
 80125f2:	1ad3      	subs	r3, r2, r3
 80125f4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	7d5b      	ldrb	r3, [r3, #21]
 80125fe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	617b      	str	r3, [r7, #20]
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d1dc      	bne.n	80125c6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d004      	beq.n	801261c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012612:	6938      	ldr	r0, [r7, #16]
 8012614:	f7ff fa56 	bl	8011ac4 <tcp_abort>
 8012618:	e000      	b.n	801261c <tcp_kill_prio+0x8c>
    return;
 801261a:	bf00      	nop
  }
}
 801261c:	3718      	adds	r7, #24
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
 8012622:	bf00      	nop
 8012624:	2000c5e4 	.word	0x2000c5e4
 8012628:	2000c5d8 	.word	0x2000c5d8

0801262c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b086      	sub	sp, #24
 8012630:	af00      	add	r7, sp, #0
 8012632:	4603      	mov	r3, r0
 8012634:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012636:	79fb      	ldrb	r3, [r7, #7]
 8012638:	2b08      	cmp	r3, #8
 801263a:	d009      	beq.n	8012650 <tcp_kill_state+0x24>
 801263c:	79fb      	ldrb	r3, [r7, #7]
 801263e:	2b09      	cmp	r3, #9
 8012640:	d006      	beq.n	8012650 <tcp_kill_state+0x24>
 8012642:	4b1a      	ldr	r3, [pc, #104]	; (80126ac <tcp_kill_state+0x80>)
 8012644:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012648:	4919      	ldr	r1, [pc, #100]	; (80126b0 <tcp_kill_state+0x84>)
 801264a:	481a      	ldr	r0, [pc, #104]	; (80126b4 <tcp_kill_state+0x88>)
 801264c:	f009 ff62 	bl	801c514 <iprintf>

  inactivity = 0;
 8012650:	2300      	movs	r3, #0
 8012652:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012654:	2300      	movs	r3, #0
 8012656:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012658:	4b17      	ldr	r3, [pc, #92]	; (80126b8 <tcp_kill_state+0x8c>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	617b      	str	r3, [r7, #20]
 801265e:	e017      	b.n	8012690 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	7d1b      	ldrb	r3, [r3, #20]
 8012664:	79fa      	ldrb	r2, [r7, #7]
 8012666:	429a      	cmp	r2, r3
 8012668:	d10f      	bne.n	801268a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801266a:	4b14      	ldr	r3, [pc, #80]	; (80126bc <tcp_kill_state+0x90>)
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	697b      	ldr	r3, [r7, #20]
 8012670:	6a1b      	ldr	r3, [r3, #32]
 8012672:	1ad3      	subs	r3, r2, r3
 8012674:	68fa      	ldr	r2, [r7, #12]
 8012676:	429a      	cmp	r2, r3
 8012678:	d807      	bhi.n	801268a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801267a:	4b10      	ldr	r3, [pc, #64]	; (80126bc <tcp_kill_state+0x90>)
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	6a1b      	ldr	r3, [r3, #32]
 8012682:	1ad3      	subs	r3, r2, r3
 8012684:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	617b      	str	r3, [r7, #20]
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d1e4      	bne.n	8012660 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d003      	beq.n	80126a4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801269c:	2100      	movs	r1, #0
 801269e:	6938      	ldr	r0, [r7, #16]
 80126a0:	f7ff f952 	bl	8011948 <tcp_abandon>
  }
}
 80126a4:	bf00      	nop
 80126a6:	3718      	adds	r7, #24
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	0801f2d8 	.word	0x0801f2d8
 80126b0:	0801f864 	.word	0x0801f864
 80126b4:	0801f31c 	.word	0x0801f31c
 80126b8:	2000c5e4 	.word	0x2000c5e4
 80126bc:	2000c5d8 	.word	0x2000c5d8

080126c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b084      	sub	sp, #16
 80126c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80126c6:	2300      	movs	r3, #0
 80126c8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80126ca:	2300      	movs	r3, #0
 80126cc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80126ce:	4b12      	ldr	r3, [pc, #72]	; (8012718 <tcp_kill_timewait+0x58>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	60fb      	str	r3, [r7, #12]
 80126d4:	e012      	b.n	80126fc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80126d6:	4b11      	ldr	r3, [pc, #68]	; (801271c <tcp_kill_timewait+0x5c>)
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6a1b      	ldr	r3, [r3, #32]
 80126de:	1ad3      	subs	r3, r2, r3
 80126e0:	687a      	ldr	r2, [r7, #4]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d807      	bhi.n	80126f6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80126e6:	4b0d      	ldr	r3, [pc, #52]	; (801271c <tcp_kill_timewait+0x5c>)
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	6a1b      	ldr	r3, [r3, #32]
 80126ee:	1ad3      	subs	r3, r2, r3
 80126f0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	60fb      	str	r3, [r7, #12]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d1e9      	bne.n	80126d6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d002      	beq.n	801270e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012708:	68b8      	ldr	r0, [r7, #8]
 801270a:	f7ff f9db 	bl	8011ac4 <tcp_abort>
  }
}
 801270e:	bf00      	nop
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}
 8012716:	bf00      	nop
 8012718:	2000c5e8 	.word	0x2000c5e8
 801271c:	2000c5d8 	.word	0x2000c5d8

08012720 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b082      	sub	sp, #8
 8012724:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012726:	4b10      	ldr	r3, [pc, #64]	; (8012768 <tcp_handle_closepend+0x48>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801272c:	e014      	b.n	8012758 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	8b5b      	ldrh	r3, [r3, #26]
 8012738:	f003 0308 	and.w	r3, r3, #8
 801273c:	2b00      	cmp	r3, #0
 801273e:	d009      	beq.n	8012754 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	8b5b      	ldrh	r3, [r3, #26]
 8012744:	f023 0308 	bic.w	r3, r3, #8
 8012748:	b29a      	uxth	r2, r3
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7ff f864 	bl	801181c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d1e7      	bne.n	801272e <tcp_handle_closepend+0xe>
  }
}
 801275e:	bf00      	nop
 8012760:	bf00      	nop
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	2000c5e4 	.word	0x2000c5e4

0801276c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	4603      	mov	r3, r0
 8012774:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012776:	2001      	movs	r0, #1
 8012778:	f7fd fcda 	bl	8010130 <memp_malloc>
 801277c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d126      	bne.n	80127d2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012784:	f7ff ffcc 	bl	8012720 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012788:	f7ff ff9a 	bl	80126c0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801278c:	2001      	movs	r0, #1
 801278e:	f7fd fccf 	bl	8010130 <memp_malloc>
 8012792:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d11b      	bne.n	80127d2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801279a:	2009      	movs	r0, #9
 801279c:	f7ff ff46 	bl	801262c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80127a0:	2001      	movs	r0, #1
 80127a2:	f7fd fcc5 	bl	8010130 <memp_malloc>
 80127a6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d111      	bne.n	80127d2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80127ae:	2008      	movs	r0, #8
 80127b0:	f7ff ff3c 	bl	801262c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80127b4:	2001      	movs	r0, #1
 80127b6:	f7fd fcbb 	bl	8010130 <memp_malloc>
 80127ba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d107      	bne.n	80127d2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80127c2:	79fb      	ldrb	r3, [r7, #7]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7ff fee3 	bl	8012590 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80127ca:	2001      	movs	r0, #1
 80127cc:	f7fd fcb0 	bl	8010130 <memp_malloc>
 80127d0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d03f      	beq.n	8012858 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80127d8:	229c      	movs	r2, #156	; 0x9c
 80127da:	2100      	movs	r1, #0
 80127dc:	68f8      	ldr	r0, [r7, #12]
 80127de:	f00a f829 	bl	801c834 <memset>
    pcb->prio = prio;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	79fa      	ldrb	r2, [r7, #7]
 80127e6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80127ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80127f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	22ff      	movs	r2, #255	; 0xff
 8012806:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801280e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	2206      	movs	r2, #6
 8012814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2206      	movs	r2, #6
 801281c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012824:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	2201      	movs	r2, #1
 801282a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801282e:	4b0d      	ldr	r3, [pc, #52]	; (8012864 <tcp_alloc+0xf8>)
 8012830:	681a      	ldr	r2, [r3, #0]
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012836:	4b0c      	ldr	r3, [pc, #48]	; (8012868 <tcp_alloc+0xfc>)
 8012838:	781a      	ldrb	r2, [r3, #0]
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012844:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	4a08      	ldr	r2, [pc, #32]	; (801286c <tcp_alloc+0x100>)
 801284c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	4a07      	ldr	r2, [pc, #28]	; (8012870 <tcp_alloc+0x104>)
 8012854:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012858:	68fb      	ldr	r3, [r7, #12]
}
 801285a:	4618      	mov	r0, r3
 801285c:	3710      	adds	r7, #16
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	2000c5d8 	.word	0x2000c5d8
 8012868:	2000c5ee 	.word	0x2000c5ee
 801286c:	08012525 	.word	0x08012525
 8012870:	006ddd00 	.word	0x006ddd00

08012874 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d107      	bne.n	8012892 <tcp_pcb_purge+0x1e>
 8012882:	4b21      	ldr	r3, [pc, #132]	; (8012908 <tcp_pcb_purge+0x94>)
 8012884:	f640 0251 	movw	r2, #2129	; 0x851
 8012888:	4920      	ldr	r1, [pc, #128]	; (801290c <tcp_pcb_purge+0x98>)
 801288a:	4821      	ldr	r0, [pc, #132]	; (8012910 <tcp_pcb_purge+0x9c>)
 801288c:	f009 fe42 	bl	801c514 <iprintf>
 8012890:	e037      	b.n	8012902 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	7d1b      	ldrb	r3, [r3, #20]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d033      	beq.n	8012902 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801289e:	2b0a      	cmp	r3, #10
 80128a0:	d02f      	beq.n	8012902 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d02b      	beq.n	8012902 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d007      	beq.n	80128c2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7fe fb60 	bl	8010f7c <pbuf_free>
      pcb->refused_data = NULL;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2200      	movs	r2, #0
 80128c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d002      	beq.n	80128d0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f000 f986 	bl	8012bdc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128d6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128dc:	4618      	mov	r0, r3
 80128de:	f7ff fdc7 	bl	8012470 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7ff fdc2 	bl	8012470 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2200      	movs	r2, #0
 80128f0:	66da      	str	r2, [r3, #108]	; 0x6c
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2200      	movs	r2, #0
 80128fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	0801f2d8 	.word	0x0801f2d8
 801290c:	0801f924 	.word	0x0801f924
 8012910:	0801f31c 	.word	0x0801f31c

08012914 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d106      	bne.n	8012932 <tcp_pcb_remove+0x1e>
 8012924:	4b3e      	ldr	r3, [pc, #248]	; (8012a20 <tcp_pcb_remove+0x10c>)
 8012926:	f640 0283 	movw	r2, #2179	; 0x883
 801292a:	493e      	ldr	r1, [pc, #248]	; (8012a24 <tcp_pcb_remove+0x110>)
 801292c:	483e      	ldr	r0, [pc, #248]	; (8012a28 <tcp_pcb_remove+0x114>)
 801292e:	f009 fdf1 	bl	801c514 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d106      	bne.n	8012946 <tcp_pcb_remove+0x32>
 8012938:	4b39      	ldr	r3, [pc, #228]	; (8012a20 <tcp_pcb_remove+0x10c>)
 801293a:	f640 0284 	movw	r2, #2180	; 0x884
 801293e:	493b      	ldr	r1, [pc, #236]	; (8012a2c <tcp_pcb_remove+0x118>)
 8012940:	4839      	ldr	r0, [pc, #228]	; (8012a28 <tcp_pcb_remove+0x114>)
 8012942:	f009 fde7 	bl	801c514 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	683a      	ldr	r2, [r7, #0]
 801294c:	429a      	cmp	r2, r3
 801294e:	d105      	bne.n	801295c <tcp_pcb_remove+0x48>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	68da      	ldr	r2, [r3, #12]
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	601a      	str	r2, [r3, #0]
 801295a:	e013      	b.n	8012984 <tcp_pcb_remove+0x70>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	60fb      	str	r3, [r7, #12]
 8012962:	e00c      	b.n	801297e <tcp_pcb_remove+0x6a>
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	68db      	ldr	r3, [r3, #12]
 8012968:	683a      	ldr	r2, [r7, #0]
 801296a:	429a      	cmp	r2, r3
 801296c:	d104      	bne.n	8012978 <tcp_pcb_remove+0x64>
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	68da      	ldr	r2, [r3, #12]
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	60da      	str	r2, [r3, #12]
 8012976:	e005      	b.n	8012984 <tcp_pcb_remove+0x70>
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	68db      	ldr	r3, [r3, #12]
 801297c:	60fb      	str	r3, [r7, #12]
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d1ef      	bne.n	8012964 <tcp_pcb_remove+0x50>
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	2200      	movs	r2, #0
 8012988:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801298a:	6838      	ldr	r0, [r7, #0]
 801298c:	f7ff ff72 	bl	8012874 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	7d1b      	ldrb	r3, [r3, #20]
 8012994:	2b0a      	cmp	r3, #10
 8012996:	d013      	beq.n	80129c0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801299c:	2b01      	cmp	r3, #1
 801299e:	d00f      	beq.n	80129c0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	8b5b      	ldrh	r3, [r3, #26]
 80129a4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d009      	beq.n	80129c0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	8b5b      	ldrh	r3, [r3, #26]
 80129b0:	f043 0302 	orr.w	r3, r3, #2
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80129ba:	6838      	ldr	r0, [r7, #0]
 80129bc:	f002 ff6e 	bl	801589c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	7d1b      	ldrb	r3, [r3, #20]
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d020      	beq.n	8012a0a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d006      	beq.n	80129de <tcp_pcb_remove+0xca>
 80129d0:	4b13      	ldr	r3, [pc, #76]	; (8012a20 <tcp_pcb_remove+0x10c>)
 80129d2:	f640 0293 	movw	r2, #2195	; 0x893
 80129d6:	4916      	ldr	r1, [pc, #88]	; (8012a30 <tcp_pcb_remove+0x11c>)
 80129d8:	4813      	ldr	r0, [pc, #76]	; (8012a28 <tcp_pcb_remove+0x114>)
 80129da:	f009 fd9b 	bl	801c514 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d006      	beq.n	80129f4 <tcp_pcb_remove+0xe0>
 80129e6:	4b0e      	ldr	r3, [pc, #56]	; (8012a20 <tcp_pcb_remove+0x10c>)
 80129e8:	f640 0294 	movw	r2, #2196	; 0x894
 80129ec:	4911      	ldr	r1, [pc, #68]	; (8012a34 <tcp_pcb_remove+0x120>)
 80129ee:	480e      	ldr	r0, [pc, #56]	; (8012a28 <tcp_pcb_remove+0x114>)
 80129f0:	f009 fd90 	bl	801c514 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d006      	beq.n	8012a0a <tcp_pcb_remove+0xf6>
 80129fc:	4b08      	ldr	r3, [pc, #32]	; (8012a20 <tcp_pcb_remove+0x10c>)
 80129fe:	f640 0296 	movw	r2, #2198	; 0x896
 8012a02:	490d      	ldr	r1, [pc, #52]	; (8012a38 <tcp_pcb_remove+0x124>)
 8012a04:	4808      	ldr	r0, [pc, #32]	; (8012a28 <tcp_pcb_remove+0x114>)
 8012a06:	f009 fd85 	bl	801c514 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	2200      	movs	r2, #0
 8012a14:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012a16:	bf00      	nop
 8012a18:	3710      	adds	r7, #16
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	0801f2d8 	.word	0x0801f2d8
 8012a24:	0801f940 	.word	0x0801f940
 8012a28:	0801f31c 	.word	0x0801f31c
 8012a2c:	0801f95c 	.word	0x0801f95c
 8012a30:	0801f97c 	.word	0x0801f97c
 8012a34:	0801f994 	.word	0x0801f994
 8012a38:	0801f9b0 	.word	0x0801f9b0

08012a3c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d106      	bne.n	8012a58 <tcp_next_iss+0x1c>
 8012a4a:	4b0a      	ldr	r3, [pc, #40]	; (8012a74 <tcp_next_iss+0x38>)
 8012a4c:	f640 02af 	movw	r2, #2223	; 0x8af
 8012a50:	4909      	ldr	r1, [pc, #36]	; (8012a78 <tcp_next_iss+0x3c>)
 8012a52:	480a      	ldr	r0, [pc, #40]	; (8012a7c <tcp_next_iss+0x40>)
 8012a54:	f009 fd5e 	bl	801c514 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012a58:	4b09      	ldr	r3, [pc, #36]	; (8012a80 <tcp_next_iss+0x44>)
 8012a5a:	681a      	ldr	r2, [r3, #0]
 8012a5c:	4b09      	ldr	r3, [pc, #36]	; (8012a84 <tcp_next_iss+0x48>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	4413      	add	r3, r2
 8012a62:	4a07      	ldr	r2, [pc, #28]	; (8012a80 <tcp_next_iss+0x44>)
 8012a64:	6013      	str	r3, [r2, #0]
  return iss;
 8012a66:	4b06      	ldr	r3, [pc, #24]	; (8012a80 <tcp_next_iss+0x44>)
 8012a68:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3708      	adds	r7, #8
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}
 8012a72:	bf00      	nop
 8012a74:	0801f2d8 	.word	0x0801f2d8
 8012a78:	0801f9c8 	.word	0x0801f9c8
 8012a7c:	0801f31c 	.word	0x0801f31c
 8012a80:	2000002c 	.word	0x2000002c
 8012a84:	2000c5d8 	.word	0x2000c5d8

08012a88 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b086      	sub	sp, #24
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	4603      	mov	r3, r0
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
 8012a94:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d106      	bne.n	8012aaa <tcp_eff_send_mss_netif+0x22>
 8012a9c:	4b14      	ldr	r3, [pc, #80]	; (8012af0 <tcp_eff_send_mss_netif+0x68>)
 8012a9e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012aa2:	4914      	ldr	r1, [pc, #80]	; (8012af4 <tcp_eff_send_mss_netif+0x6c>)
 8012aa4:	4814      	ldr	r0, [pc, #80]	; (8012af8 <tcp_eff_send_mss_netif+0x70>)
 8012aa6:	f009 fd35 	bl	801c514 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d101      	bne.n	8012ab4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012ab0:	89fb      	ldrh	r3, [r7, #14]
 8012ab2:	e019      	b.n	8012ae8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ab8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012aba:	8afb      	ldrh	r3, [r7, #22]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d012      	beq.n	8012ae6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012ac0:	2328      	movs	r3, #40	; 0x28
 8012ac2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012ac4:	8afa      	ldrh	r2, [r7, #22]
 8012ac6:	8abb      	ldrh	r3, [r7, #20]
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d904      	bls.n	8012ad6 <tcp_eff_send_mss_netif+0x4e>
 8012acc:	8afa      	ldrh	r2, [r7, #22]
 8012ace:	8abb      	ldrh	r3, [r7, #20]
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	e000      	b.n	8012ad8 <tcp_eff_send_mss_netif+0x50>
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012ada:	8a7a      	ldrh	r2, [r7, #18]
 8012adc:	89fb      	ldrh	r3, [r7, #14]
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	bf28      	it	cs
 8012ae2:	4613      	movcs	r3, r2
 8012ae4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012ae6:	89fb      	ldrh	r3, [r7, #14]
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3718      	adds	r7, #24
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	0801f2d8 	.word	0x0801f2d8
 8012af4:	0801f9e4 	.word	0x0801f9e4
 8012af8:	0801f31c 	.word	0x0801f31c

08012afc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
 8012b04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d119      	bne.n	8012b44 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012b10:	4b10      	ldr	r3, [pc, #64]	; (8012b54 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012b12:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012b16:	4910      	ldr	r1, [pc, #64]	; (8012b58 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012b18:	4810      	ldr	r0, [pc, #64]	; (8012b5c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012b1a:	f009 fcfb 	bl	801c514 <iprintf>

  while (pcb != NULL) {
 8012b1e:	e011      	b.n	8012b44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d108      	bne.n	8012b3e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012b32:	68f8      	ldr	r0, [r7, #12]
 8012b34:	f7fe ffc6 	bl	8011ac4 <tcp_abort>
      pcb = next;
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	60fb      	str	r3, [r7, #12]
 8012b3c:	e002      	b.n	8012b44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d1ea      	bne.n	8012b20 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012b4a:	bf00      	nop
 8012b4c:	bf00      	nop
 8012b4e:	3710      	adds	r7, #16
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	0801f2d8 	.word	0x0801f2d8
 8012b58:	0801fa0c 	.word	0x0801fa0c
 8012b5c:	0801f31c 	.word	0x0801f31c

08012b60 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d02a      	beq.n	8012bc6 <tcp_netif_ip_addr_changed+0x66>
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d026      	beq.n	8012bc6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012b78:	4b15      	ldr	r3, [pc, #84]	; (8012bd0 <tcp_netif_ip_addr_changed+0x70>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f7ff ffbc 	bl	8012afc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012b84:	4b13      	ldr	r3, [pc, #76]	; (8012bd4 <tcp_netif_ip_addr_changed+0x74>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	4619      	mov	r1, r3
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f7ff ffb6 	bl	8012afc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d017      	beq.n	8012bc6 <tcp_netif_ip_addr_changed+0x66>
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d013      	beq.n	8012bc6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012b9e:	4b0e      	ldr	r3, [pc, #56]	; (8012bd8 <tcp_netif_ip_addr_changed+0x78>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	60fb      	str	r3, [r7, #12]
 8012ba4:	e00c      	b.n	8012bc0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d103      	bne.n	8012bba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	681a      	ldr	r2, [r3, #0]
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	60fb      	str	r3, [r7, #12]
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d1ef      	bne.n	8012ba6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012bc6:	bf00      	nop
 8012bc8:	3710      	adds	r7, #16
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	2000c5e4 	.word	0x2000c5e4
 8012bd4:	2000c5dc 	.word	0x2000c5dc
 8012bd8:	2000c5e0 	.word	0x2000c5e0

08012bdc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d007      	beq.n	8012bfc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7ff fc3d 	bl	8012470 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012bfc:	bf00      	nop
 8012bfe:	3708      	adds	r7, #8
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012c04:	b590      	push	{r4, r7, lr}
 8012c06:	b08d      	sub	sp, #52	; 0x34
 8012c08:	af04      	add	r7, sp, #16
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d105      	bne.n	8012c20 <tcp_input+0x1c>
 8012c14:	4b9b      	ldr	r3, [pc, #620]	; (8012e84 <tcp_input+0x280>)
 8012c16:	2283      	movs	r2, #131	; 0x83
 8012c18:	499b      	ldr	r1, [pc, #620]	; (8012e88 <tcp_input+0x284>)
 8012c1a:	489c      	ldr	r0, [pc, #624]	; (8012e8c <tcp_input+0x288>)
 8012c1c:	f009 fc7a 	bl	801c514 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	4a9a      	ldr	r2, [pc, #616]	; (8012e90 <tcp_input+0x28c>)
 8012c26:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	895b      	ldrh	r3, [r3, #10]
 8012c2c:	2b13      	cmp	r3, #19
 8012c2e:	f240 83d1 	bls.w	80133d4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012c32:	4b98      	ldr	r3, [pc, #608]	; (8012e94 <tcp_input+0x290>)
 8012c34:	695b      	ldr	r3, [r3, #20]
 8012c36:	4a97      	ldr	r2, [pc, #604]	; (8012e94 <tcp_input+0x290>)
 8012c38:	6812      	ldr	r2, [r2, #0]
 8012c3a:	4611      	mov	r1, r2
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f007 fdfd 	bl	801a83c <ip4_addr_isbroadcast_u32>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	f040 83c7 	bne.w	80133d8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012c4a:	4b92      	ldr	r3, [pc, #584]	; (8012e94 <tcp_input+0x290>)
 8012c4c:	695b      	ldr	r3, [r3, #20]
 8012c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012c52:	2be0      	cmp	r3, #224	; 0xe0
 8012c54:	f000 83c0 	beq.w	80133d8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012c58:	4b8d      	ldr	r3, [pc, #564]	; (8012e90 <tcp_input+0x28c>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	899b      	ldrh	r3, [r3, #12]
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7fc fd8d 	bl	800f780 <lwip_htons>
 8012c66:	4603      	mov	r3, r0
 8012c68:	0b1b      	lsrs	r3, r3, #12
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012c72:	7cbb      	ldrb	r3, [r7, #18]
 8012c74:	2b13      	cmp	r3, #19
 8012c76:	f240 83b1 	bls.w	80133dc <tcp_input+0x7d8>
 8012c7a:	7cbb      	ldrb	r3, [r7, #18]
 8012c7c:	b29a      	uxth	r2, r3
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	891b      	ldrh	r3, [r3, #8]
 8012c82:	429a      	cmp	r2, r3
 8012c84:	f200 83aa 	bhi.w	80133dc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012c88:	7cbb      	ldrb	r3, [r7, #18]
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	3b14      	subs	r3, #20
 8012c8e:	b29a      	uxth	r2, r3
 8012c90:	4b81      	ldr	r3, [pc, #516]	; (8012e98 <tcp_input+0x294>)
 8012c92:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012c94:	4b81      	ldr	r3, [pc, #516]	; (8012e9c <tcp_input+0x298>)
 8012c96:	2200      	movs	r2, #0
 8012c98:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	895a      	ldrh	r2, [r3, #10]
 8012c9e:	7cbb      	ldrb	r3, [r7, #18]
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d309      	bcc.n	8012cba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012ca6:	4b7c      	ldr	r3, [pc, #496]	; (8012e98 <tcp_input+0x294>)
 8012ca8:	881a      	ldrh	r2, [r3, #0]
 8012caa:	4b7d      	ldr	r3, [pc, #500]	; (8012ea0 <tcp_input+0x29c>)
 8012cac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012cae:	7cbb      	ldrb	r3, [r7, #18]
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f7fe f8dc 	bl	8010e70 <pbuf_remove_header>
 8012cb8:	e04e      	b.n	8012d58 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d105      	bne.n	8012cce <tcp_input+0xca>
 8012cc2:	4b70      	ldr	r3, [pc, #448]	; (8012e84 <tcp_input+0x280>)
 8012cc4:	22c2      	movs	r2, #194	; 0xc2
 8012cc6:	4977      	ldr	r1, [pc, #476]	; (8012ea4 <tcp_input+0x2a0>)
 8012cc8:	4870      	ldr	r0, [pc, #448]	; (8012e8c <tcp_input+0x288>)
 8012cca:	f009 fc23 	bl	801c514 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012cce:	2114      	movs	r1, #20
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7fe f8cd 	bl	8010e70 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	895a      	ldrh	r2, [r3, #10]
 8012cda:	4b71      	ldr	r3, [pc, #452]	; (8012ea0 <tcp_input+0x29c>)
 8012cdc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012cde:	4b6e      	ldr	r3, [pc, #440]	; (8012e98 <tcp_input+0x294>)
 8012ce0:	881a      	ldrh	r2, [r3, #0]
 8012ce2:	4b6f      	ldr	r3, [pc, #444]	; (8012ea0 <tcp_input+0x29c>)
 8012ce4:	881b      	ldrh	r3, [r3, #0]
 8012ce6:	1ad3      	subs	r3, r2, r3
 8012ce8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012cea:	4b6d      	ldr	r3, [pc, #436]	; (8012ea0 <tcp_input+0x29c>)
 8012cec:	881b      	ldrh	r3, [r3, #0]
 8012cee:	4619      	mov	r1, r3
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f7fe f8bd 	bl	8010e70 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	895b      	ldrh	r3, [r3, #10]
 8012cfc:	8a3a      	ldrh	r2, [r7, #16]
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	f200 836e 	bhi.w	80133e0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	4a64      	ldr	r2, [pc, #400]	; (8012e9c <tcp_input+0x298>)
 8012d0c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	8a3a      	ldrh	r2, [r7, #16]
 8012d14:	4611      	mov	r1, r2
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fe f8aa 	bl	8010e70 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	891a      	ldrh	r2, [r3, #8]
 8012d20:	8a3b      	ldrh	r3, [r7, #16]
 8012d22:	1ad3      	subs	r3, r2, r3
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	895b      	ldrh	r3, [r3, #10]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d005      	beq.n	8012d3e <tcp_input+0x13a>
 8012d32:	4b54      	ldr	r3, [pc, #336]	; (8012e84 <tcp_input+0x280>)
 8012d34:	22df      	movs	r2, #223	; 0xdf
 8012d36:	495c      	ldr	r1, [pc, #368]	; (8012ea8 <tcp_input+0x2a4>)
 8012d38:	4854      	ldr	r0, [pc, #336]	; (8012e8c <tcp_input+0x288>)
 8012d3a:	f009 fbeb 	bl	801c514 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	891a      	ldrh	r2, [r3, #8]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	891b      	ldrh	r3, [r3, #8]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d005      	beq.n	8012d58 <tcp_input+0x154>
 8012d4c:	4b4d      	ldr	r3, [pc, #308]	; (8012e84 <tcp_input+0x280>)
 8012d4e:	22e0      	movs	r2, #224	; 0xe0
 8012d50:	4956      	ldr	r1, [pc, #344]	; (8012eac <tcp_input+0x2a8>)
 8012d52:	484e      	ldr	r0, [pc, #312]	; (8012e8c <tcp_input+0x288>)
 8012d54:	f009 fbde 	bl	801c514 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012d58:	4b4d      	ldr	r3, [pc, #308]	; (8012e90 <tcp_input+0x28c>)
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	881b      	ldrh	r3, [r3, #0]
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	4a4b      	ldr	r2, [pc, #300]	; (8012e90 <tcp_input+0x28c>)
 8012d62:	6814      	ldr	r4, [r2, #0]
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fc fd0b 	bl	800f780 <lwip_htons>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012d6e:	4b48      	ldr	r3, [pc, #288]	; (8012e90 <tcp_input+0x28c>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	885b      	ldrh	r3, [r3, #2]
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	4a46      	ldr	r2, [pc, #280]	; (8012e90 <tcp_input+0x28c>)
 8012d78:	6814      	ldr	r4, [r2, #0]
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7fc fd00 	bl	800f780 <lwip_htons>
 8012d80:	4603      	mov	r3, r0
 8012d82:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012d84:	4b42      	ldr	r3, [pc, #264]	; (8012e90 <tcp_input+0x28c>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	4a41      	ldr	r2, [pc, #260]	; (8012e90 <tcp_input+0x28c>)
 8012d8c:	6814      	ldr	r4, [r2, #0]
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7fc fd0b 	bl	800f7aa <lwip_htonl>
 8012d94:	4603      	mov	r3, r0
 8012d96:	6063      	str	r3, [r4, #4]
 8012d98:	6863      	ldr	r3, [r4, #4]
 8012d9a:	4a45      	ldr	r2, [pc, #276]	; (8012eb0 <tcp_input+0x2ac>)
 8012d9c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012d9e:	4b3c      	ldr	r3, [pc, #240]	; (8012e90 <tcp_input+0x28c>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	689b      	ldr	r3, [r3, #8]
 8012da4:	4a3a      	ldr	r2, [pc, #232]	; (8012e90 <tcp_input+0x28c>)
 8012da6:	6814      	ldr	r4, [r2, #0]
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7fc fcfe 	bl	800f7aa <lwip_htonl>
 8012dae:	4603      	mov	r3, r0
 8012db0:	60a3      	str	r3, [r4, #8]
 8012db2:	68a3      	ldr	r3, [r4, #8]
 8012db4:	4a3f      	ldr	r2, [pc, #252]	; (8012eb4 <tcp_input+0x2b0>)
 8012db6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012db8:	4b35      	ldr	r3, [pc, #212]	; (8012e90 <tcp_input+0x28c>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	89db      	ldrh	r3, [r3, #14]
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	4a33      	ldr	r2, [pc, #204]	; (8012e90 <tcp_input+0x28c>)
 8012dc2:	6814      	ldr	r4, [r2, #0]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7fc fcdb 	bl	800f780 <lwip_htons>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012dce:	4b30      	ldr	r3, [pc, #192]	; (8012e90 <tcp_input+0x28c>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	899b      	ldrh	r3, [r3, #12]
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7fc fcd2 	bl	800f780 <lwip_htons>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012de4:	b2da      	uxtb	r2, r3
 8012de6:	4b34      	ldr	r3, [pc, #208]	; (8012eb8 <tcp_input+0x2b4>)
 8012de8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	891a      	ldrh	r2, [r3, #8]
 8012dee:	4b33      	ldr	r3, [pc, #204]	; (8012ebc <tcp_input+0x2b8>)
 8012df0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012df2:	4b31      	ldr	r3, [pc, #196]	; (8012eb8 <tcp_input+0x2b4>)
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	f003 0303 	and.w	r3, r3, #3
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d00c      	beq.n	8012e18 <tcp_input+0x214>
    tcplen++;
 8012dfe:	4b2f      	ldr	r3, [pc, #188]	; (8012ebc <tcp_input+0x2b8>)
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	3301      	adds	r3, #1
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	4b2d      	ldr	r3, [pc, #180]	; (8012ebc <tcp_input+0x2b8>)
 8012e08:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	891a      	ldrh	r2, [r3, #8]
 8012e0e:	4b2b      	ldr	r3, [pc, #172]	; (8012ebc <tcp_input+0x2b8>)
 8012e10:	881b      	ldrh	r3, [r3, #0]
 8012e12:	429a      	cmp	r2, r3
 8012e14:	f200 82e6 	bhi.w	80133e4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e1c:	4b28      	ldr	r3, [pc, #160]	; (8012ec0 <tcp_input+0x2bc>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	61fb      	str	r3, [r7, #28]
 8012e22:	e09d      	b.n	8012f60 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012e24:	69fb      	ldr	r3, [r7, #28]
 8012e26:	7d1b      	ldrb	r3, [r3, #20]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d105      	bne.n	8012e38 <tcp_input+0x234>
 8012e2c:	4b15      	ldr	r3, [pc, #84]	; (8012e84 <tcp_input+0x280>)
 8012e2e:	22fb      	movs	r2, #251	; 0xfb
 8012e30:	4924      	ldr	r1, [pc, #144]	; (8012ec4 <tcp_input+0x2c0>)
 8012e32:	4816      	ldr	r0, [pc, #88]	; (8012e8c <tcp_input+0x288>)
 8012e34:	f009 fb6e 	bl	801c514 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	7d1b      	ldrb	r3, [r3, #20]
 8012e3c:	2b0a      	cmp	r3, #10
 8012e3e:	d105      	bne.n	8012e4c <tcp_input+0x248>
 8012e40:	4b10      	ldr	r3, [pc, #64]	; (8012e84 <tcp_input+0x280>)
 8012e42:	22fc      	movs	r2, #252	; 0xfc
 8012e44:	4920      	ldr	r1, [pc, #128]	; (8012ec8 <tcp_input+0x2c4>)
 8012e46:	4811      	ldr	r0, [pc, #68]	; (8012e8c <tcp_input+0x288>)
 8012e48:	f009 fb64 	bl	801c514 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012e4c:	69fb      	ldr	r3, [r7, #28]
 8012e4e:	7d1b      	ldrb	r3, [r3, #20]
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d105      	bne.n	8012e60 <tcp_input+0x25c>
 8012e54:	4b0b      	ldr	r3, [pc, #44]	; (8012e84 <tcp_input+0x280>)
 8012e56:	22fd      	movs	r2, #253	; 0xfd
 8012e58:	491c      	ldr	r1, [pc, #112]	; (8012ecc <tcp_input+0x2c8>)
 8012e5a:	480c      	ldr	r0, [pc, #48]	; (8012e8c <tcp_input+0x288>)
 8012e5c:	f009 fb5a 	bl	801c514 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012e60:	69fb      	ldr	r3, [r7, #28]
 8012e62:	7a1b      	ldrb	r3, [r3, #8]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d033      	beq.n	8012ed0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	7a1a      	ldrb	r2, [r3, #8]
 8012e6c:	4b09      	ldr	r3, [pc, #36]	; (8012e94 <tcp_input+0x290>)
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012e74:	3301      	adds	r3, #1
 8012e76:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d029      	beq.n	8012ed0 <tcp_input+0x2cc>
      prev = pcb;
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	61bb      	str	r3, [r7, #24]
      continue;
 8012e80:	e06b      	b.n	8012f5a <tcp_input+0x356>
 8012e82:	bf00      	nop
 8012e84:	0801fa40 	.word	0x0801fa40
 8012e88:	0801fa74 	.word	0x0801fa74
 8012e8c:	0801fa8c 	.word	0x0801fa8c
 8012e90:	2000c600 	.word	0x2000c600
 8012e94:	20008e64 	.word	0x20008e64
 8012e98:	2000c604 	.word	0x2000c604
 8012e9c:	2000c608 	.word	0x2000c608
 8012ea0:	2000c606 	.word	0x2000c606
 8012ea4:	0801fab4 	.word	0x0801fab4
 8012ea8:	0801fac4 	.word	0x0801fac4
 8012eac:	0801fad0 	.word	0x0801fad0
 8012eb0:	2000c610 	.word	0x2000c610
 8012eb4:	2000c614 	.word	0x2000c614
 8012eb8:	2000c61c 	.word	0x2000c61c
 8012ebc:	2000c61a 	.word	0x2000c61a
 8012ec0:	2000c5e4 	.word	0x2000c5e4
 8012ec4:	0801faf0 	.word	0x0801faf0
 8012ec8:	0801fb18 	.word	0x0801fb18
 8012ecc:	0801fb44 	.word	0x0801fb44
    }

    if (pcb->remote_port == tcphdr->src &&
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	8b1a      	ldrh	r2, [r3, #24]
 8012ed4:	4b72      	ldr	r3, [pc, #456]	; (80130a0 <tcp_input+0x49c>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	881b      	ldrh	r3, [r3, #0]
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d13a      	bne.n	8012f56 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	8ada      	ldrh	r2, [r3, #22]
 8012ee4:	4b6e      	ldr	r3, [pc, #440]	; (80130a0 <tcp_input+0x49c>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	885b      	ldrh	r3, [r3, #2]
 8012eea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d132      	bne.n	8012f56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	685a      	ldr	r2, [r3, #4]
 8012ef4:	4b6b      	ldr	r3, [pc, #428]	; (80130a4 <tcp_input+0x4a0>)
 8012ef6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d12c      	bne.n	8012f56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	681a      	ldr	r2, [r3, #0]
 8012f00:	4b68      	ldr	r3, [pc, #416]	; (80130a4 <tcp_input+0x4a0>)
 8012f02:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d126      	bne.n	8012f56 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012f08:	69fb      	ldr	r3, [r7, #28]
 8012f0a:	68db      	ldr	r3, [r3, #12]
 8012f0c:	69fa      	ldr	r2, [r7, #28]
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d106      	bne.n	8012f20 <tcp_input+0x31c>
 8012f12:	4b65      	ldr	r3, [pc, #404]	; (80130a8 <tcp_input+0x4a4>)
 8012f14:	f240 120d 	movw	r2, #269	; 0x10d
 8012f18:	4964      	ldr	r1, [pc, #400]	; (80130ac <tcp_input+0x4a8>)
 8012f1a:	4865      	ldr	r0, [pc, #404]	; (80130b0 <tcp_input+0x4ac>)
 8012f1c:	f009 fafa 	bl	801c514 <iprintf>
      if (prev != NULL) {
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d00a      	beq.n	8012f3c <tcp_input+0x338>
        prev->next = pcb->next;
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	68da      	ldr	r2, [r3, #12]
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012f2e:	4b61      	ldr	r3, [pc, #388]	; (80130b4 <tcp_input+0x4b0>)
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012f36:	4a5f      	ldr	r2, [pc, #380]	; (80130b4 <tcp_input+0x4b0>)
 8012f38:	69fb      	ldr	r3, [r7, #28]
 8012f3a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	68db      	ldr	r3, [r3, #12]
 8012f40:	69fa      	ldr	r2, [r7, #28]
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d111      	bne.n	8012f6a <tcp_input+0x366>
 8012f46:	4b58      	ldr	r3, [pc, #352]	; (80130a8 <tcp_input+0x4a4>)
 8012f48:	f240 1215 	movw	r2, #277	; 0x115
 8012f4c:	495a      	ldr	r1, [pc, #360]	; (80130b8 <tcp_input+0x4b4>)
 8012f4e:	4858      	ldr	r0, [pc, #352]	; (80130b0 <tcp_input+0x4ac>)
 8012f50:	f009 fae0 	bl	801c514 <iprintf>
      break;
 8012f54:	e009      	b.n	8012f6a <tcp_input+0x366>
    }
    prev = pcb;
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f5a:	69fb      	ldr	r3, [r7, #28]
 8012f5c:	68db      	ldr	r3, [r3, #12]
 8012f5e:	61fb      	str	r3, [r7, #28]
 8012f60:	69fb      	ldr	r3, [r7, #28]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	f47f af5e 	bne.w	8012e24 <tcp_input+0x220>
 8012f68:	e000      	b.n	8012f6c <tcp_input+0x368>
      break;
 8012f6a:	bf00      	nop
  }

  if (pcb == NULL) {
 8012f6c:	69fb      	ldr	r3, [r7, #28]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	f040 80aa 	bne.w	80130c8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f74:	4b51      	ldr	r3, [pc, #324]	; (80130bc <tcp_input+0x4b8>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	61fb      	str	r3, [r7, #28]
 8012f7a:	e03f      	b.n	8012ffc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012f7c:	69fb      	ldr	r3, [r7, #28]
 8012f7e:	7d1b      	ldrb	r3, [r3, #20]
 8012f80:	2b0a      	cmp	r3, #10
 8012f82:	d006      	beq.n	8012f92 <tcp_input+0x38e>
 8012f84:	4b48      	ldr	r3, [pc, #288]	; (80130a8 <tcp_input+0x4a4>)
 8012f86:	f240 121f 	movw	r2, #287	; 0x11f
 8012f8a:	494d      	ldr	r1, [pc, #308]	; (80130c0 <tcp_input+0x4bc>)
 8012f8c:	4848      	ldr	r0, [pc, #288]	; (80130b0 <tcp_input+0x4ac>)
 8012f8e:	f009 fac1 	bl	801c514 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f92:	69fb      	ldr	r3, [r7, #28]
 8012f94:	7a1b      	ldrb	r3, [r3, #8]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d009      	beq.n	8012fae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f9a:	69fb      	ldr	r3, [r7, #28]
 8012f9c:	7a1a      	ldrb	r2, [r3, #8]
 8012f9e:	4b41      	ldr	r3, [pc, #260]	; (80130a4 <tcp_input+0x4a0>)
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012fa6:	3301      	adds	r3, #1
 8012fa8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d122      	bne.n	8012ff4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	8b1a      	ldrh	r2, [r3, #24]
 8012fb2:	4b3b      	ldr	r3, [pc, #236]	; (80130a0 <tcp_input+0x49c>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	881b      	ldrh	r3, [r3, #0]
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d11b      	bne.n	8012ff6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	8ada      	ldrh	r2, [r3, #22]
 8012fc2:	4b37      	ldr	r3, [pc, #220]	; (80130a0 <tcp_input+0x49c>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	885b      	ldrh	r3, [r3, #2]
 8012fc8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012fca:	429a      	cmp	r2, r3
 8012fcc:	d113      	bne.n	8012ff6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012fce:	69fb      	ldr	r3, [r7, #28]
 8012fd0:	685a      	ldr	r2, [r3, #4]
 8012fd2:	4b34      	ldr	r3, [pc, #208]	; (80130a4 <tcp_input+0x4a0>)
 8012fd4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d10d      	bne.n	8012ff6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012fda:	69fb      	ldr	r3, [r7, #28]
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	4b31      	ldr	r3, [pc, #196]	; (80130a4 <tcp_input+0x4a0>)
 8012fe0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d107      	bne.n	8012ff6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012fe6:	69f8      	ldr	r0, [r7, #28]
 8012fe8:	f000 fb56 	bl	8013698 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f7fd ffc5 	bl	8010f7c <pbuf_free>
        return;
 8012ff2:	e1fd      	b.n	80133f0 <tcp_input+0x7ec>
        continue;
 8012ff4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	68db      	ldr	r3, [r3, #12]
 8012ffa:	61fb      	str	r3, [r7, #28]
 8012ffc:	69fb      	ldr	r3, [r7, #28]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d1bc      	bne.n	8012f7c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013002:	2300      	movs	r3, #0
 8013004:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013006:	4b2f      	ldr	r3, [pc, #188]	; (80130c4 <tcp_input+0x4c0>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	617b      	str	r3, [r7, #20]
 801300c:	e02a      	b.n	8013064 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	7a1b      	ldrb	r3, [r3, #8]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d00c      	beq.n	8013030 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	7a1a      	ldrb	r2, [r3, #8]
 801301a:	4b22      	ldr	r3, [pc, #136]	; (80130a4 <tcp_input+0x4a0>)
 801301c:	685b      	ldr	r3, [r3, #4]
 801301e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013022:	3301      	adds	r3, #1
 8013024:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013026:	429a      	cmp	r2, r3
 8013028:	d002      	beq.n	8013030 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	61bb      	str	r3, [r7, #24]
        continue;
 801302e:	e016      	b.n	801305e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	8ada      	ldrh	r2, [r3, #22]
 8013034:	4b1a      	ldr	r3, [pc, #104]	; (80130a0 <tcp_input+0x49c>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	885b      	ldrh	r3, [r3, #2]
 801303a:	b29b      	uxth	r3, r3
 801303c:	429a      	cmp	r2, r3
 801303e:	d10c      	bne.n	801305a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	4b17      	ldr	r3, [pc, #92]	; (80130a4 <tcp_input+0x4a0>)
 8013046:	695b      	ldr	r3, [r3, #20]
 8013048:	429a      	cmp	r2, r3
 801304a:	d00f      	beq.n	801306c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d00d      	beq.n	801306e <tcp_input+0x46a>
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d009      	beq.n	801306e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	68db      	ldr	r3, [r3, #12]
 8013062:	617b      	str	r3, [r7, #20]
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d1d1      	bne.n	801300e <tcp_input+0x40a>
 801306a:	e000      	b.n	801306e <tcp_input+0x46a>
            break;
 801306c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d029      	beq.n	80130c8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d00a      	beq.n	8013090 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	68da      	ldr	r2, [r3, #12]
 801307e:	69bb      	ldr	r3, [r7, #24]
 8013080:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013082:	4b10      	ldr	r3, [pc, #64]	; (80130c4 <tcp_input+0x4c0>)
 8013084:	681a      	ldr	r2, [r3, #0]
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801308a:	4a0e      	ldr	r2, [pc, #56]	; (80130c4 <tcp_input+0x4c0>)
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013090:	6978      	ldr	r0, [r7, #20]
 8013092:	f000 fa03 	bl	801349c <tcp_listen_input>
      }
      pbuf_free(p);
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f7fd ff70 	bl	8010f7c <pbuf_free>
      return;
 801309c:	e1a8      	b.n	80133f0 <tcp_input+0x7ec>
 801309e:	bf00      	nop
 80130a0:	2000c600 	.word	0x2000c600
 80130a4:	20008e64 	.word	0x20008e64
 80130a8:	0801fa40 	.word	0x0801fa40
 80130ac:	0801fb6c 	.word	0x0801fb6c
 80130b0:	0801fa8c 	.word	0x0801fa8c
 80130b4:	2000c5e4 	.word	0x2000c5e4
 80130b8:	0801fb98 	.word	0x0801fb98
 80130bc:	2000c5e8 	.word	0x2000c5e8
 80130c0:	0801fbc4 	.word	0x0801fbc4
 80130c4:	2000c5e0 	.word	0x2000c5e0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f000 8158 	beq.w	8013380 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80130d0:	4b95      	ldr	r3, [pc, #596]	; (8013328 <tcp_input+0x724>)
 80130d2:	2200      	movs	r2, #0
 80130d4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	891a      	ldrh	r2, [r3, #8]
 80130da:	4b93      	ldr	r3, [pc, #588]	; (8013328 <tcp_input+0x724>)
 80130dc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80130de:	4a92      	ldr	r2, [pc, #584]	; (8013328 <tcp_input+0x724>)
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80130e4:	4b91      	ldr	r3, [pc, #580]	; (801332c <tcp_input+0x728>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	4a8f      	ldr	r2, [pc, #572]	; (8013328 <tcp_input+0x724>)
 80130ea:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80130ec:	4b90      	ldr	r3, [pc, #576]	; (8013330 <tcp_input+0x72c>)
 80130ee:	2200      	movs	r2, #0
 80130f0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80130f2:	4b90      	ldr	r3, [pc, #576]	; (8013334 <tcp_input+0x730>)
 80130f4:	2200      	movs	r2, #0
 80130f6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80130f8:	4b8f      	ldr	r3, [pc, #572]	; (8013338 <tcp_input+0x734>)
 80130fa:	2200      	movs	r2, #0
 80130fc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80130fe:	4b8f      	ldr	r3, [pc, #572]	; (801333c <tcp_input+0x738>)
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	f003 0308 	and.w	r3, r3, #8
 8013106:	2b00      	cmp	r3, #0
 8013108:	d006      	beq.n	8013118 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	7b5b      	ldrb	r3, [r3, #13]
 801310e:	f043 0301 	orr.w	r3, r3, #1
 8013112:	b2da      	uxtb	r2, r3
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013118:	69fb      	ldr	r3, [r7, #28]
 801311a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801311c:	2b00      	cmp	r3, #0
 801311e:	d017      	beq.n	8013150 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013120:	69f8      	ldr	r0, [r7, #28]
 8013122:	f7ff f929 	bl	8012378 <tcp_process_refused_data>
 8013126:	4603      	mov	r3, r0
 8013128:	f113 0f0d 	cmn.w	r3, #13
 801312c:	d007      	beq.n	801313e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801312e:	69fb      	ldr	r3, [r7, #28]
 8013130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013132:	2b00      	cmp	r3, #0
 8013134:	d00c      	beq.n	8013150 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013136:	4b82      	ldr	r3, [pc, #520]	; (8013340 <tcp_input+0x73c>)
 8013138:	881b      	ldrh	r3, [r3, #0]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d008      	beq.n	8013150 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013142:	2b00      	cmp	r3, #0
 8013144:	f040 80e3 	bne.w	801330e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013148:	69f8      	ldr	r0, [r7, #28]
 801314a:	f003 f9ad 	bl	80164a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801314e:	e0de      	b.n	801330e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013150:	4a7c      	ldr	r2, [pc, #496]	; (8013344 <tcp_input+0x740>)
 8013152:	69fb      	ldr	r3, [r7, #28]
 8013154:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013156:	69f8      	ldr	r0, [r7, #28]
 8013158:	f000 fb18 	bl	801378c <tcp_process>
 801315c:	4603      	mov	r3, r0
 801315e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013160:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013164:	f113 0f0d 	cmn.w	r3, #13
 8013168:	f000 80d3 	beq.w	8013312 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801316c:	4b71      	ldr	r3, [pc, #452]	; (8013334 <tcp_input+0x730>)
 801316e:	781b      	ldrb	r3, [r3, #0]
 8013170:	f003 0308 	and.w	r3, r3, #8
 8013174:	2b00      	cmp	r3, #0
 8013176:	d015      	beq.n	80131a4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801317e:	2b00      	cmp	r3, #0
 8013180:	d008      	beq.n	8013194 <tcp_input+0x590>
 8013182:	69fb      	ldr	r3, [r7, #28]
 8013184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013188:	69fa      	ldr	r2, [r7, #28]
 801318a:	6912      	ldr	r2, [r2, #16]
 801318c:	f06f 010d 	mvn.w	r1, #13
 8013190:	4610      	mov	r0, r2
 8013192:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013194:	69f9      	ldr	r1, [r7, #28]
 8013196:	486c      	ldr	r0, [pc, #432]	; (8013348 <tcp_input+0x744>)
 8013198:	f7ff fbbc 	bl	8012914 <tcp_pcb_remove>
        tcp_free(pcb);
 801319c:	69f8      	ldr	r0, [r7, #28]
 801319e:	f7fe f9a9 	bl	80114f4 <tcp_free>
 80131a2:	e0da      	b.n	801335a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80131a4:	2300      	movs	r3, #0
 80131a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80131a8:	4b63      	ldr	r3, [pc, #396]	; (8013338 <tcp_input+0x734>)
 80131aa:	881b      	ldrh	r3, [r3, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d01d      	beq.n	80131ec <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80131b0:	4b61      	ldr	r3, [pc, #388]	; (8013338 <tcp_input+0x734>)
 80131b2:	881b      	ldrh	r3, [r3, #0]
 80131b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d00a      	beq.n	80131d6 <tcp_input+0x5d2>
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131c6:	69fa      	ldr	r2, [r7, #28]
 80131c8:	6910      	ldr	r0, [r2, #16]
 80131ca:	89fa      	ldrh	r2, [r7, #14]
 80131cc:	69f9      	ldr	r1, [r7, #28]
 80131ce:	4798      	blx	r3
 80131d0:	4603      	mov	r3, r0
 80131d2:	74fb      	strb	r3, [r7, #19]
 80131d4:	e001      	b.n	80131da <tcp_input+0x5d6>
 80131d6:	2300      	movs	r3, #0
 80131d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80131da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131de:	f113 0f0d 	cmn.w	r3, #13
 80131e2:	f000 8098 	beq.w	8013316 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80131e6:	4b54      	ldr	r3, [pc, #336]	; (8013338 <tcp_input+0x734>)
 80131e8:	2200      	movs	r2, #0
 80131ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80131ec:	69f8      	ldr	r0, [r7, #28]
 80131ee:	f000 f915 	bl	801341c <tcp_input_delayed_close>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	f040 8090 	bne.w	801331a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80131fa:	4b4d      	ldr	r3, [pc, #308]	; (8013330 <tcp_input+0x72c>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d041      	beq.n	8013286 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013206:	2b00      	cmp	r3, #0
 8013208:	d006      	beq.n	8013218 <tcp_input+0x614>
 801320a:	4b50      	ldr	r3, [pc, #320]	; (801334c <tcp_input+0x748>)
 801320c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013210:	494f      	ldr	r1, [pc, #316]	; (8013350 <tcp_input+0x74c>)
 8013212:	4850      	ldr	r0, [pc, #320]	; (8013354 <tcp_input+0x750>)
 8013214:	f009 f97e 	bl	801c514 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013218:	69fb      	ldr	r3, [r7, #28]
 801321a:	8b5b      	ldrh	r3, [r3, #26]
 801321c:	f003 0310 	and.w	r3, r3, #16
 8013220:	2b00      	cmp	r3, #0
 8013222:	d008      	beq.n	8013236 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013224:	4b42      	ldr	r3, [pc, #264]	; (8013330 <tcp_input+0x72c>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	4618      	mov	r0, r3
 801322a:	f7fd fea7 	bl	8010f7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801322e:	69f8      	ldr	r0, [r7, #28]
 8013230:	f7fe fc48 	bl	8011ac4 <tcp_abort>
            goto aborted;
 8013234:	e091      	b.n	801335a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013236:	69fb      	ldr	r3, [r7, #28]
 8013238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801323c:	2b00      	cmp	r3, #0
 801323e:	d00c      	beq.n	801325a <tcp_input+0x656>
 8013240:	69fb      	ldr	r3, [r7, #28]
 8013242:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	6918      	ldr	r0, [r3, #16]
 801324a:	4b39      	ldr	r3, [pc, #228]	; (8013330 <tcp_input+0x72c>)
 801324c:	681a      	ldr	r2, [r3, #0]
 801324e:	2300      	movs	r3, #0
 8013250:	69f9      	ldr	r1, [r7, #28]
 8013252:	47a0      	blx	r4
 8013254:	4603      	mov	r3, r0
 8013256:	74fb      	strb	r3, [r7, #19]
 8013258:	e008      	b.n	801326c <tcp_input+0x668>
 801325a:	4b35      	ldr	r3, [pc, #212]	; (8013330 <tcp_input+0x72c>)
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	2300      	movs	r3, #0
 8013260:	69f9      	ldr	r1, [r7, #28]
 8013262:	2000      	movs	r0, #0
 8013264:	f7ff f95e 	bl	8012524 <tcp_recv_null>
 8013268:	4603      	mov	r3, r0
 801326a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801326c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013270:	f113 0f0d 	cmn.w	r3, #13
 8013274:	d053      	beq.n	801331e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013276:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d003      	beq.n	8013286 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801327e:	4b2c      	ldr	r3, [pc, #176]	; (8013330 <tcp_input+0x72c>)
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	69fb      	ldr	r3, [r7, #28]
 8013284:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013286:	4b2b      	ldr	r3, [pc, #172]	; (8013334 <tcp_input+0x730>)
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	f003 0320 	and.w	r3, r3, #32
 801328e:	2b00      	cmp	r3, #0
 8013290:	d030      	beq.n	80132f4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8013292:	69fb      	ldr	r3, [r7, #28]
 8013294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013296:	2b00      	cmp	r3, #0
 8013298:	d009      	beq.n	80132ae <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801329e:	7b5a      	ldrb	r2, [r3, #13]
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80132a4:	f042 0220 	orr.w	r2, r2, #32
 80132a8:	b2d2      	uxtb	r2, r2
 80132aa:	735a      	strb	r2, [r3, #13]
 80132ac:	e022      	b.n	80132f4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80132ae:	69fb      	ldr	r3, [r7, #28]
 80132b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80132b6:	d005      	beq.n	80132c4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132bc:	3301      	adds	r3, #1
 80132be:	b29a      	uxth	r2, r3
 80132c0:	69fb      	ldr	r3, [r7, #28]
 80132c2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80132c4:	69fb      	ldr	r3, [r7, #28]
 80132c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d00b      	beq.n	80132e6 <tcp_input+0x6e2>
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	6918      	ldr	r0, [r3, #16]
 80132d8:	2300      	movs	r3, #0
 80132da:	2200      	movs	r2, #0
 80132dc:	69f9      	ldr	r1, [r7, #28]
 80132de:	47a0      	blx	r4
 80132e0:	4603      	mov	r3, r0
 80132e2:	74fb      	strb	r3, [r7, #19]
 80132e4:	e001      	b.n	80132ea <tcp_input+0x6e6>
 80132e6:	2300      	movs	r3, #0
 80132e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80132ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132ee:	f113 0f0d 	cmn.w	r3, #13
 80132f2:	d016      	beq.n	8013322 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80132f4:	4b13      	ldr	r3, [pc, #76]	; (8013344 <tcp_input+0x740>)
 80132f6:	2200      	movs	r2, #0
 80132f8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80132fa:	69f8      	ldr	r0, [r7, #28]
 80132fc:	f000 f88e 	bl	801341c <tcp_input_delayed_close>
 8013300:	4603      	mov	r3, r0
 8013302:	2b00      	cmp	r3, #0
 8013304:	d128      	bne.n	8013358 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013306:	69f8      	ldr	r0, [r7, #28]
 8013308:	f002 fac8 	bl	801589c <tcp_output>
 801330c:	e025      	b.n	801335a <tcp_input+0x756>
        goto aborted;
 801330e:	bf00      	nop
 8013310:	e023      	b.n	801335a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013312:	bf00      	nop
 8013314:	e021      	b.n	801335a <tcp_input+0x756>
              goto aborted;
 8013316:	bf00      	nop
 8013318:	e01f      	b.n	801335a <tcp_input+0x756>
          goto aborted;
 801331a:	bf00      	nop
 801331c:	e01d      	b.n	801335a <tcp_input+0x756>
            goto aborted;
 801331e:	bf00      	nop
 8013320:	e01b      	b.n	801335a <tcp_input+0x756>
              goto aborted;
 8013322:	bf00      	nop
 8013324:	e019      	b.n	801335a <tcp_input+0x756>
 8013326:	bf00      	nop
 8013328:	2000c5f0 	.word	0x2000c5f0
 801332c:	2000c600 	.word	0x2000c600
 8013330:	2000c620 	.word	0x2000c620
 8013334:	2000c61d 	.word	0x2000c61d
 8013338:	2000c618 	.word	0x2000c618
 801333c:	2000c61c 	.word	0x2000c61c
 8013340:	2000c61a 	.word	0x2000c61a
 8013344:	2000c624 	.word	0x2000c624
 8013348:	2000c5e4 	.word	0x2000c5e4
 801334c:	0801fa40 	.word	0x0801fa40
 8013350:	0801fbf4 	.word	0x0801fbf4
 8013354:	0801fa8c 	.word	0x0801fa8c
          goto aborted;
 8013358:	bf00      	nop
    tcp_input_pcb = NULL;
 801335a:	4b27      	ldr	r3, [pc, #156]	; (80133f8 <tcp_input+0x7f4>)
 801335c:	2200      	movs	r2, #0
 801335e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013360:	4b26      	ldr	r3, [pc, #152]	; (80133fc <tcp_input+0x7f8>)
 8013362:	2200      	movs	r2, #0
 8013364:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013366:	4b26      	ldr	r3, [pc, #152]	; (8013400 <tcp_input+0x7fc>)
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d03f      	beq.n	80133ee <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801336e:	4b24      	ldr	r3, [pc, #144]	; (8013400 <tcp_input+0x7fc>)
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	4618      	mov	r0, r3
 8013374:	f7fd fe02 	bl	8010f7c <pbuf_free>
      inseg.p = NULL;
 8013378:	4b21      	ldr	r3, [pc, #132]	; (8013400 <tcp_input+0x7fc>)
 801337a:	2200      	movs	r2, #0
 801337c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801337e:	e036      	b.n	80133ee <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013380:	4b20      	ldr	r3, [pc, #128]	; (8013404 <tcp_input+0x800>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	899b      	ldrh	r3, [r3, #12]
 8013386:	b29b      	uxth	r3, r3
 8013388:	4618      	mov	r0, r3
 801338a:	f7fc f9f9 	bl	800f780 <lwip_htons>
 801338e:	4603      	mov	r3, r0
 8013390:	b2db      	uxtb	r3, r3
 8013392:	f003 0304 	and.w	r3, r3, #4
 8013396:	2b00      	cmp	r3, #0
 8013398:	d118      	bne.n	80133cc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801339a:	4b1b      	ldr	r3, [pc, #108]	; (8013408 <tcp_input+0x804>)
 801339c:	6819      	ldr	r1, [r3, #0]
 801339e:	4b1b      	ldr	r3, [pc, #108]	; (801340c <tcp_input+0x808>)
 80133a0:	881b      	ldrh	r3, [r3, #0]
 80133a2:	461a      	mov	r2, r3
 80133a4:	4b1a      	ldr	r3, [pc, #104]	; (8013410 <tcp_input+0x80c>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133aa:	4b16      	ldr	r3, [pc, #88]	; (8013404 <tcp_input+0x800>)
 80133ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133ae:	885b      	ldrh	r3, [r3, #2]
 80133b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133b2:	4a14      	ldr	r2, [pc, #80]	; (8013404 <tcp_input+0x800>)
 80133b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133b6:	8812      	ldrh	r2, [r2, #0]
 80133b8:	b292      	uxth	r2, r2
 80133ba:	9202      	str	r2, [sp, #8]
 80133bc:	9301      	str	r3, [sp, #4]
 80133be:	4b15      	ldr	r3, [pc, #84]	; (8013414 <tcp_input+0x810>)
 80133c0:	9300      	str	r3, [sp, #0]
 80133c2:	4b15      	ldr	r3, [pc, #84]	; (8013418 <tcp_input+0x814>)
 80133c4:	4602      	mov	r2, r0
 80133c6:	2000      	movs	r0, #0
 80133c8:	f003 f81c 	bl	8016404 <tcp_rst>
    pbuf_free(p);
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f7fd fdd5 	bl	8010f7c <pbuf_free>
  return;
 80133d2:	e00c      	b.n	80133ee <tcp_input+0x7ea>
    goto dropped;
 80133d4:	bf00      	nop
 80133d6:	e006      	b.n	80133e6 <tcp_input+0x7e2>
    goto dropped;
 80133d8:	bf00      	nop
 80133da:	e004      	b.n	80133e6 <tcp_input+0x7e2>
    goto dropped;
 80133dc:	bf00      	nop
 80133de:	e002      	b.n	80133e6 <tcp_input+0x7e2>
      goto dropped;
 80133e0:	bf00      	nop
 80133e2:	e000      	b.n	80133e6 <tcp_input+0x7e2>
      goto dropped;
 80133e4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f7fd fdc8 	bl	8010f7c <pbuf_free>
 80133ec:	e000      	b.n	80133f0 <tcp_input+0x7ec>
  return;
 80133ee:	bf00      	nop
}
 80133f0:	3724      	adds	r7, #36	; 0x24
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd90      	pop	{r4, r7, pc}
 80133f6:	bf00      	nop
 80133f8:	2000c624 	.word	0x2000c624
 80133fc:	2000c620 	.word	0x2000c620
 8013400:	2000c5f0 	.word	0x2000c5f0
 8013404:	2000c600 	.word	0x2000c600
 8013408:	2000c614 	.word	0x2000c614
 801340c:	2000c61a 	.word	0x2000c61a
 8013410:	2000c610 	.word	0x2000c610
 8013414:	20008e74 	.word	0x20008e74
 8013418:	20008e78 	.word	0x20008e78

0801341c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d106      	bne.n	8013438 <tcp_input_delayed_close+0x1c>
 801342a:	4b17      	ldr	r3, [pc, #92]	; (8013488 <tcp_input_delayed_close+0x6c>)
 801342c:	f240 225a 	movw	r2, #602	; 0x25a
 8013430:	4916      	ldr	r1, [pc, #88]	; (801348c <tcp_input_delayed_close+0x70>)
 8013432:	4817      	ldr	r0, [pc, #92]	; (8013490 <tcp_input_delayed_close+0x74>)
 8013434:	f009 f86e 	bl	801c514 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013438:	4b16      	ldr	r3, [pc, #88]	; (8013494 <tcp_input_delayed_close+0x78>)
 801343a:	781b      	ldrb	r3, [r3, #0]
 801343c:	f003 0310 	and.w	r3, r3, #16
 8013440:	2b00      	cmp	r3, #0
 8013442:	d01c      	beq.n	801347e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	8b5b      	ldrh	r3, [r3, #26]
 8013448:	f003 0310 	and.w	r3, r3, #16
 801344c:	2b00      	cmp	r3, #0
 801344e:	d10d      	bne.n	801346c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013456:	2b00      	cmp	r3, #0
 8013458:	d008      	beq.n	801346c <tcp_input_delayed_close+0x50>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013460:	687a      	ldr	r2, [r7, #4]
 8013462:	6912      	ldr	r2, [r2, #16]
 8013464:	f06f 010e 	mvn.w	r1, #14
 8013468:	4610      	mov	r0, r2
 801346a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801346c:	6879      	ldr	r1, [r7, #4]
 801346e:	480a      	ldr	r0, [pc, #40]	; (8013498 <tcp_input_delayed_close+0x7c>)
 8013470:	f7ff fa50 	bl	8012914 <tcp_pcb_remove>
    tcp_free(pcb);
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f7fe f83d 	bl	80114f4 <tcp_free>
    return 1;
 801347a:	2301      	movs	r3, #1
 801347c:	e000      	b.n	8013480 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801347e:	2300      	movs	r3, #0
}
 8013480:	4618      	mov	r0, r3
 8013482:	3708      	adds	r7, #8
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	0801fa40 	.word	0x0801fa40
 801348c:	0801fc10 	.word	0x0801fc10
 8013490:	0801fa8c 	.word	0x0801fa8c
 8013494:	2000c61d 	.word	0x2000c61d
 8013498:	2000c5e4 	.word	0x2000c5e4

0801349c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801349c:	b590      	push	{r4, r7, lr}
 801349e:	b08b      	sub	sp, #44	; 0x2c
 80134a0:	af04      	add	r7, sp, #16
 80134a2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80134a4:	4b6f      	ldr	r3, [pc, #444]	; (8013664 <tcp_listen_input+0x1c8>)
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	f003 0304 	and.w	r3, r3, #4
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	f040 80d2 	bne.w	8013656 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d106      	bne.n	80134c6 <tcp_listen_input+0x2a>
 80134b8:	4b6b      	ldr	r3, [pc, #428]	; (8013668 <tcp_listen_input+0x1cc>)
 80134ba:	f240 2281 	movw	r2, #641	; 0x281
 80134be:	496b      	ldr	r1, [pc, #428]	; (801366c <tcp_listen_input+0x1d0>)
 80134c0:	486b      	ldr	r0, [pc, #428]	; (8013670 <tcp_listen_input+0x1d4>)
 80134c2:	f009 f827 	bl	801c514 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80134c6:	4b67      	ldr	r3, [pc, #412]	; (8013664 <tcp_listen_input+0x1c8>)
 80134c8:	781b      	ldrb	r3, [r3, #0]
 80134ca:	f003 0310 	and.w	r3, r3, #16
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d019      	beq.n	8013506 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134d2:	4b68      	ldr	r3, [pc, #416]	; (8013674 <tcp_listen_input+0x1d8>)
 80134d4:	6819      	ldr	r1, [r3, #0]
 80134d6:	4b68      	ldr	r3, [pc, #416]	; (8013678 <tcp_listen_input+0x1dc>)
 80134d8:	881b      	ldrh	r3, [r3, #0]
 80134da:	461a      	mov	r2, r3
 80134dc:	4b67      	ldr	r3, [pc, #412]	; (801367c <tcp_listen_input+0x1e0>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134e2:	4b67      	ldr	r3, [pc, #412]	; (8013680 <tcp_listen_input+0x1e4>)
 80134e4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134e6:	885b      	ldrh	r3, [r3, #2]
 80134e8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80134ea:	4a65      	ldr	r2, [pc, #404]	; (8013680 <tcp_listen_input+0x1e4>)
 80134ec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134ee:	8812      	ldrh	r2, [r2, #0]
 80134f0:	b292      	uxth	r2, r2
 80134f2:	9202      	str	r2, [sp, #8]
 80134f4:	9301      	str	r3, [sp, #4]
 80134f6:	4b63      	ldr	r3, [pc, #396]	; (8013684 <tcp_listen_input+0x1e8>)
 80134f8:	9300      	str	r3, [sp, #0]
 80134fa:	4b63      	ldr	r3, [pc, #396]	; (8013688 <tcp_listen_input+0x1ec>)
 80134fc:	4602      	mov	r2, r0
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	f002 ff80 	bl	8016404 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013504:	e0a9      	b.n	801365a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013506:	4b57      	ldr	r3, [pc, #348]	; (8013664 <tcp_listen_input+0x1c8>)
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	f003 0302 	and.w	r3, r3, #2
 801350e:	2b00      	cmp	r3, #0
 8013510:	f000 80a3 	beq.w	801365a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	7d5b      	ldrb	r3, [r3, #21]
 8013518:	4618      	mov	r0, r3
 801351a:	f7ff f927 	bl	801276c <tcp_alloc>
 801351e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d111      	bne.n	801354a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	699b      	ldr	r3, [r3, #24]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d00a      	beq.n	8013544 <tcp_listen_input+0xa8>
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	699b      	ldr	r3, [r3, #24]
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	6910      	ldr	r0, [r2, #16]
 8013536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801353a:	2100      	movs	r1, #0
 801353c:	4798      	blx	r3
 801353e:	4603      	mov	r3, r0
 8013540:	73bb      	strb	r3, [r7, #14]
      return;
 8013542:	e08b      	b.n	801365c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013544:	23f0      	movs	r3, #240	; 0xf0
 8013546:	73bb      	strb	r3, [r7, #14]
      return;
 8013548:	e088      	b.n	801365c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801354a:	4b50      	ldr	r3, [pc, #320]	; (801368c <tcp_listen_input+0x1f0>)
 801354c:	695a      	ldr	r2, [r3, #20]
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013552:	4b4e      	ldr	r3, [pc, #312]	; (801368c <tcp_listen_input+0x1f0>)
 8013554:	691a      	ldr	r2, [r3, #16]
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	8ada      	ldrh	r2, [r3, #22]
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013562:	4b47      	ldr	r3, [pc, #284]	; (8013680 <tcp_listen_input+0x1e4>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	881b      	ldrh	r3, [r3, #0]
 8013568:	b29a      	uxth	r2, r3
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	2203      	movs	r2, #3
 8013572:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013574:	4b41      	ldr	r3, [pc, #260]	; (801367c <tcp_listen_input+0x1e0>)
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	1c5a      	adds	r2, r3, #1
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013586:	6978      	ldr	r0, [r7, #20]
 8013588:	f7ff fa58 	bl	8012a3c <tcp_next_iss>
 801358c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	693a      	ldr	r2, [r7, #16]
 8013592:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	693a      	ldr	r2, [r7, #16]
 8013598:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	693a      	ldr	r2, [r7, #16]
 801359e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	693a      	ldr	r2, [r7, #16]
 80135a4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80135a6:	4b35      	ldr	r3, [pc, #212]	; (801367c <tcp_listen_input+0x1e0>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	1e5a      	subs	r2, r3, #1
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	691a      	ldr	r2, [r3, #16]
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	687a      	ldr	r2, [r7, #4]
 80135bc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	7a5b      	ldrb	r3, [r3, #9]
 80135c2:	f003 030c 	and.w	r3, r3, #12
 80135c6:	b2da      	uxtb	r2, r3
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	7a1a      	ldrb	r2, [r3, #8]
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80135d4:	4b2e      	ldr	r3, [pc, #184]	; (8013690 <tcp_listen_input+0x1f4>)
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	60da      	str	r2, [r3, #12]
 80135dc:	4a2c      	ldr	r2, [pc, #176]	; (8013690 <tcp_listen_input+0x1f4>)
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	6013      	str	r3, [r2, #0]
 80135e2:	f003 f8d1 	bl	8016788 <tcp_timer_needed>
 80135e6:	4b2b      	ldr	r3, [pc, #172]	; (8013694 <tcp_listen_input+0x1f8>)
 80135e8:	2201      	movs	r2, #1
 80135ea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80135ec:	6978      	ldr	r0, [r7, #20]
 80135ee:	f001 fd8f 	bl	8015110 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80135f2:	4b23      	ldr	r3, [pc, #140]	; (8013680 <tcp_listen_input+0x1e4>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	89db      	ldrh	r3, [r3, #14]
 80135f8:	b29a      	uxth	r2, r3
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801360c:	697b      	ldr	r3, [r7, #20]
 801360e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013610:	697b      	ldr	r3, [r7, #20]
 8013612:	3304      	adds	r3, #4
 8013614:	4618      	mov	r0, r3
 8013616:	f006 fe5d 	bl	801a2d4 <ip4_route>
 801361a:	4601      	mov	r1, r0
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	3304      	adds	r3, #4
 8013620:	461a      	mov	r2, r3
 8013622:	4620      	mov	r0, r4
 8013624:	f7ff fa30 	bl	8012a88 <tcp_eff_send_mss_netif>
 8013628:	4603      	mov	r3, r0
 801362a:	461a      	mov	r2, r3
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013630:	2112      	movs	r1, #18
 8013632:	6978      	ldr	r0, [r7, #20]
 8013634:	f002 f844 	bl	80156c0 <tcp_enqueue_flags>
 8013638:	4603      	mov	r3, r0
 801363a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801363c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d004      	beq.n	801364e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013644:	2100      	movs	r1, #0
 8013646:	6978      	ldr	r0, [r7, #20]
 8013648:	f7fe f97e 	bl	8011948 <tcp_abandon>
      return;
 801364c:	e006      	b.n	801365c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801364e:	6978      	ldr	r0, [r7, #20]
 8013650:	f002 f924 	bl	801589c <tcp_output>
  return;
 8013654:	e001      	b.n	801365a <tcp_listen_input+0x1be>
    return;
 8013656:	bf00      	nop
 8013658:	e000      	b.n	801365c <tcp_listen_input+0x1c0>
  return;
 801365a:	bf00      	nop
}
 801365c:	371c      	adds	r7, #28
 801365e:	46bd      	mov	sp, r7
 8013660:	bd90      	pop	{r4, r7, pc}
 8013662:	bf00      	nop
 8013664:	2000c61c 	.word	0x2000c61c
 8013668:	0801fa40 	.word	0x0801fa40
 801366c:	0801fc38 	.word	0x0801fc38
 8013670:	0801fa8c 	.word	0x0801fa8c
 8013674:	2000c614 	.word	0x2000c614
 8013678:	2000c61a 	.word	0x2000c61a
 801367c:	2000c610 	.word	0x2000c610
 8013680:	2000c600 	.word	0x2000c600
 8013684:	20008e74 	.word	0x20008e74
 8013688:	20008e78 	.word	0x20008e78
 801368c:	20008e64 	.word	0x20008e64
 8013690:	2000c5e4 	.word	0x2000c5e4
 8013694:	2000c5ec 	.word	0x2000c5ec

08013698 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b086      	sub	sp, #24
 801369c:	af04      	add	r7, sp, #16
 801369e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80136a0:	4b2f      	ldr	r3, [pc, #188]	; (8013760 <tcp_timewait_input+0xc8>)
 80136a2:	781b      	ldrb	r3, [r3, #0]
 80136a4:	f003 0304 	and.w	r3, r3, #4
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d153      	bne.n	8013754 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d106      	bne.n	80136c0 <tcp_timewait_input+0x28>
 80136b2:	4b2c      	ldr	r3, [pc, #176]	; (8013764 <tcp_timewait_input+0xcc>)
 80136b4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80136b8:	492b      	ldr	r1, [pc, #172]	; (8013768 <tcp_timewait_input+0xd0>)
 80136ba:	482c      	ldr	r0, [pc, #176]	; (801376c <tcp_timewait_input+0xd4>)
 80136bc:	f008 ff2a 	bl	801c514 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80136c0:	4b27      	ldr	r3, [pc, #156]	; (8013760 <tcp_timewait_input+0xc8>)
 80136c2:	781b      	ldrb	r3, [r3, #0]
 80136c4:	f003 0302 	and.w	r3, r3, #2
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d02a      	beq.n	8013722 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80136cc:	4b28      	ldr	r3, [pc, #160]	; (8013770 <tcp_timewait_input+0xd8>)
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136d4:	1ad3      	subs	r3, r2, r3
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	db2d      	blt.n	8013736 <tcp_timewait_input+0x9e>
 80136da:	4b25      	ldr	r3, [pc, #148]	; (8013770 <tcp_timewait_input+0xd8>)
 80136dc:	681a      	ldr	r2, [r3, #0]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136e2:	6879      	ldr	r1, [r7, #4]
 80136e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80136e6:	440b      	add	r3, r1
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	dc23      	bgt.n	8013736 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80136ee:	4b21      	ldr	r3, [pc, #132]	; (8013774 <tcp_timewait_input+0xdc>)
 80136f0:	6819      	ldr	r1, [r3, #0]
 80136f2:	4b21      	ldr	r3, [pc, #132]	; (8013778 <tcp_timewait_input+0xe0>)
 80136f4:	881b      	ldrh	r3, [r3, #0]
 80136f6:	461a      	mov	r2, r3
 80136f8:	4b1d      	ldr	r3, [pc, #116]	; (8013770 <tcp_timewait_input+0xd8>)
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80136fe:	4b1f      	ldr	r3, [pc, #124]	; (801377c <tcp_timewait_input+0xe4>)
 8013700:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013702:	885b      	ldrh	r3, [r3, #2]
 8013704:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013706:	4a1d      	ldr	r2, [pc, #116]	; (801377c <tcp_timewait_input+0xe4>)
 8013708:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801370a:	8812      	ldrh	r2, [r2, #0]
 801370c:	b292      	uxth	r2, r2
 801370e:	9202      	str	r2, [sp, #8]
 8013710:	9301      	str	r3, [sp, #4]
 8013712:	4b1b      	ldr	r3, [pc, #108]	; (8013780 <tcp_timewait_input+0xe8>)
 8013714:	9300      	str	r3, [sp, #0]
 8013716:	4b1b      	ldr	r3, [pc, #108]	; (8013784 <tcp_timewait_input+0xec>)
 8013718:	4602      	mov	r2, r0
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f002 fe72 	bl	8016404 <tcp_rst>
      return;
 8013720:	e01b      	b.n	801375a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013722:	4b0f      	ldr	r3, [pc, #60]	; (8013760 <tcp_timewait_input+0xc8>)
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	f003 0301 	and.w	r3, r3, #1
 801372a:	2b00      	cmp	r3, #0
 801372c:	d003      	beq.n	8013736 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801372e:	4b16      	ldr	r3, [pc, #88]	; (8013788 <tcp_timewait_input+0xf0>)
 8013730:	681a      	ldr	r2, [r3, #0]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013736:	4b10      	ldr	r3, [pc, #64]	; (8013778 <tcp_timewait_input+0xe0>)
 8013738:	881b      	ldrh	r3, [r3, #0]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d00c      	beq.n	8013758 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	8b5b      	ldrh	r3, [r3, #26]
 8013742:	f043 0302 	orr.w	r3, r3, #2
 8013746:	b29a      	uxth	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f002 f8a5 	bl	801589c <tcp_output>
  }
  return;
 8013752:	e001      	b.n	8013758 <tcp_timewait_input+0xc0>
    return;
 8013754:	bf00      	nop
 8013756:	e000      	b.n	801375a <tcp_timewait_input+0xc2>
  return;
 8013758:	bf00      	nop
}
 801375a:	3708      	adds	r7, #8
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}
 8013760:	2000c61c 	.word	0x2000c61c
 8013764:	0801fa40 	.word	0x0801fa40
 8013768:	0801fc58 	.word	0x0801fc58
 801376c:	0801fa8c 	.word	0x0801fa8c
 8013770:	2000c610 	.word	0x2000c610
 8013774:	2000c614 	.word	0x2000c614
 8013778:	2000c61a 	.word	0x2000c61a
 801377c:	2000c600 	.word	0x2000c600
 8013780:	20008e74 	.word	0x20008e74
 8013784:	20008e78 	.word	0x20008e78
 8013788:	2000c5d8 	.word	0x2000c5d8

0801378c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801378c:	b590      	push	{r4, r7, lr}
 801378e:	b08d      	sub	sp, #52	; 0x34
 8013790:	af04      	add	r7, sp, #16
 8013792:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013794:	2300      	movs	r3, #0
 8013796:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013798:	2300      	movs	r3, #0
 801379a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d106      	bne.n	80137b0 <tcp_process+0x24>
 80137a2:	4b9d      	ldr	r3, [pc, #628]	; (8013a18 <tcp_process+0x28c>)
 80137a4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80137a8:	499c      	ldr	r1, [pc, #624]	; (8013a1c <tcp_process+0x290>)
 80137aa:	489d      	ldr	r0, [pc, #628]	; (8013a20 <tcp_process+0x294>)
 80137ac:	f008 feb2 	bl	801c514 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80137b0:	4b9c      	ldr	r3, [pc, #624]	; (8013a24 <tcp_process+0x298>)
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	f003 0304 	and.w	r3, r3, #4
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d04e      	beq.n	801385a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	7d1b      	ldrb	r3, [r3, #20]
 80137c0:	2b02      	cmp	r3, #2
 80137c2:	d108      	bne.n	80137d6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137c8:	4b97      	ldr	r3, [pc, #604]	; (8013a28 <tcp_process+0x29c>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d123      	bne.n	8013818 <tcp_process+0x8c>
        acceptable = 1;
 80137d0:	2301      	movs	r3, #1
 80137d2:	76fb      	strb	r3, [r7, #27]
 80137d4:	e020      	b.n	8013818 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137da:	4b94      	ldr	r3, [pc, #592]	; (8013a2c <tcp_process+0x2a0>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	429a      	cmp	r2, r3
 80137e0:	d102      	bne.n	80137e8 <tcp_process+0x5c>
        acceptable = 1;
 80137e2:	2301      	movs	r3, #1
 80137e4:	76fb      	strb	r3, [r7, #27]
 80137e6:	e017      	b.n	8013818 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80137e8:	4b90      	ldr	r3, [pc, #576]	; (8013a2c <tcp_process+0x2a0>)
 80137ea:	681a      	ldr	r2, [r3, #0]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f0:	1ad3      	subs	r3, r2, r3
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	db10      	blt.n	8013818 <tcp_process+0x8c>
 80137f6:	4b8d      	ldr	r3, [pc, #564]	; (8013a2c <tcp_process+0x2a0>)
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137fe:	6879      	ldr	r1, [r7, #4]
 8013800:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013802:	440b      	add	r3, r1
 8013804:	1ad3      	subs	r3, r2, r3
 8013806:	2b00      	cmp	r3, #0
 8013808:	dc06      	bgt.n	8013818 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	8b5b      	ldrh	r3, [r3, #26]
 801380e:	f043 0302 	orr.w	r3, r3, #2
 8013812:	b29a      	uxth	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013818:	7efb      	ldrb	r3, [r7, #27]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d01b      	beq.n	8013856 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	7d1b      	ldrb	r3, [r3, #20]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d106      	bne.n	8013834 <tcp_process+0xa8>
 8013826:	4b7c      	ldr	r3, [pc, #496]	; (8013a18 <tcp_process+0x28c>)
 8013828:	f44f 724e 	mov.w	r2, #824	; 0x338
 801382c:	4980      	ldr	r1, [pc, #512]	; (8013a30 <tcp_process+0x2a4>)
 801382e:	487c      	ldr	r0, [pc, #496]	; (8013a20 <tcp_process+0x294>)
 8013830:	f008 fe70 	bl	801c514 <iprintf>
      recv_flags |= TF_RESET;
 8013834:	4b7f      	ldr	r3, [pc, #508]	; (8013a34 <tcp_process+0x2a8>)
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	f043 0308 	orr.w	r3, r3, #8
 801383c:	b2da      	uxtb	r2, r3
 801383e:	4b7d      	ldr	r3, [pc, #500]	; (8013a34 <tcp_process+0x2a8>)
 8013840:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	8b5b      	ldrh	r3, [r3, #26]
 8013846:	f023 0301 	bic.w	r3, r3, #1
 801384a:	b29a      	uxth	r2, r3
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013850:	f06f 030d 	mvn.w	r3, #13
 8013854:	e37a      	b.n	8013f4c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013856:	2300      	movs	r3, #0
 8013858:	e378      	b.n	8013f4c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801385a:	4b72      	ldr	r3, [pc, #456]	; (8013a24 <tcp_process+0x298>)
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	f003 0302 	and.w	r3, r3, #2
 8013862:	2b00      	cmp	r3, #0
 8013864:	d010      	beq.n	8013888 <tcp_process+0xfc>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	7d1b      	ldrb	r3, [r3, #20]
 801386a:	2b02      	cmp	r3, #2
 801386c:	d00c      	beq.n	8013888 <tcp_process+0xfc>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	7d1b      	ldrb	r3, [r3, #20]
 8013872:	2b03      	cmp	r3, #3
 8013874:	d008      	beq.n	8013888 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	8b5b      	ldrh	r3, [r3, #26]
 801387a:	f043 0302 	orr.w	r3, r3, #2
 801387e:	b29a      	uxth	r2, r3
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013884:	2300      	movs	r3, #0
 8013886:	e361      	b.n	8013f4c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	8b5b      	ldrh	r3, [r3, #26]
 801388c:	f003 0310 	and.w	r3, r3, #16
 8013890:	2b00      	cmp	r3, #0
 8013892:	d103      	bne.n	801389c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013894:	4b68      	ldr	r3, [pc, #416]	; (8013a38 <tcp_process+0x2ac>)
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2200      	movs	r2, #0
 80138a0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2200      	movs	r2, #0
 80138a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f001 fc2f 	bl	8015110 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	7d1b      	ldrb	r3, [r3, #20]
 80138b6:	3b02      	subs	r3, #2
 80138b8:	2b07      	cmp	r3, #7
 80138ba:	f200 8337 	bhi.w	8013f2c <tcp_process+0x7a0>
 80138be:	a201      	add	r2, pc, #4	; (adr r2, 80138c4 <tcp_process+0x138>)
 80138c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138c4:	080138e5 	.word	0x080138e5
 80138c8:	08013b15 	.word	0x08013b15
 80138cc:	08013c8d 	.word	0x08013c8d
 80138d0:	08013cb7 	.word	0x08013cb7
 80138d4:	08013ddb 	.word	0x08013ddb
 80138d8:	08013c8d 	.word	0x08013c8d
 80138dc:	08013e67 	.word	0x08013e67
 80138e0:	08013ef7 	.word	0x08013ef7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80138e4:	4b4f      	ldr	r3, [pc, #316]	; (8013a24 <tcp_process+0x298>)
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	f003 0310 	and.w	r3, r3, #16
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	f000 80e4 	beq.w	8013aba <tcp_process+0x32e>
 80138f2:	4b4c      	ldr	r3, [pc, #304]	; (8013a24 <tcp_process+0x298>)
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	f003 0302 	and.w	r3, r3, #2
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	f000 80dd 	beq.w	8013aba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013904:	1c5a      	adds	r2, r3, #1
 8013906:	4b48      	ldr	r3, [pc, #288]	; (8013a28 <tcp_process+0x29c>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	429a      	cmp	r2, r3
 801390c:	f040 80d5 	bne.w	8013aba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013910:	4b46      	ldr	r3, [pc, #280]	; (8013a2c <tcp_process+0x2a0>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	1c5a      	adds	r2, r3, #1
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013922:	4b41      	ldr	r3, [pc, #260]	; (8013a28 <tcp_process+0x29c>)
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801392a:	4b44      	ldr	r3, [pc, #272]	; (8013a3c <tcp_process+0x2b0>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	89db      	ldrh	r3, [r3, #14]
 8013930:	b29a      	uxth	r2, r3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013944:	4b39      	ldr	r3, [pc, #228]	; (8013a2c <tcp_process+0x2a0>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	1e5a      	subs	r2, r3, #1
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2204      	movs	r2, #4
 8013952:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	3304      	adds	r3, #4
 801395c:	4618      	mov	r0, r3
 801395e:	f006 fcb9 	bl	801a2d4 <ip4_route>
 8013962:	4601      	mov	r1, r0
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	3304      	adds	r3, #4
 8013968:	461a      	mov	r2, r3
 801396a:	4620      	mov	r0, r4
 801396c:	f7ff f88c 	bl	8012a88 <tcp_eff_send_mss_netif>
 8013970:	4603      	mov	r3, r0
 8013972:	461a      	mov	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801397c:	009a      	lsls	r2, r3, #2
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013982:	005b      	lsls	r3, r3, #1
 8013984:	f241 111c 	movw	r1, #4380	; 0x111c
 8013988:	428b      	cmp	r3, r1
 801398a:	bf38      	it	cc
 801398c:	460b      	movcc	r3, r1
 801398e:	429a      	cmp	r2, r3
 8013990:	d204      	bcs.n	801399c <tcp_process+0x210>
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	b29b      	uxth	r3, r3
 801399a:	e00d      	b.n	80139b8 <tcp_process+0x22c>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139a0:	005b      	lsls	r3, r3, #1
 80139a2:	f241 121c 	movw	r2, #4380	; 0x111c
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d904      	bls.n	80139b4 <tcp_process+0x228>
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139ae:	005b      	lsls	r3, r3, #1
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	e001      	b.n	80139b8 <tcp_process+0x22c>
 80139b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80139b8:	687a      	ldr	r2, [r7, #4]
 80139ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d106      	bne.n	80139d6 <tcp_process+0x24a>
 80139c8:	4b13      	ldr	r3, [pc, #76]	; (8013a18 <tcp_process+0x28c>)
 80139ca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80139ce:	491c      	ldr	r1, [pc, #112]	; (8013a40 <tcp_process+0x2b4>)
 80139d0:	4813      	ldr	r0, [pc, #76]	; (8013a20 <tcp_process+0x294>)
 80139d2:	f008 fd9f 	bl	801c514 <iprintf>
        --pcb->snd_queuelen;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139dc:	3b01      	subs	r3, #1
 80139de:	b29a      	uxth	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139ea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d12a      	bne.n	8013a48 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139f6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d106      	bne.n	8013a0c <tcp_process+0x280>
 80139fe:	4b06      	ldr	r3, [pc, #24]	; (8013a18 <tcp_process+0x28c>)
 8013a00:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013a04:	490f      	ldr	r1, [pc, #60]	; (8013a44 <tcp_process+0x2b8>)
 8013a06:	4806      	ldr	r0, [pc, #24]	; (8013a20 <tcp_process+0x294>)
 8013a08:	f008 fd84 	bl	801c514 <iprintf>
          pcb->unsent = rseg->next;
 8013a0c:	69fb      	ldr	r3, [r7, #28]
 8013a0e:	681a      	ldr	r2, [r3, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	66da      	str	r2, [r3, #108]	; 0x6c
 8013a14:	e01c      	b.n	8013a50 <tcp_process+0x2c4>
 8013a16:	bf00      	nop
 8013a18:	0801fa40 	.word	0x0801fa40
 8013a1c:	0801fc78 	.word	0x0801fc78
 8013a20:	0801fa8c 	.word	0x0801fa8c
 8013a24:	2000c61c 	.word	0x2000c61c
 8013a28:	2000c614 	.word	0x2000c614
 8013a2c:	2000c610 	.word	0x2000c610
 8013a30:	0801fc94 	.word	0x0801fc94
 8013a34:	2000c61d 	.word	0x2000c61d
 8013a38:	2000c5d8 	.word	0x2000c5d8
 8013a3c:	2000c600 	.word	0x2000c600
 8013a40:	0801fcb4 	.word	0x0801fcb4
 8013a44:	0801fccc 	.word	0x0801fccc
        } else {
          pcb->unacked = rseg->next;
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013a50:	69f8      	ldr	r0, [r7, #28]
 8013a52:	f7fe fd22 	bl	801249a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d104      	bne.n	8013a68 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a64:	861a      	strh	r2, [r3, #48]	; 0x30
 8013a66:	e006      	b.n	8013a76 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2200      	movs	r2, #0
 8013a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d00a      	beq.n	8013a96 <tcp_process+0x30a>
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	6910      	ldr	r0, [r2, #16]
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	6879      	ldr	r1, [r7, #4]
 8013a8e:	4798      	blx	r3
 8013a90:	4603      	mov	r3, r0
 8013a92:	76bb      	strb	r3, [r7, #26]
 8013a94:	e001      	b.n	8013a9a <tcp_process+0x30e>
 8013a96:	2300      	movs	r3, #0
 8013a98:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013a9a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013a9e:	f113 0f0d 	cmn.w	r3, #13
 8013aa2:	d102      	bne.n	8013aaa <tcp_process+0x31e>
          return ERR_ABRT;
 8013aa4:	f06f 030c 	mvn.w	r3, #12
 8013aa8:	e250      	b.n	8013f4c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	8b5b      	ldrh	r3, [r3, #26]
 8013aae:	f043 0302 	orr.w	r3, r3, #2
 8013ab2:	b29a      	uxth	r2, r3
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013ab8:	e23a      	b.n	8013f30 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013aba:	4b98      	ldr	r3, [pc, #608]	; (8013d1c <tcp_process+0x590>)
 8013abc:	781b      	ldrb	r3, [r3, #0]
 8013abe:	f003 0310 	and.w	r3, r3, #16
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	f000 8234 	beq.w	8013f30 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ac8:	4b95      	ldr	r3, [pc, #596]	; (8013d20 <tcp_process+0x594>)
 8013aca:	6819      	ldr	r1, [r3, #0]
 8013acc:	4b95      	ldr	r3, [pc, #596]	; (8013d24 <tcp_process+0x598>)
 8013ace:	881b      	ldrh	r3, [r3, #0]
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	4b95      	ldr	r3, [pc, #596]	; (8013d28 <tcp_process+0x59c>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ad8:	4b94      	ldr	r3, [pc, #592]	; (8013d2c <tcp_process+0x5a0>)
 8013ada:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013adc:	885b      	ldrh	r3, [r3, #2]
 8013ade:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ae0:	4a92      	ldr	r2, [pc, #584]	; (8013d2c <tcp_process+0x5a0>)
 8013ae2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ae4:	8812      	ldrh	r2, [r2, #0]
 8013ae6:	b292      	uxth	r2, r2
 8013ae8:	9202      	str	r2, [sp, #8]
 8013aea:	9301      	str	r3, [sp, #4]
 8013aec:	4b90      	ldr	r3, [pc, #576]	; (8013d30 <tcp_process+0x5a4>)
 8013aee:	9300      	str	r3, [sp, #0]
 8013af0:	4b90      	ldr	r3, [pc, #576]	; (8013d34 <tcp_process+0x5a8>)
 8013af2:	4602      	mov	r2, r0
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f002 fc85 	bl	8016404 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013b00:	2b05      	cmp	r3, #5
 8013b02:	f200 8215 	bhi.w	8013f30 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f002 fa51 	bl	8015fb4 <tcp_rexmit_rto>
      break;
 8013b12:	e20d      	b.n	8013f30 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013b14:	4b81      	ldr	r3, [pc, #516]	; (8013d1c <tcp_process+0x590>)
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	f003 0310 	and.w	r3, r3, #16
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f000 80a1 	beq.w	8013c64 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013b22:	4b7f      	ldr	r3, [pc, #508]	; (8013d20 <tcp_process+0x594>)
 8013b24:	681a      	ldr	r2, [r3, #0]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b2a:	1ad3      	subs	r3, r2, r3
 8013b2c:	3b01      	subs	r3, #1
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	db7e      	blt.n	8013c30 <tcp_process+0x4a4>
 8013b32:	4b7b      	ldr	r3, [pc, #492]	; (8013d20 <tcp_process+0x594>)
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b3a:	1ad3      	subs	r3, r2, r3
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	dc77      	bgt.n	8013c30 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2204      	movs	r2, #4
 8013b44:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d102      	bne.n	8013b54 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013b4e:	23fa      	movs	r3, #250	; 0xfa
 8013b50:	76bb      	strb	r3, [r7, #26]
 8013b52:	e01d      	b.n	8013b90 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b58:	699b      	ldr	r3, [r3, #24]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d106      	bne.n	8013b6c <tcp_process+0x3e0>
 8013b5e:	4b76      	ldr	r3, [pc, #472]	; (8013d38 <tcp_process+0x5ac>)
 8013b60:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013b64:	4975      	ldr	r1, [pc, #468]	; (8013d3c <tcp_process+0x5b0>)
 8013b66:	4876      	ldr	r0, [pc, #472]	; (8013d40 <tcp_process+0x5b4>)
 8013b68:	f008 fcd4 	bl	801c514 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b70:	699b      	ldr	r3, [r3, #24]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d00a      	beq.n	8013b8c <tcp_process+0x400>
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b7a:	699b      	ldr	r3, [r3, #24]
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	6910      	ldr	r0, [r2, #16]
 8013b80:	2200      	movs	r2, #0
 8013b82:	6879      	ldr	r1, [r7, #4]
 8013b84:	4798      	blx	r3
 8013b86:	4603      	mov	r3, r0
 8013b88:	76bb      	strb	r3, [r7, #26]
 8013b8a:	e001      	b.n	8013b90 <tcp_process+0x404>
 8013b8c:	23f0      	movs	r3, #240	; 0xf0
 8013b8e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013b90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d00a      	beq.n	8013bae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013b98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013b9c:	f113 0f0d 	cmn.w	r3, #13
 8013ba0:	d002      	beq.n	8013ba8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f7fd ff8e 	bl	8011ac4 <tcp_abort>
            }
            return ERR_ABRT;
 8013ba8:	f06f 030c 	mvn.w	r3, #12
 8013bac:	e1ce      	b.n	8013f4c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f000 fae0 	bl	8014174 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013bb4:	4b63      	ldr	r3, [pc, #396]	; (8013d44 <tcp_process+0x5b8>)
 8013bb6:	881b      	ldrh	r3, [r3, #0]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d005      	beq.n	8013bc8 <tcp_process+0x43c>
            recv_acked--;
 8013bbc:	4b61      	ldr	r3, [pc, #388]	; (8013d44 <tcp_process+0x5b8>)
 8013bbe:	881b      	ldrh	r3, [r3, #0]
 8013bc0:	3b01      	subs	r3, #1
 8013bc2:	b29a      	uxth	r2, r3
 8013bc4:	4b5f      	ldr	r3, [pc, #380]	; (8013d44 <tcp_process+0x5b8>)
 8013bc6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bcc:	009a      	lsls	r2, r3, #2
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bd2:	005b      	lsls	r3, r3, #1
 8013bd4:	f241 111c 	movw	r1, #4380	; 0x111c
 8013bd8:	428b      	cmp	r3, r1
 8013bda:	bf38      	it	cc
 8013bdc:	460b      	movcc	r3, r1
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d204      	bcs.n	8013bec <tcp_process+0x460>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	b29b      	uxth	r3, r3
 8013bea:	e00d      	b.n	8013c08 <tcp_process+0x47c>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bf0:	005b      	lsls	r3, r3, #1
 8013bf2:	f241 121c 	movw	r2, #4380	; 0x111c
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d904      	bls.n	8013c04 <tcp_process+0x478>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bfe:	005b      	lsls	r3, r3, #1
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	e001      	b.n	8013c08 <tcp_process+0x47c>
 8013c04:	f241 131c 	movw	r3, #4380	; 0x111c
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013c0e:	4b4e      	ldr	r3, [pc, #312]	; (8013d48 <tcp_process+0x5bc>)
 8013c10:	781b      	ldrb	r3, [r3, #0]
 8013c12:	f003 0320 	and.w	r3, r3, #32
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d037      	beq.n	8013c8a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	8b5b      	ldrh	r3, [r3, #26]
 8013c1e:	f043 0302 	orr.w	r3, r3, #2
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2207      	movs	r2, #7
 8013c2c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013c2e:	e02c      	b.n	8013c8a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c30:	4b3b      	ldr	r3, [pc, #236]	; (8013d20 <tcp_process+0x594>)
 8013c32:	6819      	ldr	r1, [r3, #0]
 8013c34:	4b3b      	ldr	r3, [pc, #236]	; (8013d24 <tcp_process+0x598>)
 8013c36:	881b      	ldrh	r3, [r3, #0]
 8013c38:	461a      	mov	r2, r3
 8013c3a:	4b3b      	ldr	r3, [pc, #236]	; (8013d28 <tcp_process+0x59c>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c40:	4b3a      	ldr	r3, [pc, #232]	; (8013d2c <tcp_process+0x5a0>)
 8013c42:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c44:	885b      	ldrh	r3, [r3, #2]
 8013c46:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c48:	4a38      	ldr	r2, [pc, #224]	; (8013d2c <tcp_process+0x5a0>)
 8013c4a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c4c:	8812      	ldrh	r2, [r2, #0]
 8013c4e:	b292      	uxth	r2, r2
 8013c50:	9202      	str	r2, [sp, #8]
 8013c52:	9301      	str	r3, [sp, #4]
 8013c54:	4b36      	ldr	r3, [pc, #216]	; (8013d30 <tcp_process+0x5a4>)
 8013c56:	9300      	str	r3, [sp, #0]
 8013c58:	4b36      	ldr	r3, [pc, #216]	; (8013d34 <tcp_process+0x5a8>)
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f002 fbd1 	bl	8016404 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013c62:	e167      	b.n	8013f34 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013c64:	4b2d      	ldr	r3, [pc, #180]	; (8013d1c <tcp_process+0x590>)
 8013c66:	781b      	ldrb	r3, [r3, #0]
 8013c68:	f003 0302 	and.w	r3, r3, #2
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	f000 8161 	beq.w	8013f34 <tcp_process+0x7a8>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c76:	1e5a      	subs	r2, r3, #1
 8013c78:	4b2b      	ldr	r3, [pc, #172]	; (8013d28 <tcp_process+0x59c>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	f040 8159 	bne.w	8013f34 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f002 f9b8 	bl	8015ff8 <tcp_rexmit>
      break;
 8013c88:	e154      	b.n	8013f34 <tcp_process+0x7a8>
 8013c8a:	e153      	b.n	8013f34 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f000 fa71 	bl	8014174 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013c92:	4b2d      	ldr	r3, [pc, #180]	; (8013d48 <tcp_process+0x5bc>)
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	f003 0320 	and.w	r3, r3, #32
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	f000 814c 	beq.w	8013f38 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	8b5b      	ldrh	r3, [r3, #26]
 8013ca4:	f043 0302 	orr.w	r3, r3, #2
 8013ca8:	b29a      	uxth	r2, r3
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2207      	movs	r2, #7
 8013cb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013cb4:	e140      	b.n	8013f38 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 fa5c 	bl	8014174 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013cbc:	4b22      	ldr	r3, [pc, #136]	; (8013d48 <tcp_process+0x5bc>)
 8013cbe:	781b      	ldrb	r3, [r3, #0]
 8013cc0:	f003 0320 	and.w	r3, r3, #32
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d071      	beq.n	8013dac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013cc8:	4b14      	ldr	r3, [pc, #80]	; (8013d1c <tcp_process+0x590>)
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	f003 0310 	and.w	r3, r3, #16
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d060      	beq.n	8013d96 <tcp_process+0x60a>
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013cd8:	4b11      	ldr	r3, [pc, #68]	; (8013d20 <tcp_process+0x594>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d15a      	bne.n	8013d96 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d156      	bne.n	8013d96 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	8b5b      	ldrh	r3, [r3, #26]
 8013cec:	f043 0302 	orr.w	r3, r3, #2
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f7fe fdbc 	bl	8012874 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013cfc:	4b13      	ldr	r3, [pc, #76]	; (8013d4c <tcp_process+0x5c0>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	687a      	ldr	r2, [r7, #4]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d105      	bne.n	8013d12 <tcp_process+0x586>
 8013d06:	4b11      	ldr	r3, [pc, #68]	; (8013d4c <tcp_process+0x5c0>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	4a0f      	ldr	r2, [pc, #60]	; (8013d4c <tcp_process+0x5c0>)
 8013d0e:	6013      	str	r3, [r2, #0]
 8013d10:	e02e      	b.n	8013d70 <tcp_process+0x5e4>
 8013d12:	4b0e      	ldr	r3, [pc, #56]	; (8013d4c <tcp_process+0x5c0>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	617b      	str	r3, [r7, #20]
 8013d18:	e027      	b.n	8013d6a <tcp_process+0x5de>
 8013d1a:	bf00      	nop
 8013d1c:	2000c61c 	.word	0x2000c61c
 8013d20:	2000c614 	.word	0x2000c614
 8013d24:	2000c61a 	.word	0x2000c61a
 8013d28:	2000c610 	.word	0x2000c610
 8013d2c:	2000c600 	.word	0x2000c600
 8013d30:	20008e74 	.word	0x20008e74
 8013d34:	20008e78 	.word	0x20008e78
 8013d38:	0801fa40 	.word	0x0801fa40
 8013d3c:	0801fce0 	.word	0x0801fce0
 8013d40:	0801fa8c 	.word	0x0801fa8c
 8013d44:	2000c618 	.word	0x2000c618
 8013d48:	2000c61d 	.word	0x2000c61d
 8013d4c:	2000c5e4 	.word	0x2000c5e4
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	68db      	ldr	r3, [r3, #12]
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d104      	bne.n	8013d64 <tcp_process+0x5d8>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	68da      	ldr	r2, [r3, #12]
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	60da      	str	r2, [r3, #12]
 8013d62:	e005      	b.n	8013d70 <tcp_process+0x5e4>
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	617b      	str	r3, [r7, #20]
 8013d6a:	697b      	ldr	r3, [r7, #20]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d1ef      	bne.n	8013d50 <tcp_process+0x5c4>
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2200      	movs	r2, #0
 8013d74:	60da      	str	r2, [r3, #12]
 8013d76:	4b77      	ldr	r3, [pc, #476]	; (8013f54 <tcp_process+0x7c8>)
 8013d78:	2201      	movs	r2, #1
 8013d7a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	220a      	movs	r2, #10
 8013d80:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013d82:	4b75      	ldr	r3, [pc, #468]	; (8013f58 <tcp_process+0x7cc>)
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	60da      	str	r2, [r3, #12]
 8013d8a:	4a73      	ldr	r2, [pc, #460]	; (8013f58 <tcp_process+0x7cc>)
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6013      	str	r3, [r2, #0]
 8013d90:	f002 fcfa 	bl	8016788 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013d94:	e0d2      	b.n	8013f3c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	8b5b      	ldrh	r3, [r3, #26]
 8013d9a:	f043 0302 	orr.w	r3, r3, #2
 8013d9e:	b29a      	uxth	r2, r3
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2208      	movs	r2, #8
 8013da8:	751a      	strb	r2, [r3, #20]
      break;
 8013daa:	e0c7      	b.n	8013f3c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013dac:	4b6b      	ldr	r3, [pc, #428]	; (8013f5c <tcp_process+0x7d0>)
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	f003 0310 	and.w	r3, r3, #16
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	f000 80c1 	beq.w	8013f3c <tcp_process+0x7b0>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013dbe:	4b68      	ldr	r3, [pc, #416]	; (8013f60 <tcp_process+0x7d4>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	f040 80ba 	bne.w	8013f3c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	f040 80b5 	bne.w	8013f3c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2206      	movs	r2, #6
 8013dd6:	751a      	strb	r2, [r3, #20]
      break;
 8013dd8:	e0b0      	b.n	8013f3c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f000 f9ca 	bl	8014174 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013de0:	4b60      	ldr	r3, [pc, #384]	; (8013f64 <tcp_process+0x7d8>)
 8013de2:	781b      	ldrb	r3, [r3, #0]
 8013de4:	f003 0320 	and.w	r3, r3, #32
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	f000 80a9 	beq.w	8013f40 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	8b5b      	ldrh	r3, [r3, #26]
 8013df2:	f043 0302 	orr.w	r3, r3, #2
 8013df6:	b29a      	uxth	r2, r3
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f7fe fd39 	bl	8012874 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013e02:	4b59      	ldr	r3, [pc, #356]	; (8013f68 <tcp_process+0x7dc>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d105      	bne.n	8013e18 <tcp_process+0x68c>
 8013e0c:	4b56      	ldr	r3, [pc, #344]	; (8013f68 <tcp_process+0x7dc>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	68db      	ldr	r3, [r3, #12]
 8013e12:	4a55      	ldr	r2, [pc, #340]	; (8013f68 <tcp_process+0x7dc>)
 8013e14:	6013      	str	r3, [r2, #0]
 8013e16:	e013      	b.n	8013e40 <tcp_process+0x6b4>
 8013e18:	4b53      	ldr	r3, [pc, #332]	; (8013f68 <tcp_process+0x7dc>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	613b      	str	r3, [r7, #16]
 8013e1e:	e00c      	b.n	8013e3a <tcp_process+0x6ae>
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d104      	bne.n	8013e34 <tcp_process+0x6a8>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	68da      	ldr	r2, [r3, #12]
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	60da      	str	r2, [r3, #12]
 8013e32:	e005      	b.n	8013e40 <tcp_process+0x6b4>
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	68db      	ldr	r3, [r3, #12]
 8013e38:	613b      	str	r3, [r7, #16]
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d1ef      	bne.n	8013e20 <tcp_process+0x694>
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2200      	movs	r2, #0
 8013e44:	60da      	str	r2, [r3, #12]
 8013e46:	4b43      	ldr	r3, [pc, #268]	; (8013f54 <tcp_process+0x7c8>)
 8013e48:	2201      	movs	r2, #1
 8013e4a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	220a      	movs	r2, #10
 8013e50:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013e52:	4b41      	ldr	r3, [pc, #260]	; (8013f58 <tcp_process+0x7cc>)
 8013e54:	681a      	ldr	r2, [r3, #0]
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	60da      	str	r2, [r3, #12]
 8013e5a:	4a3f      	ldr	r2, [pc, #252]	; (8013f58 <tcp_process+0x7cc>)
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6013      	str	r3, [r2, #0]
 8013e60:	f002 fc92 	bl	8016788 <tcp_timer_needed>
      }
      break;
 8013e64:	e06c      	b.n	8013f40 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f000 f984 	bl	8014174 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013e6c:	4b3b      	ldr	r3, [pc, #236]	; (8013f5c <tcp_process+0x7d0>)
 8013e6e:	781b      	ldrb	r3, [r3, #0]
 8013e70:	f003 0310 	and.w	r3, r3, #16
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d065      	beq.n	8013f44 <tcp_process+0x7b8>
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e7c:	4b38      	ldr	r3, [pc, #224]	; (8013f60 <tcp_process+0x7d4>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d15f      	bne.n	8013f44 <tcp_process+0x7b8>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d15b      	bne.n	8013f44 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f7fe fcf1 	bl	8012874 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013e92:	4b35      	ldr	r3, [pc, #212]	; (8013f68 <tcp_process+0x7dc>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	687a      	ldr	r2, [r7, #4]
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d105      	bne.n	8013ea8 <tcp_process+0x71c>
 8013e9c:	4b32      	ldr	r3, [pc, #200]	; (8013f68 <tcp_process+0x7dc>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	68db      	ldr	r3, [r3, #12]
 8013ea2:	4a31      	ldr	r2, [pc, #196]	; (8013f68 <tcp_process+0x7dc>)
 8013ea4:	6013      	str	r3, [r2, #0]
 8013ea6:	e013      	b.n	8013ed0 <tcp_process+0x744>
 8013ea8:	4b2f      	ldr	r3, [pc, #188]	; (8013f68 <tcp_process+0x7dc>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	60fb      	str	r3, [r7, #12]
 8013eae:	e00c      	b.n	8013eca <tcp_process+0x73e>
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	68db      	ldr	r3, [r3, #12]
 8013eb4:	687a      	ldr	r2, [r7, #4]
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d104      	bne.n	8013ec4 <tcp_process+0x738>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	68da      	ldr	r2, [r3, #12]
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	60da      	str	r2, [r3, #12]
 8013ec2:	e005      	b.n	8013ed0 <tcp_process+0x744>
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	60fb      	str	r3, [r7, #12]
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d1ef      	bne.n	8013eb0 <tcp_process+0x724>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	60da      	str	r2, [r3, #12]
 8013ed6:	4b1f      	ldr	r3, [pc, #124]	; (8013f54 <tcp_process+0x7c8>)
 8013ed8:	2201      	movs	r2, #1
 8013eda:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	220a      	movs	r2, #10
 8013ee0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013ee2:	4b1d      	ldr	r3, [pc, #116]	; (8013f58 <tcp_process+0x7cc>)
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	60da      	str	r2, [r3, #12]
 8013eea:	4a1b      	ldr	r2, [pc, #108]	; (8013f58 <tcp_process+0x7cc>)
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6013      	str	r3, [r2, #0]
 8013ef0:	f002 fc4a 	bl	8016788 <tcp_timer_needed>
      }
      break;
 8013ef4:	e026      	b.n	8013f44 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f000 f93c 	bl	8014174 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013efc:	4b17      	ldr	r3, [pc, #92]	; (8013f5c <tcp_process+0x7d0>)
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	f003 0310 	and.w	r3, r3, #16
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d01f      	beq.n	8013f48 <tcp_process+0x7bc>
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f0c:	4b14      	ldr	r3, [pc, #80]	; (8013f60 <tcp_process+0x7d4>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d119      	bne.n	8013f48 <tcp_process+0x7bc>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d115      	bne.n	8013f48 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013f1c:	4b11      	ldr	r3, [pc, #68]	; (8013f64 <tcp_process+0x7d8>)
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	f043 0310 	orr.w	r3, r3, #16
 8013f24:	b2da      	uxtb	r2, r3
 8013f26:	4b0f      	ldr	r3, [pc, #60]	; (8013f64 <tcp_process+0x7d8>)
 8013f28:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013f2a:	e00d      	b.n	8013f48 <tcp_process+0x7bc>
    default:
      break;
 8013f2c:	bf00      	nop
 8013f2e:	e00c      	b.n	8013f4a <tcp_process+0x7be>
      break;
 8013f30:	bf00      	nop
 8013f32:	e00a      	b.n	8013f4a <tcp_process+0x7be>
      break;
 8013f34:	bf00      	nop
 8013f36:	e008      	b.n	8013f4a <tcp_process+0x7be>
      break;
 8013f38:	bf00      	nop
 8013f3a:	e006      	b.n	8013f4a <tcp_process+0x7be>
      break;
 8013f3c:	bf00      	nop
 8013f3e:	e004      	b.n	8013f4a <tcp_process+0x7be>
      break;
 8013f40:	bf00      	nop
 8013f42:	e002      	b.n	8013f4a <tcp_process+0x7be>
      break;
 8013f44:	bf00      	nop
 8013f46:	e000      	b.n	8013f4a <tcp_process+0x7be>
      break;
 8013f48:	bf00      	nop
  }
  return ERR_OK;
 8013f4a:	2300      	movs	r3, #0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3724      	adds	r7, #36	; 0x24
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd90      	pop	{r4, r7, pc}
 8013f54:	2000c5ec 	.word	0x2000c5ec
 8013f58:	2000c5e8 	.word	0x2000c5e8
 8013f5c:	2000c61c 	.word	0x2000c61c
 8013f60:	2000c614 	.word	0x2000c614
 8013f64:	2000c61d 	.word	0x2000c61d
 8013f68:	2000c5e4 	.word	0x2000c5e4

08013f6c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013f6c:	b590      	push	{r4, r7, lr}
 8013f6e:	b085      	sub	sp, #20
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <tcp_oos_insert_segment+0x1e>
 8013f7c:	4b3b      	ldr	r3, [pc, #236]	; (801406c <tcp_oos_insert_segment+0x100>)
 8013f7e:	f240 421f 	movw	r2, #1055	; 0x41f
 8013f82:	493b      	ldr	r1, [pc, #236]	; (8014070 <tcp_oos_insert_segment+0x104>)
 8013f84:	483b      	ldr	r0, [pc, #236]	; (8014074 <tcp_oos_insert_segment+0x108>)
 8013f86:	f008 fac5 	bl	801c514 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	68db      	ldr	r3, [r3, #12]
 8013f8e:	899b      	ldrh	r3, [r3, #12]
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fb fbf4 	bl	800f780 <lwip_htons>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	f003 0301 	and.w	r3, r3, #1
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d028      	beq.n	8013ff6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013fa4:	6838      	ldr	r0, [r7, #0]
 8013fa6:	f7fe fa63 	bl	8012470 <tcp_segs_free>
    next = NULL;
 8013faa:	2300      	movs	r3, #0
 8013fac:	603b      	str	r3, [r7, #0]
 8013fae:	e056      	b.n	801405e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	68db      	ldr	r3, [r3, #12]
 8013fb4:	899b      	ldrh	r3, [r3, #12]
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7fb fbe1 	bl	800f780 <lwip_htons>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	f003 0301 	and.w	r3, r3, #1
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d00d      	beq.n	8013fe6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	68db      	ldr	r3, [r3, #12]
 8013fce:	899b      	ldrh	r3, [r3, #12]
 8013fd0:	b29c      	uxth	r4, r3
 8013fd2:	2001      	movs	r0, #1
 8013fd4:	f7fb fbd4 	bl	800f780 <lwip_htons>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	461a      	mov	r2, r3
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	68db      	ldr	r3, [r3, #12]
 8013fe0:	4322      	orrs	r2, r4
 8013fe2:	b292      	uxth	r2, r2
 8013fe4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013ff0:	68f8      	ldr	r0, [r7, #12]
 8013ff2:	f7fe fa52 	bl	801249a <tcp_seg_free>
    while (next &&
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00e      	beq.n	801401a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	891b      	ldrh	r3, [r3, #8]
 8014000:	461a      	mov	r2, r3
 8014002:	4b1d      	ldr	r3, [pc, #116]	; (8014078 <tcp_oos_insert_segment+0x10c>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	441a      	add	r2, r3
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	68db      	ldr	r3, [r3, #12]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	6839      	ldr	r1, [r7, #0]
 8014010:	8909      	ldrh	r1, [r1, #8]
 8014012:	440b      	add	r3, r1
 8014014:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014016:	2b00      	cmp	r3, #0
 8014018:	daca      	bge.n	8013fb0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d01e      	beq.n	801405e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	891b      	ldrh	r3, [r3, #8]
 8014024:	461a      	mov	r2, r3
 8014026:	4b14      	ldr	r3, [pc, #80]	; (8014078 <tcp_oos_insert_segment+0x10c>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	441a      	add	r2, r3
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014034:	2b00      	cmp	r3, #0
 8014036:	dd12      	ble.n	801405e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	68db      	ldr	r3, [r3, #12]
 801403c:	685b      	ldr	r3, [r3, #4]
 801403e:	b29a      	uxth	r2, r3
 8014040:	4b0d      	ldr	r3, [pc, #52]	; (8014078 <tcp_oos_insert_segment+0x10c>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	b29b      	uxth	r3, r3
 8014046:	1ad3      	subs	r3, r2, r3
 8014048:	b29a      	uxth	r2, r3
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	685a      	ldr	r2, [r3, #4]
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	891b      	ldrh	r3, [r3, #8]
 8014056:	4619      	mov	r1, r3
 8014058:	4610      	mov	r0, r2
 801405a:	f7fc fe09 	bl	8010c70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	683a      	ldr	r2, [r7, #0]
 8014062:	601a      	str	r2, [r3, #0]
}
 8014064:	bf00      	nop
 8014066:	3714      	adds	r7, #20
 8014068:	46bd      	mov	sp, r7
 801406a:	bd90      	pop	{r4, r7, pc}
 801406c:	0801fa40 	.word	0x0801fa40
 8014070:	0801fd00 	.word	0x0801fd00
 8014074:	0801fa8c 	.word	0x0801fa8c
 8014078:	2000c610 	.word	0x2000c610

0801407c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801407c:	b5b0      	push	{r4, r5, r7, lr}
 801407e:	b086      	sub	sp, #24
 8014080:	af00      	add	r7, sp, #0
 8014082:	60f8      	str	r0, [r7, #12]
 8014084:	60b9      	str	r1, [r7, #8]
 8014086:	607a      	str	r2, [r7, #4]
 8014088:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801408a:	e03e      	b.n	801410a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	4618      	mov	r0, r3
 801409c:	f7fc fffc 	bl	8011098 <pbuf_clen>
 80140a0:	4603      	mov	r3, r0
 80140a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140aa:	8a7a      	ldrh	r2, [r7, #18]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d906      	bls.n	80140be <tcp_free_acked_segments+0x42>
 80140b0:	4b2a      	ldr	r3, [pc, #168]	; (801415c <tcp_free_acked_segments+0xe0>)
 80140b2:	f240 4257 	movw	r2, #1111	; 0x457
 80140b6:	492a      	ldr	r1, [pc, #168]	; (8014160 <tcp_free_acked_segments+0xe4>)
 80140b8:	482a      	ldr	r0, [pc, #168]	; (8014164 <tcp_free_acked_segments+0xe8>)
 80140ba:	f008 fa2b 	bl	801c514 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80140c4:	8a7b      	ldrh	r3, [r7, #18]
 80140c6:	1ad3      	subs	r3, r2, r3
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	891a      	ldrh	r2, [r3, #8]
 80140d4:	4b24      	ldr	r3, [pc, #144]	; (8014168 <tcp_free_acked_segments+0xec>)
 80140d6:	881b      	ldrh	r3, [r3, #0]
 80140d8:	4413      	add	r3, r2
 80140da:	b29a      	uxth	r2, r3
 80140dc:	4b22      	ldr	r3, [pc, #136]	; (8014168 <tcp_free_acked_segments+0xec>)
 80140de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80140e0:	6978      	ldr	r0, [r7, #20]
 80140e2:	f7fe f9da 	bl	801249a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d00c      	beq.n	801410a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d109      	bne.n	801410a <tcp_free_acked_segments+0x8e>
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d106      	bne.n	801410a <tcp_free_acked_segments+0x8e>
 80140fc:	4b17      	ldr	r3, [pc, #92]	; (801415c <tcp_free_acked_segments+0xe0>)
 80140fe:	f240 4261 	movw	r2, #1121	; 0x461
 8014102:	491a      	ldr	r1, [pc, #104]	; (801416c <tcp_free_acked_segments+0xf0>)
 8014104:	4817      	ldr	r0, [pc, #92]	; (8014164 <tcp_free_acked_segments+0xe8>)
 8014106:	f008 fa05 	bl	801c514 <iprintf>
  while (seg_list != NULL &&
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d020      	beq.n	8014152 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	68db      	ldr	r3, [r3, #12]
 8014114:	685b      	ldr	r3, [r3, #4]
 8014116:	4618      	mov	r0, r3
 8014118:	f7fb fb47 	bl	800f7aa <lwip_htonl>
 801411c:	4604      	mov	r4, r0
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	891b      	ldrh	r3, [r3, #8]
 8014122:	461d      	mov	r5, r3
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	68db      	ldr	r3, [r3, #12]
 8014128:	899b      	ldrh	r3, [r3, #12]
 801412a:	b29b      	uxth	r3, r3
 801412c:	4618      	mov	r0, r3
 801412e:	f7fb fb27 	bl	800f780 <lwip_htons>
 8014132:	4603      	mov	r3, r0
 8014134:	b2db      	uxtb	r3, r3
 8014136:	f003 0303 	and.w	r3, r3, #3
 801413a:	2b00      	cmp	r3, #0
 801413c:	d001      	beq.n	8014142 <tcp_free_acked_segments+0xc6>
 801413e:	2301      	movs	r3, #1
 8014140:	e000      	b.n	8014144 <tcp_free_acked_segments+0xc8>
 8014142:	2300      	movs	r3, #0
 8014144:	442b      	add	r3, r5
 8014146:	18e2      	adds	r2, r4, r3
 8014148:	4b09      	ldr	r3, [pc, #36]	; (8014170 <tcp_free_acked_segments+0xf4>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801414e:	2b00      	cmp	r3, #0
 8014150:	dd9c      	ble.n	801408c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014152:	68bb      	ldr	r3, [r7, #8]
}
 8014154:	4618      	mov	r0, r3
 8014156:	3718      	adds	r7, #24
 8014158:	46bd      	mov	sp, r7
 801415a:	bdb0      	pop	{r4, r5, r7, pc}
 801415c:	0801fa40 	.word	0x0801fa40
 8014160:	0801fd28 	.word	0x0801fd28
 8014164:	0801fa8c 	.word	0x0801fa8c
 8014168:	2000c618 	.word	0x2000c618
 801416c:	0801fd50 	.word	0x0801fd50
 8014170:	2000c614 	.word	0x2000c614

08014174 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014174:	b5b0      	push	{r4, r5, r7, lr}
 8014176:	b094      	sub	sp, #80	; 0x50
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801417c:	2300      	movs	r3, #0
 801417e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d106      	bne.n	8014194 <tcp_receive+0x20>
 8014186:	4b91      	ldr	r3, [pc, #580]	; (80143cc <tcp_receive+0x258>)
 8014188:	f240 427b 	movw	r2, #1147	; 0x47b
 801418c:	4990      	ldr	r1, [pc, #576]	; (80143d0 <tcp_receive+0x25c>)
 801418e:	4891      	ldr	r0, [pc, #580]	; (80143d4 <tcp_receive+0x260>)
 8014190:	f008 f9c0 	bl	801c514 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	7d1b      	ldrb	r3, [r3, #20]
 8014198:	2b03      	cmp	r3, #3
 801419a:	d806      	bhi.n	80141aa <tcp_receive+0x36>
 801419c:	4b8b      	ldr	r3, [pc, #556]	; (80143cc <tcp_receive+0x258>)
 801419e:	f240 427c 	movw	r2, #1148	; 0x47c
 80141a2:	498d      	ldr	r1, [pc, #564]	; (80143d8 <tcp_receive+0x264>)
 80141a4:	488b      	ldr	r0, [pc, #556]	; (80143d4 <tcp_receive+0x260>)
 80141a6:	f008 f9b5 	bl	801c514 <iprintf>

  if (flags & TCP_ACK) {
 80141aa:	4b8c      	ldr	r3, [pc, #560]	; (80143dc <tcp_receive+0x268>)
 80141ac:	781b      	ldrb	r3, [r3, #0]
 80141ae:	f003 0310 	and.w	r3, r3, #16
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	f000 8264 	beq.w	8014680 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141be:	461a      	mov	r2, r3
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141c4:	4413      	add	r3, r2
 80141c6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80141cc:	4b84      	ldr	r3, [pc, #528]	; (80143e0 <tcp_receive+0x26c>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	1ad3      	subs	r3, r2, r3
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	db1b      	blt.n	801420e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80141da:	4b81      	ldr	r3, [pc, #516]	; (80143e0 <tcp_receive+0x26c>)
 80141dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80141de:	429a      	cmp	r2, r3
 80141e0:	d106      	bne.n	80141f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80141e6:	4b7f      	ldr	r3, [pc, #508]	; (80143e4 <tcp_receive+0x270>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	1ad3      	subs	r3, r2, r3
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	db0e      	blt.n	801420e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80141f4:	4b7b      	ldr	r3, [pc, #492]	; (80143e4 <tcp_receive+0x270>)
 80141f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d125      	bne.n	8014248 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80141fc:	4b7a      	ldr	r3, [pc, #488]	; (80143e8 <tcp_receive+0x274>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	89db      	ldrh	r3, [r3, #14]
 8014202:	b29a      	uxth	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801420a:	429a      	cmp	r2, r3
 801420c:	d91c      	bls.n	8014248 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801420e:	4b76      	ldr	r3, [pc, #472]	; (80143e8 <tcp_receive+0x274>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	89db      	ldrh	r3, [r3, #14]
 8014214:	b29a      	uxth	r2, r3
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014228:	429a      	cmp	r2, r3
 801422a:	d205      	bcs.n	8014238 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014238:	4b69      	ldr	r3, [pc, #420]	; (80143e0 <tcp_receive+0x26c>)
 801423a:	681a      	ldr	r2, [r3, #0]
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014240:	4b68      	ldr	r3, [pc, #416]	; (80143e4 <tcp_receive+0x270>)
 8014242:	681a      	ldr	r2, [r3, #0]
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014248:	4b66      	ldr	r3, [pc, #408]	; (80143e4 <tcp_receive+0x270>)
 801424a:	681a      	ldr	r2, [r3, #0]
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014250:	1ad3      	subs	r3, r2, r3
 8014252:	2b00      	cmp	r3, #0
 8014254:	dc58      	bgt.n	8014308 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014256:	4b65      	ldr	r3, [pc, #404]	; (80143ec <tcp_receive+0x278>)
 8014258:	881b      	ldrh	r3, [r3, #0]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d14b      	bne.n	80142f6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014268:	4413      	add	r3, r2
 801426a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801426c:	429a      	cmp	r2, r3
 801426e:	d142      	bne.n	80142f6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014276:	2b00      	cmp	r3, #0
 8014278:	db3d      	blt.n	80142f6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801427e:	4b59      	ldr	r3, [pc, #356]	; (80143e4 <tcp_receive+0x270>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	429a      	cmp	r2, r3
 8014284:	d137      	bne.n	80142f6 <tcp_receive+0x182>
              found_dupack = 1;
 8014286:	2301      	movs	r3, #1
 8014288:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014290:	2bff      	cmp	r3, #255	; 0xff
 8014292:	d007      	beq.n	80142a4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801429a:	3301      	adds	r3, #1
 801429c:	b2da      	uxtb	r2, r3
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80142aa:	2b03      	cmp	r3, #3
 80142ac:	d91b      	bls.n	80142e6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142b8:	4413      	add	r3, r2
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d30a      	bcc.n	80142dc <tcp_receive+0x168>
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142d0:	4413      	add	r3, r2
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80142da:	e004      	b.n	80142e6 <tcp_receive+0x172>
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80142ec:	2b02      	cmp	r3, #2
 80142ee:	d902      	bls.n	80142f6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f001 feed 	bl	80160d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80142f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	f040 8161 	bne.w	80145c0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2200      	movs	r2, #0
 8014302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014306:	e15b      	b.n	80145c0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014308:	4b36      	ldr	r3, [pc, #216]	; (80143e4 <tcp_receive+0x270>)
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014310:	1ad3      	subs	r3, r2, r3
 8014312:	3b01      	subs	r3, #1
 8014314:	2b00      	cmp	r3, #0
 8014316:	f2c0 814e 	blt.w	80145b6 <tcp_receive+0x442>
 801431a:	4b32      	ldr	r3, [pc, #200]	; (80143e4 <tcp_receive+0x270>)
 801431c:	681a      	ldr	r2, [r3, #0]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014322:	1ad3      	subs	r3, r2, r3
 8014324:	2b00      	cmp	r3, #0
 8014326:	f300 8146 	bgt.w	80145b6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	8b5b      	ldrh	r3, [r3, #26]
 801432e:	f003 0304 	and.w	r3, r3, #4
 8014332:	2b00      	cmp	r3, #0
 8014334:	d010      	beq.n	8014358 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	8b5b      	ldrh	r3, [r3, #26]
 801433a:	f023 0304 	bic.w	r3, r3, #4
 801433e:	b29a      	uxth	r2, r3
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2200      	movs	r2, #0
 8014354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2200      	movs	r2, #0
 801435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014366:	10db      	asrs	r3, r3, #3
 8014368:	b21b      	sxth	r3, r3
 801436a:	b29a      	uxth	r2, r3
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014372:	b29b      	uxth	r3, r3
 8014374:	4413      	add	r3, r2
 8014376:	b29b      	uxth	r3, r3
 8014378:	b21a      	sxth	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014380:	4b18      	ldr	r3, [pc, #96]	; (80143e4 <tcp_receive+0x270>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	b29a      	uxth	r2, r3
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801438a:	b29b      	uxth	r3, r3
 801438c:	1ad3      	subs	r3, r2, r3
 801438e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2200      	movs	r2, #0
 8014394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014398:	4b12      	ldr	r3, [pc, #72]	; (80143e4 <tcp_receive+0x270>)
 801439a:	681a      	ldr	r2, [r3, #0]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	7d1b      	ldrb	r3, [r3, #20]
 80143a4:	2b03      	cmp	r3, #3
 80143a6:	f240 8097 	bls.w	80144d8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d245      	bcs.n	8014446 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	8b5b      	ldrh	r3, [r3, #26]
 80143be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d014      	beq.n	80143f0 <tcp_receive+0x27c>
 80143c6:	2301      	movs	r3, #1
 80143c8:	e013      	b.n	80143f2 <tcp_receive+0x27e>
 80143ca:	bf00      	nop
 80143cc:	0801fa40 	.word	0x0801fa40
 80143d0:	0801fd70 	.word	0x0801fd70
 80143d4:	0801fa8c 	.word	0x0801fa8c
 80143d8:	0801fd8c 	.word	0x0801fd8c
 80143dc:	2000c61c 	.word	0x2000c61c
 80143e0:	2000c610 	.word	0x2000c610
 80143e4:	2000c614 	.word	0x2000c614
 80143e8:	2000c600 	.word	0x2000c600
 80143ec:	2000c61a 	.word	0x2000c61a
 80143f0:	2302      	movs	r3, #2
 80143f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80143f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014400:	fb12 f303 	smulbb	r3, r2, r3
 8014404:	b29b      	uxth	r3, r3
 8014406:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014408:	4293      	cmp	r3, r2
 801440a:	bf28      	it	cs
 801440c:	4613      	movcs	r3, r2
 801440e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014416:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014418:	4413      	add	r3, r2
 801441a:	b29a      	uxth	r2, r3
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014422:	429a      	cmp	r2, r3
 8014424:	d309      	bcc.n	801443a <tcp_receive+0x2c6>
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801442c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801442e:	4413      	add	r3, r2
 8014430:	b29a      	uxth	r2, r3
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014438:	e04e      	b.n	80144d8 <tcp_receive+0x364>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014440:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014444:	e048      	b.n	80144d8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801444c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801444e:	4413      	add	r3, r2
 8014450:	b29a      	uxth	r2, r3
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014458:	429a      	cmp	r2, r3
 801445a:	d309      	bcc.n	8014470 <tcp_receive+0x2fc>
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014464:	4413      	add	r3, r2
 8014466:	b29a      	uxth	r2, r3
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801446e:	e004      	b.n	801447a <tcp_receive+0x306>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014486:	429a      	cmp	r2, r3
 8014488:	d326      	bcc.n	80144d8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014496:	1ad3      	subs	r3, r2, r3
 8014498:	b29a      	uxth	r2, r3
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144aa:	4413      	add	r3, r2
 80144ac:	b29a      	uxth	r2, r3
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d30a      	bcc.n	80144ce <tcp_receive+0x35a>
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144c2:	4413      	add	r3, r2
 80144c4:	b29a      	uxth	r2, r3
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80144cc:	e004      	b.n	80144d8 <tcp_receive+0x364>
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80144d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144e0:	4a98      	ldr	r2, [pc, #608]	; (8014744 <tcp_receive+0x5d0>)
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f7ff fdca 	bl	801407c <tcp_free_acked_segments>
 80144e8:	4602      	mov	r2, r0
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144f6:	4a94      	ldr	r2, [pc, #592]	; (8014748 <tcp_receive+0x5d4>)
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f7ff fdbf 	bl	801407c <tcp_free_acked_segments>
 80144fe:	4602      	mov	r2, r0
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014508:	2b00      	cmp	r3, #0
 801450a:	d104      	bne.n	8014516 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014512:	861a      	strh	r2, [r3, #48]	; 0x30
 8014514:	e002      	b.n	801451c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2200      	movs	r2, #0
 801451a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2200      	movs	r2, #0
 8014520:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014526:	2b00      	cmp	r3, #0
 8014528:	d103      	bne.n	8014532 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2200      	movs	r2, #0
 801452e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014538:	4b84      	ldr	r3, [pc, #528]	; (801474c <tcp_receive+0x5d8>)
 801453a:	881b      	ldrh	r3, [r3, #0]
 801453c:	4413      	add	r3, r2
 801453e:	b29a      	uxth	r2, r3
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	8b5b      	ldrh	r3, [r3, #26]
 801454a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801454e:	2b00      	cmp	r3, #0
 8014550:	d035      	beq.n	80145be <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014556:	2b00      	cmp	r3, #0
 8014558:	d118      	bne.n	801458c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801455e:	2b00      	cmp	r3, #0
 8014560:	d00c      	beq.n	801457c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801456a:	68db      	ldr	r3, [r3, #12]
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	4618      	mov	r0, r3
 8014570:	f7fb f91b 	bl	800f7aa <lwip_htonl>
 8014574:	4603      	mov	r3, r0
 8014576:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014578:	2b00      	cmp	r3, #0
 801457a:	dc20      	bgt.n	80145be <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	8b5b      	ldrh	r3, [r3, #26]
 8014580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014584:	b29a      	uxth	r2, r3
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801458a:	e018      	b.n	80145be <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014594:	68db      	ldr	r3, [r3, #12]
 8014596:	685b      	ldr	r3, [r3, #4]
 8014598:	4618      	mov	r0, r3
 801459a:	f7fb f906 	bl	800f7aa <lwip_htonl>
 801459e:	4603      	mov	r3, r0
 80145a0:	1ae3      	subs	r3, r4, r3
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	dc0b      	bgt.n	80145be <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	8b5b      	ldrh	r3, [r3, #26]
 80145aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80145ae:	b29a      	uxth	r2, r3
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80145b4:	e003      	b.n	80145be <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f001 ff76 	bl	80164a8 <tcp_send_empty_ack>
 80145bc:	e000      	b.n	80145c0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80145be:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d05b      	beq.n	8014680 <tcp_receive+0x50c>
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145cc:	4b60      	ldr	r3, [pc, #384]	; (8014750 <tcp_receive+0x5dc>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	1ad3      	subs	r3, r2, r3
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	da54      	bge.n	8014680 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80145d6:	4b5f      	ldr	r3, [pc, #380]	; (8014754 <tcp_receive+0x5e0>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	b29a      	uxth	r2, r3
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	1ad3      	subs	r3, r2, r3
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80145ea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80145f4:	10db      	asrs	r3, r3, #3
 80145f6:	b21b      	sxth	r3, r3
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	b29b      	uxth	r3, r3
 80145fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014608:	b29a      	uxth	r2, r3
 801460a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801460e:	4413      	add	r3, r2
 8014610:	b29b      	uxth	r3, r3
 8014612:	b21a      	sxth	r2, r3
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014618:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801461c:	2b00      	cmp	r3, #0
 801461e:	da05      	bge.n	801462c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014624:	425b      	negs	r3, r3
 8014626:	b29b      	uxth	r3, r3
 8014628:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801462c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014636:	109b      	asrs	r3, r3, #2
 8014638:	b21b      	sxth	r3, r3
 801463a:	b29b      	uxth	r3, r3
 801463c:	1ad3      	subs	r3, r2, r3
 801463e:	b29b      	uxth	r3, r3
 8014640:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801464a:	b29a      	uxth	r2, r3
 801464c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014650:	4413      	add	r3, r2
 8014652:	b29b      	uxth	r3, r3
 8014654:	b21a      	sxth	r2, r3
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014660:	10db      	asrs	r3, r3, #3
 8014662:	b21b      	sxth	r3, r3
 8014664:	b29a      	uxth	r2, r3
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801466c:	b29b      	uxth	r3, r3
 801466e:	4413      	add	r3, r2
 8014670:	b29b      	uxth	r3, r3
 8014672:	b21a      	sxth	r2, r3
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2200      	movs	r2, #0
 801467e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014680:	4b35      	ldr	r3, [pc, #212]	; (8014758 <tcp_receive+0x5e4>)
 8014682:	881b      	ldrh	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	f000 84e2 	beq.w	801504e <tcp_receive+0xeda>
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	7d1b      	ldrb	r3, [r3, #20]
 801468e:	2b06      	cmp	r3, #6
 8014690:	f200 84dd 	bhi.w	801504e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014698:	4b30      	ldr	r3, [pc, #192]	; (801475c <tcp_receive+0x5e8>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	1ad3      	subs	r3, r2, r3
 801469e:	3b01      	subs	r3, #1
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	f2c0 808f 	blt.w	80147c4 <tcp_receive+0x650>
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146aa:	4b2b      	ldr	r3, [pc, #172]	; (8014758 <tcp_receive+0x5e4>)
 80146ac:	881b      	ldrh	r3, [r3, #0]
 80146ae:	4619      	mov	r1, r3
 80146b0:	4b2a      	ldr	r3, [pc, #168]	; (801475c <tcp_receive+0x5e8>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	440b      	add	r3, r1
 80146b6:	1ad3      	subs	r3, r2, r3
 80146b8:	3301      	adds	r3, #1
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	f300 8082 	bgt.w	80147c4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80146c0:	4b27      	ldr	r3, [pc, #156]	; (8014760 <tcp_receive+0x5ec>)
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80146ca:	4b24      	ldr	r3, [pc, #144]	; (801475c <tcp_receive+0x5e8>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	1ad3      	subs	r3, r2, r3
 80146d0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80146d2:	4b23      	ldr	r3, [pc, #140]	; (8014760 <tcp_receive+0x5ec>)
 80146d4:	685b      	ldr	r3, [r3, #4]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d106      	bne.n	80146e8 <tcp_receive+0x574>
 80146da:	4b22      	ldr	r3, [pc, #136]	; (8014764 <tcp_receive+0x5f0>)
 80146dc:	f240 5294 	movw	r2, #1428	; 0x594
 80146e0:	4921      	ldr	r1, [pc, #132]	; (8014768 <tcp_receive+0x5f4>)
 80146e2:	4822      	ldr	r0, [pc, #136]	; (801476c <tcp_receive+0x5f8>)
 80146e4:	f007 ff16 	bl	801c514 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80146e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80146ee:	4293      	cmp	r3, r2
 80146f0:	d906      	bls.n	8014700 <tcp_receive+0x58c>
 80146f2:	4b1c      	ldr	r3, [pc, #112]	; (8014764 <tcp_receive+0x5f0>)
 80146f4:	f240 5295 	movw	r2, #1429	; 0x595
 80146f8:	491d      	ldr	r1, [pc, #116]	; (8014770 <tcp_receive+0x5fc>)
 80146fa:	481c      	ldr	r0, [pc, #112]	; (801476c <tcp_receive+0x5f8>)
 80146fc:	f007 ff0a 	bl	801c514 <iprintf>
      off = (u16_t)off32;
 8014700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014702:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014706:	4b16      	ldr	r3, [pc, #88]	; (8014760 <tcp_receive+0x5ec>)
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	891b      	ldrh	r3, [r3, #8]
 801470c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014710:	429a      	cmp	r2, r3
 8014712:	d906      	bls.n	8014722 <tcp_receive+0x5ae>
 8014714:	4b13      	ldr	r3, [pc, #76]	; (8014764 <tcp_receive+0x5f0>)
 8014716:	f240 5297 	movw	r2, #1431	; 0x597
 801471a:	4916      	ldr	r1, [pc, #88]	; (8014774 <tcp_receive+0x600>)
 801471c:	4813      	ldr	r0, [pc, #76]	; (801476c <tcp_receive+0x5f8>)
 801471e:	f007 fef9 	bl	801c514 <iprintf>
      inseg.len -= off;
 8014722:	4b0f      	ldr	r3, [pc, #60]	; (8014760 <tcp_receive+0x5ec>)
 8014724:	891a      	ldrh	r2, [r3, #8]
 8014726:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801472a:	1ad3      	subs	r3, r2, r3
 801472c:	b29a      	uxth	r2, r3
 801472e:	4b0c      	ldr	r3, [pc, #48]	; (8014760 <tcp_receive+0x5ec>)
 8014730:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014732:	4b0b      	ldr	r3, [pc, #44]	; (8014760 <tcp_receive+0x5ec>)
 8014734:	685b      	ldr	r3, [r3, #4]
 8014736:	891a      	ldrh	r2, [r3, #8]
 8014738:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801473c:	1ad3      	subs	r3, r2, r3
 801473e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014740:	e02a      	b.n	8014798 <tcp_receive+0x624>
 8014742:	bf00      	nop
 8014744:	0801fda8 	.word	0x0801fda8
 8014748:	0801fdb0 	.word	0x0801fdb0
 801474c:	2000c618 	.word	0x2000c618
 8014750:	2000c614 	.word	0x2000c614
 8014754:	2000c5d8 	.word	0x2000c5d8
 8014758:	2000c61a 	.word	0x2000c61a
 801475c:	2000c610 	.word	0x2000c610
 8014760:	2000c5f0 	.word	0x2000c5f0
 8014764:	0801fa40 	.word	0x0801fa40
 8014768:	0801fdb8 	.word	0x0801fdb8
 801476c:	0801fa8c 	.word	0x0801fa8c
 8014770:	0801fdc8 	.word	0x0801fdc8
 8014774:	0801fdd8 	.word	0x0801fdd8
        off -= p->len;
 8014778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801477a:	895b      	ldrh	r3, [r3, #10]
 801477c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014780:	1ad3      	subs	r3, r2, r3
 8014782:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014788:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801478a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801478e:	2200      	movs	r2, #0
 8014790:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801479a:	895b      	ldrh	r3, [r3, #10]
 801479c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d8e9      	bhi.n	8014778 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80147a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147a8:	4619      	mov	r1, r3
 80147aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80147ac:	f7fc fb60 	bl	8010e70 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147b4:	4a91      	ldr	r2, [pc, #580]	; (80149fc <tcp_receive+0x888>)
 80147b6:	6013      	str	r3, [r2, #0]
 80147b8:	4b91      	ldr	r3, [pc, #580]	; (8014a00 <tcp_receive+0x88c>)
 80147ba:	68db      	ldr	r3, [r3, #12]
 80147bc:	4a8f      	ldr	r2, [pc, #572]	; (80149fc <tcp_receive+0x888>)
 80147be:	6812      	ldr	r2, [r2, #0]
 80147c0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80147c2:	e00d      	b.n	80147e0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80147c4:	4b8d      	ldr	r3, [pc, #564]	; (80149fc <tcp_receive+0x888>)
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147cc:	1ad3      	subs	r3, r2, r3
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	da06      	bge.n	80147e0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	8b5b      	ldrh	r3, [r3, #26]
 80147d6:	f043 0302 	orr.w	r3, r3, #2
 80147da:	b29a      	uxth	r2, r3
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80147e0:	4b86      	ldr	r3, [pc, #536]	; (80149fc <tcp_receive+0x888>)
 80147e2:	681a      	ldr	r2, [r3, #0]
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147e8:	1ad3      	subs	r3, r2, r3
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	f2c0 842a 	blt.w	8015044 <tcp_receive+0xed0>
 80147f0:	4b82      	ldr	r3, [pc, #520]	; (80149fc <tcp_receive+0x888>)
 80147f2:	681a      	ldr	r2, [r3, #0]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147f8:	6879      	ldr	r1, [r7, #4]
 80147fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80147fc:	440b      	add	r3, r1
 80147fe:	1ad3      	subs	r3, r2, r3
 8014800:	3301      	adds	r3, #1
 8014802:	2b00      	cmp	r3, #0
 8014804:	f300 841e 	bgt.w	8015044 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801480c:	4b7b      	ldr	r3, [pc, #492]	; (80149fc <tcp_receive+0x888>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	429a      	cmp	r2, r3
 8014812:	f040 829a 	bne.w	8014d4a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014816:	4b7a      	ldr	r3, [pc, #488]	; (8014a00 <tcp_receive+0x88c>)
 8014818:	891c      	ldrh	r4, [r3, #8]
 801481a:	4b79      	ldr	r3, [pc, #484]	; (8014a00 <tcp_receive+0x88c>)
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	899b      	ldrh	r3, [r3, #12]
 8014820:	b29b      	uxth	r3, r3
 8014822:	4618      	mov	r0, r3
 8014824:	f7fa ffac 	bl	800f780 <lwip_htons>
 8014828:	4603      	mov	r3, r0
 801482a:	b2db      	uxtb	r3, r3
 801482c:	f003 0303 	and.w	r3, r3, #3
 8014830:	2b00      	cmp	r3, #0
 8014832:	d001      	beq.n	8014838 <tcp_receive+0x6c4>
 8014834:	2301      	movs	r3, #1
 8014836:	e000      	b.n	801483a <tcp_receive+0x6c6>
 8014838:	2300      	movs	r3, #0
 801483a:	4423      	add	r3, r4
 801483c:	b29a      	uxth	r2, r3
 801483e:	4b71      	ldr	r3, [pc, #452]	; (8014a04 <tcp_receive+0x890>)
 8014840:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014846:	4b6f      	ldr	r3, [pc, #444]	; (8014a04 <tcp_receive+0x890>)
 8014848:	881b      	ldrh	r3, [r3, #0]
 801484a:	429a      	cmp	r2, r3
 801484c:	d275      	bcs.n	801493a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801484e:	4b6c      	ldr	r3, [pc, #432]	; (8014a00 <tcp_receive+0x88c>)
 8014850:	68db      	ldr	r3, [r3, #12]
 8014852:	899b      	ldrh	r3, [r3, #12]
 8014854:	b29b      	uxth	r3, r3
 8014856:	4618      	mov	r0, r3
 8014858:	f7fa ff92 	bl	800f780 <lwip_htons>
 801485c:	4603      	mov	r3, r0
 801485e:	b2db      	uxtb	r3, r3
 8014860:	f003 0301 	and.w	r3, r3, #1
 8014864:	2b00      	cmp	r3, #0
 8014866:	d01f      	beq.n	80148a8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014868:	4b65      	ldr	r3, [pc, #404]	; (8014a00 <tcp_receive+0x88c>)
 801486a:	68db      	ldr	r3, [r3, #12]
 801486c:	899b      	ldrh	r3, [r3, #12]
 801486e:	b29b      	uxth	r3, r3
 8014870:	b21b      	sxth	r3, r3
 8014872:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014876:	b21c      	sxth	r4, r3
 8014878:	4b61      	ldr	r3, [pc, #388]	; (8014a00 <tcp_receive+0x88c>)
 801487a:	68db      	ldr	r3, [r3, #12]
 801487c:	899b      	ldrh	r3, [r3, #12]
 801487e:	b29b      	uxth	r3, r3
 8014880:	4618      	mov	r0, r3
 8014882:	f7fa ff7d 	bl	800f780 <lwip_htons>
 8014886:	4603      	mov	r3, r0
 8014888:	b2db      	uxtb	r3, r3
 801488a:	b29b      	uxth	r3, r3
 801488c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014890:	b29b      	uxth	r3, r3
 8014892:	4618      	mov	r0, r3
 8014894:	f7fa ff74 	bl	800f780 <lwip_htons>
 8014898:	4603      	mov	r3, r0
 801489a:	b21b      	sxth	r3, r3
 801489c:	4323      	orrs	r3, r4
 801489e:	b21a      	sxth	r2, r3
 80148a0:	4b57      	ldr	r3, [pc, #348]	; (8014a00 <tcp_receive+0x88c>)
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	b292      	uxth	r2, r2
 80148a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148ac:	4b54      	ldr	r3, [pc, #336]	; (8014a00 <tcp_receive+0x88c>)
 80148ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80148b0:	4b53      	ldr	r3, [pc, #332]	; (8014a00 <tcp_receive+0x88c>)
 80148b2:	68db      	ldr	r3, [r3, #12]
 80148b4:	899b      	ldrh	r3, [r3, #12]
 80148b6:	b29b      	uxth	r3, r3
 80148b8:	4618      	mov	r0, r3
 80148ba:	f7fa ff61 	bl	800f780 <lwip_htons>
 80148be:	4603      	mov	r3, r0
 80148c0:	b2db      	uxtb	r3, r3
 80148c2:	f003 0302 	and.w	r3, r3, #2
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d005      	beq.n	80148d6 <tcp_receive+0x762>
            inseg.len -= 1;
 80148ca:	4b4d      	ldr	r3, [pc, #308]	; (8014a00 <tcp_receive+0x88c>)
 80148cc:	891b      	ldrh	r3, [r3, #8]
 80148ce:	3b01      	subs	r3, #1
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	4b4b      	ldr	r3, [pc, #300]	; (8014a00 <tcp_receive+0x88c>)
 80148d4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80148d6:	4b4a      	ldr	r3, [pc, #296]	; (8014a00 <tcp_receive+0x88c>)
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	4a49      	ldr	r2, [pc, #292]	; (8014a00 <tcp_receive+0x88c>)
 80148dc:	8912      	ldrh	r2, [r2, #8]
 80148de:	4611      	mov	r1, r2
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7fc f9c5 	bl	8010c70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80148e6:	4b46      	ldr	r3, [pc, #280]	; (8014a00 <tcp_receive+0x88c>)
 80148e8:	891c      	ldrh	r4, [r3, #8]
 80148ea:	4b45      	ldr	r3, [pc, #276]	; (8014a00 <tcp_receive+0x88c>)
 80148ec:	68db      	ldr	r3, [r3, #12]
 80148ee:	899b      	ldrh	r3, [r3, #12]
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7fa ff44 	bl	800f780 <lwip_htons>
 80148f8:	4603      	mov	r3, r0
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	f003 0303 	and.w	r3, r3, #3
 8014900:	2b00      	cmp	r3, #0
 8014902:	d001      	beq.n	8014908 <tcp_receive+0x794>
 8014904:	2301      	movs	r3, #1
 8014906:	e000      	b.n	801490a <tcp_receive+0x796>
 8014908:	2300      	movs	r3, #0
 801490a:	4423      	add	r3, r4
 801490c:	b29a      	uxth	r2, r3
 801490e:	4b3d      	ldr	r3, [pc, #244]	; (8014a04 <tcp_receive+0x890>)
 8014910:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014912:	4b3c      	ldr	r3, [pc, #240]	; (8014a04 <tcp_receive+0x890>)
 8014914:	881b      	ldrh	r3, [r3, #0]
 8014916:	461a      	mov	r2, r3
 8014918:	4b38      	ldr	r3, [pc, #224]	; (80149fc <tcp_receive+0x888>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	441a      	add	r2, r3
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014922:	6879      	ldr	r1, [r7, #4]
 8014924:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014926:	440b      	add	r3, r1
 8014928:	429a      	cmp	r2, r3
 801492a:	d006      	beq.n	801493a <tcp_receive+0x7c6>
 801492c:	4b36      	ldr	r3, [pc, #216]	; (8014a08 <tcp_receive+0x894>)
 801492e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014932:	4936      	ldr	r1, [pc, #216]	; (8014a0c <tcp_receive+0x898>)
 8014934:	4836      	ldr	r0, [pc, #216]	; (8014a10 <tcp_receive+0x89c>)
 8014936:	f007 fded 	bl	801c514 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801493e:	2b00      	cmp	r3, #0
 8014940:	f000 80e7 	beq.w	8014b12 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014944:	4b2e      	ldr	r3, [pc, #184]	; (8014a00 <tcp_receive+0x88c>)
 8014946:	68db      	ldr	r3, [r3, #12]
 8014948:	899b      	ldrh	r3, [r3, #12]
 801494a:	b29b      	uxth	r3, r3
 801494c:	4618      	mov	r0, r3
 801494e:	f7fa ff17 	bl	800f780 <lwip_htons>
 8014952:	4603      	mov	r3, r0
 8014954:	b2db      	uxtb	r3, r3
 8014956:	f003 0301 	and.w	r3, r3, #1
 801495a:	2b00      	cmp	r3, #0
 801495c:	d010      	beq.n	8014980 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801495e:	e00a      	b.n	8014976 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014964:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014970:	68f8      	ldr	r0, [r7, #12]
 8014972:	f7fd fd92 	bl	801249a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801497a:	2b00      	cmp	r3, #0
 801497c:	d1f0      	bne.n	8014960 <tcp_receive+0x7ec>
 801497e:	e0c8      	b.n	8014b12 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014984:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014986:	e052      	b.n	8014a2e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	899b      	ldrh	r3, [r3, #12]
 801498e:	b29b      	uxth	r3, r3
 8014990:	4618      	mov	r0, r3
 8014992:	f7fa fef5 	bl	800f780 <lwip_htons>
 8014996:	4603      	mov	r3, r0
 8014998:	b2db      	uxtb	r3, r3
 801499a:	f003 0301 	and.w	r3, r3, #1
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d03d      	beq.n	8014a1e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80149a2:	4b17      	ldr	r3, [pc, #92]	; (8014a00 <tcp_receive+0x88c>)
 80149a4:	68db      	ldr	r3, [r3, #12]
 80149a6:	899b      	ldrh	r3, [r3, #12]
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	4618      	mov	r0, r3
 80149ac:	f7fa fee8 	bl	800f780 <lwip_htons>
 80149b0:	4603      	mov	r3, r0
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d130      	bne.n	8014a1e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80149bc:	4b10      	ldr	r3, [pc, #64]	; (8014a00 <tcp_receive+0x88c>)
 80149be:	68db      	ldr	r3, [r3, #12]
 80149c0:	899b      	ldrh	r3, [r3, #12]
 80149c2:	b29c      	uxth	r4, r3
 80149c4:	2001      	movs	r0, #1
 80149c6:	f7fa fedb 	bl	800f780 <lwip_htons>
 80149ca:	4603      	mov	r3, r0
 80149cc:	461a      	mov	r2, r3
 80149ce:	4b0c      	ldr	r3, [pc, #48]	; (8014a00 <tcp_receive+0x88c>)
 80149d0:	68db      	ldr	r3, [r3, #12]
 80149d2:	4322      	orrs	r2, r4
 80149d4:	b292      	uxth	r2, r2
 80149d6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80149d8:	4b09      	ldr	r3, [pc, #36]	; (8014a00 <tcp_receive+0x88c>)
 80149da:	891c      	ldrh	r4, [r3, #8]
 80149dc:	4b08      	ldr	r3, [pc, #32]	; (8014a00 <tcp_receive+0x88c>)
 80149de:	68db      	ldr	r3, [r3, #12]
 80149e0:	899b      	ldrh	r3, [r3, #12]
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7fa fecb 	bl	800f780 <lwip_htons>
 80149ea:	4603      	mov	r3, r0
 80149ec:	b2db      	uxtb	r3, r3
 80149ee:	f003 0303 	and.w	r3, r3, #3
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d00e      	beq.n	8014a14 <tcp_receive+0x8a0>
 80149f6:	2301      	movs	r3, #1
 80149f8:	e00d      	b.n	8014a16 <tcp_receive+0x8a2>
 80149fa:	bf00      	nop
 80149fc:	2000c610 	.word	0x2000c610
 8014a00:	2000c5f0 	.word	0x2000c5f0
 8014a04:	2000c61a 	.word	0x2000c61a
 8014a08:	0801fa40 	.word	0x0801fa40
 8014a0c:	0801fde8 	.word	0x0801fde8
 8014a10:	0801fa8c 	.word	0x0801fa8c
 8014a14:	2300      	movs	r3, #0
 8014a16:	4423      	add	r3, r4
 8014a18:	b29a      	uxth	r2, r3
 8014a1a:	4b98      	ldr	r3, [pc, #608]	; (8014c7c <tcp_receive+0xb08>)
 8014a1c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a20:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014a28:	6938      	ldr	r0, [r7, #16]
 8014a2a:	f7fd fd36 	bl	801249a <tcp_seg_free>
            while (next &&
 8014a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d00e      	beq.n	8014a52 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014a34:	4b91      	ldr	r3, [pc, #580]	; (8014c7c <tcp_receive+0xb08>)
 8014a36:	881b      	ldrh	r3, [r3, #0]
 8014a38:	461a      	mov	r2, r3
 8014a3a:	4b91      	ldr	r3, [pc, #580]	; (8014c80 <tcp_receive+0xb0c>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	441a      	add	r2, r3
 8014a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a42:	68db      	ldr	r3, [r3, #12]
 8014a44:	685b      	ldr	r3, [r3, #4]
 8014a46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014a48:	8909      	ldrh	r1, [r1, #8]
 8014a4a:	440b      	add	r3, r1
 8014a4c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	da9a      	bge.n	8014988 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d059      	beq.n	8014b0c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014a58:	4b88      	ldr	r3, [pc, #544]	; (8014c7c <tcp_receive+0xb08>)
 8014a5a:	881b      	ldrh	r3, [r3, #0]
 8014a5c:	461a      	mov	r2, r3
 8014a5e:	4b88      	ldr	r3, [pc, #544]	; (8014c80 <tcp_receive+0xb0c>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	441a      	add	r2, r3
 8014a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a66:	68db      	ldr	r3, [r3, #12]
 8014a68:	685b      	ldr	r3, [r3, #4]
 8014a6a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	dd4d      	ble.n	8014b0c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a72:	68db      	ldr	r3, [r3, #12]
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	b29a      	uxth	r2, r3
 8014a78:	4b81      	ldr	r3, [pc, #516]	; (8014c80 <tcp_receive+0xb0c>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	1ad3      	subs	r3, r2, r3
 8014a80:	b29a      	uxth	r2, r3
 8014a82:	4b80      	ldr	r3, [pc, #512]	; (8014c84 <tcp_receive+0xb10>)
 8014a84:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014a86:	4b7f      	ldr	r3, [pc, #508]	; (8014c84 <tcp_receive+0xb10>)
 8014a88:	68db      	ldr	r3, [r3, #12]
 8014a8a:	899b      	ldrh	r3, [r3, #12]
 8014a8c:	b29b      	uxth	r3, r3
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f7fa fe76 	bl	800f780 <lwip_htons>
 8014a94:	4603      	mov	r3, r0
 8014a96:	b2db      	uxtb	r3, r3
 8014a98:	f003 0302 	and.w	r3, r3, #2
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d005      	beq.n	8014aac <tcp_receive+0x938>
                inseg.len -= 1;
 8014aa0:	4b78      	ldr	r3, [pc, #480]	; (8014c84 <tcp_receive+0xb10>)
 8014aa2:	891b      	ldrh	r3, [r3, #8]
 8014aa4:	3b01      	subs	r3, #1
 8014aa6:	b29a      	uxth	r2, r3
 8014aa8:	4b76      	ldr	r3, [pc, #472]	; (8014c84 <tcp_receive+0xb10>)
 8014aaa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014aac:	4b75      	ldr	r3, [pc, #468]	; (8014c84 <tcp_receive+0xb10>)
 8014aae:	685b      	ldr	r3, [r3, #4]
 8014ab0:	4a74      	ldr	r2, [pc, #464]	; (8014c84 <tcp_receive+0xb10>)
 8014ab2:	8912      	ldrh	r2, [r2, #8]
 8014ab4:	4611      	mov	r1, r2
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7fc f8da 	bl	8010c70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014abc:	4b71      	ldr	r3, [pc, #452]	; (8014c84 <tcp_receive+0xb10>)
 8014abe:	891c      	ldrh	r4, [r3, #8]
 8014ac0:	4b70      	ldr	r3, [pc, #448]	; (8014c84 <tcp_receive+0xb10>)
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	899b      	ldrh	r3, [r3, #12]
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7fa fe59 	bl	800f780 <lwip_htons>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	b2db      	uxtb	r3, r3
 8014ad2:	f003 0303 	and.w	r3, r3, #3
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d001      	beq.n	8014ade <tcp_receive+0x96a>
 8014ada:	2301      	movs	r3, #1
 8014adc:	e000      	b.n	8014ae0 <tcp_receive+0x96c>
 8014ade:	2300      	movs	r3, #0
 8014ae0:	4423      	add	r3, r4
 8014ae2:	b29a      	uxth	r2, r3
 8014ae4:	4b65      	ldr	r3, [pc, #404]	; (8014c7c <tcp_receive+0xb08>)
 8014ae6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014ae8:	4b64      	ldr	r3, [pc, #400]	; (8014c7c <tcp_receive+0xb08>)
 8014aea:	881b      	ldrh	r3, [r3, #0]
 8014aec:	461a      	mov	r2, r3
 8014aee:	4b64      	ldr	r3, [pc, #400]	; (8014c80 <tcp_receive+0xb0c>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	441a      	add	r2, r3
 8014af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014af6:	68db      	ldr	r3, [r3, #12]
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d006      	beq.n	8014b0c <tcp_receive+0x998>
 8014afe:	4b62      	ldr	r3, [pc, #392]	; (8014c88 <tcp_receive+0xb14>)
 8014b00:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014b04:	4961      	ldr	r1, [pc, #388]	; (8014c8c <tcp_receive+0xb18>)
 8014b06:	4862      	ldr	r0, [pc, #392]	; (8014c90 <tcp_receive+0xb1c>)
 8014b08:	f007 fd04 	bl	801c514 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b10:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014b12:	4b5a      	ldr	r3, [pc, #360]	; (8014c7c <tcp_receive+0xb08>)
 8014b14:	881b      	ldrh	r3, [r3, #0]
 8014b16:	461a      	mov	r2, r3
 8014b18:	4b59      	ldr	r3, [pc, #356]	; (8014c80 <tcp_receive+0xb0c>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	441a      	add	r2, r3
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014b26:	4b55      	ldr	r3, [pc, #340]	; (8014c7c <tcp_receive+0xb08>)
 8014b28:	881b      	ldrh	r3, [r3, #0]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d206      	bcs.n	8014b3c <tcp_receive+0x9c8>
 8014b2e:	4b56      	ldr	r3, [pc, #344]	; (8014c88 <tcp_receive+0xb14>)
 8014b30:	f240 6207 	movw	r2, #1543	; 0x607
 8014b34:	4957      	ldr	r1, [pc, #348]	; (8014c94 <tcp_receive+0xb20>)
 8014b36:	4856      	ldr	r0, [pc, #344]	; (8014c90 <tcp_receive+0xb1c>)
 8014b38:	f007 fcec 	bl	801c514 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014b40:	4b4e      	ldr	r3, [pc, #312]	; (8014c7c <tcp_receive+0xb08>)
 8014b42:	881b      	ldrh	r3, [r3, #0]
 8014b44:	1ad3      	subs	r3, r2, r3
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f7fc ffc5 	bl	8011adc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014b52:	4b4c      	ldr	r3, [pc, #304]	; (8014c84 <tcp_receive+0xb10>)
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	891b      	ldrh	r3, [r3, #8]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d006      	beq.n	8014b6a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014b5c:	4b49      	ldr	r3, [pc, #292]	; (8014c84 <tcp_receive+0xb10>)
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	4a4d      	ldr	r2, [pc, #308]	; (8014c98 <tcp_receive+0xb24>)
 8014b62:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014b64:	4b47      	ldr	r3, [pc, #284]	; (8014c84 <tcp_receive+0xb10>)
 8014b66:	2200      	movs	r2, #0
 8014b68:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014b6a:	4b46      	ldr	r3, [pc, #280]	; (8014c84 <tcp_receive+0xb10>)
 8014b6c:	68db      	ldr	r3, [r3, #12]
 8014b6e:	899b      	ldrh	r3, [r3, #12]
 8014b70:	b29b      	uxth	r3, r3
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7fa fe04 	bl	800f780 <lwip_htons>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	f003 0301 	and.w	r3, r3, #1
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	f000 80b8 	beq.w	8014cf6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014b86:	4b45      	ldr	r3, [pc, #276]	; (8014c9c <tcp_receive+0xb28>)
 8014b88:	781b      	ldrb	r3, [r3, #0]
 8014b8a:	f043 0320 	orr.w	r3, r3, #32
 8014b8e:	b2da      	uxtb	r2, r3
 8014b90:	4b42      	ldr	r3, [pc, #264]	; (8014c9c <tcp_receive+0xb28>)
 8014b92:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014b94:	e0af      	b.n	8014cf6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b9a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ba0:	68db      	ldr	r3, [r3, #12]
 8014ba2:	685b      	ldr	r3, [r3, #4]
 8014ba4:	4a36      	ldr	r2, [pc, #216]	; (8014c80 <tcp_receive+0xb0c>)
 8014ba6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	891b      	ldrh	r3, [r3, #8]
 8014bac:	461c      	mov	r4, r3
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	68db      	ldr	r3, [r3, #12]
 8014bb2:	899b      	ldrh	r3, [r3, #12]
 8014bb4:	b29b      	uxth	r3, r3
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f7fa fde2 	bl	800f780 <lwip_htons>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	b2db      	uxtb	r3, r3
 8014bc0:	f003 0303 	and.w	r3, r3, #3
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d001      	beq.n	8014bcc <tcp_receive+0xa58>
 8014bc8:	2301      	movs	r3, #1
 8014bca:	e000      	b.n	8014bce <tcp_receive+0xa5a>
 8014bcc:	2300      	movs	r3, #0
 8014bce:	191a      	adds	r2, r3, r4
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bd4:	441a      	add	r2, r3
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014bde:	461c      	mov	r4, r3
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	891b      	ldrh	r3, [r3, #8]
 8014be4:	461d      	mov	r5, r3
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	899b      	ldrh	r3, [r3, #12]
 8014bec:	b29b      	uxth	r3, r3
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f7fa fdc6 	bl	800f780 <lwip_htons>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	b2db      	uxtb	r3, r3
 8014bf8:	f003 0303 	and.w	r3, r3, #3
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d001      	beq.n	8014c04 <tcp_receive+0xa90>
 8014c00:	2301      	movs	r3, #1
 8014c02:	e000      	b.n	8014c06 <tcp_receive+0xa92>
 8014c04:	2300      	movs	r3, #0
 8014c06:	442b      	add	r3, r5
 8014c08:	429c      	cmp	r4, r3
 8014c0a:	d206      	bcs.n	8014c1a <tcp_receive+0xaa6>
 8014c0c:	4b1e      	ldr	r3, [pc, #120]	; (8014c88 <tcp_receive+0xb14>)
 8014c0e:	f240 622b 	movw	r2, #1579	; 0x62b
 8014c12:	4923      	ldr	r1, [pc, #140]	; (8014ca0 <tcp_receive+0xb2c>)
 8014c14:	481e      	ldr	r0, [pc, #120]	; (8014c90 <tcp_receive+0xb1c>)
 8014c16:	f007 fc7d 	bl	801c514 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	891b      	ldrh	r3, [r3, #8]
 8014c1e:	461c      	mov	r4, r3
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	899b      	ldrh	r3, [r3, #12]
 8014c26:	b29b      	uxth	r3, r3
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7fa fda9 	bl	800f780 <lwip_htons>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	f003 0303 	and.w	r3, r3, #3
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d001      	beq.n	8014c3e <tcp_receive+0xaca>
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	e000      	b.n	8014c40 <tcp_receive+0xacc>
 8014c3e:	2300      	movs	r3, #0
 8014c40:	1919      	adds	r1, r3, r4
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014c46:	b28b      	uxth	r3, r1
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	b29a      	uxth	r2, r3
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f7fc ff43 	bl	8011adc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	891b      	ldrh	r3, [r3, #8]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d028      	beq.n	8014cb2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014c60:	4b0d      	ldr	r3, [pc, #52]	; (8014c98 <tcp_receive+0xb24>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d01d      	beq.n	8014ca4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014c68:	4b0b      	ldr	r3, [pc, #44]	; (8014c98 <tcp_receive+0xb24>)
 8014c6a:	681a      	ldr	r2, [r3, #0]
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	685b      	ldr	r3, [r3, #4]
 8014c70:	4619      	mov	r1, r3
 8014c72:	4610      	mov	r0, r2
 8014c74:	f7fc fa50 	bl	8011118 <pbuf_cat>
 8014c78:	e018      	b.n	8014cac <tcp_receive+0xb38>
 8014c7a:	bf00      	nop
 8014c7c:	2000c61a 	.word	0x2000c61a
 8014c80:	2000c610 	.word	0x2000c610
 8014c84:	2000c5f0 	.word	0x2000c5f0
 8014c88:	0801fa40 	.word	0x0801fa40
 8014c8c:	0801fe20 	.word	0x0801fe20
 8014c90:	0801fa8c 	.word	0x0801fa8c
 8014c94:	0801fe5c 	.word	0x0801fe5c
 8014c98:	2000c620 	.word	0x2000c620
 8014c9c:	2000c61d 	.word	0x2000c61d
 8014ca0:	0801fe7c 	.word	0x0801fe7c
            } else {
              recv_data = cseg->p;
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	685b      	ldr	r3, [r3, #4]
 8014ca8:	4a70      	ldr	r2, [pc, #448]	; (8014e6c <tcp_receive+0xcf8>)
 8014caa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014cac:	68bb      	ldr	r3, [r7, #8]
 8014cae:	2200      	movs	r2, #0
 8014cb0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	68db      	ldr	r3, [r3, #12]
 8014cb6:	899b      	ldrh	r3, [r3, #12]
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fa fd60 	bl	800f780 <lwip_htons>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	f003 0301 	and.w	r3, r3, #1
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d00d      	beq.n	8014ce8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014ccc:	4b68      	ldr	r3, [pc, #416]	; (8014e70 <tcp_receive+0xcfc>)
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	f043 0320 	orr.w	r3, r3, #32
 8014cd4:	b2da      	uxtb	r2, r3
 8014cd6:	4b66      	ldr	r3, [pc, #408]	; (8014e70 <tcp_receive+0xcfc>)
 8014cd8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	7d1b      	ldrb	r3, [r3, #20]
 8014cde:	2b04      	cmp	r3, #4
 8014ce0:	d102      	bne.n	8014ce8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2207      	movs	r2, #7
 8014ce6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	681a      	ldr	r2, [r3, #0]
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014cf0:	68b8      	ldr	r0, [r7, #8]
 8014cf2:	f7fd fbd2 	bl	801249a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d008      	beq.n	8014d10 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d02:	68db      	ldr	r3, [r3, #12]
 8014d04:	685a      	ldr	r2, [r3, #4]
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	f43f af43 	beq.w	8014b96 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	8b5b      	ldrh	r3, [r3, #26]
 8014d14:	f003 0301 	and.w	r3, r3, #1
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00e      	beq.n	8014d3a <tcp_receive+0xbc6>
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	8b5b      	ldrh	r3, [r3, #26]
 8014d20:	f023 0301 	bic.w	r3, r3, #1
 8014d24:	b29a      	uxth	r2, r3
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	835a      	strh	r2, [r3, #26]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	8b5b      	ldrh	r3, [r3, #26]
 8014d2e:	f043 0302 	orr.w	r3, r3, #2
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014d38:	e188      	b.n	801504c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	8b5b      	ldrh	r3, [r3, #26]
 8014d3e:	f043 0301 	orr.w	r3, r3, #1
 8014d42:	b29a      	uxth	r2, r3
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014d48:	e180      	b.n	801504c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d106      	bne.n	8014d60 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014d52:	4848      	ldr	r0, [pc, #288]	; (8014e74 <tcp_receive+0xd00>)
 8014d54:	f7fd fbba 	bl	80124cc <tcp_seg_copy>
 8014d58:	4602      	mov	r2, r0
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	675a      	str	r2, [r3, #116]	; 0x74
 8014d5e:	e16d      	b.n	801503c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014d60:	2300      	movs	r3, #0
 8014d62:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d68:	63bb      	str	r3, [r7, #56]	; 0x38
 8014d6a:	e157      	b.n	801501c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d6e:	68db      	ldr	r3, [r3, #12]
 8014d70:	685a      	ldr	r2, [r3, #4]
 8014d72:	4b41      	ldr	r3, [pc, #260]	; (8014e78 <tcp_receive+0xd04>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d11d      	bne.n	8014db6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014d7a:	4b3e      	ldr	r3, [pc, #248]	; (8014e74 <tcp_receive+0xd00>)
 8014d7c:	891a      	ldrh	r2, [r3, #8]
 8014d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d80:	891b      	ldrh	r3, [r3, #8]
 8014d82:	429a      	cmp	r2, r3
 8014d84:	f240 814f 	bls.w	8015026 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014d88:	483a      	ldr	r0, [pc, #232]	; (8014e74 <tcp_receive+0xd00>)
 8014d8a:	f7fd fb9f 	bl	80124cc <tcp_seg_copy>
 8014d8e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	f000 8149 	beq.w	801502a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d003      	beq.n	8014da6 <tcp_receive+0xc32>
                    prev->next = cseg;
 8014d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014da0:	697a      	ldr	r2, [r7, #20]
 8014da2:	601a      	str	r2, [r3, #0]
 8014da4:	e002      	b.n	8014dac <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	697a      	ldr	r2, [r7, #20]
 8014daa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014dae:	6978      	ldr	r0, [r7, #20]
 8014db0:	f7ff f8dc 	bl	8013f6c <tcp_oos_insert_segment>
                }
                break;
 8014db4:	e139      	b.n	801502a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d117      	bne.n	8014dec <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014dbc:	4b2e      	ldr	r3, [pc, #184]	; (8014e78 <tcp_receive+0xd04>)
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	685b      	ldr	r3, [r3, #4]
 8014dc6:	1ad3      	subs	r3, r2, r3
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	da57      	bge.n	8014e7c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014dcc:	4829      	ldr	r0, [pc, #164]	; (8014e74 <tcp_receive+0xd00>)
 8014dce:	f7fd fb7d 	bl	80124cc <tcp_seg_copy>
 8014dd2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014dd4:	69bb      	ldr	r3, [r7, #24]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	f000 8129 	beq.w	801502e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	69ba      	ldr	r2, [r7, #24]
 8014de0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014de2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014de4:	69b8      	ldr	r0, [r7, #24]
 8014de6:	f7ff f8c1 	bl	8013f6c <tcp_oos_insert_segment>
                  }
                  break;
 8014dea:	e120      	b.n	801502e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014dec:	4b22      	ldr	r3, [pc, #136]	; (8014e78 <tcp_receive+0xd04>)
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014df2:	68db      	ldr	r3, [r3, #12]
 8014df4:	685b      	ldr	r3, [r3, #4]
 8014df6:	1ad3      	subs	r3, r2, r3
 8014df8:	3b01      	subs	r3, #1
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	db3e      	blt.n	8014e7c <tcp_receive+0xd08>
 8014dfe:	4b1e      	ldr	r3, [pc, #120]	; (8014e78 <tcp_receive+0xd04>)
 8014e00:	681a      	ldr	r2, [r3, #0]
 8014e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e04:	68db      	ldr	r3, [r3, #12]
 8014e06:	685b      	ldr	r3, [r3, #4]
 8014e08:	1ad3      	subs	r3, r2, r3
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	dc35      	bgt.n	8014e7c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014e10:	4818      	ldr	r0, [pc, #96]	; (8014e74 <tcp_receive+0xd00>)
 8014e12:	f7fd fb5b 	bl	80124cc <tcp_seg_copy>
 8014e16:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	f000 8109 	beq.w	8015032 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e22:	68db      	ldr	r3, [r3, #12]
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e28:	8912      	ldrh	r2, [r2, #8]
 8014e2a:	441a      	add	r2, r3
 8014e2c:	4b12      	ldr	r3, [pc, #72]	; (8014e78 <tcp_receive+0xd04>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	1ad3      	subs	r3, r2, r3
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	dd12      	ble.n	8014e5c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014e36:	4b10      	ldr	r3, [pc, #64]	; (8014e78 <tcp_receive+0xd04>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	b29a      	uxth	r2, r3
 8014e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e3e:	68db      	ldr	r3, [r3, #12]
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	1ad3      	subs	r3, r2, r3
 8014e46:	b29a      	uxth	r2, r3
 8014e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e4e:	685a      	ldr	r2, [r3, #4]
 8014e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e52:	891b      	ldrh	r3, [r3, #8]
 8014e54:	4619      	mov	r1, r3
 8014e56:	4610      	mov	r0, r2
 8014e58:	f7fb ff0a 	bl	8010c70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e5e:	69fa      	ldr	r2, [r7, #28]
 8014e60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e64:	69f8      	ldr	r0, [r7, #28]
 8014e66:	f7ff f881 	bl	8013f6c <tcp_oos_insert_segment>
                  }
                  break;
 8014e6a:	e0e2      	b.n	8015032 <tcp_receive+0xebe>
 8014e6c:	2000c620 	.word	0x2000c620
 8014e70:	2000c61d 	.word	0x2000c61d
 8014e74:	2000c5f0 	.word	0x2000c5f0
 8014e78:	2000c610 	.word	0x2000c610
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e7e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	f040 80c6 	bne.w	8015016 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014e8a:	4b80      	ldr	r3, [pc, #512]	; (801508c <tcp_receive+0xf18>)
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e90:	68db      	ldr	r3, [r3, #12]
 8014e92:	685b      	ldr	r3, [r3, #4]
 8014e94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	f340 80bd 	ble.w	8015016 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	899b      	ldrh	r3, [r3, #12]
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7fa fc6b 	bl	800f780 <lwip_htons>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	b2db      	uxtb	r3, r3
 8014eae:	f003 0301 	and.w	r3, r3, #1
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	f040 80bf 	bne.w	8015036 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014eb8:	4875      	ldr	r0, [pc, #468]	; (8015090 <tcp_receive+0xf1c>)
 8014eba:	f7fd fb07 	bl	80124cc <tcp_seg_copy>
 8014ebe:	4602      	mov	r2, r0
 8014ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	f000 80b6 	beq.w	801503a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed0:	68db      	ldr	r3, [r3, #12]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ed6:	8912      	ldrh	r2, [r2, #8]
 8014ed8:	441a      	add	r2, r3
 8014eda:	4b6c      	ldr	r3, [pc, #432]	; (801508c <tcp_receive+0xf18>)
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	1ad3      	subs	r3, r2, r3
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	dd12      	ble.n	8014f0a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014ee4:	4b69      	ldr	r3, [pc, #420]	; (801508c <tcp_receive+0xf18>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	b29a      	uxth	r2, r3
 8014eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eec:	68db      	ldr	r3, [r3, #12]
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	b29b      	uxth	r3, r3
 8014ef2:	1ad3      	subs	r3, r2, r3
 8014ef4:	b29a      	uxth	r2, r3
 8014ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014efc:	685a      	ldr	r2, [r3, #4]
 8014efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f00:	891b      	ldrh	r3, [r3, #8]
 8014f02:	4619      	mov	r1, r3
 8014f04:	4610      	mov	r0, r2
 8014f06:	f7fb feb3 	bl	8010c70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014f0a:	4b62      	ldr	r3, [pc, #392]	; (8015094 <tcp_receive+0xf20>)
 8014f0c:	881b      	ldrh	r3, [r3, #0]
 8014f0e:	461a      	mov	r2, r3
 8014f10:	4b5e      	ldr	r3, [pc, #376]	; (801508c <tcp_receive+0xf18>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	441a      	add	r2, r3
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f1a:	6879      	ldr	r1, [r7, #4]
 8014f1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014f1e:	440b      	add	r3, r1
 8014f20:	1ad3      	subs	r3, r2, r3
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	f340 8089 	ble.w	801503a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	68db      	ldr	r3, [r3, #12]
 8014f2e:	899b      	ldrh	r3, [r3, #12]
 8014f30:	b29b      	uxth	r3, r3
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7fa fc24 	bl	800f780 <lwip_htons>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	b2db      	uxtb	r3, r3
 8014f3c:	f003 0301 	and.w	r3, r3, #1
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d022      	beq.n	8014f8a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	68db      	ldr	r3, [r3, #12]
 8014f4a:	899b      	ldrh	r3, [r3, #12]
 8014f4c:	b29b      	uxth	r3, r3
 8014f4e:	b21b      	sxth	r3, r3
 8014f50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014f54:	b21c      	sxth	r4, r3
 8014f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	68db      	ldr	r3, [r3, #12]
 8014f5c:	899b      	ldrh	r3, [r3, #12]
 8014f5e:	b29b      	uxth	r3, r3
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7fa fc0d 	bl	800f780 <lwip_htons>
 8014f66:	4603      	mov	r3, r0
 8014f68:	b2db      	uxtb	r3, r3
 8014f6a:	b29b      	uxth	r3, r3
 8014f6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7fa fc04 	bl	800f780 <lwip_htons>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	b21b      	sxth	r3, r3
 8014f7c:	4323      	orrs	r3, r4
 8014f7e:	b21a      	sxth	r2, r3
 8014f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	b292      	uxth	r2, r2
 8014f88:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f8e:	b29a      	uxth	r2, r3
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f94:	4413      	add	r3, r2
 8014f96:	b299      	uxth	r1, r3
 8014f98:	4b3c      	ldr	r3, [pc, #240]	; (801508c <tcp_receive+0xf18>)
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	b29a      	uxth	r2, r3
 8014f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	1a8a      	subs	r2, r1, r2
 8014fa4:	b292      	uxth	r2, r2
 8014fa6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	685a      	ldr	r2, [r3, #4]
 8014fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	891b      	ldrh	r3, [r3, #8]
 8014fb4:	4619      	mov	r1, r3
 8014fb6:	4610      	mov	r0, r2
 8014fb8:	f7fb fe5a 	bl	8010c70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	891c      	ldrh	r4, [r3, #8]
 8014fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	68db      	ldr	r3, [r3, #12]
 8014fc8:	899b      	ldrh	r3, [r3, #12]
 8014fca:	b29b      	uxth	r3, r3
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7fa fbd7 	bl	800f780 <lwip_htons>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	b2db      	uxtb	r3, r3
 8014fd6:	f003 0303 	and.w	r3, r3, #3
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d001      	beq.n	8014fe2 <tcp_receive+0xe6e>
 8014fde:	2301      	movs	r3, #1
 8014fe0:	e000      	b.n	8014fe4 <tcp_receive+0xe70>
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	4423      	add	r3, r4
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	4b2a      	ldr	r3, [pc, #168]	; (8015094 <tcp_receive+0xf20>)
 8014fea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014fec:	4b29      	ldr	r3, [pc, #164]	; (8015094 <tcp_receive+0xf20>)
 8014fee:	881b      	ldrh	r3, [r3, #0]
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	4b26      	ldr	r3, [pc, #152]	; (801508c <tcp_receive+0xf18>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	441a      	add	r2, r3
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ffc:	6879      	ldr	r1, [r7, #4]
 8014ffe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015000:	440b      	add	r3, r1
 8015002:	429a      	cmp	r2, r3
 8015004:	d019      	beq.n	801503a <tcp_receive+0xec6>
 8015006:	4b24      	ldr	r3, [pc, #144]	; (8015098 <tcp_receive+0xf24>)
 8015008:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801500c:	4923      	ldr	r1, [pc, #140]	; (801509c <tcp_receive+0xf28>)
 801500e:	4824      	ldr	r0, [pc, #144]	; (80150a0 <tcp_receive+0xf2c>)
 8015010:	f007 fa80 	bl	801c514 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015014:	e011      	b.n	801503a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	63bb      	str	r3, [r7, #56]	; 0x38
 801501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801501e:	2b00      	cmp	r3, #0
 8015020:	f47f aea4 	bne.w	8014d6c <tcp_receive+0xbf8>
 8015024:	e00a      	b.n	801503c <tcp_receive+0xec8>
                break;
 8015026:	bf00      	nop
 8015028:	e008      	b.n	801503c <tcp_receive+0xec8>
                break;
 801502a:	bf00      	nop
 801502c:	e006      	b.n	801503c <tcp_receive+0xec8>
                  break;
 801502e:	bf00      	nop
 8015030:	e004      	b.n	801503c <tcp_receive+0xec8>
                  break;
 8015032:	bf00      	nop
 8015034:	e002      	b.n	801503c <tcp_receive+0xec8>
                  break;
 8015036:	bf00      	nop
 8015038:	e000      	b.n	801503c <tcp_receive+0xec8>
                break;
 801503a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	f001 fa33 	bl	80164a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015042:	e003      	b.n	801504c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f001 fa2f 	bl	80164a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801504a:	e01a      	b.n	8015082 <tcp_receive+0xf0e>
 801504c:	e019      	b.n	8015082 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801504e:	4b0f      	ldr	r3, [pc, #60]	; (801508c <tcp_receive+0xf18>)
 8015050:	681a      	ldr	r2, [r3, #0]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015056:	1ad3      	subs	r3, r2, r3
 8015058:	2b00      	cmp	r3, #0
 801505a:	db0a      	blt.n	8015072 <tcp_receive+0xefe>
 801505c:	4b0b      	ldr	r3, [pc, #44]	; (801508c <tcp_receive+0xf18>)
 801505e:	681a      	ldr	r2, [r3, #0]
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015064:	6879      	ldr	r1, [r7, #4]
 8015066:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015068:	440b      	add	r3, r1
 801506a:	1ad3      	subs	r3, r2, r3
 801506c:	3301      	adds	r3, #1
 801506e:	2b00      	cmp	r3, #0
 8015070:	dd07      	ble.n	8015082 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	8b5b      	ldrh	r3, [r3, #26]
 8015076:	f043 0302 	orr.w	r3, r3, #2
 801507a:	b29a      	uxth	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015080:	e7ff      	b.n	8015082 <tcp_receive+0xf0e>
 8015082:	bf00      	nop
 8015084:	3750      	adds	r7, #80	; 0x50
 8015086:	46bd      	mov	sp, r7
 8015088:	bdb0      	pop	{r4, r5, r7, pc}
 801508a:	bf00      	nop
 801508c:	2000c610 	.word	0x2000c610
 8015090:	2000c5f0 	.word	0x2000c5f0
 8015094:	2000c61a 	.word	0x2000c61a
 8015098:	0801fa40 	.word	0x0801fa40
 801509c:	0801fde8 	.word	0x0801fde8
 80150a0:	0801fa8c 	.word	0x0801fa8c

080150a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80150a4:	b480      	push	{r7}
 80150a6:	b083      	sub	sp, #12
 80150a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80150aa:	4b15      	ldr	r3, [pc, #84]	; (8015100 <tcp_get_next_optbyte+0x5c>)
 80150ac:	881b      	ldrh	r3, [r3, #0]
 80150ae:	1c5a      	adds	r2, r3, #1
 80150b0:	b291      	uxth	r1, r2
 80150b2:	4a13      	ldr	r2, [pc, #76]	; (8015100 <tcp_get_next_optbyte+0x5c>)
 80150b4:	8011      	strh	r1, [r2, #0]
 80150b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80150b8:	4b12      	ldr	r3, [pc, #72]	; (8015104 <tcp_get_next_optbyte+0x60>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d004      	beq.n	80150ca <tcp_get_next_optbyte+0x26>
 80150c0:	4b11      	ldr	r3, [pc, #68]	; (8015108 <tcp_get_next_optbyte+0x64>)
 80150c2:	881b      	ldrh	r3, [r3, #0]
 80150c4:	88fa      	ldrh	r2, [r7, #6]
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d208      	bcs.n	80150dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80150ca:	4b10      	ldr	r3, [pc, #64]	; (801510c <tcp_get_next_optbyte+0x68>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	3314      	adds	r3, #20
 80150d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80150d2:	88fb      	ldrh	r3, [r7, #6]
 80150d4:	683a      	ldr	r2, [r7, #0]
 80150d6:	4413      	add	r3, r2
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	e00b      	b.n	80150f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80150dc:	88fb      	ldrh	r3, [r7, #6]
 80150de:	b2da      	uxtb	r2, r3
 80150e0:	4b09      	ldr	r3, [pc, #36]	; (8015108 <tcp_get_next_optbyte+0x64>)
 80150e2:	881b      	ldrh	r3, [r3, #0]
 80150e4:	b2db      	uxtb	r3, r3
 80150e6:	1ad3      	subs	r3, r2, r3
 80150e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80150ea:	4b06      	ldr	r3, [pc, #24]	; (8015104 <tcp_get_next_optbyte+0x60>)
 80150ec:	681a      	ldr	r2, [r3, #0]
 80150ee:	797b      	ldrb	r3, [r7, #5]
 80150f0:	4413      	add	r3, r2
 80150f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	370c      	adds	r7, #12
 80150f8:	46bd      	mov	sp, r7
 80150fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fe:	4770      	bx	lr
 8015100:	2000c60c 	.word	0x2000c60c
 8015104:	2000c608 	.word	0x2000c608
 8015108:	2000c606 	.word	0x2000c606
 801510c:	2000c600 	.word	0x2000c600

08015110 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b084      	sub	sp, #16
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d106      	bne.n	801512c <tcp_parseopt+0x1c>
 801511e:	4b32      	ldr	r3, [pc, #200]	; (80151e8 <tcp_parseopt+0xd8>)
 8015120:	f240 727d 	movw	r2, #1917	; 0x77d
 8015124:	4931      	ldr	r1, [pc, #196]	; (80151ec <tcp_parseopt+0xdc>)
 8015126:	4832      	ldr	r0, [pc, #200]	; (80151f0 <tcp_parseopt+0xe0>)
 8015128:	f007 f9f4 	bl	801c514 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801512c:	4b31      	ldr	r3, [pc, #196]	; (80151f4 <tcp_parseopt+0xe4>)
 801512e:	881b      	ldrh	r3, [r3, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d055      	beq.n	80151e0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015134:	4b30      	ldr	r3, [pc, #192]	; (80151f8 <tcp_parseopt+0xe8>)
 8015136:	2200      	movs	r2, #0
 8015138:	801a      	strh	r2, [r3, #0]
 801513a:	e045      	b.n	80151c8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801513c:	f7ff ffb2 	bl	80150a4 <tcp_get_next_optbyte>
 8015140:	4603      	mov	r3, r0
 8015142:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015144:	7bfb      	ldrb	r3, [r7, #15]
 8015146:	2b02      	cmp	r3, #2
 8015148:	d006      	beq.n	8015158 <tcp_parseopt+0x48>
 801514a:	2b02      	cmp	r3, #2
 801514c:	dc2b      	bgt.n	80151a6 <tcp_parseopt+0x96>
 801514e:	2b00      	cmp	r3, #0
 8015150:	d041      	beq.n	80151d6 <tcp_parseopt+0xc6>
 8015152:	2b01      	cmp	r3, #1
 8015154:	d127      	bne.n	80151a6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015156:	e037      	b.n	80151c8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015158:	f7ff ffa4 	bl	80150a4 <tcp_get_next_optbyte>
 801515c:	4603      	mov	r3, r0
 801515e:	2b04      	cmp	r3, #4
 8015160:	d13b      	bne.n	80151da <tcp_parseopt+0xca>
 8015162:	4b25      	ldr	r3, [pc, #148]	; (80151f8 <tcp_parseopt+0xe8>)
 8015164:	881b      	ldrh	r3, [r3, #0]
 8015166:	3301      	adds	r3, #1
 8015168:	4a22      	ldr	r2, [pc, #136]	; (80151f4 <tcp_parseopt+0xe4>)
 801516a:	8812      	ldrh	r2, [r2, #0]
 801516c:	4293      	cmp	r3, r2
 801516e:	da34      	bge.n	80151da <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015170:	f7ff ff98 	bl	80150a4 <tcp_get_next_optbyte>
 8015174:	4603      	mov	r3, r0
 8015176:	b29b      	uxth	r3, r3
 8015178:	021b      	lsls	r3, r3, #8
 801517a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801517c:	f7ff ff92 	bl	80150a4 <tcp_get_next_optbyte>
 8015180:	4603      	mov	r3, r0
 8015182:	b29a      	uxth	r2, r3
 8015184:	89bb      	ldrh	r3, [r7, #12]
 8015186:	4313      	orrs	r3, r2
 8015188:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801518a:	89bb      	ldrh	r3, [r7, #12]
 801518c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015190:	d804      	bhi.n	801519c <tcp_parseopt+0x8c>
 8015192:	89bb      	ldrh	r3, [r7, #12]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d001      	beq.n	801519c <tcp_parseopt+0x8c>
 8015198:	89ba      	ldrh	r2, [r7, #12]
 801519a:	e001      	b.n	80151a0 <tcp_parseopt+0x90>
 801519c:	f44f 7206 	mov.w	r2, #536	; 0x218
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80151a4:	e010      	b.n	80151c8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80151a6:	f7ff ff7d 	bl	80150a4 <tcp_get_next_optbyte>
 80151aa:	4603      	mov	r3, r0
 80151ac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80151ae:	7afb      	ldrb	r3, [r7, #11]
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d914      	bls.n	80151de <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80151b4:	7afb      	ldrb	r3, [r7, #11]
 80151b6:	b29a      	uxth	r2, r3
 80151b8:	4b0f      	ldr	r3, [pc, #60]	; (80151f8 <tcp_parseopt+0xe8>)
 80151ba:	881b      	ldrh	r3, [r3, #0]
 80151bc:	4413      	add	r3, r2
 80151be:	b29b      	uxth	r3, r3
 80151c0:	3b02      	subs	r3, #2
 80151c2:	b29a      	uxth	r2, r3
 80151c4:	4b0c      	ldr	r3, [pc, #48]	; (80151f8 <tcp_parseopt+0xe8>)
 80151c6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80151c8:	4b0b      	ldr	r3, [pc, #44]	; (80151f8 <tcp_parseopt+0xe8>)
 80151ca:	881a      	ldrh	r2, [r3, #0]
 80151cc:	4b09      	ldr	r3, [pc, #36]	; (80151f4 <tcp_parseopt+0xe4>)
 80151ce:	881b      	ldrh	r3, [r3, #0]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d3b3      	bcc.n	801513c <tcp_parseopt+0x2c>
 80151d4:	e004      	b.n	80151e0 <tcp_parseopt+0xd0>
          return;
 80151d6:	bf00      	nop
 80151d8:	e002      	b.n	80151e0 <tcp_parseopt+0xd0>
            return;
 80151da:	bf00      	nop
 80151dc:	e000      	b.n	80151e0 <tcp_parseopt+0xd0>
            return;
 80151de:	bf00      	nop
      }
    }
  }
}
 80151e0:	3710      	adds	r7, #16
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}
 80151e6:	bf00      	nop
 80151e8:	0801fa40 	.word	0x0801fa40
 80151ec:	0801fea4 	.word	0x0801fea4
 80151f0:	0801fa8c 	.word	0x0801fa8c
 80151f4:	2000c604 	.word	0x2000c604
 80151f8:	2000c60c 	.word	0x2000c60c

080151fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80151fc:	b480      	push	{r7}
 80151fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015200:	4b05      	ldr	r3, [pc, #20]	; (8015218 <tcp_trigger_input_pcb_close+0x1c>)
 8015202:	781b      	ldrb	r3, [r3, #0]
 8015204:	f043 0310 	orr.w	r3, r3, #16
 8015208:	b2da      	uxtb	r2, r3
 801520a:	4b03      	ldr	r3, [pc, #12]	; (8015218 <tcp_trigger_input_pcb_close+0x1c>)
 801520c:	701a      	strb	r2, [r3, #0]
}
 801520e:	bf00      	nop
 8015210:	46bd      	mov	sp, r7
 8015212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015216:	4770      	bx	lr
 8015218:	2000c61d 	.word	0x2000c61d

0801521c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b084      	sub	sp, #16
 8015220:	af00      	add	r7, sp, #0
 8015222:	60f8      	str	r0, [r7, #12]
 8015224:	60b9      	str	r1, [r7, #8]
 8015226:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d00a      	beq.n	8015244 <tcp_route+0x28>
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	7a1b      	ldrb	r3, [r3, #8]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d006      	beq.n	8015244 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	7a1b      	ldrb	r3, [r3, #8]
 801523a:	4618      	mov	r0, r3
 801523c:	f7fb fb10 	bl	8010860 <netif_get_by_index>
 8015240:	4603      	mov	r3, r0
 8015242:	e003      	b.n	801524c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f005 f845 	bl	801a2d4 <ip4_route>
 801524a:	4603      	mov	r3, r0
  }
}
 801524c:	4618      	mov	r0, r3
 801524e:	3710      	adds	r7, #16
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}

08015254 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015254:	b590      	push	{r4, r7, lr}
 8015256:	b087      	sub	sp, #28
 8015258:	af00      	add	r7, sp, #0
 801525a:	60f8      	str	r0, [r7, #12]
 801525c:	60b9      	str	r1, [r7, #8]
 801525e:	603b      	str	r3, [r7, #0]
 8015260:	4613      	mov	r3, r2
 8015262:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d105      	bne.n	8015276 <tcp_create_segment+0x22>
 801526a:	4b44      	ldr	r3, [pc, #272]	; (801537c <tcp_create_segment+0x128>)
 801526c:	22a3      	movs	r2, #163	; 0xa3
 801526e:	4944      	ldr	r1, [pc, #272]	; (8015380 <tcp_create_segment+0x12c>)
 8015270:	4844      	ldr	r0, [pc, #272]	; (8015384 <tcp_create_segment+0x130>)
 8015272:	f007 f94f 	bl	801c514 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015276:	68bb      	ldr	r3, [r7, #8]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d105      	bne.n	8015288 <tcp_create_segment+0x34>
 801527c:	4b3f      	ldr	r3, [pc, #252]	; (801537c <tcp_create_segment+0x128>)
 801527e:	22a4      	movs	r2, #164	; 0xa4
 8015280:	4941      	ldr	r1, [pc, #260]	; (8015388 <tcp_create_segment+0x134>)
 8015282:	4840      	ldr	r0, [pc, #256]	; (8015384 <tcp_create_segment+0x130>)
 8015284:	f007 f946 	bl	801c514 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015288:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	b2db      	uxtb	r3, r3
 8015290:	f003 0304 	and.w	r3, r3, #4
 8015294:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015296:	2003      	movs	r0, #3
 8015298:	f7fa ff4a 	bl	8010130 <memp_malloc>
 801529c:	6138      	str	r0, [r7, #16]
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d104      	bne.n	80152ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80152a4:	68b8      	ldr	r0, [r7, #8]
 80152a6:	f7fb fe69 	bl	8010f7c <pbuf_free>
    return NULL;
 80152aa:	2300      	movs	r3, #0
 80152ac:	e061      	b.n	8015372 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80152b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80152b6:	693b      	ldr	r3, [r7, #16]
 80152b8:	2200      	movs	r2, #0
 80152ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80152bc:	693b      	ldr	r3, [r7, #16]
 80152be:	68ba      	ldr	r2, [r7, #8]
 80152c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	891a      	ldrh	r2, [r3, #8]
 80152c6:	7dfb      	ldrb	r3, [r7, #23]
 80152c8:	b29b      	uxth	r3, r3
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d205      	bcs.n	80152da <tcp_create_segment+0x86>
 80152ce:	4b2b      	ldr	r3, [pc, #172]	; (801537c <tcp_create_segment+0x128>)
 80152d0:	22b0      	movs	r2, #176	; 0xb0
 80152d2:	492e      	ldr	r1, [pc, #184]	; (801538c <tcp_create_segment+0x138>)
 80152d4:	482b      	ldr	r0, [pc, #172]	; (8015384 <tcp_create_segment+0x130>)
 80152d6:	f007 f91d 	bl	801c514 <iprintf>
  seg->len = p->tot_len - optlen;
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	891a      	ldrh	r2, [r3, #8]
 80152de:	7dfb      	ldrb	r3, [r7, #23]
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	1ad3      	subs	r3, r2, r3
 80152e4:	b29a      	uxth	r2, r3
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80152ea:	2114      	movs	r1, #20
 80152ec:	68b8      	ldr	r0, [r7, #8]
 80152ee:	f7fb fdaf 	bl	8010e50 <pbuf_add_header>
 80152f2:	4603      	mov	r3, r0
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d004      	beq.n	8015302 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80152f8:	6938      	ldr	r0, [r7, #16]
 80152fa:	f7fd f8ce 	bl	801249a <tcp_seg_free>
    return NULL;
 80152fe:	2300      	movs	r3, #0
 8015300:	e037      	b.n	8015372 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	685a      	ldr	r2, [r3, #4]
 8015308:	693b      	ldr	r3, [r7, #16]
 801530a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	8ada      	ldrh	r2, [r3, #22]
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	68dc      	ldr	r4, [r3, #12]
 8015314:	4610      	mov	r0, r2
 8015316:	f7fa fa33 	bl	800f780 <lwip_htons>
 801531a:	4603      	mov	r3, r0
 801531c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	8b1a      	ldrh	r2, [r3, #24]
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	68dc      	ldr	r4, [r3, #12]
 8015326:	4610      	mov	r0, r2
 8015328:	f7fa fa2a 	bl	800f780 <lwip_htons>
 801532c:	4603      	mov	r3, r0
 801532e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	68dc      	ldr	r4, [r3, #12]
 8015334:	6838      	ldr	r0, [r7, #0]
 8015336:	f7fa fa38 	bl	800f7aa <lwip_htonl>
 801533a:	4603      	mov	r3, r0
 801533c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801533e:	7dfb      	ldrb	r3, [r7, #23]
 8015340:	089b      	lsrs	r3, r3, #2
 8015342:	b2db      	uxtb	r3, r3
 8015344:	b29b      	uxth	r3, r3
 8015346:	3305      	adds	r3, #5
 8015348:	b29b      	uxth	r3, r3
 801534a:	031b      	lsls	r3, r3, #12
 801534c:	b29a      	uxth	r2, r3
 801534e:	79fb      	ldrb	r3, [r7, #7]
 8015350:	b29b      	uxth	r3, r3
 8015352:	4313      	orrs	r3, r2
 8015354:	b29a      	uxth	r2, r3
 8015356:	693b      	ldr	r3, [r7, #16]
 8015358:	68dc      	ldr	r4, [r3, #12]
 801535a:	4610      	mov	r0, r2
 801535c:	f7fa fa10 	bl	800f780 <lwip_htons>
 8015360:	4603      	mov	r3, r0
 8015362:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	2200      	movs	r2, #0
 801536a:	749a      	strb	r2, [r3, #18]
 801536c:	2200      	movs	r2, #0
 801536e:	74da      	strb	r2, [r3, #19]
  return seg;
 8015370:	693b      	ldr	r3, [r7, #16]
}
 8015372:	4618      	mov	r0, r3
 8015374:	371c      	adds	r7, #28
 8015376:	46bd      	mov	sp, r7
 8015378:	bd90      	pop	{r4, r7, pc}
 801537a:	bf00      	nop
 801537c:	0801fec0 	.word	0x0801fec0
 8015380:	0801fef4 	.word	0x0801fef4
 8015384:	0801ff14 	.word	0x0801ff14
 8015388:	0801ff3c 	.word	0x0801ff3c
 801538c:	0801ff60 	.word	0x0801ff60

08015390 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015390:	b590      	push	{r4, r7, lr}
 8015392:	b08b      	sub	sp, #44	; 0x2c
 8015394:	af02      	add	r7, sp, #8
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	460b      	mov	r3, r1
 801539a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801539c:	2300      	movs	r3, #0
 801539e:	61fb      	str	r3, [r7, #28]
 80153a0:	2300      	movs	r3, #0
 80153a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80153a4:	2300      	movs	r3, #0
 80153a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d106      	bne.n	80153bc <tcp_split_unsent_seg+0x2c>
 80153ae:	4b95      	ldr	r3, [pc, #596]	; (8015604 <tcp_split_unsent_seg+0x274>)
 80153b0:	f240 324b 	movw	r2, #843	; 0x34b
 80153b4:	4994      	ldr	r1, [pc, #592]	; (8015608 <tcp_split_unsent_seg+0x278>)
 80153b6:	4895      	ldr	r0, [pc, #596]	; (801560c <tcp_split_unsent_seg+0x27c>)
 80153b8:	f007 f8ac 	bl	801c514 <iprintf>

  useg = pcb->unsent;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d102      	bne.n	80153ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80153c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80153cc:	e116      	b.n	80155fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80153ce:	887b      	ldrh	r3, [r7, #2]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d109      	bne.n	80153e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80153d4:	4b8b      	ldr	r3, [pc, #556]	; (8015604 <tcp_split_unsent_seg+0x274>)
 80153d6:	f240 3253 	movw	r2, #851	; 0x353
 80153da:	498d      	ldr	r1, [pc, #564]	; (8015610 <tcp_split_unsent_seg+0x280>)
 80153dc:	488b      	ldr	r0, [pc, #556]	; (801560c <tcp_split_unsent_seg+0x27c>)
 80153de:	f007 f899 	bl	801c514 <iprintf>
    return ERR_VAL;
 80153e2:	f06f 0305 	mvn.w	r3, #5
 80153e6:	e109      	b.n	80155fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	891b      	ldrh	r3, [r3, #8]
 80153ec:	887a      	ldrh	r2, [r7, #2]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d301      	bcc.n	80153f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80153f2:	2300      	movs	r3, #0
 80153f4:	e102      	b.n	80155fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80153fa:	887a      	ldrh	r2, [r7, #2]
 80153fc:	429a      	cmp	r2, r3
 80153fe:	d906      	bls.n	801540e <tcp_split_unsent_seg+0x7e>
 8015400:	4b80      	ldr	r3, [pc, #512]	; (8015604 <tcp_split_unsent_seg+0x274>)
 8015402:	f240 325b 	movw	r2, #859	; 0x35b
 8015406:	4983      	ldr	r1, [pc, #524]	; (8015614 <tcp_split_unsent_seg+0x284>)
 8015408:	4880      	ldr	r0, [pc, #512]	; (801560c <tcp_split_unsent_seg+0x27c>)
 801540a:	f007 f883 	bl	801c514 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	891b      	ldrh	r3, [r3, #8]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d106      	bne.n	8015424 <tcp_split_unsent_seg+0x94>
 8015416:	4b7b      	ldr	r3, [pc, #492]	; (8015604 <tcp_split_unsent_seg+0x274>)
 8015418:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801541c:	497e      	ldr	r1, [pc, #504]	; (8015618 <tcp_split_unsent_seg+0x288>)
 801541e:	487b      	ldr	r0, [pc, #492]	; (801560c <tcp_split_unsent_seg+0x27c>)
 8015420:	f007 f878 	bl	801c514 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	7a9b      	ldrb	r3, [r3, #10]
 8015428:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801542a:	7bfb      	ldrb	r3, [r7, #15]
 801542c:	009b      	lsls	r3, r3, #2
 801542e:	b2db      	uxtb	r3, r3
 8015430:	f003 0304 	and.w	r3, r3, #4
 8015434:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015436:	697b      	ldr	r3, [r7, #20]
 8015438:	891a      	ldrh	r2, [r3, #8]
 801543a:	887b      	ldrh	r3, [r7, #2]
 801543c:	1ad3      	subs	r3, r2, r3
 801543e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015440:	7bbb      	ldrb	r3, [r7, #14]
 8015442:	b29a      	uxth	r2, r3
 8015444:	89bb      	ldrh	r3, [r7, #12]
 8015446:	4413      	add	r3, r2
 8015448:	b29b      	uxth	r3, r3
 801544a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801544e:	4619      	mov	r1, r3
 8015450:	2036      	movs	r0, #54	; 0x36
 8015452:	f7fb faaf 	bl	80109b4 <pbuf_alloc>
 8015456:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	2b00      	cmp	r3, #0
 801545c:	f000 80b7 	beq.w	80155ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	891a      	ldrh	r2, [r3, #8]
 8015466:	697b      	ldr	r3, [r7, #20]
 8015468:	891b      	ldrh	r3, [r3, #8]
 801546a:	1ad3      	subs	r3, r2, r3
 801546c:	b29a      	uxth	r2, r3
 801546e:	887b      	ldrh	r3, [r7, #2]
 8015470:	4413      	add	r3, r2
 8015472:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	6858      	ldr	r0, [r3, #4]
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	685a      	ldr	r2, [r3, #4]
 801547c:	7bbb      	ldrb	r3, [r7, #14]
 801547e:	18d1      	adds	r1, r2, r3
 8015480:	897b      	ldrh	r3, [r7, #10]
 8015482:	89ba      	ldrh	r2, [r7, #12]
 8015484:	f7fb ff80 	bl	8011388 <pbuf_copy_partial>
 8015488:	4603      	mov	r3, r0
 801548a:	461a      	mov	r2, r3
 801548c:	89bb      	ldrh	r3, [r7, #12]
 801548e:	4293      	cmp	r3, r2
 8015490:	f040 809f 	bne.w	80155d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015494:	697b      	ldr	r3, [r7, #20]
 8015496:	68db      	ldr	r3, [r3, #12]
 8015498:	899b      	ldrh	r3, [r3, #12]
 801549a:	b29b      	uxth	r3, r3
 801549c:	4618      	mov	r0, r3
 801549e:	f7fa f96f 	bl	800f780 <lwip_htons>
 80154a2:	4603      	mov	r3, r0
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80154aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80154ac:	2300      	movs	r3, #0
 80154ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80154b0:	7efb      	ldrb	r3, [r7, #27]
 80154b2:	f003 0308 	and.w	r3, r3, #8
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d007      	beq.n	80154ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80154ba:	7efb      	ldrb	r3, [r7, #27]
 80154bc:	f023 0308 	bic.w	r3, r3, #8
 80154c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80154c2:	7ebb      	ldrb	r3, [r7, #26]
 80154c4:	f043 0308 	orr.w	r3, r3, #8
 80154c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80154ca:	7efb      	ldrb	r3, [r7, #27]
 80154cc:	f003 0301 	and.w	r3, r3, #1
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d007      	beq.n	80154e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80154d4:	7efb      	ldrb	r3, [r7, #27]
 80154d6:	f023 0301 	bic.w	r3, r3, #1
 80154da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80154dc:	7ebb      	ldrb	r3, [r7, #26]
 80154de:	f043 0301 	orr.w	r3, r3, #1
 80154e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	68db      	ldr	r3, [r3, #12]
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7fa f95d 	bl	800f7aa <lwip_htonl>
 80154f0:	4602      	mov	r2, r0
 80154f2:	887b      	ldrh	r3, [r7, #2]
 80154f4:	18d1      	adds	r1, r2, r3
 80154f6:	7eba      	ldrb	r2, [r7, #26]
 80154f8:	7bfb      	ldrb	r3, [r7, #15]
 80154fa:	9300      	str	r3, [sp, #0]
 80154fc:	460b      	mov	r3, r1
 80154fe:	6939      	ldr	r1, [r7, #16]
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f7ff fea7 	bl	8015254 <tcp_create_segment>
 8015506:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d063      	beq.n	80155d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	4618      	mov	r0, r3
 8015514:	f7fb fdc0 	bl	8011098 <pbuf_clen>
 8015518:	4603      	mov	r3, r0
 801551a:	461a      	mov	r2, r3
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015522:	1a9b      	subs	r3, r3, r2
 8015524:	b29a      	uxth	r2, r3
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	6858      	ldr	r0, [r3, #4]
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	891a      	ldrh	r2, [r3, #8]
 8015536:	89bb      	ldrh	r3, [r7, #12]
 8015538:	1ad3      	subs	r3, r2, r3
 801553a:	b29b      	uxth	r3, r3
 801553c:	4619      	mov	r1, r3
 801553e:	f7fb fb97 	bl	8010c70 <pbuf_realloc>
  useg->len -= remainder;
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	891a      	ldrh	r2, [r3, #8]
 8015546:	89bb      	ldrh	r3, [r7, #12]
 8015548:	1ad3      	subs	r3, r2, r3
 801554a:	b29a      	uxth	r2, r3
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	68db      	ldr	r3, [r3, #12]
 8015554:	899b      	ldrh	r3, [r3, #12]
 8015556:	b29c      	uxth	r4, r3
 8015558:	7efb      	ldrb	r3, [r7, #27]
 801555a:	b29b      	uxth	r3, r3
 801555c:	4618      	mov	r0, r3
 801555e:	f7fa f90f 	bl	800f780 <lwip_htons>
 8015562:	4603      	mov	r3, r0
 8015564:	461a      	mov	r2, r3
 8015566:	697b      	ldr	r3, [r7, #20]
 8015568:	68db      	ldr	r3, [r3, #12]
 801556a:	4322      	orrs	r2, r4
 801556c:	b292      	uxth	r2, r2
 801556e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	685b      	ldr	r3, [r3, #4]
 8015574:	4618      	mov	r0, r3
 8015576:	f7fb fd8f 	bl	8011098 <pbuf_clen>
 801557a:	4603      	mov	r3, r0
 801557c:	461a      	mov	r2, r3
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015584:	4413      	add	r3, r2
 8015586:	b29a      	uxth	r2, r3
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801558e:	69fb      	ldr	r3, [r7, #28]
 8015590:	685b      	ldr	r3, [r3, #4]
 8015592:	4618      	mov	r0, r3
 8015594:	f7fb fd80 	bl	8011098 <pbuf_clen>
 8015598:	4603      	mov	r3, r0
 801559a:	461a      	mov	r2, r3
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80155a2:	4413      	add	r3, r2
 80155a4:	b29a      	uxth	r2, r3
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	681a      	ldr	r2, [r3, #0]
 80155b0:	69fb      	ldr	r3, [r7, #28]
 80155b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	69fa      	ldr	r2, [r7, #28]
 80155b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80155ba:	69fb      	ldr	r3, [r7, #28]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d103      	bne.n	80155ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2200      	movs	r2, #0
 80155c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80155ca:	2300      	movs	r3, #0
 80155cc:	e016      	b.n	80155fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80155ce:	bf00      	nop
 80155d0:	e002      	b.n	80155d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80155d2:	bf00      	nop
 80155d4:	e000      	b.n	80155d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80155d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80155d8:	69fb      	ldr	r3, [r7, #28]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d006      	beq.n	80155ec <tcp_split_unsent_seg+0x25c>
 80155de:	4b09      	ldr	r3, [pc, #36]	; (8015604 <tcp_split_unsent_seg+0x274>)
 80155e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80155e4:	490d      	ldr	r1, [pc, #52]	; (801561c <tcp_split_unsent_seg+0x28c>)
 80155e6:	4809      	ldr	r0, [pc, #36]	; (801560c <tcp_split_unsent_seg+0x27c>)
 80155e8:	f006 ff94 	bl	801c514 <iprintf>
  if (p != NULL) {
 80155ec:	693b      	ldr	r3, [r7, #16]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d002      	beq.n	80155f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80155f2:	6938      	ldr	r0, [r7, #16]
 80155f4:	f7fb fcc2 	bl	8010f7c <pbuf_free>
  }

  return ERR_MEM;
 80155f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80155fc:	4618      	mov	r0, r3
 80155fe:	3724      	adds	r7, #36	; 0x24
 8015600:	46bd      	mov	sp, r7
 8015602:	bd90      	pop	{r4, r7, pc}
 8015604:	0801fec0 	.word	0x0801fec0
 8015608:	08020254 	.word	0x08020254
 801560c:	0801ff14 	.word	0x0801ff14
 8015610:	08020278 	.word	0x08020278
 8015614:	0802029c 	.word	0x0802029c
 8015618:	080202ac 	.word	0x080202ac
 801561c:	080202bc 	.word	0x080202bc

08015620 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015620:	b590      	push	{r4, r7, lr}
 8015622:	b085      	sub	sp, #20
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d106      	bne.n	801563c <tcp_send_fin+0x1c>
 801562e:	4b21      	ldr	r3, [pc, #132]	; (80156b4 <tcp_send_fin+0x94>)
 8015630:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015634:	4920      	ldr	r1, [pc, #128]	; (80156b8 <tcp_send_fin+0x98>)
 8015636:	4821      	ldr	r0, [pc, #132]	; (80156bc <tcp_send_fin+0x9c>)
 8015638:	f006 ff6c 	bl	801c514 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015640:	2b00      	cmp	r3, #0
 8015642:	d02e      	beq.n	80156a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015648:	60fb      	str	r3, [r7, #12]
 801564a:	e002      	b.n	8015652 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d1f8      	bne.n	801564c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	68db      	ldr	r3, [r3, #12]
 801565e:	899b      	ldrh	r3, [r3, #12]
 8015660:	b29b      	uxth	r3, r3
 8015662:	4618      	mov	r0, r3
 8015664:	f7fa f88c 	bl	800f780 <lwip_htons>
 8015668:	4603      	mov	r3, r0
 801566a:	b2db      	uxtb	r3, r3
 801566c:	f003 0307 	and.w	r3, r3, #7
 8015670:	2b00      	cmp	r3, #0
 8015672:	d116      	bne.n	80156a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	68db      	ldr	r3, [r3, #12]
 8015678:	899b      	ldrh	r3, [r3, #12]
 801567a:	b29c      	uxth	r4, r3
 801567c:	2001      	movs	r0, #1
 801567e:	f7fa f87f 	bl	800f780 <lwip_htons>
 8015682:	4603      	mov	r3, r0
 8015684:	461a      	mov	r2, r3
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	68db      	ldr	r3, [r3, #12]
 801568a:	4322      	orrs	r2, r4
 801568c:	b292      	uxth	r2, r2
 801568e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	8b5b      	ldrh	r3, [r3, #26]
 8015694:	f043 0320 	orr.w	r3, r3, #32
 8015698:	b29a      	uxth	r2, r3
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801569e:	2300      	movs	r3, #0
 80156a0:	e004      	b.n	80156ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80156a2:	2101      	movs	r1, #1
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f000 f80b 	bl	80156c0 <tcp_enqueue_flags>
 80156aa:	4603      	mov	r3, r0
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	3714      	adds	r7, #20
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd90      	pop	{r4, r7, pc}
 80156b4:	0801fec0 	.word	0x0801fec0
 80156b8:	080202c8 	.word	0x080202c8
 80156bc:	0801ff14 	.word	0x0801ff14

080156c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b08a      	sub	sp, #40	; 0x28
 80156c4:	af02      	add	r7, sp, #8
 80156c6:	6078      	str	r0, [r7, #4]
 80156c8:	460b      	mov	r3, r1
 80156ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80156cc:	2300      	movs	r3, #0
 80156ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80156d0:	2300      	movs	r3, #0
 80156d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80156d4:	78fb      	ldrb	r3, [r7, #3]
 80156d6:	f003 0303 	and.w	r3, r3, #3
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d106      	bne.n	80156ec <tcp_enqueue_flags+0x2c>
 80156de:	4b67      	ldr	r3, [pc, #412]	; (801587c <tcp_enqueue_flags+0x1bc>)
 80156e0:	f240 4211 	movw	r2, #1041	; 0x411
 80156e4:	4966      	ldr	r1, [pc, #408]	; (8015880 <tcp_enqueue_flags+0x1c0>)
 80156e6:	4867      	ldr	r0, [pc, #412]	; (8015884 <tcp_enqueue_flags+0x1c4>)
 80156e8:	f006 ff14 	bl	801c514 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d106      	bne.n	8015700 <tcp_enqueue_flags+0x40>
 80156f2:	4b62      	ldr	r3, [pc, #392]	; (801587c <tcp_enqueue_flags+0x1bc>)
 80156f4:	f240 4213 	movw	r2, #1043	; 0x413
 80156f8:	4963      	ldr	r1, [pc, #396]	; (8015888 <tcp_enqueue_flags+0x1c8>)
 80156fa:	4862      	ldr	r0, [pc, #392]	; (8015884 <tcp_enqueue_flags+0x1c4>)
 80156fc:	f006 ff0a 	bl	801c514 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015700:	78fb      	ldrb	r3, [r7, #3]
 8015702:	f003 0302 	and.w	r3, r3, #2
 8015706:	2b00      	cmp	r3, #0
 8015708:	d001      	beq.n	801570e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801570a:	2301      	movs	r3, #1
 801570c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801570e:	7ffb      	ldrb	r3, [r7, #31]
 8015710:	009b      	lsls	r3, r3, #2
 8015712:	b2db      	uxtb	r3, r3
 8015714:	f003 0304 	and.w	r3, r3, #4
 8015718:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801571a:	7dfb      	ldrb	r3, [r7, #23]
 801571c:	b29b      	uxth	r3, r3
 801571e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015722:	4619      	mov	r1, r3
 8015724:	2036      	movs	r0, #54	; 0x36
 8015726:	f7fb f945 	bl	80109b4 <pbuf_alloc>
 801572a:	6138      	str	r0, [r7, #16]
 801572c:	693b      	ldr	r3, [r7, #16]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d109      	bne.n	8015746 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	8b5b      	ldrh	r3, [r3, #26]
 8015736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801573a:	b29a      	uxth	r2, r3
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015744:	e095      	b.n	8015872 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015746:	693b      	ldr	r3, [r7, #16]
 8015748:	895a      	ldrh	r2, [r3, #10]
 801574a:	7dfb      	ldrb	r3, [r7, #23]
 801574c:	b29b      	uxth	r3, r3
 801574e:	429a      	cmp	r2, r3
 8015750:	d206      	bcs.n	8015760 <tcp_enqueue_flags+0xa0>
 8015752:	4b4a      	ldr	r3, [pc, #296]	; (801587c <tcp_enqueue_flags+0x1bc>)
 8015754:	f240 4239 	movw	r2, #1081	; 0x439
 8015758:	494c      	ldr	r1, [pc, #304]	; (801588c <tcp_enqueue_flags+0x1cc>)
 801575a:	484a      	ldr	r0, [pc, #296]	; (8015884 <tcp_enqueue_flags+0x1c4>)
 801575c:	f006 feda 	bl	801c514 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015764:	78fa      	ldrb	r2, [r7, #3]
 8015766:	7ffb      	ldrb	r3, [r7, #31]
 8015768:	9300      	str	r3, [sp, #0]
 801576a:	460b      	mov	r3, r1
 801576c:	6939      	ldr	r1, [r7, #16]
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f7ff fd70 	bl	8015254 <tcp_create_segment>
 8015774:	60f8      	str	r0, [r7, #12]
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d109      	bne.n	8015790 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	8b5b      	ldrh	r3, [r3, #26]
 8015780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015784:	b29a      	uxth	r2, r3
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801578a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801578e:	e070      	b.n	8015872 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	68db      	ldr	r3, [r3, #12]
 8015794:	f003 0303 	and.w	r3, r3, #3
 8015798:	2b00      	cmp	r3, #0
 801579a:	d006      	beq.n	80157aa <tcp_enqueue_flags+0xea>
 801579c:	4b37      	ldr	r3, [pc, #220]	; (801587c <tcp_enqueue_flags+0x1bc>)
 801579e:	f240 4242 	movw	r2, #1090	; 0x442
 80157a2:	493b      	ldr	r1, [pc, #236]	; (8015890 <tcp_enqueue_flags+0x1d0>)
 80157a4:	4837      	ldr	r0, [pc, #220]	; (8015884 <tcp_enqueue_flags+0x1c4>)
 80157a6:	f006 feb5 	bl	801c514 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	891b      	ldrh	r3, [r3, #8]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d006      	beq.n	80157c0 <tcp_enqueue_flags+0x100>
 80157b2:	4b32      	ldr	r3, [pc, #200]	; (801587c <tcp_enqueue_flags+0x1bc>)
 80157b4:	f240 4243 	movw	r2, #1091	; 0x443
 80157b8:	4936      	ldr	r1, [pc, #216]	; (8015894 <tcp_enqueue_flags+0x1d4>)
 80157ba:	4832      	ldr	r0, [pc, #200]	; (8015884 <tcp_enqueue_flags+0x1c4>)
 80157bc:	f006 feaa 	bl	801c514 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d103      	bne.n	80157d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	68fa      	ldr	r2, [r7, #12]
 80157cc:	66da      	str	r2, [r3, #108]	; 0x6c
 80157ce:	e00d      	b.n	80157ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157d4:	61bb      	str	r3, [r7, #24]
 80157d6:	e002      	b.n	80157de <tcp_enqueue_flags+0x11e>
 80157d8:	69bb      	ldr	r3, [r7, #24]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	61bb      	str	r3, [r7, #24]
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d1f8      	bne.n	80157d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80157e6:	69bb      	ldr	r3, [r7, #24]
 80157e8:	68fa      	ldr	r2, [r7, #12]
 80157ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2200      	movs	r2, #0
 80157f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80157f4:	78fb      	ldrb	r3, [r7, #3]
 80157f6:	f003 0302 	and.w	r3, r3, #2
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d104      	bne.n	8015808 <tcp_enqueue_flags+0x148>
 80157fe:	78fb      	ldrb	r3, [r7, #3]
 8015800:	f003 0301 	and.w	r3, r3, #1
 8015804:	2b00      	cmp	r3, #0
 8015806:	d004      	beq.n	8015812 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801580c:	1c5a      	adds	r2, r3, #1
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015812:	78fb      	ldrb	r3, [r7, #3]
 8015814:	f003 0301 	and.w	r3, r3, #1
 8015818:	2b00      	cmp	r3, #0
 801581a:	d006      	beq.n	801582a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	8b5b      	ldrh	r3, [r3, #26]
 8015820:	f043 0320 	orr.w	r3, r3, #32
 8015824:	b29a      	uxth	r2, r3
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	4618      	mov	r0, r3
 8015830:	f7fb fc32 	bl	8011098 <pbuf_clen>
 8015834:	4603      	mov	r3, r0
 8015836:	461a      	mov	r2, r3
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801583e:	4413      	add	r3, r2
 8015840:	b29a      	uxth	r2, r3
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801584e:	2b00      	cmp	r3, #0
 8015850:	d00e      	beq.n	8015870 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015856:	2b00      	cmp	r3, #0
 8015858:	d10a      	bne.n	8015870 <tcp_enqueue_flags+0x1b0>
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801585e:	2b00      	cmp	r3, #0
 8015860:	d106      	bne.n	8015870 <tcp_enqueue_flags+0x1b0>
 8015862:	4b06      	ldr	r3, [pc, #24]	; (801587c <tcp_enqueue_flags+0x1bc>)
 8015864:	f240 4265 	movw	r2, #1125	; 0x465
 8015868:	490b      	ldr	r1, [pc, #44]	; (8015898 <tcp_enqueue_flags+0x1d8>)
 801586a:	4806      	ldr	r0, [pc, #24]	; (8015884 <tcp_enqueue_flags+0x1c4>)
 801586c:	f006 fe52 	bl	801c514 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015870:	2300      	movs	r3, #0
}
 8015872:	4618      	mov	r0, r3
 8015874:	3720      	adds	r7, #32
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}
 801587a:	bf00      	nop
 801587c:	0801fec0 	.word	0x0801fec0
 8015880:	080202e4 	.word	0x080202e4
 8015884:	0801ff14 	.word	0x0801ff14
 8015888:	0802033c 	.word	0x0802033c
 801588c:	0802035c 	.word	0x0802035c
 8015890:	08020398 	.word	0x08020398
 8015894:	080203b0 	.word	0x080203b0
 8015898:	080203dc 	.word	0x080203dc

0801589c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801589c:	b5b0      	push	{r4, r5, r7, lr}
 801589e:	b08a      	sub	sp, #40	; 0x28
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d106      	bne.n	80158b8 <tcp_output+0x1c>
 80158aa:	4b8a      	ldr	r3, [pc, #552]	; (8015ad4 <tcp_output+0x238>)
 80158ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80158b0:	4989      	ldr	r1, [pc, #548]	; (8015ad8 <tcp_output+0x23c>)
 80158b2:	488a      	ldr	r0, [pc, #552]	; (8015adc <tcp_output+0x240>)
 80158b4:	f006 fe2e 	bl	801c514 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	7d1b      	ldrb	r3, [r3, #20]
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d106      	bne.n	80158ce <tcp_output+0x32>
 80158c0:	4b84      	ldr	r3, [pc, #528]	; (8015ad4 <tcp_output+0x238>)
 80158c2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80158c6:	4986      	ldr	r1, [pc, #536]	; (8015ae0 <tcp_output+0x244>)
 80158c8:	4884      	ldr	r0, [pc, #528]	; (8015adc <tcp_output+0x240>)
 80158ca:	f006 fe23 	bl	801c514 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80158ce:	4b85      	ldr	r3, [pc, #532]	; (8015ae4 <tcp_output+0x248>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d101      	bne.n	80158dc <tcp_output+0x40>
    return ERR_OK;
 80158d8:	2300      	movs	r3, #0
 80158da:	e1ce      	b.n	8015c7a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80158e8:	4293      	cmp	r3, r2
 80158ea:	bf28      	it	cs
 80158ec:	4613      	movcs	r3, r2
 80158ee:	b29b      	uxth	r3, r3
 80158f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80158f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d10b      	bne.n	8015916 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	8b5b      	ldrh	r3, [r3, #26]
 8015902:	f003 0302 	and.w	r3, r3, #2
 8015906:	2b00      	cmp	r3, #0
 8015908:	f000 81aa 	beq.w	8015c60 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f000 fdcb 	bl	80164a8 <tcp_send_empty_ack>
 8015912:	4603      	mov	r3, r0
 8015914:	e1b1      	b.n	8015c7a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015916:	6879      	ldr	r1, [r7, #4]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	3304      	adds	r3, #4
 801591c:	461a      	mov	r2, r3
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f7ff fc7c 	bl	801521c <tcp_route>
 8015924:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d102      	bne.n	8015932 <tcp_output+0x96>
    return ERR_RTE;
 801592c:	f06f 0303 	mvn.w	r3, #3
 8015930:	e1a3      	b.n	8015c7a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d003      	beq.n	8015940 <tcp_output+0xa4>
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d111      	bne.n	8015964 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d002      	beq.n	801594c <tcp_output+0xb0>
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	3304      	adds	r3, #4
 801594a:	e000      	b.n	801594e <tcp_output+0xb2>
 801594c:	2300      	movs	r3, #0
 801594e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015950:	693b      	ldr	r3, [r7, #16]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d102      	bne.n	801595c <tcp_output+0xc0>
      return ERR_RTE;
 8015956:	f06f 0303 	mvn.w	r3, #3
 801595a:	e18e      	b.n	8015c7a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	681a      	ldr	r2, [r3, #0]
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	685b      	ldr	r3, [r3, #4]
 801596a:	4618      	mov	r0, r3
 801596c:	f7f9 ff1d 	bl	800f7aa <lwip_htonl>
 8015970:	4602      	mov	r2, r0
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801597a:	8912      	ldrh	r2, [r2, #8]
 801597c:	4413      	add	r3, r2
 801597e:	69ba      	ldr	r2, [r7, #24]
 8015980:	429a      	cmp	r2, r3
 8015982:	d227      	bcs.n	80159d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801598a:	461a      	mov	r2, r3
 801598c:	69bb      	ldr	r3, [r7, #24]
 801598e:	4293      	cmp	r3, r2
 8015990:	d114      	bne.n	80159bc <tcp_output+0x120>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015996:	2b00      	cmp	r3, #0
 8015998:	d110      	bne.n	80159bc <tcp_output+0x120>
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d10b      	bne.n	80159bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2200      	movs	r2, #0
 80159a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2201      	movs	r2, #1
 80159b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2200      	movs	r2, #0
 80159b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	8b5b      	ldrh	r3, [r3, #26]
 80159c0:	f003 0302 	and.w	r3, r3, #2
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	f000 814d 	beq.w	8015c64 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f000 fd6c 	bl	80164a8 <tcp_send_empty_ack>
 80159d0:	4603      	mov	r3, r0
 80159d2:	e152      	b.n	8015c7a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2200      	movs	r2, #0
 80159d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80159e2:	6a3b      	ldr	r3, [r7, #32]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	f000 811c 	beq.w	8015c22 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80159ea:	e002      	b.n	80159f2 <tcp_output+0x156>
 80159ec:	6a3b      	ldr	r3, [r7, #32]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	623b      	str	r3, [r7, #32]
 80159f2:	6a3b      	ldr	r3, [r7, #32]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d1f8      	bne.n	80159ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80159fa:	e112      	b.n	8015c22 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80159fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fe:	68db      	ldr	r3, [r3, #12]
 8015a00:	899b      	ldrh	r3, [r3, #12]
 8015a02:	b29b      	uxth	r3, r3
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7f9 febb 	bl	800f780 <lwip_htons>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	b2db      	uxtb	r3, r3
 8015a0e:	f003 0304 	and.w	r3, r3, #4
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d006      	beq.n	8015a24 <tcp_output+0x188>
 8015a16:	4b2f      	ldr	r3, [pc, #188]	; (8015ad4 <tcp_output+0x238>)
 8015a18:	f240 5236 	movw	r2, #1334	; 0x536
 8015a1c:	4932      	ldr	r1, [pc, #200]	; (8015ae8 <tcp_output+0x24c>)
 8015a1e:	482f      	ldr	r0, [pc, #188]	; (8015adc <tcp_output+0x240>)
 8015a20:	f006 fd78 	bl	801c514 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d01f      	beq.n	8015a6c <tcp_output+0x1d0>
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	8b5b      	ldrh	r3, [r3, #26]
 8015a30:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d119      	bne.n	8015a6c <tcp_output+0x1d0>
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d00b      	beq.n	8015a58 <tcp_output+0x1bc>
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d110      	bne.n	8015a6c <tcp_output+0x1d0>
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a4e:	891a      	ldrh	r2, [r3, #8]
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015a54:	429a      	cmp	r2, r3
 8015a56:	d209      	bcs.n	8015a6c <tcp_output+0x1d0>
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d004      	beq.n	8015a6c <tcp_output+0x1d0>
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a68:	2b08      	cmp	r3, #8
 8015a6a:	d901      	bls.n	8015a70 <tcp_output+0x1d4>
 8015a6c:	2301      	movs	r3, #1
 8015a6e:	e000      	b.n	8015a72 <tcp_output+0x1d6>
 8015a70:	2300      	movs	r3, #0
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d106      	bne.n	8015a84 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	8b5b      	ldrh	r3, [r3, #26]
 8015a7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	f000 80e4 	beq.w	8015c4c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	7d1b      	ldrb	r3, [r3, #20]
 8015a88:	2b02      	cmp	r3, #2
 8015a8a:	d00d      	beq.n	8015aa8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a8e:	68db      	ldr	r3, [r3, #12]
 8015a90:	899b      	ldrh	r3, [r3, #12]
 8015a92:	b29c      	uxth	r4, r3
 8015a94:	2010      	movs	r0, #16
 8015a96:	f7f9 fe73 	bl	800f780 <lwip_htons>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa0:	68db      	ldr	r3, [r3, #12]
 8015aa2:	4322      	orrs	r2, r4
 8015aa4:	b292      	uxth	r2, r2
 8015aa6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015aa8:	697a      	ldr	r2, [r7, #20]
 8015aaa:	6879      	ldr	r1, [r7, #4]
 8015aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015aae:	f000 f909 	bl	8015cc4 <tcp_output_segment>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d016      	beq.n	8015aec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	8b5b      	ldrh	r3, [r3, #26]
 8015ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ac6:	b29a      	uxth	r2, r3
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	835a      	strh	r2, [r3, #26]
      return err;
 8015acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ad0:	e0d3      	b.n	8015c7a <tcp_output+0x3de>
 8015ad2:	bf00      	nop
 8015ad4:	0801fec0 	.word	0x0801fec0
 8015ad8:	08020404 	.word	0x08020404
 8015adc:	0801ff14 	.word	0x0801ff14
 8015ae0:	0802041c 	.word	0x0802041c
 8015ae4:	2000c624 	.word	0x2000c624
 8015ae8:	08020444 	.word	0x08020444
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aee:	681a      	ldr	r2, [r3, #0]
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	7d1b      	ldrb	r3, [r3, #20]
 8015af8:	2b02      	cmp	r3, #2
 8015afa:	d006      	beq.n	8015b0a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	8b5b      	ldrh	r3, [r3, #26]
 8015b00:	f023 0303 	bic.w	r3, r3, #3
 8015b04:	b29a      	uxth	r2, r3
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0c:	68db      	ldr	r3, [r3, #12]
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	4618      	mov	r0, r3
 8015b12:	f7f9 fe4a 	bl	800f7aa <lwip_htonl>
 8015b16:	4604      	mov	r4, r0
 8015b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b1a:	891b      	ldrh	r3, [r3, #8]
 8015b1c:	461d      	mov	r5, r3
 8015b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b20:	68db      	ldr	r3, [r3, #12]
 8015b22:	899b      	ldrh	r3, [r3, #12]
 8015b24:	b29b      	uxth	r3, r3
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7f9 fe2a 	bl	800f780 <lwip_htons>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	f003 0303 	and.w	r3, r3, #3
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d001      	beq.n	8015b3c <tcp_output+0x2a0>
 8015b38:	2301      	movs	r3, #1
 8015b3a:	e000      	b.n	8015b3e <tcp_output+0x2a2>
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	442b      	add	r3, r5
 8015b40:	4423      	add	r3, r4
 8015b42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	1ad3      	subs	r3, r2, r3
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	da02      	bge.n	8015b56 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	68ba      	ldr	r2, [r7, #8]
 8015b54:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b58:	891b      	ldrh	r3, [r3, #8]
 8015b5a:	461c      	mov	r4, r3
 8015b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	899b      	ldrh	r3, [r3, #12]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7f9 fe0b 	bl	800f780 <lwip_htons>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	b2db      	uxtb	r3, r3
 8015b6e:	f003 0303 	and.w	r3, r3, #3
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d001      	beq.n	8015b7a <tcp_output+0x2de>
 8015b76:	2301      	movs	r3, #1
 8015b78:	e000      	b.n	8015b7c <tcp_output+0x2e0>
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	4423      	add	r3, r4
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d049      	beq.n	8015c16 <tcp_output+0x37a>
      seg->next = NULL;
 8015b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b84:	2200      	movs	r2, #0
 8015b86:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d105      	bne.n	8015b9c <tcp_output+0x300>
        pcb->unacked = seg;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b94:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b98:	623b      	str	r3, [r7, #32]
 8015b9a:	e03f      	b.n	8015c1c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b9e:	68db      	ldr	r3, [r3, #12]
 8015ba0:	685b      	ldr	r3, [r3, #4]
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7f9 fe01 	bl	800f7aa <lwip_htonl>
 8015ba8:	4604      	mov	r4, r0
 8015baa:	6a3b      	ldr	r3, [r7, #32]
 8015bac:	68db      	ldr	r3, [r3, #12]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7f9 fdfa 	bl	800f7aa <lwip_htonl>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	1ae3      	subs	r3, r4, r3
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	da24      	bge.n	8015c08 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	3370      	adds	r3, #112	; 0x70
 8015bc2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015bc4:	e002      	b.n	8015bcc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015bcc:	69fb      	ldr	r3, [r7, #28]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d011      	beq.n	8015bf8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015bd4:	69fb      	ldr	r3, [r7, #28]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	68db      	ldr	r3, [r3, #12]
 8015bda:	685b      	ldr	r3, [r3, #4]
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7f9 fde4 	bl	800f7aa <lwip_htonl>
 8015be2:	4604      	mov	r4, r0
 8015be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be6:	68db      	ldr	r3, [r3, #12]
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	4618      	mov	r0, r3
 8015bec:	f7f9 fddd 	bl	800f7aa <lwip_htonl>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	dbe6      	blt.n	8015bc6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	681a      	ldr	r2, [r3, #0]
 8015bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bfe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015c00:	69fb      	ldr	r3, [r7, #28]
 8015c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c04:	601a      	str	r2, [r3, #0]
 8015c06:	e009      	b.n	8015c1c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015c08:	6a3b      	ldr	r3, [r7, #32]
 8015c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c0c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015c0e:	6a3b      	ldr	r3, [r7, #32]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	623b      	str	r3, [r7, #32]
 8015c14:	e002      	b.n	8015c1c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015c16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c18:	f7fc fc3f 	bl	801249a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c20:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d012      	beq.n	8015c4e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	685b      	ldr	r3, [r3, #4]
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7f9 fdbb 	bl	800f7aa <lwip_htonl>
 8015c34:	4602      	mov	r2, r0
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c3a:	1ad3      	subs	r3, r2, r3
 8015c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c3e:	8912      	ldrh	r2, [r2, #8]
 8015c40:	4413      	add	r3, r2
  while (seg != NULL &&
 8015c42:	69ba      	ldr	r2, [r7, #24]
 8015c44:	429a      	cmp	r2, r3
 8015c46:	f4bf aed9 	bcs.w	80159fc <tcp_output+0x160>
 8015c4a:	e000      	b.n	8015c4e <tcp_output+0x3b2>
      break;
 8015c4c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d108      	bne.n	8015c68 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	2200      	movs	r2, #0
 8015c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015c5e:	e004      	b.n	8015c6a <tcp_output+0x3ce>
    goto output_done;
 8015c60:	bf00      	nop
 8015c62:	e002      	b.n	8015c6a <tcp_output+0x3ce>
    goto output_done;
 8015c64:	bf00      	nop
 8015c66:	e000      	b.n	8015c6a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015c68:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	8b5b      	ldrh	r3, [r3, #26]
 8015c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015c78:	2300      	movs	r3, #0
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3728      	adds	r7, #40	; 0x28
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bdb0      	pop	{r4, r5, r7, pc}
 8015c82:	bf00      	nop

08015c84 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b082      	sub	sp, #8
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d106      	bne.n	8015ca0 <tcp_output_segment_busy+0x1c>
 8015c92:	4b09      	ldr	r3, [pc, #36]	; (8015cb8 <tcp_output_segment_busy+0x34>)
 8015c94:	f240 529a 	movw	r2, #1434	; 0x59a
 8015c98:	4908      	ldr	r1, [pc, #32]	; (8015cbc <tcp_output_segment_busy+0x38>)
 8015c9a:	4809      	ldr	r0, [pc, #36]	; (8015cc0 <tcp_output_segment_busy+0x3c>)
 8015c9c:	f006 fc3a 	bl	801c514 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	7b9b      	ldrb	r3, [r3, #14]
 8015ca6:	2b01      	cmp	r3, #1
 8015ca8:	d001      	beq.n	8015cae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015caa:	2301      	movs	r3, #1
 8015cac:	e000      	b.n	8015cb0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015cae:	2300      	movs	r3, #0
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	0801fec0 	.word	0x0801fec0
 8015cbc:	0802045c 	.word	0x0802045c
 8015cc0:	0801ff14 	.word	0x0801ff14

08015cc4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015cc4:	b5b0      	push	{r4, r5, r7, lr}
 8015cc6:	b08c      	sub	sp, #48	; 0x30
 8015cc8:	af04      	add	r7, sp, #16
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	60b9      	str	r1, [r7, #8]
 8015cce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d106      	bne.n	8015ce4 <tcp_output_segment+0x20>
 8015cd6:	4b64      	ldr	r3, [pc, #400]	; (8015e68 <tcp_output_segment+0x1a4>)
 8015cd8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015cdc:	4963      	ldr	r1, [pc, #396]	; (8015e6c <tcp_output_segment+0x1a8>)
 8015cde:	4864      	ldr	r0, [pc, #400]	; (8015e70 <tcp_output_segment+0x1ac>)
 8015ce0:	f006 fc18 	bl	801c514 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015ce4:	68bb      	ldr	r3, [r7, #8]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d106      	bne.n	8015cf8 <tcp_output_segment+0x34>
 8015cea:	4b5f      	ldr	r3, [pc, #380]	; (8015e68 <tcp_output_segment+0x1a4>)
 8015cec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015cf0:	4960      	ldr	r1, [pc, #384]	; (8015e74 <tcp_output_segment+0x1b0>)
 8015cf2:	485f      	ldr	r0, [pc, #380]	; (8015e70 <tcp_output_segment+0x1ac>)
 8015cf4:	f006 fc0e 	bl	801c514 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d106      	bne.n	8015d0c <tcp_output_segment+0x48>
 8015cfe:	4b5a      	ldr	r3, [pc, #360]	; (8015e68 <tcp_output_segment+0x1a4>)
 8015d00:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015d04:	495c      	ldr	r1, [pc, #368]	; (8015e78 <tcp_output_segment+0x1b4>)
 8015d06:	485a      	ldr	r0, [pc, #360]	; (8015e70 <tcp_output_segment+0x1ac>)
 8015d08:	f006 fc04 	bl	801c514 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015d0c:	68f8      	ldr	r0, [r7, #12]
 8015d0e:	f7ff ffb9 	bl	8015c84 <tcp_output_segment_busy>
 8015d12:	4603      	mov	r3, r0
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d001      	beq.n	8015d1c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	e0a1      	b.n	8015e60 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	68dc      	ldr	r4, [r3, #12]
 8015d24:	4610      	mov	r0, r2
 8015d26:	f7f9 fd40 	bl	800f7aa <lwip_htonl>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	68dc      	ldr	r4, [r3, #12]
 8015d36:	4610      	mov	r0, r2
 8015d38:	f7f9 fd22 	bl	800f780 <lwip_htons>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d44:	68ba      	ldr	r2, [r7, #8]
 8015d46:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015d48:	441a      	add	r2, r3
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	68db      	ldr	r3, [r3, #12]
 8015d52:	3314      	adds	r3, #20
 8015d54:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	7a9b      	ldrb	r3, [r3, #10]
 8015d5a:	f003 0301 	and.w	r3, r3, #1
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d015      	beq.n	8015d8e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015d62:	68bb      	ldr	r3, [r7, #8]
 8015d64:	3304      	adds	r3, #4
 8015d66:	461a      	mov	r2, r3
 8015d68:	6879      	ldr	r1, [r7, #4]
 8015d6a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015d6e:	f7fc fe8b 	bl	8012a88 <tcp_eff_send_mss_netif>
 8015d72:	4603      	mov	r3, r0
 8015d74:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015d76:	8b7b      	ldrh	r3, [r7, #26]
 8015d78:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7f9 fd14 	bl	800f7aa <lwip_htonl>
 8015d82:	4602      	mov	r2, r0
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015d88:	69fb      	ldr	r3, [r7, #28]
 8015d8a:	3304      	adds	r3, #4
 8015d8c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015d8e:	68bb      	ldr	r3, [r7, #8]
 8015d90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	da02      	bge.n	8015d9e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d10c      	bne.n	8015dc0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015da6:	4b35      	ldr	r3, [pc, #212]	; (8015e7c <tcp_output_segment+0x1b8>)
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	68db      	ldr	r3, [r3, #12]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	4618      	mov	r0, r3
 8015db6:	f7f9 fcf8 	bl	800f7aa <lwip_htonl>
 8015dba:	4602      	mov	r2, r0
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	68da      	ldr	r2, [r3, #12]
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	685b      	ldr	r3, [r3, #4]
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	1ad3      	subs	r3, r2, r3
 8015dcc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	685b      	ldr	r3, [r3, #4]
 8015dd2:	8959      	ldrh	r1, [r3, #10]
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	685b      	ldr	r3, [r3, #4]
 8015dd8:	8b3a      	ldrh	r2, [r7, #24]
 8015dda:	1a8a      	subs	r2, r1, r2
 8015ddc:	b292      	uxth	r2, r2
 8015dde:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	8919      	ldrh	r1, [r3, #8]
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	685b      	ldr	r3, [r3, #4]
 8015dea:	8b3a      	ldrh	r2, [r7, #24]
 8015dec:	1a8a      	subs	r2, r1, r2
 8015dee:	b292      	uxth	r2, r2
 8015df0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	685b      	ldr	r3, [r3, #4]
 8015df6:	68fa      	ldr	r2, [r7, #12]
 8015df8:	68d2      	ldr	r2, [r2, #12]
 8015dfa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	68db      	ldr	r3, [r3, #12]
 8015e00:	2200      	movs	r2, #0
 8015e02:	741a      	strb	r2, [r3, #16]
 8015e04:	2200      	movs	r2, #0
 8015e06:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	68da      	ldr	r2, [r3, #12]
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	7a9b      	ldrb	r3, [r3, #10]
 8015e10:	f003 0301 	and.w	r3, r3, #1
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d001      	beq.n	8015e1c <tcp_output_segment+0x158>
 8015e18:	2318      	movs	r3, #24
 8015e1a:	e000      	b.n	8015e1e <tcp_output_segment+0x15a>
 8015e1c:	2314      	movs	r3, #20
 8015e1e:	4413      	add	r3, r2
 8015e20:	69fa      	ldr	r2, [r7, #28]
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d006      	beq.n	8015e34 <tcp_output_segment+0x170>
 8015e26:	4b10      	ldr	r3, [pc, #64]	; (8015e68 <tcp_output_segment+0x1a4>)
 8015e28:	f240 621c 	movw	r2, #1564	; 0x61c
 8015e2c:	4914      	ldr	r1, [pc, #80]	; (8015e80 <tcp_output_segment+0x1bc>)
 8015e2e:	4810      	ldr	r0, [pc, #64]	; (8015e70 <tcp_output_segment+0x1ac>)
 8015e30:	f006 fb70 	bl	801c514 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	6858      	ldr	r0, [r3, #4]
 8015e38:	68b9      	ldr	r1, [r7, #8]
 8015e3a:	68bb      	ldr	r3, [r7, #8]
 8015e3c:	1d1c      	adds	r4, r3, #4
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	7add      	ldrb	r5, [r3, #11]
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	7a9b      	ldrb	r3, [r3, #10]
 8015e46:	687a      	ldr	r2, [r7, #4]
 8015e48:	9202      	str	r2, [sp, #8]
 8015e4a:	2206      	movs	r2, #6
 8015e4c:	9201      	str	r2, [sp, #4]
 8015e4e:	9300      	str	r3, [sp, #0]
 8015e50:	462b      	mov	r3, r5
 8015e52:	4622      	mov	r2, r4
 8015e54:	f004 fc1a 	bl	801a68c <ip4_output_if>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3720      	adds	r7, #32
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bdb0      	pop	{r4, r5, r7, pc}
 8015e68:	0801fec0 	.word	0x0801fec0
 8015e6c:	08020484 	.word	0x08020484
 8015e70:	0801ff14 	.word	0x0801ff14
 8015e74:	080204a4 	.word	0x080204a4
 8015e78:	080204c4 	.word	0x080204c4
 8015e7c:	2000c5d8 	.word	0x2000c5d8
 8015e80:	080204e8 	.word	0x080204e8

08015e84 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015e84:	b5b0      	push	{r4, r5, r7, lr}
 8015e86:	b084      	sub	sp, #16
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d106      	bne.n	8015ea0 <tcp_rexmit_rto_prepare+0x1c>
 8015e92:	4b31      	ldr	r3, [pc, #196]	; (8015f58 <tcp_rexmit_rto_prepare+0xd4>)
 8015e94:	f240 6263 	movw	r2, #1635	; 0x663
 8015e98:	4930      	ldr	r1, [pc, #192]	; (8015f5c <tcp_rexmit_rto_prepare+0xd8>)
 8015e9a:	4831      	ldr	r0, [pc, #196]	; (8015f60 <tcp_rexmit_rto_prepare+0xdc>)
 8015e9c:	f006 fb3a 	bl	801c514 <iprintf>

  if (pcb->unacked == NULL) {
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d102      	bne.n	8015eae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015ea8:	f06f 0305 	mvn.w	r3, #5
 8015eac:	e050      	b.n	8015f50 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015eb2:	60fb      	str	r3, [r7, #12]
 8015eb4:	e00b      	b.n	8015ece <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8015eb6:	68f8      	ldr	r0, [r7, #12]
 8015eb8:	f7ff fee4 	bl	8015c84 <tcp_output_segment_busy>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d002      	beq.n	8015ec8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015ec2:	f06f 0305 	mvn.w	r3, #5
 8015ec6:	e043      	b.n	8015f50 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	60fb      	str	r3, [r7, #12]
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d1ef      	bne.n	8015eb6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015ed6:	68f8      	ldr	r0, [r7, #12]
 8015ed8:	f7ff fed4 	bl	8015c84 <tcp_output_segment_busy>
 8015edc:	4603      	mov	r3, r0
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d002      	beq.n	8015ee8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015ee2:	f06f 0305 	mvn.w	r3, #5
 8015ee6:	e033      	b.n	8015f50 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2200      	movs	r2, #0
 8015efc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	8b5b      	ldrh	r3, [r3, #26]
 8015f02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015f06:	b29a      	uxth	r2, r3
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	68db      	ldr	r3, [r3, #12]
 8015f10:	685b      	ldr	r3, [r3, #4]
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7f9 fc49 	bl	800f7aa <lwip_htonl>
 8015f18:	4604      	mov	r4, r0
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	891b      	ldrh	r3, [r3, #8]
 8015f1e:	461d      	mov	r5, r3
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	68db      	ldr	r3, [r3, #12]
 8015f24:	899b      	ldrh	r3, [r3, #12]
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7f9 fc29 	bl	800f780 <lwip_htons>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	b2db      	uxtb	r3, r3
 8015f32:	f003 0303 	and.w	r3, r3, #3
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d001      	beq.n	8015f3e <tcp_rexmit_rto_prepare+0xba>
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	e000      	b.n	8015f40 <tcp_rexmit_rto_prepare+0xbc>
 8015f3e:	2300      	movs	r3, #0
 8015f40:	442b      	add	r3, r5
 8015f42:	18e2      	adds	r2, r4, r3
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015f4e:	2300      	movs	r3, #0
}
 8015f50:	4618      	mov	r0, r3
 8015f52:	3710      	adds	r7, #16
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bdb0      	pop	{r4, r5, r7, pc}
 8015f58:	0801fec0 	.word	0x0801fec0
 8015f5c:	080204fc 	.word	0x080204fc
 8015f60:	0801ff14 	.word	0x0801ff14

08015f64 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d106      	bne.n	8015f80 <tcp_rexmit_rto_commit+0x1c>
 8015f72:	4b0d      	ldr	r3, [pc, #52]	; (8015fa8 <tcp_rexmit_rto_commit+0x44>)
 8015f74:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015f78:	490c      	ldr	r1, [pc, #48]	; (8015fac <tcp_rexmit_rto_commit+0x48>)
 8015f7a:	480d      	ldr	r0, [pc, #52]	; (8015fb0 <tcp_rexmit_rto_commit+0x4c>)
 8015f7c:	f006 faca 	bl	801c514 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f86:	2bff      	cmp	r3, #255	; 0xff
 8015f88:	d007      	beq.n	8015f9a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f90:	3301      	adds	r3, #1
 8015f92:	b2da      	uxtb	r2, r3
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	f7ff fc7e 	bl	801589c <tcp_output>
}
 8015fa0:	bf00      	nop
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	0801fec0 	.word	0x0801fec0
 8015fac:	08020520 	.word	0x08020520
 8015fb0:	0801ff14 	.word	0x0801ff14

08015fb4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b082      	sub	sp, #8
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d106      	bne.n	8015fd0 <tcp_rexmit_rto+0x1c>
 8015fc2:	4b0a      	ldr	r3, [pc, #40]	; (8015fec <tcp_rexmit_rto+0x38>)
 8015fc4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8015fc8:	4909      	ldr	r1, [pc, #36]	; (8015ff0 <tcp_rexmit_rto+0x3c>)
 8015fca:	480a      	ldr	r0, [pc, #40]	; (8015ff4 <tcp_rexmit_rto+0x40>)
 8015fcc:	f006 faa2 	bl	801c514 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7ff ff57 	bl	8015e84 <tcp_rexmit_rto_prepare>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d102      	bne.n	8015fe2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f7ff ffc1 	bl	8015f64 <tcp_rexmit_rto_commit>
  }
}
 8015fe2:	bf00      	nop
 8015fe4:	3708      	adds	r7, #8
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	bd80      	pop	{r7, pc}
 8015fea:	bf00      	nop
 8015fec:	0801fec0 	.word	0x0801fec0
 8015ff0:	08020544 	.word	0x08020544
 8015ff4:	0801ff14 	.word	0x0801ff14

08015ff8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015ff8:	b590      	push	{r4, r7, lr}
 8015ffa:	b085      	sub	sp, #20
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d106      	bne.n	8016014 <tcp_rexmit+0x1c>
 8016006:	4b2f      	ldr	r3, [pc, #188]	; (80160c4 <tcp_rexmit+0xcc>)
 8016008:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801600c:	492e      	ldr	r1, [pc, #184]	; (80160c8 <tcp_rexmit+0xd0>)
 801600e:	482f      	ldr	r0, [pc, #188]	; (80160cc <tcp_rexmit+0xd4>)
 8016010:	f006 fa80 	bl	801c514 <iprintf>

  if (pcb->unacked == NULL) {
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016018:	2b00      	cmp	r3, #0
 801601a:	d102      	bne.n	8016022 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801601c:	f06f 0305 	mvn.w	r3, #5
 8016020:	e04c      	b.n	80160bc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016026:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016028:	68b8      	ldr	r0, [r7, #8]
 801602a:	f7ff fe2b 	bl	8015c84 <tcp_output_segment_busy>
 801602e:	4603      	mov	r3, r0
 8016030:	2b00      	cmp	r3, #0
 8016032:	d002      	beq.n	801603a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016034:	f06f 0305 	mvn.w	r3, #5
 8016038:	e040      	b.n	80160bc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	681a      	ldr	r2, [r3, #0]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	336c      	adds	r3, #108	; 0x6c
 8016046:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016048:	e002      	b.n	8016050 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d011      	beq.n	801607c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	68db      	ldr	r3, [r3, #12]
 801605e:	685b      	ldr	r3, [r3, #4]
 8016060:	4618      	mov	r0, r3
 8016062:	f7f9 fba2 	bl	800f7aa <lwip_htonl>
 8016066:	4604      	mov	r4, r0
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	68db      	ldr	r3, [r3, #12]
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	4618      	mov	r0, r3
 8016070:	f7f9 fb9b 	bl	800f7aa <lwip_htonl>
 8016074:	4603      	mov	r3, r0
 8016076:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016078:	2b00      	cmp	r3, #0
 801607a:	dbe6      	blt.n	801604a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	681a      	ldr	r2, [r3, #0]
 8016080:	68bb      	ldr	r3, [r7, #8]
 8016082:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	68ba      	ldr	r2, [r7, #8]
 8016088:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d103      	bne.n	801609a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2200      	movs	r2, #0
 8016096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80160a0:	2bff      	cmp	r3, #255	; 0xff
 80160a2:	d007      	beq.n	80160b4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80160aa:	3301      	adds	r3, #1
 80160ac:	b2da      	uxtb	r2, r3
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2200      	movs	r2, #0
 80160b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80160ba:	2300      	movs	r3, #0
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3714      	adds	r7, #20
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd90      	pop	{r4, r7, pc}
 80160c4:	0801fec0 	.word	0x0801fec0
 80160c8:	08020560 	.word	0x08020560
 80160cc:	0801ff14 	.word	0x0801ff14

080160d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d106      	bne.n	80160ec <tcp_rexmit_fast+0x1c>
 80160de:	4b2a      	ldr	r3, [pc, #168]	; (8016188 <tcp_rexmit_fast+0xb8>)
 80160e0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80160e4:	4929      	ldr	r1, [pc, #164]	; (801618c <tcp_rexmit_fast+0xbc>)
 80160e6:	482a      	ldr	r0, [pc, #168]	; (8016190 <tcp_rexmit_fast+0xc0>)
 80160e8:	f006 fa14 	bl	801c514 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d044      	beq.n	801617e <tcp_rexmit_fast+0xae>
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	8b5b      	ldrh	r3, [r3, #26]
 80160f8:	f003 0304 	and.w	r3, r3, #4
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d13e      	bne.n	801617e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016100:	6878      	ldr	r0, [r7, #4]
 8016102:	f7ff ff79 	bl	8015ff8 <tcp_rexmit>
 8016106:	4603      	mov	r3, r0
 8016108:	2b00      	cmp	r3, #0
 801610a:	d138      	bne.n	801617e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016118:	4293      	cmp	r3, r2
 801611a:	bf28      	it	cs
 801611c:	4613      	movcs	r3, r2
 801611e:	b29b      	uxth	r3, r3
 8016120:	0fda      	lsrs	r2, r3, #31
 8016122:	4413      	add	r3, r2
 8016124:	105b      	asrs	r3, r3, #1
 8016126:	b29a      	uxth	r2, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016134:	461a      	mov	r2, r3
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801613a:	005b      	lsls	r3, r3, #1
 801613c:	429a      	cmp	r2, r3
 801613e:	d206      	bcs.n	801614e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016144:	005b      	lsls	r3, r3, #1
 8016146:	b29a      	uxth	r2, r3
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016158:	4619      	mov	r1, r3
 801615a:	0049      	lsls	r1, r1, #1
 801615c:	440b      	add	r3, r1
 801615e:	b29b      	uxth	r3, r3
 8016160:	4413      	add	r3, r2
 8016162:	b29a      	uxth	r2, r3
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	8b5b      	ldrh	r3, [r3, #26]
 801616e:	f043 0304 	orr.w	r3, r3, #4
 8016172:	b29a      	uxth	r2, r3
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2200      	movs	r2, #0
 801617c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801617e:	bf00      	nop
 8016180:	3708      	adds	r7, #8
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}
 8016186:	bf00      	nop
 8016188:	0801fec0 	.word	0x0801fec0
 801618c:	08020578 	.word	0x08020578
 8016190:	0801ff14 	.word	0x0801ff14

08016194 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	607b      	str	r3, [r7, #4]
 801619e:	460b      	mov	r3, r1
 80161a0:	817b      	strh	r3, [r7, #10]
 80161a2:	4613      	mov	r3, r2
 80161a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80161a6:	897a      	ldrh	r2, [r7, #10]
 80161a8:	893b      	ldrh	r3, [r7, #8]
 80161aa:	4413      	add	r3, r2
 80161ac:	b29b      	uxth	r3, r3
 80161ae:	3314      	adds	r3, #20
 80161b0:	b29b      	uxth	r3, r3
 80161b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161b6:	4619      	mov	r1, r3
 80161b8:	2022      	movs	r0, #34	; 0x22
 80161ba:	f7fa fbfb 	bl	80109b4 <pbuf_alloc>
 80161be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80161c0:	697b      	ldr	r3, [r7, #20]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d04d      	beq.n	8016262 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80161c6:	897b      	ldrh	r3, [r7, #10]
 80161c8:	3313      	adds	r3, #19
 80161ca:	697a      	ldr	r2, [r7, #20]
 80161cc:	8952      	ldrh	r2, [r2, #10]
 80161ce:	4293      	cmp	r3, r2
 80161d0:	db06      	blt.n	80161e0 <tcp_output_alloc_header_common+0x4c>
 80161d2:	4b26      	ldr	r3, [pc, #152]	; (801626c <tcp_output_alloc_header_common+0xd8>)
 80161d4:	f240 7223 	movw	r2, #1827	; 0x723
 80161d8:	4925      	ldr	r1, [pc, #148]	; (8016270 <tcp_output_alloc_header_common+0xdc>)
 80161da:	4826      	ldr	r0, [pc, #152]	; (8016274 <tcp_output_alloc_header_common+0xe0>)
 80161dc:	f006 f99a 	bl	801c514 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80161e0:	697b      	ldr	r3, [r7, #20]
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80161e6:	8c3b      	ldrh	r3, [r7, #32]
 80161e8:	4618      	mov	r0, r3
 80161ea:	f7f9 fac9 	bl	800f780 <lwip_htons>
 80161ee:	4603      	mov	r3, r0
 80161f0:	461a      	mov	r2, r3
 80161f2:	693b      	ldr	r3, [r7, #16]
 80161f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80161f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7f9 fac1 	bl	800f780 <lwip_htons>
 80161fe:	4603      	mov	r3, r0
 8016200:	461a      	mov	r2, r3
 8016202:	693b      	ldr	r3, [r7, #16]
 8016204:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	687a      	ldr	r2, [r7, #4]
 801620a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801620c:	68f8      	ldr	r0, [r7, #12]
 801620e:	f7f9 facc 	bl	800f7aa <lwip_htonl>
 8016212:	4602      	mov	r2, r0
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016218:	897b      	ldrh	r3, [r7, #10]
 801621a:	089b      	lsrs	r3, r3, #2
 801621c:	b29b      	uxth	r3, r3
 801621e:	3305      	adds	r3, #5
 8016220:	b29b      	uxth	r3, r3
 8016222:	031b      	lsls	r3, r3, #12
 8016224:	b29a      	uxth	r2, r3
 8016226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801622a:	b29b      	uxth	r3, r3
 801622c:	4313      	orrs	r3, r2
 801622e:	b29b      	uxth	r3, r3
 8016230:	4618      	mov	r0, r3
 8016232:	f7f9 faa5 	bl	800f780 <lwip_htons>
 8016236:	4603      	mov	r3, r0
 8016238:	461a      	mov	r2, r3
 801623a:	693b      	ldr	r3, [r7, #16]
 801623c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801623e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016240:	4618      	mov	r0, r3
 8016242:	f7f9 fa9d 	bl	800f780 <lwip_htons>
 8016246:	4603      	mov	r3, r0
 8016248:	461a      	mov	r2, r3
 801624a:	693b      	ldr	r3, [r7, #16]
 801624c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801624e:	693b      	ldr	r3, [r7, #16]
 8016250:	2200      	movs	r2, #0
 8016252:	741a      	strb	r2, [r3, #16]
 8016254:	2200      	movs	r2, #0
 8016256:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	2200      	movs	r2, #0
 801625c:	749a      	strb	r2, [r3, #18]
 801625e:	2200      	movs	r2, #0
 8016260:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016262:	697b      	ldr	r3, [r7, #20]
}
 8016264:	4618      	mov	r0, r3
 8016266:	3718      	adds	r7, #24
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}
 801626c:	0801fec0 	.word	0x0801fec0
 8016270:	08020598 	.word	0x08020598
 8016274:	0801ff14 	.word	0x0801ff14

08016278 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016278:	b5b0      	push	{r4, r5, r7, lr}
 801627a:	b08a      	sub	sp, #40	; 0x28
 801627c:	af04      	add	r7, sp, #16
 801627e:	60f8      	str	r0, [r7, #12]
 8016280:	607b      	str	r3, [r7, #4]
 8016282:	460b      	mov	r3, r1
 8016284:	817b      	strh	r3, [r7, #10]
 8016286:	4613      	mov	r3, r2
 8016288:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d106      	bne.n	801629e <tcp_output_alloc_header+0x26>
 8016290:	4b15      	ldr	r3, [pc, #84]	; (80162e8 <tcp_output_alloc_header+0x70>)
 8016292:	f240 7242 	movw	r2, #1858	; 0x742
 8016296:	4915      	ldr	r1, [pc, #84]	; (80162ec <tcp_output_alloc_header+0x74>)
 8016298:	4815      	ldr	r0, [pc, #84]	; (80162f0 <tcp_output_alloc_header+0x78>)
 801629a:	f006 f93b 	bl	801c514 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	8adb      	ldrh	r3, [r3, #22]
 80162a6:	68fa      	ldr	r2, [r7, #12]
 80162a8:	8b12      	ldrh	r2, [r2, #24]
 80162aa:	68f9      	ldr	r1, [r7, #12]
 80162ac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80162ae:	893d      	ldrh	r5, [r7, #8]
 80162b0:	897c      	ldrh	r4, [r7, #10]
 80162b2:	9103      	str	r1, [sp, #12]
 80162b4:	2110      	movs	r1, #16
 80162b6:	9102      	str	r1, [sp, #8]
 80162b8:	9201      	str	r2, [sp, #4]
 80162ba:	9300      	str	r3, [sp, #0]
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	462a      	mov	r2, r5
 80162c0:	4621      	mov	r1, r4
 80162c2:	f7ff ff67 	bl	8016194 <tcp_output_alloc_header_common>
 80162c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80162c8:	697b      	ldr	r3, [r7, #20]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d006      	beq.n	80162dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162d2:	68fa      	ldr	r2, [r7, #12]
 80162d4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80162d6:	441a      	add	r2, r3
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80162dc:	697b      	ldr	r3, [r7, #20]
}
 80162de:	4618      	mov	r0, r3
 80162e0:	3718      	adds	r7, #24
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bdb0      	pop	{r4, r5, r7, pc}
 80162e6:	bf00      	nop
 80162e8:	0801fec0 	.word	0x0801fec0
 80162ec:	080205c8 	.word	0x080205c8
 80162f0:	0801ff14 	.word	0x0801ff14

080162f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b088      	sub	sp, #32
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	60f8      	str	r0, [r7, #12]
 80162fc:	60b9      	str	r1, [r7, #8]
 80162fe:	4611      	mov	r1, r2
 8016300:	461a      	mov	r2, r3
 8016302:	460b      	mov	r3, r1
 8016304:	71fb      	strb	r3, [r7, #7]
 8016306:	4613      	mov	r3, r2
 8016308:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801630a:	2300      	movs	r3, #0
 801630c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d106      	bne.n	8016322 <tcp_output_fill_options+0x2e>
 8016314:	4b12      	ldr	r3, [pc, #72]	; (8016360 <tcp_output_fill_options+0x6c>)
 8016316:	f240 7256 	movw	r2, #1878	; 0x756
 801631a:	4912      	ldr	r1, [pc, #72]	; (8016364 <tcp_output_fill_options+0x70>)
 801631c:	4812      	ldr	r0, [pc, #72]	; (8016368 <tcp_output_fill_options+0x74>)
 801631e:	f006 f8f9 	bl	801c514 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	685b      	ldr	r3, [r3, #4]
 8016326:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016328:	69bb      	ldr	r3, [r7, #24]
 801632a:	3314      	adds	r3, #20
 801632c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801632e:	8bfb      	ldrh	r3, [r7, #30]
 8016330:	009b      	lsls	r3, r3, #2
 8016332:	461a      	mov	r2, r3
 8016334:	79fb      	ldrb	r3, [r7, #7]
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	f003 0304 	and.w	r3, r3, #4
 801633c:	4413      	add	r3, r2
 801633e:	3314      	adds	r3, #20
 8016340:	69ba      	ldr	r2, [r7, #24]
 8016342:	4413      	add	r3, r2
 8016344:	697a      	ldr	r2, [r7, #20]
 8016346:	429a      	cmp	r2, r3
 8016348:	d006      	beq.n	8016358 <tcp_output_fill_options+0x64>
 801634a:	4b05      	ldr	r3, [pc, #20]	; (8016360 <tcp_output_fill_options+0x6c>)
 801634c:	f240 7275 	movw	r2, #1909	; 0x775
 8016350:	4906      	ldr	r1, [pc, #24]	; (801636c <tcp_output_fill_options+0x78>)
 8016352:	4805      	ldr	r0, [pc, #20]	; (8016368 <tcp_output_fill_options+0x74>)
 8016354:	f006 f8de 	bl	801c514 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016358:	bf00      	nop
 801635a:	3720      	adds	r7, #32
 801635c:	46bd      	mov	sp, r7
 801635e:	bd80      	pop	{r7, pc}
 8016360:	0801fec0 	.word	0x0801fec0
 8016364:	080205f0 	.word	0x080205f0
 8016368:	0801ff14 	.word	0x0801ff14
 801636c:	080204e8 	.word	0x080204e8

08016370 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b08a      	sub	sp, #40	; 0x28
 8016374:	af04      	add	r7, sp, #16
 8016376:	60f8      	str	r0, [r7, #12]
 8016378:	60b9      	str	r1, [r7, #8]
 801637a:	607a      	str	r2, [r7, #4]
 801637c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d106      	bne.n	8016392 <tcp_output_control_segment+0x22>
 8016384:	4b1c      	ldr	r3, [pc, #112]	; (80163f8 <tcp_output_control_segment+0x88>)
 8016386:	f240 7287 	movw	r2, #1927	; 0x787
 801638a:	491c      	ldr	r1, [pc, #112]	; (80163fc <tcp_output_control_segment+0x8c>)
 801638c:	481c      	ldr	r0, [pc, #112]	; (8016400 <tcp_output_control_segment+0x90>)
 801638e:	f006 f8c1 	bl	801c514 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016392:	683a      	ldr	r2, [r7, #0]
 8016394:	6879      	ldr	r1, [r7, #4]
 8016396:	68f8      	ldr	r0, [r7, #12]
 8016398:	f7fe ff40 	bl	801521c <tcp_route>
 801639c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801639e:	693b      	ldr	r3, [r7, #16]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d102      	bne.n	80163aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80163a4:	23fc      	movs	r3, #252	; 0xfc
 80163a6:	75fb      	strb	r3, [r7, #23]
 80163a8:	e01c      	b.n	80163e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d006      	beq.n	80163be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	7adb      	ldrb	r3, [r3, #11]
 80163b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	7a9b      	ldrb	r3, [r3, #10]
 80163ba:	757b      	strb	r3, [r7, #21]
 80163bc:	e003      	b.n	80163c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80163be:	23ff      	movs	r3, #255	; 0xff
 80163c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80163c2:	2300      	movs	r3, #0
 80163c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80163c6:	7dba      	ldrb	r2, [r7, #22]
 80163c8:	693b      	ldr	r3, [r7, #16]
 80163ca:	9302      	str	r3, [sp, #8]
 80163cc:	2306      	movs	r3, #6
 80163ce:	9301      	str	r3, [sp, #4]
 80163d0:	7d7b      	ldrb	r3, [r7, #21]
 80163d2:	9300      	str	r3, [sp, #0]
 80163d4:	4613      	mov	r3, r2
 80163d6:	683a      	ldr	r2, [r7, #0]
 80163d8:	6879      	ldr	r1, [r7, #4]
 80163da:	68b8      	ldr	r0, [r7, #8]
 80163dc:	f004 f956 	bl	801a68c <ip4_output_if>
 80163e0:	4603      	mov	r3, r0
 80163e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80163e4:	68b8      	ldr	r0, [r7, #8]
 80163e6:	f7fa fdc9 	bl	8010f7c <pbuf_free>
  return err;
 80163ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	3718      	adds	r7, #24
 80163f2:	46bd      	mov	sp, r7
 80163f4:	bd80      	pop	{r7, pc}
 80163f6:	bf00      	nop
 80163f8:	0801fec0 	.word	0x0801fec0
 80163fc:	08020618 	.word	0x08020618
 8016400:	0801ff14 	.word	0x0801ff14

08016404 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016404:	b590      	push	{r4, r7, lr}
 8016406:	b08b      	sub	sp, #44	; 0x2c
 8016408:	af04      	add	r7, sp, #16
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	60b9      	str	r1, [r7, #8]
 801640e:	607a      	str	r2, [r7, #4]
 8016410:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016412:	683b      	ldr	r3, [r7, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d106      	bne.n	8016426 <tcp_rst+0x22>
 8016418:	4b1f      	ldr	r3, [pc, #124]	; (8016498 <tcp_rst+0x94>)
 801641a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801641e:	491f      	ldr	r1, [pc, #124]	; (801649c <tcp_rst+0x98>)
 8016420:	481f      	ldr	r0, [pc, #124]	; (80164a0 <tcp_rst+0x9c>)
 8016422:	f006 f877 	bl	801c514 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016428:	2b00      	cmp	r3, #0
 801642a:	d106      	bne.n	801643a <tcp_rst+0x36>
 801642c:	4b1a      	ldr	r3, [pc, #104]	; (8016498 <tcp_rst+0x94>)
 801642e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016432:	491c      	ldr	r1, [pc, #112]	; (80164a4 <tcp_rst+0xa0>)
 8016434:	481a      	ldr	r0, [pc, #104]	; (80164a0 <tcp_rst+0x9c>)
 8016436:	f006 f86d 	bl	801c514 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801643a:	2300      	movs	r3, #0
 801643c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801643e:	f246 0308 	movw	r3, #24584	; 0x6008
 8016442:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016444:	7dfb      	ldrb	r3, [r7, #23]
 8016446:	b29c      	uxth	r4, r3
 8016448:	68b8      	ldr	r0, [r7, #8]
 801644a:	f7f9 f9ae 	bl	800f7aa <lwip_htonl>
 801644e:	4602      	mov	r2, r0
 8016450:	8abb      	ldrh	r3, [r7, #20]
 8016452:	9303      	str	r3, [sp, #12]
 8016454:	2314      	movs	r3, #20
 8016456:	9302      	str	r3, [sp, #8]
 8016458:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801645a:	9301      	str	r3, [sp, #4]
 801645c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801645e:	9300      	str	r3, [sp, #0]
 8016460:	4613      	mov	r3, r2
 8016462:	2200      	movs	r2, #0
 8016464:	4621      	mov	r1, r4
 8016466:	6878      	ldr	r0, [r7, #4]
 8016468:	f7ff fe94 	bl	8016194 <tcp_output_alloc_header_common>
 801646c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801646e:	693b      	ldr	r3, [r7, #16]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d00c      	beq.n	801648e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016474:	7dfb      	ldrb	r3, [r7, #23]
 8016476:	2200      	movs	r2, #0
 8016478:	6939      	ldr	r1, [r7, #16]
 801647a:	68f8      	ldr	r0, [r7, #12]
 801647c:	f7ff ff3a 	bl	80162f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016482:	683a      	ldr	r2, [r7, #0]
 8016484:	6939      	ldr	r1, [r7, #16]
 8016486:	68f8      	ldr	r0, [r7, #12]
 8016488:	f7ff ff72 	bl	8016370 <tcp_output_control_segment>
 801648c:	e000      	b.n	8016490 <tcp_rst+0x8c>
    return;
 801648e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016490:	371c      	adds	r7, #28
 8016492:	46bd      	mov	sp, r7
 8016494:	bd90      	pop	{r4, r7, pc}
 8016496:	bf00      	nop
 8016498:	0801fec0 	.word	0x0801fec0
 801649c:	08020644 	.word	0x08020644
 80164a0:	0801ff14 	.word	0x0801ff14
 80164a4:	08020660 	.word	0x08020660

080164a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80164a8:	b590      	push	{r4, r7, lr}
 80164aa:	b087      	sub	sp, #28
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80164b0:	2300      	movs	r3, #0
 80164b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80164b4:	2300      	movs	r3, #0
 80164b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d106      	bne.n	80164cc <tcp_send_empty_ack+0x24>
 80164be:	4b28      	ldr	r3, [pc, #160]	; (8016560 <tcp_send_empty_ack+0xb8>)
 80164c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80164c4:	4927      	ldr	r1, [pc, #156]	; (8016564 <tcp_send_empty_ack+0xbc>)
 80164c6:	4828      	ldr	r0, [pc, #160]	; (8016568 <tcp_send_empty_ack+0xc0>)
 80164c8:	f006 f824 	bl	801c514 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80164cc:	7dfb      	ldrb	r3, [r7, #23]
 80164ce:	009b      	lsls	r3, r3, #2
 80164d0:	b2db      	uxtb	r3, r3
 80164d2:	f003 0304 	and.w	r3, r3, #4
 80164d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80164d8:	7d7b      	ldrb	r3, [r7, #21]
 80164da:	b29c      	uxth	r4, r3
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7f9 f962 	bl	800f7aa <lwip_htonl>
 80164e6:	4603      	mov	r3, r0
 80164e8:	2200      	movs	r2, #0
 80164ea:	4621      	mov	r1, r4
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f7ff fec3 	bl	8016278 <tcp_output_alloc_header>
 80164f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80164f4:	693b      	ldr	r3, [r7, #16]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d109      	bne.n	801650e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	8b5b      	ldrh	r3, [r3, #26]
 80164fe:	f043 0303 	orr.w	r3, r3, #3
 8016502:	b29a      	uxth	r2, r3
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016508:	f06f 0301 	mvn.w	r3, #1
 801650c:	e023      	b.n	8016556 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801650e:	7dbb      	ldrb	r3, [r7, #22]
 8016510:	7dfa      	ldrb	r2, [r7, #23]
 8016512:	6939      	ldr	r1, [r7, #16]
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f7ff feed 	bl	80162f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801651a:	687a      	ldr	r2, [r7, #4]
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	3304      	adds	r3, #4
 8016520:	6939      	ldr	r1, [r7, #16]
 8016522:	6878      	ldr	r0, [r7, #4]
 8016524:	f7ff ff24 	bl	8016370 <tcp_output_control_segment>
 8016528:	4603      	mov	r3, r0
 801652a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801652c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d007      	beq.n	8016544 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	8b5b      	ldrh	r3, [r3, #26]
 8016538:	f043 0303 	orr.w	r3, r3, #3
 801653c:	b29a      	uxth	r2, r3
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	835a      	strh	r2, [r3, #26]
 8016542:	e006      	b.n	8016552 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	8b5b      	ldrh	r3, [r3, #26]
 8016548:	f023 0303 	bic.w	r3, r3, #3
 801654c:	b29a      	uxth	r2, r3
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016552:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016556:	4618      	mov	r0, r3
 8016558:	371c      	adds	r7, #28
 801655a:	46bd      	mov	sp, r7
 801655c:	bd90      	pop	{r4, r7, pc}
 801655e:	bf00      	nop
 8016560:	0801fec0 	.word	0x0801fec0
 8016564:	0802067c 	.word	0x0802067c
 8016568:	0801ff14 	.word	0x0801ff14

0801656c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801656c:	b590      	push	{r4, r7, lr}
 801656e:	b087      	sub	sp, #28
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016574:	2300      	movs	r3, #0
 8016576:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d106      	bne.n	801658c <tcp_keepalive+0x20>
 801657e:	4b18      	ldr	r3, [pc, #96]	; (80165e0 <tcp_keepalive+0x74>)
 8016580:	f640 0224 	movw	r2, #2084	; 0x824
 8016584:	4917      	ldr	r1, [pc, #92]	; (80165e4 <tcp_keepalive+0x78>)
 8016586:	4818      	ldr	r0, [pc, #96]	; (80165e8 <tcp_keepalive+0x7c>)
 8016588:	f005 ffc4 	bl	801c514 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801658c:	7dfb      	ldrb	r3, [r7, #23]
 801658e:	b29c      	uxth	r4, r3
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016594:	3b01      	subs	r3, #1
 8016596:	4618      	mov	r0, r3
 8016598:	f7f9 f907 	bl	800f7aa <lwip_htonl>
 801659c:	4603      	mov	r3, r0
 801659e:	2200      	movs	r2, #0
 80165a0:	4621      	mov	r1, r4
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f7ff fe68 	bl	8016278 <tcp_output_alloc_header>
 80165a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80165aa:	693b      	ldr	r3, [r7, #16]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d102      	bne.n	80165b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80165b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165b4:	e010      	b.n	80165d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80165b6:	7dfb      	ldrb	r3, [r7, #23]
 80165b8:	2200      	movs	r2, #0
 80165ba:	6939      	ldr	r1, [r7, #16]
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f7ff fe99 	bl	80162f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	3304      	adds	r3, #4
 80165c8:	6939      	ldr	r1, [r7, #16]
 80165ca:	6878      	ldr	r0, [r7, #4]
 80165cc:	f7ff fed0 	bl	8016370 <tcp_output_control_segment>
 80165d0:	4603      	mov	r3, r0
 80165d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80165d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80165d8:	4618      	mov	r0, r3
 80165da:	371c      	adds	r7, #28
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd90      	pop	{r4, r7, pc}
 80165e0:	0801fec0 	.word	0x0801fec0
 80165e4:	0802069c 	.word	0x0802069c
 80165e8:	0801ff14 	.word	0x0801ff14

080165ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80165ec:	b590      	push	{r4, r7, lr}
 80165ee:	b08b      	sub	sp, #44	; 0x2c
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80165f4:	2300      	movs	r3, #0
 80165f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d106      	bne.n	801660e <tcp_zero_window_probe+0x22>
 8016600:	4b4c      	ldr	r3, [pc, #304]	; (8016734 <tcp_zero_window_probe+0x148>)
 8016602:	f640 024f 	movw	r2, #2127	; 0x84f
 8016606:	494c      	ldr	r1, [pc, #304]	; (8016738 <tcp_zero_window_probe+0x14c>)
 8016608:	484c      	ldr	r0, [pc, #304]	; (801673c <tcp_zero_window_probe+0x150>)
 801660a:	f005 ff83 	bl	801c514 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016612:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016614:	6a3b      	ldr	r3, [r7, #32]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d101      	bne.n	801661e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801661a:	2300      	movs	r3, #0
 801661c:	e086      	b.n	801672c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016624:	2bff      	cmp	r3, #255	; 0xff
 8016626:	d007      	beq.n	8016638 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801662e:	3301      	adds	r3, #1
 8016630:	b2da      	uxtb	r2, r3
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016638:	6a3b      	ldr	r3, [r7, #32]
 801663a:	68db      	ldr	r3, [r3, #12]
 801663c:	899b      	ldrh	r3, [r3, #12]
 801663e:	b29b      	uxth	r3, r3
 8016640:	4618      	mov	r0, r3
 8016642:	f7f9 f89d 	bl	800f780 <lwip_htons>
 8016646:	4603      	mov	r3, r0
 8016648:	b2db      	uxtb	r3, r3
 801664a:	f003 0301 	and.w	r3, r3, #1
 801664e:	2b00      	cmp	r3, #0
 8016650:	d005      	beq.n	801665e <tcp_zero_window_probe+0x72>
 8016652:	6a3b      	ldr	r3, [r7, #32]
 8016654:	891b      	ldrh	r3, [r3, #8]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d101      	bne.n	801665e <tcp_zero_window_probe+0x72>
 801665a:	2301      	movs	r3, #1
 801665c:	e000      	b.n	8016660 <tcp_zero_window_probe+0x74>
 801665e:	2300      	movs	r3, #0
 8016660:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016662:	7ffb      	ldrb	r3, [r7, #31]
 8016664:	2b00      	cmp	r3, #0
 8016666:	bf0c      	ite	eq
 8016668:	2301      	moveq	r3, #1
 801666a:	2300      	movne	r3, #0
 801666c:	b2db      	uxtb	r3, r3
 801666e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016674:	b299      	uxth	r1, r3
 8016676:	6a3b      	ldr	r3, [r7, #32]
 8016678:	68db      	ldr	r3, [r3, #12]
 801667a:	685b      	ldr	r3, [r3, #4]
 801667c:	8bba      	ldrh	r2, [r7, #28]
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f7ff fdfa 	bl	8016278 <tcp_output_alloc_header>
 8016684:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016686:	69bb      	ldr	r3, [r7, #24]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d102      	bne.n	8016692 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801668c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016690:	e04c      	b.n	801672c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016692:	69bb      	ldr	r3, [r7, #24]
 8016694:	685b      	ldr	r3, [r3, #4]
 8016696:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016698:	7ffb      	ldrb	r3, [r7, #31]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d011      	beq.n	80166c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	899b      	ldrh	r3, [r3, #12]
 80166a2:	b29b      	uxth	r3, r3
 80166a4:	b21b      	sxth	r3, r3
 80166a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80166aa:	b21c      	sxth	r4, r3
 80166ac:	2011      	movs	r0, #17
 80166ae:	f7f9 f867 	bl	800f780 <lwip_htons>
 80166b2:	4603      	mov	r3, r0
 80166b4:	b21b      	sxth	r3, r3
 80166b6:	4323      	orrs	r3, r4
 80166b8:	b21b      	sxth	r3, r3
 80166ba:	b29a      	uxth	r2, r3
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	819a      	strh	r2, [r3, #12]
 80166c0:	e010      	b.n	80166e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80166c2:	69bb      	ldr	r3, [r7, #24]
 80166c4:	685b      	ldr	r3, [r3, #4]
 80166c6:	3314      	adds	r3, #20
 80166c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80166ca:	6a3b      	ldr	r3, [r7, #32]
 80166cc:	6858      	ldr	r0, [r3, #4]
 80166ce:	6a3b      	ldr	r3, [r7, #32]
 80166d0:	685b      	ldr	r3, [r3, #4]
 80166d2:	891a      	ldrh	r2, [r3, #8]
 80166d4:	6a3b      	ldr	r3, [r7, #32]
 80166d6:	891b      	ldrh	r3, [r3, #8]
 80166d8:	1ad3      	subs	r3, r2, r3
 80166da:	b29b      	uxth	r3, r3
 80166dc:	2201      	movs	r2, #1
 80166de:	6939      	ldr	r1, [r7, #16]
 80166e0:	f7fa fe52 	bl	8011388 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80166e4:	6a3b      	ldr	r3, [r7, #32]
 80166e6:	68db      	ldr	r3, [r3, #12]
 80166e8:	685b      	ldr	r3, [r3, #4]
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7f9 f85d 	bl	800f7aa <lwip_htonl>
 80166f0:	4603      	mov	r3, r0
 80166f2:	3301      	adds	r3, #1
 80166f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	1ad3      	subs	r3, r2, r3
 80166fe:	2b00      	cmp	r3, #0
 8016700:	da02      	bge.n	8016708 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	68fa      	ldr	r2, [r7, #12]
 8016706:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801670c:	2200      	movs	r2, #0
 801670e:	69b9      	ldr	r1, [r7, #24]
 8016710:	6878      	ldr	r0, [r7, #4]
 8016712:	f7ff fdef 	bl	80162f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016716:	687a      	ldr	r2, [r7, #4]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	3304      	adds	r3, #4
 801671c:	69b9      	ldr	r1, [r7, #24]
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f7ff fe26 	bl	8016370 <tcp_output_control_segment>
 8016724:	4603      	mov	r3, r0
 8016726:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016728:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801672c:	4618      	mov	r0, r3
 801672e:	372c      	adds	r7, #44	; 0x2c
 8016730:	46bd      	mov	sp, r7
 8016732:	bd90      	pop	{r4, r7, pc}
 8016734:	0801fec0 	.word	0x0801fec0
 8016738:	080206b8 	.word	0x080206b8
 801673c:	0801ff14 	.word	0x0801ff14

08016740 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016748:	f7fa ff0c 	bl	8011564 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801674c:	4b0a      	ldr	r3, [pc, #40]	; (8016778 <tcpip_tcp_timer+0x38>)
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d103      	bne.n	801675c <tcpip_tcp_timer+0x1c>
 8016754:	4b09      	ldr	r3, [pc, #36]	; (801677c <tcpip_tcp_timer+0x3c>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d005      	beq.n	8016768 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801675c:	2200      	movs	r2, #0
 801675e:	4908      	ldr	r1, [pc, #32]	; (8016780 <tcpip_tcp_timer+0x40>)
 8016760:	20fa      	movs	r0, #250	; 0xfa
 8016762:	f000 f8f3 	bl	801694c <sys_timeout>
 8016766:	e003      	b.n	8016770 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016768:	4b06      	ldr	r3, [pc, #24]	; (8016784 <tcpip_tcp_timer+0x44>)
 801676a:	2200      	movs	r2, #0
 801676c:	601a      	str	r2, [r3, #0]
  }
}
 801676e:	bf00      	nop
 8016770:	bf00      	nop
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}
 8016778:	2000c5e4 	.word	0x2000c5e4
 801677c:	2000c5e8 	.word	0x2000c5e8
 8016780:	08016741 	.word	0x08016741
 8016784:	2000c630 	.word	0x2000c630

08016788 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801678c:	4b0a      	ldr	r3, [pc, #40]	; (80167b8 <tcp_timer_needed+0x30>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d10f      	bne.n	80167b4 <tcp_timer_needed+0x2c>
 8016794:	4b09      	ldr	r3, [pc, #36]	; (80167bc <tcp_timer_needed+0x34>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d103      	bne.n	80167a4 <tcp_timer_needed+0x1c>
 801679c:	4b08      	ldr	r3, [pc, #32]	; (80167c0 <tcp_timer_needed+0x38>)
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d007      	beq.n	80167b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80167a4:	4b04      	ldr	r3, [pc, #16]	; (80167b8 <tcp_timer_needed+0x30>)
 80167a6:	2201      	movs	r2, #1
 80167a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80167aa:	2200      	movs	r2, #0
 80167ac:	4905      	ldr	r1, [pc, #20]	; (80167c4 <tcp_timer_needed+0x3c>)
 80167ae:	20fa      	movs	r0, #250	; 0xfa
 80167b0:	f000 f8cc 	bl	801694c <sys_timeout>
  }
}
 80167b4:	bf00      	nop
 80167b6:	bd80      	pop	{r7, pc}
 80167b8:	2000c630 	.word	0x2000c630
 80167bc:	2000c5e4 	.word	0x2000c5e4
 80167c0:	2000c5e8 	.word	0x2000c5e8
 80167c4:	08016741 	.word	0x08016741

080167c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b086      	sub	sp, #24
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	60f8      	str	r0, [r7, #12]
 80167d0:	60b9      	str	r1, [r7, #8]
 80167d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80167d4:	200a      	movs	r0, #10
 80167d6:	f7f9 fcab 	bl	8010130 <memp_malloc>
 80167da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d109      	bne.n	80167f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80167e2:	693b      	ldr	r3, [r7, #16]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d151      	bne.n	801688c <sys_timeout_abs+0xc4>
 80167e8:	4b2a      	ldr	r3, [pc, #168]	; (8016894 <sys_timeout_abs+0xcc>)
 80167ea:	22be      	movs	r2, #190	; 0xbe
 80167ec:	492a      	ldr	r1, [pc, #168]	; (8016898 <sys_timeout_abs+0xd0>)
 80167ee:	482b      	ldr	r0, [pc, #172]	; (801689c <sys_timeout_abs+0xd4>)
 80167f0:	f005 fe90 	bl	801c514 <iprintf>
    return;
 80167f4:	e04a      	b.n	801688c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	2200      	movs	r2, #0
 80167fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80167fc:	693b      	ldr	r3, [r7, #16]
 80167fe:	68ba      	ldr	r2, [r7, #8]
 8016800:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	687a      	ldr	r2, [r7, #4]
 8016806:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	68fa      	ldr	r2, [r7, #12]
 801680c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801680e:	4b24      	ldr	r3, [pc, #144]	; (80168a0 <sys_timeout_abs+0xd8>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d103      	bne.n	801681e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016816:	4a22      	ldr	r2, [pc, #136]	; (80168a0 <sys_timeout_abs+0xd8>)
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	6013      	str	r3, [r2, #0]
    return;
 801681c:	e037      	b.n	801688e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801681e:	693b      	ldr	r3, [r7, #16]
 8016820:	685a      	ldr	r2, [r3, #4]
 8016822:	4b1f      	ldr	r3, [pc, #124]	; (80168a0 <sys_timeout_abs+0xd8>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	685b      	ldr	r3, [r3, #4]
 8016828:	1ad3      	subs	r3, r2, r3
 801682a:	0fdb      	lsrs	r3, r3, #31
 801682c:	f003 0301 	and.w	r3, r3, #1
 8016830:	b2db      	uxtb	r3, r3
 8016832:	2b00      	cmp	r3, #0
 8016834:	d007      	beq.n	8016846 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016836:	4b1a      	ldr	r3, [pc, #104]	; (80168a0 <sys_timeout_abs+0xd8>)
 8016838:	681a      	ldr	r2, [r3, #0]
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801683e:	4a18      	ldr	r2, [pc, #96]	; (80168a0 <sys_timeout_abs+0xd8>)
 8016840:	693b      	ldr	r3, [r7, #16]
 8016842:	6013      	str	r3, [r2, #0]
 8016844:	e023      	b.n	801688e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016846:	4b16      	ldr	r3, [pc, #88]	; (80168a0 <sys_timeout_abs+0xd8>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	617b      	str	r3, [r7, #20]
 801684c:	e01a      	b.n	8016884 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801684e:	697b      	ldr	r3, [r7, #20]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d00b      	beq.n	801686e <sys_timeout_abs+0xa6>
 8016856:	693b      	ldr	r3, [r7, #16]
 8016858:	685a      	ldr	r2, [r3, #4]
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	685b      	ldr	r3, [r3, #4]
 8016860:	1ad3      	subs	r3, r2, r3
 8016862:	0fdb      	lsrs	r3, r3, #31
 8016864:	f003 0301 	and.w	r3, r3, #1
 8016868:	b2db      	uxtb	r3, r3
 801686a:	2b00      	cmp	r3, #0
 801686c:	d007      	beq.n	801687e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	693b      	ldr	r3, [r7, #16]
 8016874:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016876:	697b      	ldr	r3, [r7, #20]
 8016878:	693a      	ldr	r2, [r7, #16]
 801687a:	601a      	str	r2, [r3, #0]
        break;
 801687c:	e007      	b.n	801688e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801687e:	697b      	ldr	r3, [r7, #20]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	617b      	str	r3, [r7, #20]
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d1e1      	bne.n	801684e <sys_timeout_abs+0x86>
 801688a:	e000      	b.n	801688e <sys_timeout_abs+0xc6>
    return;
 801688c:	bf00      	nop
      }
    }
  }
}
 801688e:	3718      	adds	r7, #24
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}
 8016894:	080206dc 	.word	0x080206dc
 8016898:	08020710 	.word	0x08020710
 801689c:	08020750 	.word	0x08020750
 80168a0:	2000c628 	.word	0x2000c628

080168a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b086      	sub	sp, #24
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80168b0:	697b      	ldr	r3, [r7, #20]
 80168b2:	685b      	ldr	r3, [r3, #4]
 80168b4:	4798      	blx	r3

  now = sys_now();
 80168b6:	f7ef f857 	bl	8005968 <sys_now>
 80168ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80168bc:	697b      	ldr	r3, [r7, #20]
 80168be:	681a      	ldr	r2, [r3, #0]
 80168c0:	4b0f      	ldr	r3, [pc, #60]	; (8016900 <lwip_cyclic_timer+0x5c>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	4413      	add	r3, r2
 80168c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80168c8:	68fa      	ldr	r2, [r7, #12]
 80168ca:	693b      	ldr	r3, [r7, #16]
 80168cc:	1ad3      	subs	r3, r2, r3
 80168ce:	0fdb      	lsrs	r3, r3, #31
 80168d0:	f003 0301 	and.w	r3, r3, #1
 80168d4:	b2db      	uxtb	r3, r3
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d009      	beq.n	80168ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80168da:	697b      	ldr	r3, [r7, #20]
 80168dc:	681a      	ldr	r2, [r3, #0]
 80168de:	693b      	ldr	r3, [r7, #16]
 80168e0:	4413      	add	r3, r2
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	4907      	ldr	r1, [pc, #28]	; (8016904 <lwip_cyclic_timer+0x60>)
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7ff ff6e 	bl	80167c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80168ec:	e004      	b.n	80168f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80168ee:	687a      	ldr	r2, [r7, #4]
 80168f0:	4904      	ldr	r1, [pc, #16]	; (8016904 <lwip_cyclic_timer+0x60>)
 80168f2:	68f8      	ldr	r0, [r7, #12]
 80168f4:	f7ff ff68 	bl	80167c8 <sys_timeout_abs>
}
 80168f8:	bf00      	nop
 80168fa:	3718      	adds	r7, #24
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}
 8016900:	2000c62c 	.word	0x2000c62c
 8016904:	080168a5 	.word	0x080168a5

08016908 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801690e:	2301      	movs	r3, #1
 8016910:	607b      	str	r3, [r7, #4]
 8016912:	e00e      	b.n	8016932 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016914:	4a0b      	ldr	r2, [pc, #44]	; (8016944 <sys_timeouts_init+0x3c>)
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	00db      	lsls	r3, r3, #3
 8016920:	4a08      	ldr	r2, [pc, #32]	; (8016944 <sys_timeouts_init+0x3c>)
 8016922:	4413      	add	r3, r2
 8016924:	461a      	mov	r2, r3
 8016926:	4908      	ldr	r1, [pc, #32]	; (8016948 <sys_timeouts_init+0x40>)
 8016928:	f000 f810 	bl	801694c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	3301      	adds	r3, #1
 8016930:	607b      	str	r3, [r7, #4]
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2b04      	cmp	r3, #4
 8016936:	d9ed      	bls.n	8016914 <sys_timeouts_init+0xc>
  }
}
 8016938:	bf00      	nop
 801693a:	bf00      	nop
 801693c:	3708      	adds	r7, #8
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
 8016942:	bf00      	nop
 8016944:	08021804 	.word	0x08021804
 8016948:	080168a5 	.word	0x080168a5

0801694c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b086      	sub	sp, #24
 8016950:	af00      	add	r7, sp, #0
 8016952:	60f8      	str	r0, [r7, #12]
 8016954:	60b9      	str	r1, [r7, #8]
 8016956:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801695e:	d306      	bcc.n	801696e <sys_timeout+0x22>
 8016960:	4b0a      	ldr	r3, [pc, #40]	; (801698c <sys_timeout+0x40>)
 8016962:	f240 1229 	movw	r2, #297	; 0x129
 8016966:	490a      	ldr	r1, [pc, #40]	; (8016990 <sys_timeout+0x44>)
 8016968:	480a      	ldr	r0, [pc, #40]	; (8016994 <sys_timeout+0x48>)
 801696a:	f005 fdd3 	bl	801c514 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801696e:	f7ee fffb 	bl	8005968 <sys_now>
 8016972:	4602      	mov	r2, r0
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	4413      	add	r3, r2
 8016978:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801697a:	687a      	ldr	r2, [r7, #4]
 801697c:	68b9      	ldr	r1, [r7, #8]
 801697e:	6978      	ldr	r0, [r7, #20]
 8016980:	f7ff ff22 	bl	80167c8 <sys_timeout_abs>
#endif
}
 8016984:	bf00      	nop
 8016986:	3718      	adds	r7, #24
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}
 801698c:	080206dc 	.word	0x080206dc
 8016990:	08020778 	.word	0x08020778
 8016994:	08020750 	.word	0x08020750

08016998 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b084      	sub	sp, #16
 801699c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801699e:	f7ee ffe3 	bl	8005968 <sys_now>
 80169a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80169a4:	4b17      	ldr	r3, [pc, #92]	; (8016a04 <sys_check_timeouts+0x6c>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80169aa:	68bb      	ldr	r3, [r7, #8]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d022      	beq.n	80169f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80169b0:	68bb      	ldr	r3, [r7, #8]
 80169b2:	685b      	ldr	r3, [r3, #4]
 80169b4:	68fa      	ldr	r2, [r7, #12]
 80169b6:	1ad3      	subs	r3, r2, r3
 80169b8:	0fdb      	lsrs	r3, r3, #31
 80169ba:	f003 0301 	and.w	r3, r3, #1
 80169be:	b2db      	uxtb	r3, r3
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d11a      	bne.n	80169fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80169c4:	68bb      	ldr	r3, [r7, #8]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	4a0e      	ldr	r2, [pc, #56]	; (8016a04 <sys_check_timeouts+0x6c>)
 80169ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80169cc:	68bb      	ldr	r3, [r7, #8]
 80169ce:	689b      	ldr	r3, [r3, #8]
 80169d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	68db      	ldr	r3, [r3, #12]
 80169d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	685b      	ldr	r3, [r3, #4]
 80169dc:	4a0a      	ldr	r2, [pc, #40]	; (8016a08 <sys_check_timeouts+0x70>)
 80169de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80169e0:	68b9      	ldr	r1, [r7, #8]
 80169e2:	200a      	movs	r0, #10
 80169e4:	f7f9 fc1a 	bl	801021c <memp_free>
    if (handler != NULL) {
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d0da      	beq.n	80169a4 <sys_check_timeouts+0xc>
      handler(arg);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	6838      	ldr	r0, [r7, #0]
 80169f2:	4798      	blx	r3
  do {
 80169f4:	e7d6      	b.n	80169a4 <sys_check_timeouts+0xc>
      return;
 80169f6:	bf00      	nop
 80169f8:	e000      	b.n	80169fc <sys_check_timeouts+0x64>
      return;
 80169fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80169fc:	3710      	adds	r7, #16
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}
 8016a02:	bf00      	nop
 8016a04:	2000c628 	.word	0x2000c628
 8016a08:	2000c62c 	.word	0x2000c62c

08016a0c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016a12:	4b16      	ldr	r3, [pc, #88]	; (8016a6c <sys_timeouts_sleeptime+0x60>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d102      	bne.n	8016a20 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a1e:	e020      	b.n	8016a62 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016a20:	f7ee ffa2 	bl	8005968 <sys_now>
 8016a24:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016a26:	4b11      	ldr	r3, [pc, #68]	; (8016a6c <sys_timeouts_sleeptime+0x60>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	685a      	ldr	r2, [r3, #4]
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	1ad3      	subs	r3, r2, r3
 8016a30:	0fdb      	lsrs	r3, r3, #31
 8016a32:	f003 0301 	and.w	r3, r3, #1
 8016a36:	b2db      	uxtb	r3, r3
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d001      	beq.n	8016a40 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	e010      	b.n	8016a62 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016a40:	4b0a      	ldr	r3, [pc, #40]	; (8016a6c <sys_timeouts_sleeptime+0x60>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	685a      	ldr	r2, [r3, #4]
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	1ad3      	subs	r3, r2, r3
 8016a4a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	da06      	bge.n	8016a60 <sys_timeouts_sleeptime+0x54>
 8016a52:	4b07      	ldr	r3, [pc, #28]	; (8016a70 <sys_timeouts_sleeptime+0x64>)
 8016a54:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016a58:	4906      	ldr	r1, [pc, #24]	; (8016a74 <sys_timeouts_sleeptime+0x68>)
 8016a5a:	4807      	ldr	r0, [pc, #28]	; (8016a78 <sys_timeouts_sleeptime+0x6c>)
 8016a5c:	f005 fd5a 	bl	801c514 <iprintf>
    return ret;
 8016a60:	683b      	ldr	r3, [r7, #0]
  }
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3708      	adds	r7, #8
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	bf00      	nop
 8016a6c:	2000c628 	.word	0x2000c628
 8016a70:	080206dc 	.word	0x080206dc
 8016a74:	080207b0 	.word	0x080207b0
 8016a78:	08020750 	.word	0x08020750

08016a7c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016a80:	f005 fc36 	bl	801c2f0 <rand>
 8016a84:	4603      	mov	r3, r0
 8016a86:	b29b      	uxth	r3, r3
 8016a88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016a8c:	b29b      	uxth	r3, r3
 8016a8e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016a92:	b29a      	uxth	r2, r3
 8016a94:	4b01      	ldr	r3, [pc, #4]	; (8016a9c <udp_init+0x20>)
 8016a96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016a98:	bf00      	nop
 8016a9a:	bd80      	pop	{r7, pc}
 8016a9c:	20000030 	.word	0x20000030

08016aa0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016aa0:	b480      	push	{r7}
 8016aa2:	b083      	sub	sp, #12
 8016aa4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016aaa:	4b17      	ldr	r3, [pc, #92]	; (8016b08 <udp_new_port+0x68>)
 8016aac:	881b      	ldrh	r3, [r3, #0]
 8016aae:	1c5a      	adds	r2, r3, #1
 8016ab0:	b291      	uxth	r1, r2
 8016ab2:	4a15      	ldr	r2, [pc, #84]	; (8016b08 <udp_new_port+0x68>)
 8016ab4:	8011      	strh	r1, [r2, #0]
 8016ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016aba:	4293      	cmp	r3, r2
 8016abc:	d103      	bne.n	8016ac6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016abe:	4b12      	ldr	r3, [pc, #72]	; (8016b08 <udp_new_port+0x68>)
 8016ac0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016ac4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ac6:	4b11      	ldr	r3, [pc, #68]	; (8016b0c <udp_new_port+0x6c>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	603b      	str	r3, [r7, #0]
 8016acc:	e011      	b.n	8016af2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	8a5a      	ldrh	r2, [r3, #18]
 8016ad2:	4b0d      	ldr	r3, [pc, #52]	; (8016b08 <udp_new_port+0x68>)
 8016ad4:	881b      	ldrh	r3, [r3, #0]
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	d108      	bne.n	8016aec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016ada:	88fb      	ldrh	r3, [r7, #6]
 8016adc:	3301      	adds	r3, #1
 8016ade:	80fb      	strh	r3, [r7, #6]
 8016ae0:	88fb      	ldrh	r3, [r7, #6]
 8016ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016ae6:	d3e0      	bcc.n	8016aaa <udp_new_port+0xa>
        return 0;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	e007      	b.n	8016afc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	68db      	ldr	r3, [r3, #12]
 8016af0:	603b      	str	r3, [r7, #0]
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d1ea      	bne.n	8016ace <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016af8:	4b03      	ldr	r3, [pc, #12]	; (8016b08 <udp_new_port+0x68>)
 8016afa:	881b      	ldrh	r3, [r3, #0]
}
 8016afc:	4618      	mov	r0, r3
 8016afe:	370c      	adds	r7, #12
 8016b00:	46bd      	mov	sp, r7
 8016b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b06:	4770      	bx	lr
 8016b08:	20000030 	.word	0x20000030
 8016b0c:	2000c634 	.word	0x2000c634

08016b10 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b084      	sub	sp, #16
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	60f8      	str	r0, [r7, #12]
 8016b18:	60b9      	str	r1, [r7, #8]
 8016b1a:	4613      	mov	r3, r2
 8016b1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d105      	bne.n	8016b30 <udp_input_local_match+0x20>
 8016b24:	4b27      	ldr	r3, [pc, #156]	; (8016bc4 <udp_input_local_match+0xb4>)
 8016b26:	2287      	movs	r2, #135	; 0x87
 8016b28:	4927      	ldr	r1, [pc, #156]	; (8016bc8 <udp_input_local_match+0xb8>)
 8016b2a:	4828      	ldr	r0, [pc, #160]	; (8016bcc <udp_input_local_match+0xbc>)
 8016b2c:	f005 fcf2 	bl	801c514 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d105      	bne.n	8016b42 <udp_input_local_match+0x32>
 8016b36:	4b23      	ldr	r3, [pc, #140]	; (8016bc4 <udp_input_local_match+0xb4>)
 8016b38:	2288      	movs	r2, #136	; 0x88
 8016b3a:	4925      	ldr	r1, [pc, #148]	; (8016bd0 <udp_input_local_match+0xc0>)
 8016b3c:	4823      	ldr	r0, [pc, #140]	; (8016bcc <udp_input_local_match+0xbc>)
 8016b3e:	f005 fce9 	bl	801c514 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	7a1b      	ldrb	r3, [r3, #8]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d00b      	beq.n	8016b62 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	7a1a      	ldrb	r2, [r3, #8]
 8016b4e:	4b21      	ldr	r3, [pc, #132]	; (8016bd4 <udp_input_local_match+0xc4>)
 8016b50:	685b      	ldr	r3, [r3, #4]
 8016b52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b56:	3301      	adds	r3, #1
 8016b58:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b5a:	429a      	cmp	r2, r3
 8016b5c:	d001      	beq.n	8016b62 <udp_input_local_match+0x52>
    return 0;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	e02b      	b.n	8016bba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016b62:	79fb      	ldrb	r3, [r7, #7]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d018      	beq.n	8016b9a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d013      	beq.n	8016b96 <udp_input_local_match+0x86>
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d00f      	beq.n	8016b96 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016b76:	4b17      	ldr	r3, [pc, #92]	; (8016bd4 <udp_input_local_match+0xc4>)
 8016b78:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016b7e:	d00a      	beq.n	8016b96 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	681a      	ldr	r2, [r3, #0]
 8016b84:	4b13      	ldr	r3, [pc, #76]	; (8016bd4 <udp_input_local_match+0xc4>)
 8016b86:	695b      	ldr	r3, [r3, #20]
 8016b88:	405a      	eors	r2, r3
 8016b8a:	68bb      	ldr	r3, [r7, #8]
 8016b8c:	3308      	adds	r3, #8
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d110      	bne.n	8016bb8 <udp_input_local_match+0xa8>
          return 1;
 8016b96:	2301      	movs	r3, #1
 8016b98:	e00f      	b.n	8016bba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d009      	beq.n	8016bb4 <udp_input_local_match+0xa4>
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d005      	beq.n	8016bb4 <udp_input_local_match+0xa4>
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	681a      	ldr	r2, [r3, #0]
 8016bac:	4b09      	ldr	r3, [pc, #36]	; (8016bd4 <udp_input_local_match+0xc4>)
 8016bae:	695b      	ldr	r3, [r3, #20]
 8016bb0:	429a      	cmp	r2, r3
 8016bb2:	d101      	bne.n	8016bb8 <udp_input_local_match+0xa8>
        return 1;
 8016bb4:	2301      	movs	r3, #1
 8016bb6:	e000      	b.n	8016bba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016bb8:	2300      	movs	r3, #0
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3710      	adds	r7, #16
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}
 8016bc2:	bf00      	nop
 8016bc4:	080207c4 	.word	0x080207c4
 8016bc8:	080207f4 	.word	0x080207f4
 8016bcc:	08020818 	.word	0x08020818
 8016bd0:	08020840 	.word	0x08020840
 8016bd4:	20008e64 	.word	0x20008e64

08016bd8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016bd8:	b590      	push	{r4, r7, lr}
 8016bda:	b08d      	sub	sp, #52	; 0x34
 8016bdc:	af02      	add	r7, sp, #8
 8016bde:	6078      	str	r0, [r7, #4]
 8016be0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016be2:	2300      	movs	r3, #0
 8016be4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d105      	bne.n	8016bf8 <udp_input+0x20>
 8016bec:	4b7c      	ldr	r3, [pc, #496]	; (8016de0 <udp_input+0x208>)
 8016bee:	22cf      	movs	r2, #207	; 0xcf
 8016bf0:	497c      	ldr	r1, [pc, #496]	; (8016de4 <udp_input+0x20c>)
 8016bf2:	487d      	ldr	r0, [pc, #500]	; (8016de8 <udp_input+0x210>)
 8016bf4:	f005 fc8e 	bl	801c514 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016bf8:	683b      	ldr	r3, [r7, #0]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d105      	bne.n	8016c0a <udp_input+0x32>
 8016bfe:	4b78      	ldr	r3, [pc, #480]	; (8016de0 <udp_input+0x208>)
 8016c00:	22d0      	movs	r2, #208	; 0xd0
 8016c02:	497a      	ldr	r1, [pc, #488]	; (8016dec <udp_input+0x214>)
 8016c04:	4878      	ldr	r0, [pc, #480]	; (8016de8 <udp_input+0x210>)
 8016c06:	f005 fc85 	bl	801c514 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	895b      	ldrh	r3, [r3, #10]
 8016c0e:	2b07      	cmp	r3, #7
 8016c10:	d803      	bhi.n	8016c1a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	f7fa f9b2 	bl	8010f7c <pbuf_free>
    goto end;
 8016c18:	e0de      	b.n	8016dd8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	685b      	ldr	r3, [r3, #4]
 8016c1e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016c20:	4b73      	ldr	r3, [pc, #460]	; (8016df0 <udp_input+0x218>)
 8016c22:	695b      	ldr	r3, [r3, #20]
 8016c24:	4a72      	ldr	r2, [pc, #456]	; (8016df0 <udp_input+0x218>)
 8016c26:	6812      	ldr	r2, [r2, #0]
 8016c28:	4611      	mov	r1, r2
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f003 fe06 	bl	801a83c <ip4_addr_isbroadcast_u32>
 8016c30:	4603      	mov	r3, r0
 8016c32:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016c34:	697b      	ldr	r3, [r7, #20]
 8016c36:	881b      	ldrh	r3, [r3, #0]
 8016c38:	b29b      	uxth	r3, r3
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f7f8 fda0 	bl	800f780 <lwip_htons>
 8016c40:	4603      	mov	r3, r0
 8016c42:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016c44:	697b      	ldr	r3, [r7, #20]
 8016c46:	885b      	ldrh	r3, [r3, #2]
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7f8 fd98 	bl	800f780 <lwip_htons>
 8016c50:	4603      	mov	r3, r0
 8016c52:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016c54:	2300      	movs	r3, #0
 8016c56:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c60:	4b64      	ldr	r3, [pc, #400]	; (8016df4 <udp_input+0x21c>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	627b      	str	r3, [r7, #36]	; 0x24
 8016c66:	e054      	b.n	8016d12 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6a:	8a5b      	ldrh	r3, [r3, #18]
 8016c6c:	89fa      	ldrh	r2, [r7, #14]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d14a      	bne.n	8016d08 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016c72:	7cfb      	ldrb	r3, [r7, #19]
 8016c74:	461a      	mov	r2, r3
 8016c76:	6839      	ldr	r1, [r7, #0]
 8016c78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c7a:	f7ff ff49 	bl	8016b10 <udp_input_local_match>
 8016c7e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d041      	beq.n	8016d08 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c86:	7c1b      	ldrb	r3, [r3, #16]
 8016c88:	f003 0304 	and.w	r3, r3, #4
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d11d      	bne.n	8016ccc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016c90:	69fb      	ldr	r3, [r7, #28]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d102      	bne.n	8016c9c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c98:	61fb      	str	r3, [r7, #28]
 8016c9a:	e017      	b.n	8016ccc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016c9c:	7cfb      	ldrb	r3, [r7, #19]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d014      	beq.n	8016ccc <udp_input+0xf4>
 8016ca2:	4b53      	ldr	r3, [pc, #332]	; (8016df0 <udp_input+0x218>)
 8016ca4:	695b      	ldr	r3, [r3, #20]
 8016ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016caa:	d10f      	bne.n	8016ccc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016cac:	69fb      	ldr	r3, [r7, #28]
 8016cae:	681a      	ldr	r2, [r3, #0]
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	3304      	adds	r3, #4
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d008      	beq.n	8016ccc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cbc:	681a      	ldr	r2, [r3, #0]
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	3304      	adds	r3, #4
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d101      	bne.n	8016ccc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cce:	8a9b      	ldrh	r3, [r3, #20]
 8016cd0:	8a3a      	ldrh	r2, [r7, #16]
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d118      	bne.n	8016d08 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d005      	beq.n	8016cea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce0:	685a      	ldr	r2, [r3, #4]
 8016ce2:	4b43      	ldr	r3, [pc, #268]	; (8016df0 <udp_input+0x218>)
 8016ce4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016ce6:	429a      	cmp	r2, r3
 8016ce8:	d10e      	bne.n	8016d08 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016cea:	6a3b      	ldr	r3, [r7, #32]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d014      	beq.n	8016d1a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf2:	68da      	ldr	r2, [r3, #12]
 8016cf4:	6a3b      	ldr	r3, [r7, #32]
 8016cf6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016cf8:	4b3e      	ldr	r3, [pc, #248]	; (8016df4 <udp_input+0x21c>)
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cfe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016d00:	4a3c      	ldr	r2, [pc, #240]	; (8016df4 <udp_input+0x21c>)
 8016d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d04:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016d06:	e008      	b.n	8016d1a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	627b      	str	r3, [r7, #36]	; 0x24
 8016d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d1a7      	bne.n	8016c68 <udp_input+0x90>
 8016d18:	e000      	b.n	8016d1c <udp_input+0x144>
        break;
 8016d1a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d101      	bne.n	8016d26 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016d22:	69fb      	ldr	r3, [r7, #28]
 8016d24:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d002      	beq.n	8016d32 <udp_input+0x15a>
    for_us = 1;
 8016d2c:	2301      	movs	r3, #1
 8016d2e:	76fb      	strb	r3, [r7, #27]
 8016d30:	e00a      	b.n	8016d48 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	3304      	adds	r3, #4
 8016d36:	681a      	ldr	r2, [r3, #0]
 8016d38:	4b2d      	ldr	r3, [pc, #180]	; (8016df0 <udp_input+0x218>)
 8016d3a:	695b      	ldr	r3, [r3, #20]
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	bf0c      	ite	eq
 8016d40:	2301      	moveq	r3, #1
 8016d42:	2300      	movne	r3, #0
 8016d44:	b2db      	uxtb	r3, r3
 8016d46:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016d48:	7efb      	ldrb	r3, [r7, #27]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d041      	beq.n	8016dd2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016d4e:	2108      	movs	r1, #8
 8016d50:	6878      	ldr	r0, [r7, #4]
 8016d52:	f7fa f88d 	bl	8010e70 <pbuf_remove_header>
 8016d56:	4603      	mov	r3, r0
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d00a      	beq.n	8016d72 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016d5c:	4b20      	ldr	r3, [pc, #128]	; (8016de0 <udp_input+0x208>)
 8016d5e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016d62:	4925      	ldr	r1, [pc, #148]	; (8016df8 <udp_input+0x220>)
 8016d64:	4820      	ldr	r0, [pc, #128]	; (8016de8 <udp_input+0x210>)
 8016d66:	f005 fbd5 	bl	801c514 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f7fa f906 	bl	8010f7c <pbuf_free>
      goto end;
 8016d70:	e032      	b.n	8016dd8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d012      	beq.n	8016d9e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7a:	699b      	ldr	r3, [r3, #24]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d00a      	beq.n	8016d96 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d82:	699c      	ldr	r4, [r3, #24]
 8016d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d86:	69d8      	ldr	r0, [r3, #28]
 8016d88:	8a3b      	ldrh	r3, [r7, #16]
 8016d8a:	9300      	str	r3, [sp, #0]
 8016d8c:	4b1b      	ldr	r3, [pc, #108]	; (8016dfc <udp_input+0x224>)
 8016d8e:	687a      	ldr	r2, [r7, #4]
 8016d90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d92:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016d94:	e021      	b.n	8016dda <udp_input+0x202>
        pbuf_free(p);
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f7fa f8f0 	bl	8010f7c <pbuf_free>
        goto end;
 8016d9c:	e01c      	b.n	8016dd8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016d9e:	7cfb      	ldrb	r3, [r7, #19]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d112      	bne.n	8016dca <udp_input+0x1f2>
 8016da4:	4b12      	ldr	r3, [pc, #72]	; (8016df0 <udp_input+0x218>)
 8016da6:	695b      	ldr	r3, [r3, #20]
 8016da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016dac:	2be0      	cmp	r3, #224	; 0xe0
 8016dae:	d00c      	beq.n	8016dca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016db0:	4b0f      	ldr	r3, [pc, #60]	; (8016df0 <udp_input+0x218>)
 8016db2:	899b      	ldrh	r3, [r3, #12]
 8016db4:	3308      	adds	r3, #8
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	b21b      	sxth	r3, r3
 8016dba:	4619      	mov	r1, r3
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f7fa f8ca 	bl	8010f56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016dc2:	2103      	movs	r1, #3
 8016dc4:	6878      	ldr	r0, [r7, #4]
 8016dc6:	f003 f9fb 	bl	801a1c0 <icmp_dest_unreach>
      pbuf_free(p);
 8016dca:	6878      	ldr	r0, [r7, #4]
 8016dcc:	f7fa f8d6 	bl	8010f7c <pbuf_free>
  return;
 8016dd0:	e003      	b.n	8016dda <udp_input+0x202>
    pbuf_free(p);
 8016dd2:	6878      	ldr	r0, [r7, #4]
 8016dd4:	f7fa f8d2 	bl	8010f7c <pbuf_free>
  return;
 8016dd8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016dda:	372c      	adds	r7, #44	; 0x2c
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	bd90      	pop	{r4, r7, pc}
 8016de0:	080207c4 	.word	0x080207c4
 8016de4:	08020868 	.word	0x08020868
 8016de8:	08020818 	.word	0x08020818
 8016dec:	08020880 	.word	0x08020880
 8016df0:	20008e64 	.word	0x20008e64
 8016df4:	2000c634 	.word	0x2000c634
 8016df8:	0802089c 	.word	0x0802089c
 8016dfc:	20008e74 	.word	0x20008e74

08016e00 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b088      	sub	sp, #32
 8016e04:	af02      	add	r7, sp, #8
 8016e06:	60f8      	str	r0, [r7, #12]
 8016e08:	60b9      	str	r1, [r7, #8]
 8016e0a:	607a      	str	r2, [r7, #4]
 8016e0c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d109      	bne.n	8016e28 <udp_sendto_if+0x28>
 8016e14:	4b2e      	ldr	r3, [pc, #184]	; (8016ed0 <udp_sendto_if+0xd0>)
 8016e16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e1a:	492e      	ldr	r1, [pc, #184]	; (8016ed4 <udp_sendto_if+0xd4>)
 8016e1c:	482e      	ldr	r0, [pc, #184]	; (8016ed8 <udp_sendto_if+0xd8>)
 8016e1e:	f005 fb79 	bl	801c514 <iprintf>
 8016e22:	f06f 030f 	mvn.w	r3, #15
 8016e26:	e04f      	b.n	8016ec8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d109      	bne.n	8016e42 <udp_sendto_if+0x42>
 8016e2e:	4b28      	ldr	r3, [pc, #160]	; (8016ed0 <udp_sendto_if+0xd0>)
 8016e30:	f240 2281 	movw	r2, #641	; 0x281
 8016e34:	4929      	ldr	r1, [pc, #164]	; (8016edc <udp_sendto_if+0xdc>)
 8016e36:	4828      	ldr	r0, [pc, #160]	; (8016ed8 <udp_sendto_if+0xd8>)
 8016e38:	f005 fb6c 	bl	801c514 <iprintf>
 8016e3c:	f06f 030f 	mvn.w	r3, #15
 8016e40:	e042      	b.n	8016ec8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d109      	bne.n	8016e5c <udp_sendto_if+0x5c>
 8016e48:	4b21      	ldr	r3, [pc, #132]	; (8016ed0 <udp_sendto_if+0xd0>)
 8016e4a:	f240 2282 	movw	r2, #642	; 0x282
 8016e4e:	4924      	ldr	r1, [pc, #144]	; (8016ee0 <udp_sendto_if+0xe0>)
 8016e50:	4821      	ldr	r0, [pc, #132]	; (8016ed8 <udp_sendto_if+0xd8>)
 8016e52:	f005 fb5f 	bl	801c514 <iprintf>
 8016e56:	f06f 030f 	mvn.w	r3, #15
 8016e5a:	e035      	b.n	8016ec8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016e5c:	6a3b      	ldr	r3, [r7, #32]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d109      	bne.n	8016e76 <udp_sendto_if+0x76>
 8016e62:	4b1b      	ldr	r3, [pc, #108]	; (8016ed0 <udp_sendto_if+0xd0>)
 8016e64:	f240 2283 	movw	r2, #643	; 0x283
 8016e68:	491e      	ldr	r1, [pc, #120]	; (8016ee4 <udp_sendto_if+0xe4>)
 8016e6a:	481b      	ldr	r0, [pc, #108]	; (8016ed8 <udp_sendto_if+0xd8>)
 8016e6c:	f005 fb52 	bl	801c514 <iprintf>
 8016e70:	f06f 030f 	mvn.w	r3, #15
 8016e74:	e028      	b.n	8016ec8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d009      	beq.n	8016e90 <udp_sendto_if+0x90>
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d005      	beq.n	8016e90 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016e8c:	2be0      	cmp	r3, #224	; 0xe0
 8016e8e:	d103      	bne.n	8016e98 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016e90:	6a3b      	ldr	r3, [r7, #32]
 8016e92:	3304      	adds	r3, #4
 8016e94:	617b      	str	r3, [r7, #20]
 8016e96:	e00b      	b.n	8016eb0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	681a      	ldr	r2, [r3, #0]
 8016e9c:	6a3b      	ldr	r3, [r7, #32]
 8016e9e:	3304      	adds	r3, #4
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	d002      	beq.n	8016eac <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016ea6:	f06f 0303 	mvn.w	r3, #3
 8016eaa:	e00d      	b.n	8016ec8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016eb0:	887a      	ldrh	r2, [r7, #2]
 8016eb2:	697b      	ldr	r3, [r7, #20]
 8016eb4:	9301      	str	r3, [sp, #4]
 8016eb6:	6a3b      	ldr	r3, [r7, #32]
 8016eb8:	9300      	str	r3, [sp, #0]
 8016eba:	4613      	mov	r3, r2
 8016ebc:	687a      	ldr	r2, [r7, #4]
 8016ebe:	68b9      	ldr	r1, [r7, #8]
 8016ec0:	68f8      	ldr	r0, [r7, #12]
 8016ec2:	f000 f811 	bl	8016ee8 <udp_sendto_if_src>
 8016ec6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016ec8:	4618      	mov	r0, r3
 8016eca:	3718      	adds	r7, #24
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	080207c4 	.word	0x080207c4
 8016ed4:	08020938 	.word	0x08020938
 8016ed8:	08020818 	.word	0x08020818
 8016edc:	08020954 	.word	0x08020954
 8016ee0:	08020970 	.word	0x08020970
 8016ee4:	08020990 	.word	0x08020990

08016ee8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b08c      	sub	sp, #48	; 0x30
 8016eec:	af04      	add	r7, sp, #16
 8016eee:	60f8      	str	r0, [r7, #12]
 8016ef0:	60b9      	str	r1, [r7, #8]
 8016ef2:	607a      	str	r2, [r7, #4]
 8016ef4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d109      	bne.n	8016f10 <udp_sendto_if_src+0x28>
 8016efc:	4b65      	ldr	r3, [pc, #404]	; (8017094 <udp_sendto_if_src+0x1ac>)
 8016efe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016f02:	4965      	ldr	r1, [pc, #404]	; (8017098 <udp_sendto_if_src+0x1b0>)
 8016f04:	4865      	ldr	r0, [pc, #404]	; (801709c <udp_sendto_if_src+0x1b4>)
 8016f06:	f005 fb05 	bl	801c514 <iprintf>
 8016f0a:	f06f 030f 	mvn.w	r3, #15
 8016f0e:	e0bc      	b.n	801708a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d109      	bne.n	8016f2a <udp_sendto_if_src+0x42>
 8016f16:	4b5f      	ldr	r3, [pc, #380]	; (8017094 <udp_sendto_if_src+0x1ac>)
 8016f18:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016f1c:	4960      	ldr	r1, [pc, #384]	; (80170a0 <udp_sendto_if_src+0x1b8>)
 8016f1e:	485f      	ldr	r0, [pc, #380]	; (801709c <udp_sendto_if_src+0x1b4>)
 8016f20:	f005 faf8 	bl	801c514 <iprintf>
 8016f24:	f06f 030f 	mvn.w	r3, #15
 8016f28:	e0af      	b.n	801708a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d109      	bne.n	8016f44 <udp_sendto_if_src+0x5c>
 8016f30:	4b58      	ldr	r3, [pc, #352]	; (8017094 <udp_sendto_if_src+0x1ac>)
 8016f32:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016f36:	495b      	ldr	r1, [pc, #364]	; (80170a4 <udp_sendto_if_src+0x1bc>)
 8016f38:	4858      	ldr	r0, [pc, #352]	; (801709c <udp_sendto_if_src+0x1b4>)
 8016f3a:	f005 faeb 	bl	801c514 <iprintf>
 8016f3e:	f06f 030f 	mvn.w	r3, #15
 8016f42:	e0a2      	b.n	801708a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d109      	bne.n	8016f5e <udp_sendto_if_src+0x76>
 8016f4a:	4b52      	ldr	r3, [pc, #328]	; (8017094 <udp_sendto_if_src+0x1ac>)
 8016f4c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016f50:	4955      	ldr	r1, [pc, #340]	; (80170a8 <udp_sendto_if_src+0x1c0>)
 8016f52:	4852      	ldr	r0, [pc, #328]	; (801709c <udp_sendto_if_src+0x1b4>)
 8016f54:	f005 fade 	bl	801c514 <iprintf>
 8016f58:	f06f 030f 	mvn.w	r3, #15
 8016f5c:	e095      	b.n	801708a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d109      	bne.n	8016f78 <udp_sendto_if_src+0x90>
 8016f64:	4b4b      	ldr	r3, [pc, #300]	; (8017094 <udp_sendto_if_src+0x1ac>)
 8016f66:	f240 22d5 	movw	r2, #725	; 0x2d5
 8016f6a:	4950      	ldr	r1, [pc, #320]	; (80170ac <udp_sendto_if_src+0x1c4>)
 8016f6c:	484b      	ldr	r0, [pc, #300]	; (801709c <udp_sendto_if_src+0x1b4>)
 8016f6e:	f005 fad1 	bl	801c514 <iprintf>
 8016f72:	f06f 030f 	mvn.w	r3, #15
 8016f76:	e088      	b.n	801708a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	8a5b      	ldrh	r3, [r3, #18]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d10f      	bne.n	8016fa0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016f80:	68f9      	ldr	r1, [r7, #12]
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	8a5b      	ldrh	r3, [r3, #18]
 8016f86:	461a      	mov	r2, r3
 8016f88:	68f8      	ldr	r0, [r7, #12]
 8016f8a:	f000 f893 	bl	80170b4 <udp_bind>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016f92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d002      	beq.n	8016fa0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8016f9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016f9e:	e074      	b.n	801708a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016fa0:	68bb      	ldr	r3, [r7, #8]
 8016fa2:	891b      	ldrh	r3, [r3, #8]
 8016fa4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016fa8:	4293      	cmp	r3, r2
 8016faa:	d902      	bls.n	8016fb2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fb0:	e06b      	b.n	801708a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016fb2:	2108      	movs	r1, #8
 8016fb4:	68b8      	ldr	r0, [r7, #8]
 8016fb6:	f7f9 ff4b 	bl	8010e50 <pbuf_add_header>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d015      	beq.n	8016fec <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016fc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016fc4:	2108      	movs	r1, #8
 8016fc6:	2022      	movs	r0, #34	; 0x22
 8016fc8:	f7f9 fcf4 	bl	80109b4 <pbuf_alloc>
 8016fcc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016fce:	69fb      	ldr	r3, [r7, #28]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d102      	bne.n	8016fda <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fd8:	e057      	b.n	801708a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	891b      	ldrh	r3, [r3, #8]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d006      	beq.n	8016ff0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016fe2:	68b9      	ldr	r1, [r7, #8]
 8016fe4:	69f8      	ldr	r0, [r7, #28]
 8016fe6:	f7fa f8ed 	bl	80111c4 <pbuf_chain>
 8016fea:	e001      	b.n	8016ff0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016ff0:	69fb      	ldr	r3, [r7, #28]
 8016ff2:	895b      	ldrh	r3, [r3, #10]
 8016ff4:	2b07      	cmp	r3, #7
 8016ff6:	d806      	bhi.n	8017006 <udp_sendto_if_src+0x11e>
 8016ff8:	4b26      	ldr	r3, [pc, #152]	; (8017094 <udp_sendto_if_src+0x1ac>)
 8016ffa:	f240 320d 	movw	r2, #781	; 0x30d
 8016ffe:	492c      	ldr	r1, [pc, #176]	; (80170b0 <udp_sendto_if_src+0x1c8>)
 8017000:	4826      	ldr	r0, [pc, #152]	; (801709c <udp_sendto_if_src+0x1b4>)
 8017002:	f005 fa87 	bl	801c514 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017006:	69fb      	ldr	r3, [r7, #28]
 8017008:	685b      	ldr	r3, [r3, #4]
 801700a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	8a5b      	ldrh	r3, [r3, #18]
 8017010:	4618      	mov	r0, r3
 8017012:	f7f8 fbb5 	bl	800f780 <lwip_htons>
 8017016:	4603      	mov	r3, r0
 8017018:	461a      	mov	r2, r3
 801701a:	697b      	ldr	r3, [r7, #20]
 801701c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801701e:	887b      	ldrh	r3, [r7, #2]
 8017020:	4618      	mov	r0, r3
 8017022:	f7f8 fbad 	bl	800f780 <lwip_htons>
 8017026:	4603      	mov	r3, r0
 8017028:	461a      	mov	r2, r3
 801702a:	697b      	ldr	r3, [r7, #20]
 801702c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	2200      	movs	r2, #0
 8017032:	719a      	strb	r2, [r3, #6]
 8017034:	2200      	movs	r2, #0
 8017036:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017038:	69fb      	ldr	r3, [r7, #28]
 801703a:	891b      	ldrh	r3, [r3, #8]
 801703c:	4618      	mov	r0, r3
 801703e:	f7f8 fb9f 	bl	800f780 <lwip_htons>
 8017042:	4603      	mov	r3, r0
 8017044:	461a      	mov	r2, r3
 8017046:	697b      	ldr	r3, [r7, #20]
 8017048:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801704a:	2311      	movs	r3, #17
 801704c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	7adb      	ldrb	r3, [r3, #11]
 8017052:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	7a9b      	ldrb	r3, [r3, #10]
 8017058:	7cb9      	ldrb	r1, [r7, #18]
 801705a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801705c:	9202      	str	r2, [sp, #8]
 801705e:	7cfa      	ldrb	r2, [r7, #19]
 8017060:	9201      	str	r2, [sp, #4]
 8017062:	9300      	str	r3, [sp, #0]
 8017064:	460b      	mov	r3, r1
 8017066:	687a      	ldr	r2, [r7, #4]
 8017068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801706a:	69f8      	ldr	r0, [r7, #28]
 801706c:	f003 fb38 	bl	801a6e0 <ip4_output_if_src>
 8017070:	4603      	mov	r3, r0
 8017072:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8017074:	69fa      	ldr	r2, [r7, #28]
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	429a      	cmp	r2, r3
 801707a:	d004      	beq.n	8017086 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801707c:	69f8      	ldr	r0, [r7, #28]
 801707e:	f7f9 ff7d 	bl	8010f7c <pbuf_free>
    q = NULL;
 8017082:	2300      	movs	r3, #0
 8017084:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8017086:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801708a:	4618      	mov	r0, r3
 801708c:	3720      	adds	r7, #32
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}
 8017092:	bf00      	nop
 8017094:	080207c4 	.word	0x080207c4
 8017098:	080209b0 	.word	0x080209b0
 801709c:	08020818 	.word	0x08020818
 80170a0:	080209d0 	.word	0x080209d0
 80170a4:	080209f0 	.word	0x080209f0
 80170a8:	08020a14 	.word	0x08020a14
 80170ac:	08020a38 	.word	0x08020a38
 80170b0:	08020a5c 	.word	0x08020a5c

080170b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b086      	sub	sp, #24
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	60f8      	str	r0, [r7, #12]
 80170bc:	60b9      	str	r1, [r7, #8]
 80170be:	4613      	mov	r3, r2
 80170c0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80170c2:	68bb      	ldr	r3, [r7, #8]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d101      	bne.n	80170cc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80170c8:	4b39      	ldr	r3, [pc, #228]	; (80171b0 <udp_bind+0xfc>)
 80170ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d109      	bne.n	80170e6 <udp_bind+0x32>
 80170d2:	4b38      	ldr	r3, [pc, #224]	; (80171b4 <udp_bind+0x100>)
 80170d4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80170d8:	4937      	ldr	r1, [pc, #220]	; (80171b8 <udp_bind+0x104>)
 80170da:	4838      	ldr	r0, [pc, #224]	; (80171bc <udp_bind+0x108>)
 80170dc:	f005 fa1a 	bl	801c514 <iprintf>
 80170e0:	f06f 030f 	mvn.w	r3, #15
 80170e4:	e060      	b.n	80171a8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80170e6:	2300      	movs	r3, #0
 80170e8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80170ea:	4b35      	ldr	r3, [pc, #212]	; (80171c0 <udp_bind+0x10c>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	617b      	str	r3, [r7, #20]
 80170f0:	e009      	b.n	8017106 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80170f2:	68fa      	ldr	r2, [r7, #12]
 80170f4:	697b      	ldr	r3, [r7, #20]
 80170f6:	429a      	cmp	r2, r3
 80170f8:	d102      	bne.n	8017100 <udp_bind+0x4c>
      rebind = 1;
 80170fa:	2301      	movs	r3, #1
 80170fc:	74fb      	strb	r3, [r7, #19]
      break;
 80170fe:	e005      	b.n	801710c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	68db      	ldr	r3, [r3, #12]
 8017104:	617b      	str	r3, [r7, #20]
 8017106:	697b      	ldr	r3, [r7, #20]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d1f2      	bne.n	80170f2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801710c:	88fb      	ldrh	r3, [r7, #6]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d109      	bne.n	8017126 <udp_bind+0x72>
    port = udp_new_port();
 8017112:	f7ff fcc5 	bl	8016aa0 <udp_new_port>
 8017116:	4603      	mov	r3, r0
 8017118:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801711a:	88fb      	ldrh	r3, [r7, #6]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d12c      	bne.n	801717a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017120:	f06f 0307 	mvn.w	r3, #7
 8017124:	e040      	b.n	80171a8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017126:	4b26      	ldr	r3, [pc, #152]	; (80171c0 <udp_bind+0x10c>)
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	617b      	str	r3, [r7, #20]
 801712c:	e022      	b.n	8017174 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801712e:	68fa      	ldr	r2, [r7, #12]
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	429a      	cmp	r2, r3
 8017134:	d01b      	beq.n	801716e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017136:	697b      	ldr	r3, [r7, #20]
 8017138:	8a5b      	ldrh	r3, [r3, #18]
 801713a:	88fa      	ldrh	r2, [r7, #6]
 801713c:	429a      	cmp	r2, r3
 801713e:	d116      	bne.n	801716e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017140:	697b      	ldr	r3, [r7, #20]
 8017142:	681a      	ldr	r2, [r3, #0]
 8017144:	68bb      	ldr	r3, [r7, #8]
 8017146:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017148:	429a      	cmp	r2, r3
 801714a:	d00d      	beq.n	8017168 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801714c:	68bb      	ldr	r3, [r7, #8]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d00a      	beq.n	8017168 <udp_bind+0xb4>
 8017152:	68bb      	ldr	r3, [r7, #8]
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d006      	beq.n	8017168 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801715a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801715c:	2b00      	cmp	r3, #0
 801715e:	d003      	beq.n	8017168 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017160:	697b      	ldr	r3, [r7, #20]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d102      	bne.n	801716e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017168:	f06f 0307 	mvn.w	r3, #7
 801716c:	e01c      	b.n	80171a8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	68db      	ldr	r3, [r3, #12]
 8017172:	617b      	str	r3, [r7, #20]
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d1d9      	bne.n	801712e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801717a:	68bb      	ldr	r3, [r7, #8]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d002      	beq.n	8017186 <udp_bind+0xd2>
 8017180:	68bb      	ldr	r3, [r7, #8]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	e000      	b.n	8017188 <udp_bind+0xd4>
 8017186:	2300      	movs	r3, #0
 8017188:	68fa      	ldr	r2, [r7, #12]
 801718a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	88fa      	ldrh	r2, [r7, #6]
 8017190:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017192:	7cfb      	ldrb	r3, [r7, #19]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d106      	bne.n	80171a6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017198:	4b09      	ldr	r3, [pc, #36]	; (80171c0 <udp_bind+0x10c>)
 801719a:	681a      	ldr	r2, [r3, #0]
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80171a0:	4a07      	ldr	r2, [pc, #28]	; (80171c0 <udp_bind+0x10c>)
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80171a6:	2300      	movs	r3, #0
}
 80171a8:	4618      	mov	r0, r3
 80171aa:	3718      	adds	r7, #24
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd80      	pop	{r7, pc}
 80171b0:	0802182c 	.word	0x0802182c
 80171b4:	080207c4 	.word	0x080207c4
 80171b8:	08020a8c 	.word	0x08020a8c
 80171bc:	08020818 	.word	0x08020818
 80171c0:	2000c634 	.word	0x2000c634

080171c4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b086      	sub	sp, #24
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	60f8      	str	r0, [r7, #12]
 80171cc:	60b9      	str	r1, [r7, #8]
 80171ce:	4613      	mov	r3, r2
 80171d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d109      	bne.n	80171ec <udp_connect+0x28>
 80171d8:	4b2c      	ldr	r3, [pc, #176]	; (801728c <udp_connect+0xc8>)
 80171da:	f240 4235 	movw	r2, #1077	; 0x435
 80171de:	492c      	ldr	r1, [pc, #176]	; (8017290 <udp_connect+0xcc>)
 80171e0:	482c      	ldr	r0, [pc, #176]	; (8017294 <udp_connect+0xd0>)
 80171e2:	f005 f997 	bl	801c514 <iprintf>
 80171e6:	f06f 030f 	mvn.w	r3, #15
 80171ea:	e04b      	b.n	8017284 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d109      	bne.n	8017206 <udp_connect+0x42>
 80171f2:	4b26      	ldr	r3, [pc, #152]	; (801728c <udp_connect+0xc8>)
 80171f4:	f240 4236 	movw	r2, #1078	; 0x436
 80171f8:	4927      	ldr	r1, [pc, #156]	; (8017298 <udp_connect+0xd4>)
 80171fa:	4826      	ldr	r0, [pc, #152]	; (8017294 <udp_connect+0xd0>)
 80171fc:	f005 f98a 	bl	801c514 <iprintf>
 8017200:	f06f 030f 	mvn.w	r3, #15
 8017204:	e03e      	b.n	8017284 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	8a5b      	ldrh	r3, [r3, #18]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d10f      	bne.n	801722e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801720e:	68f9      	ldr	r1, [r7, #12]
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	8a5b      	ldrh	r3, [r3, #18]
 8017214:	461a      	mov	r2, r3
 8017216:	68f8      	ldr	r0, [r7, #12]
 8017218:	f7ff ff4c 	bl	80170b4 <udp_bind>
 801721c:	4603      	mov	r3, r0
 801721e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8017220:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d002      	beq.n	801722e <udp_connect+0x6a>
      return err;
 8017228:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801722c:	e02a      	b.n	8017284 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801722e:	68bb      	ldr	r3, [r7, #8]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d002      	beq.n	801723a <udp_connect+0x76>
 8017234:	68bb      	ldr	r3, [r7, #8]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	e000      	b.n	801723c <udp_connect+0x78>
 801723a:	2300      	movs	r3, #0
 801723c:	68fa      	ldr	r2, [r7, #12]
 801723e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	88fa      	ldrh	r2, [r7, #6]
 8017244:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	7c1b      	ldrb	r3, [r3, #16]
 801724a:	f043 0304 	orr.w	r3, r3, #4
 801724e:	b2da      	uxtb	r2, r3
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017254:	4b11      	ldr	r3, [pc, #68]	; (801729c <udp_connect+0xd8>)
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	617b      	str	r3, [r7, #20]
 801725a:	e008      	b.n	801726e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801725c:	68fa      	ldr	r2, [r7, #12]
 801725e:	697b      	ldr	r3, [r7, #20]
 8017260:	429a      	cmp	r2, r3
 8017262:	d101      	bne.n	8017268 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8017264:	2300      	movs	r3, #0
 8017266:	e00d      	b.n	8017284 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	68db      	ldr	r3, [r3, #12]
 801726c:	617b      	str	r3, [r7, #20]
 801726e:	697b      	ldr	r3, [r7, #20]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d1f3      	bne.n	801725c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8017274:	4b09      	ldr	r3, [pc, #36]	; (801729c <udp_connect+0xd8>)
 8017276:	681a      	ldr	r2, [r3, #0]
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801727c:	4a07      	ldr	r2, [pc, #28]	; (801729c <udp_connect+0xd8>)
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8017282:	2300      	movs	r3, #0
}
 8017284:	4618      	mov	r0, r3
 8017286:	3718      	adds	r7, #24
 8017288:	46bd      	mov	sp, r7
 801728a:	bd80      	pop	{r7, pc}
 801728c:	080207c4 	.word	0x080207c4
 8017290:	08020aa4 	.word	0x08020aa4
 8017294:	08020818 	.word	0x08020818
 8017298:	08020ac0 	.word	0x08020ac0
 801729c:	2000c634 	.word	0x2000c634

080172a0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b084      	sub	sp, #16
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	60f8      	str	r0, [r7, #12]
 80172a8:	60b9      	str	r1, [r7, #8]
 80172aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d107      	bne.n	80172c2 <udp_recv+0x22>
 80172b2:	4b08      	ldr	r3, [pc, #32]	; (80172d4 <udp_recv+0x34>)
 80172b4:	f240 428a 	movw	r2, #1162	; 0x48a
 80172b8:	4907      	ldr	r1, [pc, #28]	; (80172d8 <udp_recv+0x38>)
 80172ba:	4808      	ldr	r0, [pc, #32]	; (80172dc <udp_recv+0x3c>)
 80172bc:	f005 f92a 	bl	801c514 <iprintf>
 80172c0:	e005      	b.n	80172ce <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	68ba      	ldr	r2, [r7, #8]
 80172c6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	687a      	ldr	r2, [r7, #4]
 80172cc:	61da      	str	r2, [r3, #28]
}
 80172ce:	3710      	adds	r7, #16
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}
 80172d4:	080207c4 	.word	0x080207c4
 80172d8:	08020af8 	.word	0x08020af8
 80172dc:	08020818 	.word	0x08020818

080172e0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b084      	sub	sp, #16
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d107      	bne.n	80172fe <udp_remove+0x1e>
 80172ee:	4b19      	ldr	r3, [pc, #100]	; (8017354 <udp_remove+0x74>)
 80172f0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80172f4:	4918      	ldr	r1, [pc, #96]	; (8017358 <udp_remove+0x78>)
 80172f6:	4819      	ldr	r0, [pc, #100]	; (801735c <udp_remove+0x7c>)
 80172f8:	f005 f90c 	bl	801c514 <iprintf>
 80172fc:	e026      	b.n	801734c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80172fe:	4b18      	ldr	r3, [pc, #96]	; (8017360 <udp_remove+0x80>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	687a      	ldr	r2, [r7, #4]
 8017304:	429a      	cmp	r2, r3
 8017306:	d105      	bne.n	8017314 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017308:	4b15      	ldr	r3, [pc, #84]	; (8017360 <udp_remove+0x80>)
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	68db      	ldr	r3, [r3, #12]
 801730e:	4a14      	ldr	r2, [pc, #80]	; (8017360 <udp_remove+0x80>)
 8017310:	6013      	str	r3, [r2, #0]
 8017312:	e017      	b.n	8017344 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017314:	4b12      	ldr	r3, [pc, #72]	; (8017360 <udp_remove+0x80>)
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	60fb      	str	r3, [r7, #12]
 801731a:	e010      	b.n	801733e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	68db      	ldr	r3, [r3, #12]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d009      	beq.n	8017338 <udp_remove+0x58>
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	68db      	ldr	r3, [r3, #12]
 8017328:	687a      	ldr	r2, [r7, #4]
 801732a:	429a      	cmp	r2, r3
 801732c:	d104      	bne.n	8017338 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	68da      	ldr	r2, [r3, #12]
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	60da      	str	r2, [r3, #12]
        break;
 8017336:	e005      	b.n	8017344 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	68db      	ldr	r3, [r3, #12]
 801733c:	60fb      	str	r3, [r7, #12]
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d1eb      	bne.n	801731c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017344:	6879      	ldr	r1, [r7, #4]
 8017346:	2000      	movs	r0, #0
 8017348:	f7f8 ff68 	bl	801021c <memp_free>
}
 801734c:	3710      	adds	r7, #16
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	080207c4 	.word	0x080207c4
 8017358:	08020b10 	.word	0x08020b10
 801735c:	08020818 	.word	0x08020818
 8017360:	2000c634 	.word	0x2000c634

08017364 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801736a:	2000      	movs	r0, #0
 801736c:	f7f8 fee0 	bl	8010130 <memp_malloc>
 8017370:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d007      	beq.n	8017388 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017378:	2220      	movs	r2, #32
 801737a:	2100      	movs	r1, #0
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f005 fa59 	bl	801c834 <memset>
    pcb->ttl = UDP_TTL;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	22ff      	movs	r2, #255	; 0xff
 8017386:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017388:	687b      	ldr	r3, [r7, #4]
}
 801738a:	4618      	mov	r0, r3
 801738c:	3708      	adds	r7, #8
 801738e:	46bd      	mov	sp, r7
 8017390:	bd80      	pop	{r7, pc}
	...

08017394 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017394:	b480      	push	{r7}
 8017396:	b085      	sub	sp, #20
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
 801739c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d01e      	beq.n	80173e2 <udp_netif_ip_addr_changed+0x4e>
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d01a      	beq.n	80173e2 <udp_netif_ip_addr_changed+0x4e>
 80173ac:	683b      	ldr	r3, [r7, #0]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d017      	beq.n	80173e2 <udp_netif_ip_addr_changed+0x4e>
 80173b2:	683b      	ldr	r3, [r7, #0]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d013      	beq.n	80173e2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80173ba:	4b0d      	ldr	r3, [pc, #52]	; (80173f0 <udp_netif_ip_addr_changed+0x5c>)
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	60fb      	str	r3, [r7, #12]
 80173c0:	e00c      	b.n	80173dc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	681a      	ldr	r2, [r3, #0]
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	429a      	cmp	r2, r3
 80173cc:	d103      	bne.n	80173d6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80173ce:	683b      	ldr	r3, [r7, #0]
 80173d0:	681a      	ldr	r2, [r3, #0]
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	68db      	ldr	r3, [r3, #12]
 80173da:	60fb      	str	r3, [r7, #12]
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d1ef      	bne.n	80173c2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80173e2:	bf00      	nop
 80173e4:	3714      	adds	r7, #20
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop
 80173f0:	2000c634 	.word	0x2000c634

080173f4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80173f8:	4b20      	ldr	r3, [pc, #128]	; (801747c <dhcp_inc_pcb_refcount+0x88>)
 80173fa:	781b      	ldrb	r3, [r3, #0]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d133      	bne.n	8017468 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8017400:	4b1f      	ldr	r3, [pc, #124]	; (8017480 <dhcp_inc_pcb_refcount+0x8c>)
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d005      	beq.n	8017414 <dhcp_inc_pcb_refcount+0x20>
 8017408:	4b1e      	ldr	r3, [pc, #120]	; (8017484 <dhcp_inc_pcb_refcount+0x90>)
 801740a:	22e5      	movs	r2, #229	; 0xe5
 801740c:	491e      	ldr	r1, [pc, #120]	; (8017488 <dhcp_inc_pcb_refcount+0x94>)
 801740e:	481f      	ldr	r0, [pc, #124]	; (801748c <dhcp_inc_pcb_refcount+0x98>)
 8017410:	f005 f880 	bl	801c514 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8017414:	f7ff ffa6 	bl	8017364 <udp_new>
 8017418:	4603      	mov	r3, r0
 801741a:	4a19      	ldr	r2, [pc, #100]	; (8017480 <dhcp_inc_pcb_refcount+0x8c>)
 801741c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801741e:	4b18      	ldr	r3, [pc, #96]	; (8017480 <dhcp_inc_pcb_refcount+0x8c>)
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d102      	bne.n	801742c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8017426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801742a:	e024      	b.n	8017476 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801742c:	4b14      	ldr	r3, [pc, #80]	; (8017480 <dhcp_inc_pcb_refcount+0x8c>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	7a5a      	ldrb	r2, [r3, #9]
 8017432:	4b13      	ldr	r3, [pc, #76]	; (8017480 <dhcp_inc_pcb_refcount+0x8c>)
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	f042 0220 	orr.w	r2, r2, #32
 801743a:	b2d2      	uxtb	r2, r2
 801743c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801743e:	4b10      	ldr	r3, [pc, #64]	; (8017480 <dhcp_inc_pcb_refcount+0x8c>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	2244      	movs	r2, #68	; 0x44
 8017444:	4912      	ldr	r1, [pc, #72]	; (8017490 <dhcp_inc_pcb_refcount+0x9c>)
 8017446:	4618      	mov	r0, r3
 8017448:	f7ff fe34 	bl	80170b4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801744c:	4b0c      	ldr	r3, [pc, #48]	; (8017480 <dhcp_inc_pcb_refcount+0x8c>)
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	2243      	movs	r2, #67	; 0x43
 8017452:	490f      	ldr	r1, [pc, #60]	; (8017490 <dhcp_inc_pcb_refcount+0x9c>)
 8017454:	4618      	mov	r0, r3
 8017456:	f7ff feb5 	bl	80171c4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801745a:	4b09      	ldr	r3, [pc, #36]	; (8017480 <dhcp_inc_pcb_refcount+0x8c>)
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	2200      	movs	r2, #0
 8017460:	490c      	ldr	r1, [pc, #48]	; (8017494 <dhcp_inc_pcb_refcount+0xa0>)
 8017462:	4618      	mov	r0, r3
 8017464:	f7ff ff1c 	bl	80172a0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8017468:	4b04      	ldr	r3, [pc, #16]	; (801747c <dhcp_inc_pcb_refcount+0x88>)
 801746a:	781b      	ldrb	r3, [r3, #0]
 801746c:	3301      	adds	r3, #1
 801746e:	b2da      	uxtb	r2, r3
 8017470:	4b02      	ldr	r3, [pc, #8]	; (801747c <dhcp_inc_pcb_refcount+0x88>)
 8017472:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8017474:	2300      	movs	r3, #0
}
 8017476:	4618      	mov	r0, r3
 8017478:	bd80      	pop	{r7, pc}
 801747a:	bf00      	nop
 801747c:	2000c664 	.word	0x2000c664
 8017480:	2000c660 	.word	0x2000c660
 8017484:	08020b28 	.word	0x08020b28
 8017488:	08020b60 	.word	0x08020b60
 801748c:	08020b88 	.word	0x08020b88
 8017490:	0802182c 	.word	0x0802182c
 8017494:	08018d29 	.word	0x08018d29

08017498 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801749c:	4b0e      	ldr	r3, [pc, #56]	; (80174d8 <dhcp_dec_pcb_refcount+0x40>)
 801749e:	781b      	ldrb	r3, [r3, #0]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d105      	bne.n	80174b0 <dhcp_dec_pcb_refcount+0x18>
 80174a4:	4b0d      	ldr	r3, [pc, #52]	; (80174dc <dhcp_dec_pcb_refcount+0x44>)
 80174a6:	22ff      	movs	r2, #255	; 0xff
 80174a8:	490d      	ldr	r1, [pc, #52]	; (80174e0 <dhcp_dec_pcb_refcount+0x48>)
 80174aa:	480e      	ldr	r0, [pc, #56]	; (80174e4 <dhcp_dec_pcb_refcount+0x4c>)
 80174ac:	f005 f832 	bl	801c514 <iprintf>
  dhcp_pcb_refcount--;
 80174b0:	4b09      	ldr	r3, [pc, #36]	; (80174d8 <dhcp_dec_pcb_refcount+0x40>)
 80174b2:	781b      	ldrb	r3, [r3, #0]
 80174b4:	3b01      	subs	r3, #1
 80174b6:	b2da      	uxtb	r2, r3
 80174b8:	4b07      	ldr	r3, [pc, #28]	; (80174d8 <dhcp_dec_pcb_refcount+0x40>)
 80174ba:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80174bc:	4b06      	ldr	r3, [pc, #24]	; (80174d8 <dhcp_dec_pcb_refcount+0x40>)
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d107      	bne.n	80174d4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80174c4:	4b08      	ldr	r3, [pc, #32]	; (80174e8 <dhcp_dec_pcb_refcount+0x50>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	4618      	mov	r0, r3
 80174ca:	f7ff ff09 	bl	80172e0 <udp_remove>
    dhcp_pcb = NULL;
 80174ce:	4b06      	ldr	r3, [pc, #24]	; (80174e8 <dhcp_dec_pcb_refcount+0x50>)
 80174d0:	2200      	movs	r2, #0
 80174d2:	601a      	str	r2, [r3, #0]
  }
}
 80174d4:	bf00      	nop
 80174d6:	bd80      	pop	{r7, pc}
 80174d8:	2000c664 	.word	0x2000c664
 80174dc:	08020b28 	.word	0x08020b28
 80174e0:	08020bb0 	.word	0x08020bb0
 80174e4:	08020b88 	.word	0x08020b88
 80174e8:	2000c660 	.word	0x2000c660

080174ec <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b084      	sub	sp, #16
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174f8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80174fa:	210c      	movs	r1, #12
 80174fc:	68f8      	ldr	r0, [r7, #12]
 80174fe:	f001 f855 	bl	80185ac <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017502:	4b06      	ldr	r3, [pc, #24]	; (801751c <dhcp_handle_nak+0x30>)
 8017504:	4a05      	ldr	r2, [pc, #20]	; (801751c <dhcp_handle_nak+0x30>)
 8017506:	4905      	ldr	r1, [pc, #20]	; (801751c <dhcp_handle_nak+0x30>)
 8017508:	6878      	ldr	r0, [r7, #4]
 801750a:	f7f9 f829 	bl	8010560 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801750e:	6878      	ldr	r0, [r7, #4]
 8017510:	f000 fc48 	bl	8017da4 <dhcp_discover>
}
 8017514:	bf00      	nop
 8017516:	3710      	adds	r7, #16
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}
 801751c:	0802182c 	.word	0x0802182c

08017520 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801752c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801752e:	2108      	movs	r1, #8
 8017530:	68f8      	ldr	r0, [r7, #12]
 8017532:	f001 f83b 	bl	80185ac <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	331c      	adds	r3, #28
 801753a:	2200      	movs	r2, #0
 801753c:	4619      	mov	r1, r3
 801753e:	6878      	ldr	r0, [r7, #4]
 8017540:	f002 fb3c 	bl	8019bbc <etharp_query>
 8017544:	4603      	mov	r3, r0
 8017546:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	799b      	ldrb	r3, [r3, #6]
 801754c:	2bff      	cmp	r3, #255	; 0xff
 801754e:	d005      	beq.n	801755c <dhcp_check+0x3c>
    dhcp->tries++;
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	799b      	ldrb	r3, [r3, #6]
 8017554:	3301      	adds	r3, #1
 8017556:	b2da      	uxtb	r2, r3
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801755c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8017560:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017562:	893b      	ldrh	r3, [r7, #8]
 8017564:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017568:	4a06      	ldr	r2, [pc, #24]	; (8017584 <dhcp_check+0x64>)
 801756a:	fb82 1203 	smull	r1, r2, r2, r3
 801756e:	1152      	asrs	r2, r2, #5
 8017570:	17db      	asrs	r3, r3, #31
 8017572:	1ad3      	subs	r3, r2, r3
 8017574:	b29a      	uxth	r2, r3
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801757a:	bf00      	nop
 801757c:	3710      	adds	r7, #16
 801757e:	46bd      	mov	sp, r7
 8017580:	bd80      	pop	{r7, pc}
 8017582:	bf00      	nop
 8017584:	10624dd3 	.word	0x10624dd3

08017588 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b084      	sub	sp, #16
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
 8017590:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017596:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8017598:	4b0c      	ldr	r3, [pc, #48]	; (80175cc <dhcp_handle_offer+0x44>)
 801759a:	789b      	ldrb	r3, [r3, #2]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d011      	beq.n	80175c4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	2200      	movs	r2, #0
 80175a4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80175a6:	4b0a      	ldr	r3, [pc, #40]	; (80175d0 <dhcp_handle_offer+0x48>)
 80175a8:	689b      	ldr	r3, [r3, #8]
 80175aa:	4618      	mov	r0, r3
 80175ac:	f7f8 f8fd 	bl	800f7aa <lwip_htonl>
 80175b0:	4602      	mov	r2, r0
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	691a      	ldr	r2, [r3, #16]
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	f000 f808 	bl	80175d4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80175c4:	bf00      	nop
 80175c6:	3710      	adds	r7, #16
 80175c8:	46bd      	mov	sp, r7
 80175ca:	bd80      	pop	{r7, pc}
 80175cc:	2000c658 	.word	0x2000c658
 80175d0:	2000c638 	.word	0x2000c638

080175d4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80175d4:	b5b0      	push	{r4, r5, r7, lr}
 80175d6:	b08a      	sub	sp, #40	; 0x28
 80175d8:	af02      	add	r7, sp, #8
 80175da:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d109      	bne.n	80175f6 <dhcp_select+0x22>
 80175e2:	4b71      	ldr	r3, [pc, #452]	; (80177a8 <dhcp_select+0x1d4>)
 80175e4:	f240 1277 	movw	r2, #375	; 0x177
 80175e8:	4970      	ldr	r1, [pc, #448]	; (80177ac <dhcp_select+0x1d8>)
 80175ea:	4871      	ldr	r0, [pc, #452]	; (80177b0 <dhcp_select+0x1dc>)
 80175ec:	f004 ff92 	bl	801c514 <iprintf>
 80175f0:	f06f 030f 	mvn.w	r3, #15
 80175f4:	e0d3      	b.n	801779e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175fa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80175fc:	69bb      	ldr	r3, [r7, #24]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d109      	bne.n	8017616 <dhcp_select+0x42>
 8017602:	4b69      	ldr	r3, [pc, #420]	; (80177a8 <dhcp_select+0x1d4>)
 8017604:	f240 1279 	movw	r2, #377	; 0x179
 8017608:	496a      	ldr	r1, [pc, #424]	; (80177b4 <dhcp_select+0x1e0>)
 801760a:	4869      	ldr	r0, [pc, #420]	; (80177b0 <dhcp_select+0x1dc>)
 801760c:	f004 ff82 	bl	801c514 <iprintf>
 8017610:	f06f 0305 	mvn.w	r3, #5
 8017614:	e0c3      	b.n	801779e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8017616:	2101      	movs	r1, #1
 8017618:	69b8      	ldr	r0, [r7, #24]
 801761a:	f000 ffc7 	bl	80185ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801761e:	f107 030c 	add.w	r3, r7, #12
 8017622:	2203      	movs	r2, #3
 8017624:	69b9      	ldr	r1, [r7, #24]
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f001 fc4c 	bl	8018ec4 <dhcp_create_msg>
 801762c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	2b00      	cmp	r3, #0
 8017632:	f000 8085 	beq.w	8017740 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017636:	697b      	ldr	r3, [r7, #20]
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801763c:	89b8      	ldrh	r0, [r7, #12]
 801763e:	693b      	ldr	r3, [r7, #16]
 8017640:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017644:	2302      	movs	r3, #2
 8017646:	2239      	movs	r2, #57	; 0x39
 8017648:	f000 ffca 	bl	80185e0 <dhcp_option>
 801764c:	4603      	mov	r3, r0
 801764e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017650:	89b8      	ldrh	r0, [r7, #12]
 8017652:	693b      	ldr	r3, [r7, #16]
 8017654:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801765c:	461a      	mov	r2, r3
 801765e:	f001 f819 	bl	8018694 <dhcp_option_short>
 8017662:	4603      	mov	r3, r0
 8017664:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017666:	89b8      	ldrh	r0, [r7, #12]
 8017668:	693b      	ldr	r3, [r7, #16]
 801766a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801766e:	2304      	movs	r3, #4
 8017670:	2232      	movs	r2, #50	; 0x32
 8017672:	f000 ffb5 	bl	80185e0 <dhcp_option>
 8017676:	4603      	mov	r3, r0
 8017678:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801767a:	89bc      	ldrh	r4, [r7, #12]
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017682:	69bb      	ldr	r3, [r7, #24]
 8017684:	69db      	ldr	r3, [r3, #28]
 8017686:	4618      	mov	r0, r3
 8017688:	f7f8 f88f 	bl	800f7aa <lwip_htonl>
 801768c:	4603      	mov	r3, r0
 801768e:	461a      	mov	r2, r3
 8017690:	4629      	mov	r1, r5
 8017692:	4620      	mov	r0, r4
 8017694:	f001 f830 	bl	80186f8 <dhcp_option_long>
 8017698:	4603      	mov	r3, r0
 801769a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801769c:	89b8      	ldrh	r0, [r7, #12]
 801769e:	693b      	ldr	r3, [r7, #16]
 80176a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80176a4:	2304      	movs	r3, #4
 80176a6:	2236      	movs	r2, #54	; 0x36
 80176a8:	f000 ff9a 	bl	80185e0 <dhcp_option>
 80176ac:	4603      	mov	r3, r0
 80176ae:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80176b0:	89bc      	ldrh	r4, [r7, #12]
 80176b2:	693b      	ldr	r3, [r7, #16]
 80176b4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80176b8:	69bb      	ldr	r3, [r7, #24]
 80176ba:	699b      	ldr	r3, [r3, #24]
 80176bc:	4618      	mov	r0, r3
 80176be:	f7f8 f874 	bl	800f7aa <lwip_htonl>
 80176c2:	4603      	mov	r3, r0
 80176c4:	461a      	mov	r2, r3
 80176c6:	4629      	mov	r1, r5
 80176c8:	4620      	mov	r0, r4
 80176ca:	f001 f815 	bl	80186f8 <dhcp_option_long>
 80176ce:	4603      	mov	r3, r0
 80176d0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80176d2:	89b8      	ldrh	r0, [r7, #12]
 80176d4:	693b      	ldr	r3, [r7, #16]
 80176d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80176da:	2303      	movs	r3, #3
 80176dc:	2237      	movs	r2, #55	; 0x37
 80176de:	f000 ff7f 	bl	80185e0 <dhcp_option>
 80176e2:	4603      	mov	r3, r0
 80176e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80176e6:	2300      	movs	r3, #0
 80176e8:	77bb      	strb	r3, [r7, #30]
 80176ea:	e00e      	b.n	801770a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80176ec:	89b8      	ldrh	r0, [r7, #12]
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80176f4:	7fbb      	ldrb	r3, [r7, #30]
 80176f6:	4a30      	ldr	r2, [pc, #192]	; (80177b8 <dhcp_select+0x1e4>)
 80176f8:	5cd3      	ldrb	r3, [r2, r3]
 80176fa:	461a      	mov	r2, r3
 80176fc:	f000 ffa4 	bl	8018648 <dhcp_option_byte>
 8017700:	4603      	mov	r3, r0
 8017702:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017704:	7fbb      	ldrb	r3, [r7, #30]
 8017706:	3301      	adds	r3, #1
 8017708:	77bb      	strb	r3, [r7, #30]
 801770a:	7fbb      	ldrb	r3, [r7, #30]
 801770c:	2b02      	cmp	r3, #2
 801770e:	d9ed      	bls.n	80176ec <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017710:	89b8      	ldrh	r0, [r7, #12]
 8017712:	693b      	ldr	r3, [r7, #16]
 8017714:	33f0      	adds	r3, #240	; 0xf0
 8017716:	697a      	ldr	r2, [r7, #20]
 8017718:	4619      	mov	r1, r3
 801771a:	f001 fca9 	bl	8019070 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801771e:	4b27      	ldr	r3, [pc, #156]	; (80177bc <dhcp_select+0x1e8>)
 8017720:	6818      	ldr	r0, [r3, #0]
 8017722:	4b27      	ldr	r3, [pc, #156]	; (80177c0 <dhcp_select+0x1ec>)
 8017724:	9301      	str	r3, [sp, #4]
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	9300      	str	r3, [sp, #0]
 801772a:	2343      	movs	r3, #67	; 0x43
 801772c:	4a25      	ldr	r2, [pc, #148]	; (80177c4 <dhcp_select+0x1f0>)
 801772e:	6979      	ldr	r1, [r7, #20]
 8017730:	f7ff fbda 	bl	8016ee8 <udp_sendto_if_src>
 8017734:	4603      	mov	r3, r0
 8017736:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017738:	6978      	ldr	r0, [r7, #20]
 801773a:	f7f9 fc1f 	bl	8010f7c <pbuf_free>
 801773e:	e001      	b.n	8017744 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017740:	23ff      	movs	r3, #255	; 0xff
 8017742:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017744:	69bb      	ldr	r3, [r7, #24]
 8017746:	799b      	ldrb	r3, [r3, #6]
 8017748:	2bff      	cmp	r3, #255	; 0xff
 801774a:	d005      	beq.n	8017758 <dhcp_select+0x184>
    dhcp->tries++;
 801774c:	69bb      	ldr	r3, [r7, #24]
 801774e:	799b      	ldrb	r3, [r3, #6]
 8017750:	3301      	adds	r3, #1
 8017752:	b2da      	uxtb	r2, r3
 8017754:	69bb      	ldr	r3, [r7, #24]
 8017756:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017758:	69bb      	ldr	r3, [r7, #24]
 801775a:	799b      	ldrb	r3, [r3, #6]
 801775c:	2b05      	cmp	r3, #5
 801775e:	d80d      	bhi.n	801777c <dhcp_select+0x1a8>
 8017760:	69bb      	ldr	r3, [r7, #24]
 8017762:	799b      	ldrb	r3, [r3, #6]
 8017764:	461a      	mov	r2, r3
 8017766:	2301      	movs	r3, #1
 8017768:	4093      	lsls	r3, r2
 801776a:	b29b      	uxth	r3, r3
 801776c:	461a      	mov	r2, r3
 801776e:	0152      	lsls	r2, r2, #5
 8017770:	1ad2      	subs	r2, r2, r3
 8017772:	0092      	lsls	r2, r2, #2
 8017774:	4413      	add	r3, r2
 8017776:	00db      	lsls	r3, r3, #3
 8017778:	b29b      	uxth	r3, r3
 801777a:	e001      	b.n	8017780 <dhcp_select+0x1ac>
 801777c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017780:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017782:	89fb      	ldrh	r3, [r7, #14]
 8017784:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017788:	4a0f      	ldr	r2, [pc, #60]	; (80177c8 <dhcp_select+0x1f4>)
 801778a:	fb82 1203 	smull	r1, r2, r2, r3
 801778e:	1152      	asrs	r2, r2, #5
 8017790:	17db      	asrs	r3, r3, #31
 8017792:	1ad3      	subs	r3, r2, r3
 8017794:	b29a      	uxth	r2, r3
 8017796:	69bb      	ldr	r3, [r7, #24]
 8017798:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801779a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801779e:	4618      	mov	r0, r3
 80177a0:	3720      	adds	r7, #32
 80177a2:	46bd      	mov	sp, r7
 80177a4:	bdb0      	pop	{r4, r5, r7, pc}
 80177a6:	bf00      	nop
 80177a8:	08020b28 	.word	0x08020b28
 80177ac:	08020bd4 	.word	0x08020bd4
 80177b0:	08020b88 	.word	0x08020b88
 80177b4:	08020bf0 	.word	0x08020bf0
 80177b8:	20000034 	.word	0x20000034
 80177bc:	2000c660 	.word	0x2000c660
 80177c0:	0802182c 	.word	0x0802182c
 80177c4:	08021830 	.word	0x08021830
 80177c8:	10624dd3 	.word	0x10624dd3

080177cc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b082      	sub	sp, #8
 80177d0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80177d2:	4b27      	ldr	r3, [pc, #156]	; (8017870 <dhcp_coarse_tmr+0xa4>)
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	607b      	str	r3, [r7, #4]
 80177d8:	e042      	b.n	8017860 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177de:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80177e0:	683b      	ldr	r3, [r7, #0]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d039      	beq.n	801785a <dhcp_coarse_tmr+0x8e>
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	795b      	ldrb	r3, [r3, #5]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d035      	beq.n	801785a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	8a9b      	ldrh	r3, [r3, #20]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d012      	beq.n	801781c <dhcp_coarse_tmr+0x50>
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	8a5b      	ldrh	r3, [r3, #18]
 80177fa:	3301      	adds	r3, #1
 80177fc:	b29a      	uxth	r2, r3
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	825a      	strh	r2, [r3, #18]
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	8a5a      	ldrh	r2, [r3, #18]
 8017806:	683b      	ldr	r3, [r7, #0]
 8017808:	8a9b      	ldrh	r3, [r3, #20]
 801780a:	429a      	cmp	r2, r3
 801780c:	d106      	bne.n	801781c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	f000 fe32 	bl	8018478 <dhcp_release_and_stop>
        dhcp_start(netif);
 8017814:	6878      	ldr	r0, [r7, #4]
 8017816:	f000 f969 	bl	8017aec <dhcp_start>
 801781a:	e01e      	b.n	801785a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	8a1b      	ldrh	r3, [r3, #16]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d00b      	beq.n	801783c <dhcp_coarse_tmr+0x70>
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	8a1b      	ldrh	r3, [r3, #16]
 8017828:	1e5a      	subs	r2, r3, #1
 801782a:	b291      	uxth	r1, r2
 801782c:	683a      	ldr	r2, [r7, #0]
 801782e:	8211      	strh	r1, [r2, #16]
 8017830:	2b01      	cmp	r3, #1
 8017832:	d103      	bne.n	801783c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8017834:	6878      	ldr	r0, [r7, #4]
 8017836:	f000 f8c6 	bl	80179c6 <dhcp_t2_timeout>
 801783a:	e00e      	b.n	801785a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	89db      	ldrh	r3, [r3, #14]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d00a      	beq.n	801785a <dhcp_coarse_tmr+0x8e>
 8017844:	683b      	ldr	r3, [r7, #0]
 8017846:	89db      	ldrh	r3, [r3, #14]
 8017848:	1e5a      	subs	r2, r3, #1
 801784a:	b291      	uxth	r1, r2
 801784c:	683a      	ldr	r2, [r7, #0]
 801784e:	81d1      	strh	r1, [r2, #14]
 8017850:	2b01      	cmp	r3, #1
 8017852:	d102      	bne.n	801785a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f000 f888 	bl	801796a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	607b      	str	r3, [r7, #4]
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d1b9      	bne.n	80177da <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8017866:	bf00      	nop
 8017868:	bf00      	nop
 801786a:	3708      	adds	r7, #8
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}
 8017870:	2000c5cc 	.word	0x2000c5cc

08017874 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801787a:	4b16      	ldr	r3, [pc, #88]	; (80178d4 <dhcp_fine_tmr+0x60>)
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	607b      	str	r3, [r7, #4]
 8017880:	e020      	b.n	80178c4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017886:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8017888:	683b      	ldr	r3, [r7, #0]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d017      	beq.n	80178be <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	891b      	ldrh	r3, [r3, #8]
 8017892:	2b01      	cmp	r3, #1
 8017894:	d906      	bls.n	80178a4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	891b      	ldrh	r3, [r3, #8]
 801789a:	3b01      	subs	r3, #1
 801789c:	b29a      	uxth	r2, r3
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	811a      	strh	r2, [r3, #8]
 80178a2:	e00c      	b.n	80178be <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80178a4:	683b      	ldr	r3, [r7, #0]
 80178a6:	891b      	ldrh	r3, [r3, #8]
 80178a8:	2b01      	cmp	r3, #1
 80178aa:	d108      	bne.n	80178be <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80178ac:	683b      	ldr	r3, [r7, #0]
 80178ae:	891b      	ldrh	r3, [r3, #8]
 80178b0:	3b01      	subs	r3, #1
 80178b2:	b29a      	uxth	r2, r3
 80178b4:	683b      	ldr	r3, [r7, #0]
 80178b6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80178b8:	6878      	ldr	r0, [r7, #4]
 80178ba:	f000 f80d 	bl	80178d8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	607b      	str	r3, [r7, #4]
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d1db      	bne.n	8017882 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80178ca:	bf00      	nop
 80178cc:	bf00      	nop
 80178ce:	3708      	adds	r7, #8
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}
 80178d4:	2000c5cc 	.word	0x2000c5cc

080178d8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b084      	sub	sp, #16
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178e4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	795b      	ldrb	r3, [r3, #5]
 80178ea:	2b0c      	cmp	r3, #12
 80178ec:	d003      	beq.n	80178f6 <dhcp_timeout+0x1e>
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	795b      	ldrb	r3, [r3, #5]
 80178f2:	2b06      	cmp	r3, #6
 80178f4:	d103      	bne.n	80178fe <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80178f6:	6878      	ldr	r0, [r7, #4]
 80178f8:	f000 fa54 	bl	8017da4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80178fc:	e031      	b.n	8017962 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	795b      	ldrb	r3, [r3, #5]
 8017902:	2b01      	cmp	r3, #1
 8017904:	d10e      	bne.n	8017924 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	799b      	ldrb	r3, [r3, #6]
 801790a:	2b05      	cmp	r3, #5
 801790c:	d803      	bhi.n	8017916 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801790e:	6878      	ldr	r0, [r7, #4]
 8017910:	f7ff fe60 	bl	80175d4 <dhcp_select>
}
 8017914:	e025      	b.n	8017962 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8017916:	6878      	ldr	r0, [r7, #4]
 8017918:	f000 fdae 	bl	8018478 <dhcp_release_and_stop>
      dhcp_start(netif);
 801791c:	6878      	ldr	r0, [r7, #4]
 801791e:	f000 f8e5 	bl	8017aec <dhcp_start>
}
 8017922:	e01e      	b.n	8017962 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	795b      	ldrb	r3, [r3, #5]
 8017928:	2b08      	cmp	r3, #8
 801792a:	d10b      	bne.n	8017944 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	799b      	ldrb	r3, [r3, #6]
 8017930:	2b01      	cmp	r3, #1
 8017932:	d803      	bhi.n	801793c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8017934:	6878      	ldr	r0, [r7, #4]
 8017936:	f7ff fdf3 	bl	8017520 <dhcp_check>
}
 801793a:	e012      	b.n	8017962 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801793c:	6878      	ldr	r0, [r7, #4]
 801793e:	f000 fad3 	bl	8017ee8 <dhcp_bind>
}
 8017942:	e00e      	b.n	8017962 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	795b      	ldrb	r3, [r3, #5]
 8017948:	2b03      	cmp	r3, #3
 801794a:	d10a      	bne.n	8017962 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	799b      	ldrb	r3, [r3, #6]
 8017950:	2b01      	cmp	r3, #1
 8017952:	d803      	bhi.n	801795c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	f000 fcd9 	bl	801830c <dhcp_reboot>
}
 801795a:	e002      	b.n	8017962 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801795c:	6878      	ldr	r0, [r7, #4]
 801795e:	f000 fa21 	bl	8017da4 <dhcp_discover>
}
 8017962:	bf00      	nop
 8017964:	3710      	adds	r7, #16
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}

0801796a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801796a:	b580      	push	{r7, lr}
 801796c:	b084      	sub	sp, #16
 801796e:	af00      	add	r7, sp, #0
 8017970:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017976:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	795b      	ldrb	r3, [r3, #5]
 801797c:	2b01      	cmp	r3, #1
 801797e:	d007      	beq.n	8017990 <dhcp_t1_timeout+0x26>
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	795b      	ldrb	r3, [r3, #5]
 8017984:	2b0a      	cmp	r3, #10
 8017986:	d003      	beq.n	8017990 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801798c:	2b05      	cmp	r3, #5
 801798e:	d116      	bne.n	80179be <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8017990:	6878      	ldr	r0, [r7, #4]
 8017992:	f000 fb83 	bl	801809c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	899b      	ldrh	r3, [r3, #12]
 801799a:	461a      	mov	r2, r3
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	8a5b      	ldrh	r3, [r3, #18]
 80179a0:	1ad3      	subs	r3, r2, r3
 80179a2:	2b01      	cmp	r3, #1
 80179a4:	dd0b      	ble.n	80179be <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	899b      	ldrh	r3, [r3, #12]
 80179aa:	461a      	mov	r2, r3
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	8a5b      	ldrh	r3, [r3, #18]
 80179b0:	1ad3      	subs	r3, r2, r3
 80179b2:	0fda      	lsrs	r2, r3, #31
 80179b4:	4413      	add	r3, r2
 80179b6:	105b      	asrs	r3, r3, #1
 80179b8:	b29a      	uxth	r2, r3
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80179be:	bf00      	nop
 80179c0:	3710      	adds	r7, #16
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}

080179c6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80179c6:	b580      	push	{r7, lr}
 80179c8:	b084      	sub	sp, #16
 80179ca:	af00      	add	r7, sp, #0
 80179cc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	795b      	ldrb	r3, [r3, #5]
 80179d8:	2b01      	cmp	r3, #1
 80179da:	d00b      	beq.n	80179f4 <dhcp_t2_timeout+0x2e>
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	795b      	ldrb	r3, [r3, #5]
 80179e0:	2b0a      	cmp	r3, #10
 80179e2:	d007      	beq.n	80179f4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80179e8:	2b05      	cmp	r3, #5
 80179ea:	d003      	beq.n	80179f4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	795b      	ldrb	r3, [r3, #5]
 80179f0:	2b04      	cmp	r3, #4
 80179f2:	d116      	bne.n	8017a22 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80179f4:	6878      	ldr	r0, [r7, #4]
 80179f6:	f000 fbed 	bl	80181d4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	8a9b      	ldrh	r3, [r3, #20]
 80179fe:	461a      	mov	r2, r3
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	8a5b      	ldrh	r3, [r3, #18]
 8017a04:	1ad3      	subs	r3, r2, r3
 8017a06:	2b01      	cmp	r3, #1
 8017a08:	dd0b      	ble.n	8017a22 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	8a9b      	ldrh	r3, [r3, #20]
 8017a0e:	461a      	mov	r2, r3
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	8a5b      	ldrh	r3, [r3, #18]
 8017a14:	1ad3      	subs	r3, r2, r3
 8017a16:	0fda      	lsrs	r2, r3, #31
 8017a18:	4413      	add	r3, r2
 8017a1a:	105b      	asrs	r3, r3, #1
 8017a1c:	b29a      	uxth	r2, r3
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8017a22:	bf00      	nop
 8017a24:	3710      	adds	r7, #16
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
	...

08017a2c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b084      	sub	sp, #16
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	6078      	str	r0, [r7, #4]
 8017a34:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a3a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2200      	movs	r2, #0
 8017a40:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	2200      	movs	r2, #0
 8017a46:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8017a48:	4b26      	ldr	r3, [pc, #152]	; (8017ae4 <dhcp_handle_ack+0xb8>)
 8017a4a:	78db      	ldrb	r3, [r3, #3]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d003      	beq.n	8017a58 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8017a50:	4b25      	ldr	r3, [pc, #148]	; (8017ae8 <dhcp_handle_ack+0xbc>)
 8017a52:	68da      	ldr	r2, [r3, #12]
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8017a58:	4b22      	ldr	r3, [pc, #136]	; (8017ae4 <dhcp_handle_ack+0xb8>)
 8017a5a:	791b      	ldrb	r3, [r3, #4]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d004      	beq.n	8017a6a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8017a60:	4b21      	ldr	r3, [pc, #132]	; (8017ae8 <dhcp_handle_ack+0xbc>)
 8017a62:	691a      	ldr	r2, [r3, #16]
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	62da      	str	r2, [r3, #44]	; 0x2c
 8017a68:	e004      	b.n	8017a74 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a6e:	085a      	lsrs	r2, r3, #1
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8017a74:	4b1b      	ldr	r3, [pc, #108]	; (8017ae4 <dhcp_handle_ack+0xb8>)
 8017a76:	795b      	ldrb	r3, [r3, #5]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d004      	beq.n	8017a86 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8017a7c:	4b1a      	ldr	r3, [pc, #104]	; (8017ae8 <dhcp_handle_ack+0xbc>)
 8017a7e:	695a      	ldr	r2, [r3, #20]
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	631a      	str	r2, [r3, #48]	; 0x30
 8017a84:	e007      	b.n	8017a96 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017a8a:	4613      	mov	r3, r2
 8017a8c:	00db      	lsls	r3, r3, #3
 8017a8e:	1a9b      	subs	r3, r3, r2
 8017a90:	08da      	lsrs	r2, r3, #3
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8017a96:	683b      	ldr	r3, [r7, #0]
 8017a98:	691a      	ldr	r2, [r3, #16]
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8017a9e:	4b11      	ldr	r3, [pc, #68]	; (8017ae4 <dhcp_handle_ack+0xb8>)
 8017aa0:	799b      	ldrb	r3, [r3, #6]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d00b      	beq.n	8017abe <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8017aa6:	4b10      	ldr	r3, [pc, #64]	; (8017ae8 <dhcp_handle_ack+0xbc>)
 8017aa8:	699b      	ldr	r3, [r3, #24]
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f7f7 fe7d 	bl	800f7aa <lwip_htonl>
 8017ab0:	4602      	mov	r2, r0
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	2201      	movs	r2, #1
 8017aba:	71da      	strb	r2, [r3, #7]
 8017abc:	e002      	b.n	8017ac4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8017ac4:	4b07      	ldr	r3, [pc, #28]	; (8017ae4 <dhcp_handle_ack+0xb8>)
 8017ac6:	79db      	ldrb	r3, [r3, #7]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d007      	beq.n	8017adc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8017acc:	4b06      	ldr	r3, [pc, #24]	; (8017ae8 <dhcp_handle_ack+0xbc>)
 8017ace:	69db      	ldr	r3, [r3, #28]
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f7f7 fe6a 	bl	800f7aa <lwip_htonl>
 8017ad6:	4602      	mov	r2, r0
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8017adc:	bf00      	nop
 8017ade:	3710      	adds	r7, #16
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	bd80      	pop	{r7, pc}
 8017ae4:	2000c658 	.word	0x2000c658
 8017ae8:	2000c638 	.word	0x2000c638

08017aec <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b084      	sub	sp, #16
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d109      	bne.n	8017b0e <dhcp_start+0x22>
 8017afa:	4b37      	ldr	r3, [pc, #220]	; (8017bd8 <dhcp_start+0xec>)
 8017afc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8017b00:	4936      	ldr	r1, [pc, #216]	; (8017bdc <dhcp_start+0xf0>)
 8017b02:	4837      	ldr	r0, [pc, #220]	; (8017be0 <dhcp_start+0xf4>)
 8017b04:	f004 fd06 	bl	801c514 <iprintf>
 8017b08:	f06f 030f 	mvn.w	r3, #15
 8017b0c:	e060      	b.n	8017bd0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b14:	f003 0301 	and.w	r3, r3, #1
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d109      	bne.n	8017b30 <dhcp_start+0x44>
 8017b1c:	4b2e      	ldr	r3, [pc, #184]	; (8017bd8 <dhcp_start+0xec>)
 8017b1e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8017b22:	4930      	ldr	r1, [pc, #192]	; (8017be4 <dhcp_start+0xf8>)
 8017b24:	482e      	ldr	r0, [pc, #184]	; (8017be0 <dhcp_start+0xf4>)
 8017b26:	f004 fcf5 	bl	801c514 <iprintf>
 8017b2a:	f06f 030f 	mvn.w	r3, #15
 8017b2e:	e04f      	b.n	8017bd0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b34:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b3a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8017b3e:	d202      	bcs.n	8017b46 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8017b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b44:	e044      	b.n	8017bd0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d10d      	bne.n	8017b68 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8017b4c:	2034      	movs	r0, #52	; 0x34
 8017b4e:	f7f8 f94b 	bl	800fde8 <mem_malloc>
 8017b52:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d102      	bne.n	8017b60 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8017b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b5e:	e037      	b.n	8017bd0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	68fa      	ldr	r2, [r7, #12]
 8017b64:	625a      	str	r2, [r3, #36]	; 0x24
 8017b66:	e005      	b.n	8017b74 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8017b68:	68fb      	ldr	r3, [r7, #12]
 8017b6a:	791b      	ldrb	r3, [r3, #4]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d001      	beq.n	8017b74 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017b70:	f7ff fc92 	bl	8017498 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8017b74:	2234      	movs	r2, #52	; 0x34
 8017b76:	2100      	movs	r1, #0
 8017b78:	68f8      	ldr	r0, [r7, #12]
 8017b7a:	f004 fe5b 	bl	801c834 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8017b7e:	f7ff fc39 	bl	80173f4 <dhcp_inc_pcb_refcount>
 8017b82:	4603      	mov	r3, r0
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d002      	beq.n	8017b8e <dhcp_start+0xa2>
    return ERR_MEM;
 8017b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017b8c:	e020      	b.n	8017bd0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	2201      	movs	r2, #1
 8017b92:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b9a:	f003 0304 	and.w	r3, r3, #4
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d105      	bne.n	8017bae <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8017ba2:	2102      	movs	r1, #2
 8017ba4:	68f8      	ldr	r0, [r7, #12]
 8017ba6:	f000 fd01 	bl	80185ac <dhcp_set_state>
    return ERR_OK;
 8017baa:	2300      	movs	r3, #0
 8017bac:	e010      	b.n	8017bd0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8017bae:	6878      	ldr	r0, [r7, #4]
 8017bb0:	f000 f8f8 	bl	8017da4 <dhcp_discover>
 8017bb4:	4603      	mov	r3, r0
 8017bb6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8017bb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d005      	beq.n	8017bcc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8017bc0:	6878      	ldr	r0, [r7, #4]
 8017bc2:	f000 fc59 	bl	8018478 <dhcp_release_and_stop>
    return ERR_MEM;
 8017bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017bca:	e001      	b.n	8017bd0 <dhcp_start+0xe4>
  }
  return result;
 8017bcc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	3710      	adds	r7, #16
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}
 8017bd8:	08020b28 	.word	0x08020b28
 8017bdc:	08020c0c 	.word	0x08020c0c
 8017be0:	08020b88 	.word	0x08020b88
 8017be4:	08020c50 	.word	0x08020c50

08017be8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b084      	sub	sp, #16
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bf4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d025      	beq.n	8017c48 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	795b      	ldrb	r3, [r3, #5]
 8017c00:	2b0a      	cmp	r3, #10
 8017c02:	d008      	beq.n	8017c16 <dhcp_network_changed+0x2e>
 8017c04:	2b0a      	cmp	r3, #10
 8017c06:	dc0d      	bgt.n	8017c24 <dhcp_network_changed+0x3c>
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d01f      	beq.n	8017c4c <dhcp_network_changed+0x64>
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	db09      	blt.n	8017c24 <dhcp_network_changed+0x3c>
 8017c10:	3b03      	subs	r3, #3
 8017c12:	2b02      	cmp	r3, #2
 8017c14:	d806      	bhi.n	8017c24 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	2200      	movs	r2, #0
 8017c1a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8017c1c:	6878      	ldr	r0, [r7, #4]
 8017c1e:	f000 fb75 	bl	801830c <dhcp_reboot>
      break;
 8017c22:	e014      	b.n	8017c4e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	795b      	ldrb	r3, [r3, #5]
 8017c28:	2b0c      	cmp	r3, #12
 8017c2a:	d906      	bls.n	8017c3a <dhcp_network_changed+0x52>
 8017c2c:	4b09      	ldr	r3, [pc, #36]	; (8017c54 <dhcp_network_changed+0x6c>)
 8017c2e:	f240 326d 	movw	r2, #877	; 0x36d
 8017c32:	4909      	ldr	r1, [pc, #36]	; (8017c58 <dhcp_network_changed+0x70>)
 8017c34:	4809      	ldr	r0, [pc, #36]	; (8017c5c <dhcp_network_changed+0x74>)
 8017c36:	f004 fc6d 	bl	801c514 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	2200      	movs	r2, #0
 8017c3e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8017c40:	6878      	ldr	r0, [r7, #4]
 8017c42:	f000 f8af 	bl	8017da4 <dhcp_discover>
      break;
 8017c46:	e002      	b.n	8017c4e <dhcp_network_changed+0x66>
    return;
 8017c48:	bf00      	nop
 8017c4a:	e000      	b.n	8017c4e <dhcp_network_changed+0x66>
      break;
 8017c4c:	bf00      	nop
  }
}
 8017c4e:	3710      	adds	r7, #16
 8017c50:	46bd      	mov	sp, r7
 8017c52:	bd80      	pop	{r7, pc}
 8017c54:	08020b28 	.word	0x08020b28
 8017c58:	08020c74 	.word	0x08020c74
 8017c5c:	08020b88 	.word	0x08020b88

08017c60 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b084      	sub	sp, #16
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
 8017c68:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d107      	bne.n	8017c80 <dhcp_arp_reply+0x20>
 8017c70:	4b0e      	ldr	r3, [pc, #56]	; (8017cac <dhcp_arp_reply+0x4c>)
 8017c72:	f240 328b 	movw	r2, #907	; 0x38b
 8017c76:	490e      	ldr	r1, [pc, #56]	; (8017cb0 <dhcp_arp_reply+0x50>)
 8017c78:	480e      	ldr	r0, [pc, #56]	; (8017cb4 <dhcp_arp_reply+0x54>)
 8017c7a:	f004 fc4b 	bl	801c514 <iprintf>
 8017c7e:	e012      	b.n	8017ca6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c84:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d00c      	beq.n	8017ca6 <dhcp_arp_reply+0x46>
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	795b      	ldrb	r3, [r3, #5]
 8017c90:	2b08      	cmp	r3, #8
 8017c92:	d108      	bne.n	8017ca6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	681a      	ldr	r2, [r3, #0]
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	69db      	ldr	r3, [r3, #28]
 8017c9c:	429a      	cmp	r2, r3
 8017c9e:	d102      	bne.n	8017ca6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8017ca0:	6878      	ldr	r0, [r7, #4]
 8017ca2:	f000 f809 	bl	8017cb8 <dhcp_decline>
    }
  }
}
 8017ca6:	3710      	adds	r7, #16
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	bd80      	pop	{r7, pc}
 8017cac:	08020b28 	.word	0x08020b28
 8017cb0:	08020c0c 	.word	0x08020c0c
 8017cb4:	08020b88 	.word	0x08020b88

08017cb8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8017cb8:	b5b0      	push	{r4, r5, r7, lr}
 8017cba:	b08a      	sub	sp, #40	; 0x28
 8017cbc:	af02      	add	r7, sp, #8
 8017cbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cc4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8017cc6:	210c      	movs	r1, #12
 8017cc8:	69b8      	ldr	r0, [r7, #24]
 8017cca:	f000 fc6f 	bl	80185ac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8017cce:	f107 030c 	add.w	r3, r7, #12
 8017cd2:	2204      	movs	r2, #4
 8017cd4:	69b9      	ldr	r1, [r7, #24]
 8017cd6:	6878      	ldr	r0, [r7, #4]
 8017cd8:	f001 f8f4 	bl	8018ec4 <dhcp_create_msg>
 8017cdc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017cde:	697b      	ldr	r3, [r7, #20]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d035      	beq.n	8017d50 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017ce4:	697b      	ldr	r3, [r7, #20]
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017cea:	89b8      	ldrh	r0, [r7, #12]
 8017cec:	693b      	ldr	r3, [r7, #16]
 8017cee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017cf2:	2304      	movs	r3, #4
 8017cf4:	2232      	movs	r2, #50	; 0x32
 8017cf6:	f000 fc73 	bl	80185e0 <dhcp_option>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017cfe:	89bc      	ldrh	r4, [r7, #12]
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017d06:	69bb      	ldr	r3, [r7, #24]
 8017d08:	69db      	ldr	r3, [r3, #28]
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	f7f7 fd4d 	bl	800f7aa <lwip_htonl>
 8017d10:	4603      	mov	r3, r0
 8017d12:	461a      	mov	r2, r3
 8017d14:	4629      	mov	r1, r5
 8017d16:	4620      	mov	r0, r4
 8017d18:	f000 fcee 	bl	80186f8 <dhcp_option_long>
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017d20:	89b8      	ldrh	r0, [r7, #12]
 8017d22:	693b      	ldr	r3, [r7, #16]
 8017d24:	33f0      	adds	r3, #240	; 0xf0
 8017d26:	697a      	ldr	r2, [r7, #20]
 8017d28:	4619      	mov	r1, r3
 8017d2a:	f001 f9a1 	bl	8019070 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017d2e:	4b19      	ldr	r3, [pc, #100]	; (8017d94 <dhcp_decline+0xdc>)
 8017d30:	6818      	ldr	r0, [r3, #0]
 8017d32:	4b19      	ldr	r3, [pc, #100]	; (8017d98 <dhcp_decline+0xe0>)
 8017d34:	9301      	str	r3, [sp, #4]
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	9300      	str	r3, [sp, #0]
 8017d3a:	2343      	movs	r3, #67	; 0x43
 8017d3c:	4a17      	ldr	r2, [pc, #92]	; (8017d9c <dhcp_decline+0xe4>)
 8017d3e:	6979      	ldr	r1, [r7, #20]
 8017d40:	f7ff f8d2 	bl	8016ee8 <udp_sendto_if_src>
 8017d44:	4603      	mov	r3, r0
 8017d46:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017d48:	6978      	ldr	r0, [r7, #20]
 8017d4a:	f7f9 f917 	bl	8010f7c <pbuf_free>
 8017d4e:	e001      	b.n	8017d54 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017d50:	23ff      	movs	r3, #255	; 0xff
 8017d52:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017d54:	69bb      	ldr	r3, [r7, #24]
 8017d56:	799b      	ldrb	r3, [r3, #6]
 8017d58:	2bff      	cmp	r3, #255	; 0xff
 8017d5a:	d005      	beq.n	8017d68 <dhcp_decline+0xb0>
    dhcp->tries++;
 8017d5c:	69bb      	ldr	r3, [r7, #24]
 8017d5e:	799b      	ldrb	r3, [r3, #6]
 8017d60:	3301      	adds	r3, #1
 8017d62:	b2da      	uxtb	r2, r3
 8017d64:	69bb      	ldr	r3, [r7, #24]
 8017d66:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8017d68:	f242 7310 	movw	r3, #10000	; 0x2710
 8017d6c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017d6e:	89fb      	ldrh	r3, [r7, #14]
 8017d70:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017d74:	4a0a      	ldr	r2, [pc, #40]	; (8017da0 <dhcp_decline+0xe8>)
 8017d76:	fb82 1203 	smull	r1, r2, r2, r3
 8017d7a:	1152      	asrs	r2, r2, #5
 8017d7c:	17db      	asrs	r3, r3, #31
 8017d7e:	1ad3      	subs	r3, r2, r3
 8017d80:	b29a      	uxth	r2, r3
 8017d82:	69bb      	ldr	r3, [r7, #24]
 8017d84:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	3720      	adds	r7, #32
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bdb0      	pop	{r4, r5, r7, pc}
 8017d92:	bf00      	nop
 8017d94:	2000c660 	.word	0x2000c660
 8017d98:	0802182c 	.word	0x0802182c
 8017d9c:	08021830 	.word	0x08021830
 8017da0:	10624dd3 	.word	0x10624dd3

08017da4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b08a      	sub	sp, #40	; 0x28
 8017da8:	af02      	add	r7, sp, #8
 8017daa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017db0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8017db2:	2300      	movs	r3, #0
 8017db4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8017db6:	69bb      	ldr	r3, [r7, #24]
 8017db8:	2200      	movs	r2, #0
 8017dba:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8017dbc:	2106      	movs	r1, #6
 8017dbe:	69b8      	ldr	r0, [r7, #24]
 8017dc0:	f000 fbf4 	bl	80185ac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8017dc4:	f107 0308 	add.w	r3, r7, #8
 8017dc8:	2201      	movs	r2, #1
 8017dca:	69b9      	ldr	r1, [r7, #24]
 8017dcc:	6878      	ldr	r0, [r7, #4]
 8017dce:	f001 f879 	bl	8018ec4 <dhcp_create_msg>
 8017dd2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8017dd4:	693b      	ldr	r3, [r7, #16]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d04b      	beq.n	8017e72 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	685b      	ldr	r3, [r3, #4]
 8017dde:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017de0:	8938      	ldrh	r0, [r7, #8]
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017de8:	2302      	movs	r3, #2
 8017dea:	2239      	movs	r2, #57	; 0x39
 8017dec:	f000 fbf8 	bl	80185e0 <dhcp_option>
 8017df0:	4603      	mov	r3, r0
 8017df2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017df4:	8938      	ldrh	r0, [r7, #8]
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e00:	461a      	mov	r2, r3
 8017e02:	f000 fc47 	bl	8018694 <dhcp_option_short>
 8017e06:	4603      	mov	r3, r0
 8017e08:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017e0a:	8938      	ldrh	r0, [r7, #8]
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017e12:	2303      	movs	r3, #3
 8017e14:	2237      	movs	r2, #55	; 0x37
 8017e16:	f000 fbe3 	bl	80185e0 <dhcp_option>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017e1e:	2300      	movs	r3, #0
 8017e20:	77fb      	strb	r3, [r7, #31]
 8017e22:	e00e      	b.n	8017e42 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017e24:	8938      	ldrh	r0, [r7, #8]
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017e2c:	7ffb      	ldrb	r3, [r7, #31]
 8017e2e:	4a29      	ldr	r2, [pc, #164]	; (8017ed4 <dhcp_discover+0x130>)
 8017e30:	5cd3      	ldrb	r3, [r2, r3]
 8017e32:	461a      	mov	r2, r3
 8017e34:	f000 fc08 	bl	8018648 <dhcp_option_byte>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017e3c:	7ffb      	ldrb	r3, [r7, #31]
 8017e3e:	3301      	adds	r3, #1
 8017e40:	77fb      	strb	r3, [r7, #31]
 8017e42:	7ffb      	ldrb	r3, [r7, #31]
 8017e44:	2b02      	cmp	r3, #2
 8017e46:	d9ed      	bls.n	8017e24 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017e48:	8938      	ldrh	r0, [r7, #8]
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	33f0      	adds	r3, #240	; 0xf0
 8017e4e:	693a      	ldr	r2, [r7, #16]
 8017e50:	4619      	mov	r1, r3
 8017e52:	f001 f90d 	bl	8019070 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017e56:	4b20      	ldr	r3, [pc, #128]	; (8017ed8 <dhcp_discover+0x134>)
 8017e58:	6818      	ldr	r0, [r3, #0]
 8017e5a:	4b20      	ldr	r3, [pc, #128]	; (8017edc <dhcp_discover+0x138>)
 8017e5c:	9301      	str	r3, [sp, #4]
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	9300      	str	r3, [sp, #0]
 8017e62:	2343      	movs	r3, #67	; 0x43
 8017e64:	4a1e      	ldr	r2, [pc, #120]	; (8017ee0 <dhcp_discover+0x13c>)
 8017e66:	6939      	ldr	r1, [r7, #16]
 8017e68:	f7ff f83e 	bl	8016ee8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8017e6c:	6938      	ldr	r0, [r7, #16]
 8017e6e:	f7f9 f885 	bl	8010f7c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017e72:	69bb      	ldr	r3, [r7, #24]
 8017e74:	799b      	ldrb	r3, [r3, #6]
 8017e76:	2bff      	cmp	r3, #255	; 0xff
 8017e78:	d005      	beq.n	8017e86 <dhcp_discover+0xe2>
    dhcp->tries++;
 8017e7a:	69bb      	ldr	r3, [r7, #24]
 8017e7c:	799b      	ldrb	r3, [r3, #6]
 8017e7e:	3301      	adds	r3, #1
 8017e80:	b2da      	uxtb	r2, r3
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017e86:	69bb      	ldr	r3, [r7, #24]
 8017e88:	799b      	ldrb	r3, [r3, #6]
 8017e8a:	2b05      	cmp	r3, #5
 8017e8c:	d80d      	bhi.n	8017eaa <dhcp_discover+0x106>
 8017e8e:	69bb      	ldr	r3, [r7, #24]
 8017e90:	799b      	ldrb	r3, [r3, #6]
 8017e92:	461a      	mov	r2, r3
 8017e94:	2301      	movs	r3, #1
 8017e96:	4093      	lsls	r3, r2
 8017e98:	b29b      	uxth	r3, r3
 8017e9a:	461a      	mov	r2, r3
 8017e9c:	0152      	lsls	r2, r2, #5
 8017e9e:	1ad2      	subs	r2, r2, r3
 8017ea0:	0092      	lsls	r2, r2, #2
 8017ea2:	4413      	add	r3, r2
 8017ea4:	00db      	lsls	r3, r3, #3
 8017ea6:	b29b      	uxth	r3, r3
 8017ea8:	e001      	b.n	8017eae <dhcp_discover+0x10a>
 8017eaa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8017eae:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017eb0:	897b      	ldrh	r3, [r7, #10]
 8017eb2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017eb6:	4a0b      	ldr	r2, [pc, #44]	; (8017ee4 <dhcp_discover+0x140>)
 8017eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8017ebc:	1152      	asrs	r2, r2, #5
 8017ebe:	17db      	asrs	r3, r3, #31
 8017ec0:	1ad3      	subs	r3, r2, r3
 8017ec2:	b29a      	uxth	r2, r3
 8017ec4:	69bb      	ldr	r3, [r7, #24]
 8017ec6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017ecc:	4618      	mov	r0, r3
 8017ece:	3720      	adds	r7, #32
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	bd80      	pop	{r7, pc}
 8017ed4:	20000034 	.word	0x20000034
 8017ed8:	2000c660 	.word	0x2000c660
 8017edc:	0802182c 	.word	0x0802182c
 8017ee0:	08021830 	.word	0x08021830
 8017ee4:	10624dd3 	.word	0x10624dd3

08017ee8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b088      	sub	sp, #32
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d107      	bne.n	8017f06 <dhcp_bind+0x1e>
 8017ef6:	4b64      	ldr	r3, [pc, #400]	; (8018088 <dhcp_bind+0x1a0>)
 8017ef8:	f240 4215 	movw	r2, #1045	; 0x415
 8017efc:	4963      	ldr	r1, [pc, #396]	; (801808c <dhcp_bind+0x1a4>)
 8017efe:	4864      	ldr	r0, [pc, #400]	; (8018090 <dhcp_bind+0x1a8>)
 8017f00:	f004 fb08 	bl	801c514 <iprintf>
 8017f04:	e0bc      	b.n	8018080 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f0a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017f0c:	69bb      	ldr	r3, [r7, #24]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d107      	bne.n	8017f22 <dhcp_bind+0x3a>
 8017f12:	4b5d      	ldr	r3, [pc, #372]	; (8018088 <dhcp_bind+0x1a0>)
 8017f14:	f240 4217 	movw	r2, #1047	; 0x417
 8017f18:	495e      	ldr	r1, [pc, #376]	; (8018094 <dhcp_bind+0x1ac>)
 8017f1a:	485d      	ldr	r0, [pc, #372]	; (8018090 <dhcp_bind+0x1a8>)
 8017f1c:	f004 fafa 	bl	801c514 <iprintf>
 8017f20:	e0ae      	b.n	8018080 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8017f22:	69bb      	ldr	r3, [r7, #24]
 8017f24:	2200      	movs	r2, #0
 8017f26:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017f28:	69bb      	ldr	r3, [r7, #24]
 8017f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f30:	d019      	beq.n	8017f66 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017f32:	69bb      	ldr	r3, [r7, #24]
 8017f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f36:	331e      	adds	r3, #30
 8017f38:	4a57      	ldr	r2, [pc, #348]	; (8018098 <dhcp_bind+0x1b0>)
 8017f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8017f3e:	095b      	lsrs	r3, r3, #5
 8017f40:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017f42:	69fb      	ldr	r3, [r7, #28]
 8017f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017f48:	d302      	bcc.n	8017f50 <dhcp_bind+0x68>
      timeout = 0xffff;
 8017f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f4e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8017f50:	69fb      	ldr	r3, [r7, #28]
 8017f52:	b29a      	uxth	r2, r3
 8017f54:	69bb      	ldr	r3, [r7, #24]
 8017f56:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8017f58:	69bb      	ldr	r3, [r7, #24]
 8017f5a:	8a9b      	ldrh	r3, [r3, #20]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d102      	bne.n	8017f66 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8017f60:	69bb      	ldr	r3, [r7, #24]
 8017f62:	2201      	movs	r2, #1
 8017f64:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8017f66:	69bb      	ldr	r3, [r7, #24]
 8017f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f6e:	d01d      	beq.n	8017fac <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017f70:	69bb      	ldr	r3, [r7, #24]
 8017f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f74:	331e      	adds	r3, #30
 8017f76:	4a48      	ldr	r2, [pc, #288]	; (8018098 <dhcp_bind+0x1b0>)
 8017f78:	fba2 2303 	umull	r2, r3, r2, r3
 8017f7c:	095b      	lsrs	r3, r3, #5
 8017f7e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017f86:	d302      	bcc.n	8017f8e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f8c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8017f8e:	69fb      	ldr	r3, [r7, #28]
 8017f90:	b29a      	uxth	r2, r3
 8017f92:	69bb      	ldr	r3, [r7, #24]
 8017f94:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8017f96:	69bb      	ldr	r3, [r7, #24]
 8017f98:	895b      	ldrh	r3, [r3, #10]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d102      	bne.n	8017fa4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8017f9e:	69bb      	ldr	r3, [r7, #24]
 8017fa0:	2201      	movs	r2, #1
 8017fa2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8017fa4:	69bb      	ldr	r3, [r7, #24]
 8017fa6:	895a      	ldrh	r2, [r3, #10]
 8017fa8:	69bb      	ldr	r3, [r7, #24]
 8017faa:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8017fac:	69bb      	ldr	r3, [r7, #24]
 8017fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fb4:	d01d      	beq.n	8017ff2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017fb6:	69bb      	ldr	r3, [r7, #24]
 8017fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fba:	331e      	adds	r3, #30
 8017fbc:	4a36      	ldr	r2, [pc, #216]	; (8018098 <dhcp_bind+0x1b0>)
 8017fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8017fc2:	095b      	lsrs	r3, r3, #5
 8017fc4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017fc6:	69fb      	ldr	r3, [r7, #28]
 8017fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017fcc:	d302      	bcc.n	8017fd4 <dhcp_bind+0xec>
      timeout = 0xffff;
 8017fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017fd2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8017fd4:	69fb      	ldr	r3, [r7, #28]
 8017fd6:	b29a      	uxth	r2, r3
 8017fd8:	69bb      	ldr	r3, [r7, #24]
 8017fda:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017fdc:	69bb      	ldr	r3, [r7, #24]
 8017fde:	899b      	ldrh	r3, [r3, #12]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d102      	bne.n	8017fea <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8017fe4:	69bb      	ldr	r3, [r7, #24]
 8017fe6:	2201      	movs	r2, #1
 8017fe8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8017fea:	69bb      	ldr	r3, [r7, #24]
 8017fec:	899a      	ldrh	r2, [r3, #12]
 8017fee:	69bb      	ldr	r3, [r7, #24]
 8017ff0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8017ff2:	69bb      	ldr	r3, [r7, #24]
 8017ff4:	895a      	ldrh	r2, [r3, #10]
 8017ff6:	69bb      	ldr	r3, [r7, #24]
 8017ff8:	899b      	ldrh	r3, [r3, #12]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d306      	bcc.n	801800c <dhcp_bind+0x124>
 8017ffe:	69bb      	ldr	r3, [r7, #24]
 8018000:	899b      	ldrh	r3, [r3, #12]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d002      	beq.n	801800c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8018006:	69bb      	ldr	r3, [r7, #24]
 8018008:	2200      	movs	r2, #0
 801800a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801800c:	69bb      	ldr	r3, [r7, #24]
 801800e:	79db      	ldrb	r3, [r3, #7]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d003      	beq.n	801801c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8018014:	69bb      	ldr	r3, [r7, #24]
 8018016:	6a1b      	ldr	r3, [r3, #32]
 8018018:	613b      	str	r3, [r7, #16]
 801801a:	e014      	b.n	8018046 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801801c:	69bb      	ldr	r3, [r7, #24]
 801801e:	331c      	adds	r3, #28
 8018020:	781b      	ldrb	r3, [r3, #0]
 8018022:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8018024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018028:	2b00      	cmp	r3, #0
 801802a:	db02      	blt.n	8018032 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801802c:	23ff      	movs	r3, #255	; 0xff
 801802e:	613b      	str	r3, [r7, #16]
 8018030:	e009      	b.n	8018046 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8018032:	7dfb      	ldrb	r3, [r7, #23]
 8018034:	2bbf      	cmp	r3, #191	; 0xbf
 8018036:	d903      	bls.n	8018040 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8018038:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801803c:	613b      	str	r3, [r7, #16]
 801803e:	e002      	b.n	8018046 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8018040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018044:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8018046:	69bb      	ldr	r3, [r7, #24]
 8018048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801804a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d108      	bne.n	8018064 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8018052:	69bb      	ldr	r3, [r7, #24]
 8018054:	69da      	ldr	r2, [r3, #28]
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	4013      	ands	r3, r2
 801805a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018062:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8018064:	210a      	movs	r1, #10
 8018066:	69b8      	ldr	r0, [r7, #24]
 8018068:	f000 faa0 	bl	80185ac <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801806c:	69bb      	ldr	r3, [r7, #24]
 801806e:	f103 011c 	add.w	r1, r3, #28
 8018072:	f107 030c 	add.w	r3, r7, #12
 8018076:	f107 0210 	add.w	r2, r7, #16
 801807a:	6878      	ldr	r0, [r7, #4]
 801807c:	f7f8 fa70 	bl	8010560 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8018080:	3720      	adds	r7, #32
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}
 8018086:	bf00      	nop
 8018088:	08020b28 	.word	0x08020b28
 801808c:	08020c88 	.word	0x08020c88
 8018090:	08020b88 	.word	0x08020b88
 8018094:	08020ca4 	.word	0x08020ca4
 8018098:	88888889 	.word	0x88888889

0801809c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b08a      	sub	sp, #40	; 0x28
 80180a0:	af02      	add	r7, sp, #8
 80180a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180a8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80180aa:	2105      	movs	r1, #5
 80180ac:	69b8      	ldr	r0, [r7, #24]
 80180ae:	f000 fa7d 	bl	80185ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80180b2:	f107 030c 	add.w	r3, r7, #12
 80180b6:	2203      	movs	r2, #3
 80180b8:	69b9      	ldr	r1, [r7, #24]
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f000 ff02 	bl	8018ec4 <dhcp_create_msg>
 80180c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d04e      	beq.n	8018166 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80180c8:	697b      	ldr	r3, [r7, #20]
 80180ca:	685b      	ldr	r3, [r3, #4]
 80180cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80180ce:	89b8      	ldrh	r0, [r7, #12]
 80180d0:	693b      	ldr	r3, [r7, #16]
 80180d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80180d6:	2302      	movs	r3, #2
 80180d8:	2239      	movs	r2, #57	; 0x39
 80180da:	f000 fa81 	bl	80185e0 <dhcp_option>
 80180de:	4603      	mov	r3, r0
 80180e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80180e2:	89b8      	ldrh	r0, [r7, #12]
 80180e4:	693b      	ldr	r3, [r7, #16]
 80180e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80180ee:	461a      	mov	r2, r3
 80180f0:	f000 fad0 	bl	8018694 <dhcp_option_short>
 80180f4:	4603      	mov	r3, r0
 80180f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80180f8:	89b8      	ldrh	r0, [r7, #12]
 80180fa:	693b      	ldr	r3, [r7, #16]
 80180fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018100:	2303      	movs	r3, #3
 8018102:	2237      	movs	r2, #55	; 0x37
 8018104:	f000 fa6c 	bl	80185e0 <dhcp_option>
 8018108:	4603      	mov	r3, r0
 801810a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801810c:	2300      	movs	r3, #0
 801810e:	77bb      	strb	r3, [r7, #30]
 8018110:	e00e      	b.n	8018130 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018112:	89b8      	ldrh	r0, [r7, #12]
 8018114:	693b      	ldr	r3, [r7, #16]
 8018116:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801811a:	7fbb      	ldrb	r3, [r7, #30]
 801811c:	4a2a      	ldr	r2, [pc, #168]	; (80181c8 <dhcp_renew+0x12c>)
 801811e:	5cd3      	ldrb	r3, [r2, r3]
 8018120:	461a      	mov	r2, r3
 8018122:	f000 fa91 	bl	8018648 <dhcp_option_byte>
 8018126:	4603      	mov	r3, r0
 8018128:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801812a:	7fbb      	ldrb	r3, [r7, #30]
 801812c:	3301      	adds	r3, #1
 801812e:	77bb      	strb	r3, [r7, #30]
 8018130:	7fbb      	ldrb	r3, [r7, #30]
 8018132:	2b02      	cmp	r3, #2
 8018134:	d9ed      	bls.n	8018112 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018136:	89b8      	ldrh	r0, [r7, #12]
 8018138:	693b      	ldr	r3, [r7, #16]
 801813a:	33f0      	adds	r3, #240	; 0xf0
 801813c:	697a      	ldr	r2, [r7, #20]
 801813e:	4619      	mov	r1, r3
 8018140:	f000 ff96 	bl	8019070 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018144:	4b21      	ldr	r3, [pc, #132]	; (80181cc <dhcp_renew+0x130>)
 8018146:	6818      	ldr	r0, [r3, #0]
 8018148:	69bb      	ldr	r3, [r7, #24]
 801814a:	f103 0218 	add.w	r2, r3, #24
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	9300      	str	r3, [sp, #0]
 8018152:	2343      	movs	r3, #67	; 0x43
 8018154:	6979      	ldr	r1, [r7, #20]
 8018156:	f7fe fe53 	bl	8016e00 <udp_sendto_if>
 801815a:	4603      	mov	r3, r0
 801815c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801815e:	6978      	ldr	r0, [r7, #20]
 8018160:	f7f8 ff0c 	bl	8010f7c <pbuf_free>
 8018164:	e001      	b.n	801816a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018166:	23ff      	movs	r3, #255	; 0xff
 8018168:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801816a:	69bb      	ldr	r3, [r7, #24]
 801816c:	799b      	ldrb	r3, [r3, #6]
 801816e:	2bff      	cmp	r3, #255	; 0xff
 8018170:	d005      	beq.n	801817e <dhcp_renew+0xe2>
    dhcp->tries++;
 8018172:	69bb      	ldr	r3, [r7, #24]
 8018174:	799b      	ldrb	r3, [r3, #6]
 8018176:	3301      	adds	r3, #1
 8018178:	b2da      	uxtb	r2, r3
 801817a:	69bb      	ldr	r3, [r7, #24]
 801817c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801817e:	69bb      	ldr	r3, [r7, #24]
 8018180:	799b      	ldrb	r3, [r3, #6]
 8018182:	2b09      	cmp	r3, #9
 8018184:	d80a      	bhi.n	801819c <dhcp_renew+0x100>
 8018186:	69bb      	ldr	r3, [r7, #24]
 8018188:	799b      	ldrb	r3, [r3, #6]
 801818a:	b29b      	uxth	r3, r3
 801818c:	461a      	mov	r2, r3
 801818e:	0152      	lsls	r2, r2, #5
 8018190:	1ad2      	subs	r2, r2, r3
 8018192:	0092      	lsls	r2, r2, #2
 8018194:	4413      	add	r3, r2
 8018196:	011b      	lsls	r3, r3, #4
 8018198:	b29b      	uxth	r3, r3
 801819a:	e001      	b.n	80181a0 <dhcp_renew+0x104>
 801819c:	f644 6320 	movw	r3, #20000	; 0x4e20
 80181a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80181a2:	89fb      	ldrh	r3, [r7, #14]
 80181a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80181a8:	4a09      	ldr	r2, [pc, #36]	; (80181d0 <dhcp_renew+0x134>)
 80181aa:	fb82 1203 	smull	r1, r2, r2, r3
 80181ae:	1152      	asrs	r2, r2, #5
 80181b0:	17db      	asrs	r3, r3, #31
 80181b2:	1ad3      	subs	r3, r2, r3
 80181b4:	b29a      	uxth	r2, r3
 80181b6:	69bb      	ldr	r3, [r7, #24]
 80181b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80181ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80181be:	4618      	mov	r0, r3
 80181c0:	3720      	adds	r7, #32
 80181c2:	46bd      	mov	sp, r7
 80181c4:	bd80      	pop	{r7, pc}
 80181c6:	bf00      	nop
 80181c8:	20000034 	.word	0x20000034
 80181cc:	2000c660 	.word	0x2000c660
 80181d0:	10624dd3 	.word	0x10624dd3

080181d4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b08a      	sub	sp, #40	; 0x28
 80181d8:	af02      	add	r7, sp, #8
 80181da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181e0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80181e2:	2104      	movs	r1, #4
 80181e4:	69b8      	ldr	r0, [r7, #24]
 80181e6:	f000 f9e1 	bl	80185ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80181ea:	f107 030c 	add.w	r3, r7, #12
 80181ee:	2203      	movs	r2, #3
 80181f0:	69b9      	ldr	r1, [r7, #24]
 80181f2:	6878      	ldr	r0, [r7, #4]
 80181f4:	f000 fe66 	bl	8018ec4 <dhcp_create_msg>
 80181f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80181fa:	697b      	ldr	r3, [r7, #20]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d04c      	beq.n	801829a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018200:	697b      	ldr	r3, [r7, #20]
 8018202:	685b      	ldr	r3, [r3, #4]
 8018204:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018206:	89b8      	ldrh	r0, [r7, #12]
 8018208:	693b      	ldr	r3, [r7, #16]
 801820a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801820e:	2302      	movs	r3, #2
 8018210:	2239      	movs	r2, #57	; 0x39
 8018212:	f000 f9e5 	bl	80185e0 <dhcp_option>
 8018216:	4603      	mov	r3, r0
 8018218:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801821a:	89b8      	ldrh	r0, [r7, #12]
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018226:	461a      	mov	r2, r3
 8018228:	f000 fa34 	bl	8018694 <dhcp_option_short>
 801822c:	4603      	mov	r3, r0
 801822e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018230:	89b8      	ldrh	r0, [r7, #12]
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018238:	2303      	movs	r3, #3
 801823a:	2237      	movs	r2, #55	; 0x37
 801823c:	f000 f9d0 	bl	80185e0 <dhcp_option>
 8018240:	4603      	mov	r3, r0
 8018242:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018244:	2300      	movs	r3, #0
 8018246:	77bb      	strb	r3, [r7, #30]
 8018248:	e00e      	b.n	8018268 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801824a:	89b8      	ldrh	r0, [r7, #12]
 801824c:	693b      	ldr	r3, [r7, #16]
 801824e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018252:	7fbb      	ldrb	r3, [r7, #30]
 8018254:	4a29      	ldr	r2, [pc, #164]	; (80182fc <dhcp_rebind+0x128>)
 8018256:	5cd3      	ldrb	r3, [r2, r3]
 8018258:	461a      	mov	r2, r3
 801825a:	f000 f9f5 	bl	8018648 <dhcp_option_byte>
 801825e:	4603      	mov	r3, r0
 8018260:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018262:	7fbb      	ldrb	r3, [r7, #30]
 8018264:	3301      	adds	r3, #1
 8018266:	77bb      	strb	r3, [r7, #30]
 8018268:	7fbb      	ldrb	r3, [r7, #30]
 801826a:	2b02      	cmp	r3, #2
 801826c:	d9ed      	bls.n	801824a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801826e:	89b8      	ldrh	r0, [r7, #12]
 8018270:	693b      	ldr	r3, [r7, #16]
 8018272:	33f0      	adds	r3, #240	; 0xf0
 8018274:	697a      	ldr	r2, [r7, #20]
 8018276:	4619      	mov	r1, r3
 8018278:	f000 fefa 	bl	8019070 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801827c:	4b20      	ldr	r3, [pc, #128]	; (8018300 <dhcp_rebind+0x12c>)
 801827e:	6818      	ldr	r0, [r3, #0]
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	9300      	str	r3, [sp, #0]
 8018284:	2343      	movs	r3, #67	; 0x43
 8018286:	4a1f      	ldr	r2, [pc, #124]	; (8018304 <dhcp_rebind+0x130>)
 8018288:	6979      	ldr	r1, [r7, #20]
 801828a:	f7fe fdb9 	bl	8016e00 <udp_sendto_if>
 801828e:	4603      	mov	r3, r0
 8018290:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018292:	6978      	ldr	r0, [r7, #20]
 8018294:	f7f8 fe72 	bl	8010f7c <pbuf_free>
 8018298:	e001      	b.n	801829e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801829a:	23ff      	movs	r3, #255	; 0xff
 801829c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801829e:	69bb      	ldr	r3, [r7, #24]
 80182a0:	799b      	ldrb	r3, [r3, #6]
 80182a2:	2bff      	cmp	r3, #255	; 0xff
 80182a4:	d005      	beq.n	80182b2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80182a6:	69bb      	ldr	r3, [r7, #24]
 80182a8:	799b      	ldrb	r3, [r3, #6]
 80182aa:	3301      	adds	r3, #1
 80182ac:	b2da      	uxtb	r2, r3
 80182ae:	69bb      	ldr	r3, [r7, #24]
 80182b0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80182b2:	69bb      	ldr	r3, [r7, #24]
 80182b4:	799b      	ldrb	r3, [r3, #6]
 80182b6:	2b09      	cmp	r3, #9
 80182b8:	d80a      	bhi.n	80182d0 <dhcp_rebind+0xfc>
 80182ba:	69bb      	ldr	r3, [r7, #24]
 80182bc:	799b      	ldrb	r3, [r3, #6]
 80182be:	b29b      	uxth	r3, r3
 80182c0:	461a      	mov	r2, r3
 80182c2:	0152      	lsls	r2, r2, #5
 80182c4:	1ad2      	subs	r2, r2, r3
 80182c6:	0092      	lsls	r2, r2, #2
 80182c8:	4413      	add	r3, r2
 80182ca:	00db      	lsls	r3, r3, #3
 80182cc:	b29b      	uxth	r3, r3
 80182ce:	e001      	b.n	80182d4 <dhcp_rebind+0x100>
 80182d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80182d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80182d6:	89fb      	ldrh	r3, [r7, #14]
 80182d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80182dc:	4a0a      	ldr	r2, [pc, #40]	; (8018308 <dhcp_rebind+0x134>)
 80182de:	fb82 1203 	smull	r1, r2, r2, r3
 80182e2:	1152      	asrs	r2, r2, #5
 80182e4:	17db      	asrs	r3, r3, #31
 80182e6:	1ad3      	subs	r3, r2, r3
 80182e8:	b29a      	uxth	r2, r3
 80182ea:	69bb      	ldr	r3, [r7, #24]
 80182ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80182ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3720      	adds	r7, #32
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}
 80182fa:	bf00      	nop
 80182fc:	20000034 	.word	0x20000034
 8018300:	2000c660 	.word	0x2000c660
 8018304:	08021830 	.word	0x08021830
 8018308:	10624dd3 	.word	0x10624dd3

0801830c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801830c:	b5b0      	push	{r4, r5, r7, lr}
 801830e:	b08a      	sub	sp, #40	; 0x28
 8018310:	af02      	add	r7, sp, #8
 8018312:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018318:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801831a:	2103      	movs	r1, #3
 801831c:	69b8      	ldr	r0, [r7, #24]
 801831e:	f000 f945 	bl	80185ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018322:	f107 030c 	add.w	r3, r7, #12
 8018326:	2203      	movs	r2, #3
 8018328:	69b9      	ldr	r1, [r7, #24]
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f000 fdca 	bl	8018ec4 <dhcp_create_msg>
 8018330:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018332:	697b      	ldr	r3, [r7, #20]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d066      	beq.n	8018406 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018338:	697b      	ldr	r3, [r7, #20]
 801833a:	685b      	ldr	r3, [r3, #4]
 801833c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801833e:	89b8      	ldrh	r0, [r7, #12]
 8018340:	693b      	ldr	r3, [r7, #16]
 8018342:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018346:	2302      	movs	r3, #2
 8018348:	2239      	movs	r2, #57	; 0x39
 801834a:	f000 f949 	bl	80185e0 <dhcp_option>
 801834e:	4603      	mov	r3, r0
 8018350:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8018352:	89b8      	ldrh	r0, [r7, #12]
 8018354:	693b      	ldr	r3, [r7, #16]
 8018356:	33f0      	adds	r3, #240	; 0xf0
 8018358:	f44f 7210 	mov.w	r2, #576	; 0x240
 801835c:	4619      	mov	r1, r3
 801835e:	f000 f999 	bl	8018694 <dhcp_option_short>
 8018362:	4603      	mov	r3, r0
 8018364:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018366:	89b8      	ldrh	r0, [r7, #12]
 8018368:	693b      	ldr	r3, [r7, #16]
 801836a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801836e:	2304      	movs	r3, #4
 8018370:	2232      	movs	r2, #50	; 0x32
 8018372:	f000 f935 	bl	80185e0 <dhcp_option>
 8018376:	4603      	mov	r3, r0
 8018378:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801837a:	89bc      	ldrh	r4, [r7, #12]
 801837c:	693b      	ldr	r3, [r7, #16]
 801837e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8018382:	69bb      	ldr	r3, [r7, #24]
 8018384:	69db      	ldr	r3, [r3, #28]
 8018386:	4618      	mov	r0, r3
 8018388:	f7f7 fa0f 	bl	800f7aa <lwip_htonl>
 801838c:	4603      	mov	r3, r0
 801838e:	461a      	mov	r2, r3
 8018390:	4629      	mov	r1, r5
 8018392:	4620      	mov	r0, r4
 8018394:	f000 f9b0 	bl	80186f8 <dhcp_option_long>
 8018398:	4603      	mov	r3, r0
 801839a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801839c:	89b8      	ldrh	r0, [r7, #12]
 801839e:	693b      	ldr	r3, [r7, #16]
 80183a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80183a4:	2303      	movs	r3, #3
 80183a6:	2237      	movs	r2, #55	; 0x37
 80183a8:	f000 f91a 	bl	80185e0 <dhcp_option>
 80183ac:	4603      	mov	r3, r0
 80183ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80183b0:	2300      	movs	r3, #0
 80183b2:	77bb      	strb	r3, [r7, #30]
 80183b4:	e00e      	b.n	80183d4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80183b6:	89b8      	ldrh	r0, [r7, #12]
 80183b8:	693b      	ldr	r3, [r7, #16]
 80183ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80183be:	7fbb      	ldrb	r3, [r7, #30]
 80183c0:	4a29      	ldr	r2, [pc, #164]	; (8018468 <dhcp_reboot+0x15c>)
 80183c2:	5cd3      	ldrb	r3, [r2, r3]
 80183c4:	461a      	mov	r2, r3
 80183c6:	f000 f93f 	bl	8018648 <dhcp_option_byte>
 80183ca:	4603      	mov	r3, r0
 80183cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80183ce:	7fbb      	ldrb	r3, [r7, #30]
 80183d0:	3301      	adds	r3, #1
 80183d2:	77bb      	strb	r3, [r7, #30]
 80183d4:	7fbb      	ldrb	r3, [r7, #30]
 80183d6:	2b02      	cmp	r3, #2
 80183d8:	d9ed      	bls.n	80183b6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80183da:	89b8      	ldrh	r0, [r7, #12]
 80183dc:	693b      	ldr	r3, [r7, #16]
 80183de:	33f0      	adds	r3, #240	; 0xf0
 80183e0:	697a      	ldr	r2, [r7, #20]
 80183e2:	4619      	mov	r1, r3
 80183e4:	f000 fe44 	bl	8019070 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80183e8:	4b20      	ldr	r3, [pc, #128]	; (801846c <dhcp_reboot+0x160>)
 80183ea:	6818      	ldr	r0, [r3, #0]
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	9300      	str	r3, [sp, #0]
 80183f0:	2343      	movs	r3, #67	; 0x43
 80183f2:	4a1f      	ldr	r2, [pc, #124]	; (8018470 <dhcp_reboot+0x164>)
 80183f4:	6979      	ldr	r1, [r7, #20]
 80183f6:	f7fe fd03 	bl	8016e00 <udp_sendto_if>
 80183fa:	4603      	mov	r3, r0
 80183fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80183fe:	6978      	ldr	r0, [r7, #20]
 8018400:	f7f8 fdbc 	bl	8010f7c <pbuf_free>
 8018404:	e001      	b.n	801840a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018406:	23ff      	movs	r3, #255	; 0xff
 8018408:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801840a:	69bb      	ldr	r3, [r7, #24]
 801840c:	799b      	ldrb	r3, [r3, #6]
 801840e:	2bff      	cmp	r3, #255	; 0xff
 8018410:	d005      	beq.n	801841e <dhcp_reboot+0x112>
    dhcp->tries++;
 8018412:	69bb      	ldr	r3, [r7, #24]
 8018414:	799b      	ldrb	r3, [r3, #6]
 8018416:	3301      	adds	r3, #1
 8018418:	b2da      	uxtb	r2, r3
 801841a:	69bb      	ldr	r3, [r7, #24]
 801841c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801841e:	69bb      	ldr	r3, [r7, #24]
 8018420:	799b      	ldrb	r3, [r3, #6]
 8018422:	2b09      	cmp	r3, #9
 8018424:	d80a      	bhi.n	801843c <dhcp_reboot+0x130>
 8018426:	69bb      	ldr	r3, [r7, #24]
 8018428:	799b      	ldrb	r3, [r3, #6]
 801842a:	b29b      	uxth	r3, r3
 801842c:	461a      	mov	r2, r3
 801842e:	0152      	lsls	r2, r2, #5
 8018430:	1ad2      	subs	r2, r2, r3
 8018432:	0092      	lsls	r2, r2, #2
 8018434:	4413      	add	r3, r2
 8018436:	00db      	lsls	r3, r3, #3
 8018438:	b29b      	uxth	r3, r3
 801843a:	e001      	b.n	8018440 <dhcp_reboot+0x134>
 801843c:	f242 7310 	movw	r3, #10000	; 0x2710
 8018440:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018442:	89fb      	ldrh	r3, [r7, #14]
 8018444:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018448:	4a0a      	ldr	r2, [pc, #40]	; (8018474 <dhcp_reboot+0x168>)
 801844a:	fb82 1203 	smull	r1, r2, r2, r3
 801844e:	1152      	asrs	r2, r2, #5
 8018450:	17db      	asrs	r3, r3, #31
 8018452:	1ad3      	subs	r3, r2, r3
 8018454:	b29a      	uxth	r2, r3
 8018456:	69bb      	ldr	r3, [r7, #24]
 8018458:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801845a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801845e:	4618      	mov	r0, r3
 8018460:	3720      	adds	r7, #32
 8018462:	46bd      	mov	sp, r7
 8018464:	bdb0      	pop	{r4, r5, r7, pc}
 8018466:	bf00      	nop
 8018468:	20000034 	.word	0x20000034
 801846c:	2000c660 	.word	0x2000c660
 8018470:	08021830 	.word	0x08021830
 8018474:	10624dd3 	.word	0x10624dd3

08018478 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8018478:	b5b0      	push	{r4, r5, r7, lr}
 801847a:	b08a      	sub	sp, #40	; 0x28
 801847c:	af02      	add	r7, sp, #8
 801847e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018484:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8018486:	69fb      	ldr	r3, [r7, #28]
 8018488:	2b00      	cmp	r3, #0
 801848a:	f000 8084 	beq.w	8018596 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801848e:	69fb      	ldr	r3, [r7, #28]
 8018490:	795b      	ldrb	r3, [r3, #5]
 8018492:	2b00      	cmp	r3, #0
 8018494:	f000 8081 	beq.w	801859a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8018498:	69fb      	ldr	r3, [r7, #28]
 801849a:	699b      	ldr	r3, [r3, #24]
 801849c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801849e:	69fb      	ldr	r3, [r7, #28]
 80184a0:	2200      	movs	r2, #0
 80184a2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80184a4:	69fb      	ldr	r3, [r7, #28]
 80184a6:	2200      	movs	r2, #0
 80184a8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80184aa:	69fb      	ldr	r3, [r7, #28]
 80184ac:	2200      	movs	r2, #0
 80184ae:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80184b0:	69fb      	ldr	r3, [r7, #28]
 80184b2:	2200      	movs	r2, #0
 80184b4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80184b6:	69fb      	ldr	r3, [r7, #28]
 80184b8:	2200      	movs	r2, #0
 80184ba:	631a      	str	r2, [r3, #48]	; 0x30
 80184bc:	69fb      	ldr	r3, [r7, #28]
 80184be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80184c0:	69fb      	ldr	r3, [r7, #28]
 80184c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80184c4:	69fb      	ldr	r3, [r7, #28]
 80184c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184c8:	69fb      	ldr	r3, [r7, #28]
 80184ca:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80184cc:	69fb      	ldr	r3, [r7, #28]
 80184ce:	2200      	movs	r2, #0
 80184d0:	829a      	strh	r2, [r3, #20]
 80184d2:	69fb      	ldr	r3, [r7, #28]
 80184d4:	8a9a      	ldrh	r2, [r3, #20]
 80184d6:	69fb      	ldr	r3, [r7, #28]
 80184d8:	825a      	strh	r2, [r3, #18]
 80184da:	69fb      	ldr	r3, [r7, #28]
 80184dc:	8a5a      	ldrh	r2, [r3, #18]
 80184de:	69fb      	ldr	r3, [r7, #28]
 80184e0:	821a      	strh	r2, [r3, #16]
 80184e2:	69fb      	ldr	r3, [r7, #28]
 80184e4:	8a1a      	ldrh	r2, [r3, #16]
 80184e6:	69fb      	ldr	r3, [r7, #28]
 80184e8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80184ea:	6878      	ldr	r0, [r7, #4]
 80184ec:	f000 fdee 	bl	80190cc <dhcp_supplied_address>
 80184f0:	4603      	mov	r3, r0
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d03b      	beq.n	801856e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80184f6:	f107 030e 	add.w	r3, r7, #14
 80184fa:	2207      	movs	r2, #7
 80184fc:	69f9      	ldr	r1, [r7, #28]
 80184fe:	6878      	ldr	r0, [r7, #4]
 8018500:	f000 fce0 	bl	8018ec4 <dhcp_create_msg>
 8018504:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8018506:	69bb      	ldr	r3, [r7, #24]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d030      	beq.n	801856e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801850c:	69bb      	ldr	r3, [r7, #24]
 801850e:	685b      	ldr	r3, [r3, #4]
 8018510:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018512:	89f8      	ldrh	r0, [r7, #14]
 8018514:	697b      	ldr	r3, [r7, #20]
 8018516:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801851a:	2304      	movs	r3, #4
 801851c:	2236      	movs	r2, #54	; 0x36
 801851e:	f000 f85f 	bl	80185e0 <dhcp_option>
 8018522:	4603      	mov	r3, r0
 8018524:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8018526:	89fc      	ldrh	r4, [r7, #14]
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801852e:	693b      	ldr	r3, [r7, #16]
 8018530:	4618      	mov	r0, r3
 8018532:	f7f7 f93a 	bl	800f7aa <lwip_htonl>
 8018536:	4603      	mov	r3, r0
 8018538:	461a      	mov	r2, r3
 801853a:	4629      	mov	r1, r5
 801853c:	4620      	mov	r0, r4
 801853e:	f000 f8db 	bl	80186f8 <dhcp_option_long>
 8018542:	4603      	mov	r3, r0
 8018544:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018546:	89f8      	ldrh	r0, [r7, #14]
 8018548:	697b      	ldr	r3, [r7, #20]
 801854a:	33f0      	adds	r3, #240	; 0xf0
 801854c:	69ba      	ldr	r2, [r7, #24]
 801854e:	4619      	mov	r1, r3
 8018550:	f000 fd8e 	bl	8019070 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018554:	4b13      	ldr	r3, [pc, #76]	; (80185a4 <dhcp_release_and_stop+0x12c>)
 8018556:	6818      	ldr	r0, [r3, #0]
 8018558:	f107 0210 	add.w	r2, r7, #16
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	9300      	str	r3, [sp, #0]
 8018560:	2343      	movs	r3, #67	; 0x43
 8018562:	69b9      	ldr	r1, [r7, #24]
 8018564:	f7fe fc4c 	bl	8016e00 <udp_sendto_if>
      pbuf_free(p_out);
 8018568:	69b8      	ldr	r0, [r7, #24]
 801856a:	f7f8 fd07 	bl	8010f7c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801856e:	4b0e      	ldr	r3, [pc, #56]	; (80185a8 <dhcp_release_and_stop+0x130>)
 8018570:	4a0d      	ldr	r2, [pc, #52]	; (80185a8 <dhcp_release_and_stop+0x130>)
 8018572:	490d      	ldr	r1, [pc, #52]	; (80185a8 <dhcp_release_and_stop+0x130>)
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	f7f7 fff3 	bl	8010560 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801857a:	2100      	movs	r1, #0
 801857c:	69f8      	ldr	r0, [r7, #28]
 801857e:	f000 f815 	bl	80185ac <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8018582:	69fb      	ldr	r3, [r7, #28]
 8018584:	791b      	ldrb	r3, [r3, #4]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d008      	beq.n	801859c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801858a:	f7fe ff85 	bl	8017498 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801858e:	69fb      	ldr	r3, [r7, #28]
 8018590:	2200      	movs	r2, #0
 8018592:	711a      	strb	r2, [r3, #4]
 8018594:	e002      	b.n	801859c <dhcp_release_and_stop+0x124>
    return;
 8018596:	bf00      	nop
 8018598:	e000      	b.n	801859c <dhcp_release_and_stop+0x124>
    return;
 801859a:	bf00      	nop
  }
}
 801859c:	3720      	adds	r7, #32
 801859e:	46bd      	mov	sp, r7
 80185a0:	bdb0      	pop	{r4, r5, r7, pc}
 80185a2:	bf00      	nop
 80185a4:	2000c660 	.word	0x2000c660
 80185a8:	0802182c 	.word	0x0802182c

080185ac <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80185ac:	b480      	push	{r7}
 80185ae:	b083      	sub	sp, #12
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
 80185b4:	460b      	mov	r3, r1
 80185b6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	795b      	ldrb	r3, [r3, #5]
 80185bc:	78fa      	ldrb	r2, [r7, #3]
 80185be:	429a      	cmp	r2, r3
 80185c0:	d008      	beq.n	80185d4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	78fa      	ldrb	r2, [r7, #3]
 80185c6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	2200      	movs	r2, #0
 80185cc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	2200      	movs	r2, #0
 80185d2:	811a      	strh	r2, [r3, #8]
  }
}
 80185d4:	bf00      	nop
 80185d6:	370c      	adds	r7, #12
 80185d8:	46bd      	mov	sp, r7
 80185da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185de:	4770      	bx	lr

080185e0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b082      	sub	sp, #8
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6039      	str	r1, [r7, #0]
 80185e8:	4611      	mov	r1, r2
 80185ea:	461a      	mov	r2, r3
 80185ec:	4603      	mov	r3, r0
 80185ee:	80fb      	strh	r3, [r7, #6]
 80185f0:	460b      	mov	r3, r1
 80185f2:	717b      	strb	r3, [r7, #5]
 80185f4:	4613      	mov	r3, r2
 80185f6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80185f8:	88fa      	ldrh	r2, [r7, #6]
 80185fa:	793b      	ldrb	r3, [r7, #4]
 80185fc:	4413      	add	r3, r2
 80185fe:	3302      	adds	r3, #2
 8018600:	2b44      	cmp	r3, #68	; 0x44
 8018602:	d906      	bls.n	8018612 <dhcp_option+0x32>
 8018604:	4b0d      	ldr	r3, [pc, #52]	; (801863c <dhcp_option+0x5c>)
 8018606:	f240 529a 	movw	r2, #1434	; 0x59a
 801860a:	490d      	ldr	r1, [pc, #52]	; (8018640 <dhcp_option+0x60>)
 801860c:	480d      	ldr	r0, [pc, #52]	; (8018644 <dhcp_option+0x64>)
 801860e:	f003 ff81 	bl	801c514 <iprintf>
  options[options_out_len++] = option_type;
 8018612:	88fb      	ldrh	r3, [r7, #6]
 8018614:	1c5a      	adds	r2, r3, #1
 8018616:	80fa      	strh	r2, [r7, #6]
 8018618:	461a      	mov	r2, r3
 801861a:	683b      	ldr	r3, [r7, #0]
 801861c:	4413      	add	r3, r2
 801861e:	797a      	ldrb	r2, [r7, #5]
 8018620:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8018622:	88fb      	ldrh	r3, [r7, #6]
 8018624:	1c5a      	adds	r2, r3, #1
 8018626:	80fa      	strh	r2, [r7, #6]
 8018628:	461a      	mov	r2, r3
 801862a:	683b      	ldr	r3, [r7, #0]
 801862c:	4413      	add	r3, r2
 801862e:	793a      	ldrb	r2, [r7, #4]
 8018630:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8018632:	88fb      	ldrh	r3, [r7, #6]
}
 8018634:	4618      	mov	r0, r3
 8018636:	3708      	adds	r7, #8
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	08020b28 	.word	0x08020b28
 8018640:	08020cbc 	.word	0x08020cbc
 8018644:	08020b88 	.word	0x08020b88

08018648 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b082      	sub	sp, #8
 801864c:	af00      	add	r7, sp, #0
 801864e:	4603      	mov	r3, r0
 8018650:	6039      	str	r1, [r7, #0]
 8018652:	80fb      	strh	r3, [r7, #6]
 8018654:	4613      	mov	r3, r2
 8018656:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8018658:	88fb      	ldrh	r3, [r7, #6]
 801865a:	2b43      	cmp	r3, #67	; 0x43
 801865c:	d906      	bls.n	801866c <dhcp_option_byte+0x24>
 801865e:	4b0a      	ldr	r3, [pc, #40]	; (8018688 <dhcp_option_byte+0x40>)
 8018660:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8018664:	4909      	ldr	r1, [pc, #36]	; (801868c <dhcp_option_byte+0x44>)
 8018666:	480a      	ldr	r0, [pc, #40]	; (8018690 <dhcp_option_byte+0x48>)
 8018668:	f003 ff54 	bl	801c514 <iprintf>
  options[options_out_len++] = value;
 801866c:	88fb      	ldrh	r3, [r7, #6]
 801866e:	1c5a      	adds	r2, r3, #1
 8018670:	80fa      	strh	r2, [r7, #6]
 8018672:	461a      	mov	r2, r3
 8018674:	683b      	ldr	r3, [r7, #0]
 8018676:	4413      	add	r3, r2
 8018678:	797a      	ldrb	r2, [r7, #5]
 801867a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801867c:	88fb      	ldrh	r3, [r7, #6]
}
 801867e:	4618      	mov	r0, r3
 8018680:	3708      	adds	r7, #8
 8018682:	46bd      	mov	sp, r7
 8018684:	bd80      	pop	{r7, pc}
 8018686:	bf00      	nop
 8018688:	08020b28 	.word	0x08020b28
 801868c:	08020d00 	.word	0x08020d00
 8018690:	08020b88 	.word	0x08020b88

08018694 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b082      	sub	sp, #8
 8018698:	af00      	add	r7, sp, #0
 801869a:	4603      	mov	r3, r0
 801869c:	6039      	str	r1, [r7, #0]
 801869e:	80fb      	strh	r3, [r7, #6]
 80186a0:	4613      	mov	r3, r2
 80186a2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80186a4:	88fb      	ldrh	r3, [r7, #6]
 80186a6:	3302      	adds	r3, #2
 80186a8:	2b44      	cmp	r3, #68	; 0x44
 80186aa:	d906      	bls.n	80186ba <dhcp_option_short+0x26>
 80186ac:	4b0f      	ldr	r3, [pc, #60]	; (80186ec <dhcp_option_short+0x58>)
 80186ae:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80186b2:	490f      	ldr	r1, [pc, #60]	; (80186f0 <dhcp_option_short+0x5c>)
 80186b4:	480f      	ldr	r0, [pc, #60]	; (80186f4 <dhcp_option_short+0x60>)
 80186b6:	f003 ff2d 	bl	801c514 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80186ba:	88bb      	ldrh	r3, [r7, #4]
 80186bc:	0a1b      	lsrs	r3, r3, #8
 80186be:	b29a      	uxth	r2, r3
 80186c0:	88fb      	ldrh	r3, [r7, #6]
 80186c2:	1c59      	adds	r1, r3, #1
 80186c4:	80f9      	strh	r1, [r7, #6]
 80186c6:	4619      	mov	r1, r3
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	440b      	add	r3, r1
 80186cc:	b2d2      	uxtb	r2, r2
 80186ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80186d0:	88fb      	ldrh	r3, [r7, #6]
 80186d2:	1c5a      	adds	r2, r3, #1
 80186d4:	80fa      	strh	r2, [r7, #6]
 80186d6:	461a      	mov	r2, r3
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	4413      	add	r3, r2
 80186dc:	88ba      	ldrh	r2, [r7, #4]
 80186de:	b2d2      	uxtb	r2, r2
 80186e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80186e2:	88fb      	ldrh	r3, [r7, #6]
}
 80186e4:	4618      	mov	r0, r3
 80186e6:	3708      	adds	r7, #8
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}
 80186ec:	08020b28 	.word	0x08020b28
 80186f0:	08020d38 	.word	0x08020d38
 80186f4:	08020b88 	.word	0x08020b88

080186f8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b084      	sub	sp, #16
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	4603      	mov	r3, r0
 8018700:	60b9      	str	r1, [r7, #8]
 8018702:	607a      	str	r2, [r7, #4]
 8018704:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8018706:	89fb      	ldrh	r3, [r7, #14]
 8018708:	3304      	adds	r3, #4
 801870a:	2b44      	cmp	r3, #68	; 0x44
 801870c:	d906      	bls.n	801871c <dhcp_option_long+0x24>
 801870e:	4b19      	ldr	r3, [pc, #100]	; (8018774 <dhcp_option_long+0x7c>)
 8018710:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8018714:	4918      	ldr	r1, [pc, #96]	; (8018778 <dhcp_option_long+0x80>)
 8018716:	4819      	ldr	r0, [pc, #100]	; (801877c <dhcp_option_long+0x84>)
 8018718:	f003 fefc 	bl	801c514 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	0e1a      	lsrs	r2, r3, #24
 8018720:	89fb      	ldrh	r3, [r7, #14]
 8018722:	1c59      	adds	r1, r3, #1
 8018724:	81f9      	strh	r1, [r7, #14]
 8018726:	4619      	mov	r1, r3
 8018728:	68bb      	ldr	r3, [r7, #8]
 801872a:	440b      	add	r3, r1
 801872c:	b2d2      	uxtb	r2, r2
 801872e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	0c1a      	lsrs	r2, r3, #16
 8018734:	89fb      	ldrh	r3, [r7, #14]
 8018736:	1c59      	adds	r1, r3, #1
 8018738:	81f9      	strh	r1, [r7, #14]
 801873a:	4619      	mov	r1, r3
 801873c:	68bb      	ldr	r3, [r7, #8]
 801873e:	440b      	add	r3, r1
 8018740:	b2d2      	uxtb	r2, r2
 8018742:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	0a1a      	lsrs	r2, r3, #8
 8018748:	89fb      	ldrh	r3, [r7, #14]
 801874a:	1c59      	adds	r1, r3, #1
 801874c:	81f9      	strh	r1, [r7, #14]
 801874e:	4619      	mov	r1, r3
 8018750:	68bb      	ldr	r3, [r7, #8]
 8018752:	440b      	add	r3, r1
 8018754:	b2d2      	uxtb	r2, r2
 8018756:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8018758:	89fb      	ldrh	r3, [r7, #14]
 801875a:	1c5a      	adds	r2, r3, #1
 801875c:	81fa      	strh	r2, [r7, #14]
 801875e:	461a      	mov	r2, r3
 8018760:	68bb      	ldr	r3, [r7, #8]
 8018762:	4413      	add	r3, r2
 8018764:	687a      	ldr	r2, [r7, #4]
 8018766:	b2d2      	uxtb	r2, r2
 8018768:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801876a:	89fb      	ldrh	r3, [r7, #14]
}
 801876c:	4618      	mov	r0, r3
 801876e:	3710      	adds	r7, #16
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}
 8018774:	08020b28 	.word	0x08020b28
 8018778:	08020d74 	.word	0x08020d74
 801877c:	08020b88 	.word	0x08020b88

08018780 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b090      	sub	sp, #64	; 0x40
 8018784:	af00      	add	r7, sp, #0
 8018786:	6078      	str	r0, [r7, #4]
 8018788:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801878a:	2300      	movs	r3, #0
 801878c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801878e:	2300      	movs	r3, #0
 8018790:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8018792:	2208      	movs	r2, #8
 8018794:	2100      	movs	r1, #0
 8018796:	48b5      	ldr	r0, [pc, #724]	; (8018a6c <dhcp_parse_reply+0x2ec>)
 8018798:	f004 f84c 	bl	801c834 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	895b      	ldrh	r3, [r3, #10]
 80187a0:	2b2b      	cmp	r3, #43	; 0x2b
 80187a2:	d802      	bhi.n	80187aa <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80187a4:	f06f 0301 	mvn.w	r3, #1
 80187a8:	e2a7      	b.n	8018cfa <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	685b      	ldr	r3, [r3, #4]
 80187ae:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80187b0:	23f0      	movs	r3, #240	; 0xf0
 80187b2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	891b      	ldrh	r3, [r3, #8]
 80187b8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80187be:	e00c      	b.n	80187da <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80187c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c2:	895b      	ldrh	r3, [r3, #10]
 80187c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80187c6:	1ad3      	subs	r3, r2, r3
 80187c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80187ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187cc:	895b      	ldrh	r3, [r3, #10]
 80187ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80187d0:	1ad3      	subs	r3, r2, r3
 80187d2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80187d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80187da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d004      	beq.n	80187ea <dhcp_parse_reply+0x6a>
 80187e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187e2:	895b      	ldrh	r3, [r3, #10]
 80187e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80187e6:	429a      	cmp	r2, r3
 80187e8:	d2ea      	bcs.n	80187c0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80187ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d102      	bne.n	80187f6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80187f0:	f06f 0301 	mvn.w	r3, #1
 80187f4:	e281      	b.n	8018cfa <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80187f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80187f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80187fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80187fc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80187fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018800:	685b      	ldr	r3, [r3, #4]
 8018802:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018804:	e239      	b.n	8018c7a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8018806:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018808:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801880a:	4413      	add	r3, r2
 801880c:	781b      	ldrb	r3, [r3, #0]
 801880e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8018810:	2300      	movs	r3, #0
 8018812:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8018816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801881a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801881c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801881e:	3302      	adds	r3, #2
 8018820:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8018822:	8bfa      	ldrh	r2, [r7, #30]
 8018824:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018826:	429a      	cmp	r2, r3
 8018828:	d202      	bcs.n	8018830 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801882a:	f06f 0301 	mvn.w	r3, #1
 801882e:	e264      	b.n	8018cfa <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8018830:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018832:	3301      	adds	r3, #1
 8018834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018836:	8952      	ldrh	r2, [r2, #10]
 8018838:	4293      	cmp	r3, r2
 801883a:	da07      	bge.n	801884c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801883c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801883e:	3301      	adds	r3, #1
 8018840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018842:	4413      	add	r3, r2
 8018844:	781b      	ldrb	r3, [r3, #0]
 8018846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801884a:	e00b      	b.n	8018864 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d004      	beq.n	801885e <dhcp_parse_reply+0xde>
 8018854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	685b      	ldr	r3, [r3, #4]
 801885a:	781b      	ldrb	r3, [r3, #0]
 801885c:	e000      	b.n	8018860 <dhcp_parse_reply+0xe0>
 801885e:	2300      	movs	r3, #0
 8018860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8018864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801886c:	7dfb      	ldrb	r3, [r7, #23]
 801886e:	2b3b      	cmp	r3, #59	; 0x3b
 8018870:	f200 812c 	bhi.w	8018acc <dhcp_parse_reply+0x34c>
 8018874:	a201      	add	r2, pc, #4	; (adr r2, 801887c <dhcp_parse_reply+0xfc>)
 8018876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801887a:	bf00      	nop
 801887c:	0801896d 	.word	0x0801896d
 8018880:	0801897d 	.word	0x0801897d
 8018884:	08018acd 	.word	0x08018acd
 8018888:	0801899f 	.word	0x0801899f
 801888c:	08018acd 	.word	0x08018acd
 8018890:	08018acd 	.word	0x08018acd
 8018894:	08018acd 	.word	0x08018acd
 8018898:	08018acd 	.word	0x08018acd
 801889c:	08018acd 	.word	0x08018acd
 80188a0:	08018acd 	.word	0x08018acd
 80188a4:	08018acd 	.word	0x08018acd
 80188a8:	08018acd 	.word	0x08018acd
 80188ac:	08018acd 	.word	0x08018acd
 80188b0:	08018acd 	.word	0x08018acd
 80188b4:	08018acd 	.word	0x08018acd
 80188b8:	08018acd 	.word	0x08018acd
 80188bc:	08018acd 	.word	0x08018acd
 80188c0:	08018acd 	.word	0x08018acd
 80188c4:	08018acd 	.word	0x08018acd
 80188c8:	08018acd 	.word	0x08018acd
 80188cc:	08018acd 	.word	0x08018acd
 80188d0:	08018acd 	.word	0x08018acd
 80188d4:	08018acd 	.word	0x08018acd
 80188d8:	08018acd 	.word	0x08018acd
 80188dc:	08018acd 	.word	0x08018acd
 80188e0:	08018acd 	.word	0x08018acd
 80188e4:	08018acd 	.word	0x08018acd
 80188e8:	08018acd 	.word	0x08018acd
 80188ec:	08018acd 	.word	0x08018acd
 80188f0:	08018acd 	.word	0x08018acd
 80188f4:	08018acd 	.word	0x08018acd
 80188f8:	08018acd 	.word	0x08018acd
 80188fc:	08018acd 	.word	0x08018acd
 8018900:	08018acd 	.word	0x08018acd
 8018904:	08018acd 	.word	0x08018acd
 8018908:	08018acd 	.word	0x08018acd
 801890c:	08018acd 	.word	0x08018acd
 8018910:	08018acd 	.word	0x08018acd
 8018914:	08018acd 	.word	0x08018acd
 8018918:	08018acd 	.word	0x08018acd
 801891c:	08018acd 	.word	0x08018acd
 8018920:	08018acd 	.word	0x08018acd
 8018924:	08018acd 	.word	0x08018acd
 8018928:	08018acd 	.word	0x08018acd
 801892c:	08018acd 	.word	0x08018acd
 8018930:	08018acd 	.word	0x08018acd
 8018934:	08018acd 	.word	0x08018acd
 8018938:	08018acd 	.word	0x08018acd
 801893c:	08018acd 	.word	0x08018acd
 8018940:	08018acd 	.word	0x08018acd
 8018944:	08018acd 	.word	0x08018acd
 8018948:	080189cb 	.word	0x080189cb
 801894c:	080189ed 	.word	0x080189ed
 8018950:	08018a29 	.word	0x08018a29
 8018954:	08018a4b 	.word	0x08018a4b
 8018958:	08018acd 	.word	0x08018acd
 801895c:	08018acd 	.word	0x08018acd
 8018960:	08018acd 	.word	0x08018acd
 8018964:	08018a89 	.word	0x08018a89
 8018968:	08018aab 	.word	0x08018aab
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801896c:	2300      	movs	r3, #0
 801896e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018976:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801897a:	e0ab      	b.n	8018ad4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801897c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018980:	2b04      	cmp	r3, #4
 8018982:	d009      	beq.n	8018998 <dhcp_parse_reply+0x218>
 8018984:	4b3a      	ldr	r3, [pc, #232]	; (8018a70 <dhcp_parse_reply+0x2f0>)
 8018986:	f240 622e 	movw	r2, #1582	; 0x62e
 801898a:	493a      	ldr	r1, [pc, #232]	; (8018a74 <dhcp_parse_reply+0x2f4>)
 801898c:	483a      	ldr	r0, [pc, #232]	; (8018a78 <dhcp_parse_reply+0x2f8>)
 801898e:	f003 fdc1 	bl	801c514 <iprintf>
 8018992:	f06f 0305 	mvn.w	r3, #5
 8018996:	e1b0      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8018998:	2306      	movs	r3, #6
 801899a:	623b      	str	r3, [r7, #32]
        break;
 801899c:	e09a      	b.n	8018ad4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801899e:	2304      	movs	r3, #4
 80189a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80189a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80189a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189ac:	429a      	cmp	r2, r3
 80189ae:	d209      	bcs.n	80189c4 <dhcp_parse_reply+0x244>
 80189b0:	4b2f      	ldr	r3, [pc, #188]	; (8018a70 <dhcp_parse_reply+0x2f0>)
 80189b2:	f240 6233 	movw	r2, #1587	; 0x633
 80189b6:	4931      	ldr	r1, [pc, #196]	; (8018a7c <dhcp_parse_reply+0x2fc>)
 80189b8:	482f      	ldr	r0, [pc, #188]	; (8018a78 <dhcp_parse_reply+0x2f8>)
 80189ba:	f003 fdab 	bl	801c514 <iprintf>
 80189be:	f06f 0305 	mvn.w	r3, #5
 80189c2:	e19a      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80189c4:	2307      	movs	r3, #7
 80189c6:	623b      	str	r3, [r7, #32]
        break;
 80189c8:	e084      	b.n	8018ad4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80189ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189ce:	2b04      	cmp	r3, #4
 80189d0:	d009      	beq.n	80189e6 <dhcp_parse_reply+0x266>
 80189d2:	4b27      	ldr	r3, [pc, #156]	; (8018a70 <dhcp_parse_reply+0x2f0>)
 80189d4:	f240 6241 	movw	r2, #1601	; 0x641
 80189d8:	4926      	ldr	r1, [pc, #152]	; (8018a74 <dhcp_parse_reply+0x2f4>)
 80189da:	4827      	ldr	r0, [pc, #156]	; (8018a78 <dhcp_parse_reply+0x2f8>)
 80189dc:	f003 fd9a 	bl	801c514 <iprintf>
 80189e0:	f06f 0305 	mvn.w	r3, #5
 80189e4:	e189      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80189e6:	2303      	movs	r3, #3
 80189e8:	623b      	str	r3, [r7, #32]
        break;
 80189ea:	e073      	b.n	8018ad4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80189ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189f0:	2b01      	cmp	r3, #1
 80189f2:	d009      	beq.n	8018a08 <dhcp_parse_reply+0x288>
 80189f4:	4b1e      	ldr	r3, [pc, #120]	; (8018a70 <dhcp_parse_reply+0x2f0>)
 80189f6:	f240 624f 	movw	r2, #1615	; 0x64f
 80189fa:	4921      	ldr	r1, [pc, #132]	; (8018a80 <dhcp_parse_reply+0x300>)
 80189fc:	481e      	ldr	r0, [pc, #120]	; (8018a78 <dhcp_parse_reply+0x2f8>)
 80189fe:	f003 fd89 	bl	801c514 <iprintf>
 8018a02:	f06f 0305 	mvn.w	r3, #5
 8018a06:	e178      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8018a08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018a0a:	2bf0      	cmp	r3, #240	; 0xf0
 8018a0c:	d009      	beq.n	8018a22 <dhcp_parse_reply+0x2a2>
 8018a0e:	4b18      	ldr	r3, [pc, #96]	; (8018a70 <dhcp_parse_reply+0x2f0>)
 8018a10:	f240 6251 	movw	r2, #1617	; 0x651
 8018a14:	491b      	ldr	r1, [pc, #108]	; (8018a84 <dhcp_parse_reply+0x304>)
 8018a16:	4818      	ldr	r0, [pc, #96]	; (8018a78 <dhcp_parse_reply+0x2f8>)
 8018a18:	f003 fd7c 	bl	801c514 <iprintf>
 8018a1c:	f06f 0305 	mvn.w	r3, #5
 8018a20:	e16b      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8018a22:	2300      	movs	r3, #0
 8018a24:	623b      	str	r3, [r7, #32]
        break;
 8018a26:	e055      	b.n	8018ad4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8018a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a2c:	2b01      	cmp	r3, #1
 8018a2e:	d009      	beq.n	8018a44 <dhcp_parse_reply+0x2c4>
 8018a30:	4b0f      	ldr	r3, [pc, #60]	; (8018a70 <dhcp_parse_reply+0x2f0>)
 8018a32:	f240 6255 	movw	r2, #1621	; 0x655
 8018a36:	4912      	ldr	r1, [pc, #72]	; (8018a80 <dhcp_parse_reply+0x300>)
 8018a38:	480f      	ldr	r0, [pc, #60]	; (8018a78 <dhcp_parse_reply+0x2f8>)
 8018a3a:	f003 fd6b 	bl	801c514 <iprintf>
 8018a3e:	f06f 0305 	mvn.w	r3, #5
 8018a42:	e15a      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8018a44:	2301      	movs	r3, #1
 8018a46:	623b      	str	r3, [r7, #32]
        break;
 8018a48:	e044      	b.n	8018ad4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a4e:	2b04      	cmp	r3, #4
 8018a50:	d009      	beq.n	8018a66 <dhcp_parse_reply+0x2e6>
 8018a52:	4b07      	ldr	r3, [pc, #28]	; (8018a70 <dhcp_parse_reply+0x2f0>)
 8018a54:	f240 6259 	movw	r2, #1625	; 0x659
 8018a58:	4906      	ldr	r1, [pc, #24]	; (8018a74 <dhcp_parse_reply+0x2f4>)
 8018a5a:	4807      	ldr	r0, [pc, #28]	; (8018a78 <dhcp_parse_reply+0x2f8>)
 8018a5c:	f003 fd5a 	bl	801c514 <iprintf>
 8018a60:	f06f 0305 	mvn.w	r3, #5
 8018a64:	e149      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8018a66:	2302      	movs	r3, #2
 8018a68:	623b      	str	r3, [r7, #32]
        break;
 8018a6a:	e033      	b.n	8018ad4 <dhcp_parse_reply+0x354>
 8018a6c:	2000c658 	.word	0x2000c658
 8018a70:	08020b28 	.word	0x08020b28
 8018a74:	08020db0 	.word	0x08020db0
 8018a78:	08020b88 	.word	0x08020b88
 8018a7c:	08020dbc 	.word	0x08020dbc
 8018a80:	08020dd0 	.word	0x08020dd0
 8018a84:	08020ddc 	.word	0x08020ddc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a8c:	2b04      	cmp	r3, #4
 8018a8e:	d009      	beq.n	8018aa4 <dhcp_parse_reply+0x324>
 8018a90:	4b9c      	ldr	r3, [pc, #624]	; (8018d04 <dhcp_parse_reply+0x584>)
 8018a92:	f240 625d 	movw	r2, #1629	; 0x65d
 8018a96:	499c      	ldr	r1, [pc, #624]	; (8018d08 <dhcp_parse_reply+0x588>)
 8018a98:	489c      	ldr	r0, [pc, #624]	; (8018d0c <dhcp_parse_reply+0x58c>)
 8018a9a:	f003 fd3b 	bl	801c514 <iprintf>
 8018a9e:	f06f 0305 	mvn.w	r3, #5
 8018aa2:	e12a      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8018aa4:	2304      	movs	r3, #4
 8018aa6:	623b      	str	r3, [r7, #32]
        break;
 8018aa8:	e014      	b.n	8018ad4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018aae:	2b04      	cmp	r3, #4
 8018ab0:	d009      	beq.n	8018ac6 <dhcp_parse_reply+0x346>
 8018ab2:	4b94      	ldr	r3, [pc, #592]	; (8018d04 <dhcp_parse_reply+0x584>)
 8018ab4:	f240 6261 	movw	r2, #1633	; 0x661
 8018ab8:	4993      	ldr	r1, [pc, #588]	; (8018d08 <dhcp_parse_reply+0x588>)
 8018aba:	4894      	ldr	r0, [pc, #592]	; (8018d0c <dhcp_parse_reply+0x58c>)
 8018abc:	f003 fd2a 	bl	801c514 <iprintf>
 8018ac0:	f06f 0305 	mvn.w	r3, #5
 8018ac4:	e119      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8018ac6:	2305      	movs	r3, #5
 8018ac8:	623b      	str	r3, [r7, #32]
        break;
 8018aca:	e003      	b.n	8018ad4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8018acc:	2300      	movs	r3, #0
 8018ace:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8018ad2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8018ad4:	7dfb      	ldrb	r3, [r7, #23]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d103      	bne.n	8018ae2 <dhcp_parse_reply+0x362>
      offset++;
 8018ada:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018adc:	3301      	adds	r3, #1
 8018ade:	877b      	strh	r3, [r7, #58]	; 0x3a
 8018ae0:	e0a1      	b.n	8018c26 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8018ae2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ae8:	4413      	add	r3, r2
 8018aea:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8018aee:	4293      	cmp	r3, r2
 8018af0:	dd02      	ble.n	8018af8 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8018af2:	f06f 0301 	mvn.w	r3, #1
 8018af6:	e100      	b.n	8018cfa <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8018af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018afc:	b29a      	uxth	r2, r3
 8018afe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018b00:	4413      	add	r3, r2
 8018b02:	b29b      	uxth	r3, r3
 8018b04:	3302      	adds	r3, #2
 8018b06:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8018b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	f000 808a 	beq.w	8018c26 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8018b12:	2300      	movs	r3, #0
 8018b14:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8018b16:	6a3b      	ldr	r3, [r7, #32]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	db02      	blt.n	8018b22 <dhcp_parse_reply+0x3a2>
 8018b1c:	6a3b      	ldr	r3, [r7, #32]
 8018b1e:	2b07      	cmp	r3, #7
 8018b20:	dd06      	ble.n	8018b30 <dhcp_parse_reply+0x3b0>
 8018b22:	4b78      	ldr	r3, [pc, #480]	; (8018d04 <dhcp_parse_reply+0x584>)
 8018b24:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8018b28:	4979      	ldr	r1, [pc, #484]	; (8018d10 <dhcp_parse_reply+0x590>)
 8018b2a:	4878      	ldr	r0, [pc, #480]	; (8018d0c <dhcp_parse_reply+0x58c>)
 8018b2c:	f003 fcf2 	bl	801c514 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8018b30:	4a78      	ldr	r2, [pc, #480]	; (8018d14 <dhcp_parse_reply+0x594>)
 8018b32:	6a3b      	ldr	r3, [r7, #32]
 8018b34:	4413      	add	r3, r2
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d174      	bne.n	8018c26 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8018b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b40:	2b04      	cmp	r3, #4
 8018b42:	bf28      	it	cs
 8018b44:	2304      	movcs	r3, #4
 8018b46:	b2db      	uxtb	r3, r3
 8018b48:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8018b4a:	8bfb      	ldrh	r3, [r7, #30]
 8018b4c:	8aba      	ldrh	r2, [r7, #20]
 8018b4e:	f107 0108 	add.w	r1, r7, #8
 8018b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b54:	f7f8 fc18 	bl	8011388 <pbuf_copy_partial>
 8018b58:	4603      	mov	r3, r0
 8018b5a:	461a      	mov	r2, r3
 8018b5c:	8abb      	ldrh	r3, [r7, #20]
 8018b5e:	4293      	cmp	r3, r2
 8018b60:	d002      	beq.n	8018b68 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8018b62:	f06f 0301 	mvn.w	r3, #1
 8018b66:	e0c8      	b.n	8018cfa <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8018b68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b6c:	2b04      	cmp	r3, #4
 8018b6e:	d933      	bls.n	8018bd8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8018b70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b74:	f003 0303 	and.w	r3, r3, #3
 8018b78:	b2db      	uxtb	r3, r3
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d009      	beq.n	8018b92 <dhcp_parse_reply+0x412>
 8018b7e:	4b61      	ldr	r3, [pc, #388]	; (8018d04 <dhcp_parse_reply+0x584>)
 8018b80:	f240 6281 	movw	r2, #1665	; 0x681
 8018b84:	4964      	ldr	r1, [pc, #400]	; (8018d18 <dhcp_parse_reply+0x598>)
 8018b86:	4861      	ldr	r0, [pc, #388]	; (8018d0c <dhcp_parse_reply+0x58c>)
 8018b88:	f003 fcc4 	bl	801c514 <iprintf>
 8018b8c:	f06f 0305 	mvn.w	r3, #5
 8018b90:	e0b3      	b.n	8018cfa <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8018b92:	4a60      	ldr	r2, [pc, #384]	; (8018d14 <dhcp_parse_reply+0x594>)
 8018b94:	6a3b      	ldr	r3, [r7, #32]
 8018b96:	4413      	add	r3, r2
 8018b98:	2201      	movs	r2, #1
 8018b9a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8018b9c:	68bb      	ldr	r3, [r7, #8]
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f7f6 fe03 	bl	800f7aa <lwip_htonl>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	495d      	ldr	r1, [pc, #372]	; (8018d1c <dhcp_parse_reply+0x59c>)
 8018ba8:	6a3b      	ldr	r3, [r7, #32]
 8018baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8018bae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018bb2:	3b04      	subs	r3, #4
 8018bb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8018bb8:	8bfb      	ldrh	r3, [r7, #30]
 8018bba:	3304      	adds	r3, #4
 8018bbc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8018bbe:	8a7a      	ldrh	r2, [r7, #18]
 8018bc0:	8bfb      	ldrh	r3, [r7, #30]
 8018bc2:	429a      	cmp	r2, r3
 8018bc4:	d202      	bcs.n	8018bcc <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8018bc6:	f06f 0301 	mvn.w	r3, #1
 8018bca:	e096      	b.n	8018cfa <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8018bcc:	8a7b      	ldrh	r3, [r7, #18]
 8018bce:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8018bd0:	6a3b      	ldr	r3, [r7, #32]
 8018bd2:	3301      	adds	r3, #1
 8018bd4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8018bd6:	e79e      	b.n	8018b16 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8018bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018bdc:	2b04      	cmp	r3, #4
 8018bde:	d106      	bne.n	8018bee <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7f6 fde1 	bl	800f7aa <lwip_htonl>
 8018be8:	4603      	mov	r3, r0
 8018bea:	60bb      	str	r3, [r7, #8]
 8018bec:	e011      	b.n	8018c12 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8018bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018bf2:	2b01      	cmp	r3, #1
 8018bf4:	d009      	beq.n	8018c0a <dhcp_parse_reply+0x48a>
 8018bf6:	4b43      	ldr	r3, [pc, #268]	; (8018d04 <dhcp_parse_reply+0x584>)
 8018bf8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8018bfc:	4948      	ldr	r1, [pc, #288]	; (8018d20 <dhcp_parse_reply+0x5a0>)
 8018bfe:	4843      	ldr	r0, [pc, #268]	; (8018d0c <dhcp_parse_reply+0x58c>)
 8018c00:	f003 fc88 	bl	801c514 <iprintf>
 8018c04:	f06f 0305 	mvn.w	r3, #5
 8018c08:	e077      	b.n	8018cfa <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8018c0a:	f107 0308 	add.w	r3, r7, #8
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8018c12:	4a40      	ldr	r2, [pc, #256]	; (8018d14 <dhcp_parse_reply+0x594>)
 8018c14:	6a3b      	ldr	r3, [r7, #32]
 8018c16:	4413      	add	r3, r2
 8018c18:	2201      	movs	r2, #1
 8018c1a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8018c1c:	68ba      	ldr	r2, [r7, #8]
 8018c1e:	493f      	ldr	r1, [pc, #252]	; (8018d1c <dhcp_parse_reply+0x59c>)
 8018c20:	6a3b      	ldr	r3, [r7, #32]
 8018c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8018c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c28:	895b      	ldrh	r3, [r3, #10]
 8018c2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018c2c:	429a      	cmp	r2, r3
 8018c2e:	d324      	bcc.n	8018c7a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8018c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c32:	895b      	ldrh	r3, [r3, #10]
 8018c34:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018c36:	1ad3      	subs	r3, r2, r3
 8018c38:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8018c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c3c:	895b      	ldrh	r3, [r3, #10]
 8018c3e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8018c40:	1ad3      	subs	r3, r2, r3
 8018c42:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8018c44:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018c46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018c48:	429a      	cmp	r2, r3
 8018c4a:	d213      	bcs.n	8018c74 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8018c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8018c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d109      	bne.n	8018c6c <dhcp_parse_reply+0x4ec>
 8018c58:	4b2a      	ldr	r3, [pc, #168]	; (8018d04 <dhcp_parse_reply+0x584>)
 8018c5a:	f240 629d 	movw	r2, #1693	; 0x69d
 8018c5e:	4931      	ldr	r1, [pc, #196]	; (8018d24 <dhcp_parse_reply+0x5a4>)
 8018c60:	482a      	ldr	r0, [pc, #168]	; (8018d0c <dhcp_parse_reply+0x58c>)
 8018c62:	f003 fc57 	bl	801c514 <iprintf>
 8018c66:	f06f 0305 	mvn.w	r3, #5
 8018c6a:	e046      	b.n	8018cfa <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8018c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c6e:	685b      	ldr	r3, [r3, #4]
 8018c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018c72:	e002      	b.n	8018c7a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8018c74:	f06f 0301 	mvn.w	r3, #1
 8018c78:	e03f      	b.n	8018cfa <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d00a      	beq.n	8018c96 <dhcp_parse_reply+0x516>
 8018c80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018c82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018c84:	429a      	cmp	r2, r3
 8018c86:	d206      	bcs.n	8018c96 <dhcp_parse_reply+0x516>
 8018c88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018c8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018c8c:	4413      	add	r3, r2
 8018c8e:	781b      	ldrb	r3, [r3, #0]
 8018c90:	2bff      	cmp	r3, #255	; 0xff
 8018c92:	f47f adb8 	bne.w	8018806 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8018c96:	4b1f      	ldr	r3, [pc, #124]	; (8018d14 <dhcp_parse_reply+0x594>)
 8018c98:	781b      	ldrb	r3, [r3, #0]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d018      	beq.n	8018cd0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018c9e:	4b1f      	ldr	r3, [pc, #124]	; (8018d1c <dhcp_parse_reply+0x59c>)
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018ca4:	4b1b      	ldr	r3, [pc, #108]	; (8018d14 <dhcp_parse_reply+0x594>)
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	2b01      	cmp	r3, #1
 8018cae:	d102      	bne.n	8018cb6 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8018cb0:	2301      	movs	r3, #1
 8018cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018cb4:	e00c      	b.n	8018cd0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	2b02      	cmp	r3, #2
 8018cba:	d102      	bne.n	8018cc2 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8018cbc:	2301      	movs	r3, #1
 8018cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8018cc0:	e006      	b.n	8018cd0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	2b03      	cmp	r3, #3
 8018cc6:	d103      	bne.n	8018cd0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8018cc8:	2301      	movs	r3, #1
 8018cca:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8018ccc:	2301      	movs	r3, #1
 8018cce:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8018cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d006      	beq.n	8018ce4 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8018cda:	236c      	movs	r3, #108	; 0x6c
 8018cdc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8018cde:	23ec      	movs	r3, #236	; 0xec
 8018ce0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8018ce2:	e56a      	b.n	80187ba <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8018ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d006      	beq.n	8018cf8 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8018cea:	2300      	movs	r3, #0
 8018cec:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8018cee:	232c      	movs	r3, #44	; 0x2c
 8018cf0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8018cf2:	236c      	movs	r3, #108	; 0x6c
 8018cf4:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8018cf6:	e560      	b.n	80187ba <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8018cf8:	2300      	movs	r3, #0
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3740      	adds	r7, #64	; 0x40
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}
 8018d02:	bf00      	nop
 8018d04:	08020b28 	.word	0x08020b28
 8018d08:	08020db0 	.word	0x08020db0
 8018d0c:	08020b88 	.word	0x08020b88
 8018d10:	08020df4 	.word	0x08020df4
 8018d14:	2000c658 	.word	0x2000c658
 8018d18:	08020e08 	.word	0x08020e08
 8018d1c:	2000c638 	.word	0x2000c638
 8018d20:	08020e20 	.word	0x08020e20
 8018d24:	08020e34 	.word	0x08020e34

08018d28 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b08a      	sub	sp, #40	; 0x28
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	60f8      	str	r0, [r7, #12]
 8018d30:	60b9      	str	r1, [r7, #8]
 8018d32:	607a      	str	r2, [r7, #4]
 8018d34:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8018d36:	4b60      	ldr	r3, [pc, #384]	; (8018eb8 <dhcp_recv+0x190>)
 8018d38:	685b      	ldr	r3, [r3, #4]
 8018d3a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018d3c:	6a3b      	ldr	r3, [r7, #32]
 8018d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d40:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	685b      	ldr	r3, [r3, #4]
 8018d46:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8018d48:	69fb      	ldr	r3, [r7, #28]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	f000 809d 	beq.w	8018e8a <dhcp_recv+0x162>
 8018d50:	69fb      	ldr	r3, [r7, #28]
 8018d52:	791b      	ldrb	r3, [r3, #4]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	f000 8098 	beq.w	8018e8a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	895b      	ldrh	r3, [r3, #10]
 8018d5e:	2b2b      	cmp	r3, #43	; 0x2b
 8018d60:	f240 8095 	bls.w	8018e8e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8018d64:	69bb      	ldr	r3, [r7, #24]
 8018d66:	781b      	ldrb	r3, [r3, #0]
 8018d68:	2b02      	cmp	r3, #2
 8018d6a:	f040 8092 	bne.w	8018e92 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018d6e:	2300      	movs	r3, #0
 8018d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d74:	e012      	b.n	8018d9c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8018d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d7a:	6a3a      	ldr	r2, [r7, #32]
 8018d7c:	4413      	add	r3, r2
 8018d7e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d86:	69b9      	ldr	r1, [r7, #24]
 8018d88:	440b      	add	r3, r1
 8018d8a:	7f1b      	ldrb	r3, [r3, #28]
 8018d8c:	429a      	cmp	r2, r3
 8018d8e:	f040 8082 	bne.w	8018e96 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d96:	3301      	adds	r3, #1
 8018d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d9c:	6a3b      	ldr	r3, [r7, #32]
 8018d9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018da2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018da6:	429a      	cmp	r2, r3
 8018da8:	d203      	bcs.n	8018db2 <dhcp_recv+0x8a>
 8018daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dae:	2b05      	cmp	r3, #5
 8018db0:	d9e1      	bls.n	8018d76 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8018db2:	69bb      	ldr	r3, [r7, #24]
 8018db4:	685b      	ldr	r3, [r3, #4]
 8018db6:	4618      	mov	r0, r3
 8018db8:	f7f6 fcf7 	bl	800f7aa <lwip_htonl>
 8018dbc:	4602      	mov	r2, r0
 8018dbe:	69fb      	ldr	r3, [r7, #28]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	429a      	cmp	r2, r3
 8018dc4:	d169      	bne.n	8018e9a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8018dc6:	69f9      	ldr	r1, [r7, #28]
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f7ff fcd9 	bl	8018780 <dhcp_parse_reply>
 8018dce:	4603      	mov	r3, r0
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d164      	bne.n	8018e9e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8018dd4:	4b39      	ldr	r3, [pc, #228]	; (8018ebc <dhcp_recv+0x194>)
 8018dd6:	785b      	ldrb	r3, [r3, #1]
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d062      	beq.n	8018ea2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	685b      	ldr	r3, [r3, #4]
 8018de0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8018de2:	4b37      	ldr	r3, [pc, #220]	; (8018ec0 <dhcp_recv+0x198>)
 8018de4:	685b      	ldr	r3, [r3, #4]
 8018de6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8018de8:	7cfb      	ldrb	r3, [r7, #19]
 8018dea:	2b05      	cmp	r3, #5
 8018dec:	d12a      	bne.n	8018e44 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018dee:	69fb      	ldr	r3, [r7, #28]
 8018df0:	795b      	ldrb	r3, [r3, #5]
 8018df2:	2b01      	cmp	r3, #1
 8018df4:	d112      	bne.n	8018e1c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8018df6:	6979      	ldr	r1, [r7, #20]
 8018df8:	6a38      	ldr	r0, [r7, #32]
 8018dfa:	f7fe fe17 	bl	8017a2c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8018dfe:	6a3b      	ldr	r3, [r7, #32]
 8018e00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018e04:	f003 0308 	and.w	r3, r3, #8
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d003      	beq.n	8018e14 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8018e0c:	6a38      	ldr	r0, [r7, #32]
 8018e0e:	f7fe fb87 	bl	8017520 <dhcp_check>
 8018e12:	e049      	b.n	8018ea8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8018e14:	6a38      	ldr	r0, [r7, #32]
 8018e16:	f7ff f867 	bl	8017ee8 <dhcp_bind>
 8018e1a:	e045      	b.n	8018ea8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018e1c:	69fb      	ldr	r3, [r7, #28]
 8018e1e:	795b      	ldrb	r3, [r3, #5]
 8018e20:	2b03      	cmp	r3, #3
 8018e22:	d007      	beq.n	8018e34 <dhcp_recv+0x10c>
 8018e24:	69fb      	ldr	r3, [r7, #28]
 8018e26:	795b      	ldrb	r3, [r3, #5]
 8018e28:	2b04      	cmp	r3, #4
 8018e2a:	d003      	beq.n	8018e34 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8018e2c:	69fb      	ldr	r3, [r7, #28]
 8018e2e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8018e30:	2b05      	cmp	r3, #5
 8018e32:	d139      	bne.n	8018ea8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8018e34:	6979      	ldr	r1, [r7, #20]
 8018e36:	6a38      	ldr	r0, [r7, #32]
 8018e38:	f7fe fdf8 	bl	8017a2c <dhcp_handle_ack>
      dhcp_bind(netif);
 8018e3c:	6a38      	ldr	r0, [r7, #32]
 8018e3e:	f7ff f853 	bl	8017ee8 <dhcp_bind>
 8018e42:	e031      	b.n	8018ea8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8018e44:	7cfb      	ldrb	r3, [r7, #19]
 8018e46:	2b06      	cmp	r3, #6
 8018e48:	d113      	bne.n	8018e72 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018e4a:	69fb      	ldr	r3, [r7, #28]
 8018e4c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8018e4e:	2b03      	cmp	r3, #3
 8018e50:	d00b      	beq.n	8018e6a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018e52:	69fb      	ldr	r3, [r7, #28]
 8018e54:	795b      	ldrb	r3, [r3, #5]
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	d007      	beq.n	8018e6a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018e5a:	69fb      	ldr	r3, [r7, #28]
 8018e5c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018e5e:	2b04      	cmp	r3, #4
 8018e60:	d003      	beq.n	8018e6a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018e62:	69fb      	ldr	r3, [r7, #28]
 8018e64:	795b      	ldrb	r3, [r3, #5]
 8018e66:	2b05      	cmp	r3, #5
 8018e68:	d103      	bne.n	8018e72 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8018e6a:	6a38      	ldr	r0, [r7, #32]
 8018e6c:	f7fe fb3e 	bl	80174ec <dhcp_handle_nak>
 8018e70:	e01a      	b.n	8018ea8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8018e72:	7cfb      	ldrb	r3, [r7, #19]
 8018e74:	2b02      	cmp	r3, #2
 8018e76:	d116      	bne.n	8018ea6 <dhcp_recv+0x17e>
 8018e78:	69fb      	ldr	r3, [r7, #28]
 8018e7a:	795b      	ldrb	r3, [r3, #5]
 8018e7c:	2b06      	cmp	r3, #6
 8018e7e:	d112      	bne.n	8018ea6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8018e80:	6979      	ldr	r1, [r7, #20]
 8018e82:	6a38      	ldr	r0, [r7, #32]
 8018e84:	f7fe fb80 	bl	8017588 <dhcp_handle_offer>
 8018e88:	e00e      	b.n	8018ea8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018e8a:	bf00      	nop
 8018e8c:	e00c      	b.n	8018ea8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018e8e:	bf00      	nop
 8018e90:	e00a      	b.n	8018ea8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018e92:	bf00      	nop
 8018e94:	e008      	b.n	8018ea8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8018e96:	bf00      	nop
 8018e98:	e006      	b.n	8018ea8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018e9a:	bf00      	nop
 8018e9c:	e004      	b.n	8018ea8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018e9e:	bf00      	nop
 8018ea0:	e002      	b.n	8018ea8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018ea2:	bf00      	nop
 8018ea4:	e000      	b.n	8018ea8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8018ea6:	bf00      	nop
  pbuf_free(p);
 8018ea8:	6878      	ldr	r0, [r7, #4]
 8018eaa:	f7f8 f867 	bl	8010f7c <pbuf_free>
}
 8018eae:	bf00      	nop
 8018eb0:	3728      	adds	r7, #40	; 0x28
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	bd80      	pop	{r7, pc}
 8018eb6:	bf00      	nop
 8018eb8:	20008e64 	.word	0x20008e64
 8018ebc:	2000c658 	.word	0x2000c658
 8018ec0:	2000c638 	.word	0x2000c638

08018ec4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b088      	sub	sp, #32
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	60f8      	str	r0, [r7, #12]
 8018ecc:	60b9      	str	r1, [r7, #8]
 8018ece:	603b      	str	r3, [r7, #0]
 8018ed0:	4613      	mov	r3, r2
 8018ed2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d108      	bne.n	8018eec <dhcp_create_msg+0x28>
 8018eda:	4b5f      	ldr	r3, [pc, #380]	; (8019058 <dhcp_create_msg+0x194>)
 8018edc:	f240 7269 	movw	r2, #1897	; 0x769
 8018ee0:	495e      	ldr	r1, [pc, #376]	; (801905c <dhcp_create_msg+0x198>)
 8018ee2:	485f      	ldr	r0, [pc, #380]	; (8019060 <dhcp_create_msg+0x19c>)
 8018ee4:	f003 fb16 	bl	801c514 <iprintf>
 8018ee8:	2300      	movs	r3, #0
 8018eea:	e0b1      	b.n	8019050 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018eec:	68bb      	ldr	r3, [r7, #8]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d108      	bne.n	8018f04 <dhcp_create_msg+0x40>
 8018ef2:	4b59      	ldr	r3, [pc, #356]	; (8019058 <dhcp_create_msg+0x194>)
 8018ef4:	f240 726a 	movw	r2, #1898	; 0x76a
 8018ef8:	495a      	ldr	r1, [pc, #360]	; (8019064 <dhcp_create_msg+0x1a0>)
 8018efa:	4859      	ldr	r0, [pc, #356]	; (8019060 <dhcp_create_msg+0x19c>)
 8018efc:	f003 fb0a 	bl	801c514 <iprintf>
 8018f00:	2300      	movs	r3, #0
 8018f02:	e0a5      	b.n	8019050 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018f04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f08:	f44f 719a 	mov.w	r1, #308	; 0x134
 8018f0c:	2036      	movs	r0, #54	; 0x36
 8018f0e:	f7f7 fd51 	bl	80109b4 <pbuf_alloc>
 8018f12:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8018f14:	69bb      	ldr	r3, [r7, #24]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	d101      	bne.n	8018f1e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	e098      	b.n	8019050 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8018f1e:	69bb      	ldr	r3, [r7, #24]
 8018f20:	895b      	ldrh	r3, [r3, #10]
 8018f22:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8018f26:	d206      	bcs.n	8018f36 <dhcp_create_msg+0x72>
 8018f28:	4b4b      	ldr	r3, [pc, #300]	; (8019058 <dhcp_create_msg+0x194>)
 8018f2a:	f240 7271 	movw	r2, #1905	; 0x771
 8018f2e:	494e      	ldr	r1, [pc, #312]	; (8019068 <dhcp_create_msg+0x1a4>)
 8018f30:	484b      	ldr	r0, [pc, #300]	; (8019060 <dhcp_create_msg+0x19c>)
 8018f32:	f003 faef 	bl	801c514 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8018f36:	79fb      	ldrb	r3, [r7, #7]
 8018f38:	2b03      	cmp	r3, #3
 8018f3a:	d103      	bne.n	8018f44 <dhcp_create_msg+0x80>
 8018f3c:	68bb      	ldr	r3, [r7, #8]
 8018f3e:	795b      	ldrb	r3, [r3, #5]
 8018f40:	2b03      	cmp	r3, #3
 8018f42:	d10d      	bne.n	8018f60 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8018f44:	68bb      	ldr	r3, [r7, #8]
 8018f46:	799b      	ldrb	r3, [r3, #6]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d105      	bne.n	8018f58 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8018f4c:	f003 f9d0 	bl	801c2f0 <rand>
 8018f50:	4603      	mov	r3, r0
 8018f52:	461a      	mov	r2, r3
 8018f54:	4b45      	ldr	r3, [pc, #276]	; (801906c <dhcp_create_msg+0x1a8>)
 8018f56:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8018f58:	4b44      	ldr	r3, [pc, #272]	; (801906c <dhcp_create_msg+0x1a8>)
 8018f5a:	681a      	ldr	r2, [r3, #0]
 8018f5c:	68bb      	ldr	r3, [r7, #8]
 8018f5e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8018f60:	69bb      	ldr	r3, [r7, #24]
 8018f62:	685b      	ldr	r3, [r3, #4]
 8018f64:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8018f66:	f44f 729a 	mov.w	r2, #308	; 0x134
 8018f6a:	2100      	movs	r1, #0
 8018f6c:	6978      	ldr	r0, [r7, #20]
 8018f6e:	f003 fc61 	bl	801c834 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8018f72:	697b      	ldr	r3, [r7, #20]
 8018f74:	2201      	movs	r2, #1
 8018f76:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	2201      	movs	r2, #1
 8018f7c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018f84:	697b      	ldr	r3, [r7, #20]
 8018f86:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018f88:	68bb      	ldr	r3, [r7, #8]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	4618      	mov	r0, r3
 8018f8e:	f7f6 fc0c 	bl	800f7aa <lwip_htonl>
 8018f92:	4602      	mov	r2, r0
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018f98:	79fb      	ldrb	r3, [r7, #7]
 8018f9a:	2b08      	cmp	r3, #8
 8018f9c:	d010      	beq.n	8018fc0 <dhcp_create_msg+0xfc>
 8018f9e:	79fb      	ldrb	r3, [r7, #7]
 8018fa0:	2b04      	cmp	r3, #4
 8018fa2:	d00d      	beq.n	8018fc0 <dhcp_create_msg+0xfc>
 8018fa4:	79fb      	ldrb	r3, [r7, #7]
 8018fa6:	2b07      	cmp	r3, #7
 8018fa8:	d00a      	beq.n	8018fc0 <dhcp_create_msg+0xfc>
 8018faa:	79fb      	ldrb	r3, [r7, #7]
 8018fac:	2b03      	cmp	r3, #3
 8018fae:	d10c      	bne.n	8018fca <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018fb0:	68bb      	ldr	r3, [r7, #8]
 8018fb2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018fb4:	2b05      	cmp	r3, #5
 8018fb6:	d003      	beq.n	8018fc0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	795b      	ldrb	r3, [r3, #5]
 8018fbc:	2b04      	cmp	r3, #4
 8018fbe:	d104      	bne.n	8018fca <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	3304      	adds	r3, #4
 8018fc4:	681a      	ldr	r2, [r3, #0]
 8018fc6:	697b      	ldr	r3, [r7, #20]
 8018fc8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018fca:	2300      	movs	r3, #0
 8018fcc:	83fb      	strh	r3, [r7, #30]
 8018fce:	e00c      	b.n	8018fea <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018fd0:	8bfa      	ldrh	r2, [r7, #30]
 8018fd2:	8bfb      	ldrh	r3, [r7, #30]
 8018fd4:	68f9      	ldr	r1, [r7, #12]
 8018fd6:	440a      	add	r2, r1
 8018fd8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8018fdc:	697a      	ldr	r2, [r7, #20]
 8018fde:	4413      	add	r3, r2
 8018fe0:	460a      	mov	r2, r1
 8018fe2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018fe4:	8bfb      	ldrh	r3, [r7, #30]
 8018fe6:	3301      	adds	r3, #1
 8018fe8:	83fb      	strh	r3, [r7, #30]
 8018fea:	8bfb      	ldrh	r3, [r7, #30]
 8018fec:	2b05      	cmp	r3, #5
 8018fee:	d9ef      	bls.n	8018fd0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018ff0:	697b      	ldr	r3, [r7, #20]
 8018ff2:	2200      	movs	r2, #0
 8018ff4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018ff8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8019002:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8019006:	2200      	movs	r2, #0
 8019008:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801900c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8019010:	2200      	movs	r2, #0
 8019012:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8019016:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801901a:	697b      	ldr	r3, [r7, #20]
 801901c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019020:	2301      	movs	r3, #1
 8019022:	2235      	movs	r2, #53	; 0x35
 8019024:	2000      	movs	r0, #0
 8019026:	f7ff fadb 	bl	80185e0 <dhcp_option>
 801902a:	4603      	mov	r3, r0
 801902c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801902e:	697b      	ldr	r3, [r7, #20]
 8019030:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019034:	79fa      	ldrb	r2, [r7, #7]
 8019036:	8a7b      	ldrh	r3, [r7, #18]
 8019038:	4618      	mov	r0, r3
 801903a:	f7ff fb05 	bl	8018648 <dhcp_option_byte>
 801903e:	4603      	mov	r3, r0
 8019040:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8019042:	683b      	ldr	r3, [r7, #0]
 8019044:	2b00      	cmp	r3, #0
 8019046:	d002      	beq.n	801904e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8019048:	683b      	ldr	r3, [r7, #0]
 801904a:	8a7a      	ldrh	r2, [r7, #18]
 801904c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801904e:	69bb      	ldr	r3, [r7, #24]
}
 8019050:	4618      	mov	r0, r3
 8019052:	3720      	adds	r7, #32
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}
 8019058:	08020b28 	.word	0x08020b28
 801905c:	08020e48 	.word	0x08020e48
 8019060:	08020b88 	.word	0x08020b88
 8019064:	08020e68 	.word	0x08020e68
 8019068:	08020e88 	.word	0x08020e88
 801906c:	2000c668 	.word	0x2000c668

08019070 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b084      	sub	sp, #16
 8019074:	af00      	add	r7, sp, #0
 8019076:	4603      	mov	r3, r0
 8019078:	60b9      	str	r1, [r7, #8]
 801907a:	607a      	str	r2, [r7, #4]
 801907c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801907e:	89fb      	ldrh	r3, [r7, #14]
 8019080:	1c5a      	adds	r2, r3, #1
 8019082:	81fa      	strh	r2, [r7, #14]
 8019084:	461a      	mov	r2, r3
 8019086:	68bb      	ldr	r3, [r7, #8]
 8019088:	4413      	add	r3, r2
 801908a:	22ff      	movs	r2, #255	; 0xff
 801908c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801908e:	e007      	b.n	80190a0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8019090:	89fb      	ldrh	r3, [r7, #14]
 8019092:	1c5a      	adds	r2, r3, #1
 8019094:	81fa      	strh	r2, [r7, #14]
 8019096:	461a      	mov	r2, r3
 8019098:	68bb      	ldr	r3, [r7, #8]
 801909a:	4413      	add	r3, r2
 801909c:	2200      	movs	r2, #0
 801909e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80190a0:	89fb      	ldrh	r3, [r7, #14]
 80190a2:	2b43      	cmp	r3, #67	; 0x43
 80190a4:	d904      	bls.n	80190b0 <dhcp_option_trailer+0x40>
 80190a6:	89fb      	ldrh	r3, [r7, #14]
 80190a8:	f003 0303 	and.w	r3, r3, #3
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d002      	beq.n	80190b6 <dhcp_option_trailer+0x46>
 80190b0:	89fb      	ldrh	r3, [r7, #14]
 80190b2:	2b43      	cmp	r3, #67	; 0x43
 80190b4:	d9ec      	bls.n	8019090 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80190b6:	89fb      	ldrh	r3, [r7, #14]
 80190b8:	33f0      	adds	r3, #240	; 0xf0
 80190ba:	b29b      	uxth	r3, r3
 80190bc:	4619      	mov	r1, r3
 80190be:	6878      	ldr	r0, [r7, #4]
 80190c0:	f7f7 fdd6 	bl	8010c70 <pbuf_realloc>
}
 80190c4:	bf00      	nop
 80190c6:	3710      	adds	r7, #16
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}

080190cc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80190cc:	b480      	push	{r7}
 80190ce:	b085      	sub	sp, #20
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d017      	beq.n	801910a <dhcp_supplied_address+0x3e>
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d013      	beq.n	801910a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190e6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	795b      	ldrb	r3, [r3, #5]
 80190ec:	2b0a      	cmp	r3, #10
 80190ee:	d007      	beq.n	8019100 <dhcp_supplied_address+0x34>
 80190f0:	68fb      	ldr	r3, [r7, #12]
 80190f2:	795b      	ldrb	r3, [r3, #5]
 80190f4:	2b05      	cmp	r3, #5
 80190f6:	d003      	beq.n	8019100 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80190fc:	2b04      	cmp	r3, #4
 80190fe:	d101      	bne.n	8019104 <dhcp_supplied_address+0x38>
 8019100:	2301      	movs	r3, #1
 8019102:	e000      	b.n	8019106 <dhcp_supplied_address+0x3a>
 8019104:	2300      	movs	r3, #0
 8019106:	b2db      	uxtb	r3, r3
 8019108:	e000      	b.n	801910c <dhcp_supplied_address+0x40>
  }
  return 0;
 801910a:	2300      	movs	r3, #0
}
 801910c:	4618      	mov	r0, r3
 801910e:	3714      	adds	r7, #20
 8019110:	46bd      	mov	sp, r7
 8019112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019116:	4770      	bx	lr

08019118 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b082      	sub	sp, #8
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019120:	4915      	ldr	r1, [pc, #84]	; (8019178 <etharp_free_entry+0x60>)
 8019122:	687a      	ldr	r2, [r7, #4]
 8019124:	4613      	mov	r3, r2
 8019126:	005b      	lsls	r3, r3, #1
 8019128:	4413      	add	r3, r2
 801912a:	00db      	lsls	r3, r3, #3
 801912c:	440b      	add	r3, r1
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d013      	beq.n	801915c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019134:	4910      	ldr	r1, [pc, #64]	; (8019178 <etharp_free_entry+0x60>)
 8019136:	687a      	ldr	r2, [r7, #4]
 8019138:	4613      	mov	r3, r2
 801913a:	005b      	lsls	r3, r3, #1
 801913c:	4413      	add	r3, r2
 801913e:	00db      	lsls	r3, r3, #3
 8019140:	440b      	add	r3, r1
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	4618      	mov	r0, r3
 8019146:	f7f7 ff19 	bl	8010f7c <pbuf_free>
    arp_table[i].q = NULL;
 801914a:	490b      	ldr	r1, [pc, #44]	; (8019178 <etharp_free_entry+0x60>)
 801914c:	687a      	ldr	r2, [r7, #4]
 801914e:	4613      	mov	r3, r2
 8019150:	005b      	lsls	r3, r3, #1
 8019152:	4413      	add	r3, r2
 8019154:	00db      	lsls	r3, r3, #3
 8019156:	440b      	add	r3, r1
 8019158:	2200      	movs	r2, #0
 801915a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801915c:	4906      	ldr	r1, [pc, #24]	; (8019178 <etharp_free_entry+0x60>)
 801915e:	687a      	ldr	r2, [r7, #4]
 8019160:	4613      	mov	r3, r2
 8019162:	005b      	lsls	r3, r3, #1
 8019164:	4413      	add	r3, r2
 8019166:	00db      	lsls	r3, r3, #3
 8019168:	440b      	add	r3, r1
 801916a:	3314      	adds	r3, #20
 801916c:	2200      	movs	r2, #0
 801916e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019170:	bf00      	nop
 8019172:	3708      	adds	r7, #8
 8019174:	46bd      	mov	sp, r7
 8019176:	bd80      	pop	{r7, pc}
 8019178:	2000c66c 	.word	0x2000c66c

0801917c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b082      	sub	sp, #8
 8019180:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019182:	2300      	movs	r3, #0
 8019184:	607b      	str	r3, [r7, #4]
 8019186:	e096      	b.n	80192b6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8019188:	494f      	ldr	r1, [pc, #316]	; (80192c8 <etharp_tmr+0x14c>)
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	4613      	mov	r3, r2
 801918e:	005b      	lsls	r3, r3, #1
 8019190:	4413      	add	r3, r2
 8019192:	00db      	lsls	r3, r3, #3
 8019194:	440b      	add	r3, r1
 8019196:	3314      	adds	r3, #20
 8019198:	781b      	ldrb	r3, [r3, #0]
 801919a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801919c:	78fb      	ldrb	r3, [r7, #3]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	f000 8086 	beq.w	80192b0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80191a4:	4948      	ldr	r1, [pc, #288]	; (80192c8 <etharp_tmr+0x14c>)
 80191a6:	687a      	ldr	r2, [r7, #4]
 80191a8:	4613      	mov	r3, r2
 80191aa:	005b      	lsls	r3, r3, #1
 80191ac:	4413      	add	r3, r2
 80191ae:	00db      	lsls	r3, r3, #3
 80191b0:	440b      	add	r3, r1
 80191b2:	3312      	adds	r3, #18
 80191b4:	881b      	ldrh	r3, [r3, #0]
 80191b6:	3301      	adds	r3, #1
 80191b8:	b298      	uxth	r0, r3
 80191ba:	4943      	ldr	r1, [pc, #268]	; (80192c8 <etharp_tmr+0x14c>)
 80191bc:	687a      	ldr	r2, [r7, #4]
 80191be:	4613      	mov	r3, r2
 80191c0:	005b      	lsls	r3, r3, #1
 80191c2:	4413      	add	r3, r2
 80191c4:	00db      	lsls	r3, r3, #3
 80191c6:	440b      	add	r3, r1
 80191c8:	3312      	adds	r3, #18
 80191ca:	4602      	mov	r2, r0
 80191cc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80191ce:	493e      	ldr	r1, [pc, #248]	; (80192c8 <etharp_tmr+0x14c>)
 80191d0:	687a      	ldr	r2, [r7, #4]
 80191d2:	4613      	mov	r3, r2
 80191d4:	005b      	lsls	r3, r3, #1
 80191d6:	4413      	add	r3, r2
 80191d8:	00db      	lsls	r3, r3, #3
 80191da:	440b      	add	r3, r1
 80191dc:	3312      	adds	r3, #18
 80191de:	881b      	ldrh	r3, [r3, #0]
 80191e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80191e4:	d215      	bcs.n	8019212 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80191e6:	4938      	ldr	r1, [pc, #224]	; (80192c8 <etharp_tmr+0x14c>)
 80191e8:	687a      	ldr	r2, [r7, #4]
 80191ea:	4613      	mov	r3, r2
 80191ec:	005b      	lsls	r3, r3, #1
 80191ee:	4413      	add	r3, r2
 80191f0:	00db      	lsls	r3, r3, #3
 80191f2:	440b      	add	r3, r1
 80191f4:	3314      	adds	r3, #20
 80191f6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80191f8:	2b01      	cmp	r3, #1
 80191fa:	d10e      	bne.n	801921a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80191fc:	4932      	ldr	r1, [pc, #200]	; (80192c8 <etharp_tmr+0x14c>)
 80191fe:	687a      	ldr	r2, [r7, #4]
 8019200:	4613      	mov	r3, r2
 8019202:	005b      	lsls	r3, r3, #1
 8019204:	4413      	add	r3, r2
 8019206:	00db      	lsls	r3, r3, #3
 8019208:	440b      	add	r3, r1
 801920a:	3312      	adds	r3, #18
 801920c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801920e:	2b04      	cmp	r3, #4
 8019210:	d903      	bls.n	801921a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019212:	6878      	ldr	r0, [r7, #4]
 8019214:	f7ff ff80 	bl	8019118 <etharp_free_entry>
 8019218:	e04a      	b.n	80192b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801921a:	492b      	ldr	r1, [pc, #172]	; (80192c8 <etharp_tmr+0x14c>)
 801921c:	687a      	ldr	r2, [r7, #4]
 801921e:	4613      	mov	r3, r2
 8019220:	005b      	lsls	r3, r3, #1
 8019222:	4413      	add	r3, r2
 8019224:	00db      	lsls	r3, r3, #3
 8019226:	440b      	add	r3, r1
 8019228:	3314      	adds	r3, #20
 801922a:	781b      	ldrb	r3, [r3, #0]
 801922c:	2b03      	cmp	r3, #3
 801922e:	d10a      	bne.n	8019246 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019230:	4925      	ldr	r1, [pc, #148]	; (80192c8 <etharp_tmr+0x14c>)
 8019232:	687a      	ldr	r2, [r7, #4]
 8019234:	4613      	mov	r3, r2
 8019236:	005b      	lsls	r3, r3, #1
 8019238:	4413      	add	r3, r2
 801923a:	00db      	lsls	r3, r3, #3
 801923c:	440b      	add	r3, r1
 801923e:	3314      	adds	r3, #20
 8019240:	2204      	movs	r2, #4
 8019242:	701a      	strb	r2, [r3, #0]
 8019244:	e034      	b.n	80192b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019246:	4920      	ldr	r1, [pc, #128]	; (80192c8 <etharp_tmr+0x14c>)
 8019248:	687a      	ldr	r2, [r7, #4]
 801924a:	4613      	mov	r3, r2
 801924c:	005b      	lsls	r3, r3, #1
 801924e:	4413      	add	r3, r2
 8019250:	00db      	lsls	r3, r3, #3
 8019252:	440b      	add	r3, r1
 8019254:	3314      	adds	r3, #20
 8019256:	781b      	ldrb	r3, [r3, #0]
 8019258:	2b04      	cmp	r3, #4
 801925a:	d10a      	bne.n	8019272 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801925c:	491a      	ldr	r1, [pc, #104]	; (80192c8 <etharp_tmr+0x14c>)
 801925e:	687a      	ldr	r2, [r7, #4]
 8019260:	4613      	mov	r3, r2
 8019262:	005b      	lsls	r3, r3, #1
 8019264:	4413      	add	r3, r2
 8019266:	00db      	lsls	r3, r3, #3
 8019268:	440b      	add	r3, r1
 801926a:	3314      	adds	r3, #20
 801926c:	2202      	movs	r2, #2
 801926e:	701a      	strb	r2, [r3, #0]
 8019270:	e01e      	b.n	80192b0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019272:	4915      	ldr	r1, [pc, #84]	; (80192c8 <etharp_tmr+0x14c>)
 8019274:	687a      	ldr	r2, [r7, #4]
 8019276:	4613      	mov	r3, r2
 8019278:	005b      	lsls	r3, r3, #1
 801927a:	4413      	add	r3, r2
 801927c:	00db      	lsls	r3, r3, #3
 801927e:	440b      	add	r3, r1
 8019280:	3314      	adds	r3, #20
 8019282:	781b      	ldrb	r3, [r3, #0]
 8019284:	2b01      	cmp	r3, #1
 8019286:	d113      	bne.n	80192b0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019288:	490f      	ldr	r1, [pc, #60]	; (80192c8 <etharp_tmr+0x14c>)
 801928a:	687a      	ldr	r2, [r7, #4]
 801928c:	4613      	mov	r3, r2
 801928e:	005b      	lsls	r3, r3, #1
 8019290:	4413      	add	r3, r2
 8019292:	00db      	lsls	r3, r3, #3
 8019294:	440b      	add	r3, r1
 8019296:	3308      	adds	r3, #8
 8019298:	6818      	ldr	r0, [r3, #0]
 801929a:	687a      	ldr	r2, [r7, #4]
 801929c:	4613      	mov	r3, r2
 801929e:	005b      	lsls	r3, r3, #1
 80192a0:	4413      	add	r3, r2
 80192a2:	00db      	lsls	r3, r3, #3
 80192a4:	4a08      	ldr	r2, [pc, #32]	; (80192c8 <etharp_tmr+0x14c>)
 80192a6:	4413      	add	r3, r2
 80192a8:	3304      	adds	r3, #4
 80192aa:	4619      	mov	r1, r3
 80192ac:	f000 fe72 	bl	8019f94 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	3301      	adds	r3, #1
 80192b4:	607b      	str	r3, [r7, #4]
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	2b09      	cmp	r3, #9
 80192ba:	f77f af65 	ble.w	8019188 <etharp_tmr+0xc>
      }
    }
  }
}
 80192be:	bf00      	nop
 80192c0:	bf00      	nop
 80192c2:	3708      	adds	r7, #8
 80192c4:	46bd      	mov	sp, r7
 80192c6:	bd80      	pop	{r7, pc}
 80192c8:	2000c66c 	.word	0x2000c66c

080192cc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b08a      	sub	sp, #40	; 0x28
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	60f8      	str	r0, [r7, #12]
 80192d4:	460b      	mov	r3, r1
 80192d6:	607a      	str	r2, [r7, #4]
 80192d8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80192da:	230a      	movs	r3, #10
 80192dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80192de:	230a      	movs	r3, #10
 80192e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80192e2:	230a      	movs	r3, #10
 80192e4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80192e6:	2300      	movs	r3, #0
 80192e8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80192ea:	230a      	movs	r3, #10
 80192ec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80192ee:	2300      	movs	r3, #0
 80192f0:	83bb      	strh	r3, [r7, #28]
 80192f2:	2300      	movs	r3, #0
 80192f4:	837b      	strh	r3, [r7, #26]
 80192f6:	2300      	movs	r3, #0
 80192f8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80192fa:	2300      	movs	r3, #0
 80192fc:	843b      	strh	r3, [r7, #32]
 80192fe:	e0ae      	b.n	801945e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019300:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019304:	49a6      	ldr	r1, [pc, #664]	; (80195a0 <etharp_find_entry+0x2d4>)
 8019306:	4613      	mov	r3, r2
 8019308:	005b      	lsls	r3, r3, #1
 801930a:	4413      	add	r3, r2
 801930c:	00db      	lsls	r3, r3, #3
 801930e:	440b      	add	r3, r1
 8019310:	3314      	adds	r3, #20
 8019312:	781b      	ldrb	r3, [r3, #0]
 8019314:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019316:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801931a:	2b0a      	cmp	r3, #10
 801931c:	d105      	bne.n	801932a <etharp_find_entry+0x5e>
 801931e:	7dfb      	ldrb	r3, [r7, #23]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d102      	bne.n	801932a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019324:	8c3b      	ldrh	r3, [r7, #32]
 8019326:	847b      	strh	r3, [r7, #34]	; 0x22
 8019328:	e095      	b.n	8019456 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801932a:	7dfb      	ldrb	r3, [r7, #23]
 801932c:	2b00      	cmp	r3, #0
 801932e:	f000 8092 	beq.w	8019456 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019332:	7dfb      	ldrb	r3, [r7, #23]
 8019334:	2b01      	cmp	r3, #1
 8019336:	d009      	beq.n	801934c <etharp_find_entry+0x80>
 8019338:	7dfb      	ldrb	r3, [r7, #23]
 801933a:	2b01      	cmp	r3, #1
 801933c:	d806      	bhi.n	801934c <etharp_find_entry+0x80>
 801933e:	4b99      	ldr	r3, [pc, #612]	; (80195a4 <etharp_find_entry+0x2d8>)
 8019340:	f240 1223 	movw	r2, #291	; 0x123
 8019344:	4998      	ldr	r1, [pc, #608]	; (80195a8 <etharp_find_entry+0x2dc>)
 8019346:	4899      	ldr	r0, [pc, #612]	; (80195ac <etharp_find_entry+0x2e0>)
 8019348:	f003 f8e4 	bl	801c514 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d020      	beq.n	8019394 <etharp_find_entry+0xc8>
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	6819      	ldr	r1, [r3, #0]
 8019356:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801935a:	4891      	ldr	r0, [pc, #580]	; (80195a0 <etharp_find_entry+0x2d4>)
 801935c:	4613      	mov	r3, r2
 801935e:	005b      	lsls	r3, r3, #1
 8019360:	4413      	add	r3, r2
 8019362:	00db      	lsls	r3, r3, #3
 8019364:	4403      	add	r3, r0
 8019366:	3304      	adds	r3, #4
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	4299      	cmp	r1, r3
 801936c:	d112      	bne.n	8019394 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d00c      	beq.n	801938e <etharp_find_entry+0xc2>
 8019374:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019378:	4989      	ldr	r1, [pc, #548]	; (80195a0 <etharp_find_entry+0x2d4>)
 801937a:	4613      	mov	r3, r2
 801937c:	005b      	lsls	r3, r3, #1
 801937e:	4413      	add	r3, r2
 8019380:	00db      	lsls	r3, r3, #3
 8019382:	440b      	add	r3, r1
 8019384:	3308      	adds	r3, #8
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	687a      	ldr	r2, [r7, #4]
 801938a:	429a      	cmp	r2, r3
 801938c:	d102      	bne.n	8019394 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801938e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019392:	e100      	b.n	8019596 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019394:	7dfb      	ldrb	r3, [r7, #23]
 8019396:	2b01      	cmp	r3, #1
 8019398:	d140      	bne.n	801941c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801939a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801939e:	4980      	ldr	r1, [pc, #512]	; (80195a0 <etharp_find_entry+0x2d4>)
 80193a0:	4613      	mov	r3, r2
 80193a2:	005b      	lsls	r3, r3, #1
 80193a4:	4413      	add	r3, r2
 80193a6:	00db      	lsls	r3, r3, #3
 80193a8:	440b      	add	r3, r1
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d01a      	beq.n	80193e6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80193b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80193b4:	497a      	ldr	r1, [pc, #488]	; (80195a0 <etharp_find_entry+0x2d4>)
 80193b6:	4613      	mov	r3, r2
 80193b8:	005b      	lsls	r3, r3, #1
 80193ba:	4413      	add	r3, r2
 80193bc:	00db      	lsls	r3, r3, #3
 80193be:	440b      	add	r3, r1
 80193c0:	3312      	adds	r3, #18
 80193c2:	881b      	ldrh	r3, [r3, #0]
 80193c4:	8bba      	ldrh	r2, [r7, #28]
 80193c6:	429a      	cmp	r2, r3
 80193c8:	d845      	bhi.n	8019456 <etharp_find_entry+0x18a>
            old_queue = i;
 80193ca:	8c3b      	ldrh	r3, [r7, #32]
 80193cc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80193ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80193d2:	4973      	ldr	r1, [pc, #460]	; (80195a0 <etharp_find_entry+0x2d4>)
 80193d4:	4613      	mov	r3, r2
 80193d6:	005b      	lsls	r3, r3, #1
 80193d8:	4413      	add	r3, r2
 80193da:	00db      	lsls	r3, r3, #3
 80193dc:	440b      	add	r3, r1
 80193de:	3312      	adds	r3, #18
 80193e0:	881b      	ldrh	r3, [r3, #0]
 80193e2:	83bb      	strh	r3, [r7, #28]
 80193e4:	e037      	b.n	8019456 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80193e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80193ea:	496d      	ldr	r1, [pc, #436]	; (80195a0 <etharp_find_entry+0x2d4>)
 80193ec:	4613      	mov	r3, r2
 80193ee:	005b      	lsls	r3, r3, #1
 80193f0:	4413      	add	r3, r2
 80193f2:	00db      	lsls	r3, r3, #3
 80193f4:	440b      	add	r3, r1
 80193f6:	3312      	adds	r3, #18
 80193f8:	881b      	ldrh	r3, [r3, #0]
 80193fa:	8b7a      	ldrh	r2, [r7, #26]
 80193fc:	429a      	cmp	r2, r3
 80193fe:	d82a      	bhi.n	8019456 <etharp_find_entry+0x18a>
            old_pending = i;
 8019400:	8c3b      	ldrh	r3, [r7, #32]
 8019402:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019408:	4965      	ldr	r1, [pc, #404]	; (80195a0 <etharp_find_entry+0x2d4>)
 801940a:	4613      	mov	r3, r2
 801940c:	005b      	lsls	r3, r3, #1
 801940e:	4413      	add	r3, r2
 8019410:	00db      	lsls	r3, r3, #3
 8019412:	440b      	add	r3, r1
 8019414:	3312      	adds	r3, #18
 8019416:	881b      	ldrh	r3, [r3, #0]
 8019418:	837b      	strh	r3, [r7, #26]
 801941a:	e01c      	b.n	8019456 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801941c:	7dfb      	ldrb	r3, [r7, #23]
 801941e:	2b01      	cmp	r3, #1
 8019420:	d919      	bls.n	8019456 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019422:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019426:	495e      	ldr	r1, [pc, #376]	; (80195a0 <etharp_find_entry+0x2d4>)
 8019428:	4613      	mov	r3, r2
 801942a:	005b      	lsls	r3, r3, #1
 801942c:	4413      	add	r3, r2
 801942e:	00db      	lsls	r3, r3, #3
 8019430:	440b      	add	r3, r1
 8019432:	3312      	adds	r3, #18
 8019434:	881b      	ldrh	r3, [r3, #0]
 8019436:	8b3a      	ldrh	r2, [r7, #24]
 8019438:	429a      	cmp	r2, r3
 801943a:	d80c      	bhi.n	8019456 <etharp_find_entry+0x18a>
            old_stable = i;
 801943c:	8c3b      	ldrh	r3, [r7, #32]
 801943e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8019440:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019444:	4956      	ldr	r1, [pc, #344]	; (80195a0 <etharp_find_entry+0x2d4>)
 8019446:	4613      	mov	r3, r2
 8019448:	005b      	lsls	r3, r3, #1
 801944a:	4413      	add	r3, r2
 801944c:	00db      	lsls	r3, r3, #3
 801944e:	440b      	add	r3, r1
 8019450:	3312      	adds	r3, #18
 8019452:	881b      	ldrh	r3, [r3, #0]
 8019454:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019456:	8c3b      	ldrh	r3, [r7, #32]
 8019458:	3301      	adds	r3, #1
 801945a:	b29b      	uxth	r3, r3
 801945c:	843b      	strh	r3, [r7, #32]
 801945e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019462:	2b09      	cmp	r3, #9
 8019464:	f77f af4c 	ble.w	8019300 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019468:	7afb      	ldrb	r3, [r7, #11]
 801946a:	f003 0302 	and.w	r3, r3, #2
 801946e:	2b00      	cmp	r3, #0
 8019470:	d108      	bne.n	8019484 <etharp_find_entry+0x1b8>
 8019472:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019476:	2b0a      	cmp	r3, #10
 8019478:	d107      	bne.n	801948a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801947a:	7afb      	ldrb	r3, [r7, #11]
 801947c:	f003 0301 	and.w	r3, r3, #1
 8019480:	2b00      	cmp	r3, #0
 8019482:	d102      	bne.n	801948a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019488:	e085      	b.n	8019596 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801948a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801948e:	2b09      	cmp	r3, #9
 8019490:	dc02      	bgt.n	8019498 <etharp_find_entry+0x1cc>
    i = empty;
 8019492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019494:	843b      	strh	r3, [r7, #32]
 8019496:	e039      	b.n	801950c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019498:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801949c:	2b09      	cmp	r3, #9
 801949e:	dc14      	bgt.n	80194ca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80194a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80194a2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80194a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80194a8:	493d      	ldr	r1, [pc, #244]	; (80195a0 <etharp_find_entry+0x2d4>)
 80194aa:	4613      	mov	r3, r2
 80194ac:	005b      	lsls	r3, r3, #1
 80194ae:	4413      	add	r3, r2
 80194b0:	00db      	lsls	r3, r3, #3
 80194b2:	440b      	add	r3, r1
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d018      	beq.n	80194ec <etharp_find_entry+0x220>
 80194ba:	4b3a      	ldr	r3, [pc, #232]	; (80195a4 <etharp_find_entry+0x2d8>)
 80194bc:	f240 126d 	movw	r2, #365	; 0x16d
 80194c0:	493b      	ldr	r1, [pc, #236]	; (80195b0 <etharp_find_entry+0x2e4>)
 80194c2:	483a      	ldr	r0, [pc, #232]	; (80195ac <etharp_find_entry+0x2e0>)
 80194c4:	f003 f826 	bl	801c514 <iprintf>
 80194c8:	e010      	b.n	80194ec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80194ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80194ce:	2b09      	cmp	r3, #9
 80194d0:	dc02      	bgt.n	80194d8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80194d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80194d4:	843b      	strh	r3, [r7, #32]
 80194d6:	e009      	b.n	80194ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80194d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80194dc:	2b09      	cmp	r3, #9
 80194de:	dc02      	bgt.n	80194e6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80194e0:	8bfb      	ldrh	r3, [r7, #30]
 80194e2:	843b      	strh	r3, [r7, #32]
 80194e4:	e002      	b.n	80194ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80194e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80194ea:	e054      	b.n	8019596 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80194ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80194f0:	2b09      	cmp	r3, #9
 80194f2:	dd06      	ble.n	8019502 <etharp_find_entry+0x236>
 80194f4:	4b2b      	ldr	r3, [pc, #172]	; (80195a4 <etharp_find_entry+0x2d8>)
 80194f6:	f240 127f 	movw	r2, #383	; 0x17f
 80194fa:	492e      	ldr	r1, [pc, #184]	; (80195b4 <etharp_find_entry+0x2e8>)
 80194fc:	482b      	ldr	r0, [pc, #172]	; (80195ac <etharp_find_entry+0x2e0>)
 80194fe:	f003 f809 	bl	801c514 <iprintf>
    etharp_free_entry(i);
 8019502:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019506:	4618      	mov	r0, r3
 8019508:	f7ff fe06 	bl	8019118 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801950c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019510:	2b09      	cmp	r3, #9
 8019512:	dd06      	ble.n	8019522 <etharp_find_entry+0x256>
 8019514:	4b23      	ldr	r3, [pc, #140]	; (80195a4 <etharp_find_entry+0x2d8>)
 8019516:	f240 1283 	movw	r2, #387	; 0x183
 801951a:	4926      	ldr	r1, [pc, #152]	; (80195b4 <etharp_find_entry+0x2e8>)
 801951c:	4823      	ldr	r0, [pc, #140]	; (80195ac <etharp_find_entry+0x2e0>)
 801951e:	f002 fff9 	bl	801c514 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019526:	491e      	ldr	r1, [pc, #120]	; (80195a0 <etharp_find_entry+0x2d4>)
 8019528:	4613      	mov	r3, r2
 801952a:	005b      	lsls	r3, r3, #1
 801952c:	4413      	add	r3, r2
 801952e:	00db      	lsls	r3, r3, #3
 8019530:	440b      	add	r3, r1
 8019532:	3314      	adds	r3, #20
 8019534:	781b      	ldrb	r3, [r3, #0]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d006      	beq.n	8019548 <etharp_find_entry+0x27c>
 801953a:	4b1a      	ldr	r3, [pc, #104]	; (80195a4 <etharp_find_entry+0x2d8>)
 801953c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8019540:	491d      	ldr	r1, [pc, #116]	; (80195b8 <etharp_find_entry+0x2ec>)
 8019542:	481a      	ldr	r0, [pc, #104]	; (80195ac <etharp_find_entry+0x2e0>)
 8019544:	f002 ffe6 	bl	801c514 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d00b      	beq.n	8019566 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801954e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	6819      	ldr	r1, [r3, #0]
 8019556:	4812      	ldr	r0, [pc, #72]	; (80195a0 <etharp_find_entry+0x2d4>)
 8019558:	4613      	mov	r3, r2
 801955a:	005b      	lsls	r3, r3, #1
 801955c:	4413      	add	r3, r2
 801955e:	00db      	lsls	r3, r3, #3
 8019560:	4403      	add	r3, r0
 8019562:	3304      	adds	r3, #4
 8019564:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019566:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801956a:	490d      	ldr	r1, [pc, #52]	; (80195a0 <etharp_find_entry+0x2d4>)
 801956c:	4613      	mov	r3, r2
 801956e:	005b      	lsls	r3, r3, #1
 8019570:	4413      	add	r3, r2
 8019572:	00db      	lsls	r3, r3, #3
 8019574:	440b      	add	r3, r1
 8019576:	3312      	adds	r3, #18
 8019578:	2200      	movs	r2, #0
 801957a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801957c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019580:	4907      	ldr	r1, [pc, #28]	; (80195a0 <etharp_find_entry+0x2d4>)
 8019582:	4613      	mov	r3, r2
 8019584:	005b      	lsls	r3, r3, #1
 8019586:	4413      	add	r3, r2
 8019588:	00db      	lsls	r3, r3, #3
 801958a:	440b      	add	r3, r1
 801958c:	3308      	adds	r3, #8
 801958e:	687a      	ldr	r2, [r7, #4]
 8019590:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019596:	4618      	mov	r0, r3
 8019598:	3728      	adds	r7, #40	; 0x28
 801959a:	46bd      	mov	sp, r7
 801959c:	bd80      	pop	{r7, pc}
 801959e:	bf00      	nop
 80195a0:	2000c66c 	.word	0x2000c66c
 80195a4:	08020ec8 	.word	0x08020ec8
 80195a8:	08020f00 	.word	0x08020f00
 80195ac:	08020f40 	.word	0x08020f40
 80195b0:	08020f68 	.word	0x08020f68
 80195b4:	08020f80 	.word	0x08020f80
 80195b8:	08020f94 	.word	0x08020f94

080195bc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b088      	sub	sp, #32
 80195c0:	af02      	add	r7, sp, #8
 80195c2:	60f8      	str	r0, [r7, #12]
 80195c4:	60b9      	str	r1, [r7, #8]
 80195c6:	607a      	str	r2, [r7, #4]
 80195c8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80195d0:	2b06      	cmp	r3, #6
 80195d2:	d006      	beq.n	80195e2 <etharp_update_arp_entry+0x26>
 80195d4:	4b48      	ldr	r3, [pc, #288]	; (80196f8 <etharp_update_arp_entry+0x13c>)
 80195d6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80195da:	4948      	ldr	r1, [pc, #288]	; (80196fc <etharp_update_arp_entry+0x140>)
 80195dc:	4848      	ldr	r0, [pc, #288]	; (8019700 <etharp_update_arp_entry+0x144>)
 80195de:	f002 ff99 	bl	801c514 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80195e2:	68bb      	ldr	r3, [r7, #8]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d012      	beq.n	801960e <etharp_update_arp_entry+0x52>
 80195e8:	68bb      	ldr	r3, [r7, #8]
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d00e      	beq.n	801960e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80195f0:	68bb      	ldr	r3, [r7, #8]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	68f9      	ldr	r1, [r7, #12]
 80195f6:	4618      	mov	r0, r3
 80195f8:	f001 f920 	bl	801a83c <ip4_addr_isbroadcast_u32>
 80195fc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d105      	bne.n	801960e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019602:	68bb      	ldr	r3, [r7, #8]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801960a:	2be0      	cmp	r3, #224	; 0xe0
 801960c:	d102      	bne.n	8019614 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801960e:	f06f 030f 	mvn.w	r3, #15
 8019612:	e06c      	b.n	80196ee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019614:	78fb      	ldrb	r3, [r7, #3]
 8019616:	68fa      	ldr	r2, [r7, #12]
 8019618:	4619      	mov	r1, r3
 801961a:	68b8      	ldr	r0, [r7, #8]
 801961c:	f7ff fe56 	bl	80192cc <etharp_find_entry>
 8019620:	4603      	mov	r3, r0
 8019622:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019624:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019628:	2b00      	cmp	r3, #0
 801962a:	da02      	bge.n	8019632 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801962c:	8afb      	ldrh	r3, [r7, #22]
 801962e:	b25b      	sxtb	r3, r3
 8019630:	e05d      	b.n	80196ee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019632:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019636:	4933      	ldr	r1, [pc, #204]	; (8019704 <etharp_update_arp_entry+0x148>)
 8019638:	4613      	mov	r3, r2
 801963a:	005b      	lsls	r3, r3, #1
 801963c:	4413      	add	r3, r2
 801963e:	00db      	lsls	r3, r3, #3
 8019640:	440b      	add	r3, r1
 8019642:	3314      	adds	r3, #20
 8019644:	2202      	movs	r2, #2
 8019646:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019648:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801964c:	492d      	ldr	r1, [pc, #180]	; (8019704 <etharp_update_arp_entry+0x148>)
 801964e:	4613      	mov	r3, r2
 8019650:	005b      	lsls	r3, r3, #1
 8019652:	4413      	add	r3, r2
 8019654:	00db      	lsls	r3, r3, #3
 8019656:	440b      	add	r3, r1
 8019658:	3308      	adds	r3, #8
 801965a:	68fa      	ldr	r2, [r7, #12]
 801965c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801965e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019662:	4613      	mov	r3, r2
 8019664:	005b      	lsls	r3, r3, #1
 8019666:	4413      	add	r3, r2
 8019668:	00db      	lsls	r3, r3, #3
 801966a:	3308      	adds	r3, #8
 801966c:	4a25      	ldr	r2, [pc, #148]	; (8019704 <etharp_update_arp_entry+0x148>)
 801966e:	4413      	add	r3, r2
 8019670:	3304      	adds	r3, #4
 8019672:	2206      	movs	r2, #6
 8019674:	6879      	ldr	r1, [r7, #4]
 8019676:	4618      	mov	r0, r3
 8019678:	f003 f9e5 	bl	801ca46 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801967c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019680:	4920      	ldr	r1, [pc, #128]	; (8019704 <etharp_update_arp_entry+0x148>)
 8019682:	4613      	mov	r3, r2
 8019684:	005b      	lsls	r3, r3, #1
 8019686:	4413      	add	r3, r2
 8019688:	00db      	lsls	r3, r3, #3
 801968a:	440b      	add	r3, r1
 801968c:	3312      	adds	r3, #18
 801968e:	2200      	movs	r2, #0
 8019690:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019692:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019696:	491b      	ldr	r1, [pc, #108]	; (8019704 <etharp_update_arp_entry+0x148>)
 8019698:	4613      	mov	r3, r2
 801969a:	005b      	lsls	r3, r3, #1
 801969c:	4413      	add	r3, r2
 801969e:	00db      	lsls	r3, r3, #3
 80196a0:	440b      	add	r3, r1
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d021      	beq.n	80196ec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80196a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80196ac:	4915      	ldr	r1, [pc, #84]	; (8019704 <etharp_update_arp_entry+0x148>)
 80196ae:	4613      	mov	r3, r2
 80196b0:	005b      	lsls	r3, r3, #1
 80196b2:	4413      	add	r3, r2
 80196b4:	00db      	lsls	r3, r3, #3
 80196b6:	440b      	add	r3, r1
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80196bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80196c0:	4910      	ldr	r1, [pc, #64]	; (8019704 <etharp_update_arp_entry+0x148>)
 80196c2:	4613      	mov	r3, r2
 80196c4:	005b      	lsls	r3, r3, #1
 80196c6:	4413      	add	r3, r2
 80196c8:	00db      	lsls	r3, r3, #3
 80196ca:	440b      	add	r3, r1
 80196cc:	2200      	movs	r2, #0
 80196ce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80196d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80196da:	9300      	str	r3, [sp, #0]
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	6939      	ldr	r1, [r7, #16]
 80196e0:	68f8      	ldr	r0, [r7, #12]
 80196e2:	f001 ffb9 	bl	801b658 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80196e6:	6938      	ldr	r0, [r7, #16]
 80196e8:	f7f7 fc48 	bl	8010f7c <pbuf_free>
  }
  return ERR_OK;
 80196ec:	2300      	movs	r3, #0
}
 80196ee:	4618      	mov	r0, r3
 80196f0:	3718      	adds	r7, #24
 80196f2:	46bd      	mov	sp, r7
 80196f4:	bd80      	pop	{r7, pc}
 80196f6:	bf00      	nop
 80196f8:	08020ec8 	.word	0x08020ec8
 80196fc:	08020fc0 	.word	0x08020fc0
 8019700:	08020f40 	.word	0x08020f40
 8019704:	2000c66c 	.word	0x2000c66c

08019708 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019708:	b580      	push	{r7, lr}
 801970a:	b084      	sub	sp, #16
 801970c:	af00      	add	r7, sp, #0
 801970e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019710:	2300      	movs	r3, #0
 8019712:	60fb      	str	r3, [r7, #12]
 8019714:	e01e      	b.n	8019754 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019716:	4913      	ldr	r1, [pc, #76]	; (8019764 <etharp_cleanup_netif+0x5c>)
 8019718:	68fa      	ldr	r2, [r7, #12]
 801971a:	4613      	mov	r3, r2
 801971c:	005b      	lsls	r3, r3, #1
 801971e:	4413      	add	r3, r2
 8019720:	00db      	lsls	r3, r3, #3
 8019722:	440b      	add	r3, r1
 8019724:	3314      	adds	r3, #20
 8019726:	781b      	ldrb	r3, [r3, #0]
 8019728:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801972a:	7afb      	ldrb	r3, [r7, #11]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d00e      	beq.n	801974e <etharp_cleanup_netif+0x46>
 8019730:	490c      	ldr	r1, [pc, #48]	; (8019764 <etharp_cleanup_netif+0x5c>)
 8019732:	68fa      	ldr	r2, [r7, #12]
 8019734:	4613      	mov	r3, r2
 8019736:	005b      	lsls	r3, r3, #1
 8019738:	4413      	add	r3, r2
 801973a:	00db      	lsls	r3, r3, #3
 801973c:	440b      	add	r3, r1
 801973e:	3308      	adds	r3, #8
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	687a      	ldr	r2, [r7, #4]
 8019744:	429a      	cmp	r2, r3
 8019746:	d102      	bne.n	801974e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019748:	68f8      	ldr	r0, [r7, #12]
 801974a:	f7ff fce5 	bl	8019118 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	3301      	adds	r3, #1
 8019752:	60fb      	str	r3, [r7, #12]
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	2b09      	cmp	r3, #9
 8019758:	dddd      	ble.n	8019716 <etharp_cleanup_netif+0xe>
    }
  }
}
 801975a:	bf00      	nop
 801975c:	bf00      	nop
 801975e:	3710      	adds	r7, #16
 8019760:	46bd      	mov	sp, r7
 8019762:	bd80      	pop	{r7, pc}
 8019764:	2000c66c 	.word	0x2000c66c

08019768 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019768:	b5b0      	push	{r4, r5, r7, lr}
 801976a:	b08a      	sub	sp, #40	; 0x28
 801976c:	af04      	add	r7, sp, #16
 801976e:	6078      	str	r0, [r7, #4]
 8019770:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019772:	683b      	ldr	r3, [r7, #0]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d107      	bne.n	8019788 <etharp_input+0x20>
 8019778:	4b3f      	ldr	r3, [pc, #252]	; (8019878 <etharp_input+0x110>)
 801977a:	f240 228a 	movw	r2, #650	; 0x28a
 801977e:	493f      	ldr	r1, [pc, #252]	; (801987c <etharp_input+0x114>)
 8019780:	483f      	ldr	r0, [pc, #252]	; (8019880 <etharp_input+0x118>)
 8019782:	f002 fec7 	bl	801c514 <iprintf>
 8019786:	e074      	b.n	8019872 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	685b      	ldr	r3, [r3, #4]
 801978c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801978e:	693b      	ldr	r3, [r7, #16]
 8019790:	881b      	ldrh	r3, [r3, #0]
 8019792:	b29b      	uxth	r3, r3
 8019794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019798:	d10c      	bne.n	80197b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801979a:	693b      	ldr	r3, [r7, #16]
 801979c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801979e:	2b06      	cmp	r3, #6
 80197a0:	d108      	bne.n	80197b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80197a2:	693b      	ldr	r3, [r7, #16]
 80197a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80197a6:	2b04      	cmp	r3, #4
 80197a8:	d104      	bne.n	80197b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80197aa:	693b      	ldr	r3, [r7, #16]
 80197ac:	885b      	ldrh	r3, [r3, #2]
 80197ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80197b0:	2b08      	cmp	r3, #8
 80197b2:	d003      	beq.n	80197bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80197b4:	6878      	ldr	r0, [r7, #4]
 80197b6:	f7f7 fbe1 	bl	8010f7c <pbuf_free>
    return;
 80197ba:	e05a      	b.n	8019872 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80197bc:	693b      	ldr	r3, [r7, #16]
 80197be:	330e      	adds	r3, #14
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80197c4:	693b      	ldr	r3, [r7, #16]
 80197c6:	3318      	adds	r3, #24
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80197cc:	683b      	ldr	r3, [r7, #0]
 80197ce:	3304      	adds	r3, #4
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d102      	bne.n	80197dc <etharp_input+0x74>
    for_us = 0;
 80197d6:	2300      	movs	r3, #0
 80197d8:	75fb      	strb	r3, [r7, #23]
 80197da:	e009      	b.n	80197f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80197dc:	68ba      	ldr	r2, [r7, #8]
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	3304      	adds	r3, #4
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	429a      	cmp	r2, r3
 80197e6:	bf0c      	ite	eq
 80197e8:	2301      	moveq	r3, #1
 80197ea:	2300      	movne	r3, #0
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	f103 0208 	add.w	r2, r3, #8
 80197f6:	7dfb      	ldrb	r3, [r7, #23]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d001      	beq.n	8019800 <etharp_input+0x98>
 80197fc:	2301      	movs	r3, #1
 80197fe:	e000      	b.n	8019802 <etharp_input+0x9a>
 8019800:	2302      	movs	r3, #2
 8019802:	f107 010c 	add.w	r1, r7, #12
 8019806:	6838      	ldr	r0, [r7, #0]
 8019808:	f7ff fed8 	bl	80195bc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801980c:	693b      	ldr	r3, [r7, #16]
 801980e:	88db      	ldrh	r3, [r3, #6]
 8019810:	b29b      	uxth	r3, r3
 8019812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019816:	d003      	beq.n	8019820 <etharp_input+0xb8>
 8019818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801981c:	d01e      	beq.n	801985c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801981e:	e025      	b.n	801986c <etharp_input+0x104>
      if (for_us) {
 8019820:	7dfb      	ldrb	r3, [r7, #23]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d021      	beq.n	801986a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8019826:	683b      	ldr	r3, [r7, #0]
 8019828:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801982c:	693b      	ldr	r3, [r7, #16]
 801982e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8019832:	683b      	ldr	r3, [r7, #0]
 8019834:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8019838:	683b      	ldr	r3, [r7, #0]
 801983a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801983c:	693a      	ldr	r2, [r7, #16]
 801983e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8019840:	2102      	movs	r1, #2
 8019842:	9103      	str	r1, [sp, #12]
 8019844:	f107 010c 	add.w	r1, r7, #12
 8019848:	9102      	str	r1, [sp, #8]
 801984a:	9201      	str	r2, [sp, #4]
 801984c:	9300      	str	r3, [sp, #0]
 801984e:	462b      	mov	r3, r5
 8019850:	4622      	mov	r2, r4
 8019852:	4601      	mov	r1, r0
 8019854:	6838      	ldr	r0, [r7, #0]
 8019856:	f000 faef 	bl	8019e38 <etharp_raw>
      break;
 801985a:	e006      	b.n	801986a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801985c:	f107 030c 	add.w	r3, r7, #12
 8019860:	4619      	mov	r1, r3
 8019862:	6838      	ldr	r0, [r7, #0]
 8019864:	f7fe f9fc 	bl	8017c60 <dhcp_arp_reply>
      break;
 8019868:	e000      	b.n	801986c <etharp_input+0x104>
      break;
 801986a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801986c:	6878      	ldr	r0, [r7, #4]
 801986e:	f7f7 fb85 	bl	8010f7c <pbuf_free>
}
 8019872:	3718      	adds	r7, #24
 8019874:	46bd      	mov	sp, r7
 8019876:	bdb0      	pop	{r4, r5, r7, pc}
 8019878:	08020ec8 	.word	0x08020ec8
 801987c:	08021018 	.word	0x08021018
 8019880:	08020f40 	.word	0x08020f40

08019884 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b086      	sub	sp, #24
 8019888:	af02      	add	r7, sp, #8
 801988a:	60f8      	str	r0, [r7, #12]
 801988c:	60b9      	str	r1, [r7, #8]
 801988e:	4613      	mov	r3, r2
 8019890:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019892:	79fa      	ldrb	r2, [r7, #7]
 8019894:	4944      	ldr	r1, [pc, #272]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 8019896:	4613      	mov	r3, r2
 8019898:	005b      	lsls	r3, r3, #1
 801989a:	4413      	add	r3, r2
 801989c:	00db      	lsls	r3, r3, #3
 801989e:	440b      	add	r3, r1
 80198a0:	3314      	adds	r3, #20
 80198a2:	781b      	ldrb	r3, [r3, #0]
 80198a4:	2b01      	cmp	r3, #1
 80198a6:	d806      	bhi.n	80198b6 <etharp_output_to_arp_index+0x32>
 80198a8:	4b40      	ldr	r3, [pc, #256]	; (80199ac <etharp_output_to_arp_index+0x128>)
 80198aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80198ae:	4940      	ldr	r1, [pc, #256]	; (80199b0 <etharp_output_to_arp_index+0x12c>)
 80198b0:	4840      	ldr	r0, [pc, #256]	; (80199b4 <etharp_output_to_arp_index+0x130>)
 80198b2:	f002 fe2f 	bl	801c514 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80198b6:	79fa      	ldrb	r2, [r7, #7]
 80198b8:	493b      	ldr	r1, [pc, #236]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 80198ba:	4613      	mov	r3, r2
 80198bc:	005b      	lsls	r3, r3, #1
 80198be:	4413      	add	r3, r2
 80198c0:	00db      	lsls	r3, r3, #3
 80198c2:	440b      	add	r3, r1
 80198c4:	3314      	adds	r3, #20
 80198c6:	781b      	ldrb	r3, [r3, #0]
 80198c8:	2b02      	cmp	r3, #2
 80198ca:	d153      	bne.n	8019974 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80198cc:	79fa      	ldrb	r2, [r7, #7]
 80198ce:	4936      	ldr	r1, [pc, #216]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 80198d0:	4613      	mov	r3, r2
 80198d2:	005b      	lsls	r3, r3, #1
 80198d4:	4413      	add	r3, r2
 80198d6:	00db      	lsls	r3, r3, #3
 80198d8:	440b      	add	r3, r1
 80198da:	3312      	adds	r3, #18
 80198dc:	881b      	ldrh	r3, [r3, #0]
 80198de:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80198e2:	d919      	bls.n	8019918 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80198e4:	79fa      	ldrb	r2, [r7, #7]
 80198e6:	4613      	mov	r3, r2
 80198e8:	005b      	lsls	r3, r3, #1
 80198ea:	4413      	add	r3, r2
 80198ec:	00db      	lsls	r3, r3, #3
 80198ee:	4a2e      	ldr	r2, [pc, #184]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 80198f0:	4413      	add	r3, r2
 80198f2:	3304      	adds	r3, #4
 80198f4:	4619      	mov	r1, r3
 80198f6:	68f8      	ldr	r0, [r7, #12]
 80198f8:	f000 fb4c 	bl	8019f94 <etharp_request>
 80198fc:	4603      	mov	r3, r0
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d138      	bne.n	8019974 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019902:	79fa      	ldrb	r2, [r7, #7]
 8019904:	4928      	ldr	r1, [pc, #160]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 8019906:	4613      	mov	r3, r2
 8019908:	005b      	lsls	r3, r3, #1
 801990a:	4413      	add	r3, r2
 801990c:	00db      	lsls	r3, r3, #3
 801990e:	440b      	add	r3, r1
 8019910:	3314      	adds	r3, #20
 8019912:	2203      	movs	r2, #3
 8019914:	701a      	strb	r2, [r3, #0]
 8019916:	e02d      	b.n	8019974 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019918:	79fa      	ldrb	r2, [r7, #7]
 801991a:	4923      	ldr	r1, [pc, #140]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 801991c:	4613      	mov	r3, r2
 801991e:	005b      	lsls	r3, r3, #1
 8019920:	4413      	add	r3, r2
 8019922:	00db      	lsls	r3, r3, #3
 8019924:	440b      	add	r3, r1
 8019926:	3312      	adds	r3, #18
 8019928:	881b      	ldrh	r3, [r3, #0]
 801992a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801992e:	d321      	bcc.n	8019974 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019930:	79fa      	ldrb	r2, [r7, #7]
 8019932:	4613      	mov	r3, r2
 8019934:	005b      	lsls	r3, r3, #1
 8019936:	4413      	add	r3, r2
 8019938:	00db      	lsls	r3, r3, #3
 801993a:	4a1b      	ldr	r2, [pc, #108]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 801993c:	4413      	add	r3, r2
 801993e:	1d19      	adds	r1, r3, #4
 8019940:	79fa      	ldrb	r2, [r7, #7]
 8019942:	4613      	mov	r3, r2
 8019944:	005b      	lsls	r3, r3, #1
 8019946:	4413      	add	r3, r2
 8019948:	00db      	lsls	r3, r3, #3
 801994a:	3308      	adds	r3, #8
 801994c:	4a16      	ldr	r2, [pc, #88]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 801994e:	4413      	add	r3, r2
 8019950:	3304      	adds	r3, #4
 8019952:	461a      	mov	r2, r3
 8019954:	68f8      	ldr	r0, [r7, #12]
 8019956:	f000 fafb 	bl	8019f50 <etharp_request_dst>
 801995a:	4603      	mov	r3, r0
 801995c:	2b00      	cmp	r3, #0
 801995e:	d109      	bne.n	8019974 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019960:	79fa      	ldrb	r2, [r7, #7]
 8019962:	4911      	ldr	r1, [pc, #68]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 8019964:	4613      	mov	r3, r2
 8019966:	005b      	lsls	r3, r3, #1
 8019968:	4413      	add	r3, r2
 801996a:	00db      	lsls	r3, r3, #3
 801996c:	440b      	add	r3, r1
 801996e:	3314      	adds	r3, #20
 8019970:	2203      	movs	r2, #3
 8019972:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801997a:	79fa      	ldrb	r2, [r7, #7]
 801997c:	4613      	mov	r3, r2
 801997e:	005b      	lsls	r3, r3, #1
 8019980:	4413      	add	r3, r2
 8019982:	00db      	lsls	r3, r3, #3
 8019984:	3308      	adds	r3, #8
 8019986:	4a08      	ldr	r2, [pc, #32]	; (80199a8 <etharp_output_to_arp_index+0x124>)
 8019988:	4413      	add	r3, r2
 801998a:	3304      	adds	r3, #4
 801998c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019990:	9200      	str	r2, [sp, #0]
 8019992:	460a      	mov	r2, r1
 8019994:	68b9      	ldr	r1, [r7, #8]
 8019996:	68f8      	ldr	r0, [r7, #12]
 8019998:	f001 fe5e 	bl	801b658 <ethernet_output>
 801999c:	4603      	mov	r3, r0
}
 801999e:	4618      	mov	r0, r3
 80199a0:	3710      	adds	r7, #16
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
 80199a6:	bf00      	nop
 80199a8:	2000c66c 	.word	0x2000c66c
 80199ac:	08020ec8 	.word	0x08020ec8
 80199b0:	08021038 	.word	0x08021038
 80199b4:	08020f40 	.word	0x08020f40

080199b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b08a      	sub	sp, #40	; 0x28
 80199bc:	af02      	add	r7, sp, #8
 80199be:	60f8      	str	r0, [r7, #12]
 80199c0:	60b9      	str	r1, [r7, #8]
 80199c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d106      	bne.n	80199dc <etharp_output+0x24>
 80199ce:	4b73      	ldr	r3, [pc, #460]	; (8019b9c <etharp_output+0x1e4>)
 80199d0:	f240 321e 	movw	r2, #798	; 0x31e
 80199d4:	4972      	ldr	r1, [pc, #456]	; (8019ba0 <etharp_output+0x1e8>)
 80199d6:	4873      	ldr	r0, [pc, #460]	; (8019ba4 <etharp_output+0x1ec>)
 80199d8:	f002 fd9c 	bl	801c514 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80199dc:	68bb      	ldr	r3, [r7, #8]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d106      	bne.n	80199f0 <etharp_output+0x38>
 80199e2:	4b6e      	ldr	r3, [pc, #440]	; (8019b9c <etharp_output+0x1e4>)
 80199e4:	f240 321f 	movw	r2, #799	; 0x31f
 80199e8:	496f      	ldr	r1, [pc, #444]	; (8019ba8 <etharp_output+0x1f0>)
 80199ea:	486e      	ldr	r0, [pc, #440]	; (8019ba4 <etharp_output+0x1ec>)
 80199ec:	f002 fd92 	bl	801c514 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d106      	bne.n	8019a04 <etharp_output+0x4c>
 80199f6:	4b69      	ldr	r3, [pc, #420]	; (8019b9c <etharp_output+0x1e4>)
 80199f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80199fc:	496b      	ldr	r1, [pc, #428]	; (8019bac <etharp_output+0x1f4>)
 80199fe:	4869      	ldr	r0, [pc, #420]	; (8019ba4 <etharp_output+0x1ec>)
 8019a00:	f002 fd88 	bl	801c514 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	68f9      	ldr	r1, [r7, #12]
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f000 ff16 	bl	801a83c <ip4_addr_isbroadcast_u32>
 8019a10:	4603      	mov	r3, r0
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d002      	beq.n	8019a1c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8019a16:	4b66      	ldr	r3, [pc, #408]	; (8019bb0 <etharp_output+0x1f8>)
 8019a18:	61fb      	str	r3, [r7, #28]
 8019a1a:	e0af      	b.n	8019b7c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019a24:	2be0      	cmp	r3, #224	; 0xe0
 8019a26:	d118      	bne.n	8019a5a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019a28:	2301      	movs	r3, #1
 8019a2a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019a30:	235e      	movs	r3, #94	; 0x5e
 8019a32:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	3301      	adds	r3, #1
 8019a38:	781b      	ldrb	r3, [r3, #0]
 8019a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	3302      	adds	r3, #2
 8019a46:	781b      	ldrb	r3, [r3, #0]
 8019a48:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	3303      	adds	r3, #3
 8019a4e:	781b      	ldrb	r3, [r3, #0]
 8019a50:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019a52:	f107 0310 	add.w	r3, r7, #16
 8019a56:	61fb      	str	r3, [r7, #28]
 8019a58:	e090      	b.n	8019b7c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	681a      	ldr	r2, [r3, #0]
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	3304      	adds	r3, #4
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	405a      	eors	r2, r3
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	3308      	adds	r3, #8
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	4013      	ands	r3, r2
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d012      	beq.n	8019a98 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019a78:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019a7c:	4293      	cmp	r3, r2
 8019a7e:	d00b      	beq.n	8019a98 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	330c      	adds	r3, #12
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d003      	beq.n	8019a92 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	330c      	adds	r3, #12
 8019a8e:	61bb      	str	r3, [r7, #24]
 8019a90:	e002      	b.n	8019a98 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019a92:	f06f 0303 	mvn.w	r3, #3
 8019a96:	e07d      	b.n	8019b94 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019a98:	4b46      	ldr	r3, [pc, #280]	; (8019bb4 <etharp_output+0x1fc>)
 8019a9a:	781b      	ldrb	r3, [r3, #0]
 8019a9c:	4619      	mov	r1, r3
 8019a9e:	4a46      	ldr	r2, [pc, #280]	; (8019bb8 <etharp_output+0x200>)
 8019aa0:	460b      	mov	r3, r1
 8019aa2:	005b      	lsls	r3, r3, #1
 8019aa4:	440b      	add	r3, r1
 8019aa6:	00db      	lsls	r3, r3, #3
 8019aa8:	4413      	add	r3, r2
 8019aaa:	3314      	adds	r3, #20
 8019aac:	781b      	ldrb	r3, [r3, #0]
 8019aae:	2b01      	cmp	r3, #1
 8019ab0:	d925      	bls.n	8019afe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019ab2:	4b40      	ldr	r3, [pc, #256]	; (8019bb4 <etharp_output+0x1fc>)
 8019ab4:	781b      	ldrb	r3, [r3, #0]
 8019ab6:	4619      	mov	r1, r3
 8019ab8:	4a3f      	ldr	r2, [pc, #252]	; (8019bb8 <etharp_output+0x200>)
 8019aba:	460b      	mov	r3, r1
 8019abc:	005b      	lsls	r3, r3, #1
 8019abe:	440b      	add	r3, r1
 8019ac0:	00db      	lsls	r3, r3, #3
 8019ac2:	4413      	add	r3, r2
 8019ac4:	3308      	adds	r3, #8
 8019ac6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019ac8:	68fa      	ldr	r2, [r7, #12]
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d117      	bne.n	8019afe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019ace:	69bb      	ldr	r3, [r7, #24]
 8019ad0:	681a      	ldr	r2, [r3, #0]
 8019ad2:	4b38      	ldr	r3, [pc, #224]	; (8019bb4 <etharp_output+0x1fc>)
 8019ad4:	781b      	ldrb	r3, [r3, #0]
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	4937      	ldr	r1, [pc, #220]	; (8019bb8 <etharp_output+0x200>)
 8019ada:	4603      	mov	r3, r0
 8019adc:	005b      	lsls	r3, r3, #1
 8019ade:	4403      	add	r3, r0
 8019ae0:	00db      	lsls	r3, r3, #3
 8019ae2:	440b      	add	r3, r1
 8019ae4:	3304      	adds	r3, #4
 8019ae6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019ae8:	429a      	cmp	r2, r3
 8019aea:	d108      	bne.n	8019afe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019aec:	4b31      	ldr	r3, [pc, #196]	; (8019bb4 <etharp_output+0x1fc>)
 8019aee:	781b      	ldrb	r3, [r3, #0]
 8019af0:	461a      	mov	r2, r3
 8019af2:	68b9      	ldr	r1, [r7, #8]
 8019af4:	68f8      	ldr	r0, [r7, #12]
 8019af6:	f7ff fec5 	bl	8019884 <etharp_output_to_arp_index>
 8019afa:	4603      	mov	r3, r0
 8019afc:	e04a      	b.n	8019b94 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019afe:	2300      	movs	r3, #0
 8019b00:	75fb      	strb	r3, [r7, #23]
 8019b02:	e031      	b.n	8019b68 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019b04:	7dfa      	ldrb	r2, [r7, #23]
 8019b06:	492c      	ldr	r1, [pc, #176]	; (8019bb8 <etharp_output+0x200>)
 8019b08:	4613      	mov	r3, r2
 8019b0a:	005b      	lsls	r3, r3, #1
 8019b0c:	4413      	add	r3, r2
 8019b0e:	00db      	lsls	r3, r3, #3
 8019b10:	440b      	add	r3, r1
 8019b12:	3314      	adds	r3, #20
 8019b14:	781b      	ldrb	r3, [r3, #0]
 8019b16:	2b01      	cmp	r3, #1
 8019b18:	d923      	bls.n	8019b62 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019b1a:	7dfa      	ldrb	r2, [r7, #23]
 8019b1c:	4926      	ldr	r1, [pc, #152]	; (8019bb8 <etharp_output+0x200>)
 8019b1e:	4613      	mov	r3, r2
 8019b20:	005b      	lsls	r3, r3, #1
 8019b22:	4413      	add	r3, r2
 8019b24:	00db      	lsls	r3, r3, #3
 8019b26:	440b      	add	r3, r1
 8019b28:	3308      	adds	r3, #8
 8019b2a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019b2c:	68fa      	ldr	r2, [r7, #12]
 8019b2e:	429a      	cmp	r2, r3
 8019b30:	d117      	bne.n	8019b62 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8019b32:	69bb      	ldr	r3, [r7, #24]
 8019b34:	6819      	ldr	r1, [r3, #0]
 8019b36:	7dfa      	ldrb	r2, [r7, #23]
 8019b38:	481f      	ldr	r0, [pc, #124]	; (8019bb8 <etharp_output+0x200>)
 8019b3a:	4613      	mov	r3, r2
 8019b3c:	005b      	lsls	r3, r3, #1
 8019b3e:	4413      	add	r3, r2
 8019b40:	00db      	lsls	r3, r3, #3
 8019b42:	4403      	add	r3, r0
 8019b44:	3304      	adds	r3, #4
 8019b46:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019b48:	4299      	cmp	r1, r3
 8019b4a:	d10a      	bne.n	8019b62 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019b4c:	4a19      	ldr	r2, [pc, #100]	; (8019bb4 <etharp_output+0x1fc>)
 8019b4e:	7dfb      	ldrb	r3, [r7, #23]
 8019b50:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019b52:	7dfb      	ldrb	r3, [r7, #23]
 8019b54:	461a      	mov	r2, r3
 8019b56:	68b9      	ldr	r1, [r7, #8]
 8019b58:	68f8      	ldr	r0, [r7, #12]
 8019b5a:	f7ff fe93 	bl	8019884 <etharp_output_to_arp_index>
 8019b5e:	4603      	mov	r3, r0
 8019b60:	e018      	b.n	8019b94 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019b62:	7dfb      	ldrb	r3, [r7, #23]
 8019b64:	3301      	adds	r3, #1
 8019b66:	75fb      	strb	r3, [r7, #23]
 8019b68:	7dfb      	ldrb	r3, [r7, #23]
 8019b6a:	2b09      	cmp	r3, #9
 8019b6c:	d9ca      	bls.n	8019b04 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019b6e:	68ba      	ldr	r2, [r7, #8]
 8019b70:	69b9      	ldr	r1, [r7, #24]
 8019b72:	68f8      	ldr	r0, [r7, #12]
 8019b74:	f000 f822 	bl	8019bbc <etharp_query>
 8019b78:	4603      	mov	r3, r0
 8019b7a:	e00b      	b.n	8019b94 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8019b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019b86:	9300      	str	r3, [sp, #0]
 8019b88:	69fb      	ldr	r3, [r7, #28]
 8019b8a:	68b9      	ldr	r1, [r7, #8]
 8019b8c:	68f8      	ldr	r0, [r7, #12]
 8019b8e:	f001 fd63 	bl	801b658 <ethernet_output>
 8019b92:	4603      	mov	r3, r0
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	3720      	adds	r7, #32
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}
 8019b9c:	08020ec8 	.word	0x08020ec8
 8019ba0:	08021018 	.word	0x08021018
 8019ba4:	08020f40 	.word	0x08020f40
 8019ba8:	08021068 	.word	0x08021068
 8019bac:	08021008 	.word	0x08021008
 8019bb0:	08021834 	.word	0x08021834
 8019bb4:	2000c75c 	.word	0x2000c75c
 8019bb8:	2000c66c 	.word	0x2000c66c

08019bbc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b08c      	sub	sp, #48	; 0x30
 8019bc0:	af02      	add	r7, sp, #8
 8019bc2:	60f8      	str	r0, [r7, #12]
 8019bc4:	60b9      	str	r1, [r7, #8]
 8019bc6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	332a      	adds	r3, #42	; 0x2a
 8019bcc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019bce:	23ff      	movs	r3, #255	; 0xff
 8019bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019bd8:	68bb      	ldr	r3, [r7, #8]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	68f9      	ldr	r1, [r7, #12]
 8019bde:	4618      	mov	r0, r3
 8019be0:	f000 fe2c 	bl	801a83c <ip4_addr_isbroadcast_u32>
 8019be4:	4603      	mov	r3, r0
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d10c      	bne.n	8019c04 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019bea:	68bb      	ldr	r3, [r7, #8]
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019bf2:	2be0      	cmp	r3, #224	; 0xe0
 8019bf4:	d006      	beq.n	8019c04 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019bf6:	68bb      	ldr	r3, [r7, #8]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d003      	beq.n	8019c04 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d102      	bne.n	8019c0a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019c04:	f06f 030f 	mvn.w	r3, #15
 8019c08:	e101      	b.n	8019e0e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019c0a:	68fa      	ldr	r2, [r7, #12]
 8019c0c:	2101      	movs	r1, #1
 8019c0e:	68b8      	ldr	r0, [r7, #8]
 8019c10:	f7ff fb5c 	bl	80192cc <etharp_find_entry>
 8019c14:	4603      	mov	r3, r0
 8019c16:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019c18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	da02      	bge.n	8019c26 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019c20:	8a7b      	ldrh	r3, [r7, #18]
 8019c22:	b25b      	sxtb	r3, r3
 8019c24:	e0f3      	b.n	8019e0e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019c26:	8a7b      	ldrh	r3, [r7, #18]
 8019c28:	2b7e      	cmp	r3, #126	; 0x7e
 8019c2a:	d906      	bls.n	8019c3a <etharp_query+0x7e>
 8019c2c:	4b7a      	ldr	r3, [pc, #488]	; (8019e18 <etharp_query+0x25c>)
 8019c2e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8019c32:	497a      	ldr	r1, [pc, #488]	; (8019e1c <etharp_query+0x260>)
 8019c34:	487a      	ldr	r0, [pc, #488]	; (8019e20 <etharp_query+0x264>)
 8019c36:	f002 fc6d 	bl	801c514 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019c3a:	8a7b      	ldrh	r3, [r7, #18]
 8019c3c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019c3e:	7c7a      	ldrb	r2, [r7, #17]
 8019c40:	4978      	ldr	r1, [pc, #480]	; (8019e24 <etharp_query+0x268>)
 8019c42:	4613      	mov	r3, r2
 8019c44:	005b      	lsls	r3, r3, #1
 8019c46:	4413      	add	r3, r2
 8019c48:	00db      	lsls	r3, r3, #3
 8019c4a:	440b      	add	r3, r1
 8019c4c:	3314      	adds	r3, #20
 8019c4e:	781b      	ldrb	r3, [r3, #0]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d115      	bne.n	8019c80 <etharp_query+0xc4>
    is_new_entry = 1;
 8019c54:	2301      	movs	r3, #1
 8019c56:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019c58:	7c7a      	ldrb	r2, [r7, #17]
 8019c5a:	4972      	ldr	r1, [pc, #456]	; (8019e24 <etharp_query+0x268>)
 8019c5c:	4613      	mov	r3, r2
 8019c5e:	005b      	lsls	r3, r3, #1
 8019c60:	4413      	add	r3, r2
 8019c62:	00db      	lsls	r3, r3, #3
 8019c64:	440b      	add	r3, r1
 8019c66:	3314      	adds	r3, #20
 8019c68:	2201      	movs	r2, #1
 8019c6a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019c6c:	7c7a      	ldrb	r2, [r7, #17]
 8019c6e:	496d      	ldr	r1, [pc, #436]	; (8019e24 <etharp_query+0x268>)
 8019c70:	4613      	mov	r3, r2
 8019c72:	005b      	lsls	r3, r3, #1
 8019c74:	4413      	add	r3, r2
 8019c76:	00db      	lsls	r3, r3, #3
 8019c78:	440b      	add	r3, r1
 8019c7a:	3308      	adds	r3, #8
 8019c7c:	68fa      	ldr	r2, [r7, #12]
 8019c7e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019c80:	7c7a      	ldrb	r2, [r7, #17]
 8019c82:	4968      	ldr	r1, [pc, #416]	; (8019e24 <etharp_query+0x268>)
 8019c84:	4613      	mov	r3, r2
 8019c86:	005b      	lsls	r3, r3, #1
 8019c88:	4413      	add	r3, r2
 8019c8a:	00db      	lsls	r3, r3, #3
 8019c8c:	440b      	add	r3, r1
 8019c8e:	3314      	adds	r3, #20
 8019c90:	781b      	ldrb	r3, [r3, #0]
 8019c92:	2b01      	cmp	r3, #1
 8019c94:	d011      	beq.n	8019cba <etharp_query+0xfe>
 8019c96:	7c7a      	ldrb	r2, [r7, #17]
 8019c98:	4962      	ldr	r1, [pc, #392]	; (8019e24 <etharp_query+0x268>)
 8019c9a:	4613      	mov	r3, r2
 8019c9c:	005b      	lsls	r3, r3, #1
 8019c9e:	4413      	add	r3, r2
 8019ca0:	00db      	lsls	r3, r3, #3
 8019ca2:	440b      	add	r3, r1
 8019ca4:	3314      	adds	r3, #20
 8019ca6:	781b      	ldrb	r3, [r3, #0]
 8019ca8:	2b01      	cmp	r3, #1
 8019caa:	d806      	bhi.n	8019cba <etharp_query+0xfe>
 8019cac:	4b5a      	ldr	r3, [pc, #360]	; (8019e18 <etharp_query+0x25c>)
 8019cae:	f240 32cd 	movw	r2, #973	; 0x3cd
 8019cb2:	495d      	ldr	r1, [pc, #372]	; (8019e28 <etharp_query+0x26c>)
 8019cb4:	485a      	ldr	r0, [pc, #360]	; (8019e20 <etharp_query+0x264>)
 8019cb6:	f002 fc2d 	bl	801c514 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019cba:	6a3b      	ldr	r3, [r7, #32]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d102      	bne.n	8019cc6 <etharp_query+0x10a>
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d10c      	bne.n	8019ce0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019cc6:	68b9      	ldr	r1, [r7, #8]
 8019cc8:	68f8      	ldr	r0, [r7, #12]
 8019cca:	f000 f963 	bl	8019f94 <etharp_request>
 8019cce:	4603      	mov	r3, r0
 8019cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d102      	bne.n	8019ce0 <etharp_query+0x124>
      return result;
 8019cda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019cde:	e096      	b.n	8019e0e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d106      	bne.n	8019cf4 <etharp_query+0x138>
 8019ce6:	4b4c      	ldr	r3, [pc, #304]	; (8019e18 <etharp_query+0x25c>)
 8019ce8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019cec:	494f      	ldr	r1, [pc, #316]	; (8019e2c <etharp_query+0x270>)
 8019cee:	484c      	ldr	r0, [pc, #304]	; (8019e20 <etharp_query+0x264>)
 8019cf0:	f002 fc10 	bl	801c514 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019cf4:	7c7a      	ldrb	r2, [r7, #17]
 8019cf6:	494b      	ldr	r1, [pc, #300]	; (8019e24 <etharp_query+0x268>)
 8019cf8:	4613      	mov	r3, r2
 8019cfa:	005b      	lsls	r3, r3, #1
 8019cfc:	4413      	add	r3, r2
 8019cfe:	00db      	lsls	r3, r3, #3
 8019d00:	440b      	add	r3, r1
 8019d02:	3314      	adds	r3, #20
 8019d04:	781b      	ldrb	r3, [r3, #0]
 8019d06:	2b01      	cmp	r3, #1
 8019d08:	d917      	bls.n	8019d3a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019d0a:	4a49      	ldr	r2, [pc, #292]	; (8019e30 <etharp_query+0x274>)
 8019d0c:	7c7b      	ldrb	r3, [r7, #17]
 8019d0e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019d10:	7c7a      	ldrb	r2, [r7, #17]
 8019d12:	4613      	mov	r3, r2
 8019d14:	005b      	lsls	r3, r3, #1
 8019d16:	4413      	add	r3, r2
 8019d18:	00db      	lsls	r3, r3, #3
 8019d1a:	3308      	adds	r3, #8
 8019d1c:	4a41      	ldr	r2, [pc, #260]	; (8019e24 <etharp_query+0x268>)
 8019d1e:	4413      	add	r3, r2
 8019d20:	3304      	adds	r3, #4
 8019d22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019d26:	9200      	str	r2, [sp, #0]
 8019d28:	697a      	ldr	r2, [r7, #20]
 8019d2a:	6879      	ldr	r1, [r7, #4]
 8019d2c:	68f8      	ldr	r0, [r7, #12]
 8019d2e:	f001 fc93 	bl	801b658 <ethernet_output>
 8019d32:	4603      	mov	r3, r0
 8019d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019d38:	e067      	b.n	8019e0a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019d3a:	7c7a      	ldrb	r2, [r7, #17]
 8019d3c:	4939      	ldr	r1, [pc, #228]	; (8019e24 <etharp_query+0x268>)
 8019d3e:	4613      	mov	r3, r2
 8019d40:	005b      	lsls	r3, r3, #1
 8019d42:	4413      	add	r3, r2
 8019d44:	00db      	lsls	r3, r3, #3
 8019d46:	440b      	add	r3, r1
 8019d48:	3314      	adds	r3, #20
 8019d4a:	781b      	ldrb	r3, [r3, #0]
 8019d4c:	2b01      	cmp	r3, #1
 8019d4e:	d15c      	bne.n	8019e0a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019d50:	2300      	movs	r3, #0
 8019d52:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019d58:	e01c      	b.n	8019d94 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019d5a:	69fb      	ldr	r3, [r7, #28]
 8019d5c:	895a      	ldrh	r2, [r3, #10]
 8019d5e:	69fb      	ldr	r3, [r7, #28]
 8019d60:	891b      	ldrh	r3, [r3, #8]
 8019d62:	429a      	cmp	r2, r3
 8019d64:	d10a      	bne.n	8019d7c <etharp_query+0x1c0>
 8019d66:	69fb      	ldr	r3, [r7, #28]
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d006      	beq.n	8019d7c <etharp_query+0x1c0>
 8019d6e:	4b2a      	ldr	r3, [pc, #168]	; (8019e18 <etharp_query+0x25c>)
 8019d70:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019d74:	492f      	ldr	r1, [pc, #188]	; (8019e34 <etharp_query+0x278>)
 8019d76:	482a      	ldr	r0, [pc, #168]	; (8019e20 <etharp_query+0x264>)
 8019d78:	f002 fbcc 	bl	801c514 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019d7c:	69fb      	ldr	r3, [r7, #28]
 8019d7e:	7b1b      	ldrb	r3, [r3, #12]
 8019d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d002      	beq.n	8019d8e <etharp_query+0x1d2>
        copy_needed = 1;
 8019d88:	2301      	movs	r3, #1
 8019d8a:	61bb      	str	r3, [r7, #24]
        break;
 8019d8c:	e005      	b.n	8019d9a <etharp_query+0x1de>
      }
      p = p->next;
 8019d8e:	69fb      	ldr	r3, [r7, #28]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019d94:	69fb      	ldr	r3, [r7, #28]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d1df      	bne.n	8019d5a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019d9a:	69bb      	ldr	r3, [r7, #24]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d007      	beq.n	8019db0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019da0:	687a      	ldr	r2, [r7, #4]
 8019da2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019da6:	200e      	movs	r0, #14
 8019da8:	f7f7 fb60 	bl	801146c <pbuf_clone>
 8019dac:	61f8      	str	r0, [r7, #28]
 8019dae:	e004      	b.n	8019dba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019db4:	69f8      	ldr	r0, [r7, #28]
 8019db6:	f7f7 f987 	bl	80110c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019dba:	69fb      	ldr	r3, [r7, #28]
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d021      	beq.n	8019e04 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019dc0:	7c7a      	ldrb	r2, [r7, #17]
 8019dc2:	4918      	ldr	r1, [pc, #96]	; (8019e24 <etharp_query+0x268>)
 8019dc4:	4613      	mov	r3, r2
 8019dc6:	005b      	lsls	r3, r3, #1
 8019dc8:	4413      	add	r3, r2
 8019dca:	00db      	lsls	r3, r3, #3
 8019dcc:	440b      	add	r3, r1
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d00a      	beq.n	8019dea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019dd4:	7c7a      	ldrb	r2, [r7, #17]
 8019dd6:	4913      	ldr	r1, [pc, #76]	; (8019e24 <etharp_query+0x268>)
 8019dd8:	4613      	mov	r3, r2
 8019dda:	005b      	lsls	r3, r3, #1
 8019ddc:	4413      	add	r3, r2
 8019dde:	00db      	lsls	r3, r3, #3
 8019de0:	440b      	add	r3, r1
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	4618      	mov	r0, r3
 8019de6:	f7f7 f8c9 	bl	8010f7c <pbuf_free>
      }
      arp_table[i].q = p;
 8019dea:	7c7a      	ldrb	r2, [r7, #17]
 8019dec:	490d      	ldr	r1, [pc, #52]	; (8019e24 <etharp_query+0x268>)
 8019dee:	4613      	mov	r3, r2
 8019df0:	005b      	lsls	r3, r3, #1
 8019df2:	4413      	add	r3, r2
 8019df4:	00db      	lsls	r3, r3, #3
 8019df6:	440b      	add	r3, r1
 8019df8:	69fa      	ldr	r2, [r7, #28]
 8019dfa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019dfc:	2300      	movs	r3, #0
 8019dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019e02:	e002      	b.n	8019e0a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019e04:	23ff      	movs	r3, #255	; 0xff
 8019e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019e0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019e0e:	4618      	mov	r0, r3
 8019e10:	3728      	adds	r7, #40	; 0x28
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bd80      	pop	{r7, pc}
 8019e16:	bf00      	nop
 8019e18:	08020ec8 	.word	0x08020ec8
 8019e1c:	08021074 	.word	0x08021074
 8019e20:	08020f40 	.word	0x08020f40
 8019e24:	2000c66c 	.word	0x2000c66c
 8019e28:	08021084 	.word	0x08021084
 8019e2c:	08021068 	.word	0x08021068
 8019e30:	2000c75c 	.word	0x2000c75c
 8019e34:	080210ac 	.word	0x080210ac

08019e38 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b08a      	sub	sp, #40	; 0x28
 8019e3c:	af02      	add	r7, sp, #8
 8019e3e:	60f8      	str	r0, [r7, #12]
 8019e40:	60b9      	str	r1, [r7, #8]
 8019e42:	607a      	str	r2, [r7, #4]
 8019e44:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019e46:	2300      	movs	r3, #0
 8019e48:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d106      	bne.n	8019e5e <etharp_raw+0x26>
 8019e50:	4b3a      	ldr	r3, [pc, #232]	; (8019f3c <etharp_raw+0x104>)
 8019e52:	f240 4257 	movw	r2, #1111	; 0x457
 8019e56:	493a      	ldr	r1, [pc, #232]	; (8019f40 <etharp_raw+0x108>)
 8019e58:	483a      	ldr	r0, [pc, #232]	; (8019f44 <etharp_raw+0x10c>)
 8019e5a:	f002 fb5b 	bl	801c514 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019e5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019e62:	211c      	movs	r1, #28
 8019e64:	200e      	movs	r0, #14
 8019e66:	f7f6 fda5 	bl	80109b4 <pbuf_alloc>
 8019e6a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019e6c:	69bb      	ldr	r3, [r7, #24]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d102      	bne.n	8019e78 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e76:	e05d      	b.n	8019f34 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019e78:	69bb      	ldr	r3, [r7, #24]
 8019e7a:	895b      	ldrh	r3, [r3, #10]
 8019e7c:	2b1b      	cmp	r3, #27
 8019e7e:	d806      	bhi.n	8019e8e <etharp_raw+0x56>
 8019e80:	4b2e      	ldr	r3, [pc, #184]	; (8019f3c <etharp_raw+0x104>)
 8019e82:	f240 4262 	movw	r2, #1122	; 0x462
 8019e86:	4930      	ldr	r1, [pc, #192]	; (8019f48 <etharp_raw+0x110>)
 8019e88:	482e      	ldr	r0, [pc, #184]	; (8019f44 <etharp_raw+0x10c>)
 8019e8a:	f002 fb43 	bl	801c514 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019e8e:	69bb      	ldr	r3, [r7, #24]
 8019e90:	685b      	ldr	r3, [r3, #4]
 8019e92:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019e94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019e96:	4618      	mov	r0, r3
 8019e98:	f7f5 fc72 	bl	800f780 <lwip_htons>
 8019e9c:	4603      	mov	r3, r0
 8019e9e:	461a      	mov	r2, r3
 8019ea0:	697b      	ldr	r3, [r7, #20]
 8019ea2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019eaa:	2b06      	cmp	r3, #6
 8019eac:	d006      	beq.n	8019ebc <etharp_raw+0x84>
 8019eae:	4b23      	ldr	r3, [pc, #140]	; (8019f3c <etharp_raw+0x104>)
 8019eb0:	f240 4269 	movw	r2, #1129	; 0x469
 8019eb4:	4925      	ldr	r1, [pc, #148]	; (8019f4c <etharp_raw+0x114>)
 8019eb6:	4823      	ldr	r0, [pc, #140]	; (8019f44 <etharp_raw+0x10c>)
 8019eb8:	f002 fb2c 	bl	801c514 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019ebc:	697b      	ldr	r3, [r7, #20]
 8019ebe:	3308      	adds	r3, #8
 8019ec0:	2206      	movs	r2, #6
 8019ec2:	6839      	ldr	r1, [r7, #0]
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	f002 fdbe 	bl	801ca46 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019eca:	697b      	ldr	r3, [r7, #20]
 8019ecc:	3312      	adds	r3, #18
 8019ece:	2206      	movs	r2, #6
 8019ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	f002 fdb7 	bl	801ca46 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019ed8:	697b      	ldr	r3, [r7, #20]
 8019eda:	330e      	adds	r3, #14
 8019edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019ede:	6812      	ldr	r2, [r2, #0]
 8019ee0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	3318      	adds	r3, #24
 8019ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019ee8:	6812      	ldr	r2, [r2, #0]
 8019eea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019eec:	697b      	ldr	r3, [r7, #20]
 8019eee:	2200      	movs	r2, #0
 8019ef0:	701a      	strb	r2, [r3, #0]
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	f042 0201 	orr.w	r2, r2, #1
 8019ef8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019efa:	697b      	ldr	r3, [r7, #20]
 8019efc:	2200      	movs	r2, #0
 8019efe:	f042 0208 	orr.w	r2, r2, #8
 8019f02:	709a      	strb	r2, [r3, #2]
 8019f04:	2200      	movs	r2, #0
 8019f06:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019f08:	697b      	ldr	r3, [r7, #20]
 8019f0a:	2206      	movs	r2, #6
 8019f0c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019f0e:	697b      	ldr	r3, [r7, #20]
 8019f10:	2204      	movs	r2, #4
 8019f12:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019f14:	f640 0306 	movw	r3, #2054	; 0x806
 8019f18:	9300      	str	r3, [sp, #0]
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	68ba      	ldr	r2, [r7, #8]
 8019f1e:	69b9      	ldr	r1, [r7, #24]
 8019f20:	68f8      	ldr	r0, [r7, #12]
 8019f22:	f001 fb99 	bl	801b658 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019f26:	69b8      	ldr	r0, [r7, #24]
 8019f28:	f7f7 f828 	bl	8010f7c <pbuf_free>
  p = NULL;
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019f30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019f34:	4618      	mov	r0, r3
 8019f36:	3720      	adds	r7, #32
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	bd80      	pop	{r7, pc}
 8019f3c:	08020ec8 	.word	0x08020ec8
 8019f40:	08021018 	.word	0x08021018
 8019f44:	08020f40 	.word	0x08020f40
 8019f48:	080210c8 	.word	0x080210c8
 8019f4c:	080210fc 	.word	0x080210fc

08019f50 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b088      	sub	sp, #32
 8019f54:	af04      	add	r7, sp, #16
 8019f56:	60f8      	str	r0, [r7, #12]
 8019f58:	60b9      	str	r1, [r7, #8]
 8019f5a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019f6c:	2201      	movs	r2, #1
 8019f6e:	9203      	str	r2, [sp, #12]
 8019f70:	68ba      	ldr	r2, [r7, #8]
 8019f72:	9202      	str	r2, [sp, #8]
 8019f74:	4a06      	ldr	r2, [pc, #24]	; (8019f90 <etharp_request_dst+0x40>)
 8019f76:	9201      	str	r2, [sp, #4]
 8019f78:	9300      	str	r3, [sp, #0]
 8019f7a:	4603      	mov	r3, r0
 8019f7c:	687a      	ldr	r2, [r7, #4]
 8019f7e:	68f8      	ldr	r0, [r7, #12]
 8019f80:	f7ff ff5a 	bl	8019e38 <etharp_raw>
 8019f84:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	3710      	adds	r7, #16
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}
 8019f8e:	bf00      	nop
 8019f90:	0802183c 	.word	0x0802183c

08019f94 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b082      	sub	sp, #8
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
 8019f9c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019f9e:	4a05      	ldr	r2, [pc, #20]	; (8019fb4 <etharp_request+0x20>)
 8019fa0:	6839      	ldr	r1, [r7, #0]
 8019fa2:	6878      	ldr	r0, [r7, #4]
 8019fa4:	f7ff ffd4 	bl	8019f50 <etharp_request_dst>
 8019fa8:	4603      	mov	r3, r0
}
 8019faa:	4618      	mov	r0, r3
 8019fac:	3708      	adds	r7, #8
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd80      	pop	{r7, pc}
 8019fb2:	bf00      	nop
 8019fb4:	08021834 	.word	0x08021834

08019fb8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b08e      	sub	sp, #56	; 0x38
 8019fbc:	af04      	add	r7, sp, #16
 8019fbe:	6078      	str	r0, [r7, #4]
 8019fc0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019fc2:	4b79      	ldr	r3, [pc, #484]	; (801a1a8 <icmp_input+0x1f0>)
 8019fc4:	689b      	ldr	r3, [r3, #8]
 8019fc6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fca:	781b      	ldrb	r3, [r3, #0]
 8019fcc:	f003 030f 	and.w	r3, r3, #15
 8019fd0:	b2db      	uxtb	r3, r3
 8019fd2:	009b      	lsls	r3, r3, #2
 8019fd4:	b2db      	uxtb	r3, r3
 8019fd6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019fd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019fda:	2b13      	cmp	r3, #19
 8019fdc:	f240 80cd 	bls.w	801a17a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	895b      	ldrh	r3, [r3, #10]
 8019fe4:	2b03      	cmp	r3, #3
 8019fe6:	f240 80ca 	bls.w	801a17e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	685b      	ldr	r3, [r3, #4]
 8019fee:	781b      	ldrb	r3, [r3, #0]
 8019ff0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019ff4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	f000 80b7 	beq.w	801a16c <icmp_input+0x1b4>
 8019ffe:	2b08      	cmp	r3, #8
 801a000:	f040 80b7 	bne.w	801a172 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a004:	4b69      	ldr	r3, [pc, #420]	; (801a1ac <icmp_input+0x1f4>)
 801a006:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a008:	4b67      	ldr	r3, [pc, #412]	; (801a1a8 <icmp_input+0x1f0>)
 801a00a:	695b      	ldr	r3, [r3, #20]
 801a00c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a010:	2be0      	cmp	r3, #224	; 0xe0
 801a012:	f000 80bb 	beq.w	801a18c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a016:	4b64      	ldr	r3, [pc, #400]	; (801a1a8 <icmp_input+0x1f0>)
 801a018:	695b      	ldr	r3, [r3, #20]
 801a01a:	4a63      	ldr	r2, [pc, #396]	; (801a1a8 <icmp_input+0x1f0>)
 801a01c:	6812      	ldr	r2, [r2, #0]
 801a01e:	4611      	mov	r1, r2
 801a020:	4618      	mov	r0, r3
 801a022:	f000 fc0b 	bl	801a83c <ip4_addr_isbroadcast_u32>
 801a026:	4603      	mov	r3, r0
 801a028:	2b00      	cmp	r3, #0
 801a02a:	f040 80b1 	bne.w	801a190 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	891b      	ldrh	r3, [r3, #8]
 801a032:	2b07      	cmp	r3, #7
 801a034:	f240 80a5 	bls.w	801a182 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a03a:	330e      	adds	r3, #14
 801a03c:	4619      	mov	r1, r3
 801a03e:	6878      	ldr	r0, [r7, #4]
 801a040:	f7f6 ff06 	bl	8010e50 <pbuf_add_header>
 801a044:	4603      	mov	r3, r0
 801a046:	2b00      	cmp	r3, #0
 801a048:	d04b      	beq.n	801a0e2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	891a      	ldrh	r2, [r3, #8]
 801a04e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a050:	4413      	add	r3, r2
 801a052:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	891b      	ldrh	r3, [r3, #8]
 801a058:	8b7a      	ldrh	r2, [r7, #26]
 801a05a:	429a      	cmp	r2, r3
 801a05c:	f0c0 809a 	bcc.w	801a194 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a060:	8b7b      	ldrh	r3, [r7, #26]
 801a062:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a066:	4619      	mov	r1, r3
 801a068:	200e      	movs	r0, #14
 801a06a:	f7f6 fca3 	bl	80109b4 <pbuf_alloc>
 801a06e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a070:	697b      	ldr	r3, [r7, #20]
 801a072:	2b00      	cmp	r3, #0
 801a074:	f000 8090 	beq.w	801a198 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a078:	697b      	ldr	r3, [r7, #20]
 801a07a:	895b      	ldrh	r3, [r3, #10]
 801a07c:	461a      	mov	r2, r3
 801a07e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a080:	3308      	adds	r3, #8
 801a082:	429a      	cmp	r2, r3
 801a084:	d203      	bcs.n	801a08e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801a086:	6978      	ldr	r0, [r7, #20]
 801a088:	f7f6 ff78 	bl	8010f7c <pbuf_free>
          goto icmperr;
 801a08c:	e085      	b.n	801a19a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a08e:	697b      	ldr	r3, [r7, #20]
 801a090:	685b      	ldr	r3, [r3, #4]
 801a092:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a096:	4618      	mov	r0, r3
 801a098:	f002 fcd5 	bl	801ca46 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a09c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a09e:	4619      	mov	r1, r3
 801a0a0:	6978      	ldr	r0, [r7, #20]
 801a0a2:	f7f6 fee5 	bl	8010e70 <pbuf_remove_header>
 801a0a6:	4603      	mov	r3, r0
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d009      	beq.n	801a0c0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a0ac:	4b40      	ldr	r3, [pc, #256]	; (801a1b0 <icmp_input+0x1f8>)
 801a0ae:	22b6      	movs	r2, #182	; 0xb6
 801a0b0:	4940      	ldr	r1, [pc, #256]	; (801a1b4 <icmp_input+0x1fc>)
 801a0b2:	4841      	ldr	r0, [pc, #260]	; (801a1b8 <icmp_input+0x200>)
 801a0b4:	f002 fa2e 	bl	801c514 <iprintf>
          pbuf_free(r);
 801a0b8:	6978      	ldr	r0, [r7, #20]
 801a0ba:	f7f6 ff5f 	bl	8010f7c <pbuf_free>
          goto icmperr;
 801a0be:	e06c      	b.n	801a19a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a0c0:	6879      	ldr	r1, [r7, #4]
 801a0c2:	6978      	ldr	r0, [r7, #20]
 801a0c4:	f7f7 f88e 	bl	80111e4 <pbuf_copy>
 801a0c8:	4603      	mov	r3, r0
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d003      	beq.n	801a0d6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801a0ce:	6978      	ldr	r0, [r7, #20]
 801a0d0:	f7f6 ff54 	bl	8010f7c <pbuf_free>
          goto icmperr;
 801a0d4:	e061      	b.n	801a19a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801a0d6:	6878      	ldr	r0, [r7, #4]
 801a0d8:	f7f6 ff50 	bl	8010f7c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a0dc:	697b      	ldr	r3, [r7, #20]
 801a0de:	607b      	str	r3, [r7, #4]
 801a0e0:	e00f      	b.n	801a102 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a0e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a0e4:	330e      	adds	r3, #14
 801a0e6:	4619      	mov	r1, r3
 801a0e8:	6878      	ldr	r0, [r7, #4]
 801a0ea:	f7f6 fec1 	bl	8010e70 <pbuf_remove_header>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d006      	beq.n	801a102 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a0f4:	4b2e      	ldr	r3, [pc, #184]	; (801a1b0 <icmp_input+0x1f8>)
 801a0f6:	22c7      	movs	r2, #199	; 0xc7
 801a0f8:	4930      	ldr	r1, [pc, #192]	; (801a1bc <icmp_input+0x204>)
 801a0fa:	482f      	ldr	r0, [pc, #188]	; (801a1b8 <icmp_input+0x200>)
 801a0fc:	f002 fa0a 	bl	801c514 <iprintf>
          goto icmperr;
 801a100:	e04b      	b.n	801a19a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	685b      	ldr	r3, [r3, #4]
 801a106:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a108:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a10a:	4619      	mov	r1, r3
 801a10c:	6878      	ldr	r0, [r7, #4]
 801a10e:	f7f6 fe9f 	bl	8010e50 <pbuf_add_header>
 801a112:	4603      	mov	r3, r0
 801a114:	2b00      	cmp	r3, #0
 801a116:	d12b      	bne.n	801a170 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	685b      	ldr	r3, [r3, #4]
 801a11c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a11e:	69fb      	ldr	r3, [r7, #28]
 801a120:	681a      	ldr	r2, [r3, #0]
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a126:	4b20      	ldr	r3, [pc, #128]	; (801a1a8 <icmp_input+0x1f0>)
 801a128:	691a      	ldr	r2, [r3, #16]
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a12e:	693b      	ldr	r3, [r7, #16]
 801a130:	2200      	movs	r2, #0
 801a132:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801a134:	693b      	ldr	r3, [r7, #16]
 801a136:	2200      	movs	r2, #0
 801a138:	709a      	strb	r2, [r3, #2]
 801a13a:	2200      	movs	r2, #0
 801a13c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a13e:	68fb      	ldr	r3, [r7, #12]
 801a140:	22ff      	movs	r2, #255	; 0xff
 801a142:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	2200      	movs	r2, #0
 801a148:	729a      	strb	r2, [r3, #10]
 801a14a:	2200      	movs	r2, #0
 801a14c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a14e:	683b      	ldr	r3, [r7, #0]
 801a150:	9302      	str	r3, [sp, #8]
 801a152:	2301      	movs	r3, #1
 801a154:	9301      	str	r3, [sp, #4]
 801a156:	2300      	movs	r3, #0
 801a158:	9300      	str	r3, [sp, #0]
 801a15a:	23ff      	movs	r3, #255	; 0xff
 801a15c:	2200      	movs	r2, #0
 801a15e:	69f9      	ldr	r1, [r7, #28]
 801a160:	6878      	ldr	r0, [r7, #4]
 801a162:	f000 fa93 	bl	801a68c <ip4_output_if>
 801a166:	4603      	mov	r3, r0
 801a168:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a16a:	e001      	b.n	801a170 <icmp_input+0x1b8>
      break;
 801a16c:	bf00      	nop
 801a16e:	e000      	b.n	801a172 <icmp_input+0x1ba>
      break;
 801a170:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a172:	6878      	ldr	r0, [r7, #4]
 801a174:	f7f6 ff02 	bl	8010f7c <pbuf_free>
  return;
 801a178:	e013      	b.n	801a1a2 <icmp_input+0x1ea>
    goto lenerr;
 801a17a:	bf00      	nop
 801a17c:	e002      	b.n	801a184 <icmp_input+0x1cc>
    goto lenerr;
 801a17e:	bf00      	nop
 801a180:	e000      	b.n	801a184 <icmp_input+0x1cc>
        goto lenerr;
 801a182:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a184:	6878      	ldr	r0, [r7, #4]
 801a186:	f7f6 fef9 	bl	8010f7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a18a:	e00a      	b.n	801a1a2 <icmp_input+0x1ea>
        goto icmperr;
 801a18c:	bf00      	nop
 801a18e:	e004      	b.n	801a19a <icmp_input+0x1e2>
        goto icmperr;
 801a190:	bf00      	nop
 801a192:	e002      	b.n	801a19a <icmp_input+0x1e2>
          goto icmperr;
 801a194:	bf00      	nop
 801a196:	e000      	b.n	801a19a <icmp_input+0x1e2>
          goto icmperr;
 801a198:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a19a:	6878      	ldr	r0, [r7, #4]
 801a19c:	f7f6 feee 	bl	8010f7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a1a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a1a2:	3728      	adds	r7, #40	; 0x28
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}
 801a1a8:	20008e64 	.word	0x20008e64
 801a1ac:	20008e78 	.word	0x20008e78
 801a1b0:	08021140 	.word	0x08021140
 801a1b4:	08021178 	.word	0x08021178
 801a1b8:	080211b0 	.word	0x080211b0
 801a1bc:	080211d8 	.word	0x080211d8

0801a1c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b082      	sub	sp, #8
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
 801a1c8:	460b      	mov	r3, r1
 801a1ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a1cc:	78fb      	ldrb	r3, [r7, #3]
 801a1ce:	461a      	mov	r2, r3
 801a1d0:	2103      	movs	r1, #3
 801a1d2:	6878      	ldr	r0, [r7, #4]
 801a1d4:	f000 f814 	bl	801a200 <icmp_send_response>
}
 801a1d8:	bf00      	nop
 801a1da:	3708      	adds	r7, #8
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	bd80      	pop	{r7, pc}

0801a1e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b082      	sub	sp, #8
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
 801a1e8:	460b      	mov	r3, r1
 801a1ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a1ec:	78fb      	ldrb	r3, [r7, #3]
 801a1ee:	461a      	mov	r2, r3
 801a1f0:	210b      	movs	r1, #11
 801a1f2:	6878      	ldr	r0, [r7, #4]
 801a1f4:	f000 f804 	bl	801a200 <icmp_send_response>
}
 801a1f8:	bf00      	nop
 801a1fa:	3708      	adds	r7, #8
 801a1fc:	46bd      	mov	sp, r7
 801a1fe:	bd80      	pop	{r7, pc}

0801a200 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a200:	b580      	push	{r7, lr}
 801a202:	b08c      	sub	sp, #48	; 0x30
 801a204:	af04      	add	r7, sp, #16
 801a206:	6078      	str	r0, [r7, #4]
 801a208:	460b      	mov	r3, r1
 801a20a:	70fb      	strb	r3, [r7, #3]
 801a20c:	4613      	mov	r3, r2
 801a20e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801a210:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a214:	2124      	movs	r1, #36	; 0x24
 801a216:	2022      	movs	r0, #34	; 0x22
 801a218:	f7f6 fbcc 	bl	80109b4 <pbuf_alloc>
 801a21c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801a21e:	69fb      	ldr	r3, [r7, #28]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d04c      	beq.n	801a2be <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801a224:	69fb      	ldr	r3, [r7, #28]
 801a226:	895b      	ldrh	r3, [r3, #10]
 801a228:	2b23      	cmp	r3, #35	; 0x23
 801a22a:	d806      	bhi.n	801a23a <icmp_send_response+0x3a>
 801a22c:	4b26      	ldr	r3, [pc, #152]	; (801a2c8 <icmp_send_response+0xc8>)
 801a22e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801a232:	4926      	ldr	r1, [pc, #152]	; (801a2cc <icmp_send_response+0xcc>)
 801a234:	4826      	ldr	r0, [pc, #152]	; (801a2d0 <icmp_send_response+0xd0>)
 801a236:	f002 f96d 	bl	801c514 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	685b      	ldr	r3, [r3, #4]
 801a23e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801a240:	69fb      	ldr	r3, [r7, #28]
 801a242:	685b      	ldr	r3, [r3, #4]
 801a244:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801a246:	697b      	ldr	r3, [r7, #20]
 801a248:	78fa      	ldrb	r2, [r7, #3]
 801a24a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801a24c:	697b      	ldr	r3, [r7, #20]
 801a24e:	78ba      	ldrb	r2, [r7, #2]
 801a250:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801a252:	697b      	ldr	r3, [r7, #20]
 801a254:	2200      	movs	r2, #0
 801a256:	711a      	strb	r2, [r3, #4]
 801a258:	2200      	movs	r2, #0
 801a25a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801a25c:	697b      	ldr	r3, [r7, #20]
 801a25e:	2200      	movs	r2, #0
 801a260:	719a      	strb	r2, [r3, #6]
 801a262:	2200      	movs	r2, #0
 801a264:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801a266:	69fb      	ldr	r3, [r7, #28]
 801a268:	685b      	ldr	r3, [r3, #4]
 801a26a:	f103 0008 	add.w	r0, r3, #8
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	685b      	ldr	r3, [r3, #4]
 801a272:	221c      	movs	r2, #28
 801a274:	4619      	mov	r1, r3
 801a276:	f002 fbe6 	bl	801ca46 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801a27a:	69bb      	ldr	r3, [r7, #24]
 801a27c:	68db      	ldr	r3, [r3, #12]
 801a27e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801a280:	f107 030c 	add.w	r3, r7, #12
 801a284:	4618      	mov	r0, r3
 801a286:	f000 f825 	bl	801a2d4 <ip4_route>
 801a28a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801a28c:	693b      	ldr	r3, [r7, #16]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d011      	beq.n	801a2b6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801a292:	697b      	ldr	r3, [r7, #20]
 801a294:	2200      	movs	r2, #0
 801a296:	709a      	strb	r2, [r3, #2]
 801a298:	2200      	movs	r2, #0
 801a29a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801a29c:	f107 020c 	add.w	r2, r7, #12
 801a2a0:	693b      	ldr	r3, [r7, #16]
 801a2a2:	9302      	str	r3, [sp, #8]
 801a2a4:	2301      	movs	r3, #1
 801a2a6:	9301      	str	r3, [sp, #4]
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	9300      	str	r3, [sp, #0]
 801a2ac:	23ff      	movs	r3, #255	; 0xff
 801a2ae:	2100      	movs	r1, #0
 801a2b0:	69f8      	ldr	r0, [r7, #28]
 801a2b2:	f000 f9eb 	bl	801a68c <ip4_output_if>
  }
  pbuf_free(q);
 801a2b6:	69f8      	ldr	r0, [r7, #28]
 801a2b8:	f7f6 fe60 	bl	8010f7c <pbuf_free>
 801a2bc:	e000      	b.n	801a2c0 <icmp_send_response+0xc0>
    return;
 801a2be:	bf00      	nop
}
 801a2c0:	3720      	adds	r7, #32
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	bd80      	pop	{r7, pc}
 801a2c6:	bf00      	nop
 801a2c8:	08021140 	.word	0x08021140
 801a2cc:	0802120c 	.word	0x0802120c
 801a2d0:	080211b0 	.word	0x080211b0

0801a2d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801a2d4:	b480      	push	{r7}
 801a2d6:	b085      	sub	sp, #20
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801a2dc:	4b33      	ldr	r3, [pc, #204]	; (801a3ac <ip4_route+0xd8>)
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	60fb      	str	r3, [r7, #12]
 801a2e2:	e036      	b.n	801a352 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a2ea:	f003 0301 	and.w	r3, r3, #1
 801a2ee:	b2db      	uxtb	r3, r3
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d02b      	beq.n	801a34c <ip4_route+0x78>
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a2fa:	089b      	lsrs	r3, r3, #2
 801a2fc:	f003 0301 	and.w	r3, r3, #1
 801a300:	b2db      	uxtb	r3, r3
 801a302:	2b00      	cmp	r3, #0
 801a304:	d022      	beq.n	801a34c <ip4_route+0x78>
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	3304      	adds	r3, #4
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d01d      	beq.n	801a34c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	681a      	ldr	r2, [r3, #0]
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	3304      	adds	r3, #4
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	405a      	eors	r2, r3
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	3308      	adds	r3, #8
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	4013      	ands	r3, r2
 801a324:	2b00      	cmp	r3, #0
 801a326:	d101      	bne.n	801a32c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	e038      	b.n	801a39e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a332:	f003 0302 	and.w	r3, r3, #2
 801a336:	2b00      	cmp	r3, #0
 801a338:	d108      	bne.n	801a34c <ip4_route+0x78>
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681a      	ldr	r2, [r3, #0]
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	330c      	adds	r3, #12
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	429a      	cmp	r2, r3
 801a346:	d101      	bne.n	801a34c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	e028      	b.n	801a39e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	60fb      	str	r3, [r7, #12]
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	2b00      	cmp	r3, #0
 801a356:	d1c5      	bne.n	801a2e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a358:	4b15      	ldr	r3, [pc, #84]	; (801a3b0 <ip4_route+0xdc>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d01a      	beq.n	801a396 <ip4_route+0xc2>
 801a360:	4b13      	ldr	r3, [pc, #76]	; (801a3b0 <ip4_route+0xdc>)
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a368:	f003 0301 	and.w	r3, r3, #1
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d012      	beq.n	801a396 <ip4_route+0xc2>
 801a370:	4b0f      	ldr	r3, [pc, #60]	; (801a3b0 <ip4_route+0xdc>)
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a378:	f003 0304 	and.w	r3, r3, #4
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d00a      	beq.n	801a396 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a380:	4b0b      	ldr	r3, [pc, #44]	; (801a3b0 <ip4_route+0xdc>)
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	3304      	adds	r3, #4
 801a386:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d004      	beq.n	801a396 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	b2db      	uxtb	r3, r3
 801a392:	2b7f      	cmp	r3, #127	; 0x7f
 801a394:	d101      	bne.n	801a39a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801a396:	2300      	movs	r3, #0
 801a398:	e001      	b.n	801a39e <ip4_route+0xca>
  }

  return netif_default;
 801a39a:	4b05      	ldr	r3, [pc, #20]	; (801a3b0 <ip4_route+0xdc>)
 801a39c:	681b      	ldr	r3, [r3, #0]
}
 801a39e:	4618      	mov	r0, r3
 801a3a0:	3714      	adds	r7, #20
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a8:	4770      	bx	lr
 801a3aa:	bf00      	nop
 801a3ac:	2000c5cc 	.word	0x2000c5cc
 801a3b0:	2000c5d0 	.word	0x2000c5d0

0801a3b4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b082      	sub	sp, #8
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a3c2:	f003 0301 	and.w	r3, r3, #1
 801a3c6:	b2db      	uxtb	r3, r3
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d016      	beq.n	801a3fa <ip4_input_accept+0x46>
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	3304      	adds	r3, #4
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d011      	beq.n	801a3fa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a3d6:	4b0b      	ldr	r3, [pc, #44]	; (801a404 <ip4_input_accept+0x50>)
 801a3d8:	695a      	ldr	r2, [r3, #20]
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	3304      	adds	r3, #4
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	429a      	cmp	r2, r3
 801a3e2:	d008      	beq.n	801a3f6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801a3e4:	4b07      	ldr	r3, [pc, #28]	; (801a404 <ip4_input_accept+0x50>)
 801a3e6:	695b      	ldr	r3, [r3, #20]
 801a3e8:	6879      	ldr	r1, [r7, #4]
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	f000 fa26 	bl	801a83c <ip4_addr_isbroadcast_u32>
 801a3f0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d001      	beq.n	801a3fa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801a3f6:	2301      	movs	r3, #1
 801a3f8:	e000      	b.n	801a3fc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801a3fa:	2300      	movs	r3, #0
}
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	3708      	adds	r7, #8
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}
 801a404:	20008e64 	.word	0x20008e64

0801a408 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b088      	sub	sp, #32
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	6078      	str	r0, [r7, #4]
 801a410:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801a412:	2301      	movs	r3, #1
 801a414:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	685b      	ldr	r3, [r3, #4]
 801a41a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801a41c:	69fb      	ldr	r3, [r7, #28]
 801a41e:	781b      	ldrb	r3, [r3, #0]
 801a420:	091b      	lsrs	r3, r3, #4
 801a422:	b2db      	uxtb	r3, r3
 801a424:	2b04      	cmp	r3, #4
 801a426:	d004      	beq.n	801a432 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a428:	6878      	ldr	r0, [r7, #4]
 801a42a:	f7f6 fda7 	bl	8010f7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801a42e:	2300      	movs	r3, #0
 801a430:	e123      	b.n	801a67a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a432:	69fb      	ldr	r3, [r7, #28]
 801a434:	781b      	ldrb	r3, [r3, #0]
 801a436:	f003 030f 	and.w	r3, r3, #15
 801a43a:	b2db      	uxtb	r3, r3
 801a43c:	009b      	lsls	r3, r3, #2
 801a43e:	b2db      	uxtb	r3, r3
 801a440:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a442:	69fb      	ldr	r3, [r7, #28]
 801a444:	885b      	ldrh	r3, [r3, #2]
 801a446:	b29b      	uxth	r3, r3
 801a448:	4618      	mov	r0, r3
 801a44a:	f7f5 f999 	bl	800f780 <lwip_htons>
 801a44e:	4603      	mov	r3, r0
 801a450:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	891b      	ldrh	r3, [r3, #8]
 801a456:	8a3a      	ldrh	r2, [r7, #16]
 801a458:	429a      	cmp	r2, r3
 801a45a:	d204      	bcs.n	801a466 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801a45c:	8a3b      	ldrh	r3, [r7, #16]
 801a45e:	4619      	mov	r1, r3
 801a460:	6878      	ldr	r0, [r7, #4]
 801a462:	f7f6 fc05 	bl	8010c70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	895b      	ldrh	r3, [r3, #10]
 801a46a:	8a7a      	ldrh	r2, [r7, #18]
 801a46c:	429a      	cmp	r2, r3
 801a46e:	d807      	bhi.n	801a480 <ip4_input+0x78>
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	891b      	ldrh	r3, [r3, #8]
 801a474:	8a3a      	ldrh	r2, [r7, #16]
 801a476:	429a      	cmp	r2, r3
 801a478:	d802      	bhi.n	801a480 <ip4_input+0x78>
 801a47a:	8a7b      	ldrh	r3, [r7, #18]
 801a47c:	2b13      	cmp	r3, #19
 801a47e:	d804      	bhi.n	801a48a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a480:	6878      	ldr	r0, [r7, #4]
 801a482:	f7f6 fd7b 	bl	8010f7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801a486:	2300      	movs	r3, #0
 801a488:	e0f7      	b.n	801a67a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a48a:	69fb      	ldr	r3, [r7, #28]
 801a48c:	691b      	ldr	r3, [r3, #16]
 801a48e:	4a7d      	ldr	r2, [pc, #500]	; (801a684 <ip4_input+0x27c>)
 801a490:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a492:	69fb      	ldr	r3, [r7, #28]
 801a494:	68db      	ldr	r3, [r3, #12]
 801a496:	4a7b      	ldr	r2, [pc, #492]	; (801a684 <ip4_input+0x27c>)
 801a498:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a49a:	4b7a      	ldr	r3, [pc, #488]	; (801a684 <ip4_input+0x27c>)
 801a49c:	695b      	ldr	r3, [r3, #20]
 801a49e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a4a2:	2be0      	cmp	r3, #224	; 0xe0
 801a4a4:	d112      	bne.n	801a4cc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a4a6:	683b      	ldr	r3, [r7, #0]
 801a4a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a4ac:	f003 0301 	and.w	r3, r3, #1
 801a4b0:	b2db      	uxtb	r3, r3
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d007      	beq.n	801a4c6 <ip4_input+0xbe>
 801a4b6:	683b      	ldr	r3, [r7, #0]
 801a4b8:	3304      	adds	r3, #4
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d002      	beq.n	801a4c6 <ip4_input+0xbe>
      netif = inp;
 801a4c0:	683b      	ldr	r3, [r7, #0]
 801a4c2:	61bb      	str	r3, [r7, #24]
 801a4c4:	e02a      	b.n	801a51c <ip4_input+0x114>
    } else {
      netif = NULL;
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	61bb      	str	r3, [r7, #24]
 801a4ca:	e027      	b.n	801a51c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a4cc:	6838      	ldr	r0, [r7, #0]
 801a4ce:	f7ff ff71 	bl	801a3b4 <ip4_input_accept>
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d002      	beq.n	801a4de <ip4_input+0xd6>
      netif = inp;
 801a4d8:	683b      	ldr	r3, [r7, #0]
 801a4da:	61bb      	str	r3, [r7, #24]
 801a4dc:	e01e      	b.n	801a51c <ip4_input+0x114>
    } else {
      netif = NULL;
 801a4de:	2300      	movs	r3, #0
 801a4e0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a4e2:	4b68      	ldr	r3, [pc, #416]	; (801a684 <ip4_input+0x27c>)
 801a4e4:	695b      	ldr	r3, [r3, #20]
 801a4e6:	b2db      	uxtb	r3, r3
 801a4e8:	2b7f      	cmp	r3, #127	; 0x7f
 801a4ea:	d017      	beq.n	801a51c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a4ec:	4b66      	ldr	r3, [pc, #408]	; (801a688 <ip4_input+0x280>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	61bb      	str	r3, [r7, #24]
 801a4f2:	e00e      	b.n	801a512 <ip4_input+0x10a>
          if (netif == inp) {
 801a4f4:	69ba      	ldr	r2, [r7, #24]
 801a4f6:	683b      	ldr	r3, [r7, #0]
 801a4f8:	429a      	cmp	r2, r3
 801a4fa:	d006      	beq.n	801a50a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a4fc:	69b8      	ldr	r0, [r7, #24]
 801a4fe:	f7ff ff59 	bl	801a3b4 <ip4_input_accept>
 801a502:	4603      	mov	r3, r0
 801a504:	2b00      	cmp	r3, #0
 801a506:	d108      	bne.n	801a51a <ip4_input+0x112>
 801a508:	e000      	b.n	801a50c <ip4_input+0x104>
            continue;
 801a50a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a50c:	69bb      	ldr	r3, [r7, #24]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	61bb      	str	r3, [r7, #24]
 801a512:	69bb      	ldr	r3, [r7, #24]
 801a514:	2b00      	cmp	r3, #0
 801a516:	d1ed      	bne.n	801a4f4 <ip4_input+0xec>
 801a518:	e000      	b.n	801a51c <ip4_input+0x114>
            break;
 801a51a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801a51c:	69bb      	ldr	r3, [r7, #24]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d111      	bne.n	801a546 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801a522:	69fb      	ldr	r3, [r7, #28]
 801a524:	7a5b      	ldrb	r3, [r3, #9]
 801a526:	2b11      	cmp	r3, #17
 801a528:	d10d      	bne.n	801a546 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801a52a:	8a7b      	ldrh	r3, [r7, #18]
 801a52c:	69fa      	ldr	r2, [r7, #28]
 801a52e:	4413      	add	r3, r2
 801a530:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	885b      	ldrh	r3, [r3, #2]
 801a536:	b29b      	uxth	r3, r3
 801a538:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801a53c:	d103      	bne.n	801a546 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801a542:	2300      	movs	r3, #0
 801a544:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801a546:	697b      	ldr	r3, [r7, #20]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d017      	beq.n	801a57c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801a54c:	4b4d      	ldr	r3, [pc, #308]	; (801a684 <ip4_input+0x27c>)
 801a54e:	691b      	ldr	r3, [r3, #16]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d013      	beq.n	801a57c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a554:	4b4b      	ldr	r3, [pc, #300]	; (801a684 <ip4_input+0x27c>)
 801a556:	691b      	ldr	r3, [r3, #16]
 801a558:	6839      	ldr	r1, [r7, #0]
 801a55a:	4618      	mov	r0, r3
 801a55c:	f000 f96e 	bl	801a83c <ip4_addr_isbroadcast_u32>
 801a560:	4603      	mov	r3, r0
 801a562:	2b00      	cmp	r3, #0
 801a564:	d105      	bne.n	801a572 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a566:	4b47      	ldr	r3, [pc, #284]	; (801a684 <ip4_input+0x27c>)
 801a568:	691b      	ldr	r3, [r3, #16]
 801a56a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a56e:	2be0      	cmp	r3, #224	; 0xe0
 801a570:	d104      	bne.n	801a57c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a572:	6878      	ldr	r0, [r7, #4]
 801a574:	f7f6 fd02 	bl	8010f7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801a578:	2300      	movs	r3, #0
 801a57a:	e07e      	b.n	801a67a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a57c:	69bb      	ldr	r3, [r7, #24]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d104      	bne.n	801a58c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801a582:	6878      	ldr	r0, [r7, #4]
 801a584:	f7f6 fcfa 	bl	8010f7c <pbuf_free>
    return ERR_OK;
 801a588:	2300      	movs	r3, #0
 801a58a:	e076      	b.n	801a67a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a58c:	69fb      	ldr	r3, [r7, #28]
 801a58e:	88db      	ldrh	r3, [r3, #6]
 801a590:	b29b      	uxth	r3, r3
 801a592:	461a      	mov	r2, r3
 801a594:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a598:	4013      	ands	r3, r2
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d00b      	beq.n	801a5b6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a59e:	6878      	ldr	r0, [r7, #4]
 801a5a0:	f000 fc92 	bl	801aec8 <ip4_reass>
 801a5a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d101      	bne.n	801a5b0 <ip4_input+0x1a8>
      return ERR_OK;
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	e064      	b.n	801a67a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	685b      	ldr	r3, [r3, #4]
 801a5b4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a5b6:	4a33      	ldr	r2, [pc, #204]	; (801a684 <ip4_input+0x27c>)
 801a5b8:	69bb      	ldr	r3, [r7, #24]
 801a5ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a5bc:	4a31      	ldr	r2, [pc, #196]	; (801a684 <ip4_input+0x27c>)
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a5c2:	4a30      	ldr	r2, [pc, #192]	; (801a684 <ip4_input+0x27c>)
 801a5c4:	69fb      	ldr	r3, [r7, #28]
 801a5c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a5c8:	69fb      	ldr	r3, [r7, #28]
 801a5ca:	781b      	ldrb	r3, [r3, #0]
 801a5cc:	f003 030f 	and.w	r3, r3, #15
 801a5d0:	b2db      	uxtb	r3, r3
 801a5d2:	009b      	lsls	r3, r3, #2
 801a5d4:	b2db      	uxtb	r3, r3
 801a5d6:	b29a      	uxth	r2, r3
 801a5d8:	4b2a      	ldr	r3, [pc, #168]	; (801a684 <ip4_input+0x27c>)
 801a5da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a5dc:	8a7b      	ldrh	r3, [r7, #18]
 801a5de:	4619      	mov	r1, r3
 801a5e0:	6878      	ldr	r0, [r7, #4]
 801a5e2:	f7f6 fc45 	bl	8010e70 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a5e6:	69fb      	ldr	r3, [r7, #28]
 801a5e8:	7a5b      	ldrb	r3, [r3, #9]
 801a5ea:	2b11      	cmp	r3, #17
 801a5ec:	d006      	beq.n	801a5fc <ip4_input+0x1f4>
 801a5ee:	2b11      	cmp	r3, #17
 801a5f0:	dc13      	bgt.n	801a61a <ip4_input+0x212>
 801a5f2:	2b01      	cmp	r3, #1
 801a5f4:	d00c      	beq.n	801a610 <ip4_input+0x208>
 801a5f6:	2b06      	cmp	r3, #6
 801a5f8:	d005      	beq.n	801a606 <ip4_input+0x1fe>
 801a5fa:	e00e      	b.n	801a61a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801a5fc:	6839      	ldr	r1, [r7, #0]
 801a5fe:	6878      	ldr	r0, [r7, #4]
 801a600:	f7fc faea 	bl	8016bd8 <udp_input>
        break;
 801a604:	e026      	b.n	801a654 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801a606:	6839      	ldr	r1, [r7, #0]
 801a608:	6878      	ldr	r0, [r7, #4]
 801a60a:	f7f8 fafb 	bl	8012c04 <tcp_input>
        break;
 801a60e:	e021      	b.n	801a654 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801a610:	6839      	ldr	r1, [r7, #0]
 801a612:	6878      	ldr	r0, [r7, #4]
 801a614:	f7ff fcd0 	bl	8019fb8 <icmp_input>
        break;
 801a618:	e01c      	b.n	801a654 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a61a:	4b1a      	ldr	r3, [pc, #104]	; (801a684 <ip4_input+0x27c>)
 801a61c:	695b      	ldr	r3, [r3, #20]
 801a61e:	69b9      	ldr	r1, [r7, #24]
 801a620:	4618      	mov	r0, r3
 801a622:	f000 f90b 	bl	801a83c <ip4_addr_isbroadcast_u32>
 801a626:	4603      	mov	r3, r0
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d10f      	bne.n	801a64c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a62c:	4b15      	ldr	r3, [pc, #84]	; (801a684 <ip4_input+0x27c>)
 801a62e:	695b      	ldr	r3, [r3, #20]
 801a630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a634:	2be0      	cmp	r3, #224	; 0xe0
 801a636:	d009      	beq.n	801a64c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a638:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a63c:	4619      	mov	r1, r3
 801a63e:	6878      	ldr	r0, [r7, #4]
 801a640:	f7f6 fc89 	bl	8010f56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a644:	2102      	movs	r1, #2
 801a646:	6878      	ldr	r0, [r7, #4]
 801a648:	f7ff fdba 	bl	801a1c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a64c:	6878      	ldr	r0, [r7, #4]
 801a64e:	f7f6 fc95 	bl	8010f7c <pbuf_free>
        break;
 801a652:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a654:	4b0b      	ldr	r3, [pc, #44]	; (801a684 <ip4_input+0x27c>)
 801a656:	2200      	movs	r2, #0
 801a658:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a65a:	4b0a      	ldr	r3, [pc, #40]	; (801a684 <ip4_input+0x27c>)
 801a65c:	2200      	movs	r2, #0
 801a65e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a660:	4b08      	ldr	r3, [pc, #32]	; (801a684 <ip4_input+0x27c>)
 801a662:	2200      	movs	r2, #0
 801a664:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a666:	4b07      	ldr	r3, [pc, #28]	; (801a684 <ip4_input+0x27c>)
 801a668:	2200      	movs	r2, #0
 801a66a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a66c:	4b05      	ldr	r3, [pc, #20]	; (801a684 <ip4_input+0x27c>)
 801a66e:	2200      	movs	r2, #0
 801a670:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a672:	4b04      	ldr	r3, [pc, #16]	; (801a684 <ip4_input+0x27c>)
 801a674:	2200      	movs	r2, #0
 801a676:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a678:	2300      	movs	r3, #0
}
 801a67a:	4618      	mov	r0, r3
 801a67c:	3720      	adds	r7, #32
 801a67e:	46bd      	mov	sp, r7
 801a680:	bd80      	pop	{r7, pc}
 801a682:	bf00      	nop
 801a684:	20008e64 	.word	0x20008e64
 801a688:	2000c5cc 	.word	0x2000c5cc

0801a68c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b08a      	sub	sp, #40	; 0x28
 801a690:	af04      	add	r7, sp, #16
 801a692:	60f8      	str	r0, [r7, #12]
 801a694:	60b9      	str	r1, [r7, #8]
 801a696:	607a      	str	r2, [r7, #4]
 801a698:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a69a:	68bb      	ldr	r3, [r7, #8]
 801a69c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d009      	beq.n	801a6b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d003      	beq.n	801a6b2 <ip4_output_if+0x26>
 801a6aa:	68bb      	ldr	r3, [r7, #8]
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d102      	bne.n	801a6b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6b4:	3304      	adds	r3, #4
 801a6b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a6b8:	78fa      	ldrb	r2, [r7, #3]
 801a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6bc:	9302      	str	r3, [sp, #8]
 801a6be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a6c2:	9301      	str	r3, [sp, #4]
 801a6c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a6c8:	9300      	str	r3, [sp, #0]
 801a6ca:	4613      	mov	r3, r2
 801a6cc:	687a      	ldr	r2, [r7, #4]
 801a6ce:	6979      	ldr	r1, [r7, #20]
 801a6d0:	68f8      	ldr	r0, [r7, #12]
 801a6d2:	f000 f805 	bl	801a6e0 <ip4_output_if_src>
 801a6d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a6d8:	4618      	mov	r0, r3
 801a6da:	3718      	adds	r7, #24
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	bd80      	pop	{r7, pc}

0801a6e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b088      	sub	sp, #32
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	60f8      	str	r0, [r7, #12]
 801a6e8:	60b9      	str	r1, [r7, #8]
 801a6ea:	607a      	str	r2, [r7, #4]
 801a6ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	7b9b      	ldrb	r3, [r3, #14]
 801a6f2:	2b01      	cmp	r3, #1
 801a6f4:	d006      	beq.n	801a704 <ip4_output_if_src+0x24>
 801a6f6:	4b4b      	ldr	r3, [pc, #300]	; (801a824 <ip4_output_if_src+0x144>)
 801a6f8:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a6fc:	494a      	ldr	r1, [pc, #296]	; (801a828 <ip4_output_if_src+0x148>)
 801a6fe:	484b      	ldr	r0, [pc, #300]	; (801a82c <ip4_output_if_src+0x14c>)
 801a700:	f001 ff08 	bl	801c514 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d060      	beq.n	801a7cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a70a:	2314      	movs	r3, #20
 801a70c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a70e:	2114      	movs	r1, #20
 801a710:	68f8      	ldr	r0, [r7, #12]
 801a712:	f7f6 fb9d 	bl	8010e50 <pbuf_add_header>
 801a716:	4603      	mov	r3, r0
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d002      	beq.n	801a722 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a71c:	f06f 0301 	mvn.w	r3, #1
 801a720:	e07c      	b.n	801a81c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	895b      	ldrh	r3, [r3, #10]
 801a72c:	2b13      	cmp	r3, #19
 801a72e:	d806      	bhi.n	801a73e <ip4_output_if_src+0x5e>
 801a730:	4b3c      	ldr	r3, [pc, #240]	; (801a824 <ip4_output_if_src+0x144>)
 801a732:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a736:	493e      	ldr	r1, [pc, #248]	; (801a830 <ip4_output_if_src+0x150>)
 801a738:	483c      	ldr	r0, [pc, #240]	; (801a82c <ip4_output_if_src+0x14c>)
 801a73a:	f001 feeb 	bl	801c514 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a73e:	69fb      	ldr	r3, [r7, #28]
 801a740:	78fa      	ldrb	r2, [r7, #3]
 801a742:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a744:	69fb      	ldr	r3, [r7, #28]
 801a746:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a74a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	681a      	ldr	r2, [r3, #0]
 801a750:	69fb      	ldr	r3, [r7, #28]
 801a752:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a754:	8b7b      	ldrh	r3, [r7, #26]
 801a756:	089b      	lsrs	r3, r3, #2
 801a758:	b29b      	uxth	r3, r3
 801a75a:	b2db      	uxtb	r3, r3
 801a75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a760:	b2da      	uxtb	r2, r3
 801a762:	69fb      	ldr	r3, [r7, #28]
 801a764:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a766:	69fb      	ldr	r3, [r7, #28]
 801a768:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a76c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	891b      	ldrh	r3, [r3, #8]
 801a772:	4618      	mov	r0, r3
 801a774:	f7f5 f804 	bl	800f780 <lwip_htons>
 801a778:	4603      	mov	r3, r0
 801a77a:	461a      	mov	r2, r3
 801a77c:	69fb      	ldr	r3, [r7, #28]
 801a77e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a780:	69fb      	ldr	r3, [r7, #28]
 801a782:	2200      	movs	r2, #0
 801a784:	719a      	strb	r2, [r3, #6]
 801a786:	2200      	movs	r2, #0
 801a788:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a78a:	4b2a      	ldr	r3, [pc, #168]	; (801a834 <ip4_output_if_src+0x154>)
 801a78c:	881b      	ldrh	r3, [r3, #0]
 801a78e:	4618      	mov	r0, r3
 801a790:	f7f4 fff6 	bl	800f780 <lwip_htons>
 801a794:	4603      	mov	r3, r0
 801a796:	461a      	mov	r2, r3
 801a798:	69fb      	ldr	r3, [r7, #28]
 801a79a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a79c:	4b25      	ldr	r3, [pc, #148]	; (801a834 <ip4_output_if_src+0x154>)
 801a79e:	881b      	ldrh	r3, [r3, #0]
 801a7a0:	3301      	adds	r3, #1
 801a7a2:	b29a      	uxth	r2, r3
 801a7a4:	4b23      	ldr	r3, [pc, #140]	; (801a834 <ip4_output_if_src+0x154>)
 801a7a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a7a8:	68bb      	ldr	r3, [r7, #8]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d104      	bne.n	801a7b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a7ae:	4b22      	ldr	r3, [pc, #136]	; (801a838 <ip4_output_if_src+0x158>)
 801a7b0:	681a      	ldr	r2, [r3, #0]
 801a7b2:	69fb      	ldr	r3, [r7, #28]
 801a7b4:	60da      	str	r2, [r3, #12]
 801a7b6:	e003      	b.n	801a7c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	681a      	ldr	r2, [r3, #0]
 801a7bc:	69fb      	ldr	r3, [r7, #28]
 801a7be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a7c0:	69fb      	ldr	r3, [r7, #28]
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	729a      	strb	r2, [r3, #10]
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	72da      	strb	r2, [r3, #11]
 801a7ca:	e00f      	b.n	801a7ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	895b      	ldrh	r3, [r3, #10]
 801a7d0:	2b13      	cmp	r3, #19
 801a7d2:	d802      	bhi.n	801a7da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a7d4:	f06f 0301 	mvn.w	r3, #1
 801a7d8:	e020      	b.n	801a81c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	685b      	ldr	r3, [r3, #4]
 801a7de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a7e0:	69fb      	ldr	r3, [r7, #28]
 801a7e2:	691b      	ldr	r3, [r3, #16]
 801a7e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a7e6:	f107 0314 	add.w	r3, r7, #20
 801a7ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d00c      	beq.n	801a80e <ip4_output_if_src+0x12e>
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	891a      	ldrh	r2, [r3, #8]
 801a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a7fc:	429a      	cmp	r2, r3
 801a7fe:	d906      	bls.n	801a80e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a800:	687a      	ldr	r2, [r7, #4]
 801a802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a804:	68f8      	ldr	r0, [r7, #12]
 801a806:	f000 fd53 	bl	801b2b0 <ip4_frag>
 801a80a:	4603      	mov	r3, r0
 801a80c:	e006      	b.n	801a81c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a810:	695b      	ldr	r3, [r3, #20]
 801a812:	687a      	ldr	r2, [r7, #4]
 801a814:	68f9      	ldr	r1, [r7, #12]
 801a816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a818:	4798      	blx	r3
 801a81a:	4603      	mov	r3, r0
}
 801a81c:	4618      	mov	r0, r3
 801a81e:	3720      	adds	r7, #32
 801a820:	46bd      	mov	sp, r7
 801a822:	bd80      	pop	{r7, pc}
 801a824:	08021238 	.word	0x08021238
 801a828:	0802126c 	.word	0x0802126c
 801a82c:	08021278 	.word	0x08021278
 801a830:	080212a0 	.word	0x080212a0
 801a834:	2000c75e 	.word	0x2000c75e
 801a838:	0802182c 	.word	0x0802182c

0801a83c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a83c:	b480      	push	{r7}
 801a83e:	b085      	sub	sp, #20
 801a840:	af00      	add	r7, sp, #0
 801a842:	6078      	str	r0, [r7, #4]
 801a844:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a850:	d002      	beq.n	801a858 <ip4_addr_isbroadcast_u32+0x1c>
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d101      	bne.n	801a85c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a858:	2301      	movs	r3, #1
 801a85a:	e02a      	b.n	801a8b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a862:	f003 0302 	and.w	r3, r3, #2
 801a866:	2b00      	cmp	r3, #0
 801a868:	d101      	bne.n	801a86e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a86a:	2300      	movs	r3, #0
 801a86c:	e021      	b.n	801a8b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a86e:	683b      	ldr	r3, [r7, #0]
 801a870:	3304      	adds	r3, #4
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	687a      	ldr	r2, [r7, #4]
 801a876:	429a      	cmp	r2, r3
 801a878:	d101      	bne.n	801a87e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a87a:	2300      	movs	r3, #0
 801a87c:	e019      	b.n	801a8b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a87e:	68fa      	ldr	r2, [r7, #12]
 801a880:	683b      	ldr	r3, [r7, #0]
 801a882:	3304      	adds	r3, #4
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	405a      	eors	r2, r3
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	3308      	adds	r3, #8
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	4013      	ands	r3, r2
 801a890:	2b00      	cmp	r3, #0
 801a892:	d10d      	bne.n	801a8b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a894:	683b      	ldr	r3, [r7, #0]
 801a896:	3308      	adds	r3, #8
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	43da      	mvns	r2, r3
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a8a0:	683b      	ldr	r3, [r7, #0]
 801a8a2:	3308      	adds	r3, #8
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a8a8:	429a      	cmp	r2, r3
 801a8aa:	d101      	bne.n	801a8b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a8ac:	2301      	movs	r3, #1
 801a8ae:	e000      	b.n	801a8b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a8b0:	2300      	movs	r3, #0
  }
}
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	3714      	adds	r7, #20
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8bc:	4770      	bx	lr
	...

0801a8c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b084      	sub	sp, #16
 801a8c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a8c6:	2300      	movs	r3, #0
 801a8c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a8ca:	4b12      	ldr	r3, [pc, #72]	; (801a914 <ip_reass_tmr+0x54>)
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a8d0:	e018      	b.n	801a904 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	7fdb      	ldrb	r3, [r3, #31]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d00b      	beq.n	801a8f2 <ip_reass_tmr+0x32>
      r->timer--;
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	7fdb      	ldrb	r3, [r3, #31]
 801a8de:	3b01      	subs	r3, #1
 801a8e0:	b2da      	uxtb	r2, r3
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	60fb      	str	r3, [r7, #12]
 801a8f0:	e008      	b.n	801a904 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a8f6:	68fb      	ldr	r3, [r7, #12]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a8fc:	68b9      	ldr	r1, [r7, #8]
 801a8fe:	6878      	ldr	r0, [r7, #4]
 801a900:	f000 f80a 	bl	801a918 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d1e3      	bne.n	801a8d2 <ip_reass_tmr+0x12>
    }
  }
}
 801a90a:	bf00      	nop
 801a90c:	bf00      	nop
 801a90e:	3710      	adds	r7, #16
 801a910:	46bd      	mov	sp, r7
 801a912:	bd80      	pop	{r7, pc}
 801a914:	2000c760 	.word	0x2000c760

0801a918 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a918:	b580      	push	{r7, lr}
 801a91a:	b088      	sub	sp, #32
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	6078      	str	r0, [r7, #4]
 801a920:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a922:	2300      	movs	r3, #0
 801a924:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a926:	683a      	ldr	r2, [r7, #0]
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d105      	bne.n	801a93a <ip_reass_free_complete_datagram+0x22>
 801a92e:	4b45      	ldr	r3, [pc, #276]	; (801aa44 <ip_reass_free_complete_datagram+0x12c>)
 801a930:	22ab      	movs	r2, #171	; 0xab
 801a932:	4945      	ldr	r1, [pc, #276]	; (801aa48 <ip_reass_free_complete_datagram+0x130>)
 801a934:	4845      	ldr	r0, [pc, #276]	; (801aa4c <ip_reass_free_complete_datagram+0x134>)
 801a936:	f001 fded 	bl	801c514 <iprintf>
  if (prev != NULL) {
 801a93a:	683b      	ldr	r3, [r7, #0]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d00a      	beq.n	801a956 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a940:	683b      	ldr	r3, [r7, #0]
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	687a      	ldr	r2, [r7, #4]
 801a946:	429a      	cmp	r2, r3
 801a948:	d005      	beq.n	801a956 <ip_reass_free_complete_datagram+0x3e>
 801a94a:	4b3e      	ldr	r3, [pc, #248]	; (801aa44 <ip_reass_free_complete_datagram+0x12c>)
 801a94c:	22ad      	movs	r2, #173	; 0xad
 801a94e:	4940      	ldr	r1, [pc, #256]	; (801aa50 <ip_reass_free_complete_datagram+0x138>)
 801a950:	483e      	ldr	r0, [pc, #248]	; (801aa4c <ip_reass_free_complete_datagram+0x134>)
 801a952:	f001 fddf 	bl	801c514 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	685b      	ldr	r3, [r3, #4]
 801a95a:	685b      	ldr	r3, [r3, #4]
 801a95c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a95e:	697b      	ldr	r3, [r7, #20]
 801a960:	889b      	ldrh	r3, [r3, #4]
 801a962:	b29b      	uxth	r3, r3
 801a964:	2b00      	cmp	r3, #0
 801a966:	d12a      	bne.n	801a9be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	685b      	ldr	r3, [r3, #4]
 801a96c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a96e:	697b      	ldr	r3, [r7, #20]
 801a970:	681a      	ldr	r2, [r3, #0]
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a976:	69bb      	ldr	r3, [r7, #24]
 801a978:	6858      	ldr	r0, [r3, #4]
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	3308      	adds	r3, #8
 801a97e:	2214      	movs	r2, #20
 801a980:	4619      	mov	r1, r3
 801a982:	f002 f860 	bl	801ca46 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a986:	2101      	movs	r1, #1
 801a988:	69b8      	ldr	r0, [r7, #24]
 801a98a:	f7ff fc29 	bl	801a1e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a98e:	69b8      	ldr	r0, [r7, #24]
 801a990:	f7f6 fb82 	bl	8011098 <pbuf_clen>
 801a994:	4603      	mov	r3, r0
 801a996:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a998:	8bfa      	ldrh	r2, [r7, #30]
 801a99a:	8a7b      	ldrh	r3, [r7, #18]
 801a99c:	4413      	add	r3, r2
 801a99e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a9a2:	db05      	blt.n	801a9b0 <ip_reass_free_complete_datagram+0x98>
 801a9a4:	4b27      	ldr	r3, [pc, #156]	; (801aa44 <ip_reass_free_complete_datagram+0x12c>)
 801a9a6:	22bc      	movs	r2, #188	; 0xbc
 801a9a8:	492a      	ldr	r1, [pc, #168]	; (801aa54 <ip_reass_free_complete_datagram+0x13c>)
 801a9aa:	4828      	ldr	r0, [pc, #160]	; (801aa4c <ip_reass_free_complete_datagram+0x134>)
 801a9ac:	f001 fdb2 	bl	801c514 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a9b0:	8bfa      	ldrh	r2, [r7, #30]
 801a9b2:	8a7b      	ldrh	r3, [r7, #18]
 801a9b4:	4413      	add	r3, r2
 801a9b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a9b8:	69b8      	ldr	r0, [r7, #24]
 801a9ba:	f7f6 fadf 	bl	8010f7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	685b      	ldr	r3, [r3, #4]
 801a9c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a9c4:	e01f      	b.n	801aa06 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a9c6:	69bb      	ldr	r3, [r7, #24]
 801a9c8:	685b      	ldr	r3, [r3, #4]
 801a9ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a9cc:	69bb      	ldr	r3, [r7, #24]
 801a9ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a9d0:	697b      	ldr	r3, [r7, #20]
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a9d6:	68f8      	ldr	r0, [r7, #12]
 801a9d8:	f7f6 fb5e 	bl	8011098 <pbuf_clen>
 801a9dc:	4603      	mov	r3, r0
 801a9de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a9e0:	8bfa      	ldrh	r2, [r7, #30]
 801a9e2:	8a7b      	ldrh	r3, [r7, #18]
 801a9e4:	4413      	add	r3, r2
 801a9e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a9ea:	db05      	blt.n	801a9f8 <ip_reass_free_complete_datagram+0xe0>
 801a9ec:	4b15      	ldr	r3, [pc, #84]	; (801aa44 <ip_reass_free_complete_datagram+0x12c>)
 801a9ee:	22cc      	movs	r2, #204	; 0xcc
 801a9f0:	4918      	ldr	r1, [pc, #96]	; (801aa54 <ip_reass_free_complete_datagram+0x13c>)
 801a9f2:	4816      	ldr	r0, [pc, #88]	; (801aa4c <ip_reass_free_complete_datagram+0x134>)
 801a9f4:	f001 fd8e 	bl	801c514 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a9f8:	8bfa      	ldrh	r2, [r7, #30]
 801a9fa:	8a7b      	ldrh	r3, [r7, #18]
 801a9fc:	4413      	add	r3, r2
 801a9fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801aa00:	68f8      	ldr	r0, [r7, #12]
 801aa02:	f7f6 fabb 	bl	8010f7c <pbuf_free>
  while (p != NULL) {
 801aa06:	69bb      	ldr	r3, [r7, #24]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d1dc      	bne.n	801a9c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801aa0c:	6839      	ldr	r1, [r7, #0]
 801aa0e:	6878      	ldr	r0, [r7, #4]
 801aa10:	f000 f8c2 	bl	801ab98 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801aa14:	4b10      	ldr	r3, [pc, #64]	; (801aa58 <ip_reass_free_complete_datagram+0x140>)
 801aa16:	881b      	ldrh	r3, [r3, #0]
 801aa18:	8bfa      	ldrh	r2, [r7, #30]
 801aa1a:	429a      	cmp	r2, r3
 801aa1c:	d905      	bls.n	801aa2a <ip_reass_free_complete_datagram+0x112>
 801aa1e:	4b09      	ldr	r3, [pc, #36]	; (801aa44 <ip_reass_free_complete_datagram+0x12c>)
 801aa20:	22d2      	movs	r2, #210	; 0xd2
 801aa22:	490e      	ldr	r1, [pc, #56]	; (801aa5c <ip_reass_free_complete_datagram+0x144>)
 801aa24:	4809      	ldr	r0, [pc, #36]	; (801aa4c <ip_reass_free_complete_datagram+0x134>)
 801aa26:	f001 fd75 	bl	801c514 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801aa2a:	4b0b      	ldr	r3, [pc, #44]	; (801aa58 <ip_reass_free_complete_datagram+0x140>)
 801aa2c:	881a      	ldrh	r2, [r3, #0]
 801aa2e:	8bfb      	ldrh	r3, [r7, #30]
 801aa30:	1ad3      	subs	r3, r2, r3
 801aa32:	b29a      	uxth	r2, r3
 801aa34:	4b08      	ldr	r3, [pc, #32]	; (801aa58 <ip_reass_free_complete_datagram+0x140>)
 801aa36:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801aa38:	8bfb      	ldrh	r3, [r7, #30]
}
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	3720      	adds	r7, #32
 801aa3e:	46bd      	mov	sp, r7
 801aa40:	bd80      	pop	{r7, pc}
 801aa42:	bf00      	nop
 801aa44:	080212d0 	.word	0x080212d0
 801aa48:	0802130c 	.word	0x0802130c
 801aa4c:	08021318 	.word	0x08021318
 801aa50:	08021340 	.word	0x08021340
 801aa54:	08021354 	.word	0x08021354
 801aa58:	2000c764 	.word	0x2000c764
 801aa5c:	08021374 	.word	0x08021374

0801aa60 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801aa60:	b580      	push	{r7, lr}
 801aa62:	b08a      	sub	sp, #40	; 0x28
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	6078      	str	r0, [r7, #4]
 801aa68:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801aa6e:	2300      	movs	r3, #0
 801aa70:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801aa72:	2300      	movs	r3, #0
 801aa74:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801aa76:	2300      	movs	r3, #0
 801aa78:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801aa7e:	4b28      	ldr	r3, [pc, #160]	; (801ab20 <ip_reass_remove_oldest_datagram+0xc0>)
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801aa84:	e030      	b.n	801aae8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa88:	695a      	ldr	r2, [r3, #20]
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	68db      	ldr	r3, [r3, #12]
 801aa8e:	429a      	cmp	r2, r3
 801aa90:	d10c      	bne.n	801aaac <ip_reass_remove_oldest_datagram+0x4c>
 801aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa94:	699a      	ldr	r2, [r3, #24]
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	691b      	ldr	r3, [r3, #16]
 801aa9a:	429a      	cmp	r2, r3
 801aa9c:	d106      	bne.n	801aaac <ip_reass_remove_oldest_datagram+0x4c>
 801aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaa0:	899a      	ldrh	r2, [r3, #12]
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	889b      	ldrh	r3, [r3, #4]
 801aaa6:	b29b      	uxth	r3, r3
 801aaa8:	429a      	cmp	r2, r3
 801aaaa:	d014      	beq.n	801aad6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801aaac:	693b      	ldr	r3, [r7, #16]
 801aaae:	3301      	adds	r3, #1
 801aab0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801aab2:	6a3b      	ldr	r3, [r7, #32]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d104      	bne.n	801aac2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801aabc:	69fb      	ldr	r3, [r7, #28]
 801aabe:	61bb      	str	r3, [r7, #24]
 801aac0:	e009      	b.n	801aad6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801aac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aac4:	7fda      	ldrb	r2, [r3, #31]
 801aac6:	6a3b      	ldr	r3, [r7, #32]
 801aac8:	7fdb      	ldrb	r3, [r3, #31]
 801aaca:	429a      	cmp	r2, r3
 801aacc:	d803      	bhi.n	801aad6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aad0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801aad2:	69fb      	ldr	r3, [r7, #28]
 801aad4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d001      	beq.n	801aae2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aae0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d1cb      	bne.n	801aa86 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801aaee:	6a3b      	ldr	r3, [r7, #32]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d008      	beq.n	801ab06 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801aaf4:	69b9      	ldr	r1, [r7, #24]
 801aaf6:	6a38      	ldr	r0, [r7, #32]
 801aaf8:	f7ff ff0e 	bl	801a918 <ip_reass_free_complete_datagram>
 801aafc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801aafe:	697a      	ldr	r2, [r7, #20]
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	4413      	add	r3, r2
 801ab04:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ab06:	697a      	ldr	r2, [r7, #20]
 801ab08:	683b      	ldr	r3, [r7, #0]
 801ab0a:	429a      	cmp	r2, r3
 801ab0c:	da02      	bge.n	801ab14 <ip_reass_remove_oldest_datagram+0xb4>
 801ab0e:	693b      	ldr	r3, [r7, #16]
 801ab10:	2b01      	cmp	r3, #1
 801ab12:	dcac      	bgt.n	801aa6e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ab14:	697b      	ldr	r3, [r7, #20]
}
 801ab16:	4618      	mov	r0, r3
 801ab18:	3728      	adds	r7, #40	; 0x28
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	bd80      	pop	{r7, pc}
 801ab1e:	bf00      	nop
 801ab20:	2000c760 	.word	0x2000c760

0801ab24 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ab24:	b580      	push	{r7, lr}
 801ab26:	b084      	sub	sp, #16
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	6078      	str	r0, [r7, #4]
 801ab2c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ab2e:	2004      	movs	r0, #4
 801ab30:	f7f5 fafe 	bl	8010130 <memp_malloc>
 801ab34:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d110      	bne.n	801ab5e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ab3c:	6839      	ldr	r1, [r7, #0]
 801ab3e:	6878      	ldr	r0, [r7, #4]
 801ab40:	f7ff ff8e 	bl	801aa60 <ip_reass_remove_oldest_datagram>
 801ab44:	4602      	mov	r2, r0
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	4293      	cmp	r3, r2
 801ab4a:	dc03      	bgt.n	801ab54 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ab4c:	2004      	movs	r0, #4
 801ab4e:	f7f5 faef 	bl	8010130 <memp_malloc>
 801ab52:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d101      	bne.n	801ab5e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	e016      	b.n	801ab8c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ab5e:	2220      	movs	r2, #32
 801ab60:	2100      	movs	r1, #0
 801ab62:	68f8      	ldr	r0, [r7, #12]
 801ab64:	f001 fe66 	bl	801c834 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	220f      	movs	r2, #15
 801ab6c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ab6e:	4b09      	ldr	r3, [pc, #36]	; (801ab94 <ip_reass_enqueue_new_datagram+0x70>)
 801ab70:	681a      	ldr	r2, [r3, #0]
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ab76:	4a07      	ldr	r2, [pc, #28]	; (801ab94 <ip_reass_enqueue_new_datagram+0x70>)
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	3308      	adds	r3, #8
 801ab80:	2214      	movs	r2, #20
 801ab82:	6879      	ldr	r1, [r7, #4]
 801ab84:	4618      	mov	r0, r3
 801ab86:	f001 ff5e 	bl	801ca46 <memcpy>
  return ipr;
 801ab8a:	68fb      	ldr	r3, [r7, #12]
}
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	3710      	adds	r7, #16
 801ab90:	46bd      	mov	sp, r7
 801ab92:	bd80      	pop	{r7, pc}
 801ab94:	2000c760 	.word	0x2000c760

0801ab98 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ab98:	b580      	push	{r7, lr}
 801ab9a:	b082      	sub	sp, #8
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	6078      	str	r0, [r7, #4]
 801aba0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801aba2:	4b10      	ldr	r3, [pc, #64]	; (801abe4 <ip_reass_dequeue_datagram+0x4c>)
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	687a      	ldr	r2, [r7, #4]
 801aba8:	429a      	cmp	r2, r3
 801abaa:	d104      	bne.n	801abb6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	4a0c      	ldr	r2, [pc, #48]	; (801abe4 <ip_reass_dequeue_datagram+0x4c>)
 801abb2:	6013      	str	r3, [r2, #0]
 801abb4:	e00d      	b.n	801abd2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801abb6:	683b      	ldr	r3, [r7, #0]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d106      	bne.n	801abca <ip_reass_dequeue_datagram+0x32>
 801abbc:	4b0a      	ldr	r3, [pc, #40]	; (801abe8 <ip_reass_dequeue_datagram+0x50>)
 801abbe:	f240 1245 	movw	r2, #325	; 0x145
 801abc2:	490a      	ldr	r1, [pc, #40]	; (801abec <ip_reass_dequeue_datagram+0x54>)
 801abc4:	480a      	ldr	r0, [pc, #40]	; (801abf0 <ip_reass_dequeue_datagram+0x58>)
 801abc6:	f001 fca5 	bl	801c514 <iprintf>
    prev->next = ipr->next;
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681a      	ldr	r2, [r3, #0]
 801abce:	683b      	ldr	r3, [r7, #0]
 801abd0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801abd2:	6879      	ldr	r1, [r7, #4]
 801abd4:	2004      	movs	r0, #4
 801abd6:	f7f5 fb21 	bl	801021c <memp_free>
}
 801abda:	bf00      	nop
 801abdc:	3708      	adds	r7, #8
 801abde:	46bd      	mov	sp, r7
 801abe0:	bd80      	pop	{r7, pc}
 801abe2:	bf00      	nop
 801abe4:	2000c760 	.word	0x2000c760
 801abe8:	080212d0 	.word	0x080212d0
 801abec:	08021398 	.word	0x08021398
 801abf0:	08021318 	.word	0x08021318

0801abf4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b08c      	sub	sp, #48	; 0x30
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	60f8      	str	r0, [r7, #12]
 801abfc:	60b9      	str	r1, [r7, #8]
 801abfe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ac00:	2300      	movs	r3, #0
 801ac02:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ac04:	2301      	movs	r3, #1
 801ac06:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ac08:	68bb      	ldr	r3, [r7, #8]
 801ac0a:	685b      	ldr	r3, [r3, #4]
 801ac0c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ac0e:	69fb      	ldr	r3, [r7, #28]
 801ac10:	885b      	ldrh	r3, [r3, #2]
 801ac12:	b29b      	uxth	r3, r3
 801ac14:	4618      	mov	r0, r3
 801ac16:	f7f4 fdb3 	bl	800f780 <lwip_htons>
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ac1e:	69fb      	ldr	r3, [r7, #28]
 801ac20:	781b      	ldrb	r3, [r3, #0]
 801ac22:	f003 030f 	and.w	r3, r3, #15
 801ac26:	b2db      	uxtb	r3, r3
 801ac28:	009b      	lsls	r3, r3, #2
 801ac2a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ac2c:	7e7b      	ldrb	r3, [r7, #25]
 801ac2e:	b29b      	uxth	r3, r3
 801ac30:	8b7a      	ldrh	r2, [r7, #26]
 801ac32:	429a      	cmp	r2, r3
 801ac34:	d202      	bcs.n	801ac3c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ac36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac3a:	e135      	b.n	801aea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ac3c:	7e7b      	ldrb	r3, [r7, #25]
 801ac3e:	b29b      	uxth	r3, r3
 801ac40:	8b7a      	ldrh	r2, [r7, #26]
 801ac42:	1ad3      	subs	r3, r2, r3
 801ac44:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ac46:	69fb      	ldr	r3, [r7, #28]
 801ac48:	88db      	ldrh	r3, [r3, #6]
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	f7f4 fd97 	bl	800f780 <lwip_htons>
 801ac52:	4603      	mov	r3, r0
 801ac54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac58:	b29b      	uxth	r3, r3
 801ac5a:	00db      	lsls	r3, r3, #3
 801ac5c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ac5e:	68bb      	ldr	r3, [r7, #8]
 801ac60:	685b      	ldr	r3, [r3, #4]
 801ac62:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac66:	2200      	movs	r2, #0
 801ac68:	701a      	strb	r2, [r3, #0]
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	705a      	strb	r2, [r3, #1]
 801ac6e:	2200      	movs	r2, #0
 801ac70:	709a      	strb	r2, [r3, #2]
 801ac72:	2200      	movs	r2, #0
 801ac74:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ac76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac78:	8afa      	ldrh	r2, [r7, #22]
 801ac7a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ac7c:	8afa      	ldrh	r2, [r7, #22]
 801ac7e:	8b7b      	ldrh	r3, [r7, #26]
 801ac80:	4413      	add	r3, r2
 801ac82:	b29a      	uxth	r2, r3
 801ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac86:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ac88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac8a:	88db      	ldrh	r3, [r3, #6]
 801ac8c:	b29b      	uxth	r3, r3
 801ac8e:	8afa      	ldrh	r2, [r7, #22]
 801ac90:	429a      	cmp	r2, r3
 801ac92:	d902      	bls.n	801ac9a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ac94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac98:	e106      	b.n	801aea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ac9a:	68fb      	ldr	r3, [r7, #12]
 801ac9c:	685b      	ldr	r3, [r3, #4]
 801ac9e:	627b      	str	r3, [r7, #36]	; 0x24
 801aca0:	e068      	b.n	801ad74 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801aca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aca4:	685b      	ldr	r3, [r3, #4]
 801aca6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801aca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acaa:	889b      	ldrh	r3, [r3, #4]
 801acac:	b29a      	uxth	r2, r3
 801acae:	693b      	ldr	r3, [r7, #16]
 801acb0:	889b      	ldrh	r3, [r3, #4]
 801acb2:	b29b      	uxth	r3, r3
 801acb4:	429a      	cmp	r2, r3
 801acb6:	d235      	bcs.n	801ad24 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acbc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d020      	beq.n	801ad06 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acc6:	889b      	ldrh	r3, [r3, #4]
 801acc8:	b29a      	uxth	r2, r3
 801acca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801accc:	88db      	ldrh	r3, [r3, #6]
 801acce:	b29b      	uxth	r3, r3
 801acd0:	429a      	cmp	r2, r3
 801acd2:	d307      	bcc.n	801ace4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acd6:	88db      	ldrh	r3, [r3, #6]
 801acd8:	b29a      	uxth	r2, r3
 801acda:	693b      	ldr	r3, [r7, #16]
 801acdc:	889b      	ldrh	r3, [r3, #4]
 801acde:	b29b      	uxth	r3, r3
 801ace0:	429a      	cmp	r2, r3
 801ace2:	d902      	bls.n	801acea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ace4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ace8:	e0de      	b.n	801aea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801acea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acec:	68ba      	ldr	r2, [r7, #8]
 801acee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acf2:	88db      	ldrh	r3, [r3, #6]
 801acf4:	b29a      	uxth	r2, r3
 801acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acf8:	889b      	ldrh	r3, [r3, #4]
 801acfa:	b29b      	uxth	r3, r3
 801acfc:	429a      	cmp	r2, r3
 801acfe:	d03d      	beq.n	801ad7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ad00:	2300      	movs	r3, #0
 801ad02:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ad04:	e03a      	b.n	801ad7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad08:	88db      	ldrh	r3, [r3, #6]
 801ad0a:	b29a      	uxth	r2, r3
 801ad0c:	693b      	ldr	r3, [r7, #16]
 801ad0e:	889b      	ldrh	r3, [r3, #4]
 801ad10:	b29b      	uxth	r3, r3
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d902      	bls.n	801ad1c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ad16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad1a:	e0c5      	b.n	801aea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ad1c:	68fb      	ldr	r3, [r7, #12]
 801ad1e:	68ba      	ldr	r2, [r7, #8]
 801ad20:	605a      	str	r2, [r3, #4]
      break;
 801ad22:	e02b      	b.n	801ad7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ad24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad26:	889b      	ldrh	r3, [r3, #4]
 801ad28:	b29a      	uxth	r2, r3
 801ad2a:	693b      	ldr	r3, [r7, #16]
 801ad2c:	889b      	ldrh	r3, [r3, #4]
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	429a      	cmp	r2, r3
 801ad32:	d102      	bne.n	801ad3a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ad34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad38:	e0b6      	b.n	801aea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad3c:	889b      	ldrh	r3, [r3, #4]
 801ad3e:	b29a      	uxth	r2, r3
 801ad40:	693b      	ldr	r3, [r7, #16]
 801ad42:	88db      	ldrh	r3, [r3, #6]
 801ad44:	b29b      	uxth	r3, r3
 801ad46:	429a      	cmp	r2, r3
 801ad48:	d202      	bcs.n	801ad50 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ad4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ad4e:	e0ab      	b.n	801aea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d009      	beq.n	801ad6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ad56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad58:	88db      	ldrh	r3, [r3, #6]
 801ad5a:	b29a      	uxth	r2, r3
 801ad5c:	693b      	ldr	r3, [r7, #16]
 801ad5e:	889b      	ldrh	r3, [r3, #4]
 801ad60:	b29b      	uxth	r3, r3
 801ad62:	429a      	cmp	r2, r3
 801ad64:	d001      	beq.n	801ad6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ad66:	2300      	movs	r3, #0
 801ad68:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ad6a:	693b      	ldr	r3, [r7, #16]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ad70:	693b      	ldr	r3, [r7, #16]
 801ad72:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d193      	bne.n	801aca2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ad7a:	e000      	b.n	801ad7e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ad7c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d12d      	bne.n	801ade0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d01c      	beq.n	801adc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad8c:	88db      	ldrh	r3, [r3, #6]
 801ad8e:	b29a      	uxth	r2, r3
 801ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad92:	889b      	ldrh	r3, [r3, #4]
 801ad94:	b29b      	uxth	r3, r3
 801ad96:	429a      	cmp	r2, r3
 801ad98:	d906      	bls.n	801ada8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801ad9a:	4b45      	ldr	r3, [pc, #276]	; (801aeb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ad9c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801ada0:	4944      	ldr	r1, [pc, #272]	; (801aeb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ada2:	4845      	ldr	r0, [pc, #276]	; (801aeb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ada4:	f001 fbb6 	bl	801c514 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adaa:	68ba      	ldr	r2, [r7, #8]
 801adac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adb0:	88db      	ldrh	r3, [r3, #6]
 801adb2:	b29a      	uxth	r2, r3
 801adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adb6:	889b      	ldrh	r3, [r3, #4]
 801adb8:	b29b      	uxth	r3, r3
 801adba:	429a      	cmp	r2, r3
 801adbc:	d010      	beq.n	801ade0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801adbe:	2300      	movs	r3, #0
 801adc0:	623b      	str	r3, [r7, #32]
 801adc2:	e00d      	b.n	801ade0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801adc4:	68fb      	ldr	r3, [r7, #12]
 801adc6:	685b      	ldr	r3, [r3, #4]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d006      	beq.n	801adda <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801adcc:	4b38      	ldr	r3, [pc, #224]	; (801aeb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801adce:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801add2:	493a      	ldr	r1, [pc, #232]	; (801aebc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801add4:	4838      	ldr	r0, [pc, #224]	; (801aeb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801add6:	f001 fb9d 	bl	801c514 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	68ba      	ldr	r2, [r7, #8]
 801adde:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d105      	bne.n	801adf2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ade6:	68fb      	ldr	r3, [r7, #12]
 801ade8:	7f9b      	ldrb	r3, [r3, #30]
 801adea:	f003 0301 	and.w	r3, r3, #1
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d059      	beq.n	801aea6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801adf2:	6a3b      	ldr	r3, [r7, #32]
 801adf4:	2b00      	cmp	r3, #0
 801adf6:	d04f      	beq.n	801ae98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	685b      	ldr	r3, [r3, #4]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d006      	beq.n	801ae0e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	685b      	ldr	r3, [r3, #4]
 801ae04:	685b      	ldr	r3, [r3, #4]
 801ae06:	889b      	ldrh	r3, [r3, #4]
 801ae08:	b29b      	uxth	r3, r3
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d002      	beq.n	801ae14 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ae0e:	2300      	movs	r3, #0
 801ae10:	623b      	str	r3, [r7, #32]
 801ae12:	e041      	b.n	801ae98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ae14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae16:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ae1e:	e012      	b.n	801ae46 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae22:	685b      	ldr	r3, [r3, #4]
 801ae24:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae28:	88db      	ldrh	r3, [r3, #6]
 801ae2a:	b29a      	uxth	r2, r3
 801ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae2e:	889b      	ldrh	r3, [r3, #4]
 801ae30:	b29b      	uxth	r3, r3
 801ae32:	429a      	cmp	r2, r3
 801ae34:	d002      	beq.n	801ae3c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ae36:	2300      	movs	r3, #0
 801ae38:	623b      	str	r3, [r7, #32]
            break;
 801ae3a:	e007      	b.n	801ae4c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ae3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae3e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d1e9      	bne.n	801ae20 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ae4c:	6a3b      	ldr	r3, [r7, #32]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d022      	beq.n	801ae98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	685b      	ldr	r3, [r3, #4]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d106      	bne.n	801ae68 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ae5a:	4b15      	ldr	r3, [pc, #84]	; (801aeb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ae5c:	f240 12df 	movw	r2, #479	; 0x1df
 801ae60:	4917      	ldr	r1, [pc, #92]	; (801aec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ae62:	4815      	ldr	r0, [pc, #84]	; (801aeb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ae64:	f001 fb56 	bl	801c514 <iprintf>
          LWIP_ASSERT("sanity check",
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	685b      	ldr	r3, [r3, #4]
 801ae6c:	685b      	ldr	r3, [r3, #4]
 801ae6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ae70:	429a      	cmp	r2, r3
 801ae72:	d106      	bne.n	801ae82 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ae74:	4b0e      	ldr	r3, [pc, #56]	; (801aeb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ae76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ae7a:	4911      	ldr	r1, [pc, #68]	; (801aec0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ae7c:	480e      	ldr	r0, [pc, #56]	; (801aeb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ae7e:	f001 fb49 	bl	801c514 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d006      	beq.n	801ae98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ae8a:	4b09      	ldr	r3, [pc, #36]	; (801aeb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ae8c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801ae90:	490c      	ldr	r1, [pc, #48]	; (801aec4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ae92:	4809      	ldr	r0, [pc, #36]	; (801aeb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ae94:	f001 fb3e 	bl	801c514 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ae98:	6a3b      	ldr	r3, [r7, #32]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	bf14      	ite	ne
 801ae9e:	2301      	movne	r3, #1
 801aea0:	2300      	moveq	r3, #0
 801aea2:	b2db      	uxtb	r3, r3
 801aea4:	e000      	b.n	801aea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801aea6:	2300      	movs	r3, #0
}
 801aea8:	4618      	mov	r0, r3
 801aeaa:	3730      	adds	r7, #48	; 0x30
 801aeac:	46bd      	mov	sp, r7
 801aeae:	bd80      	pop	{r7, pc}
 801aeb0:	080212d0 	.word	0x080212d0
 801aeb4:	080213b4 	.word	0x080213b4
 801aeb8:	08021318 	.word	0x08021318
 801aebc:	080213d4 	.word	0x080213d4
 801aec0:	0802140c 	.word	0x0802140c
 801aec4:	0802141c 	.word	0x0802141c

0801aec8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b08e      	sub	sp, #56	; 0x38
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	685b      	ldr	r3, [r3, #4]
 801aed4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801aed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aed8:	781b      	ldrb	r3, [r3, #0]
 801aeda:	f003 030f 	and.w	r3, r3, #15
 801aede:	b2db      	uxtb	r3, r3
 801aee0:	009b      	lsls	r3, r3, #2
 801aee2:	b2db      	uxtb	r3, r3
 801aee4:	2b14      	cmp	r3, #20
 801aee6:	f040 8171 	bne.w	801b1cc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aeec:	88db      	ldrh	r3, [r3, #6]
 801aeee:	b29b      	uxth	r3, r3
 801aef0:	4618      	mov	r0, r3
 801aef2:	f7f4 fc45 	bl	800f780 <lwip_htons>
 801aef6:	4603      	mov	r3, r0
 801aef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aefc:	b29b      	uxth	r3, r3
 801aefe:	00db      	lsls	r3, r3, #3
 801af00:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af04:	885b      	ldrh	r3, [r3, #2]
 801af06:	b29b      	uxth	r3, r3
 801af08:	4618      	mov	r0, r3
 801af0a:	f7f4 fc39 	bl	800f780 <lwip_htons>
 801af0e:	4603      	mov	r3, r0
 801af10:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801af12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af14:	781b      	ldrb	r3, [r3, #0]
 801af16:	f003 030f 	and.w	r3, r3, #15
 801af1a:	b2db      	uxtb	r3, r3
 801af1c:	009b      	lsls	r3, r3, #2
 801af1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801af22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801af26:	b29b      	uxth	r3, r3
 801af28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801af2a:	429a      	cmp	r2, r3
 801af2c:	f0c0 8150 	bcc.w	801b1d0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801af30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801af34:	b29b      	uxth	r3, r3
 801af36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801af38:	1ad3      	subs	r3, r2, r3
 801af3a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801af3c:	6878      	ldr	r0, [r7, #4]
 801af3e:	f7f6 f8ab 	bl	8011098 <pbuf_clen>
 801af42:	4603      	mov	r3, r0
 801af44:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801af46:	4b8c      	ldr	r3, [pc, #560]	; (801b178 <ip4_reass+0x2b0>)
 801af48:	881b      	ldrh	r3, [r3, #0]
 801af4a:	461a      	mov	r2, r3
 801af4c:	8c3b      	ldrh	r3, [r7, #32]
 801af4e:	4413      	add	r3, r2
 801af50:	2b0a      	cmp	r3, #10
 801af52:	dd10      	ble.n	801af76 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801af54:	8c3b      	ldrh	r3, [r7, #32]
 801af56:	4619      	mov	r1, r3
 801af58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801af5a:	f7ff fd81 	bl	801aa60 <ip_reass_remove_oldest_datagram>
 801af5e:	4603      	mov	r3, r0
 801af60:	2b00      	cmp	r3, #0
 801af62:	f000 8137 	beq.w	801b1d4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801af66:	4b84      	ldr	r3, [pc, #528]	; (801b178 <ip4_reass+0x2b0>)
 801af68:	881b      	ldrh	r3, [r3, #0]
 801af6a:	461a      	mov	r2, r3
 801af6c:	8c3b      	ldrh	r3, [r7, #32]
 801af6e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801af70:	2b0a      	cmp	r3, #10
 801af72:	f300 812f 	bgt.w	801b1d4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801af76:	4b81      	ldr	r3, [pc, #516]	; (801b17c <ip4_reass+0x2b4>)
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	633b      	str	r3, [r7, #48]	; 0x30
 801af7c:	e015      	b.n	801afaa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af80:	695a      	ldr	r2, [r3, #20]
 801af82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af84:	68db      	ldr	r3, [r3, #12]
 801af86:	429a      	cmp	r2, r3
 801af88:	d10c      	bne.n	801afa4 <ip4_reass+0xdc>
 801af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af8c:	699a      	ldr	r2, [r3, #24]
 801af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af90:	691b      	ldr	r3, [r3, #16]
 801af92:	429a      	cmp	r2, r3
 801af94:	d106      	bne.n	801afa4 <ip4_reass+0xdc>
 801af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af98:	899a      	ldrh	r2, [r3, #12]
 801af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af9c:	889b      	ldrh	r3, [r3, #4]
 801af9e:	b29b      	uxth	r3, r3
 801afa0:	429a      	cmp	r2, r3
 801afa2:	d006      	beq.n	801afb2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	633b      	str	r3, [r7, #48]	; 0x30
 801afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afac:	2b00      	cmp	r3, #0
 801afae:	d1e6      	bne.n	801af7e <ip4_reass+0xb6>
 801afb0:	e000      	b.n	801afb4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801afb2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d109      	bne.n	801afce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801afba:	8c3b      	ldrh	r3, [r7, #32]
 801afbc:	4619      	mov	r1, r3
 801afbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801afc0:	f7ff fdb0 	bl	801ab24 <ip_reass_enqueue_new_datagram>
 801afc4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d11c      	bne.n	801b006 <ip4_reass+0x13e>
      goto nullreturn;
 801afcc:	e105      	b.n	801b1da <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801afce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afd0:	88db      	ldrh	r3, [r3, #6]
 801afd2:	b29b      	uxth	r3, r3
 801afd4:	4618      	mov	r0, r3
 801afd6:	f7f4 fbd3 	bl	800f780 <lwip_htons>
 801afda:	4603      	mov	r3, r0
 801afdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d110      	bne.n	801b006 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afe6:	89db      	ldrh	r3, [r3, #14]
 801afe8:	4618      	mov	r0, r3
 801afea:	f7f4 fbc9 	bl	800f780 <lwip_htons>
 801afee:	4603      	mov	r3, r0
 801aff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d006      	beq.n	801b006 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801affa:	3308      	adds	r3, #8
 801affc:	2214      	movs	r2, #20
 801affe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b000:	4618      	mov	r0, r3
 801b002:	f001 fd20 	bl	801ca46 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b008:	88db      	ldrh	r3, [r3, #6]
 801b00a:	b29b      	uxth	r3, r3
 801b00c:	f003 0320 	and.w	r3, r3, #32
 801b010:	2b00      	cmp	r3, #0
 801b012:	bf0c      	ite	eq
 801b014:	2301      	moveq	r3, #1
 801b016:	2300      	movne	r3, #0
 801b018:	b2db      	uxtb	r3, r3
 801b01a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b01c:	69fb      	ldr	r3, [r7, #28]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d00e      	beq.n	801b040 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b022:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b026:	4413      	add	r3, r2
 801b028:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b02a:	8b7a      	ldrh	r2, [r7, #26]
 801b02c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b02e:	429a      	cmp	r2, r3
 801b030:	f0c0 80a0 	bcc.w	801b174 <ip4_reass+0x2ac>
 801b034:	8b7b      	ldrh	r3, [r7, #26]
 801b036:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b03a:	4293      	cmp	r3, r2
 801b03c:	f200 809a 	bhi.w	801b174 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b040:	69fa      	ldr	r2, [r7, #28]
 801b042:	6879      	ldr	r1, [r7, #4]
 801b044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b046:	f7ff fdd5 	bl	801abf4 <ip_reass_chain_frag_into_datagram_and_validate>
 801b04a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b04c:	697b      	ldr	r3, [r7, #20]
 801b04e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b052:	f000 809b 	beq.w	801b18c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b056:	4b48      	ldr	r3, [pc, #288]	; (801b178 <ip4_reass+0x2b0>)
 801b058:	881a      	ldrh	r2, [r3, #0]
 801b05a:	8c3b      	ldrh	r3, [r7, #32]
 801b05c:	4413      	add	r3, r2
 801b05e:	b29a      	uxth	r2, r3
 801b060:	4b45      	ldr	r3, [pc, #276]	; (801b178 <ip4_reass+0x2b0>)
 801b062:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b064:	69fb      	ldr	r3, [r7, #28]
 801b066:	2b00      	cmp	r3, #0
 801b068:	d00d      	beq.n	801b086 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b06a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b06c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b06e:	4413      	add	r3, r2
 801b070:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b074:	8a7a      	ldrh	r2, [r7, #18]
 801b076:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b07a:	7f9b      	ldrb	r3, [r3, #30]
 801b07c:	f043 0301 	orr.w	r3, r3, #1
 801b080:	b2da      	uxtb	r2, r3
 801b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b084:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b086:	697b      	ldr	r3, [r7, #20]
 801b088:	2b01      	cmp	r3, #1
 801b08a:	d171      	bne.n	801b170 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b08e:	8b9b      	ldrh	r3, [r3, #28]
 801b090:	3314      	adds	r3, #20
 801b092:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b096:	685b      	ldr	r3, [r3, #4]
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0a0:	685b      	ldr	r3, [r3, #4]
 801b0a2:	685b      	ldr	r3, [r3, #4]
 801b0a4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0a8:	3308      	adds	r3, #8
 801b0aa:	2214      	movs	r2, #20
 801b0ac:	4619      	mov	r1, r3
 801b0ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b0b0:	f001 fcc9 	bl	801ca46 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b0b4:	8a3b      	ldrh	r3, [r7, #16]
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	f7f4 fb62 	bl	800f780 <lwip_htons>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	461a      	mov	r2, r3
 801b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0c6:	2200      	movs	r2, #0
 801b0c8:	719a      	strb	r2, [r3, #6]
 801b0ca:	2200      	movs	r2, #0
 801b0cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0d0:	2200      	movs	r2, #0
 801b0d2:	729a      	strb	r2, [r3, #10]
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0da:	685b      	ldr	r3, [r3, #4]
 801b0dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b0de:	e00d      	b.n	801b0fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b0e2:	685b      	ldr	r3, [r3, #4]
 801b0e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b0e6:	2114      	movs	r1, #20
 801b0e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b0ea:	f7f5 fec1 	bl	8010e70 <pbuf_remove_header>
      pbuf_cat(p, r);
 801b0ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b0f0:	6878      	ldr	r0, [r7, #4]
 801b0f2:	f7f6 f811 	bl	8011118 <pbuf_cat>
      r = iprh->next_pbuf;
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d1ee      	bne.n	801b0e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b102:	4b1e      	ldr	r3, [pc, #120]	; (801b17c <ip4_reass+0x2b4>)
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b108:	429a      	cmp	r2, r3
 801b10a:	d102      	bne.n	801b112 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b10c:	2300      	movs	r3, #0
 801b10e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b110:	e010      	b.n	801b134 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b112:	4b1a      	ldr	r3, [pc, #104]	; (801b17c <ip4_reass+0x2b4>)
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b118:	e007      	b.n	801b12a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b120:	429a      	cmp	r2, r3
 801b122:	d006      	beq.n	801b132 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d1f4      	bne.n	801b11a <ip4_reass+0x252>
 801b130:	e000      	b.n	801b134 <ip4_reass+0x26c>
          break;
 801b132:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b134:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b138:	f7ff fd2e 	bl	801ab98 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b13c:	6878      	ldr	r0, [r7, #4]
 801b13e:	f7f5 ffab 	bl	8011098 <pbuf_clen>
 801b142:	4603      	mov	r3, r0
 801b144:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b146:	4b0c      	ldr	r3, [pc, #48]	; (801b178 <ip4_reass+0x2b0>)
 801b148:	881b      	ldrh	r3, [r3, #0]
 801b14a:	8c3a      	ldrh	r2, [r7, #32]
 801b14c:	429a      	cmp	r2, r3
 801b14e:	d906      	bls.n	801b15e <ip4_reass+0x296>
 801b150:	4b0b      	ldr	r3, [pc, #44]	; (801b180 <ip4_reass+0x2b8>)
 801b152:	f240 229b 	movw	r2, #667	; 0x29b
 801b156:	490b      	ldr	r1, [pc, #44]	; (801b184 <ip4_reass+0x2bc>)
 801b158:	480b      	ldr	r0, [pc, #44]	; (801b188 <ip4_reass+0x2c0>)
 801b15a:	f001 f9db 	bl	801c514 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b15e:	4b06      	ldr	r3, [pc, #24]	; (801b178 <ip4_reass+0x2b0>)
 801b160:	881a      	ldrh	r2, [r3, #0]
 801b162:	8c3b      	ldrh	r3, [r7, #32]
 801b164:	1ad3      	subs	r3, r2, r3
 801b166:	b29a      	uxth	r2, r3
 801b168:	4b03      	ldr	r3, [pc, #12]	; (801b178 <ip4_reass+0x2b0>)
 801b16a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	e038      	b.n	801b1e2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b170:	2300      	movs	r3, #0
 801b172:	e036      	b.n	801b1e2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801b174:	bf00      	nop
 801b176:	e00a      	b.n	801b18e <ip4_reass+0x2c6>
 801b178:	2000c764 	.word	0x2000c764
 801b17c:	2000c760 	.word	0x2000c760
 801b180:	080212d0 	.word	0x080212d0
 801b184:	08021440 	.word	0x08021440
 801b188:	08021318 	.word	0x08021318
    goto nullreturn_ipr;
 801b18c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b190:	2b00      	cmp	r3, #0
 801b192:	d106      	bne.n	801b1a2 <ip4_reass+0x2da>
 801b194:	4b15      	ldr	r3, [pc, #84]	; (801b1ec <ip4_reass+0x324>)
 801b196:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b19a:	4915      	ldr	r1, [pc, #84]	; (801b1f0 <ip4_reass+0x328>)
 801b19c:	4815      	ldr	r0, [pc, #84]	; (801b1f4 <ip4_reass+0x32c>)
 801b19e:	f001 f9b9 	bl	801c514 <iprintf>
  if (ipr->p == NULL) {
 801b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1a4:	685b      	ldr	r3, [r3, #4]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d116      	bne.n	801b1d8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b1aa:	4b13      	ldr	r3, [pc, #76]	; (801b1f8 <ip4_reass+0x330>)
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b1b0:	429a      	cmp	r2, r3
 801b1b2:	d006      	beq.n	801b1c2 <ip4_reass+0x2fa>
 801b1b4:	4b0d      	ldr	r3, [pc, #52]	; (801b1ec <ip4_reass+0x324>)
 801b1b6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b1ba:	4910      	ldr	r1, [pc, #64]	; (801b1fc <ip4_reass+0x334>)
 801b1bc:	480d      	ldr	r0, [pc, #52]	; (801b1f4 <ip4_reass+0x32c>)
 801b1be:	f001 f9a9 	bl	801c514 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b1c2:	2100      	movs	r1, #0
 801b1c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b1c6:	f7ff fce7 	bl	801ab98 <ip_reass_dequeue_datagram>
 801b1ca:	e006      	b.n	801b1da <ip4_reass+0x312>
    goto nullreturn;
 801b1cc:	bf00      	nop
 801b1ce:	e004      	b.n	801b1da <ip4_reass+0x312>
    goto nullreturn;
 801b1d0:	bf00      	nop
 801b1d2:	e002      	b.n	801b1da <ip4_reass+0x312>
      goto nullreturn;
 801b1d4:	bf00      	nop
 801b1d6:	e000      	b.n	801b1da <ip4_reass+0x312>
  }

nullreturn:
 801b1d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b1da:	6878      	ldr	r0, [r7, #4]
 801b1dc:	f7f5 fece 	bl	8010f7c <pbuf_free>
  return NULL;
 801b1e0:	2300      	movs	r3, #0
}
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	3738      	adds	r7, #56	; 0x38
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	bd80      	pop	{r7, pc}
 801b1ea:	bf00      	nop
 801b1ec:	080212d0 	.word	0x080212d0
 801b1f0:	0802145c 	.word	0x0802145c
 801b1f4:	08021318 	.word	0x08021318
 801b1f8:	2000c760 	.word	0x2000c760
 801b1fc:	08021468 	.word	0x08021468

0801b200 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b200:	b580      	push	{r7, lr}
 801b202:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b204:	2005      	movs	r0, #5
 801b206:	f7f4 ff93 	bl	8010130 <memp_malloc>
 801b20a:	4603      	mov	r3, r0
}
 801b20c:	4618      	mov	r0, r3
 801b20e:	bd80      	pop	{r7, pc}

0801b210 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b210:	b580      	push	{r7, lr}
 801b212:	b082      	sub	sp, #8
 801b214:	af00      	add	r7, sp, #0
 801b216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d106      	bne.n	801b22c <ip_frag_free_pbuf_custom_ref+0x1c>
 801b21e:	4b07      	ldr	r3, [pc, #28]	; (801b23c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b220:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b224:	4906      	ldr	r1, [pc, #24]	; (801b240 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b226:	4807      	ldr	r0, [pc, #28]	; (801b244 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b228:	f001 f974 	bl	801c514 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b22c:	6879      	ldr	r1, [r7, #4]
 801b22e:	2005      	movs	r0, #5
 801b230:	f7f4 fff4 	bl	801021c <memp_free>
}
 801b234:	bf00      	nop
 801b236:	3708      	adds	r7, #8
 801b238:	46bd      	mov	sp, r7
 801b23a:	bd80      	pop	{r7, pc}
 801b23c:	080212d0 	.word	0x080212d0
 801b240:	08021488 	.word	0x08021488
 801b244:	08021318 	.word	0x08021318

0801b248 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b248:	b580      	push	{r7, lr}
 801b24a:	b084      	sub	sp, #16
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	2b00      	cmp	r3, #0
 801b258:	d106      	bne.n	801b268 <ipfrag_free_pbuf_custom+0x20>
 801b25a:	4b11      	ldr	r3, [pc, #68]	; (801b2a0 <ipfrag_free_pbuf_custom+0x58>)
 801b25c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b260:	4910      	ldr	r1, [pc, #64]	; (801b2a4 <ipfrag_free_pbuf_custom+0x5c>)
 801b262:	4811      	ldr	r0, [pc, #68]	; (801b2a8 <ipfrag_free_pbuf_custom+0x60>)
 801b264:	f001 f956 	bl	801c514 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b268:	68fa      	ldr	r2, [r7, #12]
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	429a      	cmp	r2, r3
 801b26e:	d006      	beq.n	801b27e <ipfrag_free_pbuf_custom+0x36>
 801b270:	4b0b      	ldr	r3, [pc, #44]	; (801b2a0 <ipfrag_free_pbuf_custom+0x58>)
 801b272:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b276:	490d      	ldr	r1, [pc, #52]	; (801b2ac <ipfrag_free_pbuf_custom+0x64>)
 801b278:	480b      	ldr	r0, [pc, #44]	; (801b2a8 <ipfrag_free_pbuf_custom+0x60>)
 801b27a:	f001 f94b 	bl	801c514 <iprintf>
  if (pcr->original != NULL) {
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	695b      	ldr	r3, [r3, #20]
 801b282:	2b00      	cmp	r3, #0
 801b284:	d004      	beq.n	801b290 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	695b      	ldr	r3, [r3, #20]
 801b28a:	4618      	mov	r0, r3
 801b28c:	f7f5 fe76 	bl	8010f7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b290:	68f8      	ldr	r0, [r7, #12]
 801b292:	f7ff ffbd 	bl	801b210 <ip_frag_free_pbuf_custom_ref>
}
 801b296:	bf00      	nop
 801b298:	3710      	adds	r7, #16
 801b29a:	46bd      	mov	sp, r7
 801b29c:	bd80      	pop	{r7, pc}
 801b29e:	bf00      	nop
 801b2a0:	080212d0 	.word	0x080212d0
 801b2a4:	08021494 	.word	0x08021494
 801b2a8:	08021318 	.word	0x08021318
 801b2ac:	080214a0 	.word	0x080214a0

0801b2b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	b094      	sub	sp, #80	; 0x50
 801b2b4:	af02      	add	r7, sp, #8
 801b2b6:	60f8      	str	r0, [r7, #12]
 801b2b8:	60b9      	str	r1, [r7, #8]
 801b2ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b2bc:	2300      	movs	r3, #0
 801b2be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b2c2:	68bb      	ldr	r3, [r7, #8]
 801b2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b2c6:	3b14      	subs	r3, #20
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	da00      	bge.n	801b2ce <ip4_frag+0x1e>
 801b2cc:	3307      	adds	r3, #7
 801b2ce:	10db      	asrs	r3, r3, #3
 801b2d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b2d2:	2314      	movs	r3, #20
 801b2d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	685b      	ldr	r3, [r3, #4]
 801b2da:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b2de:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2e2:	781b      	ldrb	r3, [r3, #0]
 801b2e4:	f003 030f 	and.w	r3, r3, #15
 801b2e8:	b2db      	uxtb	r3, r3
 801b2ea:	009b      	lsls	r3, r3, #2
 801b2ec:	b2db      	uxtb	r3, r3
 801b2ee:	2b14      	cmp	r3, #20
 801b2f0:	d002      	beq.n	801b2f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b2f2:	f06f 0305 	mvn.w	r3, #5
 801b2f6:	e110      	b.n	801b51a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	895b      	ldrh	r3, [r3, #10]
 801b2fc:	2b13      	cmp	r3, #19
 801b2fe:	d809      	bhi.n	801b314 <ip4_frag+0x64>
 801b300:	4b88      	ldr	r3, [pc, #544]	; (801b524 <ip4_frag+0x274>)
 801b302:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b306:	4988      	ldr	r1, [pc, #544]	; (801b528 <ip4_frag+0x278>)
 801b308:	4888      	ldr	r0, [pc, #544]	; (801b52c <ip4_frag+0x27c>)
 801b30a:	f001 f903 	bl	801c514 <iprintf>
 801b30e:	f06f 0305 	mvn.w	r3, #5
 801b312:	e102      	b.n	801b51a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b316:	88db      	ldrh	r3, [r3, #6]
 801b318:	b29b      	uxth	r3, r3
 801b31a:	4618      	mov	r0, r3
 801b31c:	f7f4 fa30 	bl	800f780 <lwip_htons>
 801b320:	4603      	mov	r3, r0
 801b322:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b324:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b326:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b32a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b32e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b334:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	891b      	ldrh	r3, [r3, #8]
 801b33a:	3b14      	subs	r3, #20
 801b33c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b340:	e0e1      	b.n	801b506 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b342:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b344:	00db      	lsls	r3, r3, #3
 801b346:	b29b      	uxth	r3, r3
 801b348:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b34c:	4293      	cmp	r3, r2
 801b34e:	bf28      	it	cs
 801b350:	4613      	movcs	r3, r2
 801b352:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b354:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b358:	2114      	movs	r1, #20
 801b35a:	200e      	movs	r0, #14
 801b35c:	f7f5 fb2a 	bl	80109b4 <pbuf_alloc>
 801b360:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b364:	2b00      	cmp	r3, #0
 801b366:	f000 80d5 	beq.w	801b514 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b36c:	895b      	ldrh	r3, [r3, #10]
 801b36e:	2b13      	cmp	r3, #19
 801b370:	d806      	bhi.n	801b380 <ip4_frag+0xd0>
 801b372:	4b6c      	ldr	r3, [pc, #432]	; (801b524 <ip4_frag+0x274>)
 801b374:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b378:	496d      	ldr	r1, [pc, #436]	; (801b530 <ip4_frag+0x280>)
 801b37a:	486c      	ldr	r0, [pc, #432]	; (801b52c <ip4_frag+0x27c>)
 801b37c:	f001 f8ca 	bl	801c514 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b382:	685b      	ldr	r3, [r3, #4]
 801b384:	2214      	movs	r2, #20
 801b386:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b388:	4618      	mov	r0, r3
 801b38a:	f001 fb5c 	bl	801ca46 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b390:	685b      	ldr	r3, [r3, #4]
 801b392:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b394:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b396:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b39a:	e064      	b.n	801b466 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	895a      	ldrh	r2, [r3, #10]
 801b3a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b3a2:	1ad3      	subs	r3, r2, r3
 801b3a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b3a6:	68fb      	ldr	r3, [r7, #12]
 801b3a8:	895b      	ldrh	r3, [r3, #10]
 801b3aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b3ac:	429a      	cmp	r2, r3
 801b3ae:	d906      	bls.n	801b3be <ip4_frag+0x10e>
 801b3b0:	4b5c      	ldr	r3, [pc, #368]	; (801b524 <ip4_frag+0x274>)
 801b3b2:	f240 322d 	movw	r2, #813	; 0x32d
 801b3b6:	495f      	ldr	r1, [pc, #380]	; (801b534 <ip4_frag+0x284>)
 801b3b8:	485c      	ldr	r0, [pc, #368]	; (801b52c <ip4_frag+0x27c>)
 801b3ba:	f001 f8ab 	bl	801c514 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b3be:	8bfa      	ldrh	r2, [r7, #30]
 801b3c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b3c4:	4293      	cmp	r3, r2
 801b3c6:	bf28      	it	cs
 801b3c8:	4613      	movcs	r3, r2
 801b3ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b3ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d105      	bne.n	801b3e2 <ip4_frag+0x132>
        poff = 0;
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	60fb      	str	r3, [r7, #12]
        continue;
 801b3e0:	e041      	b.n	801b466 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b3e2:	f7ff ff0d 	bl	801b200 <ip_frag_alloc_pbuf_custom_ref>
 801b3e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b3e8:	69bb      	ldr	r3, [r7, #24]
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	d103      	bne.n	801b3f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b3ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b3f0:	f7f5 fdc4 	bl	8010f7c <pbuf_free>
        goto memerr;
 801b3f4:	e08f      	b.n	801b516 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b3f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b3fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b3fe:	4413      	add	r3, r2
 801b400:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b404:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b408:	9201      	str	r2, [sp, #4]
 801b40a:	9300      	str	r3, [sp, #0]
 801b40c:	4603      	mov	r3, r0
 801b40e:	2241      	movs	r2, #65	; 0x41
 801b410:	2000      	movs	r0, #0
 801b412:	f7f5 fbf9 	bl	8010c08 <pbuf_alloced_custom>
 801b416:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b418:	697b      	ldr	r3, [r7, #20]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d106      	bne.n	801b42c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b41e:	69b8      	ldr	r0, [r7, #24]
 801b420:	f7ff fef6 	bl	801b210 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b426:	f7f5 fda9 	bl	8010f7c <pbuf_free>
        goto memerr;
 801b42a:	e074      	b.n	801b516 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801b42c:	68f8      	ldr	r0, [r7, #12]
 801b42e:	f7f5 fe4b 	bl	80110c8 <pbuf_ref>
      pcr->original = p;
 801b432:	69bb      	ldr	r3, [r7, #24]
 801b434:	68fa      	ldr	r2, [r7, #12]
 801b436:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b438:	69bb      	ldr	r3, [r7, #24]
 801b43a:	4a3f      	ldr	r2, [pc, #252]	; (801b538 <ip4_frag+0x288>)
 801b43c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b43e:	6979      	ldr	r1, [r7, #20]
 801b440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b442:	f7f5 fe69 	bl	8011118 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b446:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b44a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b44e:	1ad3      	subs	r3, r2, r3
 801b450:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b454:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d004      	beq.n	801b466 <ip4_frag+0x1b6>
        poff = 0;
 801b45c:	2300      	movs	r3, #0
 801b45e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b466:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d196      	bne.n	801b39c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b46e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b470:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b474:	4413      	add	r3, r2
 801b476:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b478:	68bb      	ldr	r3, [r7, #8]
 801b47a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b47c:	f1a3 0213 	sub.w	r2, r3, #19
 801b480:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b484:	429a      	cmp	r2, r3
 801b486:	bfcc      	ite	gt
 801b488:	2301      	movgt	r3, #1
 801b48a:	2300      	movle	r3, #0
 801b48c:	b2db      	uxtb	r3, r3
 801b48e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b490:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b498:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b49a:	6a3b      	ldr	r3, [r7, #32]
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d002      	beq.n	801b4a6 <ip4_frag+0x1f6>
 801b4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d003      	beq.n	801b4ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b4a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b4a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b4ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b4ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	f7f4 f965 	bl	800f780 <lwip_htons>
 801b4b6:	4603      	mov	r3, r0
 801b4b8:	461a      	mov	r2, r3
 801b4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b4be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b4c0:	3314      	adds	r3, #20
 801b4c2:	b29b      	uxth	r3, r3
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	f7f4 f95b 	bl	800f780 <lwip_htons>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	461a      	mov	r2, r3
 801b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	729a      	strb	r2, [r3, #10]
 801b4d8:	2200      	movs	r2, #0
 801b4da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b4dc:	68bb      	ldr	r3, [r7, #8]
 801b4de:	695b      	ldr	r3, [r3, #20]
 801b4e0:	687a      	ldr	r2, [r7, #4]
 801b4e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b4e4:	68b8      	ldr	r0, [r7, #8]
 801b4e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b4e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b4ea:	f7f5 fd47 	bl	8010f7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b4ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b4f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b4f4:	1ad3      	subs	r3, r2, r3
 801b4f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b4fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b4fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b500:	4413      	add	r3, r2
 801b502:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b506:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	f47f af19 	bne.w	801b342 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801b510:	2300      	movs	r3, #0
 801b512:	e002      	b.n	801b51a <ip4_frag+0x26a>
      goto memerr;
 801b514:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b51a:	4618      	mov	r0, r3
 801b51c:	3748      	adds	r7, #72	; 0x48
 801b51e:	46bd      	mov	sp, r7
 801b520:	bd80      	pop	{r7, pc}
 801b522:	bf00      	nop
 801b524:	080212d0 	.word	0x080212d0
 801b528:	080214ac 	.word	0x080214ac
 801b52c:	08021318 	.word	0x08021318
 801b530:	080214c8 	.word	0x080214c8
 801b534:	080214e8 	.word	0x080214e8
 801b538:	0801b249 	.word	0x0801b249

0801b53c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b086      	sub	sp, #24
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
 801b544:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b546:	230e      	movs	r3, #14
 801b548:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	895b      	ldrh	r3, [r3, #10]
 801b54e:	2b0e      	cmp	r3, #14
 801b550:	d96e      	bls.n	801b630 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	7bdb      	ldrb	r3, [r3, #15]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d106      	bne.n	801b568 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b55a:	683b      	ldr	r3, [r7, #0]
 801b55c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b560:	3301      	adds	r3, #1
 801b562:	b2da      	uxtb	r2, r3
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	685b      	ldr	r3, [r3, #4]
 801b56c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b56e:	693b      	ldr	r3, [r7, #16]
 801b570:	7b1a      	ldrb	r2, [r3, #12]
 801b572:	7b5b      	ldrb	r3, [r3, #13]
 801b574:	021b      	lsls	r3, r3, #8
 801b576:	4313      	orrs	r3, r2
 801b578:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b57a:	693b      	ldr	r3, [r7, #16]
 801b57c:	781b      	ldrb	r3, [r3, #0]
 801b57e:	f003 0301 	and.w	r3, r3, #1
 801b582:	2b00      	cmp	r3, #0
 801b584:	d023      	beq.n	801b5ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b586:	693b      	ldr	r3, [r7, #16]
 801b588:	781b      	ldrb	r3, [r3, #0]
 801b58a:	2b01      	cmp	r3, #1
 801b58c:	d10f      	bne.n	801b5ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b58e:	693b      	ldr	r3, [r7, #16]
 801b590:	785b      	ldrb	r3, [r3, #1]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d11b      	bne.n	801b5ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b596:	693b      	ldr	r3, [r7, #16]
 801b598:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b59a:	2b5e      	cmp	r3, #94	; 0x5e
 801b59c:	d117      	bne.n	801b5ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	7b5b      	ldrb	r3, [r3, #13]
 801b5a2:	f043 0310 	orr.w	r3, r3, #16
 801b5a6:	b2da      	uxtb	r2, r3
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	735a      	strb	r2, [r3, #13]
 801b5ac:	e00f      	b.n	801b5ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b5ae:	693b      	ldr	r3, [r7, #16]
 801b5b0:	2206      	movs	r2, #6
 801b5b2:	4928      	ldr	r1, [pc, #160]	; (801b654 <ethernet_input+0x118>)
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	f001 f913 	bl	801c7e0 <memcmp>
 801b5ba:	4603      	mov	r3, r0
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d106      	bne.n	801b5ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	7b5b      	ldrb	r3, [r3, #13]
 801b5c4:	f043 0308 	orr.w	r3, r3, #8
 801b5c8:	b2da      	uxtb	r2, r3
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b5ce:	89fb      	ldrh	r3, [r7, #14]
 801b5d0:	2b08      	cmp	r3, #8
 801b5d2:	d003      	beq.n	801b5dc <ethernet_input+0xa0>
 801b5d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b5d8:	d014      	beq.n	801b604 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b5da:	e032      	b.n	801b642 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b5dc:	683b      	ldr	r3, [r7, #0]
 801b5de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b5e2:	f003 0308 	and.w	r3, r3, #8
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d024      	beq.n	801b634 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b5ea:	8afb      	ldrh	r3, [r7, #22]
 801b5ec:	4619      	mov	r1, r3
 801b5ee:	6878      	ldr	r0, [r7, #4]
 801b5f0:	f7f5 fc3e 	bl	8010e70 <pbuf_remove_header>
 801b5f4:	4603      	mov	r3, r0
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d11e      	bne.n	801b638 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b5fa:	6839      	ldr	r1, [r7, #0]
 801b5fc:	6878      	ldr	r0, [r7, #4]
 801b5fe:	f7fe ff03 	bl	801a408 <ip4_input>
      break;
 801b602:	e013      	b.n	801b62c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b604:	683b      	ldr	r3, [r7, #0]
 801b606:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b60a:	f003 0308 	and.w	r3, r3, #8
 801b60e:	2b00      	cmp	r3, #0
 801b610:	d014      	beq.n	801b63c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b612:	8afb      	ldrh	r3, [r7, #22]
 801b614:	4619      	mov	r1, r3
 801b616:	6878      	ldr	r0, [r7, #4]
 801b618:	f7f5 fc2a 	bl	8010e70 <pbuf_remove_header>
 801b61c:	4603      	mov	r3, r0
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d10e      	bne.n	801b640 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b622:	6839      	ldr	r1, [r7, #0]
 801b624:	6878      	ldr	r0, [r7, #4]
 801b626:	f7fe f89f 	bl	8019768 <etharp_input>
      break;
 801b62a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b62c:	2300      	movs	r3, #0
 801b62e:	e00c      	b.n	801b64a <ethernet_input+0x10e>
    goto free_and_return;
 801b630:	bf00      	nop
 801b632:	e006      	b.n	801b642 <ethernet_input+0x106>
        goto free_and_return;
 801b634:	bf00      	nop
 801b636:	e004      	b.n	801b642 <ethernet_input+0x106>
        goto free_and_return;
 801b638:	bf00      	nop
 801b63a:	e002      	b.n	801b642 <ethernet_input+0x106>
        goto free_and_return;
 801b63c:	bf00      	nop
 801b63e:	e000      	b.n	801b642 <ethernet_input+0x106>
        goto free_and_return;
 801b640:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b642:	6878      	ldr	r0, [r7, #4]
 801b644:	f7f5 fc9a 	bl	8010f7c <pbuf_free>
  return ERR_OK;
 801b648:	2300      	movs	r3, #0
}
 801b64a:	4618      	mov	r0, r3
 801b64c:	3718      	adds	r7, #24
 801b64e:	46bd      	mov	sp, r7
 801b650:	bd80      	pop	{r7, pc}
 801b652:	bf00      	nop
 801b654:	08021834 	.word	0x08021834

0801b658 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b658:	b580      	push	{r7, lr}
 801b65a:	b086      	sub	sp, #24
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	60f8      	str	r0, [r7, #12]
 801b660:	60b9      	str	r1, [r7, #8]
 801b662:	607a      	str	r2, [r7, #4]
 801b664:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b666:	8c3b      	ldrh	r3, [r7, #32]
 801b668:	4618      	mov	r0, r3
 801b66a:	f7f4 f889 	bl	800f780 <lwip_htons>
 801b66e:	4603      	mov	r3, r0
 801b670:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b672:	210e      	movs	r1, #14
 801b674:	68b8      	ldr	r0, [r7, #8]
 801b676:	f7f5 fbeb 	bl	8010e50 <pbuf_add_header>
 801b67a:	4603      	mov	r3, r0
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d125      	bne.n	801b6cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	685b      	ldr	r3, [r3, #4]
 801b684:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b686:	693b      	ldr	r3, [r7, #16]
 801b688:	8afa      	ldrh	r2, [r7, #22]
 801b68a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b68c:	693b      	ldr	r3, [r7, #16]
 801b68e:	2206      	movs	r2, #6
 801b690:	6839      	ldr	r1, [r7, #0]
 801b692:	4618      	mov	r0, r3
 801b694:	f001 f9d7 	bl	801ca46 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b698:	693b      	ldr	r3, [r7, #16]
 801b69a:	3306      	adds	r3, #6
 801b69c:	2206      	movs	r2, #6
 801b69e:	6879      	ldr	r1, [r7, #4]
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f001 f9d0 	bl	801ca46 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b6ac:	2b06      	cmp	r3, #6
 801b6ae:	d006      	beq.n	801b6be <ethernet_output+0x66>
 801b6b0:	4b0a      	ldr	r3, [pc, #40]	; (801b6dc <ethernet_output+0x84>)
 801b6b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b6b6:	490a      	ldr	r1, [pc, #40]	; (801b6e0 <ethernet_output+0x88>)
 801b6b8:	480a      	ldr	r0, [pc, #40]	; (801b6e4 <ethernet_output+0x8c>)
 801b6ba:	f000 ff2b 	bl	801c514 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	699b      	ldr	r3, [r3, #24]
 801b6c2:	68b9      	ldr	r1, [r7, #8]
 801b6c4:	68f8      	ldr	r0, [r7, #12]
 801b6c6:	4798      	blx	r3
 801b6c8:	4603      	mov	r3, r0
 801b6ca:	e002      	b.n	801b6d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b6cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b6ce:	f06f 0301 	mvn.w	r3, #1
}
 801b6d2:	4618      	mov	r0, r3
 801b6d4:	3718      	adds	r7, #24
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	bd80      	pop	{r7, pc}
 801b6da:	bf00      	nop
 801b6dc:	080214f8 	.word	0x080214f8
 801b6e0:	08021530 	.word	0x08021530
 801b6e4:	08021564 	.word	0x08021564

0801b6e8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b086      	sub	sp, #24
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	6078      	str	r0, [r7, #4]
 801b6f0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801b6f2:	683b      	ldr	r3, [r7, #0]
 801b6f4:	60bb      	str	r3, [r7, #8]
 801b6f6:	2304      	movs	r3, #4
 801b6f8:	60fb      	str	r3, [r7, #12]
 801b6fa:	2300      	movs	r3, #0
 801b6fc:	613b      	str	r3, [r7, #16]
 801b6fe:	2300      	movs	r3, #0
 801b700:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801b702:	f107 0308 	add.w	r3, r7, #8
 801b706:	2100      	movs	r1, #0
 801b708:	4618      	mov	r0, r3
 801b70a:	f7ea fd2d 	bl	8006168 <osMessageCreate>
 801b70e:	4602      	mov	r2, r0
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d102      	bne.n	801b722 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801b71c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b720:	e000      	b.n	801b724 <sys_mbox_new+0x3c>

  return ERR_OK;
 801b722:	2300      	movs	r3, #0
}
 801b724:	4618      	mov	r0, r3
 801b726:	3718      	adds	r7, #24
 801b728:	46bd      	mov	sp, r7
 801b72a:	bd80      	pop	{r7, pc}

0801b72c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b72c:	b580      	push	{r7, lr}
 801b72e:	b084      	sub	sp, #16
 801b730:	af00      	add	r7, sp, #0
 801b732:	6078      	str	r0, [r7, #4]
 801b734:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	6839      	ldr	r1, [r7, #0]
 801b73c:	2200      	movs	r2, #0
 801b73e:	4618      	mov	r0, r3
 801b740:	f7ea fd3a 	bl	80061b8 <osMessagePut>
 801b744:	4603      	mov	r3, r0
 801b746:	2b00      	cmp	r3, #0
 801b748:	d102      	bne.n	801b750 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801b74a:	2300      	movs	r3, #0
 801b74c:	73fb      	strb	r3, [r7, #15]
 801b74e:	e001      	b.n	801b754 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b750:	23ff      	movs	r3, #255	; 0xff
 801b752:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b758:	4618      	mov	r0, r3
 801b75a:	3710      	adds	r7, #16
 801b75c:	46bd      	mov	sp, r7
 801b75e:	bd80      	pop	{r7, pc}

0801b760 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b08c      	sub	sp, #48	; 0x30
 801b764:	af00      	add	r7, sp, #0
 801b766:	61f8      	str	r0, [r7, #28]
 801b768:	61b9      	str	r1, [r7, #24]
 801b76a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801b76c:	f7ea fb3a 	bl	8005de4 <osKernelSysTick>
 801b770:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b772:	697b      	ldr	r3, [r7, #20]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d017      	beq.n	801b7a8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801b778:	69fb      	ldr	r3, [r7, #28]
 801b77a:	6819      	ldr	r1, [r3, #0]
 801b77c:	f107 0320 	add.w	r3, r7, #32
 801b780:	697a      	ldr	r2, [r7, #20]
 801b782:	4618      	mov	r0, r3
 801b784:	f7ea fd58 	bl	8006238 <osMessageGet>

    if(event.status == osEventMessage)
 801b788:	6a3b      	ldr	r3, [r7, #32]
 801b78a:	2b10      	cmp	r3, #16
 801b78c:	d109      	bne.n	801b7a2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801b78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b790:	461a      	mov	r2, r3
 801b792:	69bb      	ldr	r3, [r7, #24]
 801b794:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801b796:	f7ea fb25 	bl	8005de4 <osKernelSysTick>
 801b79a:	4602      	mov	r2, r0
 801b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b79e:	1ad3      	subs	r3, r2, r3
 801b7a0:	e019      	b.n	801b7d6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b7a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b7a6:	e016      	b.n	801b7d6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801b7a8:	69fb      	ldr	r3, [r7, #28]
 801b7aa:	6819      	ldr	r1, [r3, #0]
 801b7ac:	463b      	mov	r3, r7
 801b7ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	f7ea fd40 	bl	8006238 <osMessageGet>
 801b7b8:	f107 0320 	add.w	r3, r7, #32
 801b7bc:	463a      	mov	r2, r7
 801b7be:	ca07      	ldmia	r2, {r0, r1, r2}
 801b7c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b7c6:	461a      	mov	r2, r3
 801b7c8:	69bb      	ldr	r3, [r7, #24]
 801b7ca:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801b7cc:	f7ea fb0a 	bl	8005de4 <osKernelSysTick>
 801b7d0:	4602      	mov	r2, r0
 801b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7d4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	3730      	adds	r7, #48	; 0x30
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	bd80      	pop	{r7, pc}

0801b7de <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b7de:	b480      	push	{r7}
 801b7e0:	b083      	sub	sp, #12
 801b7e2:	af00      	add	r7, sp, #0
 801b7e4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d101      	bne.n	801b7f2 <sys_mbox_valid+0x14>
    return 0;
 801b7ee:	2300      	movs	r3, #0
 801b7f0:	e000      	b.n	801b7f4 <sys_mbox_valid+0x16>
  else
    return 1;
 801b7f2:	2301      	movs	r3, #1
}
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	370c      	adds	r7, #12
 801b7f8:	46bd      	mov	sp, r7
 801b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7fe:	4770      	bx	lr

0801b800 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b800:	b580      	push	{r7, lr}
 801b802:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801b804:	4803      	ldr	r0, [pc, #12]	; (801b814 <sys_init+0x14>)
 801b806:	f7ea fb5d 	bl	8005ec4 <osMutexCreate>
 801b80a:	4603      	mov	r3, r0
 801b80c:	4a02      	ldr	r2, [pc, #8]	; (801b818 <sys_init+0x18>)
 801b80e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801b810:	bf00      	nop
 801b812:	bd80      	pop	{r7, pc}
 801b814:	08021844 	.word	0x08021844
 801b818:	2000c768 	.word	0x2000c768

0801b81c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b084      	sub	sp, #16
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801b824:	2300      	movs	r3, #0
 801b826:	60bb      	str	r3, [r7, #8]
 801b828:	2300      	movs	r3, #0
 801b82a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801b82c:	f107 0308 	add.w	r3, r7, #8
 801b830:	4618      	mov	r0, r3
 801b832:	f7ea fb47 	bl	8005ec4 <osMutexCreate>
 801b836:	4602      	mov	r2, r0
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d102      	bne.n	801b84a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b848:	e000      	b.n	801b84c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b84a:	2300      	movs	r3, #0
}
 801b84c:	4618      	mov	r0, r3
 801b84e:	3710      	adds	r7, #16
 801b850:	46bd      	mov	sp, r7
 801b852:	bd80      	pop	{r7, pc}

0801b854 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b854:	b580      	push	{r7, lr}
 801b856:	b082      	sub	sp, #8
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b864:	4618      	mov	r0, r3
 801b866:	f7ea fb45 	bl	8005ef4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801b86a:	bf00      	nop
 801b86c:	3708      	adds	r7, #8
 801b86e:	46bd      	mov	sp, r7
 801b870:	bd80      	pop	{r7, pc}

0801b872 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b872:	b580      	push	{r7, lr}
 801b874:	b082      	sub	sp, #8
 801b876:	af00      	add	r7, sp, #0
 801b878:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	4618      	mov	r0, r3
 801b880:	f7ea fb86 	bl	8005f90 <osMutexRelease>
}
 801b884:	bf00      	nop
 801b886:	3708      	adds	r7, #8
 801b888:	46bd      	mov	sp, r7
 801b88a:	bd80      	pop	{r7, pc}

0801b88c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b08c      	sub	sp, #48	; 0x30
 801b890:	af00      	add	r7, sp, #0
 801b892:	60f8      	str	r0, [r7, #12]
 801b894:	60b9      	str	r1, [r7, #8]
 801b896:	607a      	str	r2, [r7, #4]
 801b898:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b89a:	f107 0314 	add.w	r3, r7, #20
 801b89e:	2200      	movs	r2, #0
 801b8a0:	601a      	str	r2, [r3, #0]
 801b8a2:	605a      	str	r2, [r3, #4]
 801b8a4:	609a      	str	r2, [r3, #8]
 801b8a6:	60da      	str	r2, [r3, #12]
 801b8a8:	611a      	str	r2, [r3, #16]
 801b8aa:	615a      	str	r2, [r3, #20]
 801b8ac:	619a      	str	r2, [r3, #24]
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	617b      	str	r3, [r7, #20]
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	61bb      	str	r3, [r7, #24]
 801b8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8b8:	b21b      	sxth	r3, r3
 801b8ba:	83bb      	strh	r3, [r7, #28]
 801b8bc:	683b      	ldr	r3, [r7, #0]
 801b8be:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b8c0:	f107 0314 	add.w	r3, r7, #20
 801b8c4:	6879      	ldr	r1, [r7, #4]
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	f7ea fa9c 	bl	8005e04 <osThreadCreate>
 801b8cc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	3730      	adds	r7, #48	; 0x30
 801b8d2:	46bd      	mov	sp, r7
 801b8d4:	bd80      	pop	{r7, pc}
	...

0801b8d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b8d8:	b580      	push	{r7, lr}
 801b8da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b8dc:	4b04      	ldr	r3, [pc, #16]	; (801b8f0 <sys_arch_protect+0x18>)
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b8e4:	4618      	mov	r0, r3
 801b8e6:	f7ea fb05 	bl	8005ef4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801b8ea:	2301      	movs	r3, #1
}
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	bd80      	pop	{r7, pc}
 801b8f0:	2000c768 	.word	0x2000c768

0801b8f4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	b082      	sub	sp, #8
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b8fc:	4b04      	ldr	r3, [pc, #16]	; (801b910 <sys_arch_unprotect+0x1c>)
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	4618      	mov	r0, r3
 801b902:	f7ea fb45 	bl	8005f90 <osMutexRelease>
}
 801b906:	bf00      	nop
 801b908:	3708      	adds	r7, #8
 801b90a:	46bd      	mov	sp, r7
 801b90c:	bd80      	pop	{r7, pc}
 801b90e:	bf00      	nop
 801b910:	2000c768 	.word	0x2000c768

0801b914 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 801b914:	b580      	push	{r7, lr}
 801b916:	b086      	sub	sp, #24
 801b918:	af02      	add	r7, sp, #8
 801b91a:	4603      	mov	r3, r0
 801b91c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 801b91e:	f107 020f 	add.w	r2, r7, #15
 801b922:	1df9      	adds	r1, r7, #7
 801b924:	2364      	movs	r3, #100	; 0x64
 801b926:	9300      	str	r3, [sp, #0]
 801b928:	2301      	movs	r3, #1
 801b92a:	4804      	ldr	r0, [pc, #16]	; (801b93c <W25qxx_Spi+0x28>)
 801b92c:	f7e8 ff82 	bl	8004834 <HAL_SPI_TransmitReceive>


	return ret;
 801b930:	7bfb      	ldrb	r3, [r7, #15]
}
 801b932:	4618      	mov	r0, r3
 801b934:	3710      	adds	r7, #16
 801b936:	46bd      	mov	sp, r7
 801b938:	bd80      	pop	{r7, pc}
 801b93a:	bf00      	nop
 801b93c:	20000438 	.word	0x20000438

0801b940 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b084      	sub	sp, #16
 801b944:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 801b946:	2300      	movs	r3, #0
 801b948:	60fb      	str	r3, [r7, #12]
 801b94a:	2300      	movs	r3, #0
 801b94c:	60bb      	str	r3, [r7, #8]
 801b94e:	2300      	movs	r3, #0
 801b950:	607b      	str	r3, [r7, #4]
 801b952:	2300      	movs	r3, #0
 801b954:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801b956:	2200      	movs	r2, #0
 801b958:	2108      	movs	r1, #8
 801b95a:	4813      	ldr	r0, [pc, #76]	; (801b9a8 <W25qxx_ReadID+0x68>)
 801b95c:	f7e7 fff6 	bl	800394c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 801b960:	209f      	movs	r0, #159	; 0x9f
 801b962:	f7ff ffd7 	bl	801b914 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801b966:	20a5      	movs	r0, #165	; 0xa5
 801b968:	f7ff ffd4 	bl	801b914 <W25qxx_Spi>
 801b96c:	4603      	mov	r3, r0
 801b96e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801b970:	20a5      	movs	r0, #165	; 0xa5
 801b972:	f7ff ffcf 	bl	801b914 <W25qxx_Spi>
 801b976:	4603      	mov	r3, r0
 801b978:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801b97a:	20a5      	movs	r0, #165	; 0xa5
 801b97c:	f7ff ffca 	bl	801b914 <W25qxx_Spi>
 801b980:	4603      	mov	r3, r0
 801b982:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801b984:	2201      	movs	r2, #1
 801b986:	2108      	movs	r1, #8
 801b988:	4807      	ldr	r0, [pc, #28]	; (801b9a8 <W25qxx_ReadID+0x68>)
 801b98a:	f7e7 ffdf 	bl	800394c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 801b98e:	68bb      	ldr	r3, [r7, #8]
 801b990:	041a      	lsls	r2, r3, #16
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	021b      	lsls	r3, r3, #8
 801b996:	4313      	orrs	r3, r2
 801b998:	683a      	ldr	r2, [r7, #0]
 801b99a:	4313      	orrs	r3, r2
 801b99c:	60fb      	str	r3, [r7, #12]
	return Temp;
 801b99e:	68fb      	ldr	r3, [r7, #12]
}
 801b9a0:	4618      	mov	r0, r3
 801b9a2:	3710      	adds	r7, #16
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}
 801b9a8:	40021000 	.word	0x40021000

0801b9ac <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 801b9ac:	b590      	push	{r4, r7, lr}
 801b9ae:	b083      	sub	sp, #12
 801b9b0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	2108      	movs	r1, #8
 801b9b6:	4816      	ldr	r0, [pc, #88]	; (801ba10 <W25qxx_ReadUniqID+0x64>)
 801b9b8:	f7e7 ffc8 	bl	800394c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 801b9bc:	204b      	movs	r0, #75	; 0x4b
 801b9be:	f7ff ffa9 	bl	801b914 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	71fb      	strb	r3, [r7, #7]
 801b9c6:	e005      	b.n	801b9d4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801b9c8:	20a5      	movs	r0, #165	; 0xa5
 801b9ca:	f7ff ffa3 	bl	801b914 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 801b9ce:	79fb      	ldrb	r3, [r7, #7]
 801b9d0:	3301      	adds	r3, #1
 801b9d2:	71fb      	strb	r3, [r7, #7]
 801b9d4:	79fb      	ldrb	r3, [r7, #7]
 801b9d6:	2b03      	cmp	r3, #3
 801b9d8:	d9f6      	bls.n	801b9c8 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 801b9da:	2300      	movs	r3, #0
 801b9dc:	71bb      	strb	r3, [r7, #6]
 801b9de:	e00b      	b.n	801b9f8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801b9e0:	79bc      	ldrb	r4, [r7, #6]
 801b9e2:	20a5      	movs	r0, #165	; 0xa5
 801b9e4:	f7ff ff96 	bl	801b914 <W25qxx_Spi>
 801b9e8:	4603      	mov	r3, r0
 801b9ea:	461a      	mov	r2, r3
 801b9ec:	4b09      	ldr	r3, [pc, #36]	; (801ba14 <W25qxx_ReadUniqID+0x68>)
 801b9ee:	4423      	add	r3, r4
 801b9f0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 801b9f2:	79bb      	ldrb	r3, [r7, #6]
 801b9f4:	3301      	adds	r3, #1
 801b9f6:	71bb      	strb	r3, [r7, #6]
 801b9f8:	79bb      	ldrb	r3, [r7, #6]
 801b9fa:	2b07      	cmp	r3, #7
 801b9fc:	d9f0      	bls.n	801b9e0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801b9fe:	2201      	movs	r2, #1
 801ba00:	2108      	movs	r1, #8
 801ba02:	4803      	ldr	r0, [pc, #12]	; (801ba10 <W25qxx_ReadUniqID+0x64>)
 801ba04:	f7e7 ffa2 	bl	800394c <HAL_GPIO_WritePin>
}
 801ba08:	bf00      	nop
 801ba0a:	370c      	adds	r7, #12
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bd90      	pop	{r4, r7, pc}
 801ba10:	40021000 	.word	0x40021000
 801ba14:	2000c76c 	.word	0x2000c76c

0801ba18 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ba1c:	2200      	movs	r2, #0
 801ba1e:	2108      	movs	r1, #8
 801ba20:	4807      	ldr	r0, [pc, #28]	; (801ba40 <W25qxx_WriteEnable+0x28>)
 801ba22:	f7e7 ff93 	bl	800394c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 801ba26:	2006      	movs	r0, #6
 801ba28:	f7ff ff74 	bl	801b914 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ba2c:	2201      	movs	r2, #1
 801ba2e:	2108      	movs	r1, #8
 801ba30:	4803      	ldr	r0, [pc, #12]	; (801ba40 <W25qxx_WriteEnable+0x28>)
 801ba32:	f7e7 ff8b 	bl	800394c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 801ba36:	2001      	movs	r0, #1
 801ba38:	f7e6 fa8a 	bl	8001f50 <HAL_Delay>
}
 801ba3c:	bf00      	nop
 801ba3e:	bd80      	pop	{r7, pc}
 801ba40:	40021000 	.word	0x40021000

0801ba44 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b084      	sub	sp, #16
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	4603      	mov	r3, r0
 801ba4c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 801ba4e:	2300      	movs	r3, #0
 801ba50:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ba52:	2200      	movs	r2, #0
 801ba54:	2108      	movs	r1, #8
 801ba56:	481c      	ldr	r0, [pc, #112]	; (801bac8 <W25qxx_ReadStatusRegister+0x84>)
 801ba58:	f7e7 ff78 	bl	800394c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 801ba5c:	79fb      	ldrb	r3, [r7, #7]
 801ba5e:	2b01      	cmp	r3, #1
 801ba60:	d10c      	bne.n	801ba7c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 801ba62:	2005      	movs	r0, #5
 801ba64:	f7ff ff56 	bl	801b914 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ba68:	20a5      	movs	r0, #165	; 0xa5
 801ba6a:	f7ff ff53 	bl	801b914 <W25qxx_Spi>
 801ba6e:	4603      	mov	r3, r0
 801ba70:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 801ba72:	4a16      	ldr	r2, [pc, #88]	; (801bacc <W25qxx_ReadStatusRegister+0x88>)
 801ba74:	7bfb      	ldrb	r3, [r7, #15]
 801ba76:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 801ba7a:	e01b      	b.n	801bab4 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 801ba7c:	79fb      	ldrb	r3, [r7, #7]
 801ba7e:	2b02      	cmp	r3, #2
 801ba80:	d10c      	bne.n	801ba9c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 801ba82:	2035      	movs	r0, #53	; 0x35
 801ba84:	f7ff ff46 	bl	801b914 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ba88:	20a5      	movs	r0, #165	; 0xa5
 801ba8a:	f7ff ff43 	bl	801b914 <W25qxx_Spi>
 801ba8e:	4603      	mov	r3, r0
 801ba90:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 801ba92:	4a0e      	ldr	r2, [pc, #56]	; (801bacc <W25qxx_ReadStatusRegister+0x88>)
 801ba94:	7bfb      	ldrb	r3, [r7, #15]
 801ba96:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 801ba9a:	e00b      	b.n	801bab4 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 801ba9c:	2015      	movs	r0, #21
 801ba9e:	f7ff ff39 	bl	801b914 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801baa2:	20a5      	movs	r0, #165	; 0xa5
 801baa4:	f7ff ff36 	bl	801b914 <W25qxx_Spi>
 801baa8:	4603      	mov	r3, r0
 801baaa:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 801baac:	4a07      	ldr	r2, [pc, #28]	; (801bacc <W25qxx_ReadStatusRegister+0x88>)
 801baae:	7bfb      	ldrb	r3, [r7, #15]
 801bab0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801bab4:	2201      	movs	r2, #1
 801bab6:	2108      	movs	r1, #8
 801bab8:	4803      	ldr	r0, [pc, #12]	; (801bac8 <W25qxx_ReadStatusRegister+0x84>)
 801baba:	f7e7 ff47 	bl	800394c <HAL_GPIO_WritePin>
	return status;
 801babe:	7bfb      	ldrb	r3, [r7, #15]
}
 801bac0:	4618      	mov	r0, r3
 801bac2:	3710      	adds	r7, #16
 801bac4:	46bd      	mov	sp, r7
 801bac6:	bd80      	pop	{r7, pc}
 801bac8:	40021000 	.word	0x40021000
 801bacc:	2000c76c 	.word	0x2000c76c

0801bad0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 801bad4:	2001      	movs	r0, #1
 801bad6:	f7e6 fa3b 	bl	8001f50 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801bada:	2200      	movs	r2, #0
 801badc:	2108      	movs	r1, #8
 801bade:	480f      	ldr	r0, [pc, #60]	; (801bb1c <W25qxx_WaitForWriteEnd+0x4c>)
 801bae0:	f7e7 ff34 	bl	800394c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 801bae4:	2005      	movs	r0, #5
 801bae6:	f7ff ff15 	bl	801b914 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801baea:	20a5      	movs	r0, #165	; 0xa5
 801baec:	f7ff ff12 	bl	801b914 <W25qxx_Spi>
 801baf0:	4603      	mov	r3, r0
 801baf2:	461a      	mov	r2, r3
 801baf4:	4b0a      	ldr	r3, [pc, #40]	; (801bb20 <W25qxx_WaitForWriteEnd+0x50>)
 801baf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 801bafa:	2001      	movs	r0, #1
 801bafc:	f7e6 fa28 	bl	8001f50 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 801bb00:	4b07      	ldr	r3, [pc, #28]	; (801bb20 <W25qxx_WaitForWriteEnd+0x50>)
 801bb02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bb06:	f003 0301 	and.w	r3, r3, #1
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	d1ed      	bne.n	801baea <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801bb0e:	2201      	movs	r2, #1
 801bb10:	2108      	movs	r1, #8
 801bb12:	4802      	ldr	r0, [pc, #8]	; (801bb1c <W25qxx_WaitForWriteEnd+0x4c>)
 801bb14:	f7e7 ff1a 	bl	800394c <HAL_GPIO_WritePin>
}
 801bb18:	bf00      	nop
 801bb1a:	bd80      	pop	{r7, pc}
 801bb1c:	40021000 	.word	0x40021000
 801bb20:	2000c76c 	.word	0x2000c76c

0801bb24 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b082      	sub	sp, #8
 801bb28:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 801bb2a:	4b65      	ldr	r3, [pc, #404]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bb2c:	2201      	movs	r2, #1
 801bb2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 801bb32:	e002      	b.n	801bb3a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 801bb34:	2001      	movs	r0, #1
 801bb36:	f7e6 fa0b 	bl	8001f50 <HAL_Delay>
	while (HAL_GetTick() < 100)
 801bb3a:	f7e6 f9fd 	bl	8001f38 <HAL_GetTick>
 801bb3e:	4603      	mov	r3, r0
 801bb40:	2b63      	cmp	r3, #99	; 0x63
 801bb42:	d9f7      	bls.n	801bb34 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801bb44:	2201      	movs	r2, #1
 801bb46:	2108      	movs	r1, #8
 801bb48:	485e      	ldr	r0, [pc, #376]	; (801bcc4 <W25qxx_Init+0x1a0>)
 801bb4a:	f7e7 feff 	bl	800394c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 801bb4e:	2064      	movs	r0, #100	; 0x64
 801bb50:	f7e6 f9fe 	bl	8001f50 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 801bb54:	f7ff fef4 	bl	801b940 <W25qxx_ReadID>
 801bb58:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	b2db      	uxtb	r3, r3
 801bb5e:	3b11      	subs	r3, #17
 801bb60:	2b0f      	cmp	r3, #15
 801bb62:	d86c      	bhi.n	801bc3e <W25qxx_Init+0x11a>
 801bb64:	a201      	add	r2, pc, #4	; (adr r2, 801bb6c <W25qxx_Init+0x48>)
 801bb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb6a:	bf00      	nop
 801bb6c:	0801bc31 	.word	0x0801bc31
 801bb70:	0801bc23 	.word	0x0801bc23
 801bb74:	0801bc15 	.word	0x0801bc15
 801bb78:	0801bc07 	.word	0x0801bc07
 801bb7c:	0801bbf9 	.word	0x0801bbf9
 801bb80:	0801bbeb 	.word	0x0801bbeb
 801bb84:	0801bbdd 	.word	0x0801bbdd
 801bb88:	0801bbcd 	.word	0x0801bbcd
 801bb8c:	0801bbbd 	.word	0x0801bbbd
 801bb90:	0801bc3f 	.word	0x0801bc3f
 801bb94:	0801bc3f 	.word	0x0801bc3f
 801bb98:	0801bc3f 	.word	0x0801bc3f
 801bb9c:	0801bc3f 	.word	0x0801bc3f
 801bba0:	0801bc3f 	.word	0x0801bc3f
 801bba4:	0801bc3f 	.word	0x0801bc3f
 801bba8:	0801bbad 	.word	0x0801bbad
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 801bbac:	4b44      	ldr	r3, [pc, #272]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbae:	220a      	movs	r2, #10
 801bbb0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 801bbb2:	4b43      	ldr	r3, [pc, #268]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bbb8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 801bbba:	e046      	b.n	801bc4a <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 801bbbc:	4b40      	ldr	r3, [pc, #256]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbbe:	2209      	movs	r2, #9
 801bbc0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 801bbc2:	4b3f      	ldr	r3, [pc, #252]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bbc8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 801bbca:	e03e      	b.n	801bc4a <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 801bbcc:	4b3c      	ldr	r3, [pc, #240]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbce:	2208      	movs	r2, #8
 801bbd0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 801bbd2:	4b3b      	ldr	r3, [pc, #236]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bbd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 801bbda:	e036      	b.n	801bc4a <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 801bbdc:	4b38      	ldr	r3, [pc, #224]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbde:	2207      	movs	r2, #7
 801bbe0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 801bbe2:	4b37      	ldr	r3, [pc, #220]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbe4:	2280      	movs	r2, #128	; 0x80
 801bbe6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 801bbe8:	e02f      	b.n	801bc4a <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 801bbea:	4b35      	ldr	r3, [pc, #212]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbec:	2206      	movs	r2, #6
 801bbee:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 801bbf0:	4b33      	ldr	r3, [pc, #204]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbf2:	2240      	movs	r2, #64	; 0x40
 801bbf4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 801bbf6:	e028      	b.n	801bc4a <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 801bbf8:	4b31      	ldr	r3, [pc, #196]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bbfa:	2205      	movs	r2, #5
 801bbfc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 801bbfe:	4b30      	ldr	r3, [pc, #192]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc00:	2220      	movs	r2, #32
 801bc02:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 801bc04:	e021      	b.n	801bc4a <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 801bc06:	4b2e      	ldr	r3, [pc, #184]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc08:	2204      	movs	r2, #4
 801bc0a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 801bc0c:	4b2c      	ldr	r3, [pc, #176]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc0e:	2210      	movs	r2, #16
 801bc10:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 801bc12:	e01a      	b.n	801bc4a <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 801bc14:	4b2a      	ldr	r3, [pc, #168]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc16:	2203      	movs	r2, #3
 801bc18:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 801bc1a:	4b29      	ldr	r3, [pc, #164]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc1c:	2208      	movs	r2, #8
 801bc1e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 801bc20:	e013      	b.n	801bc4a <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 801bc22:	4b27      	ldr	r3, [pc, #156]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc24:	2202      	movs	r2, #2
 801bc26:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 801bc28:	4b25      	ldr	r3, [pc, #148]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc2a:	2204      	movs	r2, #4
 801bc2c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 801bc2e:	e00c      	b.n	801bc4a <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 801bc30:	4b23      	ldr	r3, [pc, #140]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc32:	2201      	movs	r2, #1
 801bc34:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 801bc36:	4b22      	ldr	r3, [pc, #136]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc38:	2202      	movs	r2, #2
 801bc3a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 801bc3c:	e005      	b.n	801bc4a <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 801bc3e:	4b20      	ldr	r3, [pc, #128]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc40:	2200      	movs	r2, #0
 801bc42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 801bc46:	2300      	movs	r3, #0
 801bc48:	e036      	b.n	801bcb8 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 801bc4a:	4b1d      	ldr	r3, [pc, #116]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801bc50:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 801bc52:	4b1b      	ldr	r3, [pc, #108]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801bc58:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 801bc5a:	4b19      	ldr	r3, [pc, #100]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc5c:	69db      	ldr	r3, [r3, #28]
 801bc5e:	011b      	lsls	r3, r3, #4
 801bc60:	4a17      	ldr	r2, [pc, #92]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc62:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 801bc64:	4b16      	ldr	r3, [pc, #88]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc66:	695b      	ldr	r3, [r3, #20]
 801bc68:	4a15      	ldr	r2, [pc, #84]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc6a:	6912      	ldr	r2, [r2, #16]
 801bc6c:	fb02 f303 	mul.w	r3, r2, r3
 801bc70:	4a13      	ldr	r2, [pc, #76]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc72:	8952      	ldrh	r2, [r2, #10]
 801bc74:	fbb3 f3f2 	udiv	r3, r3, r2
 801bc78:	4a11      	ldr	r2, [pc, #68]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc7a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 801bc7c:	4b10      	ldr	r3, [pc, #64]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc7e:	691b      	ldr	r3, [r3, #16]
 801bc80:	011b      	lsls	r3, r3, #4
 801bc82:	4a0f      	ldr	r2, [pc, #60]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc84:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 801bc86:	4b0e      	ldr	r3, [pc, #56]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc88:	695b      	ldr	r3, [r3, #20]
 801bc8a:	4a0d      	ldr	r2, [pc, #52]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc8c:	6912      	ldr	r2, [r2, #16]
 801bc8e:	fb02 f303 	mul.w	r3, r2, r3
 801bc92:	0a9b      	lsrs	r3, r3, #10
 801bc94:	4a0a      	ldr	r2, [pc, #40]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bc96:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 801bc98:	f7ff fe88 	bl	801b9ac <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 801bc9c:	2001      	movs	r0, #1
 801bc9e:	f7ff fed1 	bl	801ba44 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 801bca2:	2002      	movs	r0, #2
 801bca4:	f7ff fece 	bl	801ba44 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 801bca8:	2003      	movs	r0, #3
 801bcaa:	f7ff fecb 	bl	801ba44 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 801bcae:	4b04      	ldr	r3, [pc, #16]	; (801bcc0 <W25qxx_Init+0x19c>)
 801bcb0:	2200      	movs	r2, #0
 801bcb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 801bcb6:	2301      	movs	r3, #1
}
 801bcb8:	4618      	mov	r0, r3
 801bcba:	3708      	adds	r7, #8
 801bcbc:	46bd      	mov	sp, r7
 801bcbe:	bd80      	pop	{r7, pc}
 801bcc0:	2000c76c 	.word	0x2000c76c
 801bcc4:	40021000 	.word	0x40021000

0801bcc8 <W25qxx_EraseSector>:
#endif
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
uint8_t W25qxx_EraseSector(uint32_t SectorAddr) {
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b082      	sub	sp, #8
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 801bcd0:	e002      	b.n	801bcd8 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 801bcd2:	2001      	movs	r0, #1
 801bcd4:	f7e6 f93c 	bl	8001f50 <HAL_Delay>
	while (w25qxx.Lock == 1)
 801bcd8:	4b26      	ldr	r3, [pc, #152]	; (801bd74 <W25qxx_EraseSector+0xac>)
 801bcda:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801bcde:	2b01      	cmp	r3, #1
 801bce0:	d0f7      	beq.n	801bcd2 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 801bce2:	4b24      	ldr	r3, [pc, #144]	; (801bd74 <W25qxx_EraseSector+0xac>)
 801bce4:	2201      	movs	r2, #1
 801bce6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 801bcea:	f7ff fef1 	bl	801bad0 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 801bcee:	4b21      	ldr	r3, [pc, #132]	; (801bd74 <W25qxx_EraseSector+0xac>)
 801bcf0:	691a      	ldr	r2, [r3, #16]
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	fb02 f303 	mul.w	r3, r2, r3
 801bcf8:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 801bcfa:	f7ff fe8d 	bl	801ba18 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801bcfe:	2200      	movs	r2, #0
 801bd00:	2108      	movs	r1, #8
 801bd02:	481d      	ldr	r0, [pc, #116]	; (801bd78 <W25qxx_EraseSector+0xb0>)
 801bd04:	f7e7 fe22 	bl	800394c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 801bd08:	4b1a      	ldr	r3, [pc, #104]	; (801bd74 <W25qxx_EraseSector+0xac>)
 801bd0a:	781b      	ldrb	r3, [r3, #0]
 801bd0c:	2b08      	cmp	r3, #8
 801bd0e:	d909      	bls.n	801bd24 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi(0x21);
 801bd10:	2021      	movs	r0, #33	; 0x21
 801bd12:	f7ff fdff 	bl	801b914 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	0e1b      	lsrs	r3, r3, #24
 801bd1a:	b2db      	uxtb	r3, r3
 801bd1c:	4618      	mov	r0, r3
 801bd1e:	f7ff fdf9 	bl	801b914 <W25qxx_Spi>
 801bd22:	e002      	b.n	801bd2a <W25qxx_EraseSector+0x62>
	} else {
		W25qxx_Spi(0x20);
 801bd24:	2020      	movs	r0, #32
 801bd26:	f7ff fdf5 	bl	801b914 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	0c1b      	lsrs	r3, r3, #16
 801bd2e:	b2db      	uxtb	r3, r3
 801bd30:	4618      	mov	r0, r3
 801bd32:	f7ff fdef 	bl	801b914 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	0a1b      	lsrs	r3, r3, #8
 801bd3a:	b2db      	uxtb	r3, r3
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	f7ff fde9 	bl	801b914 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	b2db      	uxtb	r3, r3
 801bd46:	4618      	mov	r0, r3
 801bd48:	f7ff fde4 	bl	801b914 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801bd4c:	2201      	movs	r2, #1
 801bd4e:	2108      	movs	r1, #8
 801bd50:	4809      	ldr	r0, [pc, #36]	; (801bd78 <W25qxx_EraseSector+0xb0>)
 801bd52:	f7e7 fdfb 	bl	800394c <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 801bd56:	f7ff febb 	bl	801bad0 <W25qxx_WaitForWriteEnd>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 801bd5a:	2001      	movs	r0, #1
 801bd5c:	f7e6 f8f8 	bl	8001f50 <HAL_Delay>
	w25qxx.Lock = 0;
 801bd60:	4b04      	ldr	r3, [pc, #16]	; (801bd74 <W25qxx_EraseSector+0xac>)
 801bd62:	2200      	movs	r2, #0
 801bd64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 801bd68:	bf00      	nop
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	3708      	adds	r7, #8
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	bd80      	pop	{r7, pc}
 801bd72:	bf00      	nop
 801bd74:	2000c76c 	.word	0x2000c76c
 801bd78:	40021000 	.word	0x40021000

0801bd7c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 801bd7c:	b480      	push	{r7}
 801bd7e:	b083      	sub	sp, #12
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 801bd84:	4b07      	ldr	r3, [pc, #28]	; (801bda4 <W25qxx_SectorToPage+0x28>)
 801bd86:	691b      	ldr	r3, [r3, #16]
 801bd88:	687a      	ldr	r2, [r7, #4]
 801bd8a:	fb02 f303 	mul.w	r3, r2, r3
 801bd8e:	4a05      	ldr	r2, [pc, #20]	; (801bda4 <W25qxx_SectorToPage+0x28>)
 801bd90:	8952      	ldrh	r2, [r2, #10]
 801bd92:	fbb3 f3f2 	udiv	r3, r3, r2
}
 801bd96:	4618      	mov	r0, r3
 801bd98:	370c      	adds	r7, #12
 801bd9a:	46bd      	mov	sp, r7
 801bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda0:	4770      	bx	lr
 801bda2:	bf00      	nop
 801bda4:	2000c76c 	.word	0x2000c76c

0801bda8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 801bda8:	b580      	push	{r7, lr}
 801bdaa:	b084      	sub	sp, #16
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	60f8      	str	r0, [r7, #12]
 801bdb0:	60b9      	str	r1, [r7, #8]
 801bdb2:	607a      	str	r2, [r7, #4]
 801bdb4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 801bdb6:	e002      	b.n	801bdbe <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 801bdb8:	2001      	movs	r0, #1
 801bdba:	f7e6 f8c9 	bl	8001f50 <HAL_Delay>
	while (w25qxx.Lock == 1)
 801bdbe:	4b39      	ldr	r3, [pc, #228]	; (801bea4 <W25qxx_WritePage+0xfc>)
 801bdc0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801bdc4:	2b01      	cmp	r3, #1
 801bdc6:	d0f7      	beq.n	801bdb8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 801bdc8:	4b36      	ldr	r3, [pc, #216]	; (801bea4 <W25qxx_WritePage+0xfc>)
 801bdca:	2201      	movs	r2, #1
 801bdcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 801bdd0:	683a      	ldr	r2, [r7, #0]
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	4413      	add	r3, r2
 801bdd6:	4a33      	ldr	r2, [pc, #204]	; (801bea4 <W25qxx_WritePage+0xfc>)
 801bdd8:	8952      	ldrh	r2, [r2, #10]
 801bdda:	4293      	cmp	r3, r2
 801bddc:	d802      	bhi.n	801bde4 <W25qxx_WritePage+0x3c>
 801bdde:	683b      	ldr	r3, [r7, #0]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d105      	bne.n	801bdf0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801bde4:	4b2f      	ldr	r3, [pc, #188]	; (801bea4 <W25qxx_WritePage+0xfc>)
 801bde6:	895b      	ldrh	r3, [r3, #10]
 801bde8:	461a      	mov	r2, r3
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	1ad3      	subs	r3, r2, r3
 801bdee:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 801bdf0:	687a      	ldr	r2, [r7, #4]
 801bdf2:	683b      	ldr	r3, [r7, #0]
 801bdf4:	4413      	add	r3, r2
 801bdf6:	4a2b      	ldr	r2, [pc, #172]	; (801bea4 <W25qxx_WritePage+0xfc>)
 801bdf8:	8952      	ldrh	r2, [r2, #10]
 801bdfa:	4293      	cmp	r3, r2
 801bdfc:	d905      	bls.n	801be0a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801bdfe:	4b29      	ldr	r3, [pc, #164]	; (801bea4 <W25qxx_WritePage+0xfc>)
 801be00:	895b      	ldrh	r3, [r3, #10]
 801be02:	461a      	mov	r2, r3
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	1ad3      	subs	r3, r2, r3
 801be08:	603b      	str	r3, [r7, #0]

	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();
#endif

	W25qxx_WaitForWriteEnd();
 801be0a:	f7ff fe61 	bl	801bad0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 801be0e:	f7ff fe03 	bl	801ba18 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801be12:	2200      	movs	r2, #0
 801be14:	2108      	movs	r1, #8
 801be16:	4824      	ldr	r0, [pc, #144]	; (801bea8 <W25qxx_WritePage+0x100>)
 801be18:	f7e7 fd98 	bl	800394c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 801be1c:	4b21      	ldr	r3, [pc, #132]	; (801bea4 <W25qxx_WritePage+0xfc>)
 801be1e:	895b      	ldrh	r3, [r3, #10]
 801be20:	461a      	mov	r2, r3
 801be22:	68bb      	ldr	r3, [r7, #8]
 801be24:	fb02 f303 	mul.w	r3, r2, r3
 801be28:	687a      	ldr	r2, [r7, #4]
 801be2a:	4413      	add	r3, r2
 801be2c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 801be2e:	4b1d      	ldr	r3, [pc, #116]	; (801bea4 <W25qxx_WritePage+0xfc>)
 801be30:	781b      	ldrb	r3, [r3, #0]
 801be32:	2b08      	cmp	r3, #8
 801be34:	d909      	bls.n	801be4a <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 801be36:	2012      	movs	r0, #18
 801be38:	f7ff fd6c 	bl	801b914 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 801be3c:	68bb      	ldr	r3, [r7, #8]
 801be3e:	0e1b      	lsrs	r3, r3, #24
 801be40:	b2db      	uxtb	r3, r3
 801be42:	4618      	mov	r0, r3
 801be44:	f7ff fd66 	bl	801b914 <W25qxx_Spi>
 801be48:	e002      	b.n	801be50 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 801be4a:	2002      	movs	r0, #2
 801be4c:	f7ff fd62 	bl	801b914 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 801be50:	68bb      	ldr	r3, [r7, #8]
 801be52:	0c1b      	lsrs	r3, r3, #16
 801be54:	b2db      	uxtb	r3, r3
 801be56:	4618      	mov	r0, r3
 801be58:	f7ff fd5c 	bl	801b914 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 801be5c:	68bb      	ldr	r3, [r7, #8]
 801be5e:	0a1b      	lsrs	r3, r3, #8
 801be60:	b2db      	uxtb	r3, r3
 801be62:	4618      	mov	r0, r3
 801be64:	f7ff fd56 	bl	801b914 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 801be68:	68bb      	ldr	r3, [r7, #8]
 801be6a:	b2db      	uxtb	r3, r3
 801be6c:	4618      	mov	r0, r3
 801be6e:	f7ff fd51 	bl	801b914 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 801be72:	683b      	ldr	r3, [r7, #0]
 801be74:	b29a      	uxth	r2, r3
 801be76:	2364      	movs	r3, #100	; 0x64
 801be78:	68f9      	ldr	r1, [r7, #12]
 801be7a:	480c      	ldr	r0, [pc, #48]	; (801beac <W25qxx_WritePage+0x104>)
 801be7c:	f7e8 fa7f 	bl	800437e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801be80:	2201      	movs	r2, #1
 801be82:	2108      	movs	r1, #8
 801be84:	4808      	ldr	r0, [pc, #32]	; (801bea8 <W25qxx_WritePage+0x100>)
 801be86:	f7e7 fd61 	bl	800394c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 801be8a:	f7ff fe21 	bl	801bad0 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 801be8e:	2001      	movs	r0, #1
 801be90:	f7e6 f85e 	bl	8001f50 <HAL_Delay>
	w25qxx.Lock = 0;
 801be94:	4b03      	ldr	r3, [pc, #12]	; (801bea4 <W25qxx_WritePage+0xfc>)
 801be96:	2200      	movs	r2, #0
 801be98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 801be9c:	bf00      	nop
 801be9e:	3710      	adds	r7, #16
 801bea0:	46bd      	mov	sp, r7
 801bea2:	bd80      	pop	{r7, pc}
 801bea4:	2000c76c 	.word	0x2000c76c
 801bea8:	40021000 	.word	0x40021000
 801beac:	20000438 	.word	0x20000438

0801beb0 <W25qxx_WriteSector>:
//###################################################################################################################
uint8_t W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b088      	sub	sp, #32
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	60f8      	str	r0, [r7, #12]
 801beb8:	60b9      	str	r1, [r7, #8]
 801beba:	607a      	str	r2, [r7, #4]
 801bebc:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 801bebe:	4b2d      	ldr	r3, [pc, #180]	; (801bf74 <W25qxx_WriteSector+0xc4>)
 801bec0:	691b      	ldr	r3, [r3, #16]
 801bec2:	683a      	ldr	r2, [r7, #0]
 801bec4:	429a      	cmp	r2, r3
 801bec6:	d802      	bhi.n	801bece <W25qxx_WriteSector+0x1e>
 801bec8:	683b      	ldr	r3, [r7, #0]
 801beca:	2b00      	cmp	r3, #0
 801becc:	d102      	bne.n	801bed4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 801bece:	4b29      	ldr	r3, [pc, #164]	; (801bf74 <W25qxx_WriteSector+0xc4>)
 801bed0:	691b      	ldr	r3, [r3, #16]
 801bed2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 801bed4:	4b27      	ldr	r3, [pc, #156]	; (801bf74 <W25qxx_WriteSector+0xc4>)
 801bed6:	691b      	ldr	r3, [r3, #16]
 801bed8:	687a      	ldr	r2, [r7, #4]
 801beda:	429a      	cmp	r2, r3
 801bedc:	d301      	bcc.n	801bee2 <W25qxx_WriteSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 801bede:	2300      	movs	r3, #0
 801bee0:	e043      	b.n	801bf6a <W25qxx_WriteSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 801bee2:	687a      	ldr	r2, [r7, #4]
 801bee4:	683b      	ldr	r3, [r7, #0]
 801bee6:	441a      	add	r2, r3
 801bee8:	4b22      	ldr	r3, [pc, #136]	; (801bf74 <W25qxx_WriteSector+0xc4>)
 801beea:	691b      	ldr	r3, [r3, #16]
 801beec:	429a      	cmp	r2, r3
 801beee:	d905      	bls.n	801befc <W25qxx_WriteSector+0x4c>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 801bef0:	4b20      	ldr	r3, [pc, #128]	; (801bf74 <W25qxx_WriteSector+0xc4>)
 801bef2:	691a      	ldr	r2, [r3, #16]
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	1ad3      	subs	r3, r2, r3
 801bef8:	61bb      	str	r3, [r7, #24]
 801befa:	e001      	b.n	801bf00 <W25qxx_WriteSector+0x50>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 801befc:	683b      	ldr	r3, [r7, #0]
 801befe:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 801bf00:	68b8      	ldr	r0, [r7, #8]
 801bf02:	f7ff ff3b 	bl	801bd7c <W25qxx_SectorToPage>
 801bf06:	4602      	mov	r2, r0
 801bf08:	4b1a      	ldr	r3, [pc, #104]	; (801bf74 <W25qxx_WriteSector+0xc4>)
 801bf0a:	895b      	ldrh	r3, [r3, #10]
 801bf0c:	4619      	mov	r1, r3
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	fbb3 f3f1 	udiv	r3, r3, r1
 801bf14:	4413      	add	r3, r2
 801bf16:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 801bf18:	4b16      	ldr	r3, [pc, #88]	; (801bf74 <W25qxx_WriteSector+0xc4>)
 801bf1a:	895b      	ldrh	r3, [r3, #10]
 801bf1c:	461a      	mov	r2, r3
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	fbb3 f1f2 	udiv	r1, r3, r2
 801bf24:	fb01 f202 	mul.w	r2, r1, r2
 801bf28:	1a9b      	subs	r3, r3, r2
 801bf2a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 801bf2c:	69bb      	ldr	r3, [r7, #24]
 801bf2e:	697a      	ldr	r2, [r7, #20]
 801bf30:	69f9      	ldr	r1, [r7, #28]
 801bf32:	68f8      	ldr	r0, [r7, #12]
 801bf34:	f7ff ff38 	bl	801bda8 <W25qxx_WritePage>
		StartPage++;
 801bf38:	69fb      	ldr	r3, [r7, #28]
 801bf3a:	3301      	adds	r3, #1
 801bf3c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 801bf3e:	4b0d      	ldr	r3, [pc, #52]	; (801bf74 <W25qxx_WriteSector+0xc4>)
 801bf40:	895b      	ldrh	r3, [r3, #10]
 801bf42:	461a      	mov	r2, r3
 801bf44:	697b      	ldr	r3, [r7, #20]
 801bf46:	1a9a      	subs	r2, r3, r2
 801bf48:	69bb      	ldr	r3, [r7, #24]
 801bf4a:	4413      	add	r3, r2
 801bf4c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 801bf4e:	4b09      	ldr	r3, [pc, #36]	; (801bf74 <W25qxx_WriteSector+0xc4>)
 801bf50:	895b      	ldrh	r3, [r3, #10]
 801bf52:	461a      	mov	r2, r3
 801bf54:	697b      	ldr	r3, [r7, #20]
 801bf56:	1ad3      	subs	r3, r2, r3
 801bf58:	68fa      	ldr	r2, [r7, #12]
 801bf5a:	4413      	add	r3, r2
 801bf5c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 801bf5e:	2300      	movs	r3, #0
 801bf60:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 801bf62:	69bb      	ldr	r3, [r7, #24]
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	dce1      	bgt.n	801bf2c <W25qxx_WriteSector+0x7c>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif

	return 1;
 801bf68:	2301      	movs	r3, #1

}
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	3720      	adds	r7, #32
 801bf6e:	46bd      	mov	sp, r7
 801bf70:	bd80      	pop	{r7, pc}
 801bf72:	bf00      	nop
 801bf74:	2000c76c 	.word	0x2000c76c

0801bf78 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	b084      	sub	sp, #16
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	60f8      	str	r0, [r7, #12]
 801bf80:	60b9      	str	r1, [r7, #8]
 801bf82:	607a      	str	r2, [r7, #4]
 801bf84:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 801bf86:	e002      	b.n	801bf8e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 801bf88:	2001      	movs	r0, #1
 801bf8a:	f7e5 ffe1 	bl	8001f50 <HAL_Delay>
	while (w25qxx.Lock == 1)
 801bf8e:	4b36      	ldr	r3, [pc, #216]	; (801c068 <W25qxx_ReadPage+0xf0>)
 801bf90:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801bf94:	2b01      	cmp	r3, #1
 801bf96:	d0f7      	beq.n	801bf88 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 801bf98:	4b33      	ldr	r3, [pc, #204]	; (801c068 <W25qxx_ReadPage+0xf0>)
 801bf9a:	2201      	movs	r2, #1
 801bf9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 801bfa0:	4b31      	ldr	r3, [pc, #196]	; (801c068 <W25qxx_ReadPage+0xf0>)
 801bfa2:	895b      	ldrh	r3, [r3, #10]
 801bfa4:	461a      	mov	r2, r3
 801bfa6:	683b      	ldr	r3, [r7, #0]
 801bfa8:	4293      	cmp	r3, r2
 801bfaa:	d802      	bhi.n	801bfb2 <W25qxx_ReadPage+0x3a>
 801bfac:	683b      	ldr	r3, [r7, #0]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d102      	bne.n	801bfb8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 801bfb2:	4b2d      	ldr	r3, [pc, #180]	; (801c068 <W25qxx_ReadPage+0xf0>)
 801bfb4:	895b      	ldrh	r3, [r3, #10]
 801bfb6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 801bfb8:	687a      	ldr	r2, [r7, #4]
 801bfba:	683b      	ldr	r3, [r7, #0]
 801bfbc:	4413      	add	r3, r2
 801bfbe:	4a2a      	ldr	r2, [pc, #168]	; (801c068 <W25qxx_ReadPage+0xf0>)
 801bfc0:	8952      	ldrh	r2, [r2, #10]
 801bfc2:	4293      	cmp	r3, r2
 801bfc4:	d905      	bls.n	801bfd2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801bfc6:	4b28      	ldr	r3, [pc, #160]	; (801c068 <W25qxx_ReadPage+0xf0>)
 801bfc8:	895b      	ldrh	r3, [r3, #10]
 801bfca:	461a      	mov	r2, r3
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	1ad3      	subs	r3, r2, r3
 801bfd0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG_1 == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();

#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 801bfd2:	4b25      	ldr	r3, [pc, #148]	; (801c068 <W25qxx_ReadPage+0xf0>)
 801bfd4:	895b      	ldrh	r3, [r3, #10]
 801bfd6:	461a      	mov	r2, r3
 801bfd8:	68bb      	ldr	r3, [r7, #8]
 801bfda:	fb02 f303 	mul.w	r3, r2, r3
 801bfde:	687a      	ldr	r2, [r7, #4]
 801bfe0:	4413      	add	r3, r2
 801bfe2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801bfe4:	2200      	movs	r2, #0
 801bfe6:	2108      	movs	r1, #8
 801bfe8:	4820      	ldr	r0, [pc, #128]	; (801c06c <W25qxx_ReadPage+0xf4>)
 801bfea:	f7e7 fcaf 	bl	800394c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 801bfee:	4b1e      	ldr	r3, [pc, #120]	; (801c068 <W25qxx_ReadPage+0xf0>)
 801bff0:	781b      	ldrb	r3, [r3, #0]
 801bff2:	2b08      	cmp	r3, #8
 801bff4:	d909      	bls.n	801c00a <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 801bff6:	200c      	movs	r0, #12
 801bff8:	f7ff fc8c 	bl	801b914 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 801bffc:	68bb      	ldr	r3, [r7, #8]
 801bffe:	0e1b      	lsrs	r3, r3, #24
 801c000:	b2db      	uxtb	r3, r3
 801c002:	4618      	mov	r0, r3
 801c004:	f7ff fc86 	bl	801b914 <W25qxx_Spi>
 801c008:	e002      	b.n	801c010 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 801c00a:	200b      	movs	r0, #11
 801c00c:	f7ff fc82 	bl	801b914 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 801c010:	68bb      	ldr	r3, [r7, #8]
 801c012:	0c1b      	lsrs	r3, r3, #16
 801c014:	b2db      	uxtb	r3, r3
 801c016:	4618      	mov	r0, r3
 801c018:	f7ff fc7c 	bl	801b914 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 801c01c:	68bb      	ldr	r3, [r7, #8]
 801c01e:	0a1b      	lsrs	r3, r3, #8
 801c020:	b2db      	uxtb	r3, r3
 801c022:	4618      	mov	r0, r3
 801c024:	f7ff fc76 	bl	801b914 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 801c028:	68bb      	ldr	r3, [r7, #8]
 801c02a:	b2db      	uxtb	r3, r3
 801c02c:	4618      	mov	r0, r3
 801c02e:	f7ff fc71 	bl	801b914 <W25qxx_Spi>
	W25qxx_Spi(0);
 801c032:	2000      	movs	r0, #0
 801c034:	f7ff fc6e 	bl	801b914 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 801c038:	683b      	ldr	r3, [r7, #0]
 801c03a:	b29a      	uxth	r2, r3
 801c03c:	2364      	movs	r3, #100	; 0x64
 801c03e:	68f9      	ldr	r1, [r7, #12]
 801c040:	480b      	ldr	r0, [pc, #44]	; (801c070 <W25qxx_ReadPage+0xf8>)
 801c042:	f7e8 fadf 	bl	8004604 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801c046:	2201      	movs	r2, #1
 801c048:	2108      	movs	r1, #8
 801c04a:	4808      	ldr	r0, [pc, #32]	; (801c06c <W25qxx_ReadPage+0xf4>)
 801c04c:	f7e7 fc7e 	bl	800394c <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 801c050:	2001      	movs	r0, #1
 801c052:	f7e5 ff7d 	bl	8001f50 <HAL_Delay>
	w25qxx.Lock = 0;
 801c056:	4b04      	ldr	r3, [pc, #16]	; (801c068 <W25qxx_ReadPage+0xf0>)
 801c058:	2200      	movs	r2, #0
 801c05a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 801c05e:	bf00      	nop
 801c060:	3710      	adds	r7, #16
 801c062:	46bd      	mov	sp, r7
 801c064:	bd80      	pop	{r7, pc}
 801c066:	bf00      	nop
 801c068:	2000c76c 	.word	0x2000c76c
 801c06c:	40021000 	.word	0x40021000
 801c070:	20000438 	.word	0x20000438

0801c074 <W25qxx_ReadSector>:
//###################################################################################################################
uint8_t W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b088      	sub	sp, #32
 801c078:	af00      	add	r7, sp, #0
 801c07a:	60f8      	str	r0, [r7, #12]
 801c07c:	60b9      	str	r1, [r7, #8]
 801c07e:	607a      	str	r2, [r7, #4]
 801c080:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 801c082:	4b2d      	ldr	r3, [pc, #180]	; (801c138 <W25qxx_ReadSector+0xc4>)
 801c084:	691b      	ldr	r3, [r3, #16]
 801c086:	683a      	ldr	r2, [r7, #0]
 801c088:	429a      	cmp	r2, r3
 801c08a:	d802      	bhi.n	801c092 <W25qxx_ReadSector+0x1e>
 801c08c:	683b      	ldr	r3, [r7, #0]
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d102      	bne.n	801c098 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 801c092:	4b29      	ldr	r3, [pc, #164]	; (801c138 <W25qxx_ReadSector+0xc4>)
 801c094:	691b      	ldr	r3, [r3, #16]
 801c096:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 801c098:	4b27      	ldr	r3, [pc, #156]	; (801c138 <W25qxx_ReadSector+0xc4>)
 801c09a:	691b      	ldr	r3, [r3, #16]
 801c09c:	687a      	ldr	r2, [r7, #4]
 801c09e:	429a      	cmp	r2, r3
 801c0a0:	d301      	bcc.n	801c0a6 <W25qxx_ReadSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	e043      	b.n	801c12e <W25qxx_ReadSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 801c0a6:	687a      	ldr	r2, [r7, #4]
 801c0a8:	683b      	ldr	r3, [r7, #0]
 801c0aa:	441a      	add	r2, r3
 801c0ac:	4b22      	ldr	r3, [pc, #136]	; (801c138 <W25qxx_ReadSector+0xc4>)
 801c0ae:	691b      	ldr	r3, [r3, #16]
 801c0b0:	429a      	cmp	r2, r3
 801c0b2:	d905      	bls.n	801c0c0 <W25qxx_ReadSector+0x4c>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 801c0b4:	4b20      	ldr	r3, [pc, #128]	; (801c138 <W25qxx_ReadSector+0xc4>)
 801c0b6:	691a      	ldr	r2, [r3, #16]
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	1ad3      	subs	r3, r2, r3
 801c0bc:	61bb      	str	r3, [r7, #24]
 801c0be:	e001      	b.n	801c0c4 <W25qxx_ReadSector+0x50>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 801c0c0:	683b      	ldr	r3, [r7, #0]
 801c0c2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 801c0c4:	68b8      	ldr	r0, [r7, #8]
 801c0c6:	f7ff fe59 	bl	801bd7c <W25qxx_SectorToPage>
 801c0ca:	4602      	mov	r2, r0
 801c0cc:	4b1a      	ldr	r3, [pc, #104]	; (801c138 <W25qxx_ReadSector+0xc4>)
 801c0ce:	895b      	ldrh	r3, [r3, #10]
 801c0d0:	4619      	mov	r1, r3
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	fbb3 f3f1 	udiv	r3, r3, r1
 801c0d8:	4413      	add	r3, r2
 801c0da:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 801c0dc:	4b16      	ldr	r3, [pc, #88]	; (801c138 <W25qxx_ReadSector+0xc4>)
 801c0de:	895b      	ldrh	r3, [r3, #10]
 801c0e0:	461a      	mov	r2, r3
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	fbb3 f1f2 	udiv	r1, r3, r2
 801c0e8:	fb01 f202 	mul.w	r2, r1, r2
 801c0ec:	1a9b      	subs	r3, r3, r2
 801c0ee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 801c0f0:	69bb      	ldr	r3, [r7, #24]
 801c0f2:	697a      	ldr	r2, [r7, #20]
 801c0f4:	69f9      	ldr	r1, [r7, #28]
 801c0f6:	68f8      	ldr	r0, [r7, #12]
 801c0f8:	f7ff ff3e 	bl	801bf78 <W25qxx_ReadPage>
		StartPage++;
 801c0fc:	69fb      	ldr	r3, [r7, #28]
 801c0fe:	3301      	adds	r3, #1
 801c100:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 801c102:	4b0d      	ldr	r3, [pc, #52]	; (801c138 <W25qxx_ReadSector+0xc4>)
 801c104:	895b      	ldrh	r3, [r3, #10]
 801c106:	461a      	mov	r2, r3
 801c108:	697b      	ldr	r3, [r7, #20]
 801c10a:	1a9a      	subs	r2, r3, r2
 801c10c:	69bb      	ldr	r3, [r7, #24]
 801c10e:	4413      	add	r3, r2
 801c110:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 801c112:	4b09      	ldr	r3, [pc, #36]	; (801c138 <W25qxx_ReadSector+0xc4>)
 801c114:	895b      	ldrh	r3, [r3, #10]
 801c116:	461a      	mov	r2, r3
 801c118:	697b      	ldr	r3, [r7, #20]
 801c11a:	1ad3      	subs	r3, r2, r3
 801c11c:	68fa      	ldr	r2, [r7, #12]
 801c11e:	4413      	add	r3, r2
 801c120:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 801c122:	2300      	movs	r3, #0
 801c124:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 801c126:	69bb      	ldr	r3, [r7, #24]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	dce1      	bgt.n	801c0f0 <W25qxx_ReadSector+0x7c>
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif


	return 1;
 801c12c:	2301      	movs	r3, #1
}
 801c12e:	4618      	mov	r0, r3
 801c130:	3720      	adds	r7, #32
 801c132:	46bd      	mov	sp, r7
 801c134:	bd80      	pop	{r7, pc}
 801c136:	bf00      	nop
 801c138:	2000c76c 	.word	0x2000c76c

0801c13c <__assert_func>:
 801c13c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c13e:	4614      	mov	r4, r2
 801c140:	461a      	mov	r2, r3
 801c142:	4b09      	ldr	r3, [pc, #36]	; (801c168 <__assert_func+0x2c>)
 801c144:	681b      	ldr	r3, [r3, #0]
 801c146:	4605      	mov	r5, r0
 801c148:	68d8      	ldr	r0, [r3, #12]
 801c14a:	b14c      	cbz	r4, 801c160 <__assert_func+0x24>
 801c14c:	4b07      	ldr	r3, [pc, #28]	; (801c16c <__assert_func+0x30>)
 801c14e:	9100      	str	r1, [sp, #0]
 801c150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c154:	4906      	ldr	r1, [pc, #24]	; (801c170 <__assert_func+0x34>)
 801c156:	462b      	mov	r3, r5
 801c158:	f000 f9ac 	bl	801c4b4 <fiprintf>
 801c15c:	f000 fc81 	bl	801ca62 <abort>
 801c160:	4b04      	ldr	r3, [pc, #16]	; (801c174 <__assert_func+0x38>)
 801c162:	461c      	mov	r4, r3
 801c164:	e7f3      	b.n	801c14e <__assert_func+0x12>
 801c166:	bf00      	nop
 801c168:	20000090 	.word	0x20000090
 801c16c:	0802184c 	.word	0x0802184c
 801c170:	08021859 	.word	0x08021859
 801c174:	08021887 	.word	0x08021887

0801c178 <malloc>:
 801c178:	4b02      	ldr	r3, [pc, #8]	; (801c184 <malloc+0xc>)
 801c17a:	4601      	mov	r1, r0
 801c17c:	6818      	ldr	r0, [r3, #0]
 801c17e:	f000 b82b 	b.w	801c1d8 <_malloc_r>
 801c182:	bf00      	nop
 801c184:	20000090 	.word	0x20000090

0801c188 <free>:
 801c188:	4b02      	ldr	r3, [pc, #8]	; (801c194 <free+0xc>)
 801c18a:	4601      	mov	r1, r0
 801c18c:	6818      	ldr	r0, [r3, #0]
 801c18e:	f000 bc6f 	b.w	801ca70 <_free_r>
 801c192:	bf00      	nop
 801c194:	20000090 	.word	0x20000090

0801c198 <sbrk_aligned>:
 801c198:	b570      	push	{r4, r5, r6, lr}
 801c19a:	4e0e      	ldr	r6, [pc, #56]	; (801c1d4 <sbrk_aligned+0x3c>)
 801c19c:	460c      	mov	r4, r1
 801c19e:	6831      	ldr	r1, [r6, #0]
 801c1a0:	4605      	mov	r5, r0
 801c1a2:	b911      	cbnz	r1, 801c1aa <sbrk_aligned+0x12>
 801c1a4:	f000 fc06 	bl	801c9b4 <_sbrk_r>
 801c1a8:	6030      	str	r0, [r6, #0]
 801c1aa:	4621      	mov	r1, r4
 801c1ac:	4628      	mov	r0, r5
 801c1ae:	f000 fc01 	bl	801c9b4 <_sbrk_r>
 801c1b2:	1c43      	adds	r3, r0, #1
 801c1b4:	d00a      	beq.n	801c1cc <sbrk_aligned+0x34>
 801c1b6:	1cc4      	adds	r4, r0, #3
 801c1b8:	f024 0403 	bic.w	r4, r4, #3
 801c1bc:	42a0      	cmp	r0, r4
 801c1be:	d007      	beq.n	801c1d0 <sbrk_aligned+0x38>
 801c1c0:	1a21      	subs	r1, r4, r0
 801c1c2:	4628      	mov	r0, r5
 801c1c4:	f000 fbf6 	bl	801c9b4 <_sbrk_r>
 801c1c8:	3001      	adds	r0, #1
 801c1ca:	d101      	bne.n	801c1d0 <sbrk_aligned+0x38>
 801c1cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c1d0:	4620      	mov	r0, r4
 801c1d2:	bd70      	pop	{r4, r5, r6, pc}
 801c1d4:	2000c798 	.word	0x2000c798

0801c1d8 <_malloc_r>:
 801c1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1dc:	1ccd      	adds	r5, r1, #3
 801c1de:	f025 0503 	bic.w	r5, r5, #3
 801c1e2:	3508      	adds	r5, #8
 801c1e4:	2d0c      	cmp	r5, #12
 801c1e6:	bf38      	it	cc
 801c1e8:	250c      	movcc	r5, #12
 801c1ea:	2d00      	cmp	r5, #0
 801c1ec:	4607      	mov	r7, r0
 801c1ee:	db01      	blt.n	801c1f4 <_malloc_r+0x1c>
 801c1f0:	42a9      	cmp	r1, r5
 801c1f2:	d905      	bls.n	801c200 <_malloc_r+0x28>
 801c1f4:	230c      	movs	r3, #12
 801c1f6:	603b      	str	r3, [r7, #0]
 801c1f8:	2600      	movs	r6, #0
 801c1fa:	4630      	mov	r0, r6
 801c1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c200:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c2d4 <_malloc_r+0xfc>
 801c204:	f000 f868 	bl	801c2d8 <__malloc_lock>
 801c208:	f8d8 3000 	ldr.w	r3, [r8]
 801c20c:	461c      	mov	r4, r3
 801c20e:	bb5c      	cbnz	r4, 801c268 <_malloc_r+0x90>
 801c210:	4629      	mov	r1, r5
 801c212:	4638      	mov	r0, r7
 801c214:	f7ff ffc0 	bl	801c198 <sbrk_aligned>
 801c218:	1c43      	adds	r3, r0, #1
 801c21a:	4604      	mov	r4, r0
 801c21c:	d155      	bne.n	801c2ca <_malloc_r+0xf2>
 801c21e:	f8d8 4000 	ldr.w	r4, [r8]
 801c222:	4626      	mov	r6, r4
 801c224:	2e00      	cmp	r6, #0
 801c226:	d145      	bne.n	801c2b4 <_malloc_r+0xdc>
 801c228:	2c00      	cmp	r4, #0
 801c22a:	d048      	beq.n	801c2be <_malloc_r+0xe6>
 801c22c:	6823      	ldr	r3, [r4, #0]
 801c22e:	4631      	mov	r1, r6
 801c230:	4638      	mov	r0, r7
 801c232:	eb04 0903 	add.w	r9, r4, r3
 801c236:	f000 fbbd 	bl	801c9b4 <_sbrk_r>
 801c23a:	4581      	cmp	r9, r0
 801c23c:	d13f      	bne.n	801c2be <_malloc_r+0xe6>
 801c23e:	6821      	ldr	r1, [r4, #0]
 801c240:	1a6d      	subs	r5, r5, r1
 801c242:	4629      	mov	r1, r5
 801c244:	4638      	mov	r0, r7
 801c246:	f7ff ffa7 	bl	801c198 <sbrk_aligned>
 801c24a:	3001      	adds	r0, #1
 801c24c:	d037      	beq.n	801c2be <_malloc_r+0xe6>
 801c24e:	6823      	ldr	r3, [r4, #0]
 801c250:	442b      	add	r3, r5
 801c252:	6023      	str	r3, [r4, #0]
 801c254:	f8d8 3000 	ldr.w	r3, [r8]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d038      	beq.n	801c2ce <_malloc_r+0xf6>
 801c25c:	685a      	ldr	r2, [r3, #4]
 801c25e:	42a2      	cmp	r2, r4
 801c260:	d12b      	bne.n	801c2ba <_malloc_r+0xe2>
 801c262:	2200      	movs	r2, #0
 801c264:	605a      	str	r2, [r3, #4]
 801c266:	e00f      	b.n	801c288 <_malloc_r+0xb0>
 801c268:	6822      	ldr	r2, [r4, #0]
 801c26a:	1b52      	subs	r2, r2, r5
 801c26c:	d41f      	bmi.n	801c2ae <_malloc_r+0xd6>
 801c26e:	2a0b      	cmp	r2, #11
 801c270:	d917      	bls.n	801c2a2 <_malloc_r+0xca>
 801c272:	1961      	adds	r1, r4, r5
 801c274:	42a3      	cmp	r3, r4
 801c276:	6025      	str	r5, [r4, #0]
 801c278:	bf18      	it	ne
 801c27a:	6059      	strne	r1, [r3, #4]
 801c27c:	6863      	ldr	r3, [r4, #4]
 801c27e:	bf08      	it	eq
 801c280:	f8c8 1000 	streq.w	r1, [r8]
 801c284:	5162      	str	r2, [r4, r5]
 801c286:	604b      	str	r3, [r1, #4]
 801c288:	4638      	mov	r0, r7
 801c28a:	f104 060b 	add.w	r6, r4, #11
 801c28e:	f000 f829 	bl	801c2e4 <__malloc_unlock>
 801c292:	f026 0607 	bic.w	r6, r6, #7
 801c296:	1d23      	adds	r3, r4, #4
 801c298:	1af2      	subs	r2, r6, r3
 801c29a:	d0ae      	beq.n	801c1fa <_malloc_r+0x22>
 801c29c:	1b9b      	subs	r3, r3, r6
 801c29e:	50a3      	str	r3, [r4, r2]
 801c2a0:	e7ab      	b.n	801c1fa <_malloc_r+0x22>
 801c2a2:	42a3      	cmp	r3, r4
 801c2a4:	6862      	ldr	r2, [r4, #4]
 801c2a6:	d1dd      	bne.n	801c264 <_malloc_r+0x8c>
 801c2a8:	f8c8 2000 	str.w	r2, [r8]
 801c2ac:	e7ec      	b.n	801c288 <_malloc_r+0xb0>
 801c2ae:	4623      	mov	r3, r4
 801c2b0:	6864      	ldr	r4, [r4, #4]
 801c2b2:	e7ac      	b.n	801c20e <_malloc_r+0x36>
 801c2b4:	4634      	mov	r4, r6
 801c2b6:	6876      	ldr	r6, [r6, #4]
 801c2b8:	e7b4      	b.n	801c224 <_malloc_r+0x4c>
 801c2ba:	4613      	mov	r3, r2
 801c2bc:	e7cc      	b.n	801c258 <_malloc_r+0x80>
 801c2be:	230c      	movs	r3, #12
 801c2c0:	603b      	str	r3, [r7, #0]
 801c2c2:	4638      	mov	r0, r7
 801c2c4:	f000 f80e 	bl	801c2e4 <__malloc_unlock>
 801c2c8:	e797      	b.n	801c1fa <_malloc_r+0x22>
 801c2ca:	6025      	str	r5, [r4, #0]
 801c2cc:	e7dc      	b.n	801c288 <_malloc_r+0xb0>
 801c2ce:	605b      	str	r3, [r3, #4]
 801c2d0:	deff      	udf	#255	; 0xff
 801c2d2:	bf00      	nop
 801c2d4:	2000c794 	.word	0x2000c794

0801c2d8 <__malloc_lock>:
 801c2d8:	4801      	ldr	r0, [pc, #4]	; (801c2e0 <__malloc_lock+0x8>)
 801c2da:	f000 bbb2 	b.w	801ca42 <__retarget_lock_acquire_recursive>
 801c2de:	bf00      	nop
 801c2e0:	2000c8dc 	.word	0x2000c8dc

0801c2e4 <__malloc_unlock>:
 801c2e4:	4801      	ldr	r0, [pc, #4]	; (801c2ec <__malloc_unlock+0x8>)
 801c2e6:	f000 bbad 	b.w	801ca44 <__retarget_lock_release_recursive>
 801c2ea:	bf00      	nop
 801c2ec:	2000c8dc 	.word	0x2000c8dc

0801c2f0 <rand>:
 801c2f0:	4b16      	ldr	r3, [pc, #88]	; (801c34c <rand+0x5c>)
 801c2f2:	b510      	push	{r4, lr}
 801c2f4:	681c      	ldr	r4, [r3, #0]
 801c2f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c2f8:	b9b3      	cbnz	r3, 801c328 <rand+0x38>
 801c2fa:	2018      	movs	r0, #24
 801c2fc:	f7ff ff3c 	bl	801c178 <malloc>
 801c300:	4602      	mov	r2, r0
 801c302:	6320      	str	r0, [r4, #48]	; 0x30
 801c304:	b920      	cbnz	r0, 801c310 <rand+0x20>
 801c306:	4b12      	ldr	r3, [pc, #72]	; (801c350 <rand+0x60>)
 801c308:	4812      	ldr	r0, [pc, #72]	; (801c354 <rand+0x64>)
 801c30a:	2152      	movs	r1, #82	; 0x52
 801c30c:	f7ff ff16 	bl	801c13c <__assert_func>
 801c310:	4911      	ldr	r1, [pc, #68]	; (801c358 <rand+0x68>)
 801c312:	4b12      	ldr	r3, [pc, #72]	; (801c35c <rand+0x6c>)
 801c314:	e9c0 1300 	strd	r1, r3, [r0]
 801c318:	4b11      	ldr	r3, [pc, #68]	; (801c360 <rand+0x70>)
 801c31a:	6083      	str	r3, [r0, #8]
 801c31c:	230b      	movs	r3, #11
 801c31e:	8183      	strh	r3, [r0, #12]
 801c320:	2100      	movs	r1, #0
 801c322:	2001      	movs	r0, #1
 801c324:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c328:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c32a:	480e      	ldr	r0, [pc, #56]	; (801c364 <rand+0x74>)
 801c32c:	690b      	ldr	r3, [r1, #16]
 801c32e:	694c      	ldr	r4, [r1, #20]
 801c330:	4a0d      	ldr	r2, [pc, #52]	; (801c368 <rand+0x78>)
 801c332:	4358      	muls	r0, r3
 801c334:	fb02 0004 	mla	r0, r2, r4, r0
 801c338:	fba3 3202 	umull	r3, r2, r3, r2
 801c33c:	3301      	adds	r3, #1
 801c33e:	eb40 0002 	adc.w	r0, r0, r2
 801c342:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c346:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c34a:	bd10      	pop	{r4, pc}
 801c34c:	20000090 	.word	0x20000090
 801c350:	08021888 	.word	0x08021888
 801c354:	0802189f 	.word	0x0802189f
 801c358:	abcd330e 	.word	0xabcd330e
 801c35c:	e66d1234 	.word	0xe66d1234
 801c360:	0005deec 	.word	0x0005deec
 801c364:	5851f42d 	.word	0x5851f42d
 801c368:	4c957f2d 	.word	0x4c957f2d

0801c36c <std>:
 801c36c:	2300      	movs	r3, #0
 801c36e:	b510      	push	{r4, lr}
 801c370:	4604      	mov	r4, r0
 801c372:	e9c0 3300 	strd	r3, r3, [r0]
 801c376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c37a:	6083      	str	r3, [r0, #8]
 801c37c:	8181      	strh	r1, [r0, #12]
 801c37e:	6643      	str	r3, [r0, #100]	; 0x64
 801c380:	81c2      	strh	r2, [r0, #14]
 801c382:	6183      	str	r3, [r0, #24]
 801c384:	4619      	mov	r1, r3
 801c386:	2208      	movs	r2, #8
 801c388:	305c      	adds	r0, #92	; 0x5c
 801c38a:	f000 fa53 	bl	801c834 <memset>
 801c38e:	4b0d      	ldr	r3, [pc, #52]	; (801c3c4 <std+0x58>)
 801c390:	6263      	str	r3, [r4, #36]	; 0x24
 801c392:	4b0d      	ldr	r3, [pc, #52]	; (801c3c8 <std+0x5c>)
 801c394:	62a3      	str	r3, [r4, #40]	; 0x28
 801c396:	4b0d      	ldr	r3, [pc, #52]	; (801c3cc <std+0x60>)
 801c398:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c39a:	4b0d      	ldr	r3, [pc, #52]	; (801c3d0 <std+0x64>)
 801c39c:	6323      	str	r3, [r4, #48]	; 0x30
 801c39e:	4b0d      	ldr	r3, [pc, #52]	; (801c3d4 <std+0x68>)
 801c3a0:	6224      	str	r4, [r4, #32]
 801c3a2:	429c      	cmp	r4, r3
 801c3a4:	d006      	beq.n	801c3b4 <std+0x48>
 801c3a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801c3aa:	4294      	cmp	r4, r2
 801c3ac:	d002      	beq.n	801c3b4 <std+0x48>
 801c3ae:	33d0      	adds	r3, #208	; 0xd0
 801c3b0:	429c      	cmp	r4, r3
 801c3b2:	d105      	bne.n	801c3c0 <std+0x54>
 801c3b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3bc:	f000 bb40 	b.w	801ca40 <__retarget_lock_init_recursive>
 801c3c0:	bd10      	pop	{r4, pc}
 801c3c2:	bf00      	nop
 801c3c4:	0801c631 	.word	0x0801c631
 801c3c8:	0801c653 	.word	0x0801c653
 801c3cc:	0801c68b 	.word	0x0801c68b
 801c3d0:	0801c6af 	.word	0x0801c6af
 801c3d4:	2000c79c 	.word	0x2000c79c

0801c3d8 <stdio_exit_handler>:
 801c3d8:	4a02      	ldr	r2, [pc, #8]	; (801c3e4 <stdio_exit_handler+0xc>)
 801c3da:	4903      	ldr	r1, [pc, #12]	; (801c3e8 <stdio_exit_handler+0x10>)
 801c3dc:	4803      	ldr	r0, [pc, #12]	; (801c3ec <stdio_exit_handler+0x14>)
 801c3de:	f000 b87b 	b.w	801c4d8 <_fwalk_sglue>
 801c3e2:	bf00      	nop
 801c3e4:	20000038 	.word	0x20000038
 801c3e8:	0801d46d 	.word	0x0801d46d
 801c3ec:	20000044 	.word	0x20000044

0801c3f0 <cleanup_stdio>:
 801c3f0:	6841      	ldr	r1, [r0, #4]
 801c3f2:	4b0c      	ldr	r3, [pc, #48]	; (801c424 <cleanup_stdio+0x34>)
 801c3f4:	4299      	cmp	r1, r3
 801c3f6:	b510      	push	{r4, lr}
 801c3f8:	4604      	mov	r4, r0
 801c3fa:	d001      	beq.n	801c400 <cleanup_stdio+0x10>
 801c3fc:	f001 f836 	bl	801d46c <_fflush_r>
 801c400:	68a1      	ldr	r1, [r4, #8]
 801c402:	4b09      	ldr	r3, [pc, #36]	; (801c428 <cleanup_stdio+0x38>)
 801c404:	4299      	cmp	r1, r3
 801c406:	d002      	beq.n	801c40e <cleanup_stdio+0x1e>
 801c408:	4620      	mov	r0, r4
 801c40a:	f001 f82f 	bl	801d46c <_fflush_r>
 801c40e:	68e1      	ldr	r1, [r4, #12]
 801c410:	4b06      	ldr	r3, [pc, #24]	; (801c42c <cleanup_stdio+0x3c>)
 801c412:	4299      	cmp	r1, r3
 801c414:	d004      	beq.n	801c420 <cleanup_stdio+0x30>
 801c416:	4620      	mov	r0, r4
 801c418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c41c:	f001 b826 	b.w	801d46c <_fflush_r>
 801c420:	bd10      	pop	{r4, pc}
 801c422:	bf00      	nop
 801c424:	2000c79c 	.word	0x2000c79c
 801c428:	2000c804 	.word	0x2000c804
 801c42c:	2000c86c 	.word	0x2000c86c

0801c430 <global_stdio_init.part.0>:
 801c430:	b510      	push	{r4, lr}
 801c432:	4b0b      	ldr	r3, [pc, #44]	; (801c460 <global_stdio_init.part.0+0x30>)
 801c434:	4c0b      	ldr	r4, [pc, #44]	; (801c464 <global_stdio_init.part.0+0x34>)
 801c436:	4a0c      	ldr	r2, [pc, #48]	; (801c468 <global_stdio_init.part.0+0x38>)
 801c438:	601a      	str	r2, [r3, #0]
 801c43a:	4620      	mov	r0, r4
 801c43c:	2200      	movs	r2, #0
 801c43e:	2104      	movs	r1, #4
 801c440:	f7ff ff94 	bl	801c36c <std>
 801c444:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c448:	2201      	movs	r2, #1
 801c44a:	2109      	movs	r1, #9
 801c44c:	f7ff ff8e 	bl	801c36c <std>
 801c450:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c454:	2202      	movs	r2, #2
 801c456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c45a:	2112      	movs	r1, #18
 801c45c:	f7ff bf86 	b.w	801c36c <std>
 801c460:	2000c8d4 	.word	0x2000c8d4
 801c464:	2000c79c 	.word	0x2000c79c
 801c468:	0801c3d9 	.word	0x0801c3d9

0801c46c <__sfp_lock_acquire>:
 801c46c:	4801      	ldr	r0, [pc, #4]	; (801c474 <__sfp_lock_acquire+0x8>)
 801c46e:	f000 bae8 	b.w	801ca42 <__retarget_lock_acquire_recursive>
 801c472:	bf00      	nop
 801c474:	2000c8dd 	.word	0x2000c8dd

0801c478 <__sfp_lock_release>:
 801c478:	4801      	ldr	r0, [pc, #4]	; (801c480 <__sfp_lock_release+0x8>)
 801c47a:	f000 bae3 	b.w	801ca44 <__retarget_lock_release_recursive>
 801c47e:	bf00      	nop
 801c480:	2000c8dd 	.word	0x2000c8dd

0801c484 <__sinit>:
 801c484:	b510      	push	{r4, lr}
 801c486:	4604      	mov	r4, r0
 801c488:	f7ff fff0 	bl	801c46c <__sfp_lock_acquire>
 801c48c:	6a23      	ldr	r3, [r4, #32]
 801c48e:	b11b      	cbz	r3, 801c498 <__sinit+0x14>
 801c490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c494:	f7ff bff0 	b.w	801c478 <__sfp_lock_release>
 801c498:	4b04      	ldr	r3, [pc, #16]	; (801c4ac <__sinit+0x28>)
 801c49a:	6223      	str	r3, [r4, #32]
 801c49c:	4b04      	ldr	r3, [pc, #16]	; (801c4b0 <__sinit+0x2c>)
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d1f5      	bne.n	801c490 <__sinit+0xc>
 801c4a4:	f7ff ffc4 	bl	801c430 <global_stdio_init.part.0>
 801c4a8:	e7f2      	b.n	801c490 <__sinit+0xc>
 801c4aa:	bf00      	nop
 801c4ac:	0801c3f1 	.word	0x0801c3f1
 801c4b0:	2000c8d4 	.word	0x2000c8d4

0801c4b4 <fiprintf>:
 801c4b4:	b40e      	push	{r1, r2, r3}
 801c4b6:	b503      	push	{r0, r1, lr}
 801c4b8:	4601      	mov	r1, r0
 801c4ba:	ab03      	add	r3, sp, #12
 801c4bc:	4805      	ldr	r0, [pc, #20]	; (801c4d4 <fiprintf+0x20>)
 801c4be:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4c2:	6800      	ldr	r0, [r0, #0]
 801c4c4:	9301      	str	r3, [sp, #4]
 801c4c6:	f000 fca1 	bl	801ce0c <_vfiprintf_r>
 801c4ca:	b002      	add	sp, #8
 801c4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801c4d0:	b003      	add	sp, #12
 801c4d2:	4770      	bx	lr
 801c4d4:	20000090 	.word	0x20000090

0801c4d8 <_fwalk_sglue>:
 801c4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4dc:	4607      	mov	r7, r0
 801c4de:	4688      	mov	r8, r1
 801c4e0:	4614      	mov	r4, r2
 801c4e2:	2600      	movs	r6, #0
 801c4e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c4e8:	f1b9 0901 	subs.w	r9, r9, #1
 801c4ec:	d505      	bpl.n	801c4fa <_fwalk_sglue+0x22>
 801c4ee:	6824      	ldr	r4, [r4, #0]
 801c4f0:	2c00      	cmp	r4, #0
 801c4f2:	d1f7      	bne.n	801c4e4 <_fwalk_sglue+0xc>
 801c4f4:	4630      	mov	r0, r6
 801c4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4fa:	89ab      	ldrh	r3, [r5, #12]
 801c4fc:	2b01      	cmp	r3, #1
 801c4fe:	d907      	bls.n	801c510 <_fwalk_sglue+0x38>
 801c500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c504:	3301      	adds	r3, #1
 801c506:	d003      	beq.n	801c510 <_fwalk_sglue+0x38>
 801c508:	4629      	mov	r1, r5
 801c50a:	4638      	mov	r0, r7
 801c50c:	47c0      	blx	r8
 801c50e:	4306      	orrs	r6, r0
 801c510:	3568      	adds	r5, #104	; 0x68
 801c512:	e7e9      	b.n	801c4e8 <_fwalk_sglue+0x10>

0801c514 <iprintf>:
 801c514:	b40f      	push	{r0, r1, r2, r3}
 801c516:	b507      	push	{r0, r1, r2, lr}
 801c518:	4906      	ldr	r1, [pc, #24]	; (801c534 <iprintf+0x20>)
 801c51a:	ab04      	add	r3, sp, #16
 801c51c:	6808      	ldr	r0, [r1, #0]
 801c51e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c522:	6881      	ldr	r1, [r0, #8]
 801c524:	9301      	str	r3, [sp, #4]
 801c526:	f000 fc71 	bl	801ce0c <_vfiprintf_r>
 801c52a:	b003      	add	sp, #12
 801c52c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c530:	b004      	add	sp, #16
 801c532:	4770      	bx	lr
 801c534:	20000090 	.word	0x20000090

0801c538 <_puts_r>:
 801c538:	6a03      	ldr	r3, [r0, #32]
 801c53a:	b570      	push	{r4, r5, r6, lr}
 801c53c:	6884      	ldr	r4, [r0, #8]
 801c53e:	4605      	mov	r5, r0
 801c540:	460e      	mov	r6, r1
 801c542:	b90b      	cbnz	r3, 801c548 <_puts_r+0x10>
 801c544:	f7ff ff9e 	bl	801c484 <__sinit>
 801c548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c54a:	07db      	lsls	r3, r3, #31
 801c54c:	d405      	bmi.n	801c55a <_puts_r+0x22>
 801c54e:	89a3      	ldrh	r3, [r4, #12]
 801c550:	0598      	lsls	r0, r3, #22
 801c552:	d402      	bmi.n	801c55a <_puts_r+0x22>
 801c554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c556:	f000 fa74 	bl	801ca42 <__retarget_lock_acquire_recursive>
 801c55a:	89a3      	ldrh	r3, [r4, #12]
 801c55c:	0719      	lsls	r1, r3, #28
 801c55e:	d513      	bpl.n	801c588 <_puts_r+0x50>
 801c560:	6923      	ldr	r3, [r4, #16]
 801c562:	b18b      	cbz	r3, 801c588 <_puts_r+0x50>
 801c564:	3e01      	subs	r6, #1
 801c566:	68a3      	ldr	r3, [r4, #8]
 801c568:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c56c:	3b01      	subs	r3, #1
 801c56e:	60a3      	str	r3, [r4, #8]
 801c570:	b9e9      	cbnz	r1, 801c5ae <_puts_r+0x76>
 801c572:	2b00      	cmp	r3, #0
 801c574:	da2e      	bge.n	801c5d4 <_puts_r+0x9c>
 801c576:	4622      	mov	r2, r4
 801c578:	210a      	movs	r1, #10
 801c57a:	4628      	mov	r0, r5
 801c57c:	f000 f89b 	bl	801c6b6 <__swbuf_r>
 801c580:	3001      	adds	r0, #1
 801c582:	d007      	beq.n	801c594 <_puts_r+0x5c>
 801c584:	250a      	movs	r5, #10
 801c586:	e007      	b.n	801c598 <_puts_r+0x60>
 801c588:	4621      	mov	r1, r4
 801c58a:	4628      	mov	r0, r5
 801c58c:	f000 f8d0 	bl	801c730 <__swsetup_r>
 801c590:	2800      	cmp	r0, #0
 801c592:	d0e7      	beq.n	801c564 <_puts_r+0x2c>
 801c594:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c59a:	07da      	lsls	r2, r3, #31
 801c59c:	d405      	bmi.n	801c5aa <_puts_r+0x72>
 801c59e:	89a3      	ldrh	r3, [r4, #12]
 801c5a0:	059b      	lsls	r3, r3, #22
 801c5a2:	d402      	bmi.n	801c5aa <_puts_r+0x72>
 801c5a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c5a6:	f000 fa4d 	bl	801ca44 <__retarget_lock_release_recursive>
 801c5aa:	4628      	mov	r0, r5
 801c5ac:	bd70      	pop	{r4, r5, r6, pc}
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	da04      	bge.n	801c5bc <_puts_r+0x84>
 801c5b2:	69a2      	ldr	r2, [r4, #24]
 801c5b4:	429a      	cmp	r2, r3
 801c5b6:	dc06      	bgt.n	801c5c6 <_puts_r+0x8e>
 801c5b8:	290a      	cmp	r1, #10
 801c5ba:	d004      	beq.n	801c5c6 <_puts_r+0x8e>
 801c5bc:	6823      	ldr	r3, [r4, #0]
 801c5be:	1c5a      	adds	r2, r3, #1
 801c5c0:	6022      	str	r2, [r4, #0]
 801c5c2:	7019      	strb	r1, [r3, #0]
 801c5c4:	e7cf      	b.n	801c566 <_puts_r+0x2e>
 801c5c6:	4622      	mov	r2, r4
 801c5c8:	4628      	mov	r0, r5
 801c5ca:	f000 f874 	bl	801c6b6 <__swbuf_r>
 801c5ce:	3001      	adds	r0, #1
 801c5d0:	d1c9      	bne.n	801c566 <_puts_r+0x2e>
 801c5d2:	e7df      	b.n	801c594 <_puts_r+0x5c>
 801c5d4:	6823      	ldr	r3, [r4, #0]
 801c5d6:	250a      	movs	r5, #10
 801c5d8:	1c5a      	adds	r2, r3, #1
 801c5da:	6022      	str	r2, [r4, #0]
 801c5dc:	701d      	strb	r5, [r3, #0]
 801c5de:	e7db      	b.n	801c598 <_puts_r+0x60>

0801c5e0 <puts>:
 801c5e0:	4b02      	ldr	r3, [pc, #8]	; (801c5ec <puts+0xc>)
 801c5e2:	4601      	mov	r1, r0
 801c5e4:	6818      	ldr	r0, [r3, #0]
 801c5e6:	f7ff bfa7 	b.w	801c538 <_puts_r>
 801c5ea:	bf00      	nop
 801c5ec:	20000090 	.word	0x20000090

0801c5f0 <siprintf>:
 801c5f0:	b40e      	push	{r1, r2, r3}
 801c5f2:	b500      	push	{lr}
 801c5f4:	b09c      	sub	sp, #112	; 0x70
 801c5f6:	ab1d      	add	r3, sp, #116	; 0x74
 801c5f8:	9002      	str	r0, [sp, #8]
 801c5fa:	9006      	str	r0, [sp, #24]
 801c5fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c600:	4809      	ldr	r0, [pc, #36]	; (801c628 <siprintf+0x38>)
 801c602:	9107      	str	r1, [sp, #28]
 801c604:	9104      	str	r1, [sp, #16]
 801c606:	4909      	ldr	r1, [pc, #36]	; (801c62c <siprintf+0x3c>)
 801c608:	f853 2b04 	ldr.w	r2, [r3], #4
 801c60c:	9105      	str	r1, [sp, #20]
 801c60e:	6800      	ldr	r0, [r0, #0]
 801c610:	9301      	str	r3, [sp, #4]
 801c612:	a902      	add	r1, sp, #8
 801c614:	f000 fad2 	bl	801cbbc <_svfiprintf_r>
 801c618:	9b02      	ldr	r3, [sp, #8]
 801c61a:	2200      	movs	r2, #0
 801c61c:	701a      	strb	r2, [r3, #0]
 801c61e:	b01c      	add	sp, #112	; 0x70
 801c620:	f85d eb04 	ldr.w	lr, [sp], #4
 801c624:	b003      	add	sp, #12
 801c626:	4770      	bx	lr
 801c628:	20000090 	.word	0x20000090
 801c62c:	ffff0208 	.word	0xffff0208

0801c630 <__sread>:
 801c630:	b510      	push	{r4, lr}
 801c632:	460c      	mov	r4, r1
 801c634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c638:	f000 f9aa 	bl	801c990 <_read_r>
 801c63c:	2800      	cmp	r0, #0
 801c63e:	bfab      	itete	ge
 801c640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c642:	89a3      	ldrhlt	r3, [r4, #12]
 801c644:	181b      	addge	r3, r3, r0
 801c646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c64a:	bfac      	ite	ge
 801c64c:	6563      	strge	r3, [r4, #84]	; 0x54
 801c64e:	81a3      	strhlt	r3, [r4, #12]
 801c650:	bd10      	pop	{r4, pc}

0801c652 <__swrite>:
 801c652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c656:	461f      	mov	r7, r3
 801c658:	898b      	ldrh	r3, [r1, #12]
 801c65a:	05db      	lsls	r3, r3, #23
 801c65c:	4605      	mov	r5, r0
 801c65e:	460c      	mov	r4, r1
 801c660:	4616      	mov	r6, r2
 801c662:	d505      	bpl.n	801c670 <__swrite+0x1e>
 801c664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c668:	2302      	movs	r3, #2
 801c66a:	2200      	movs	r2, #0
 801c66c:	f000 f97e 	bl	801c96c <_lseek_r>
 801c670:	89a3      	ldrh	r3, [r4, #12]
 801c672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c67a:	81a3      	strh	r3, [r4, #12]
 801c67c:	4632      	mov	r2, r6
 801c67e:	463b      	mov	r3, r7
 801c680:	4628      	mov	r0, r5
 801c682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c686:	f000 b9a5 	b.w	801c9d4 <_write_r>

0801c68a <__sseek>:
 801c68a:	b510      	push	{r4, lr}
 801c68c:	460c      	mov	r4, r1
 801c68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c692:	f000 f96b 	bl	801c96c <_lseek_r>
 801c696:	1c43      	adds	r3, r0, #1
 801c698:	89a3      	ldrh	r3, [r4, #12]
 801c69a:	bf15      	itete	ne
 801c69c:	6560      	strne	r0, [r4, #84]	; 0x54
 801c69e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c6a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c6a6:	81a3      	strheq	r3, [r4, #12]
 801c6a8:	bf18      	it	ne
 801c6aa:	81a3      	strhne	r3, [r4, #12]
 801c6ac:	bd10      	pop	{r4, pc}

0801c6ae <__sclose>:
 801c6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6b2:	f000 b8f5 	b.w	801c8a0 <_close_r>

0801c6b6 <__swbuf_r>:
 801c6b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6b8:	460e      	mov	r6, r1
 801c6ba:	4614      	mov	r4, r2
 801c6bc:	4605      	mov	r5, r0
 801c6be:	b118      	cbz	r0, 801c6c8 <__swbuf_r+0x12>
 801c6c0:	6a03      	ldr	r3, [r0, #32]
 801c6c2:	b90b      	cbnz	r3, 801c6c8 <__swbuf_r+0x12>
 801c6c4:	f7ff fede 	bl	801c484 <__sinit>
 801c6c8:	69a3      	ldr	r3, [r4, #24]
 801c6ca:	60a3      	str	r3, [r4, #8]
 801c6cc:	89a3      	ldrh	r3, [r4, #12]
 801c6ce:	071a      	lsls	r2, r3, #28
 801c6d0:	d525      	bpl.n	801c71e <__swbuf_r+0x68>
 801c6d2:	6923      	ldr	r3, [r4, #16]
 801c6d4:	b31b      	cbz	r3, 801c71e <__swbuf_r+0x68>
 801c6d6:	6823      	ldr	r3, [r4, #0]
 801c6d8:	6922      	ldr	r2, [r4, #16]
 801c6da:	1a98      	subs	r0, r3, r2
 801c6dc:	6963      	ldr	r3, [r4, #20]
 801c6de:	b2f6      	uxtb	r6, r6
 801c6e0:	4283      	cmp	r3, r0
 801c6e2:	4637      	mov	r7, r6
 801c6e4:	dc04      	bgt.n	801c6f0 <__swbuf_r+0x3a>
 801c6e6:	4621      	mov	r1, r4
 801c6e8:	4628      	mov	r0, r5
 801c6ea:	f000 febf 	bl	801d46c <_fflush_r>
 801c6ee:	b9e0      	cbnz	r0, 801c72a <__swbuf_r+0x74>
 801c6f0:	68a3      	ldr	r3, [r4, #8]
 801c6f2:	3b01      	subs	r3, #1
 801c6f4:	60a3      	str	r3, [r4, #8]
 801c6f6:	6823      	ldr	r3, [r4, #0]
 801c6f8:	1c5a      	adds	r2, r3, #1
 801c6fa:	6022      	str	r2, [r4, #0]
 801c6fc:	701e      	strb	r6, [r3, #0]
 801c6fe:	6962      	ldr	r2, [r4, #20]
 801c700:	1c43      	adds	r3, r0, #1
 801c702:	429a      	cmp	r2, r3
 801c704:	d004      	beq.n	801c710 <__swbuf_r+0x5a>
 801c706:	89a3      	ldrh	r3, [r4, #12]
 801c708:	07db      	lsls	r3, r3, #31
 801c70a:	d506      	bpl.n	801c71a <__swbuf_r+0x64>
 801c70c:	2e0a      	cmp	r6, #10
 801c70e:	d104      	bne.n	801c71a <__swbuf_r+0x64>
 801c710:	4621      	mov	r1, r4
 801c712:	4628      	mov	r0, r5
 801c714:	f000 feaa 	bl	801d46c <_fflush_r>
 801c718:	b938      	cbnz	r0, 801c72a <__swbuf_r+0x74>
 801c71a:	4638      	mov	r0, r7
 801c71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c71e:	4621      	mov	r1, r4
 801c720:	4628      	mov	r0, r5
 801c722:	f000 f805 	bl	801c730 <__swsetup_r>
 801c726:	2800      	cmp	r0, #0
 801c728:	d0d5      	beq.n	801c6d6 <__swbuf_r+0x20>
 801c72a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c72e:	e7f4      	b.n	801c71a <__swbuf_r+0x64>

0801c730 <__swsetup_r>:
 801c730:	b538      	push	{r3, r4, r5, lr}
 801c732:	4b2a      	ldr	r3, [pc, #168]	; (801c7dc <__swsetup_r+0xac>)
 801c734:	4605      	mov	r5, r0
 801c736:	6818      	ldr	r0, [r3, #0]
 801c738:	460c      	mov	r4, r1
 801c73a:	b118      	cbz	r0, 801c744 <__swsetup_r+0x14>
 801c73c:	6a03      	ldr	r3, [r0, #32]
 801c73e:	b90b      	cbnz	r3, 801c744 <__swsetup_r+0x14>
 801c740:	f7ff fea0 	bl	801c484 <__sinit>
 801c744:	89a3      	ldrh	r3, [r4, #12]
 801c746:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c74a:	0718      	lsls	r0, r3, #28
 801c74c:	d422      	bmi.n	801c794 <__swsetup_r+0x64>
 801c74e:	06d9      	lsls	r1, r3, #27
 801c750:	d407      	bmi.n	801c762 <__swsetup_r+0x32>
 801c752:	2309      	movs	r3, #9
 801c754:	602b      	str	r3, [r5, #0]
 801c756:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c75a:	81a3      	strh	r3, [r4, #12]
 801c75c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c760:	e034      	b.n	801c7cc <__swsetup_r+0x9c>
 801c762:	0758      	lsls	r0, r3, #29
 801c764:	d512      	bpl.n	801c78c <__swsetup_r+0x5c>
 801c766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c768:	b141      	cbz	r1, 801c77c <__swsetup_r+0x4c>
 801c76a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c76e:	4299      	cmp	r1, r3
 801c770:	d002      	beq.n	801c778 <__swsetup_r+0x48>
 801c772:	4628      	mov	r0, r5
 801c774:	f000 f97c 	bl	801ca70 <_free_r>
 801c778:	2300      	movs	r3, #0
 801c77a:	6363      	str	r3, [r4, #52]	; 0x34
 801c77c:	89a3      	ldrh	r3, [r4, #12]
 801c77e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c782:	81a3      	strh	r3, [r4, #12]
 801c784:	2300      	movs	r3, #0
 801c786:	6063      	str	r3, [r4, #4]
 801c788:	6923      	ldr	r3, [r4, #16]
 801c78a:	6023      	str	r3, [r4, #0]
 801c78c:	89a3      	ldrh	r3, [r4, #12]
 801c78e:	f043 0308 	orr.w	r3, r3, #8
 801c792:	81a3      	strh	r3, [r4, #12]
 801c794:	6923      	ldr	r3, [r4, #16]
 801c796:	b94b      	cbnz	r3, 801c7ac <__swsetup_r+0x7c>
 801c798:	89a3      	ldrh	r3, [r4, #12]
 801c79a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c79e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c7a2:	d003      	beq.n	801c7ac <__swsetup_r+0x7c>
 801c7a4:	4621      	mov	r1, r4
 801c7a6:	4628      	mov	r0, r5
 801c7a8:	f000 feae 	bl	801d508 <__smakebuf_r>
 801c7ac:	89a0      	ldrh	r0, [r4, #12]
 801c7ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c7b2:	f010 0301 	ands.w	r3, r0, #1
 801c7b6:	d00a      	beq.n	801c7ce <__swsetup_r+0x9e>
 801c7b8:	2300      	movs	r3, #0
 801c7ba:	60a3      	str	r3, [r4, #8]
 801c7bc:	6963      	ldr	r3, [r4, #20]
 801c7be:	425b      	negs	r3, r3
 801c7c0:	61a3      	str	r3, [r4, #24]
 801c7c2:	6923      	ldr	r3, [r4, #16]
 801c7c4:	b943      	cbnz	r3, 801c7d8 <__swsetup_r+0xa8>
 801c7c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c7ca:	d1c4      	bne.n	801c756 <__swsetup_r+0x26>
 801c7cc:	bd38      	pop	{r3, r4, r5, pc}
 801c7ce:	0781      	lsls	r1, r0, #30
 801c7d0:	bf58      	it	pl
 801c7d2:	6963      	ldrpl	r3, [r4, #20]
 801c7d4:	60a3      	str	r3, [r4, #8]
 801c7d6:	e7f4      	b.n	801c7c2 <__swsetup_r+0x92>
 801c7d8:	2000      	movs	r0, #0
 801c7da:	e7f7      	b.n	801c7cc <__swsetup_r+0x9c>
 801c7dc:	20000090 	.word	0x20000090

0801c7e0 <memcmp>:
 801c7e0:	b510      	push	{r4, lr}
 801c7e2:	3901      	subs	r1, #1
 801c7e4:	4402      	add	r2, r0
 801c7e6:	4290      	cmp	r0, r2
 801c7e8:	d101      	bne.n	801c7ee <memcmp+0xe>
 801c7ea:	2000      	movs	r0, #0
 801c7ec:	e005      	b.n	801c7fa <memcmp+0x1a>
 801c7ee:	7803      	ldrb	r3, [r0, #0]
 801c7f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c7f4:	42a3      	cmp	r3, r4
 801c7f6:	d001      	beq.n	801c7fc <memcmp+0x1c>
 801c7f8:	1b18      	subs	r0, r3, r4
 801c7fa:	bd10      	pop	{r4, pc}
 801c7fc:	3001      	adds	r0, #1
 801c7fe:	e7f2      	b.n	801c7e6 <memcmp+0x6>

0801c800 <memmove>:
 801c800:	4288      	cmp	r0, r1
 801c802:	b510      	push	{r4, lr}
 801c804:	eb01 0402 	add.w	r4, r1, r2
 801c808:	d902      	bls.n	801c810 <memmove+0x10>
 801c80a:	4284      	cmp	r4, r0
 801c80c:	4623      	mov	r3, r4
 801c80e:	d807      	bhi.n	801c820 <memmove+0x20>
 801c810:	1e43      	subs	r3, r0, #1
 801c812:	42a1      	cmp	r1, r4
 801c814:	d008      	beq.n	801c828 <memmove+0x28>
 801c816:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c81e:	e7f8      	b.n	801c812 <memmove+0x12>
 801c820:	4402      	add	r2, r0
 801c822:	4601      	mov	r1, r0
 801c824:	428a      	cmp	r2, r1
 801c826:	d100      	bne.n	801c82a <memmove+0x2a>
 801c828:	bd10      	pop	{r4, pc}
 801c82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c832:	e7f7      	b.n	801c824 <memmove+0x24>

0801c834 <memset>:
 801c834:	4402      	add	r2, r0
 801c836:	4603      	mov	r3, r0
 801c838:	4293      	cmp	r3, r2
 801c83a:	d100      	bne.n	801c83e <memset+0xa>
 801c83c:	4770      	bx	lr
 801c83e:	f803 1b01 	strb.w	r1, [r3], #1
 801c842:	e7f9      	b.n	801c838 <memset+0x4>

0801c844 <strchr>:
 801c844:	b2c9      	uxtb	r1, r1
 801c846:	4603      	mov	r3, r0
 801c848:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c84c:	b11a      	cbz	r2, 801c856 <strchr+0x12>
 801c84e:	428a      	cmp	r2, r1
 801c850:	d1f9      	bne.n	801c846 <strchr+0x2>
 801c852:	4618      	mov	r0, r3
 801c854:	4770      	bx	lr
 801c856:	2900      	cmp	r1, #0
 801c858:	bf18      	it	ne
 801c85a:	2300      	movne	r3, #0
 801c85c:	e7f9      	b.n	801c852 <strchr+0xe>

0801c85e <strcspn>:
 801c85e:	b570      	push	{r4, r5, r6, lr}
 801c860:	4603      	mov	r3, r0
 801c862:	461e      	mov	r6, r3
 801c864:	f813 4b01 	ldrb.w	r4, [r3], #1
 801c868:	b144      	cbz	r4, 801c87c <strcspn+0x1e>
 801c86a:	1e4a      	subs	r2, r1, #1
 801c86c:	e001      	b.n	801c872 <strcspn+0x14>
 801c86e:	42a5      	cmp	r5, r4
 801c870:	d004      	beq.n	801c87c <strcspn+0x1e>
 801c872:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801c876:	2d00      	cmp	r5, #0
 801c878:	d1f9      	bne.n	801c86e <strcspn+0x10>
 801c87a:	e7f2      	b.n	801c862 <strcspn+0x4>
 801c87c:	1a30      	subs	r0, r6, r0
 801c87e:	bd70      	pop	{r4, r5, r6, pc}

0801c880 <strspn>:
 801c880:	b570      	push	{r4, r5, r6, lr}
 801c882:	4603      	mov	r3, r0
 801c884:	461e      	mov	r6, r3
 801c886:	f813 4b01 	ldrb.w	r4, [r3], #1
 801c88a:	b13c      	cbz	r4, 801c89c <strspn+0x1c>
 801c88c:	1e4a      	subs	r2, r1, #1
 801c88e:	e001      	b.n	801c894 <strspn+0x14>
 801c890:	42a5      	cmp	r5, r4
 801c892:	d0f7      	beq.n	801c884 <strspn+0x4>
 801c894:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801c898:	2d00      	cmp	r5, #0
 801c89a:	d1f9      	bne.n	801c890 <strspn+0x10>
 801c89c:	1a30      	subs	r0, r6, r0
 801c89e:	bd70      	pop	{r4, r5, r6, pc}

0801c8a0 <_close_r>:
 801c8a0:	b538      	push	{r3, r4, r5, lr}
 801c8a2:	4d06      	ldr	r5, [pc, #24]	; (801c8bc <_close_r+0x1c>)
 801c8a4:	2300      	movs	r3, #0
 801c8a6:	4604      	mov	r4, r0
 801c8a8:	4608      	mov	r0, r1
 801c8aa:	602b      	str	r3, [r5, #0]
 801c8ac:	f7e5 f905 	bl	8001aba <_close>
 801c8b0:	1c43      	adds	r3, r0, #1
 801c8b2:	d102      	bne.n	801c8ba <_close_r+0x1a>
 801c8b4:	682b      	ldr	r3, [r5, #0]
 801c8b6:	b103      	cbz	r3, 801c8ba <_close_r+0x1a>
 801c8b8:	6023      	str	r3, [r4, #0]
 801c8ba:	bd38      	pop	{r3, r4, r5, pc}
 801c8bc:	2000c8d8 	.word	0x2000c8d8

0801c8c0 <_reclaim_reent>:
 801c8c0:	4b29      	ldr	r3, [pc, #164]	; (801c968 <_reclaim_reent+0xa8>)
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	4283      	cmp	r3, r0
 801c8c6:	b570      	push	{r4, r5, r6, lr}
 801c8c8:	4604      	mov	r4, r0
 801c8ca:	d04b      	beq.n	801c964 <_reclaim_reent+0xa4>
 801c8cc:	69c3      	ldr	r3, [r0, #28]
 801c8ce:	b143      	cbz	r3, 801c8e2 <_reclaim_reent+0x22>
 801c8d0:	68db      	ldr	r3, [r3, #12]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d144      	bne.n	801c960 <_reclaim_reent+0xa0>
 801c8d6:	69e3      	ldr	r3, [r4, #28]
 801c8d8:	6819      	ldr	r1, [r3, #0]
 801c8da:	b111      	cbz	r1, 801c8e2 <_reclaim_reent+0x22>
 801c8dc:	4620      	mov	r0, r4
 801c8de:	f000 f8c7 	bl	801ca70 <_free_r>
 801c8e2:	6961      	ldr	r1, [r4, #20]
 801c8e4:	b111      	cbz	r1, 801c8ec <_reclaim_reent+0x2c>
 801c8e6:	4620      	mov	r0, r4
 801c8e8:	f000 f8c2 	bl	801ca70 <_free_r>
 801c8ec:	69e1      	ldr	r1, [r4, #28]
 801c8ee:	b111      	cbz	r1, 801c8f6 <_reclaim_reent+0x36>
 801c8f0:	4620      	mov	r0, r4
 801c8f2:	f000 f8bd 	bl	801ca70 <_free_r>
 801c8f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c8f8:	b111      	cbz	r1, 801c900 <_reclaim_reent+0x40>
 801c8fa:	4620      	mov	r0, r4
 801c8fc:	f000 f8b8 	bl	801ca70 <_free_r>
 801c900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c902:	b111      	cbz	r1, 801c90a <_reclaim_reent+0x4a>
 801c904:	4620      	mov	r0, r4
 801c906:	f000 f8b3 	bl	801ca70 <_free_r>
 801c90a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c90c:	b111      	cbz	r1, 801c914 <_reclaim_reent+0x54>
 801c90e:	4620      	mov	r0, r4
 801c910:	f000 f8ae 	bl	801ca70 <_free_r>
 801c914:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c916:	b111      	cbz	r1, 801c91e <_reclaim_reent+0x5e>
 801c918:	4620      	mov	r0, r4
 801c91a:	f000 f8a9 	bl	801ca70 <_free_r>
 801c91e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801c920:	b111      	cbz	r1, 801c928 <_reclaim_reent+0x68>
 801c922:	4620      	mov	r0, r4
 801c924:	f000 f8a4 	bl	801ca70 <_free_r>
 801c928:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c92a:	b111      	cbz	r1, 801c932 <_reclaim_reent+0x72>
 801c92c:	4620      	mov	r0, r4
 801c92e:	f000 f89f 	bl	801ca70 <_free_r>
 801c932:	6a23      	ldr	r3, [r4, #32]
 801c934:	b1b3      	cbz	r3, 801c964 <_reclaim_reent+0xa4>
 801c936:	4620      	mov	r0, r4
 801c938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c93c:	4718      	bx	r3
 801c93e:	5949      	ldr	r1, [r1, r5]
 801c940:	b941      	cbnz	r1, 801c954 <_reclaim_reent+0x94>
 801c942:	3504      	adds	r5, #4
 801c944:	69e3      	ldr	r3, [r4, #28]
 801c946:	2d80      	cmp	r5, #128	; 0x80
 801c948:	68d9      	ldr	r1, [r3, #12]
 801c94a:	d1f8      	bne.n	801c93e <_reclaim_reent+0x7e>
 801c94c:	4620      	mov	r0, r4
 801c94e:	f000 f88f 	bl	801ca70 <_free_r>
 801c952:	e7c0      	b.n	801c8d6 <_reclaim_reent+0x16>
 801c954:	680e      	ldr	r6, [r1, #0]
 801c956:	4620      	mov	r0, r4
 801c958:	f000 f88a 	bl	801ca70 <_free_r>
 801c95c:	4631      	mov	r1, r6
 801c95e:	e7ef      	b.n	801c940 <_reclaim_reent+0x80>
 801c960:	2500      	movs	r5, #0
 801c962:	e7ef      	b.n	801c944 <_reclaim_reent+0x84>
 801c964:	bd70      	pop	{r4, r5, r6, pc}
 801c966:	bf00      	nop
 801c968:	20000090 	.word	0x20000090

0801c96c <_lseek_r>:
 801c96c:	b538      	push	{r3, r4, r5, lr}
 801c96e:	4d07      	ldr	r5, [pc, #28]	; (801c98c <_lseek_r+0x20>)
 801c970:	4604      	mov	r4, r0
 801c972:	4608      	mov	r0, r1
 801c974:	4611      	mov	r1, r2
 801c976:	2200      	movs	r2, #0
 801c978:	602a      	str	r2, [r5, #0]
 801c97a:	461a      	mov	r2, r3
 801c97c:	f7e5 f8c4 	bl	8001b08 <_lseek>
 801c980:	1c43      	adds	r3, r0, #1
 801c982:	d102      	bne.n	801c98a <_lseek_r+0x1e>
 801c984:	682b      	ldr	r3, [r5, #0]
 801c986:	b103      	cbz	r3, 801c98a <_lseek_r+0x1e>
 801c988:	6023      	str	r3, [r4, #0]
 801c98a:	bd38      	pop	{r3, r4, r5, pc}
 801c98c:	2000c8d8 	.word	0x2000c8d8

0801c990 <_read_r>:
 801c990:	b538      	push	{r3, r4, r5, lr}
 801c992:	4d07      	ldr	r5, [pc, #28]	; (801c9b0 <_read_r+0x20>)
 801c994:	4604      	mov	r4, r0
 801c996:	4608      	mov	r0, r1
 801c998:	4611      	mov	r1, r2
 801c99a:	2200      	movs	r2, #0
 801c99c:	602a      	str	r2, [r5, #0]
 801c99e:	461a      	mov	r2, r3
 801c9a0:	f7e5 f852 	bl	8001a48 <_read>
 801c9a4:	1c43      	adds	r3, r0, #1
 801c9a6:	d102      	bne.n	801c9ae <_read_r+0x1e>
 801c9a8:	682b      	ldr	r3, [r5, #0]
 801c9aa:	b103      	cbz	r3, 801c9ae <_read_r+0x1e>
 801c9ac:	6023      	str	r3, [r4, #0]
 801c9ae:	bd38      	pop	{r3, r4, r5, pc}
 801c9b0:	2000c8d8 	.word	0x2000c8d8

0801c9b4 <_sbrk_r>:
 801c9b4:	b538      	push	{r3, r4, r5, lr}
 801c9b6:	4d06      	ldr	r5, [pc, #24]	; (801c9d0 <_sbrk_r+0x1c>)
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	4604      	mov	r4, r0
 801c9bc:	4608      	mov	r0, r1
 801c9be:	602b      	str	r3, [r5, #0]
 801c9c0:	f7e5 f8b0 	bl	8001b24 <_sbrk>
 801c9c4:	1c43      	adds	r3, r0, #1
 801c9c6:	d102      	bne.n	801c9ce <_sbrk_r+0x1a>
 801c9c8:	682b      	ldr	r3, [r5, #0]
 801c9ca:	b103      	cbz	r3, 801c9ce <_sbrk_r+0x1a>
 801c9cc:	6023      	str	r3, [r4, #0]
 801c9ce:	bd38      	pop	{r3, r4, r5, pc}
 801c9d0:	2000c8d8 	.word	0x2000c8d8

0801c9d4 <_write_r>:
 801c9d4:	b538      	push	{r3, r4, r5, lr}
 801c9d6:	4d07      	ldr	r5, [pc, #28]	; (801c9f4 <_write_r+0x20>)
 801c9d8:	4604      	mov	r4, r0
 801c9da:	4608      	mov	r0, r1
 801c9dc:	4611      	mov	r1, r2
 801c9de:	2200      	movs	r2, #0
 801c9e0:	602a      	str	r2, [r5, #0]
 801c9e2:	461a      	mov	r2, r3
 801c9e4:	f7e5 f84d 	bl	8001a82 <_write>
 801c9e8:	1c43      	adds	r3, r0, #1
 801c9ea:	d102      	bne.n	801c9f2 <_write_r+0x1e>
 801c9ec:	682b      	ldr	r3, [r5, #0]
 801c9ee:	b103      	cbz	r3, 801c9f2 <_write_r+0x1e>
 801c9f0:	6023      	str	r3, [r4, #0]
 801c9f2:	bd38      	pop	{r3, r4, r5, pc}
 801c9f4:	2000c8d8 	.word	0x2000c8d8

0801c9f8 <__libc_init_array>:
 801c9f8:	b570      	push	{r4, r5, r6, lr}
 801c9fa:	4d0d      	ldr	r5, [pc, #52]	; (801ca30 <__libc_init_array+0x38>)
 801c9fc:	4c0d      	ldr	r4, [pc, #52]	; (801ca34 <__libc_init_array+0x3c>)
 801c9fe:	1b64      	subs	r4, r4, r5
 801ca00:	10a4      	asrs	r4, r4, #2
 801ca02:	2600      	movs	r6, #0
 801ca04:	42a6      	cmp	r6, r4
 801ca06:	d109      	bne.n	801ca1c <__libc_init_array+0x24>
 801ca08:	4d0b      	ldr	r5, [pc, #44]	; (801ca38 <__libc_init_array+0x40>)
 801ca0a:	4c0c      	ldr	r4, [pc, #48]	; (801ca3c <__libc_init_array+0x44>)
 801ca0c:	f000 fe56 	bl	801d6bc <_init>
 801ca10:	1b64      	subs	r4, r4, r5
 801ca12:	10a4      	asrs	r4, r4, #2
 801ca14:	2600      	movs	r6, #0
 801ca16:	42a6      	cmp	r6, r4
 801ca18:	d105      	bne.n	801ca26 <__libc_init_array+0x2e>
 801ca1a:	bd70      	pop	{r4, r5, r6, pc}
 801ca1c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ca20:	4798      	blx	r3
 801ca22:	3601      	adds	r6, #1
 801ca24:	e7ee      	b.n	801ca04 <__libc_init_array+0xc>
 801ca26:	f855 3b04 	ldr.w	r3, [r5], #4
 801ca2a:	4798      	blx	r3
 801ca2c:	3601      	adds	r6, #1
 801ca2e:	e7f2      	b.n	801ca16 <__libc_init_array+0x1e>
 801ca30:	08021934 	.word	0x08021934
 801ca34:	08021934 	.word	0x08021934
 801ca38:	08021934 	.word	0x08021934
 801ca3c:	08021938 	.word	0x08021938

0801ca40 <__retarget_lock_init_recursive>:
 801ca40:	4770      	bx	lr

0801ca42 <__retarget_lock_acquire_recursive>:
 801ca42:	4770      	bx	lr

0801ca44 <__retarget_lock_release_recursive>:
 801ca44:	4770      	bx	lr

0801ca46 <memcpy>:
 801ca46:	440a      	add	r2, r1
 801ca48:	4291      	cmp	r1, r2
 801ca4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ca4e:	d100      	bne.n	801ca52 <memcpy+0xc>
 801ca50:	4770      	bx	lr
 801ca52:	b510      	push	{r4, lr}
 801ca54:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ca58:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ca5c:	4291      	cmp	r1, r2
 801ca5e:	d1f9      	bne.n	801ca54 <memcpy+0xe>
 801ca60:	bd10      	pop	{r4, pc}

0801ca62 <abort>:
 801ca62:	b508      	push	{r3, lr}
 801ca64:	2006      	movs	r0, #6
 801ca66:	f000 fdb3 	bl	801d5d0 <raise>
 801ca6a:	2001      	movs	r0, #1
 801ca6c:	f7e4 ffe2 	bl	8001a34 <_exit>

0801ca70 <_free_r>:
 801ca70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ca72:	2900      	cmp	r1, #0
 801ca74:	d044      	beq.n	801cb00 <_free_r+0x90>
 801ca76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca7a:	9001      	str	r0, [sp, #4]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	f1a1 0404 	sub.w	r4, r1, #4
 801ca82:	bfb8      	it	lt
 801ca84:	18e4      	addlt	r4, r4, r3
 801ca86:	f7ff fc27 	bl	801c2d8 <__malloc_lock>
 801ca8a:	4a1e      	ldr	r2, [pc, #120]	; (801cb04 <_free_r+0x94>)
 801ca8c:	9801      	ldr	r0, [sp, #4]
 801ca8e:	6813      	ldr	r3, [r2, #0]
 801ca90:	b933      	cbnz	r3, 801caa0 <_free_r+0x30>
 801ca92:	6063      	str	r3, [r4, #4]
 801ca94:	6014      	str	r4, [r2, #0]
 801ca96:	b003      	add	sp, #12
 801ca98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ca9c:	f7ff bc22 	b.w	801c2e4 <__malloc_unlock>
 801caa0:	42a3      	cmp	r3, r4
 801caa2:	d908      	bls.n	801cab6 <_free_r+0x46>
 801caa4:	6825      	ldr	r5, [r4, #0]
 801caa6:	1961      	adds	r1, r4, r5
 801caa8:	428b      	cmp	r3, r1
 801caaa:	bf01      	itttt	eq
 801caac:	6819      	ldreq	r1, [r3, #0]
 801caae:	685b      	ldreq	r3, [r3, #4]
 801cab0:	1949      	addeq	r1, r1, r5
 801cab2:	6021      	streq	r1, [r4, #0]
 801cab4:	e7ed      	b.n	801ca92 <_free_r+0x22>
 801cab6:	461a      	mov	r2, r3
 801cab8:	685b      	ldr	r3, [r3, #4]
 801caba:	b10b      	cbz	r3, 801cac0 <_free_r+0x50>
 801cabc:	42a3      	cmp	r3, r4
 801cabe:	d9fa      	bls.n	801cab6 <_free_r+0x46>
 801cac0:	6811      	ldr	r1, [r2, #0]
 801cac2:	1855      	adds	r5, r2, r1
 801cac4:	42a5      	cmp	r5, r4
 801cac6:	d10b      	bne.n	801cae0 <_free_r+0x70>
 801cac8:	6824      	ldr	r4, [r4, #0]
 801caca:	4421      	add	r1, r4
 801cacc:	1854      	adds	r4, r2, r1
 801cace:	42a3      	cmp	r3, r4
 801cad0:	6011      	str	r1, [r2, #0]
 801cad2:	d1e0      	bne.n	801ca96 <_free_r+0x26>
 801cad4:	681c      	ldr	r4, [r3, #0]
 801cad6:	685b      	ldr	r3, [r3, #4]
 801cad8:	6053      	str	r3, [r2, #4]
 801cada:	440c      	add	r4, r1
 801cadc:	6014      	str	r4, [r2, #0]
 801cade:	e7da      	b.n	801ca96 <_free_r+0x26>
 801cae0:	d902      	bls.n	801cae8 <_free_r+0x78>
 801cae2:	230c      	movs	r3, #12
 801cae4:	6003      	str	r3, [r0, #0]
 801cae6:	e7d6      	b.n	801ca96 <_free_r+0x26>
 801cae8:	6825      	ldr	r5, [r4, #0]
 801caea:	1961      	adds	r1, r4, r5
 801caec:	428b      	cmp	r3, r1
 801caee:	bf04      	itt	eq
 801caf0:	6819      	ldreq	r1, [r3, #0]
 801caf2:	685b      	ldreq	r3, [r3, #4]
 801caf4:	6063      	str	r3, [r4, #4]
 801caf6:	bf04      	itt	eq
 801caf8:	1949      	addeq	r1, r1, r5
 801cafa:	6021      	streq	r1, [r4, #0]
 801cafc:	6054      	str	r4, [r2, #4]
 801cafe:	e7ca      	b.n	801ca96 <_free_r+0x26>
 801cb00:	b003      	add	sp, #12
 801cb02:	bd30      	pop	{r4, r5, pc}
 801cb04:	2000c794 	.word	0x2000c794

0801cb08 <__ssputs_r>:
 801cb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb0c:	688e      	ldr	r6, [r1, #8]
 801cb0e:	461f      	mov	r7, r3
 801cb10:	42be      	cmp	r6, r7
 801cb12:	680b      	ldr	r3, [r1, #0]
 801cb14:	4682      	mov	sl, r0
 801cb16:	460c      	mov	r4, r1
 801cb18:	4690      	mov	r8, r2
 801cb1a:	d82c      	bhi.n	801cb76 <__ssputs_r+0x6e>
 801cb1c:	898a      	ldrh	r2, [r1, #12]
 801cb1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cb22:	d026      	beq.n	801cb72 <__ssputs_r+0x6a>
 801cb24:	6965      	ldr	r5, [r4, #20]
 801cb26:	6909      	ldr	r1, [r1, #16]
 801cb28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cb2c:	eba3 0901 	sub.w	r9, r3, r1
 801cb30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cb34:	1c7b      	adds	r3, r7, #1
 801cb36:	444b      	add	r3, r9
 801cb38:	106d      	asrs	r5, r5, #1
 801cb3a:	429d      	cmp	r5, r3
 801cb3c:	bf38      	it	cc
 801cb3e:	461d      	movcc	r5, r3
 801cb40:	0553      	lsls	r3, r2, #21
 801cb42:	d527      	bpl.n	801cb94 <__ssputs_r+0x8c>
 801cb44:	4629      	mov	r1, r5
 801cb46:	f7ff fb47 	bl	801c1d8 <_malloc_r>
 801cb4a:	4606      	mov	r6, r0
 801cb4c:	b360      	cbz	r0, 801cba8 <__ssputs_r+0xa0>
 801cb4e:	6921      	ldr	r1, [r4, #16]
 801cb50:	464a      	mov	r2, r9
 801cb52:	f7ff ff78 	bl	801ca46 <memcpy>
 801cb56:	89a3      	ldrh	r3, [r4, #12]
 801cb58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cb60:	81a3      	strh	r3, [r4, #12]
 801cb62:	6126      	str	r6, [r4, #16]
 801cb64:	6165      	str	r5, [r4, #20]
 801cb66:	444e      	add	r6, r9
 801cb68:	eba5 0509 	sub.w	r5, r5, r9
 801cb6c:	6026      	str	r6, [r4, #0]
 801cb6e:	60a5      	str	r5, [r4, #8]
 801cb70:	463e      	mov	r6, r7
 801cb72:	42be      	cmp	r6, r7
 801cb74:	d900      	bls.n	801cb78 <__ssputs_r+0x70>
 801cb76:	463e      	mov	r6, r7
 801cb78:	6820      	ldr	r0, [r4, #0]
 801cb7a:	4632      	mov	r2, r6
 801cb7c:	4641      	mov	r1, r8
 801cb7e:	f7ff fe3f 	bl	801c800 <memmove>
 801cb82:	68a3      	ldr	r3, [r4, #8]
 801cb84:	1b9b      	subs	r3, r3, r6
 801cb86:	60a3      	str	r3, [r4, #8]
 801cb88:	6823      	ldr	r3, [r4, #0]
 801cb8a:	4433      	add	r3, r6
 801cb8c:	6023      	str	r3, [r4, #0]
 801cb8e:	2000      	movs	r0, #0
 801cb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb94:	462a      	mov	r2, r5
 801cb96:	f000 fd59 	bl	801d64c <_realloc_r>
 801cb9a:	4606      	mov	r6, r0
 801cb9c:	2800      	cmp	r0, #0
 801cb9e:	d1e0      	bne.n	801cb62 <__ssputs_r+0x5a>
 801cba0:	6921      	ldr	r1, [r4, #16]
 801cba2:	4650      	mov	r0, sl
 801cba4:	f7ff ff64 	bl	801ca70 <_free_r>
 801cba8:	230c      	movs	r3, #12
 801cbaa:	f8ca 3000 	str.w	r3, [sl]
 801cbae:	89a3      	ldrh	r3, [r4, #12]
 801cbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cbb4:	81a3      	strh	r3, [r4, #12]
 801cbb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cbba:	e7e9      	b.n	801cb90 <__ssputs_r+0x88>

0801cbbc <_svfiprintf_r>:
 801cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbc0:	4698      	mov	r8, r3
 801cbc2:	898b      	ldrh	r3, [r1, #12]
 801cbc4:	061b      	lsls	r3, r3, #24
 801cbc6:	b09d      	sub	sp, #116	; 0x74
 801cbc8:	4607      	mov	r7, r0
 801cbca:	460d      	mov	r5, r1
 801cbcc:	4614      	mov	r4, r2
 801cbce:	d50e      	bpl.n	801cbee <_svfiprintf_r+0x32>
 801cbd0:	690b      	ldr	r3, [r1, #16]
 801cbd2:	b963      	cbnz	r3, 801cbee <_svfiprintf_r+0x32>
 801cbd4:	2140      	movs	r1, #64	; 0x40
 801cbd6:	f7ff faff 	bl	801c1d8 <_malloc_r>
 801cbda:	6028      	str	r0, [r5, #0]
 801cbdc:	6128      	str	r0, [r5, #16]
 801cbde:	b920      	cbnz	r0, 801cbea <_svfiprintf_r+0x2e>
 801cbe0:	230c      	movs	r3, #12
 801cbe2:	603b      	str	r3, [r7, #0]
 801cbe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cbe8:	e0d0      	b.n	801cd8c <_svfiprintf_r+0x1d0>
 801cbea:	2340      	movs	r3, #64	; 0x40
 801cbec:	616b      	str	r3, [r5, #20]
 801cbee:	2300      	movs	r3, #0
 801cbf0:	9309      	str	r3, [sp, #36]	; 0x24
 801cbf2:	2320      	movs	r3, #32
 801cbf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cbf8:	f8cd 800c 	str.w	r8, [sp, #12]
 801cbfc:	2330      	movs	r3, #48	; 0x30
 801cbfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801cda4 <_svfiprintf_r+0x1e8>
 801cc02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cc06:	f04f 0901 	mov.w	r9, #1
 801cc0a:	4623      	mov	r3, r4
 801cc0c:	469a      	mov	sl, r3
 801cc0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cc12:	b10a      	cbz	r2, 801cc18 <_svfiprintf_r+0x5c>
 801cc14:	2a25      	cmp	r2, #37	; 0x25
 801cc16:	d1f9      	bne.n	801cc0c <_svfiprintf_r+0x50>
 801cc18:	ebba 0b04 	subs.w	fp, sl, r4
 801cc1c:	d00b      	beq.n	801cc36 <_svfiprintf_r+0x7a>
 801cc1e:	465b      	mov	r3, fp
 801cc20:	4622      	mov	r2, r4
 801cc22:	4629      	mov	r1, r5
 801cc24:	4638      	mov	r0, r7
 801cc26:	f7ff ff6f 	bl	801cb08 <__ssputs_r>
 801cc2a:	3001      	adds	r0, #1
 801cc2c:	f000 80a9 	beq.w	801cd82 <_svfiprintf_r+0x1c6>
 801cc30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cc32:	445a      	add	r2, fp
 801cc34:	9209      	str	r2, [sp, #36]	; 0x24
 801cc36:	f89a 3000 	ldrb.w	r3, [sl]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	f000 80a1 	beq.w	801cd82 <_svfiprintf_r+0x1c6>
 801cc40:	2300      	movs	r3, #0
 801cc42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cc46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cc4a:	f10a 0a01 	add.w	sl, sl, #1
 801cc4e:	9304      	str	r3, [sp, #16]
 801cc50:	9307      	str	r3, [sp, #28]
 801cc52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cc56:	931a      	str	r3, [sp, #104]	; 0x68
 801cc58:	4654      	mov	r4, sl
 801cc5a:	2205      	movs	r2, #5
 801cc5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc60:	4850      	ldr	r0, [pc, #320]	; (801cda4 <_svfiprintf_r+0x1e8>)
 801cc62:	f7e3 fabd 	bl	80001e0 <memchr>
 801cc66:	9a04      	ldr	r2, [sp, #16]
 801cc68:	b9d8      	cbnz	r0, 801cca2 <_svfiprintf_r+0xe6>
 801cc6a:	06d0      	lsls	r0, r2, #27
 801cc6c:	bf44      	itt	mi
 801cc6e:	2320      	movmi	r3, #32
 801cc70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cc74:	0711      	lsls	r1, r2, #28
 801cc76:	bf44      	itt	mi
 801cc78:	232b      	movmi	r3, #43	; 0x2b
 801cc7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cc7e:	f89a 3000 	ldrb.w	r3, [sl]
 801cc82:	2b2a      	cmp	r3, #42	; 0x2a
 801cc84:	d015      	beq.n	801ccb2 <_svfiprintf_r+0xf6>
 801cc86:	9a07      	ldr	r2, [sp, #28]
 801cc88:	4654      	mov	r4, sl
 801cc8a:	2000      	movs	r0, #0
 801cc8c:	f04f 0c0a 	mov.w	ip, #10
 801cc90:	4621      	mov	r1, r4
 801cc92:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cc96:	3b30      	subs	r3, #48	; 0x30
 801cc98:	2b09      	cmp	r3, #9
 801cc9a:	d94d      	bls.n	801cd38 <_svfiprintf_r+0x17c>
 801cc9c:	b1b0      	cbz	r0, 801cccc <_svfiprintf_r+0x110>
 801cc9e:	9207      	str	r2, [sp, #28]
 801cca0:	e014      	b.n	801cccc <_svfiprintf_r+0x110>
 801cca2:	eba0 0308 	sub.w	r3, r0, r8
 801cca6:	fa09 f303 	lsl.w	r3, r9, r3
 801ccaa:	4313      	orrs	r3, r2
 801ccac:	9304      	str	r3, [sp, #16]
 801ccae:	46a2      	mov	sl, r4
 801ccb0:	e7d2      	b.n	801cc58 <_svfiprintf_r+0x9c>
 801ccb2:	9b03      	ldr	r3, [sp, #12]
 801ccb4:	1d19      	adds	r1, r3, #4
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	9103      	str	r1, [sp, #12]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	bfbb      	ittet	lt
 801ccbe:	425b      	neglt	r3, r3
 801ccc0:	f042 0202 	orrlt.w	r2, r2, #2
 801ccc4:	9307      	strge	r3, [sp, #28]
 801ccc6:	9307      	strlt	r3, [sp, #28]
 801ccc8:	bfb8      	it	lt
 801ccca:	9204      	strlt	r2, [sp, #16]
 801cccc:	7823      	ldrb	r3, [r4, #0]
 801ccce:	2b2e      	cmp	r3, #46	; 0x2e
 801ccd0:	d10c      	bne.n	801ccec <_svfiprintf_r+0x130>
 801ccd2:	7863      	ldrb	r3, [r4, #1]
 801ccd4:	2b2a      	cmp	r3, #42	; 0x2a
 801ccd6:	d134      	bne.n	801cd42 <_svfiprintf_r+0x186>
 801ccd8:	9b03      	ldr	r3, [sp, #12]
 801ccda:	1d1a      	adds	r2, r3, #4
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	9203      	str	r2, [sp, #12]
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	bfb8      	it	lt
 801cce4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cce8:	3402      	adds	r4, #2
 801ccea:	9305      	str	r3, [sp, #20]
 801ccec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801cdb4 <_svfiprintf_r+0x1f8>
 801ccf0:	7821      	ldrb	r1, [r4, #0]
 801ccf2:	2203      	movs	r2, #3
 801ccf4:	4650      	mov	r0, sl
 801ccf6:	f7e3 fa73 	bl	80001e0 <memchr>
 801ccfa:	b138      	cbz	r0, 801cd0c <_svfiprintf_r+0x150>
 801ccfc:	9b04      	ldr	r3, [sp, #16]
 801ccfe:	eba0 000a 	sub.w	r0, r0, sl
 801cd02:	2240      	movs	r2, #64	; 0x40
 801cd04:	4082      	lsls	r2, r0
 801cd06:	4313      	orrs	r3, r2
 801cd08:	3401      	adds	r4, #1
 801cd0a:	9304      	str	r3, [sp, #16]
 801cd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd10:	4825      	ldr	r0, [pc, #148]	; (801cda8 <_svfiprintf_r+0x1ec>)
 801cd12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cd16:	2206      	movs	r2, #6
 801cd18:	f7e3 fa62 	bl	80001e0 <memchr>
 801cd1c:	2800      	cmp	r0, #0
 801cd1e:	d038      	beq.n	801cd92 <_svfiprintf_r+0x1d6>
 801cd20:	4b22      	ldr	r3, [pc, #136]	; (801cdac <_svfiprintf_r+0x1f0>)
 801cd22:	bb1b      	cbnz	r3, 801cd6c <_svfiprintf_r+0x1b0>
 801cd24:	9b03      	ldr	r3, [sp, #12]
 801cd26:	3307      	adds	r3, #7
 801cd28:	f023 0307 	bic.w	r3, r3, #7
 801cd2c:	3308      	adds	r3, #8
 801cd2e:	9303      	str	r3, [sp, #12]
 801cd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd32:	4433      	add	r3, r6
 801cd34:	9309      	str	r3, [sp, #36]	; 0x24
 801cd36:	e768      	b.n	801cc0a <_svfiprintf_r+0x4e>
 801cd38:	fb0c 3202 	mla	r2, ip, r2, r3
 801cd3c:	460c      	mov	r4, r1
 801cd3e:	2001      	movs	r0, #1
 801cd40:	e7a6      	b.n	801cc90 <_svfiprintf_r+0xd4>
 801cd42:	2300      	movs	r3, #0
 801cd44:	3401      	adds	r4, #1
 801cd46:	9305      	str	r3, [sp, #20]
 801cd48:	4619      	mov	r1, r3
 801cd4a:	f04f 0c0a 	mov.w	ip, #10
 801cd4e:	4620      	mov	r0, r4
 801cd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cd54:	3a30      	subs	r2, #48	; 0x30
 801cd56:	2a09      	cmp	r2, #9
 801cd58:	d903      	bls.n	801cd62 <_svfiprintf_r+0x1a6>
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d0c6      	beq.n	801ccec <_svfiprintf_r+0x130>
 801cd5e:	9105      	str	r1, [sp, #20]
 801cd60:	e7c4      	b.n	801ccec <_svfiprintf_r+0x130>
 801cd62:	fb0c 2101 	mla	r1, ip, r1, r2
 801cd66:	4604      	mov	r4, r0
 801cd68:	2301      	movs	r3, #1
 801cd6a:	e7f0      	b.n	801cd4e <_svfiprintf_r+0x192>
 801cd6c:	ab03      	add	r3, sp, #12
 801cd6e:	9300      	str	r3, [sp, #0]
 801cd70:	462a      	mov	r2, r5
 801cd72:	4b0f      	ldr	r3, [pc, #60]	; (801cdb0 <_svfiprintf_r+0x1f4>)
 801cd74:	a904      	add	r1, sp, #16
 801cd76:	4638      	mov	r0, r7
 801cd78:	f3af 8000 	nop.w
 801cd7c:	1c42      	adds	r2, r0, #1
 801cd7e:	4606      	mov	r6, r0
 801cd80:	d1d6      	bne.n	801cd30 <_svfiprintf_r+0x174>
 801cd82:	89ab      	ldrh	r3, [r5, #12]
 801cd84:	065b      	lsls	r3, r3, #25
 801cd86:	f53f af2d 	bmi.w	801cbe4 <_svfiprintf_r+0x28>
 801cd8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cd8c:	b01d      	add	sp, #116	; 0x74
 801cd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd92:	ab03      	add	r3, sp, #12
 801cd94:	9300      	str	r3, [sp, #0]
 801cd96:	462a      	mov	r2, r5
 801cd98:	4b05      	ldr	r3, [pc, #20]	; (801cdb0 <_svfiprintf_r+0x1f4>)
 801cd9a:	a904      	add	r1, sp, #16
 801cd9c:	4638      	mov	r0, r7
 801cd9e:	f000 f9bd 	bl	801d11c <_printf_i>
 801cda2:	e7eb      	b.n	801cd7c <_svfiprintf_r+0x1c0>
 801cda4:	080218f7 	.word	0x080218f7
 801cda8:	08021901 	.word	0x08021901
 801cdac:	00000000 	.word	0x00000000
 801cdb0:	0801cb09 	.word	0x0801cb09
 801cdb4:	080218fd 	.word	0x080218fd

0801cdb8 <__sfputc_r>:
 801cdb8:	6893      	ldr	r3, [r2, #8]
 801cdba:	3b01      	subs	r3, #1
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	b410      	push	{r4}
 801cdc0:	6093      	str	r3, [r2, #8]
 801cdc2:	da08      	bge.n	801cdd6 <__sfputc_r+0x1e>
 801cdc4:	6994      	ldr	r4, [r2, #24]
 801cdc6:	42a3      	cmp	r3, r4
 801cdc8:	db01      	blt.n	801cdce <__sfputc_r+0x16>
 801cdca:	290a      	cmp	r1, #10
 801cdcc:	d103      	bne.n	801cdd6 <__sfputc_r+0x1e>
 801cdce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cdd2:	f7ff bc70 	b.w	801c6b6 <__swbuf_r>
 801cdd6:	6813      	ldr	r3, [r2, #0]
 801cdd8:	1c58      	adds	r0, r3, #1
 801cdda:	6010      	str	r0, [r2, #0]
 801cddc:	7019      	strb	r1, [r3, #0]
 801cdde:	4608      	mov	r0, r1
 801cde0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cde4:	4770      	bx	lr

0801cde6 <__sfputs_r>:
 801cde6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cde8:	4606      	mov	r6, r0
 801cdea:	460f      	mov	r7, r1
 801cdec:	4614      	mov	r4, r2
 801cdee:	18d5      	adds	r5, r2, r3
 801cdf0:	42ac      	cmp	r4, r5
 801cdf2:	d101      	bne.n	801cdf8 <__sfputs_r+0x12>
 801cdf4:	2000      	movs	r0, #0
 801cdf6:	e007      	b.n	801ce08 <__sfputs_r+0x22>
 801cdf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cdfc:	463a      	mov	r2, r7
 801cdfe:	4630      	mov	r0, r6
 801ce00:	f7ff ffda 	bl	801cdb8 <__sfputc_r>
 801ce04:	1c43      	adds	r3, r0, #1
 801ce06:	d1f3      	bne.n	801cdf0 <__sfputs_r+0xa>
 801ce08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ce0c <_vfiprintf_r>:
 801ce0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce10:	460d      	mov	r5, r1
 801ce12:	b09d      	sub	sp, #116	; 0x74
 801ce14:	4614      	mov	r4, r2
 801ce16:	4698      	mov	r8, r3
 801ce18:	4606      	mov	r6, r0
 801ce1a:	b118      	cbz	r0, 801ce24 <_vfiprintf_r+0x18>
 801ce1c:	6a03      	ldr	r3, [r0, #32]
 801ce1e:	b90b      	cbnz	r3, 801ce24 <_vfiprintf_r+0x18>
 801ce20:	f7ff fb30 	bl	801c484 <__sinit>
 801ce24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ce26:	07d9      	lsls	r1, r3, #31
 801ce28:	d405      	bmi.n	801ce36 <_vfiprintf_r+0x2a>
 801ce2a:	89ab      	ldrh	r3, [r5, #12]
 801ce2c:	059a      	lsls	r2, r3, #22
 801ce2e:	d402      	bmi.n	801ce36 <_vfiprintf_r+0x2a>
 801ce30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ce32:	f7ff fe06 	bl	801ca42 <__retarget_lock_acquire_recursive>
 801ce36:	89ab      	ldrh	r3, [r5, #12]
 801ce38:	071b      	lsls	r3, r3, #28
 801ce3a:	d501      	bpl.n	801ce40 <_vfiprintf_r+0x34>
 801ce3c:	692b      	ldr	r3, [r5, #16]
 801ce3e:	b99b      	cbnz	r3, 801ce68 <_vfiprintf_r+0x5c>
 801ce40:	4629      	mov	r1, r5
 801ce42:	4630      	mov	r0, r6
 801ce44:	f7ff fc74 	bl	801c730 <__swsetup_r>
 801ce48:	b170      	cbz	r0, 801ce68 <_vfiprintf_r+0x5c>
 801ce4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ce4c:	07dc      	lsls	r4, r3, #31
 801ce4e:	d504      	bpl.n	801ce5a <_vfiprintf_r+0x4e>
 801ce50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce54:	b01d      	add	sp, #116	; 0x74
 801ce56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce5a:	89ab      	ldrh	r3, [r5, #12]
 801ce5c:	0598      	lsls	r0, r3, #22
 801ce5e:	d4f7      	bmi.n	801ce50 <_vfiprintf_r+0x44>
 801ce60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ce62:	f7ff fdef 	bl	801ca44 <__retarget_lock_release_recursive>
 801ce66:	e7f3      	b.n	801ce50 <_vfiprintf_r+0x44>
 801ce68:	2300      	movs	r3, #0
 801ce6a:	9309      	str	r3, [sp, #36]	; 0x24
 801ce6c:	2320      	movs	r3, #32
 801ce6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ce72:	f8cd 800c 	str.w	r8, [sp, #12]
 801ce76:	2330      	movs	r3, #48	; 0x30
 801ce78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d02c <_vfiprintf_r+0x220>
 801ce7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ce80:	f04f 0901 	mov.w	r9, #1
 801ce84:	4623      	mov	r3, r4
 801ce86:	469a      	mov	sl, r3
 801ce88:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce8c:	b10a      	cbz	r2, 801ce92 <_vfiprintf_r+0x86>
 801ce8e:	2a25      	cmp	r2, #37	; 0x25
 801ce90:	d1f9      	bne.n	801ce86 <_vfiprintf_r+0x7a>
 801ce92:	ebba 0b04 	subs.w	fp, sl, r4
 801ce96:	d00b      	beq.n	801ceb0 <_vfiprintf_r+0xa4>
 801ce98:	465b      	mov	r3, fp
 801ce9a:	4622      	mov	r2, r4
 801ce9c:	4629      	mov	r1, r5
 801ce9e:	4630      	mov	r0, r6
 801cea0:	f7ff ffa1 	bl	801cde6 <__sfputs_r>
 801cea4:	3001      	adds	r0, #1
 801cea6:	f000 80a9 	beq.w	801cffc <_vfiprintf_r+0x1f0>
 801ceaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ceac:	445a      	add	r2, fp
 801ceae:	9209      	str	r2, [sp, #36]	; 0x24
 801ceb0:	f89a 3000 	ldrb.w	r3, [sl]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	f000 80a1 	beq.w	801cffc <_vfiprintf_r+0x1f0>
 801ceba:	2300      	movs	r3, #0
 801cebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cec4:	f10a 0a01 	add.w	sl, sl, #1
 801cec8:	9304      	str	r3, [sp, #16]
 801ceca:	9307      	str	r3, [sp, #28]
 801cecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ced0:	931a      	str	r3, [sp, #104]	; 0x68
 801ced2:	4654      	mov	r4, sl
 801ced4:	2205      	movs	r2, #5
 801ced6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ceda:	4854      	ldr	r0, [pc, #336]	; (801d02c <_vfiprintf_r+0x220>)
 801cedc:	f7e3 f980 	bl	80001e0 <memchr>
 801cee0:	9a04      	ldr	r2, [sp, #16]
 801cee2:	b9d8      	cbnz	r0, 801cf1c <_vfiprintf_r+0x110>
 801cee4:	06d1      	lsls	r1, r2, #27
 801cee6:	bf44      	itt	mi
 801cee8:	2320      	movmi	r3, #32
 801ceea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ceee:	0713      	lsls	r3, r2, #28
 801cef0:	bf44      	itt	mi
 801cef2:	232b      	movmi	r3, #43	; 0x2b
 801cef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cef8:	f89a 3000 	ldrb.w	r3, [sl]
 801cefc:	2b2a      	cmp	r3, #42	; 0x2a
 801cefe:	d015      	beq.n	801cf2c <_vfiprintf_r+0x120>
 801cf00:	9a07      	ldr	r2, [sp, #28]
 801cf02:	4654      	mov	r4, sl
 801cf04:	2000      	movs	r0, #0
 801cf06:	f04f 0c0a 	mov.w	ip, #10
 801cf0a:	4621      	mov	r1, r4
 801cf0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf10:	3b30      	subs	r3, #48	; 0x30
 801cf12:	2b09      	cmp	r3, #9
 801cf14:	d94d      	bls.n	801cfb2 <_vfiprintf_r+0x1a6>
 801cf16:	b1b0      	cbz	r0, 801cf46 <_vfiprintf_r+0x13a>
 801cf18:	9207      	str	r2, [sp, #28]
 801cf1a:	e014      	b.n	801cf46 <_vfiprintf_r+0x13a>
 801cf1c:	eba0 0308 	sub.w	r3, r0, r8
 801cf20:	fa09 f303 	lsl.w	r3, r9, r3
 801cf24:	4313      	orrs	r3, r2
 801cf26:	9304      	str	r3, [sp, #16]
 801cf28:	46a2      	mov	sl, r4
 801cf2a:	e7d2      	b.n	801ced2 <_vfiprintf_r+0xc6>
 801cf2c:	9b03      	ldr	r3, [sp, #12]
 801cf2e:	1d19      	adds	r1, r3, #4
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	9103      	str	r1, [sp, #12]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	bfbb      	ittet	lt
 801cf38:	425b      	neglt	r3, r3
 801cf3a:	f042 0202 	orrlt.w	r2, r2, #2
 801cf3e:	9307      	strge	r3, [sp, #28]
 801cf40:	9307      	strlt	r3, [sp, #28]
 801cf42:	bfb8      	it	lt
 801cf44:	9204      	strlt	r2, [sp, #16]
 801cf46:	7823      	ldrb	r3, [r4, #0]
 801cf48:	2b2e      	cmp	r3, #46	; 0x2e
 801cf4a:	d10c      	bne.n	801cf66 <_vfiprintf_r+0x15a>
 801cf4c:	7863      	ldrb	r3, [r4, #1]
 801cf4e:	2b2a      	cmp	r3, #42	; 0x2a
 801cf50:	d134      	bne.n	801cfbc <_vfiprintf_r+0x1b0>
 801cf52:	9b03      	ldr	r3, [sp, #12]
 801cf54:	1d1a      	adds	r2, r3, #4
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	9203      	str	r2, [sp, #12]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	bfb8      	it	lt
 801cf5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cf62:	3402      	adds	r4, #2
 801cf64:	9305      	str	r3, [sp, #20]
 801cf66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d03c <_vfiprintf_r+0x230>
 801cf6a:	7821      	ldrb	r1, [r4, #0]
 801cf6c:	2203      	movs	r2, #3
 801cf6e:	4650      	mov	r0, sl
 801cf70:	f7e3 f936 	bl	80001e0 <memchr>
 801cf74:	b138      	cbz	r0, 801cf86 <_vfiprintf_r+0x17a>
 801cf76:	9b04      	ldr	r3, [sp, #16]
 801cf78:	eba0 000a 	sub.w	r0, r0, sl
 801cf7c:	2240      	movs	r2, #64	; 0x40
 801cf7e:	4082      	lsls	r2, r0
 801cf80:	4313      	orrs	r3, r2
 801cf82:	3401      	adds	r4, #1
 801cf84:	9304      	str	r3, [sp, #16]
 801cf86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf8a:	4829      	ldr	r0, [pc, #164]	; (801d030 <_vfiprintf_r+0x224>)
 801cf8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cf90:	2206      	movs	r2, #6
 801cf92:	f7e3 f925 	bl	80001e0 <memchr>
 801cf96:	2800      	cmp	r0, #0
 801cf98:	d03f      	beq.n	801d01a <_vfiprintf_r+0x20e>
 801cf9a:	4b26      	ldr	r3, [pc, #152]	; (801d034 <_vfiprintf_r+0x228>)
 801cf9c:	bb1b      	cbnz	r3, 801cfe6 <_vfiprintf_r+0x1da>
 801cf9e:	9b03      	ldr	r3, [sp, #12]
 801cfa0:	3307      	adds	r3, #7
 801cfa2:	f023 0307 	bic.w	r3, r3, #7
 801cfa6:	3308      	adds	r3, #8
 801cfa8:	9303      	str	r3, [sp, #12]
 801cfaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfac:	443b      	add	r3, r7
 801cfae:	9309      	str	r3, [sp, #36]	; 0x24
 801cfb0:	e768      	b.n	801ce84 <_vfiprintf_r+0x78>
 801cfb2:	fb0c 3202 	mla	r2, ip, r2, r3
 801cfb6:	460c      	mov	r4, r1
 801cfb8:	2001      	movs	r0, #1
 801cfba:	e7a6      	b.n	801cf0a <_vfiprintf_r+0xfe>
 801cfbc:	2300      	movs	r3, #0
 801cfbe:	3401      	adds	r4, #1
 801cfc0:	9305      	str	r3, [sp, #20]
 801cfc2:	4619      	mov	r1, r3
 801cfc4:	f04f 0c0a 	mov.w	ip, #10
 801cfc8:	4620      	mov	r0, r4
 801cfca:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cfce:	3a30      	subs	r2, #48	; 0x30
 801cfd0:	2a09      	cmp	r2, #9
 801cfd2:	d903      	bls.n	801cfdc <_vfiprintf_r+0x1d0>
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d0c6      	beq.n	801cf66 <_vfiprintf_r+0x15a>
 801cfd8:	9105      	str	r1, [sp, #20]
 801cfda:	e7c4      	b.n	801cf66 <_vfiprintf_r+0x15a>
 801cfdc:	fb0c 2101 	mla	r1, ip, r1, r2
 801cfe0:	4604      	mov	r4, r0
 801cfe2:	2301      	movs	r3, #1
 801cfe4:	e7f0      	b.n	801cfc8 <_vfiprintf_r+0x1bc>
 801cfe6:	ab03      	add	r3, sp, #12
 801cfe8:	9300      	str	r3, [sp, #0]
 801cfea:	462a      	mov	r2, r5
 801cfec:	4b12      	ldr	r3, [pc, #72]	; (801d038 <_vfiprintf_r+0x22c>)
 801cfee:	a904      	add	r1, sp, #16
 801cff0:	4630      	mov	r0, r6
 801cff2:	f3af 8000 	nop.w
 801cff6:	4607      	mov	r7, r0
 801cff8:	1c78      	adds	r0, r7, #1
 801cffa:	d1d6      	bne.n	801cfaa <_vfiprintf_r+0x19e>
 801cffc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cffe:	07d9      	lsls	r1, r3, #31
 801d000:	d405      	bmi.n	801d00e <_vfiprintf_r+0x202>
 801d002:	89ab      	ldrh	r3, [r5, #12]
 801d004:	059a      	lsls	r2, r3, #22
 801d006:	d402      	bmi.n	801d00e <_vfiprintf_r+0x202>
 801d008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d00a:	f7ff fd1b 	bl	801ca44 <__retarget_lock_release_recursive>
 801d00e:	89ab      	ldrh	r3, [r5, #12]
 801d010:	065b      	lsls	r3, r3, #25
 801d012:	f53f af1d 	bmi.w	801ce50 <_vfiprintf_r+0x44>
 801d016:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d018:	e71c      	b.n	801ce54 <_vfiprintf_r+0x48>
 801d01a:	ab03      	add	r3, sp, #12
 801d01c:	9300      	str	r3, [sp, #0]
 801d01e:	462a      	mov	r2, r5
 801d020:	4b05      	ldr	r3, [pc, #20]	; (801d038 <_vfiprintf_r+0x22c>)
 801d022:	a904      	add	r1, sp, #16
 801d024:	4630      	mov	r0, r6
 801d026:	f000 f879 	bl	801d11c <_printf_i>
 801d02a:	e7e4      	b.n	801cff6 <_vfiprintf_r+0x1ea>
 801d02c:	080218f7 	.word	0x080218f7
 801d030:	08021901 	.word	0x08021901
 801d034:	00000000 	.word	0x00000000
 801d038:	0801cde7 	.word	0x0801cde7
 801d03c:	080218fd 	.word	0x080218fd

0801d040 <_printf_common>:
 801d040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d044:	4616      	mov	r6, r2
 801d046:	4699      	mov	r9, r3
 801d048:	688a      	ldr	r2, [r1, #8]
 801d04a:	690b      	ldr	r3, [r1, #16]
 801d04c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d050:	4293      	cmp	r3, r2
 801d052:	bfb8      	it	lt
 801d054:	4613      	movlt	r3, r2
 801d056:	6033      	str	r3, [r6, #0]
 801d058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d05c:	4607      	mov	r7, r0
 801d05e:	460c      	mov	r4, r1
 801d060:	b10a      	cbz	r2, 801d066 <_printf_common+0x26>
 801d062:	3301      	adds	r3, #1
 801d064:	6033      	str	r3, [r6, #0]
 801d066:	6823      	ldr	r3, [r4, #0]
 801d068:	0699      	lsls	r1, r3, #26
 801d06a:	bf42      	ittt	mi
 801d06c:	6833      	ldrmi	r3, [r6, #0]
 801d06e:	3302      	addmi	r3, #2
 801d070:	6033      	strmi	r3, [r6, #0]
 801d072:	6825      	ldr	r5, [r4, #0]
 801d074:	f015 0506 	ands.w	r5, r5, #6
 801d078:	d106      	bne.n	801d088 <_printf_common+0x48>
 801d07a:	f104 0a19 	add.w	sl, r4, #25
 801d07e:	68e3      	ldr	r3, [r4, #12]
 801d080:	6832      	ldr	r2, [r6, #0]
 801d082:	1a9b      	subs	r3, r3, r2
 801d084:	42ab      	cmp	r3, r5
 801d086:	dc26      	bgt.n	801d0d6 <_printf_common+0x96>
 801d088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d08c:	1e13      	subs	r3, r2, #0
 801d08e:	6822      	ldr	r2, [r4, #0]
 801d090:	bf18      	it	ne
 801d092:	2301      	movne	r3, #1
 801d094:	0692      	lsls	r2, r2, #26
 801d096:	d42b      	bmi.n	801d0f0 <_printf_common+0xb0>
 801d098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d09c:	4649      	mov	r1, r9
 801d09e:	4638      	mov	r0, r7
 801d0a0:	47c0      	blx	r8
 801d0a2:	3001      	adds	r0, #1
 801d0a4:	d01e      	beq.n	801d0e4 <_printf_common+0xa4>
 801d0a6:	6823      	ldr	r3, [r4, #0]
 801d0a8:	6922      	ldr	r2, [r4, #16]
 801d0aa:	f003 0306 	and.w	r3, r3, #6
 801d0ae:	2b04      	cmp	r3, #4
 801d0b0:	bf02      	ittt	eq
 801d0b2:	68e5      	ldreq	r5, [r4, #12]
 801d0b4:	6833      	ldreq	r3, [r6, #0]
 801d0b6:	1aed      	subeq	r5, r5, r3
 801d0b8:	68a3      	ldr	r3, [r4, #8]
 801d0ba:	bf0c      	ite	eq
 801d0bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d0c0:	2500      	movne	r5, #0
 801d0c2:	4293      	cmp	r3, r2
 801d0c4:	bfc4      	itt	gt
 801d0c6:	1a9b      	subgt	r3, r3, r2
 801d0c8:	18ed      	addgt	r5, r5, r3
 801d0ca:	2600      	movs	r6, #0
 801d0cc:	341a      	adds	r4, #26
 801d0ce:	42b5      	cmp	r5, r6
 801d0d0:	d11a      	bne.n	801d108 <_printf_common+0xc8>
 801d0d2:	2000      	movs	r0, #0
 801d0d4:	e008      	b.n	801d0e8 <_printf_common+0xa8>
 801d0d6:	2301      	movs	r3, #1
 801d0d8:	4652      	mov	r2, sl
 801d0da:	4649      	mov	r1, r9
 801d0dc:	4638      	mov	r0, r7
 801d0de:	47c0      	blx	r8
 801d0e0:	3001      	adds	r0, #1
 801d0e2:	d103      	bne.n	801d0ec <_printf_common+0xac>
 801d0e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0ec:	3501      	adds	r5, #1
 801d0ee:	e7c6      	b.n	801d07e <_printf_common+0x3e>
 801d0f0:	18e1      	adds	r1, r4, r3
 801d0f2:	1c5a      	adds	r2, r3, #1
 801d0f4:	2030      	movs	r0, #48	; 0x30
 801d0f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d0fa:	4422      	add	r2, r4
 801d0fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d104:	3302      	adds	r3, #2
 801d106:	e7c7      	b.n	801d098 <_printf_common+0x58>
 801d108:	2301      	movs	r3, #1
 801d10a:	4622      	mov	r2, r4
 801d10c:	4649      	mov	r1, r9
 801d10e:	4638      	mov	r0, r7
 801d110:	47c0      	blx	r8
 801d112:	3001      	adds	r0, #1
 801d114:	d0e6      	beq.n	801d0e4 <_printf_common+0xa4>
 801d116:	3601      	adds	r6, #1
 801d118:	e7d9      	b.n	801d0ce <_printf_common+0x8e>
	...

0801d11c <_printf_i>:
 801d11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d120:	7e0f      	ldrb	r7, [r1, #24]
 801d122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d124:	2f78      	cmp	r7, #120	; 0x78
 801d126:	4691      	mov	r9, r2
 801d128:	4680      	mov	r8, r0
 801d12a:	460c      	mov	r4, r1
 801d12c:	469a      	mov	sl, r3
 801d12e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801d132:	d807      	bhi.n	801d144 <_printf_i+0x28>
 801d134:	2f62      	cmp	r7, #98	; 0x62
 801d136:	d80a      	bhi.n	801d14e <_printf_i+0x32>
 801d138:	2f00      	cmp	r7, #0
 801d13a:	f000 80d4 	beq.w	801d2e6 <_printf_i+0x1ca>
 801d13e:	2f58      	cmp	r7, #88	; 0x58
 801d140:	f000 80c0 	beq.w	801d2c4 <_printf_i+0x1a8>
 801d144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d14c:	e03a      	b.n	801d1c4 <_printf_i+0xa8>
 801d14e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d152:	2b15      	cmp	r3, #21
 801d154:	d8f6      	bhi.n	801d144 <_printf_i+0x28>
 801d156:	a101      	add	r1, pc, #4	; (adr r1, 801d15c <_printf_i+0x40>)
 801d158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d15c:	0801d1b5 	.word	0x0801d1b5
 801d160:	0801d1c9 	.word	0x0801d1c9
 801d164:	0801d145 	.word	0x0801d145
 801d168:	0801d145 	.word	0x0801d145
 801d16c:	0801d145 	.word	0x0801d145
 801d170:	0801d145 	.word	0x0801d145
 801d174:	0801d1c9 	.word	0x0801d1c9
 801d178:	0801d145 	.word	0x0801d145
 801d17c:	0801d145 	.word	0x0801d145
 801d180:	0801d145 	.word	0x0801d145
 801d184:	0801d145 	.word	0x0801d145
 801d188:	0801d2cd 	.word	0x0801d2cd
 801d18c:	0801d1f5 	.word	0x0801d1f5
 801d190:	0801d287 	.word	0x0801d287
 801d194:	0801d145 	.word	0x0801d145
 801d198:	0801d145 	.word	0x0801d145
 801d19c:	0801d2ef 	.word	0x0801d2ef
 801d1a0:	0801d145 	.word	0x0801d145
 801d1a4:	0801d1f5 	.word	0x0801d1f5
 801d1a8:	0801d145 	.word	0x0801d145
 801d1ac:	0801d145 	.word	0x0801d145
 801d1b0:	0801d28f 	.word	0x0801d28f
 801d1b4:	682b      	ldr	r3, [r5, #0]
 801d1b6:	1d1a      	adds	r2, r3, #4
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	602a      	str	r2, [r5, #0]
 801d1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	e09f      	b.n	801d308 <_printf_i+0x1ec>
 801d1c8:	6820      	ldr	r0, [r4, #0]
 801d1ca:	682b      	ldr	r3, [r5, #0]
 801d1cc:	0607      	lsls	r7, r0, #24
 801d1ce:	f103 0104 	add.w	r1, r3, #4
 801d1d2:	6029      	str	r1, [r5, #0]
 801d1d4:	d501      	bpl.n	801d1da <_printf_i+0xbe>
 801d1d6:	681e      	ldr	r6, [r3, #0]
 801d1d8:	e003      	b.n	801d1e2 <_printf_i+0xc6>
 801d1da:	0646      	lsls	r6, r0, #25
 801d1dc:	d5fb      	bpl.n	801d1d6 <_printf_i+0xba>
 801d1de:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d1e2:	2e00      	cmp	r6, #0
 801d1e4:	da03      	bge.n	801d1ee <_printf_i+0xd2>
 801d1e6:	232d      	movs	r3, #45	; 0x2d
 801d1e8:	4276      	negs	r6, r6
 801d1ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d1ee:	485a      	ldr	r0, [pc, #360]	; (801d358 <_printf_i+0x23c>)
 801d1f0:	230a      	movs	r3, #10
 801d1f2:	e012      	b.n	801d21a <_printf_i+0xfe>
 801d1f4:	682b      	ldr	r3, [r5, #0]
 801d1f6:	6820      	ldr	r0, [r4, #0]
 801d1f8:	1d19      	adds	r1, r3, #4
 801d1fa:	6029      	str	r1, [r5, #0]
 801d1fc:	0605      	lsls	r5, r0, #24
 801d1fe:	d501      	bpl.n	801d204 <_printf_i+0xe8>
 801d200:	681e      	ldr	r6, [r3, #0]
 801d202:	e002      	b.n	801d20a <_printf_i+0xee>
 801d204:	0641      	lsls	r1, r0, #25
 801d206:	d5fb      	bpl.n	801d200 <_printf_i+0xe4>
 801d208:	881e      	ldrh	r6, [r3, #0]
 801d20a:	4853      	ldr	r0, [pc, #332]	; (801d358 <_printf_i+0x23c>)
 801d20c:	2f6f      	cmp	r7, #111	; 0x6f
 801d20e:	bf0c      	ite	eq
 801d210:	2308      	moveq	r3, #8
 801d212:	230a      	movne	r3, #10
 801d214:	2100      	movs	r1, #0
 801d216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d21a:	6865      	ldr	r5, [r4, #4]
 801d21c:	60a5      	str	r5, [r4, #8]
 801d21e:	2d00      	cmp	r5, #0
 801d220:	bfa2      	ittt	ge
 801d222:	6821      	ldrge	r1, [r4, #0]
 801d224:	f021 0104 	bicge.w	r1, r1, #4
 801d228:	6021      	strge	r1, [r4, #0]
 801d22a:	b90e      	cbnz	r6, 801d230 <_printf_i+0x114>
 801d22c:	2d00      	cmp	r5, #0
 801d22e:	d04b      	beq.n	801d2c8 <_printf_i+0x1ac>
 801d230:	4615      	mov	r5, r2
 801d232:	fbb6 f1f3 	udiv	r1, r6, r3
 801d236:	fb03 6711 	mls	r7, r3, r1, r6
 801d23a:	5dc7      	ldrb	r7, [r0, r7]
 801d23c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801d240:	4637      	mov	r7, r6
 801d242:	42bb      	cmp	r3, r7
 801d244:	460e      	mov	r6, r1
 801d246:	d9f4      	bls.n	801d232 <_printf_i+0x116>
 801d248:	2b08      	cmp	r3, #8
 801d24a:	d10b      	bne.n	801d264 <_printf_i+0x148>
 801d24c:	6823      	ldr	r3, [r4, #0]
 801d24e:	07de      	lsls	r6, r3, #31
 801d250:	d508      	bpl.n	801d264 <_printf_i+0x148>
 801d252:	6923      	ldr	r3, [r4, #16]
 801d254:	6861      	ldr	r1, [r4, #4]
 801d256:	4299      	cmp	r1, r3
 801d258:	bfde      	ittt	le
 801d25a:	2330      	movle	r3, #48	; 0x30
 801d25c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d260:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801d264:	1b52      	subs	r2, r2, r5
 801d266:	6122      	str	r2, [r4, #16]
 801d268:	f8cd a000 	str.w	sl, [sp]
 801d26c:	464b      	mov	r3, r9
 801d26e:	aa03      	add	r2, sp, #12
 801d270:	4621      	mov	r1, r4
 801d272:	4640      	mov	r0, r8
 801d274:	f7ff fee4 	bl	801d040 <_printf_common>
 801d278:	3001      	adds	r0, #1
 801d27a:	d14a      	bne.n	801d312 <_printf_i+0x1f6>
 801d27c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d280:	b004      	add	sp, #16
 801d282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d286:	6823      	ldr	r3, [r4, #0]
 801d288:	f043 0320 	orr.w	r3, r3, #32
 801d28c:	6023      	str	r3, [r4, #0]
 801d28e:	4833      	ldr	r0, [pc, #204]	; (801d35c <_printf_i+0x240>)
 801d290:	2778      	movs	r7, #120	; 0x78
 801d292:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d296:	6823      	ldr	r3, [r4, #0]
 801d298:	6829      	ldr	r1, [r5, #0]
 801d29a:	061f      	lsls	r7, r3, #24
 801d29c:	f851 6b04 	ldr.w	r6, [r1], #4
 801d2a0:	d402      	bmi.n	801d2a8 <_printf_i+0x18c>
 801d2a2:	065f      	lsls	r7, r3, #25
 801d2a4:	bf48      	it	mi
 801d2a6:	b2b6      	uxthmi	r6, r6
 801d2a8:	07df      	lsls	r7, r3, #31
 801d2aa:	bf48      	it	mi
 801d2ac:	f043 0320 	orrmi.w	r3, r3, #32
 801d2b0:	6029      	str	r1, [r5, #0]
 801d2b2:	bf48      	it	mi
 801d2b4:	6023      	strmi	r3, [r4, #0]
 801d2b6:	b91e      	cbnz	r6, 801d2c0 <_printf_i+0x1a4>
 801d2b8:	6823      	ldr	r3, [r4, #0]
 801d2ba:	f023 0320 	bic.w	r3, r3, #32
 801d2be:	6023      	str	r3, [r4, #0]
 801d2c0:	2310      	movs	r3, #16
 801d2c2:	e7a7      	b.n	801d214 <_printf_i+0xf8>
 801d2c4:	4824      	ldr	r0, [pc, #144]	; (801d358 <_printf_i+0x23c>)
 801d2c6:	e7e4      	b.n	801d292 <_printf_i+0x176>
 801d2c8:	4615      	mov	r5, r2
 801d2ca:	e7bd      	b.n	801d248 <_printf_i+0x12c>
 801d2cc:	682b      	ldr	r3, [r5, #0]
 801d2ce:	6826      	ldr	r6, [r4, #0]
 801d2d0:	6961      	ldr	r1, [r4, #20]
 801d2d2:	1d18      	adds	r0, r3, #4
 801d2d4:	6028      	str	r0, [r5, #0]
 801d2d6:	0635      	lsls	r5, r6, #24
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	d501      	bpl.n	801d2e0 <_printf_i+0x1c4>
 801d2dc:	6019      	str	r1, [r3, #0]
 801d2de:	e002      	b.n	801d2e6 <_printf_i+0x1ca>
 801d2e0:	0670      	lsls	r0, r6, #25
 801d2e2:	d5fb      	bpl.n	801d2dc <_printf_i+0x1c0>
 801d2e4:	8019      	strh	r1, [r3, #0]
 801d2e6:	2300      	movs	r3, #0
 801d2e8:	6123      	str	r3, [r4, #16]
 801d2ea:	4615      	mov	r5, r2
 801d2ec:	e7bc      	b.n	801d268 <_printf_i+0x14c>
 801d2ee:	682b      	ldr	r3, [r5, #0]
 801d2f0:	1d1a      	adds	r2, r3, #4
 801d2f2:	602a      	str	r2, [r5, #0]
 801d2f4:	681d      	ldr	r5, [r3, #0]
 801d2f6:	6862      	ldr	r2, [r4, #4]
 801d2f8:	2100      	movs	r1, #0
 801d2fa:	4628      	mov	r0, r5
 801d2fc:	f7e2 ff70 	bl	80001e0 <memchr>
 801d300:	b108      	cbz	r0, 801d306 <_printf_i+0x1ea>
 801d302:	1b40      	subs	r0, r0, r5
 801d304:	6060      	str	r0, [r4, #4]
 801d306:	6863      	ldr	r3, [r4, #4]
 801d308:	6123      	str	r3, [r4, #16]
 801d30a:	2300      	movs	r3, #0
 801d30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d310:	e7aa      	b.n	801d268 <_printf_i+0x14c>
 801d312:	6923      	ldr	r3, [r4, #16]
 801d314:	462a      	mov	r2, r5
 801d316:	4649      	mov	r1, r9
 801d318:	4640      	mov	r0, r8
 801d31a:	47d0      	blx	sl
 801d31c:	3001      	adds	r0, #1
 801d31e:	d0ad      	beq.n	801d27c <_printf_i+0x160>
 801d320:	6823      	ldr	r3, [r4, #0]
 801d322:	079b      	lsls	r3, r3, #30
 801d324:	d413      	bmi.n	801d34e <_printf_i+0x232>
 801d326:	68e0      	ldr	r0, [r4, #12]
 801d328:	9b03      	ldr	r3, [sp, #12]
 801d32a:	4298      	cmp	r0, r3
 801d32c:	bfb8      	it	lt
 801d32e:	4618      	movlt	r0, r3
 801d330:	e7a6      	b.n	801d280 <_printf_i+0x164>
 801d332:	2301      	movs	r3, #1
 801d334:	4632      	mov	r2, r6
 801d336:	4649      	mov	r1, r9
 801d338:	4640      	mov	r0, r8
 801d33a:	47d0      	blx	sl
 801d33c:	3001      	adds	r0, #1
 801d33e:	d09d      	beq.n	801d27c <_printf_i+0x160>
 801d340:	3501      	adds	r5, #1
 801d342:	68e3      	ldr	r3, [r4, #12]
 801d344:	9903      	ldr	r1, [sp, #12]
 801d346:	1a5b      	subs	r3, r3, r1
 801d348:	42ab      	cmp	r3, r5
 801d34a:	dcf2      	bgt.n	801d332 <_printf_i+0x216>
 801d34c:	e7eb      	b.n	801d326 <_printf_i+0x20a>
 801d34e:	2500      	movs	r5, #0
 801d350:	f104 0619 	add.w	r6, r4, #25
 801d354:	e7f5      	b.n	801d342 <_printf_i+0x226>
 801d356:	bf00      	nop
 801d358:	08021908 	.word	0x08021908
 801d35c:	08021919 	.word	0x08021919

0801d360 <__sflush_r>:
 801d360:	898a      	ldrh	r2, [r1, #12]
 801d362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d366:	4605      	mov	r5, r0
 801d368:	0710      	lsls	r0, r2, #28
 801d36a:	460c      	mov	r4, r1
 801d36c:	d458      	bmi.n	801d420 <__sflush_r+0xc0>
 801d36e:	684b      	ldr	r3, [r1, #4]
 801d370:	2b00      	cmp	r3, #0
 801d372:	dc05      	bgt.n	801d380 <__sflush_r+0x20>
 801d374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d376:	2b00      	cmp	r3, #0
 801d378:	dc02      	bgt.n	801d380 <__sflush_r+0x20>
 801d37a:	2000      	movs	r0, #0
 801d37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d382:	2e00      	cmp	r6, #0
 801d384:	d0f9      	beq.n	801d37a <__sflush_r+0x1a>
 801d386:	2300      	movs	r3, #0
 801d388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d38c:	682f      	ldr	r7, [r5, #0]
 801d38e:	6a21      	ldr	r1, [r4, #32]
 801d390:	602b      	str	r3, [r5, #0]
 801d392:	d032      	beq.n	801d3fa <__sflush_r+0x9a>
 801d394:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d396:	89a3      	ldrh	r3, [r4, #12]
 801d398:	075a      	lsls	r2, r3, #29
 801d39a:	d505      	bpl.n	801d3a8 <__sflush_r+0x48>
 801d39c:	6863      	ldr	r3, [r4, #4]
 801d39e:	1ac0      	subs	r0, r0, r3
 801d3a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d3a2:	b10b      	cbz	r3, 801d3a8 <__sflush_r+0x48>
 801d3a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d3a6:	1ac0      	subs	r0, r0, r3
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	4602      	mov	r2, r0
 801d3ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d3ae:	6a21      	ldr	r1, [r4, #32]
 801d3b0:	4628      	mov	r0, r5
 801d3b2:	47b0      	blx	r6
 801d3b4:	1c43      	adds	r3, r0, #1
 801d3b6:	89a3      	ldrh	r3, [r4, #12]
 801d3b8:	d106      	bne.n	801d3c8 <__sflush_r+0x68>
 801d3ba:	6829      	ldr	r1, [r5, #0]
 801d3bc:	291d      	cmp	r1, #29
 801d3be:	d82b      	bhi.n	801d418 <__sflush_r+0xb8>
 801d3c0:	4a29      	ldr	r2, [pc, #164]	; (801d468 <__sflush_r+0x108>)
 801d3c2:	410a      	asrs	r2, r1
 801d3c4:	07d6      	lsls	r6, r2, #31
 801d3c6:	d427      	bmi.n	801d418 <__sflush_r+0xb8>
 801d3c8:	2200      	movs	r2, #0
 801d3ca:	6062      	str	r2, [r4, #4]
 801d3cc:	04d9      	lsls	r1, r3, #19
 801d3ce:	6922      	ldr	r2, [r4, #16]
 801d3d0:	6022      	str	r2, [r4, #0]
 801d3d2:	d504      	bpl.n	801d3de <__sflush_r+0x7e>
 801d3d4:	1c42      	adds	r2, r0, #1
 801d3d6:	d101      	bne.n	801d3dc <__sflush_r+0x7c>
 801d3d8:	682b      	ldr	r3, [r5, #0]
 801d3da:	b903      	cbnz	r3, 801d3de <__sflush_r+0x7e>
 801d3dc:	6560      	str	r0, [r4, #84]	; 0x54
 801d3de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d3e0:	602f      	str	r7, [r5, #0]
 801d3e2:	2900      	cmp	r1, #0
 801d3e4:	d0c9      	beq.n	801d37a <__sflush_r+0x1a>
 801d3e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d3ea:	4299      	cmp	r1, r3
 801d3ec:	d002      	beq.n	801d3f4 <__sflush_r+0x94>
 801d3ee:	4628      	mov	r0, r5
 801d3f0:	f7ff fb3e 	bl	801ca70 <_free_r>
 801d3f4:	2000      	movs	r0, #0
 801d3f6:	6360      	str	r0, [r4, #52]	; 0x34
 801d3f8:	e7c0      	b.n	801d37c <__sflush_r+0x1c>
 801d3fa:	2301      	movs	r3, #1
 801d3fc:	4628      	mov	r0, r5
 801d3fe:	47b0      	blx	r6
 801d400:	1c41      	adds	r1, r0, #1
 801d402:	d1c8      	bne.n	801d396 <__sflush_r+0x36>
 801d404:	682b      	ldr	r3, [r5, #0]
 801d406:	2b00      	cmp	r3, #0
 801d408:	d0c5      	beq.n	801d396 <__sflush_r+0x36>
 801d40a:	2b1d      	cmp	r3, #29
 801d40c:	d001      	beq.n	801d412 <__sflush_r+0xb2>
 801d40e:	2b16      	cmp	r3, #22
 801d410:	d101      	bne.n	801d416 <__sflush_r+0xb6>
 801d412:	602f      	str	r7, [r5, #0]
 801d414:	e7b1      	b.n	801d37a <__sflush_r+0x1a>
 801d416:	89a3      	ldrh	r3, [r4, #12]
 801d418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d41c:	81a3      	strh	r3, [r4, #12]
 801d41e:	e7ad      	b.n	801d37c <__sflush_r+0x1c>
 801d420:	690f      	ldr	r7, [r1, #16]
 801d422:	2f00      	cmp	r7, #0
 801d424:	d0a9      	beq.n	801d37a <__sflush_r+0x1a>
 801d426:	0793      	lsls	r3, r2, #30
 801d428:	680e      	ldr	r6, [r1, #0]
 801d42a:	bf08      	it	eq
 801d42c:	694b      	ldreq	r3, [r1, #20]
 801d42e:	600f      	str	r7, [r1, #0]
 801d430:	bf18      	it	ne
 801d432:	2300      	movne	r3, #0
 801d434:	eba6 0807 	sub.w	r8, r6, r7
 801d438:	608b      	str	r3, [r1, #8]
 801d43a:	f1b8 0f00 	cmp.w	r8, #0
 801d43e:	dd9c      	ble.n	801d37a <__sflush_r+0x1a>
 801d440:	6a21      	ldr	r1, [r4, #32]
 801d442:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d444:	4643      	mov	r3, r8
 801d446:	463a      	mov	r2, r7
 801d448:	4628      	mov	r0, r5
 801d44a:	47b0      	blx	r6
 801d44c:	2800      	cmp	r0, #0
 801d44e:	dc06      	bgt.n	801d45e <__sflush_r+0xfe>
 801d450:	89a3      	ldrh	r3, [r4, #12]
 801d452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d456:	81a3      	strh	r3, [r4, #12]
 801d458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d45c:	e78e      	b.n	801d37c <__sflush_r+0x1c>
 801d45e:	4407      	add	r7, r0
 801d460:	eba8 0800 	sub.w	r8, r8, r0
 801d464:	e7e9      	b.n	801d43a <__sflush_r+0xda>
 801d466:	bf00      	nop
 801d468:	dfbffffe 	.word	0xdfbffffe

0801d46c <_fflush_r>:
 801d46c:	b538      	push	{r3, r4, r5, lr}
 801d46e:	690b      	ldr	r3, [r1, #16]
 801d470:	4605      	mov	r5, r0
 801d472:	460c      	mov	r4, r1
 801d474:	b913      	cbnz	r3, 801d47c <_fflush_r+0x10>
 801d476:	2500      	movs	r5, #0
 801d478:	4628      	mov	r0, r5
 801d47a:	bd38      	pop	{r3, r4, r5, pc}
 801d47c:	b118      	cbz	r0, 801d486 <_fflush_r+0x1a>
 801d47e:	6a03      	ldr	r3, [r0, #32]
 801d480:	b90b      	cbnz	r3, 801d486 <_fflush_r+0x1a>
 801d482:	f7fe ffff 	bl	801c484 <__sinit>
 801d486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d0f3      	beq.n	801d476 <_fflush_r+0xa>
 801d48e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d490:	07d0      	lsls	r0, r2, #31
 801d492:	d404      	bmi.n	801d49e <_fflush_r+0x32>
 801d494:	0599      	lsls	r1, r3, #22
 801d496:	d402      	bmi.n	801d49e <_fflush_r+0x32>
 801d498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d49a:	f7ff fad2 	bl	801ca42 <__retarget_lock_acquire_recursive>
 801d49e:	4628      	mov	r0, r5
 801d4a0:	4621      	mov	r1, r4
 801d4a2:	f7ff ff5d 	bl	801d360 <__sflush_r>
 801d4a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d4a8:	07da      	lsls	r2, r3, #31
 801d4aa:	4605      	mov	r5, r0
 801d4ac:	d4e4      	bmi.n	801d478 <_fflush_r+0xc>
 801d4ae:	89a3      	ldrh	r3, [r4, #12]
 801d4b0:	059b      	lsls	r3, r3, #22
 801d4b2:	d4e1      	bmi.n	801d478 <_fflush_r+0xc>
 801d4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d4b6:	f7ff fac5 	bl	801ca44 <__retarget_lock_release_recursive>
 801d4ba:	e7dd      	b.n	801d478 <_fflush_r+0xc>

0801d4bc <__swhatbuf_r>:
 801d4bc:	b570      	push	{r4, r5, r6, lr}
 801d4be:	460c      	mov	r4, r1
 801d4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4c4:	2900      	cmp	r1, #0
 801d4c6:	b096      	sub	sp, #88	; 0x58
 801d4c8:	4615      	mov	r5, r2
 801d4ca:	461e      	mov	r6, r3
 801d4cc:	da0d      	bge.n	801d4ea <__swhatbuf_r+0x2e>
 801d4ce:	89a3      	ldrh	r3, [r4, #12]
 801d4d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d4d4:	f04f 0100 	mov.w	r1, #0
 801d4d8:	bf0c      	ite	eq
 801d4da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d4de:	2340      	movne	r3, #64	; 0x40
 801d4e0:	2000      	movs	r0, #0
 801d4e2:	6031      	str	r1, [r6, #0]
 801d4e4:	602b      	str	r3, [r5, #0]
 801d4e6:	b016      	add	sp, #88	; 0x58
 801d4e8:	bd70      	pop	{r4, r5, r6, pc}
 801d4ea:	466a      	mov	r2, sp
 801d4ec:	f000 f878 	bl	801d5e0 <_fstat_r>
 801d4f0:	2800      	cmp	r0, #0
 801d4f2:	dbec      	blt.n	801d4ce <__swhatbuf_r+0x12>
 801d4f4:	9901      	ldr	r1, [sp, #4]
 801d4f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d4fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d4fe:	4259      	negs	r1, r3
 801d500:	4159      	adcs	r1, r3
 801d502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d506:	e7eb      	b.n	801d4e0 <__swhatbuf_r+0x24>

0801d508 <__smakebuf_r>:
 801d508:	898b      	ldrh	r3, [r1, #12]
 801d50a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d50c:	079d      	lsls	r5, r3, #30
 801d50e:	4606      	mov	r6, r0
 801d510:	460c      	mov	r4, r1
 801d512:	d507      	bpl.n	801d524 <__smakebuf_r+0x1c>
 801d514:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d518:	6023      	str	r3, [r4, #0]
 801d51a:	6123      	str	r3, [r4, #16]
 801d51c:	2301      	movs	r3, #1
 801d51e:	6163      	str	r3, [r4, #20]
 801d520:	b002      	add	sp, #8
 801d522:	bd70      	pop	{r4, r5, r6, pc}
 801d524:	ab01      	add	r3, sp, #4
 801d526:	466a      	mov	r2, sp
 801d528:	f7ff ffc8 	bl	801d4bc <__swhatbuf_r>
 801d52c:	9900      	ldr	r1, [sp, #0]
 801d52e:	4605      	mov	r5, r0
 801d530:	4630      	mov	r0, r6
 801d532:	f7fe fe51 	bl	801c1d8 <_malloc_r>
 801d536:	b948      	cbnz	r0, 801d54c <__smakebuf_r+0x44>
 801d538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d53c:	059a      	lsls	r2, r3, #22
 801d53e:	d4ef      	bmi.n	801d520 <__smakebuf_r+0x18>
 801d540:	f023 0303 	bic.w	r3, r3, #3
 801d544:	f043 0302 	orr.w	r3, r3, #2
 801d548:	81a3      	strh	r3, [r4, #12]
 801d54a:	e7e3      	b.n	801d514 <__smakebuf_r+0xc>
 801d54c:	89a3      	ldrh	r3, [r4, #12]
 801d54e:	6020      	str	r0, [r4, #0]
 801d550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d554:	81a3      	strh	r3, [r4, #12]
 801d556:	9b00      	ldr	r3, [sp, #0]
 801d558:	6163      	str	r3, [r4, #20]
 801d55a:	9b01      	ldr	r3, [sp, #4]
 801d55c:	6120      	str	r0, [r4, #16]
 801d55e:	b15b      	cbz	r3, 801d578 <__smakebuf_r+0x70>
 801d560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d564:	4630      	mov	r0, r6
 801d566:	f000 f84d 	bl	801d604 <_isatty_r>
 801d56a:	b128      	cbz	r0, 801d578 <__smakebuf_r+0x70>
 801d56c:	89a3      	ldrh	r3, [r4, #12]
 801d56e:	f023 0303 	bic.w	r3, r3, #3
 801d572:	f043 0301 	orr.w	r3, r3, #1
 801d576:	81a3      	strh	r3, [r4, #12]
 801d578:	89a3      	ldrh	r3, [r4, #12]
 801d57a:	431d      	orrs	r5, r3
 801d57c:	81a5      	strh	r5, [r4, #12]
 801d57e:	e7cf      	b.n	801d520 <__smakebuf_r+0x18>

0801d580 <_raise_r>:
 801d580:	291f      	cmp	r1, #31
 801d582:	b538      	push	{r3, r4, r5, lr}
 801d584:	4604      	mov	r4, r0
 801d586:	460d      	mov	r5, r1
 801d588:	d904      	bls.n	801d594 <_raise_r+0x14>
 801d58a:	2316      	movs	r3, #22
 801d58c:	6003      	str	r3, [r0, #0]
 801d58e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d592:	bd38      	pop	{r3, r4, r5, pc}
 801d594:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d596:	b112      	cbz	r2, 801d59e <_raise_r+0x1e>
 801d598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d59c:	b94b      	cbnz	r3, 801d5b2 <_raise_r+0x32>
 801d59e:	4620      	mov	r0, r4
 801d5a0:	f000 f852 	bl	801d648 <_getpid_r>
 801d5a4:	462a      	mov	r2, r5
 801d5a6:	4601      	mov	r1, r0
 801d5a8:	4620      	mov	r0, r4
 801d5aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d5ae:	f000 b839 	b.w	801d624 <_kill_r>
 801d5b2:	2b01      	cmp	r3, #1
 801d5b4:	d00a      	beq.n	801d5cc <_raise_r+0x4c>
 801d5b6:	1c59      	adds	r1, r3, #1
 801d5b8:	d103      	bne.n	801d5c2 <_raise_r+0x42>
 801d5ba:	2316      	movs	r3, #22
 801d5bc:	6003      	str	r3, [r0, #0]
 801d5be:	2001      	movs	r0, #1
 801d5c0:	e7e7      	b.n	801d592 <_raise_r+0x12>
 801d5c2:	2400      	movs	r4, #0
 801d5c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d5c8:	4628      	mov	r0, r5
 801d5ca:	4798      	blx	r3
 801d5cc:	2000      	movs	r0, #0
 801d5ce:	e7e0      	b.n	801d592 <_raise_r+0x12>

0801d5d0 <raise>:
 801d5d0:	4b02      	ldr	r3, [pc, #8]	; (801d5dc <raise+0xc>)
 801d5d2:	4601      	mov	r1, r0
 801d5d4:	6818      	ldr	r0, [r3, #0]
 801d5d6:	f7ff bfd3 	b.w	801d580 <_raise_r>
 801d5da:	bf00      	nop
 801d5dc:	20000090 	.word	0x20000090

0801d5e0 <_fstat_r>:
 801d5e0:	b538      	push	{r3, r4, r5, lr}
 801d5e2:	4d07      	ldr	r5, [pc, #28]	; (801d600 <_fstat_r+0x20>)
 801d5e4:	2300      	movs	r3, #0
 801d5e6:	4604      	mov	r4, r0
 801d5e8:	4608      	mov	r0, r1
 801d5ea:	4611      	mov	r1, r2
 801d5ec:	602b      	str	r3, [r5, #0]
 801d5ee:	f7e4 fa70 	bl	8001ad2 <_fstat>
 801d5f2:	1c43      	adds	r3, r0, #1
 801d5f4:	d102      	bne.n	801d5fc <_fstat_r+0x1c>
 801d5f6:	682b      	ldr	r3, [r5, #0]
 801d5f8:	b103      	cbz	r3, 801d5fc <_fstat_r+0x1c>
 801d5fa:	6023      	str	r3, [r4, #0]
 801d5fc:	bd38      	pop	{r3, r4, r5, pc}
 801d5fe:	bf00      	nop
 801d600:	2000c8d8 	.word	0x2000c8d8

0801d604 <_isatty_r>:
 801d604:	b538      	push	{r3, r4, r5, lr}
 801d606:	4d06      	ldr	r5, [pc, #24]	; (801d620 <_isatty_r+0x1c>)
 801d608:	2300      	movs	r3, #0
 801d60a:	4604      	mov	r4, r0
 801d60c:	4608      	mov	r0, r1
 801d60e:	602b      	str	r3, [r5, #0]
 801d610:	f7e4 fa6f 	bl	8001af2 <_isatty>
 801d614:	1c43      	adds	r3, r0, #1
 801d616:	d102      	bne.n	801d61e <_isatty_r+0x1a>
 801d618:	682b      	ldr	r3, [r5, #0]
 801d61a:	b103      	cbz	r3, 801d61e <_isatty_r+0x1a>
 801d61c:	6023      	str	r3, [r4, #0]
 801d61e:	bd38      	pop	{r3, r4, r5, pc}
 801d620:	2000c8d8 	.word	0x2000c8d8

0801d624 <_kill_r>:
 801d624:	b538      	push	{r3, r4, r5, lr}
 801d626:	4d07      	ldr	r5, [pc, #28]	; (801d644 <_kill_r+0x20>)
 801d628:	2300      	movs	r3, #0
 801d62a:	4604      	mov	r4, r0
 801d62c:	4608      	mov	r0, r1
 801d62e:	4611      	mov	r1, r2
 801d630:	602b      	str	r3, [r5, #0]
 801d632:	f7e4 f9ed 	bl	8001a10 <_kill>
 801d636:	1c43      	adds	r3, r0, #1
 801d638:	d102      	bne.n	801d640 <_kill_r+0x1c>
 801d63a:	682b      	ldr	r3, [r5, #0]
 801d63c:	b103      	cbz	r3, 801d640 <_kill_r+0x1c>
 801d63e:	6023      	str	r3, [r4, #0]
 801d640:	bd38      	pop	{r3, r4, r5, pc}
 801d642:	bf00      	nop
 801d644:	2000c8d8 	.word	0x2000c8d8

0801d648 <_getpid_r>:
 801d648:	f7e4 b9da 	b.w	8001a00 <_getpid>

0801d64c <_realloc_r>:
 801d64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d650:	4680      	mov	r8, r0
 801d652:	4614      	mov	r4, r2
 801d654:	460e      	mov	r6, r1
 801d656:	b921      	cbnz	r1, 801d662 <_realloc_r+0x16>
 801d658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d65c:	4611      	mov	r1, r2
 801d65e:	f7fe bdbb 	b.w	801c1d8 <_malloc_r>
 801d662:	b92a      	cbnz	r2, 801d670 <_realloc_r+0x24>
 801d664:	f7ff fa04 	bl	801ca70 <_free_r>
 801d668:	4625      	mov	r5, r4
 801d66a:	4628      	mov	r0, r5
 801d66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d670:	f000 f81b 	bl	801d6aa <_malloc_usable_size_r>
 801d674:	4284      	cmp	r4, r0
 801d676:	4607      	mov	r7, r0
 801d678:	d802      	bhi.n	801d680 <_realloc_r+0x34>
 801d67a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d67e:	d812      	bhi.n	801d6a6 <_realloc_r+0x5a>
 801d680:	4621      	mov	r1, r4
 801d682:	4640      	mov	r0, r8
 801d684:	f7fe fda8 	bl	801c1d8 <_malloc_r>
 801d688:	4605      	mov	r5, r0
 801d68a:	2800      	cmp	r0, #0
 801d68c:	d0ed      	beq.n	801d66a <_realloc_r+0x1e>
 801d68e:	42bc      	cmp	r4, r7
 801d690:	4622      	mov	r2, r4
 801d692:	4631      	mov	r1, r6
 801d694:	bf28      	it	cs
 801d696:	463a      	movcs	r2, r7
 801d698:	f7ff f9d5 	bl	801ca46 <memcpy>
 801d69c:	4631      	mov	r1, r6
 801d69e:	4640      	mov	r0, r8
 801d6a0:	f7ff f9e6 	bl	801ca70 <_free_r>
 801d6a4:	e7e1      	b.n	801d66a <_realloc_r+0x1e>
 801d6a6:	4635      	mov	r5, r6
 801d6a8:	e7df      	b.n	801d66a <_realloc_r+0x1e>

0801d6aa <_malloc_usable_size_r>:
 801d6aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d6ae:	1f18      	subs	r0, r3, #4
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	bfbc      	itt	lt
 801d6b4:	580b      	ldrlt	r3, [r1, r0]
 801d6b6:	18c0      	addlt	r0, r0, r3
 801d6b8:	4770      	bx	lr
	...

0801d6bc <_init>:
 801d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6be:	bf00      	nop
 801d6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6c2:	bc08      	pop	{r3}
 801d6c4:	469e      	mov	lr, r3
 801d6c6:	4770      	bx	lr

0801d6c8 <_fini>:
 801d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6ca:	bf00      	nop
 801d6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6ce:	bc08      	pop	{r3}
 801d6d0:	469e      	mov	lr, r3
 801d6d2:	4770      	bx	lr
