
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020554  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d04  080206e4  080206e4  000306e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080253e8  080253e8  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  080253e8  080253e8  000353e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080253f0  080253f0  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080253f0  080253f0  000353f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080253f4  080253f4  000353f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080253f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          000108c0  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20010950  20010950  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00044718  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009ddf  00000000  00000000  0008481b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000032d8  00000000  00000000  0008e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000029cd  00000000  00000000  000918d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000378f2  00000000  00000000  000942a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a9cc  00000000  00000000  000cbb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc7bc  00000000  00000000  00116563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000df8c  00000000  00000000  00212d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00220cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080206cc 	.word	0x080206cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080206cc 	.word	0x080206cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b984 	b.w	80005a0 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f81a 	bl	80002d8 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__popcountsi2>:
 80002b0:	0843      	lsrs	r3, r0, #1
 80002b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	0883      	lsrs	r3, r0, #2
 80002ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002c2:	4418      	add	r0, r3
 80002c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	9e08      	ldr	r6, [sp, #32]
 80002de:	460d      	mov	r5, r1
 80002e0:	4604      	mov	r4, r0
 80002e2:	460f      	mov	r7, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14a      	bne.n	800037e <__udivmoddi4+0xa6>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	4694      	mov	ip, r2
 80002ec:	d965      	bls.n	80003ba <__udivmoddi4+0xe2>
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	b143      	cbz	r3, 8000306 <__udivmoddi4+0x2e>
 80002f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f8:	f1c3 0220 	rsb	r2, r3, #32
 80002fc:	409f      	lsls	r7, r3
 80002fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000302:	4317      	orrs	r7, r2
 8000304:	409c      	lsls	r4, r3
 8000306:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030a:	fa1f f58c 	uxth.w	r5, ip
 800030e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fb0e 7711 	mls	r7, lr, r1, r7
 8000318:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	4290      	cmp	r0, r2
 8000322:	d90a      	bls.n	800033a <__udivmoddi4+0x62>
 8000324:	eb1c 0202 	adds.w	r2, ip, r2
 8000328:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800032c:	f080 811c 	bcs.w	8000568 <__udivmoddi4+0x290>
 8000330:	4290      	cmp	r0, r2
 8000332:	f240 8119 	bls.w	8000568 <__udivmoddi4+0x290>
 8000336:	3902      	subs	r1, #2
 8000338:	4462      	add	r2, ip
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034a:	fb00 f505 	mul.w	r5, r0, r5
 800034e:	42a5      	cmp	r5, r4
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x90>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800035a:	f080 8107 	bcs.w	800056c <__udivmoddi4+0x294>
 800035e:	42a5      	cmp	r5, r4
 8000360:	f240 8104 	bls.w	800056c <__udivmoddi4+0x294>
 8000364:	4464      	add	r4, ip
 8000366:	3802      	subs	r0, #2
 8000368:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	2100      	movs	r1, #0
 8000370:	b11e      	cbz	r6, 800037a <__udivmoddi4+0xa2>
 8000372:	40dc      	lsrs	r4, r3
 8000374:	2300      	movs	r3, #0
 8000376:	e9c6 4300 	strd	r4, r3, [r6]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0xbc>
 8000382:	2e00      	cmp	r6, #0
 8000384:	f000 80ed 	beq.w	8000562 <__udivmoddi4+0x28a>
 8000388:	2100      	movs	r1, #0
 800038a:	e9c6 0500 	strd	r0, r5, [r6]
 800038e:	4608      	mov	r0, r1
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d149      	bne.n	8000430 <__udivmoddi4+0x158>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d302      	bcc.n	80003a6 <__udivmoddi4+0xce>
 80003a0:	4282      	cmp	r2, r0
 80003a2:	f200 80f8 	bhi.w	8000596 <__udivmoddi4+0x2be>
 80003a6:	1a84      	subs	r4, r0, r2
 80003a8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	4617      	mov	r7, r2
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d0e2      	beq.n	800037a <__udivmoddi4+0xa2>
 80003b4:	e9c6 4700 	strd	r4, r7, [r6]
 80003b8:	e7df      	b.n	800037a <__udivmoddi4+0xa2>
 80003ba:	b902      	cbnz	r2, 80003be <__udivmoddi4+0xe6>
 80003bc:	deff      	udf	#255	; 0xff
 80003be:	fab2 f382 	clz	r3, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f040 8090 	bne.w	80004e8 <__udivmoddi4+0x210>
 80003c8:	1a8a      	subs	r2, r1, r2
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2101      	movs	r1, #1
 80003d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d8:	fb07 2015 	mls	r0, r7, r5, r2
 80003dc:	0c22      	lsrs	r2, r4, #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb0e f005 	mul.w	r0, lr, r5
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x124>
 80003ea:	eb1c 0202 	adds.w	r2, ip, r2
 80003ee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x122>
 80003f4:	4290      	cmp	r0, r2
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2b8>
 80003fa:	4645      	mov	r5, r8
 80003fc:	1a12      	subs	r2, r2, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb2 f0f7 	udiv	r0, r2, r7
 8000404:	fb07 2210 	mls	r2, r7, r0, r2
 8000408:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x14e>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x14c>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2c2>
 8000424:	4610      	mov	r0, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x98>
 8000430:	f1c1 0720 	rsb	r7, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa05 f401 	lsl.w	r4, r5, r1
 8000442:	fa20 f307 	lsr.w	r3, r0, r7
 8000446:	40fd      	lsrs	r5, r7
 8000448:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000452:	fa1f fe8c 	uxth.w	lr, ip
 8000456:	fb09 5518 	mls	r5, r9, r8, r5
 800045a:	0c1c      	lsrs	r4, r3, #16
 800045c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000460:	fb08 f50e 	mul.w	r5, r8, lr
 8000464:	42a5      	cmp	r5, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	fa00 f001 	lsl.w	r0, r0, r1
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b0>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2b4>
 800047c:	42a5      	cmp	r5, r4
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2b4>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4464      	add	r4, ip
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	b29d      	uxth	r5, r3
 800048c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000490:	fb09 4413 	mls	r4, r9, r3, r4
 8000494:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000498:	fb03 fe0e 	mul.w	lr, r3, lr
 800049c:	45a6      	cmp	lr, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1da>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2ac>
 80004aa:	45a6      	cmp	lr, r4
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2ac>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	4464      	add	r4, ip
 80004b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ba:	eba4 040e 	sub.w	r4, r4, lr
 80004be:	42ac      	cmp	r4, r5
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46ae      	mov	lr, r5
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x29c>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x298>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x208>
 80004ca:	ebb0 0208 	subs.w	r2, r0, r8
 80004ce:	eb64 040e 	sbc.w	r4, r4, lr
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40ca      	lsrs	r2, r1
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	4317      	orrs	r7, r2
 80004dc:	e9c6 7400 	strd	r7, r4, [r6]
 80004e0:	4618      	mov	r0, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e8:	f1c3 0120 	rsb	r1, r3, #32
 80004ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f0:	fa20 f201 	lsr.w	r2, r0, r1
 80004f4:	fa25 f101 	lsr.w	r1, r5, r1
 80004f8:	409d      	lsls	r5, r3
 80004fa:	432a      	orrs	r2, r5
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1510 	mls	r5, r7, r0, r1
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f50e 	mul.w	r5, r0, lr
 8000516:	428d      	cmp	r5, r1
 8000518:	fa04 f403 	lsl.w	r4, r4, r3
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x258>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b0>
 8000528:	428d      	cmp	r5, r1
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b0>
 800052c:	3802      	subs	r0, #2
 800052e:	4461      	add	r1, ip
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5f7 	udiv	r5, r1, r7
 8000538:	fb07 1115 	mls	r1, r7, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f10e 	mul.w	r1, r5, lr
 8000544:	4291      	cmp	r1, r2
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x282>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2a8>
 8000552:	4291      	cmp	r1, r2
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2a8>
 8000556:	3d02      	subs	r5, #2
 8000558:	4462      	add	r2, ip
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0xfc>
 8000562:	4631      	mov	r1, r6
 8000564:	4630      	mov	r0, r6
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xa2>
 8000568:	4639      	mov	r1, r7
 800056a:	e6e6      	b.n	800033a <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e6fb      	b.n	8000368 <__udivmoddi4+0x90>
 8000570:	4548      	cmp	r0, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f0>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb65 0e0c 	sbc.w	lr, r5, ip
 800057c:	3b01      	subs	r3, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f0>
 8000580:	4645      	mov	r5, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x282>
 8000584:	462b      	mov	r3, r5
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1da>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x258>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b0>
 8000590:	3d02      	subs	r5, #2
 8000592:	4462      	add	r2, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x124>
 8000596:	4608      	mov	r0, r1
 8000598:	e70a      	b.n	80003b0 <__udivmoddi4+0xd8>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x14e>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <FileSystemInit>:
 *         - Criação de diretórios;
 *         - Leitura do arquivo de configurações;
 * @retval Nonecfg
 */
int FileSystemInit()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

	  LOG2("Iniciando sistema de arquivos ... ");
 80005aa:	4833      	ldr	r0, [pc, #204]	; (8000678 <FileSystemInit+0xd4>)
 80005ac:	f01f f9e4 	bl	801f978 <puts>

	  int status = lfs_storage_init(&cfg);
 80005b0:	4832      	ldr	r0, [pc, #200]	; (800067c <FileSystemInit+0xd8>)
 80005b2:	f000 fa4f 	bl	8000a54 <lfs_storage_init>
 80005b6:	6078      	str	r0, [r7, #4]

	  if (!status)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d105      	bne.n	80005ca <FileSystemInit+0x26>
	  {
		  LOG2( "erro: %i", status);
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	482f      	ldr	r0, [pc, #188]	; (8000680 <FileSystemInit+0xdc>)
 80005c2:	f01f f973 	bl	801f8ac <iprintf>
	    return status;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	e052      	b.n	8000670 <FileSystemInit+0xcc>
	  }

	  LOG2("OK");
 80005ca:	482e      	ldr	r0, [pc, #184]	; (8000684 <FileSystemInit+0xe0>)
 80005cc:	f01f f9d4 	bl	801f978 <puts>

  lfs_get_default_config(&cfg);
 80005d0:	482a      	ldr	r0, [pc, #168]	; (800067c <FileSystemInit+0xd8>)
 80005d2:	f000 fa29 	bl	8000a28 <lfs_get_default_config>

  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	e016      	b.n	800060a <FileSystemInit+0x66>
  {
    openFile[i].number = 0;
 80005dc:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <FileSystemInit+0xe4>)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2158      	movs	r1, #88	; 0x58
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	4413      	add	r3, r2
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
    memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2258      	movs	r2, #88	; 0x58
 80005f0:	fb02 f303 	mul.w	r3, r2, r3
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <FileSystemInit+0xe4>)
 80005f6:	4413      	add	r3, r2
 80005f8:	3304      	adds	r3, #4
 80005fa:	2254      	movs	r2, #84	; 0x54
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f01f faaa 	bl	801fb58 <memset>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b03      	cmp	r3, #3
 800060e:	dde5      	ble.n	80005dc <FileSystemInit+0x38>
  }


  LOG2("Montando sistema de arquivos ... ");
 8000610:	481e      	ldr	r0, [pc, #120]	; (800068c <FileSystemInit+0xe8>)
 8000612:	f01f f9b1 	bl	801f978 <puts>

  status = lfs_mount(&lfs, &cfg);
 8000616:	4919      	ldr	r1, [pc, #100]	; (800067c <FileSystemInit+0xd8>)
 8000618:	481d      	ldr	r0, [pc, #116]	; (8000690 <FileSystemInit+0xec>)
 800061a:	f00e f920 	bl	800e85e <lfs_mount>
 800061e:	6078      	str	r0, [r7, #4]
  if (status)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d016      	beq.n	8000654 <FileSystemInit+0xb0>
  {
	  LOG2("erro: %i", status);
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4815      	ldr	r0, [pc, #84]	; (8000680 <FileSystemInit+0xdc>)
 800062a:	f01f f93f 	bl	801f8ac <iprintf>
    // Se sistema de arquivos corrompido
    if (status == LFS_ERR_CORRUPT)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8000634:	d10e      	bne.n	8000654 <FileSystemInit+0xb0>
    {
      // Formata o sistema de arquivos
    	LOG2("Formatando sistema de arquivos ... ");
 8000636:	4817      	ldr	r0, [pc, #92]	; (8000694 <FileSystemInit+0xf0>)
 8000638:	f01f f99e 	bl	801f978 <puts>
      status = lfs_format(&lfs, &cfg);
 800063c:	490f      	ldr	r1, [pc, #60]	; (800067c <FileSystemInit+0xd8>)
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <FileSystemInit+0xec>)
 8000640:	f00e f8f0 	bl	800e824 <lfs_format>
 8000644:	6078      	str	r0, [r7, #4]
      if (status)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <FileSystemInit+0xb0>
      {
    	  LOG2("erro: %d", status);
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <FileSystemInit+0xf4>)
 8000650:	f01f f92c 	bl	801f8ac <iprintf>
      }
    }
  }

  if (status == LFS_ERR_OK)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d109      	bne.n	800066e <FileSystemInit+0xca>
  {
	  LOG2("OK");
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <FileSystemInit+0xe0>)
 800065c:	f01f f98c 	bl	801f978 <puts>
    lfs_mounted = 1;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <FileSystemInit+0xf8>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]

    // Cria diretório de configurações
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_MAP);
 8000666:	490e      	ldr	r1, [pc, #56]	; (80006a0 <FileSystemInit+0xfc>)
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <FileSystemInit+0xec>)
 800066a:	f00e f915 	bl	800e898 <lfs_mkdir>

  }

  return status;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	080206e4 	.word	0x080206e4
 800067c:	2000c9b4 	.word	0x2000c9b4
 8000680:	08020708 	.word	0x08020708
 8000684:	08020714 	.word	0x08020714
 8000688:	200000ac 	.word	0x200000ac
 800068c:	08020718 	.word	0x08020718
 8000690:	2000c93c 	.word	0x2000c93c
 8000694:	0802073c 	.word	0x0802073c
 8000698:	08020764 	.word	0x08020764
 800069c:	2000c938 	.word	0x2000c938
 80006a0:	08020770 	.word	0x08020770

080006a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80006b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <vApplicationGetIdleTaskMemory+0x30>)
 80006ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000210 	.word	0x20000210
 80006d4:	200002b0 	.word	0x200002b0

080006d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_FREERTOS_Init+0x30>)
 80006e0:	1d3c      	adds	r4, r7, #4
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f005 fcb5 	bl	8006064 <osThreadCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <MX_FREERTOS_Init+0x34>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bdb0      	pop	{r4, r5, r7, pc}
 8000708:	08020ac0 	.word	0x08020ac0
 800070c:	2000020c 	.word	0x2000020c

08000710 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000718:	f004 ff50 	bl	80055bc <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f005 fced 	bl	80060fc <osDelay>
 8000722:	e7fb      	b.n	800071c <StartDefaultTask+0xc>

08000724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2d      	ldr	r2, [pc, #180]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <MX_GPIO_Init+0xd4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <MX_GPIO_Init+0xd4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24e 1108 	movw	r1, #57608	; 0xe108
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <MX_GPIO_Init+0xd8>)
 80007ce:	f002 fdd1 	bl	8003374 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 80007d2:	f24e 1308 	movw	r3, #57608	; 0xe108
 80007d6:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0xd8>)
 80007ec:	f002 fc26 	bl	800303c <HAL_GPIO_Init>

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40021000 	.word	0x40021000

08000800 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x50>)
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_I2C1_Init+0x54>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x50>)
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_I2C1_Init+0x58>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_I2C1_Init+0x50>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_I2C1_Init+0x50>)
 800083e:	f002 fdb3 	bl	80033a8 <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 fa90 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200004b0 	.word	0x200004b0
 8000854:	40005400 	.word	0x40005400
 8000858:	000186a0 	.word	0x000186a0

0800085c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <HAL_I2C_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12c      	bne.n	80008d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800089a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a0:	2312      	movs	r3, #18
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ac:	2304      	movs	r3, #4
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <HAL_I2C_MspInit+0x8c>)
 80008b8:	f002 fbc0 	bl	800303c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 80008c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40005400 	.word	0x40005400
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400

080008ec <lfs_w25qflash_config_init>:



void lfs_w25qflash_config_init ()

{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

littlefs_config.read = lfs_w25qflash_read;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 80008f2:	4a1a      	ldr	r2, [pc, #104]	; (800095c <lfs_w25qflash_config_init+0x70>)
 80008f4:	605a      	str	r2, [r3, #4]
littlefs_config.prog = lfs_w25qflash_prog;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 80008f8:	4a19      	ldr	r2, [pc, #100]	; (8000960 <lfs_w25qflash_config_init+0x74>)
 80008fa:	609a      	str	r2, [r3, #8]
littlefs_config.erase = lfs_w25qflash_erase;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 80008fe:	4a19      	ldr	r2, [pc, #100]	; (8000964 <lfs_w25qflash_config_init+0x78>)
 8000900:	60da      	str	r2, [r3, #12]
littlefs_config.sync = lfs_w25qflash_sync;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000904:	4a18      	ldr	r2, [pc, #96]	; (8000968 <lfs_w25qflash_config_init+0x7c>)
 8000906:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
littlefs_config.lock = lfs_lock;
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <lfs_w25qflash_config_init+0x80>)
 800090c:	615a      	str	r2, [r3, #20]
littlefs_config.unlock = lfs_unlock;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <lfs_w25qflash_config_init+0x84>)
 8000912:	619a      	str	r2, [r3, #24]
#endif

 littlefs_config.read_size = w25qxx.PageSize;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <lfs_w25qflash_config_init+0x88>)
 8000916:	895b      	ldrh	r3, [r3, #10]
 8000918:	461a      	mov	r2, r3
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 800091c:	61da      	str	r2, [r3, #28]
 littlefs_config.prog_size = w25qxx.PageSize;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <lfs_w25qflash_config_init+0x88>)
 8000920:	895b      	ldrh	r3, [r3, #10]
 8000922:	461a      	mov	r2, r3
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000926:	621a      	str	r2, [r3, #32]
 littlefs_config.block_size = w25qxx.SectorSize;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <lfs_w25qflash_config_init+0x88>)
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 800092e:	6253      	str	r3, [r2, #36]	; 0x24
 littlefs_config.block_count = w25qxx.SectorCount;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <lfs_w25qflash_config_init+0x88>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a08      	ldr	r2, [pc, #32]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000936:	6293      	str	r3, [r2, #40]	; 0x28
 littlefs_config.block_cycles = 100;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 800093a:	2264      	movs	r2, #100	; 0x64
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
 littlefs_config.cache_size = LITTLEFS_CACHE_SIZE;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
 littlefs_config.lookahead_size = LITTLEFS_LOOKAHEAD_SIZE;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <lfs_w25qflash_config_init+0x6c>)
 8000948:	2210      	movs	r2, #16
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000504 	.word	0x20000504
 800095c:	08000979 	.word	0x08000979
 8000960:	080009b9 	.word	0x080009b9
 8000964:	080009f9 	.word	0x080009f9
 8000968:	08000a13 	.word	0x08000a13
 800096c:	08000b5d 	.word	0x08000b5d
 8000970:	08000b9d 	.word	0x08000b9d
 8000974:	200107dc 	.word	0x200107dc

08000978 <lfs_w25qflash_read>:


/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de leitura
 */
int lfs_w25qflash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]

	if (W25qxx_ReadSector((uint8_t*) buffer, block, off, size)) {
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f01e fcad 	bl	801f2ec <W25qxx_ReadSector>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d007      	beq.n	80009a8 <lfs_w25qflash_read+0x30>

		LOG2("Leitura da flash no  - bloco %lu - off %lu - %lu bytes lidos\r\n", block, off, size);
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <lfs_w25qflash_read+0x3c>)
 80009a0:	f01e ff84 	bl	801f8ac <iprintf>

		return LFS_ERR_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	e001      	b.n	80009ac <lfs_w25qflash_read+0x34>

	} else {

	  return LFS_ERR_CORRUPT;
 80009a8:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	08020adc 	.word	0x08020adc

080009b8 <lfs_w25qflash_prog>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de escrita
 */

int lfs_w25qflash_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	603b      	str	r3, [r7, #0]

	if (W25qxx_WriteSector((uint8_t*) buffer, block, off, size)) {
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	6838      	ldr	r0, [r7, #0]
 80009ce:	f01e fbab 	bl	801f128 <W25qxx_WriteSector>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d007      	beq.n	80009e8 <lfs_w25qflash_prog+0x30>

		LOG2("Escrita da flash no - bloco %lu - off %lu  - %lu bytes escritos\r\n", block, off, size);
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <lfs_w25qflash_prog+0x3c>)
 80009e0:	f01e ff64 	bl	801f8ac <iprintf>

		return LFS_ERR_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	e001      	b.n	80009ec <lfs_w25qflash_prog+0x34>

	} else {

		return LFS_ERR_CORRUPT;
 80009e8:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08020b1c 	.word	0x08020b1c

080009f8 <lfs_w25qflash_erase>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de apagamento (erase)
 */
int lfs_w25qflash_erase(const struct lfs_config *c, lfs_block_t block) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]

  	 W25qxx_EraseSector(block);
 8000a02:	6838      	ldr	r0, [r7, #0]
 8000a04:	f01e fa9c 	bl	801ef40 <W25qxx_EraseSector>
	return LFS_ERR_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <lfs_w25qflash_sync>:
/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de sincronismo
 * 		  (para a Flash NAND esta função não é necessária, apenas retorna OK)
 */

int lfs_w25qflash_sync(const struct lfs_config *c) {
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]

	return LFS_ERR_OK;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <lfs_get_default_config>:


int lfs_get_default_config(struct lfs_config *lfsc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

	lfs_w25qflash_config_init();
 8000a30:	f7ff ff5c 	bl	80008ec <lfs_w25qflash_config_init>

    *lfsc = littlefs_config; /* copy pre-initialized lfs config structure */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <lfs_get_default_config+0x28>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	2354      	movs	r3, #84	; 0x54
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f01f f999 	bl	801fd76 <memcpy>
    return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000504 	.word	0x20000504

08000a54 <lfs_storage_init>:

int lfs_storage_init(const struct lfs_config *lfsc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    uint16_t status;

    /* initialize mflash */
    status = W25qxx_Init();
 8000a5c:	f01e f99e 	bl	801ed9c <W25qxx_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	81fb      	strh	r3, [r7, #14]

    return status;
 8000a64:	89fb      	ldrh	r3, [r7, #14]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <osKernelGetState>:
//*** cmsis_os2.c
#define IS_IRQ_MODE()             (__get_IPSR() != 0U)
#define IS_IRQ()                  IS_IRQ_MODE()

//*** cmsis_os2.c
osKernelState_t osKernelGetState (void) {
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8000a74:	f007 fce2 	bl	800843c <xTaskGetSchedulerState>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d004      	beq.n	8000a88 <osKernelGetState+0x1a>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d105      	bne.n	8000a8e <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning_enum;
 8000a82:	2302      	movs	r3, #2
 8000a84:	607b      	str	r3, [r7, #4]
      break;
 8000a86:	e005      	b.n	8000a94 <osKernelGetState+0x26>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	607b      	str	r3, [r7, #4]
      break;
 8000a8c:	e002      	b.n	8000a94 <osKernelGetState+0x26>
    case taskSCHEDULER_NOT_STARTED:
    default:
      //if (KernelState == osKernelReady) {
      //  state = osKernelReady;
      //} else {
        state = osKernelInactive;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
      //}
      break;
 8000a92:	bf00      	nop
  }

  return (state);
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <osKernelLock>:

//*** cmsis_os2.c
int32_t osKernelLock (void) {
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000aa4:	f3ef 8305 	mrs	r3, IPSR
 8000aa8:	603b      	str	r3, [r7, #0]
  return(result);
 8000aaa:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <osKernelLock+0x18>
    lock = (int32_t)osErrorISR;
 8000ab0:	2382      	movs	r3, #130	; 0x82
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	e013      	b.n	8000ade <osKernelLock+0x40>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8000ab6:	f007 fcc1 	bl	800843c <xTaskGetSchedulerState>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <osKernelLock+0x28>
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d003      	beq.n	8000acc <osKernelLock+0x2e>
 8000ac4:	e007      	b.n	8000ad6 <osKernelLock+0x38>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
        break;
 8000aca:	e008      	b.n	8000ade <osKernelLock+0x40>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8000acc:	f007 f8ec 	bl	8007ca8 <vTaskSuspendAll>
        lock = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
        break;
 8000ad4:	e003      	b.n	8000ade <osKernelLock+0x40>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ada:	607b      	str	r3, [r7, #4]
        break;
 8000adc:	bf00      	nop
    }
  }

  return (lock);
 8000ade:	687b      	ldr	r3, [r7, #4]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <osKernelRestoreLock>:

  return (lock);
}

//*** cmsis_os2.c
int32_t osKernelRestoreLock (int32_t lock) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000af0:	f3ef 8305 	mrs	r3, IPSR
 8000af4:	60fb      	str	r3, [r7, #12]
  return(result);
 8000af6:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <osKernelRestoreLock+0x1a>
    lock = (int32_t)osErrorISR;
 8000afc:	2382      	movs	r3, #130	; 0x82
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	e026      	b.n	8000b50 <osKernelRestoreLock+0x68>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8000b02:	f007 fc9b 	bl	800843c <xTaskGetSchedulerState>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <osKernelRestoreLock+0x28>
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d11a      	bne.n	8000b46 <osKernelRestoreLock+0x5e>
      case taskSCHEDULER_SUSPENDED:
      case taskSCHEDULER_RUNNING:
        if (lock == 1) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d102      	bne.n	8000b1c <osKernelRestoreLock+0x34>
          vTaskSuspendAll();
 8000b16:	f007 f8c7 	bl	8007ca8 <vTaskSuspendAll>
                lock = (int32_t)osError;
              }
            }
          }
        }
        break;
 8000b1a:	e018      	b.n	8000b4e <osKernelRestoreLock+0x66>
          if (lock != 0) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <osKernelRestoreLock+0x42>
            lock = (int32_t)osError;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b26:	607b      	str	r3, [r7, #4]
        break;
 8000b28:	e011      	b.n	8000b4e <osKernelRestoreLock+0x66>
            if (xTaskResumeAll() != pdTRUE) {
 8000b2a:	f007 f8cb 	bl	8007cc4 <xTaskResumeAll>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d00c      	beq.n	8000b4e <osKernelRestoreLock+0x66>
              if (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) {
 8000b34:	f007 fc82 	bl	800843c <xTaskGetSchedulerState>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d007      	beq.n	8000b4e <osKernelRestoreLock+0x66>
                lock = (int32_t)osError;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b42:	607b      	str	r3, [r7, #4]
        break;
 8000b44:	e003      	b.n	8000b4e <osKernelRestoreLock+0x66>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4a:	607b      	str	r3, [r7, #4]
        break;
 8000b4c:	e000      	b.n	8000b50 <osKernelRestoreLock+0x68>
        break;
 8000b4e:	bf00      	nop
    }
  }

  return (lock);
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <lfs_lock>:

/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de LOCK
 */
int lfs_lock(const struct lfs_config *c)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 8000b64:	f7ff ff83 	bl	8000a6e <osKernelGetState>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <lfs_lock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e00e      	b.n	8000b90 <lfs_lock+0x34>
	}

	rtos_lockState = osKernelLock();
 8000b72:	f7ff ff94 	bl	8000a9e <osKernelLock>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <lfs_lock+0x3c>)
 8000b7a:	6013      	str	r3, [r2, #0]
	int ret = LFS_ERR_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]

	if (rtos_lockState < 0)
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <lfs_lock+0x3c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da02      	bge.n	8000b8e <lfs_lock+0x32>
	{
		ret = LFS_ERR_IO;
 8000b88:	f06f 0304 	mvn.w	r3, #4
 8000b8c:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000558 	.word	0x20000558

08000b9c <lfs_unlock>:
/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de UNLOCK
 */
int lfs_unlock(const struct lfs_config *c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 8000ba4:	f7ff ff63 	bl	8000a6e <osKernelGetState>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <lfs_unlock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e00e      	b.n	8000bd0 <lfs_unlock+0x34>
	}

	//int state = osKernelUnlock();
	int newLockState = osKernelRestoreLock(rtos_lockState);
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <lfs_unlock+0x3c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff96 	bl	8000ae8 <osKernelRestoreLock>
 8000bbc:	60b8      	str	r0, [r7, #8]
	int ret = LFS_ERR_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]

	if (newLockState < 0)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	da02      	bge.n	8000bce <lfs_unlock+0x32>
	{
		ret = LFS_ERR_IO;
 8000bc8:	f06f 0304 	mvn.w	r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000558 	.word	0x20000558

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 fe88 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f846 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f7ff fd9c 	bl	8000724 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000bec:	f000 fa3a 	bl	8001064 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000bf0:	f7ff fe06 	bl	8000800 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000bf4:	f000 fc82 	bl	80014fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfe:	481c      	ldr	r0, [pc, #112]	; (8000c70 <main+0x94>)
 8000c00:	f002 fbb8 	bl	8003374 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c04:	2032      	movs	r0, #50	; 0x32
 8000c06:	f000 feb7 	bl	8001978 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c10:	4817      	ldr	r0, [pc, #92]	; (8000c70 <main+0x94>)
 8000c12:	f002 fbaf 	bl	8003374 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c16:	2032      	movs	r0, #50	; 0x32
 8000c18:	f000 feae 	bl	8001978 <HAL_Delay>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c22:	4813      	ldr	r0, [pc, #76]	; (8000c70 <main+0x94>)
 8000c24:	f002 fba6 	bl	8003374 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c28:	2032      	movs	r0, #50	; 0x32
 8000c2a:	f000 fea5 	bl	8001978 <HAL_Delay>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c34:	480e      	ldr	r0, [pc, #56]	; (8000c70 <main+0x94>)
 8000c36:	f002 fb9d 	bl	8003374 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c3a:	2032      	movs	r0, #50	; 0x32
 8000c3c:	f000 fe9c 	bl	8001978 <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <main+0x94>)
 8000c48:	f002 fb94 	bl	8003374 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000c4c:	2032      	movs	r0, #50	; 0x32
 8000c4e:	f000 fe93 	bl	8001978 <HAL_Delay>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <main+0x94>)
 8000c5a:	f002 fb8b 	bl	8003374 <HAL_GPIO_WritePin>



  /*Initialize lib from winbond memory */
  FileSystemInit();
 8000c5e:	f7ff fca1 	bl	80005a4 <FileSystemInit>
  ModbusServerInit();
 8000c62:	f000 f9e3 	bl	800102c <ModbusServerInit>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c66:	f7ff fd37 	bl	80006d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c6a:	f005 f9e4 	bl	8006036 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <main+0x92>
 8000c70:	40021000 	.word	0x40021000

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	; 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2230      	movs	r2, #48	; 0x30
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f01e ff68 	bl	801fb58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <SystemClock_Config+0xcc>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <SystemClock_Config+0xcc>)
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <SystemClock_Config+0xcc>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ce4:	2319      	movs	r3, #25
 8000ce6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 316;
 8000ce8:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8000cec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fc98 	bl	8003630 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d06:	f000 f831 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2105      	movs	r1, #5
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fef9 	bl	8003b20 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d34:	f000 f81a 	bl	8000d6c <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	; 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d101      	bne.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5a:	f000 fded 	bl	8001938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40002000 	.word	0x40002000

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <Error_Handler+0x8>
	...

08000d78 <ModbusHandleConnection>:
osThreadId modbusTcpServerTaskHandle;


static uint8_t ModbusHandleConnection(struct netconn *connfd, uint8_t *alloc_rq)

{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8000d7e:	af02      	add	r7, sp, #8
 8000d80:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8000d84:	f5a4 7409 	sub.w	r4, r4, #548	; 0x224
 8000d88:	6020      	str	r0, [r4, #0]
 8000d8a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8000d8e:	f5a0 700a 	sub.w	r0, r0, #552	; 0x228
 8000d92:	6001      	str	r1, [r0, #0]

	/* Definir um tempo limite de recebimento (em milissegundos) */
	const uint32_t TIMEOUT_MS = 10000; // 10 segundos
 8000d94:	f242 7110 	movw	r1, #10000	; 0x2710
 8000d98:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
	char msg[512];
	/* Definir um tempo limite para o socket TCP */
	struct timeval timeout;
	timeout.tv_sec = TIMEOUT_MS / 1000;
 8000d9c:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8000da0:	4849      	ldr	r0, [pc, #292]	; (8000ec8 <ModbusHandleConnection+0x150>)
 8000da2:	fba0 0101 	umull	r0, r1, r0, r1
 8000da6:	0989      	lsrs	r1, r1, #6
 8000da8:	2000      	movs	r0, #0
 8000daa:	460a      	mov	r2, r1
 8000dac:	4603      	mov	r3, r0
 8000dae:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8000db2:	f5a1 7106 	sub.w	r1, r1, #536	; 0x218
 8000db6:	e9c1 2300 	strd	r2, r3, [r1]
	timeout.tv_usec = (TIMEOUT_MS % 1000) * 1000;
 8000dba:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000dbe:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <ModbusHandleConnection+0x150>)
 8000dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8000dc4:	099b      	lsrs	r3, r3, #6
 8000dc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dca:	fb01 f303 	mul.w	r3, r1, r3
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dd4:	fb02 f303 	mul.w	r3, r2, r3
 8000dd8:	461a      	mov	r2, r3
 8000dda:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000dde:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000de2:	609a      	str	r2, [r3, #8]
	lwip_setsockopt(connfd->socket, SOL_SOCKET, SO_RCVTIMEO, &timeout,sizeof(timeout));
 8000de4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000de8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6998      	ldr	r0, [r3, #24]
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	2210      	movs	r2, #16
 8000df6:	9200      	str	r2, [sp, #0]
 8000df8:	f241 0206 	movw	r2, #4102	; 0x1006
 8000dfc:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000e00:	f00f ff0a 	bl	8010c18 <lwip_setsockopt>
	while (1)
 	{
		// Receber dados do cliente com um tempo limite
		struct netbuf *inbuf;

		err_t err = netconn_recv(connfd, &inbuf);
 8000e04:	f107 020c 	add.w	r2, r7, #12
 8000e08:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e0c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000e10:	4611      	mov	r1, r2
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	f00e f8e6 	bl	800efe4 <netconn_recv>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223


	    if (err == ERR_OK)
 8000e1e:	f997 3223 	ldrsb.w	r3, [r7, #547]	; 0x223
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d144      	bne.n	8000eb0 <ModbusHandleConnection+0x138>
		{
			if (netconn_err(connfd) == ERR_OK)
 8000e26:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e2a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	f00e fa61 	bl	800f2f6 <netconn_err>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d13c      	bne.n	8000eb4 <ModbusHandleConnection+0x13c>
			{
				/* Process received data */
				netbuf_copy(inbuf, msg, sizeof(msg));
 8000e3a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e3e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	f107 0120 	add.w	r1, r7, #32
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e50:	f012 f8c2 	bl	8012fd8 <pbuf_copy_partial>
				u16_t buffer_len = netbuf_len(inbuf);
 8000e54:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e58:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	891b      	ldrh	r3, [r3, #8]
 8000e62:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
				printf("Received data: %s\r\n", msg);
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <ModbusHandleConnection+0x154>)
 8000e6e:	f01e fd1d 	bl	801f8ac <iprintf>
				InterpreterMODBUS(msg, buffer_len);
 8000e72:	f8b7 2220 	ldrh.w	r2, [r7, #544]	; 0x220
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f01d fd2f 	bl	801e8e0 <InterpreterMODBUS>

				// Enviar a resposta de volta para o cliente
				 netconn_write(connfd, msg, buffer_len, NETCONN_COPY);
 8000e82:	f8b7 2220 	ldrh.w	r2, [r7, #544]	; 0x220
 8000e86:	f107 0120 	add.w	r1, r7, #32
 8000e8a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000e8e:	f5a3 7009 	sub.w	r0, r3, #548	; 0x224
 8000e92:	2300      	movs	r3, #0
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2301      	movs	r3, #1
 8000e98:	6800      	ldr	r0, [r0, #0]
 8000e9a:	f00e f91d 	bl	800f0d8 <netconn_write_partly>


				netbuf_delete(inbuf);
 8000e9e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000ea2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00f fe15 	bl	8010ad8 <netbuf_delete>
				continue;
 8000eae:	e004      	b.n	8000eba <ModbusHandleConnection+0x142>

		osDelay(1);
	}

	// Se saímos do loop, significa que a conexão foi encerrada ou ocorreu um erro
	return 1; // Retornar 1 para indicar que a conexão foi fechada
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e003      	b.n	8000ebc <ModbusHandleConnection+0x144>
		osDelay(1);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f005 f921 	bl	80060fc <osDelay>
 	{
 8000eba:	e7a3      	b.n	8000e04 <ModbusHandleConnection+0x8c>

}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	10624dd3 	.word	0x10624dd3
 8000ecc:	08020b60 	.word	0x08020b60

08000ed0 <ModbusTcpSeverTask>:




void ModbusTcpSeverTask(void const *argument)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0ca      	sub	sp, #296	; 0x128
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000eda:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ede:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN TcpSeverTask */
	struct netconn *conn, *newconn;
	struct netbuf *buf;
	uint8_t *alloc_rq;
	char msg[256];
	uint8_t i = MODBUS_CLOSED;/*keep session information*/
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

	  if (((ResponseBuffer = (char*) malloc(BLOCK_SIZE)) == NULL) || ((alloc_rq = (uint8_t*) malloc( FTP_REQUEST_SPACE)) == NULL))
 8000ee6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eea:	f01e fa85 	bl	801f3f8 <malloc>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b46      	ldr	r3, [pc, #280]	; (800100c <ModbusTcpSeverTask+0x13c>)
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	4b45      	ldr	r3, [pc, #276]	; (800100c <ModbusTcpSeverTask+0x13c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00a      	beq.n	8000f14 <ModbusTcpSeverTask+0x44>
 8000efe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f02:	f01e fa79 	bl	801f3f8 <malloc>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000f0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10b      	bne.n	8000f2c <ModbusTcpSeverTask+0x5c>
	  {
	    free(ResponseBuffer);
 8000f14:	4b3d      	ldr	r3, [pc, #244]	; (800100c <ModbusTcpSeverTask+0x13c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f01e fa75 	bl	801f408 <free>
	    free(alloc_rq);
 8000f1e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000f22:	f01e fa71 	bl	801f408 <free>
	    /*Task no longer needed, delete it!*/
	    vTaskDelete( NULL);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f006 fd90 	bl	8007a4c <vTaskDelete>
	  }


	/* Create a new TCP connection handle. */
	conn = netconn_new(NETCONN_TCP);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2010      	movs	r0, #16
 8000f32:	f00d fd31 	bl	800e998 <netconn_new_with_proto_and_callback>
 8000f36:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

	/* Check if the connection handle was created successfully */
	if (conn == NULL)
 8000f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d103      	bne.n	8000f4a <ModbusTcpSeverTask+0x7a>
	{
		/* Handle error */
		printf("Failed to create TCP connection handle\r\n");
 8000f42:	4833      	ldr	r0, [pc, #204]	; (8001010 <ModbusTcpSeverTask+0x140>)
 8000f44:	f01e fd18 	bl	801f978 <puts>
		return;
 8000f48:	e05b      	b.n	8001002 <ModbusTcpSeverTask+0x132>
	}

	/* Bind the connection to the specified port. */
	if (netconn_bind(conn, IP_ADDR_ANY, MODBUS_SERVER_TCP_PORT) != ERR_OK)
 8000f4a:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8000f4e:	4931      	ldr	r1, [pc, #196]	; (8001014 <ModbusTcpSeverTask+0x144>)
 8000f50:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8000f54:	f00d fdda 	bl	800eb0c <netconn_bind>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d009      	beq.n	8000f72 <ModbusTcpSeverTask+0xa2>
	{
		/* Handle error */
		printf("Failed to bind to port %d\r\n", MODBUS_SERVER_TCP_PORT);
 8000f5e:	f245 51f0 	movw	r1, #22000	; 0x55f0
 8000f62:	482d      	ldr	r0, [pc, #180]	; (8001018 <ModbusTcpSeverTask+0x148>)
 8000f64:	f01e fca2 	bl	801f8ac <iprintf>
		netconn_delete(conn);
 8000f68:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8000f6c:	f00d fdb2 	bl	800ead4 <netconn_delete>
		return;
 8000f70:	e047      	b.n	8001002 <ModbusTcpSeverTask+0x132>
	}

	/* Put the connection into LISTEN state. */
	if (netconn_listen(conn) != ERR_OK)
 8000f72:	21ff      	movs	r1, #255	; 0xff
 8000f74:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8000f78:	f00d fe00 	bl	800eb7c <netconn_listen_with_backlog>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <ModbusTcpSeverTask+0xc2>
	{
		/* Handle error */
		printf("Failed to put the connection into LISTEN state\r\n");
 8000f82:	4826      	ldr	r0, [pc, #152]	; (800101c <ModbusTcpSeverTask+0x14c>)
 8000f84:	f01e fcf8 	bl	801f978 <puts>
		netconn_delete(conn);
 8000f88:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8000f8c:	f00d fda2 	bl	800ead4 <netconn_delete>
		return;
 8000f90:	e037      	b.n	8001002 <ModbusTcpSeverTask+0x132>
	}

	printf("TCP server listening on port %d\r\n", MODBUS_SERVER_TCP_PORT);
 8000f92:	f245 51f0 	movw	r1, #22000	; 0x55f0
 8000f96:	4822      	ldr	r0, [pc, #136]	; (8001020 <ModbusTcpSeverTask+0x150>)
 8000f98:	f01e fc88 	bl	801f8ac <iprintf>

	/* Infinite loop */
	for (;;)
	{
		if (i == MODBUS_CLOSED)
 8000f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d110      	bne.n	8000fc6 <ModbusTcpSeverTask+0xf6>

		{
			if (netconn_accept(conn, &newconn) == ERR_OK)
 8000fa4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8000fae:	f00d fe11 	bl	800ebd4 <netconn_accept>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d120      	bne.n	8000ffa <ModbusTcpSeverTask+0x12a>
			{

				i = MODBUS_OPEN;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				printf("New connection established\r\n");
 8000fbe:	4819      	ldr	r0, [pc, #100]	; (8001024 <ModbusTcpSeverTask+0x154>)
 8000fc0:	f01e fcda 	bl	801f978 <puts>
 8000fc4:	e019      	b.n	8000ffa <ModbusTcpSeverTask+0x12a>
				}
			}
		}
		else
		{
			if (ModbusHandleConnection(newconn, alloc_rq))
 8000fc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fca:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fed2 	bl	8000d78 <ModbusHandleConnection>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00f      	beq.n	8000ffa <ModbusTcpSeverTask+0x12a>
			{
				i = MODBUS_CLOSED;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
				netconn_close(newconn);
 8000fe0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f00e f979 	bl	800f2dc <netconn_close>
				netconn_delete(newconn);
 8000fea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00d fd70 	bl	800ead4 <netconn_delete>
				printf("Conection closed \r\n");
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <ModbusTcpSeverTask+0x158>)
 8000ff6:	f01e fcbf 	bl	801f978 <puts>

			}
		}

		/* Delay for a short period */
		osDelay(100);
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f005 f87e 	bl	80060fc <osDelay>
		if (i == MODBUS_CLOSED)
 8001000:	e7cc      	b.n	8000f9c <ModbusTcpSeverTask+0xcc>
	}

}
 8001002:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000055c 	.word	0x2000055c
 8001010:	08020b74 	.word	0x08020b74
 8001014:	080251e8 	.word	0x080251e8
 8001018:	08020b9c 	.word	0x08020b9c
 800101c:	08020bb8 	.word	0x08020bb8
 8001020:	08020be8 	.word	0x08020be8
 8001024:	08020c0c 	.word	0x08020c0c
 8001028:	08020c28 	.word	0x08020c28

0800102c <ModbusServerInit>:
}



void ModbusServerInit()
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
	/* definition and creation of tcpServerTask */
	osThreadDef(tcpServerTask, ModbusTcpSeverTask, osPriorityBelowNormal, 0, MODBUS_SERVER_TASK_STACK_SIZE);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <ModbusServerInit+0x30>)
 8001034:	1d3c      	adds	r4, r7, #4
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	modbusTcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f005 f80b 	bl	8006064 <osThreadCreate>
 800104e:	4603      	mov	r3, r0
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <ModbusServerInit+0x34>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bdb0      	pop	{r4, r5, r7, pc}
 800105c:	08020c4c 	.word	0x08020c4c
 8001060:	20000560 	.word	0x20000560

08001064 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_SPI2_Init+0x64>)
 800106a:	4a18      	ldr	r2, [pc, #96]	; (80010cc <MX_SPI2_Init+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_SPI2_Init+0x64>)
 8001070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001074:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_SPI2_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_SPI2_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_SPI2_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_SPI2_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_SPI2_Init+0x64>)
 8001090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001094:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_SPI2_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_SPI2_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_SPI2_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_SPI2_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_SPI2_Init+0x64>)
 80010b0:	220a      	movs	r2, #10
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_SPI2_Init+0x64>)
 80010b6:	f002 ff45 	bl	8003f44 <HAL_SPI_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010c0:	f7ff fe54 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000564 	.word	0x20000564
 80010cc:	40003800 	.word	0x40003800

080010d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <HAL_SPI_MspInit+0xc0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d14a      	bne.n	8001188 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b27      	ldr	r3, [pc, #156]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a26      	ldr	r2, [pc, #152]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001146:	230c      	movs	r3, #12
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001156:	2305      	movs	r3, #5
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <HAL_SPI_MspInit+0xc8>)
 8001162:	f001 ff6b 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001178:	2305      	movs	r3, #5
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <HAL_SPI_MspInit+0xcc>)
 8001184:	f001 ff5a 	bl	800303c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40003800 	.word	0x40003800
 8001194:	40023800 	.word	0x40023800
 8001198:	40020800 	.word	0x40020800
 800119c:	40020400 	.word	0x40020400

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_MspInit+0x54>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <HAL_MspInit+0x54>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_MspInit+0x54>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_MspInit+0x54>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_MspInit+0x54>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_MspInit+0x54>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	210f      	movs	r1, #15
 80011e2:	f06f 0001 	mvn.w	r0, #1
 80011e6:	f000 fca3 	bl	8001b30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	4b33      	ldr	r3, [pc, #204]	; (80012dc <HAL_InitTick+0xe4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	4a32      	ldr	r2, [pc, #200]	; (80012dc <HAL_InitTick+0xe4>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6413      	str	r3, [r2, #64]	; 0x40
 8001218:	4b30      	ldr	r3, [pc, #192]	; (80012dc <HAL_InitTick+0xe4>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001224:	f107 0210 	add.w	r2, r7, #16
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f002 fe56 	bl	8003ee0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	2b00      	cmp	r3, #0
 800123c:	d103      	bne.n	8001246 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800123e:	f002 fe27 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8001242:	6378      	str	r0, [r7, #52]	; 0x34
 8001244:	e004      	b.n	8001250 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001246:	f002 fe23 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 800124a:	4603      	mov	r3, r0
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001252:	4a23      	ldr	r2, [pc, #140]	; (80012e0 <HAL_InitTick+0xe8>)
 8001254:	fba2 2303 	umull	r2, r3, r2, r3
 8001258:	0c9b      	lsrs	r3, r3, #18
 800125a:	3b01      	subs	r3, #1
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_InitTick+0xec>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <HAL_InitTick+0xf0>)
 8001262:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <HAL_InitTick+0xec>)
 8001266:	f240 32e7 	movw	r2, #999	; 0x3e7
 800126a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <HAL_InitTick+0xec>)
 800126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001270:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_InitTick+0xec>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_InitTick+0xec>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_InitTick+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <HAL_InitTick+0xec>)
 8001286:	f003 fc33 	bl	8004af0 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11b      	bne.n	80012d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001298:	4812      	ldr	r0, [pc, #72]	; (80012e4 <HAL_InitTick+0xec>)
 800129a:	f003 fc83 	bl	8004ba4 <HAL_TIM_Base_Start_IT>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d111      	bne.n	80012d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80012ac:	202d      	movs	r0, #45	; 0x2d
 80012ae:	f000 fc5b 	bl	8001b68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d808      	bhi.n	80012ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	202d      	movs	r0, #45	; 0x2d
 80012be:	f000 fc37 	bl	8001b30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_InitTick+0xf4>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e002      	b.n	80012d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	200005bc 	.word	0x200005bc
 80012e8:	40002000 	.word	0x40002000
 80012ec:	20000004 	.word	0x20000004

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001322:	f003 fcaf 	bl	8004c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200005bc 	.word	0x200005bc

08001330 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <ETH_IRQHandler+0x10>)
 8001336:	f000 ffab 	bl	8002290 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000516c 	.word	0x2000516c

08001344 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return 1;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_kill>:

int _kill(int pid, int sig)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <_kill+0x20>)
 8001360:	2216      	movs	r2, #22
 8001362:	601a      	str	r2, [r3, #0]
  return -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	20010948 	.word	0x20010948

08001378 <_exit>:

void _exit (int status)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ffe5 	bl	8001354 <_kill>
  while (1) {}    /* Make sure we hang here */
 800138a:	e7fe      	b.n	800138a <_exit+0x12>

0800138c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e00a      	b.n	80013b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139e:	f3af 8000 	nop.w
 80013a2:	4601      	mov	r1, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	b2ca      	uxtb	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf0      	blt.n	800139e <_read+0x12>
  }

  return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e009      	b.n	80013ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbf1      	blt.n	80013d8 <_write+0x12>
  }
  return len;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_close>:

int _close(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001426:	605a      	str	r2, [r3, #4]
  return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_isatty>:

int _isatty(int file)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d205      	bcs.n	80014a4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <_sbrk+0x6c>)
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	20020000 	.word	0x20020000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	20000604 	.word	0x20000604
 80014d0:	20010950 	.word	0x20010950
 80014d4:	20010948 	.word	0x20010948

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_USART1_UART_Init+0x4c>)
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <MX_USART1_UART_Init+0x50>)
 8001504:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <MX_USART1_UART_Init+0x4c>)
 8001508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800150c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_USART1_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_USART1_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_USART1_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_USART1_UART_Init+0x4c>)
 8001522:	220c      	movs	r2, #12
 8001524:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_USART1_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_USART1_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_USART1_UART_Init+0x4c>)
 8001534:	f003 fd7e 	bl	8005034 <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800153e:	f7ff fc15 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000608 	.word	0x20000608
 800154c:	40011000 	.word	0x40011000

08001550 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_UART_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12c      	bne.n	80015cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_UART_MspInit+0x88>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_UART_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015bc:	2307      	movs	r3, #7
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <HAL_UART_MspInit+0x8c>)
 80015c8:	f001 fd38 	bl	800303c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015cc:	bf00      	nop
 80015ce:	3728      	adds	r7, #40	; 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015e4:	f7ff ff78 	bl	80014d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	; (800162c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160e:	f01e fb8b 	bl	801fd28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fae3 	bl	8000bdc <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001624:	080253f8 	.word	0x080253f8
  ldr r2, =_sbss
 8001628:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800162c:	20010950 	.word	0x20010950

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>

08001632 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <DP83848_RegisterBusIO+0x28>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <DP83848_RegisterBusIO+0x28>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <DP83848_RegisterBusIO+0x28>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800165e:	e014      	b.n	800168a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d17c      	bne.n	80017b0 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e01c      	b.n	800170a <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f107 0208 	add.w	r2, r7, #8
 80016d8:	2119      	movs	r1, #25
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	4798      	blx	r3
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da03      	bge.n	80016ec <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80016e4:	f06f 0304 	mvn.w	r3, #4
 80016e8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80016ea:	e00b      	b.n	8001704 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d105      	bne.n	8001704 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
         break;
 8001702:	e005      	b.n	8001710 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b1f      	cmp	r3, #31
 800170e:	d9df      	bls.n	80016d0 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b1f      	cmp	r3, #31
 8001716:	d902      	bls.n	800171e <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001718:	f06f 0302 	mvn.w	r3, #2
 800171c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d145      	bne.n	80017b0 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6810      	ldr	r0, [r2, #0]
 800172c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001730:	2100      	movs	r1, #0
 8001732:	4798      	blx	r3
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	db37      	blt.n	80017aa <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6810      	ldr	r0, [r2, #0]
 8001742:	f107 0208 	add.w	r2, r7, #8
 8001746:	2100      	movs	r1, #0
 8001748:	4798      	blx	r3
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	db28      	blt.n	80017a2 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4798      	blx	r3
 8001756:	4603      	mov	r3, r0
 8001758:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800175a:	e01c      	b.n	8001796 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4798      	blx	r3
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800176e:	d80e      	bhi.n	800178e <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6810      	ldr	r0, [r2, #0]
 8001778:	f107 0208 	add.w	r2, r7, #8
 800177c:	2100      	movs	r1, #0
 800177e:	4798      	blx	r3
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	da07      	bge.n	8001796 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8001786:	f06f 0304 	mvn.w	r3, #4
 800178a:	613b      	str	r3, [r7, #16]
                 break;
 800178c:	e010      	b.n	80017b0 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 800178e:	f06f 0301 	mvn.w	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
               break;
 8001794:	e00c      	b.n	80017b0 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1dd      	bne.n	800175c <DP83848_Init+0xc6>
 80017a0:	e006      	b.n	80017b0 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80017a2:	f06f 0304 	mvn.w	r3, #4
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	e002      	b.n	80017b0 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80017aa:	f06f 0303 	mvn.w	r3, #3
 80017ae:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d112      	bne.n	80017dc <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4798      	blx	r3
 80017bc:	4603      	mov	r3, r0
 80017be:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80017c0:	bf00      	nop
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	4798      	blx	r3
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017d4:	d9f5      	bls.n	80017c2 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	605a      	str	r2, [r3, #4]
   }

   return status;
 80017dc:	693b      	ldr	r3, [r7, #16]
 }
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6810      	ldr	r0, [r2, #0]
 80017fa:	f107 020c 	add.w	r2, r7, #12
 80017fe:	2101      	movs	r1, #1
 8001800:	4798      	blx	r3
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	da02      	bge.n	800180e <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001808:	f06f 0304 	mvn.w	r3, #4
 800180c:	e06e      	b.n	80018ec <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6810      	ldr	r0, [r2, #0]
 8001816:	f107 020c 	add.w	r2, r7, #12
 800181a:	2101      	movs	r1, #1
 800181c:	4798      	blx	r3
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	da02      	bge.n	800182a <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001824:	f06f 0304 	mvn.w	r3, #4
 8001828:	e060      	b.n	80018ec <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001834:	2301      	movs	r3, #1
 8001836:	e059      	b.n	80018ec <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6810      	ldr	r0, [r2, #0]
 8001840:	f107 020c 	add.w	r2, r7, #12
 8001844:	2100      	movs	r1, #0
 8001846:	4798      	blx	r3
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	da02      	bge.n	8001854 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800184e:	f06f 0304 	mvn.w	r3, #4
 8001852:	e04b      	b.n	80018ec <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11b      	bne.n	8001896 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <DP83848_GetLinkState+0x90>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001872:	2302      	movs	r3, #2
 8001874:	e03a      	b.n	80018ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001880:	2303      	movs	r3, #3
 8001882:	e033      	b.n	80018ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800188e:	2304      	movs	r3, #4
 8001890:	e02c      	b.n	80018ec <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001892:	2305      	movs	r3, #5
 8001894:	e02a      	b.n	80018ec <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6810      	ldr	r0, [r2, #0]
 800189e:	f107 020c 	add.w	r2, r7, #12
 80018a2:	2110      	movs	r1, #16
 80018a4:	4798      	blx	r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da02      	bge.n	80018b2 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80018ac:	f06f 0304 	mvn.w	r3, #4
 80018b0:	e01c      	b.n	80018ec <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80018bc:	2306      	movs	r3, #6
 80018be:	e015      	b.n	80018ec <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0306 	and.w	r3, r3, #6
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d101      	bne.n	80018ce <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80018ca:	2302      	movs	r3, #2
 80018cc:	e00e      	b.n	80018ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 0306 	and.w	r3, r3, #6
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80018d8:	2303      	movs	r3, #3
 80018da:	e007      	b.n	80018ec <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0306 	and.w	r3, r3, #6
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d101      	bne.n	80018ea <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80018e6:	2304      	movs	r3, #4
 80018e8:	e000      	b.n	80018ec <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80018ea:	2305      	movs	r3, #5
    }
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f8fc 	bl	8001b1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	200f      	movs	r0, #15
 8001924:	f7ff fc68 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fc3a 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008
 800195c:	20000650 	.word	0x20000650

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000650 	.word	0x20000650

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff4c 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b42:	f7ff ff61 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f7ff ffb1 	bl	8001ab4 <NVIC_EncodePriority>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff80 	bl	8001a60 <__NVIC_SetPriority>
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff54 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06c      	b.n	8001c70 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d106      	bne.n	8001bae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2223      	movs	r2, #35	; 0x23
 8001ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f004 f815 	bl	8005bd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_ETH_Init+0xf4>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_ETH_Init+0xf4>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_ETH_Init+0xf4>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_ETH_Init+0xf8>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <HAL_ETH_Init+0xf8>)
 8001bd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_ETH_Init+0xf8>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4927      	ldr	r1, [pc, #156]	; (8001c7c <HAL_ETH_Init+0xf8>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_ETH_Init+0xf8>)
 8001be6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c00:	f7ff feae 	bl	8001960 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c06:	e011      	b.n	8001c2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c08:	f7ff feaa 	bl	8001960 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c16:	d909      	bls.n	8001c2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	22e0      	movs	r2, #224	; 0xe0
 8001c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e021      	b.n	8001c70 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1e4      	bne.n	8001c08 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 ff56 	bl	8002af0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fffd 	bl	8002c44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f001 f853 	bl	8002cf6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	461a      	mov	r2, r3
 8001c56:	2100      	movs	r1, #0
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 ffbb 	bl	8002bd4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2210      	movs	r2, #16
 8001c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800

08001c80 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d17f      	bne.n	8001d92 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2223      	movs	r2, #35	; 0x23
 8001c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cc4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001cd8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f9f8 	bl	80020d8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0208 	orr.w	r2, r2, #8
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff fe39 	bl	8001978 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0204 	orr.w	r2, r2, #4
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f7ff fe26 	bl	8001978 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fd7c 	bl	8002832 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d50:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d68:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001d7c:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001d80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d84:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2223      	movs	r2, #35	; 0x23
 8001d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
  }
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001daa:	2b23      	cmp	r3, #35	; 0x23
 8001dac:	d170      	bne.n	8001e90 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2223      	movs	r2, #35	; 0x23
 8001db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001dc8:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001dcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dd0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001de4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001de8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	f023 0302 	bic.w	r3, r3, #2
 8001dfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e00:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0204 	bic.w	r2, r2, #4
 8001e10:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f7ff fdac 	bl	8001978 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fd02 	bl	8002832 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0208 	bic.w	r2, r2, #8
 8001e3c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7ff fd96 	bl	8001978 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e00e      	b.n	8001e78 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	3212      	adds	r2, #18
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d9ed      	bls.n	8001e5a <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2210      	movs	r2, #16
 8001e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e045      	b.n	8001f4a <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ec4:	2b23      	cmp	r3, #35	; 0x23
 8001ec6:	d13f      	bne.n	8001f48 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	6839      	ldr	r1, [r7, #0]
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 ff7b 	bl	8002dd0 <ETH_Prepare_Tx_Descriptors>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee6:	f043 0202 	orr.w	r2, r3, #2
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e02a      	b.n	8001f4a <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ef4:	f3bf 8f4f 	dsb	sy
}
 8001ef8:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d904      	bls.n	8001f16 <HAL_ETH_Transmit_IT+0x7c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	1f1a      	subs	r2, r3, #4
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00d      	beq.n	8001f44 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f30:	461a      	mov	r2, r3
 8001f32:	2304      	movs	r3, #4
 8001f34:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b088      	sub	sp, #32
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0a8      	b.n	80020d0 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f84:	2b23      	cmp	r3, #35	; 0x23
 8001f86:	d001      	beq.n	8001f8c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0a1      	b.n	80020d0 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	3212      	adds	r2, #18
 8001f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa2:	f1c3 0304 	rsb	r3, r3, #4
 8001fa6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fa8:	e06a      	b.n	8002080 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <HAL_ETH_ReadData+0x88>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d040      	beq.n	800205c <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00c      	beq.n	800201e <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800200e:	3b04      	subs	r3, #4
 8002010:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002036:	461a      	mov	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f003 ff86 	bl	8005f4c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	441a      	add	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3301      	adds	r3, #1
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d902      	bls.n	800206e <HAL_ETH_ReadData+0x11c>
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3b04      	subs	r3, #4
 800206c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	3212      	adds	r2, #18
 8002074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002078:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002084:	2b00      	cmp	r3, #0
 8002086:	db06      	blt.n	8002096 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	d202      	bcs.n	8002096 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d089      	beq.n	8001faa <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	441a      	add	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f814 	bl	80020d8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80020e4:	2301      	movs	r3, #1
 80020e6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ec:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	3212      	adds	r2, #18
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fe:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002100:	e03d      	b.n	800217e <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d112      	bne.n	8002130 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	4618      	mov	r0, r3
 8002110:	f003 feec 	bl	8005eec <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	74fb      	strb	r3, [r7, #19]
 800211e:	e007      	b.n	8002130 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	461a      	mov	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	461a      	mov	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d023      	beq.n	800217e <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	2b00      	cmp	r3, #0
 800213c:	d103      	bne.n	8002146 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <ETH_UpdateDescriptor+0xfc>)
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	e003      	b.n	800214e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800214c:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d902      	bls.n	800216c <ETH_UpdateDescriptor+0x94>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b04      	subs	r3, #4
 800216a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	3212      	adds	r2, #18
 8002172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002176:	617b      	str	r3, [r7, #20]
      desccount--;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	3b01      	subs	r3, #1
 800217c:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <ETH_UpdateDescriptor+0xb2>
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1bb      	bne.n	8002102 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	429a      	cmp	r2, r3
 8002192:	d01a      	beq.n	80021ca <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3301      	adds	r3, #1
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800219e:	f3bf 8f5f 	dmb	sy
}
 80021a2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6919      	ldr	r1, [r3, #16]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	18ca      	adds	r2, r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021bc:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80021ca:	bf00      	nop
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	80004600 	.word	0x80004600

080021d8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3318      	adds	r3, #24
 80021e4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80021f6:	e03f      	b.n	8002278 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3b01      	subs	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	3304      	adds	r3, #4
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	3301      	adds	r3, #1
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002220:	7bbb      	ldrb	r3, [r7, #14]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d028      	beq.n	8002278 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db1b      	blt.n	8002274 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	3304      	adds	r3, #4
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4618      	mov	r0, r3
 800224a:	f003 febf 	bl	8005fcc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	3304      	adds	r3, #4
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	3301      	adds	r3, #1
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c
 8002272:	e001      	b.n	8002278 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_ETH_ReleaseTxPacket+0xac>
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1b9      	bne.n	80021f8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d112      	bne.n	80022d0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	2b40      	cmp	r3, #64	; 0x40
 80022ba:	d109      	bne.n	80022d0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b50      	ldr	r3, [pc, #320]	; (8002408 <HAL_ETH_IRQHandler+0x178>)
 80022c8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f003 f9cc 	bl	8005668 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d113      	bne.n	800230a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d10a      	bne.n	800230a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	461a      	mov	r2, r3
 80022fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002302:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f003 f9bf 	bl	8005688 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800231c:	d14c      	bne.n	80023b8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002330:	d142      	bne.n	80023b8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f043 0208 	orr.w	r2, r3, #8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002354:	d11a      	bne.n	800238c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_ETH_IRQHandler+0x17c>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800237c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002380:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	22e0      	movs	r2, #224	; 0xe0
 8002386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800238a:	e012      	b.n	80023b2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	f248 6380 	movw	r3, #34432	; 0x8680
 800239a:	4013      	ands	r3, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023aa:	461a      	mov	r2, r3
 80023ac:	f248 6380 	movw	r3, #34432	; 0x8680
 80023b0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f003 f978 	bl	80056a8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d10e      	bne.n	80023e4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f81c 	bl	8002414 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_ETH_IRQHandler+0x180>)
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_ETH_IRQHandler+0x180>)
 80023f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023f6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f815 	bl	8002428 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	00010040 	.word	0x00010040
 800240c:	007e2000 	.word	0x007e2000
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 031c 	and.w	r3, r3, #28
 8002458:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	02db      	lsls	r3, r3, #11
 800245e:	b29b      	uxth	r3, r3
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	019b      	lsls	r3, r3, #6
 800246a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 0302 	bic.w	r3, r3, #2
 800247a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800248c:	f7ff fa68 	bl	8001960 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002492:	e00d      	b.n	80024b0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002494:	f7ff fa64 	bl	8001960 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d301      	bcc.n	80024a8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e010      	b.n	80024ca <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ec      	bne.n	8002494 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 031c 	and.w	r3, r3, #28
 80024ee:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	02db      	lsls	r3, r3, #11
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	019b      	lsls	r3, r3, #6
 8002500:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800252c:	f7ff fa18 	bl	8001960 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002532:	e00d      	b.n	8002550 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002534:	f7ff fa14 	bl	8001960 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002542:	d301      	bcc.n	8002548 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e009      	b.n	800255c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ec      	bne.n	8002534 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0d9      	b.n	800272c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf14      	ite	ne
 80026ac:	2301      	movne	r3, #1
 80026ae:	2300      	moveq	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	0c1b      	lsrs	r3, r3, #16
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf14      	ite	ne
 800271c:	2301      	movne	r3, #1
 800271e:	2300      	moveq	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e00b      	b.n	8002764 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002752:	2b10      	cmp	r3, #16
 8002754:	d105      	bne.n	8002762 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f88f 	bl	800287c <ETH_SetMACConfig>

    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
  }
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 031c 	bic.w	r3, r3, #28
 8002782:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002784:	f001 fb78 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8002788:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_ETH_SetMDIOClockRange+0x98>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d908      	bls.n	80027a4 <HAL_ETH_SetMDIOClockRange+0x38>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4a1c      	ldr	r2, [pc, #112]	; (8002808 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d804      	bhi.n	80027a4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e027      	b.n	80027f4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d908      	bls.n	80027be <HAL_ETH_SetMDIOClockRange+0x52>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d204      	bcs.n	80027be <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f043 030c 	orr.w	r3, r3, #12
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e01a      	b.n	80027f4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d303      	bcc.n	80027ce <HAL_ETH_SetMDIOClockRange+0x62>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4a11      	ldr	r2, [pc, #68]	; (8002810 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d911      	bls.n	80027f2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d908      	bls.n	80027e8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d804      	bhi.n	80027e8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e005      	b.n	80027f4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f043 0310 	orr.w	r3, r3, #16
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e000      	b.n	80027f4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80027f2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	611a      	str	r2, [r3, #16]
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	01312cff 	.word	0x01312cff
 8002808:	02160ebf 	.word	0x02160ebf
 800280c:	03938700 	.word	0x03938700
 8002810:	05f5e0ff 	.word	0x05f5e0ff
 8002814:	08f0d17f 	.word	0x08f0d17f

08002818 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002854:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002862:	2001      	movs	r0, #1
 8002864:	f7ff f888 	bl	8001978 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002872:	6193      	str	r3, [r2, #24]
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <ETH_SetMACConfig+0x15c>)
 8002892:	4013      	ands	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	7c1b      	ldrb	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <ETH_SetMACConfig+0x28>
 800289e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028a2:	e000      	b.n	80028a6 <ETH_SetMACConfig+0x2a>
 80028a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	7c5b      	ldrb	r3, [r3, #17]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <ETH_SetMACConfig+0x38>
 80028ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028b2:	e000      	b.n	80028b6 <ETH_SetMACConfig+0x3a>
 80028b4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7fdb      	ldrb	r3, [r3, #31]
 80028c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80028c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	7f92      	ldrb	r2, [r2, #30]
 80028d0:	2a00      	cmp	r2, #0
 80028d2:	d102      	bne.n	80028da <ETH_SetMACConfig+0x5e>
 80028d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d8:	e000      	b.n	80028dc <ETH_SetMACConfig+0x60>
 80028da:	2200      	movs	r2, #0
                        macconf->Speed |
 80028dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	7f1b      	ldrb	r3, [r3, #28]
 80028e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	791b      	ldrb	r3, [r3, #4]
 80028f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80028f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	d102      	bne.n	8002904 <ETH_SetMACConfig+0x88>
 80028fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002902:	e000      	b.n	8002906 <ETH_SetMACConfig+0x8a>
 8002904:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002906:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	7bdb      	ldrb	r3, [r3, #15]
 800290c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800290e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002914:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800291c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800291e:	4313      	orrs	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002936:	2001      	movs	r0, #1
 8002938:	f7ff f81e 	bl	8001978 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002952:	4013      	ands	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002962:	2a00      	cmp	r2, #0
 8002964:	d101      	bne.n	800296a <ETH_SetMACConfig+0xee>
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	e000      	b.n	800296c <ETH_SetMACConfig+0xf0>
 800296a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800296c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002972:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800297a:	2a01      	cmp	r2, #1
 800297c:	d101      	bne.n	8002982 <ETH_SetMACConfig+0x106>
 800297e:	2208      	movs	r2, #8
 8002980:	e000      	b.n	8002984 <ETH_SetMACConfig+0x108>
 8002982:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002984:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800298c:	2a01      	cmp	r2, #1
 800298e:	d101      	bne.n	8002994 <ETH_SetMACConfig+0x118>
 8002990:	2204      	movs	r2, #4
 8002992:	e000      	b.n	8002996 <ETH_SetMACConfig+0x11a>
 8002994:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002996:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800299e:	2a01      	cmp	r2, #1
 80029a0:	d101      	bne.n	80029a6 <ETH_SetMACConfig+0x12a>
 80029a2:	2202      	movs	r2, #2
 80029a4:	e000      	b.n	80029a8 <ETH_SetMACConfig+0x12c>
 80029a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029a8:	4313      	orrs	r3, r2
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029c0:	2001      	movs	r0, #1
 80029c2:	f7fe ffd9 	bl	8001978 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	619a      	str	r2, [r3, #24]
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	ff20810f 	.word	0xff20810f

080029dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <ETH_SetDMAConfig+0x110>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	7b1b      	ldrb	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <ETH_SetDMAConfig+0x2c>
 8002a02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a06:	e000      	b.n	8002a0a <ETH_SetDMAConfig+0x2e>
 8002a08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	7b5b      	ldrb	r3, [r3, #13]
 8002a0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	7f52      	ldrb	r2, [r2, #29]
 8002a16:	2a00      	cmp	r2, #0
 8002a18:	d102      	bne.n	8002a20 <ETH_SetDMAConfig+0x44>
 8002a1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a1e:	e000      	b.n	8002a22 <ETH_SetDMAConfig+0x46>
 8002a20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	7b9b      	ldrb	r3, [r3, #14]
 8002a28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	7f1b      	ldrb	r3, [r3, #28]
 8002a36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	7f9b      	ldrb	r3, [r3, #30]
 8002a3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a50:	4313      	orrs	r3, r2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a60:	461a      	mov	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a72:	2001      	movs	r0, #1
 8002a74:	f7fe ff80 	bl	8001978 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a80:	461a      	mov	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	791b      	ldrb	r3, [r3, #4]
 8002a8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aa4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002aa6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002aae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ab4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002abe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ac2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f7fe ff51 	bl	8001978 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	f8de3f23 	.word	0xf8de3f23

08002af0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0a6      	sub	sp, #152	; 0x98
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b56:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b68:	4619      	mov	r1, r3
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff fe86 	bl	800287c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b70:	2301      	movs	r3, #1
 8002b72:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b92:	2300      	movs	r3, #0
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ba4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002baa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002bc0:	f107 0308 	add.w	r3, r7, #8
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ff08 	bl	80029dc <ETH_SetDMAConfig>
}
 8002bcc:	bf00      	nop
 8002bce:	3798      	adds	r7, #152	; 0x98
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3305      	adds	r3, #5
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	3204      	adds	r2, #4
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <ETH_MACAddressConfig+0x68>)
 8002bf6:	4413      	add	r3, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3303      	adds	r3, #3
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	061a      	lsls	r2, r3, #24
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3302      	adds	r3, #2
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3301      	adds	r3, #1
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	7812      	ldrb	r2, [r2, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <ETH_MACAddressConfig+0x6c>)
 8002c26:	4413      	add	r3, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	6013      	str	r3, [r2, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40028040 	.word	0x40028040
 8002c40:	40028044 	.word	0x40028044

08002c44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e03e      	b.n	8002cd0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68d9      	ldr	r1, [r3, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	3206      	adds	r2, #6
 8002c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d80c      	bhi.n	8002cb4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68d9      	ldr	r1, [r3, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	e004      	b.n	8002cbe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d9bd      	bls.n	8002c52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce8:	611a      	str	r2, [r3, #16]
}
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e046      	b.n	8002d92 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6919      	ldr	r1, [r3, #16]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2200      	movs	r2, #0
 8002d32:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d40:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002d48:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	3212      	adds	r2, #18
 8002d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d80c      	bhi.n	8002d82 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6919      	ldr	r1, [r3, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	e004      	b.n	8002d8c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	461a      	mov	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d9b5      	bls.n	8002d04 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc2:	60da      	str	r2, [r3, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b08d      	sub	sp, #52	; 0x34
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3318      	adds	r3, #24
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dfa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e12:	d007      	beq.n	8002e24 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	3304      	adds	r3, #4
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002e24:	2302      	movs	r3, #2
 8002e26:	e103      	b.n	8003030 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002e40:	f023 031f 	bic.w	r3, r3, #31
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	6852      	ldr	r2, [r2, #4]
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	431a      	orrs	r2, r3
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002eae:	f3bf 8f5f 	dmb	sy
}
 8002eb2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ec0:	e084      	b.n	8002fcc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d006      	beq.n	8002ee2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e005      	b.n	8002eee <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d902      	bls.n	8002f00 <ETH_Prepare_Tx_Descriptors+0x130>
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	3b04      	subs	r3, #4
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f08:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f22:	d007      	beq.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	3304      	adds	r3, #4
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d029      	beq.n	8002f88 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f40:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f46:	e019      	b.n	8002f7c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002f48:	f3bf 8f5f 	dmb	sy
}
 8002f4c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d902      	bls.n	8002f6c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	3b04      	subs	r3, #4
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f74:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	3301      	adds	r3, #1
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d3e1      	bcc.n	8002f48 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f84:	2302      	movs	r3, #2
 8002f86:	e053      	b.n	8003030 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002fa6:	f023 031f 	bic.w	r3, r3, #31
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	6852      	ldr	r2, [r2, #4]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fba:	f3bf 8f5f 	dmb	sy
}
 8002fbe:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f47f af76 	bne.w	8002ec2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e005      	b.n	8002ff6 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	3304      	adds	r3, #4
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003016:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003018:	b672      	cpsid	i
}
 800301a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	4413      	add	r3, r2
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800302a:	b662      	cpsie	i
}
 800302c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3734      	adds	r7, #52	; 0x34
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800304a:	2300      	movs	r3, #0
 800304c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]
 8003056:	e16b      	b.n	8003330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003058:	2201      	movs	r2, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	429a      	cmp	r2, r3
 8003072:	f040 815a 	bne.w	800332a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d005      	beq.n	800308e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800308a:	2b02      	cmp	r3, #2
 800308c:	d130      	bne.n	80030f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c4:	2201      	movs	r2, #1
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 0201 	and.w	r2, r3, #1
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d017      	beq.n	800312c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d123      	bne.n	8003180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	08da      	lsrs	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3208      	adds	r2, #8
 8003140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	220f      	movs	r2, #15
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3208      	adds	r2, #8
 800317a:	69b9      	ldr	r1, [r7, #24]
 800317c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0203 	and.w	r2, r3, #3
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80b4 	beq.w	800332a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b60      	ldr	r3, [pc, #384]	; (8003348 <HAL_GPIO_Init+0x30c>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	4a5f      	ldr	r2, [pc, #380]	; (8003348 <HAL_GPIO_Init+0x30c>)
 80031cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d0:	6453      	str	r3, [r2, #68]	; 0x44
 80031d2:	4b5d      	ldr	r3, [pc, #372]	; (8003348 <HAL_GPIO_Init+0x30c>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031de:	4a5b      	ldr	r2, [pc, #364]	; (800334c <HAL_GPIO_Init+0x310>)
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	3302      	adds	r3, #2
 80031e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a52      	ldr	r2, [pc, #328]	; (8003350 <HAL_GPIO_Init+0x314>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d02b      	beq.n	8003262 <HAL_GPIO_Init+0x226>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a51      	ldr	r2, [pc, #324]	; (8003354 <HAL_GPIO_Init+0x318>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d025      	beq.n	800325e <HAL_GPIO_Init+0x222>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a50      	ldr	r2, [pc, #320]	; (8003358 <HAL_GPIO_Init+0x31c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01f      	beq.n	800325a <HAL_GPIO_Init+0x21e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4f      	ldr	r2, [pc, #316]	; (800335c <HAL_GPIO_Init+0x320>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d019      	beq.n	8003256 <HAL_GPIO_Init+0x21a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4e      	ldr	r2, [pc, #312]	; (8003360 <HAL_GPIO_Init+0x324>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <HAL_GPIO_Init+0x216>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4d      	ldr	r2, [pc, #308]	; (8003364 <HAL_GPIO_Init+0x328>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00d      	beq.n	800324e <HAL_GPIO_Init+0x212>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4c      	ldr	r2, [pc, #304]	; (8003368 <HAL_GPIO_Init+0x32c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d007      	beq.n	800324a <HAL_GPIO_Init+0x20e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a4b      	ldr	r2, [pc, #300]	; (800336c <HAL_GPIO_Init+0x330>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_GPIO_Init+0x20a>
 8003242:	2307      	movs	r3, #7
 8003244:	e00e      	b.n	8003264 <HAL_GPIO_Init+0x228>
 8003246:	2308      	movs	r3, #8
 8003248:	e00c      	b.n	8003264 <HAL_GPIO_Init+0x228>
 800324a:	2306      	movs	r3, #6
 800324c:	e00a      	b.n	8003264 <HAL_GPIO_Init+0x228>
 800324e:	2305      	movs	r3, #5
 8003250:	e008      	b.n	8003264 <HAL_GPIO_Init+0x228>
 8003252:	2304      	movs	r3, #4
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x228>
 8003256:	2303      	movs	r3, #3
 8003258:	e004      	b.n	8003264 <HAL_GPIO_Init+0x228>
 800325a:	2302      	movs	r3, #2
 800325c:	e002      	b.n	8003264 <HAL_GPIO_Init+0x228>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_GPIO_Init+0x228>
 8003262:	2300      	movs	r3, #0
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f002 0203 	and.w	r2, r2, #3
 800326a:	0092      	lsls	r2, r2, #2
 800326c:	4093      	lsls	r3, r2
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003274:	4935      	ldr	r1, [pc, #212]	; (800334c <HAL_GPIO_Init+0x310>)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003282:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <HAL_GPIO_Init+0x334>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a6:	4a32      	ldr	r2, [pc, #200]	; (8003370 <HAL_GPIO_Init+0x334>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ac:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_GPIO_Init+0x334>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_GPIO_Init+0x334>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_GPIO_Init+0x334>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032fa:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <HAL_GPIO_Init+0x334>)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_GPIO_Init+0x334>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003324:	4a12      	ldr	r2, [pc, #72]	; (8003370 <HAL_GPIO_Init+0x334>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3301      	adds	r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	f67f ae90 	bls.w	8003058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40013800 	.word	0x40013800
 8003350:	40020000 	.word	0x40020000
 8003354:	40020400 	.word	0x40020400
 8003358:	40020800 	.word	0x40020800
 800335c:	40020c00 	.word	0x40020c00
 8003360:	40021000 	.word	0x40021000
 8003364:	40021400 	.word	0x40021400
 8003368:	40021800 	.word	0x40021800
 800336c:	40021c00 	.word	0x40021c00
 8003370:	40013c00 	.word	0x40013c00

08003374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
 8003380:	4613      	mov	r3, r2
 8003382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003384:	787b      	ldrb	r3, [r7, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003390:	e003      	b.n	800339a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	041a      	lsls	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	619a      	str	r2, [r3, #24]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e12b      	b.n	8003612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fa44 	bl	800085c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2224      	movs	r2, #36	; 0x24
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800340a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800340c:	f000 fd40 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8003410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a81      	ldr	r2, [pc, #516]	; (800361c <HAL_I2C_Init+0x274>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d807      	bhi.n	800342c <HAL_I2C_Init+0x84>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a80      	ldr	r2, [pc, #512]	; (8003620 <HAL_I2C_Init+0x278>)
 8003420:	4293      	cmp	r3, r2
 8003422:	bf94      	ite	ls
 8003424:	2301      	movls	r3, #1
 8003426:	2300      	movhi	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e006      	b.n	800343a <HAL_I2C_Init+0x92>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4a7d      	ldr	r2, [pc, #500]	; (8003624 <HAL_I2C_Init+0x27c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	bf94      	ite	ls
 8003434:	2301      	movls	r3, #1
 8003436:	2300      	movhi	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0e7      	b.n	8003612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a78      	ldr	r2, [pc, #480]	; (8003628 <HAL_I2C_Init+0x280>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0c9b      	lsrs	r3, r3, #18
 800344c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a6a      	ldr	r2, [pc, #424]	; (800361c <HAL_I2C_Init+0x274>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d802      	bhi.n	800347c <HAL_I2C_Init+0xd4>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3301      	adds	r3, #1
 800347a:	e009      	b.n	8003490 <HAL_I2C_Init+0xe8>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003482:	fb02 f303 	mul.w	r3, r2, r3
 8003486:	4a69      	ldr	r2, [pc, #420]	; (800362c <HAL_I2C_Init+0x284>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	099b      	lsrs	r3, r3, #6
 800348e:	3301      	adds	r3, #1
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	430b      	orrs	r3, r1
 8003496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	495c      	ldr	r1, [pc, #368]	; (800361c <HAL_I2C_Init+0x274>)
 80034ac:	428b      	cmp	r3, r1
 80034ae:	d819      	bhi.n	80034e4 <HAL_I2C_Init+0x13c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1e59      	subs	r1, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80034be:	1c59      	adds	r1, r3, #1
 80034c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034c4:	400b      	ands	r3, r1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_I2C_Init+0x138>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1e59      	subs	r1, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034de:	e051      	b.n	8003584 <HAL_I2C_Init+0x1dc>
 80034e0:	2304      	movs	r3, #4
 80034e2:	e04f      	b.n	8003584 <HAL_I2C_Init+0x1dc>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d111      	bne.n	8003510 <HAL_I2C_Init+0x168>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e58      	subs	r0, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	440b      	add	r3, r1
 80034fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fe:	3301      	adds	r3, #1
 8003500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e012      	b.n	8003536 <HAL_I2C_Init+0x18e>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1e58      	subs	r0, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6859      	ldr	r1, [r3, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	0099      	lsls	r1, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	fbb0 f3f3 	udiv	r3, r0, r3
 8003526:	3301      	adds	r3, #1
 8003528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Init+0x196>
 800353a:	2301      	movs	r3, #1
 800353c:	e022      	b.n	8003584 <HAL_I2C_Init+0x1dc>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10e      	bne.n	8003564 <HAL_I2C_Init+0x1bc>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1e58      	subs	r0, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6859      	ldr	r1, [r3, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	440b      	add	r3, r1
 8003554:	fbb0 f3f3 	udiv	r3, r0, r3
 8003558:	3301      	adds	r3, #1
 800355a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003562:	e00f      	b.n	8003584 <HAL_I2C_Init+0x1dc>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	0099      	lsls	r1, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	fbb0 f3f3 	udiv	r3, r0, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	6809      	ldr	r1, [r1, #0]
 8003588:	4313      	orrs	r3, r2
 800358a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6911      	ldr	r1, [r2, #16]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68d2      	ldr	r2, [r2, #12]
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	000186a0 	.word	0x000186a0
 8003620:	001e847f 	.word	0x001e847f
 8003624:	003d08ff 	.word	0x003d08ff
 8003628:	431bde83 	.word	0x431bde83
 800362c:	10624dd3 	.word	0x10624dd3

08003630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e267      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d075      	beq.n	800373a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800364e:	4b88      	ldr	r3, [pc, #544]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b04      	cmp	r3, #4
 8003658:	d00c      	beq.n	8003674 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365a:	4b85      	ldr	r3, [pc, #532]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003662:	2b08      	cmp	r3, #8
 8003664:	d112      	bne.n	800368c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003666:	4b82      	ldr	r3, [pc, #520]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003672:	d10b      	bne.n	800368c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	4b7e      	ldr	r3, [pc, #504]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05b      	beq.n	8003738 <HAL_RCC_OscConfig+0x108>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d157      	bne.n	8003738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e242      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x74>
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a75      	ldr	r2, [pc, #468]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e01d      	b.n	80036e0 <HAL_RCC_OscConfig+0xb0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x98>
 80036ae:	4b70      	ldr	r3, [pc, #448]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6f      	ldr	r2, [pc, #444]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a6c      	ldr	r2, [pc, #432]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e00b      	b.n	80036e0 <HAL_RCC_OscConfig+0xb0>
 80036c8:	4b69      	ldr	r3, [pc, #420]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a68      	ldr	r2, [pc, #416]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b66      	ldr	r3, [pc, #408]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a65      	ldr	r2, [pc, #404]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80036da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d013      	beq.n	8003710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fe f93a 	bl	8001960 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f0:	f7fe f936 	bl	8001960 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	; 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e207      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	4b5b      	ldr	r3, [pc, #364]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0xc0>
 800370e:	e014      	b.n	800373a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7fe f926 	bl	8001960 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003718:	f7fe f922 	bl	8001960 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e1f3      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	4b51      	ldr	r3, [pc, #324]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0xe8>
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d063      	beq.n	800380e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003746:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800375a:	2b08      	cmp	r3, #8
 800375c:	d11c      	bne.n	8003798 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800375e:	4b44      	ldr	r3, [pc, #272]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d116      	bne.n	8003798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_RCC_OscConfig+0x152>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d001      	beq.n	8003782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e1c7      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4937      	ldr	r1, [pc, #220]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	e03a      	b.n	800380e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a0:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCC_OscConfig+0x244>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fe f8db 	bl	8001960 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ae:	f7fe f8d7 	bl	8001960 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e1a8      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4925      	ldr	r1, [pc, #148]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
 80037e0:	e015      	b.n	800380e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCC_OscConfig+0x244>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fe f8ba 	bl	8001960 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f0:	f7fe f8b6 	bl	8001960 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e187      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d036      	beq.n	8003888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_RCC_OscConfig+0x248>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fe f89a 	bl	8001960 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003830:	f7fe f896 	bl	8001960 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e167      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_OscConfig+0x240>)
 8003844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x200>
 800384e:	e01b      	b.n	8003888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_RCC_OscConfig+0x248>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fe f883 	bl	8001960 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385c:	e00e      	b.n	800387c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385e:	f7fe f87f 	bl	8001960 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d907      	bls.n	800387c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e150      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
 8003870:	40023800 	.word	0x40023800
 8003874:	42470000 	.word	0x42470000
 8003878:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	4b88      	ldr	r3, [pc, #544]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ea      	bne.n	800385e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8097 	beq.w	80039c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389a:	4b81      	ldr	r3, [pc, #516]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10f      	bne.n	80038c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b7d      	ldr	r3, [pc, #500]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a7c      	ldr	r2, [pc, #496]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
 80038b6:	4b7a      	ldr	r3, [pc, #488]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c2:	2301      	movs	r3, #1
 80038c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c6:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d118      	bne.n	8003904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d2:	4b74      	ldr	r3, [pc, #464]	; (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a73      	ldr	r2, [pc, #460]	; (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038de:	f7fe f83f 	bl	8001960 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e6:	f7fe f83b 	bl	8001960 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e10c      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <HAL_RCC_OscConfig+0x474>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x2ea>
 800390c:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	4a63      	ldr	r2, [pc, #396]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6713      	str	r3, [r2, #112]	; 0x70
 8003918:	e01c      	b.n	8003954 <HAL_RCC_OscConfig+0x324>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b05      	cmp	r3, #5
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x30c>
 8003922:	4b5f      	ldr	r3, [pc, #380]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a5e      	ldr	r2, [pc, #376]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	4b5c      	ldr	r3, [pc, #368]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a5b      	ldr	r2, [pc, #364]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0x324>
 800393c:	4b58      	ldr	r3, [pc, #352]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a57      	ldr	r2, [pc, #348]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
 8003948:	4b55      	ldr	r3, [pc, #340]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	4a54      	ldr	r2, [pc, #336]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800394e:	f023 0304 	bic.w	r3, r3, #4
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fe f800 	bl	8001960 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003962:	e00a      	b.n	800397a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	f7fd fffc 	bl	8001960 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0cb      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397a:	4b49      	ldr	r3, [pc, #292]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0ee      	beq.n	8003964 <HAL_RCC_OscConfig+0x334>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003988:	f7fd ffea 	bl	8001960 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fd ffe6 	bl	8001960 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e0b5      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a6:	4b3e      	ldr	r3, [pc, #248]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ee      	bne.n	8003990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d105      	bne.n	80039c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b8:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	4a38      	ldr	r2, [pc, #224]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80a1 	beq.w	8003b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ce:	4b34      	ldr	r3, [pc, #208]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d05c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d141      	bne.n	8003a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <HAL_RCC_OscConfig+0x478>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd ffba 	bl	8001960 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd ffb6 	bl	8001960 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e087      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69da      	ldr	r2, [r3, #28]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	019b      	lsls	r3, r3, #6
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	3b01      	subs	r3, #1
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	491b      	ldr	r1, [pc, #108]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a38:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_RCC_OscConfig+0x478>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fd ff8f 	bl	8001960 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fd ff8b 	bl	8001960 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e05c      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x416>
 8003a64:	e054      	b.n	8003b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_RCC_OscConfig+0x478>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fd ff78 	bl	8001960 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd ff74 	bl	8001960 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e045      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_RCC_OscConfig+0x470>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x444>
 8003a92:	e03d      	b.n	8003b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e038      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40007000 	.word	0x40007000
 8003aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCC_OscConfig+0x4ec>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d028      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d121      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d11a      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003adc:	4013      	ands	r3, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d111      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	3b01      	subs	r3, #1
 8003af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800

08003b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0cc      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b34:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d90c      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4a:	4b63      	ldr	r3, [pc, #396]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0b8      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d020      	beq.n	8003baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b74:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b8c:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b98:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	494d      	ldr	r1, [pc, #308]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d044      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbe:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d119      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e07f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d107      	bne.n	8003bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bde:	4b3f      	ldr	r3, [pc, #252]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e06f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bee:	4b3b      	ldr	r3, [pc, #236]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e067      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4b37      	ldr	r3, [pc, #220]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 0203 	bic.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4934      	ldr	r1, [pc, #208]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c10:	f7fd fea6 	bl	8001960 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7fd fea2 	bl	8001960 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e04f      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 020c 	and.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d1eb      	bne.n	8003c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c40:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d20c      	bcs.n	8003c68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b20      	ldr	r3, [pc, #128]	; (8003cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e032      	b.n	8003cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4916      	ldr	r1, [pc, #88]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	490e      	ldr	r1, [pc, #56]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ca6:	f000 f821 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	490a      	ldr	r1, [pc, #40]	; (8003ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb8:	5ccb      	ldrb	r3, [r1, r3]
 8003cba:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbe:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd fa96 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023c00 	.word	0x40023c00
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	08024fb4 	.word	0x08024fb4
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	20000004 	.word	0x20000004

08003cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf0:	b090      	sub	sp, #64	; 0x40
 8003cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d04:	4b59      	ldr	r3, [pc, #356]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d00d      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x40>
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	f200 80a1 	bhi.w	8003e58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x34>
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d1e:	e09b      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d20:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d24:	e09b      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d26:	4b53      	ldr	r3, [pc, #332]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d2a:	e098      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d2c:	4b4f      	ldr	r3, [pc, #316]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d36:	4b4d      	ldr	r3, [pc, #308]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d028      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d42:	4b4a      	ldr	r3, [pc, #296]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	2200      	movs	r2, #0
 8003d4a:	623b      	str	r3, [r7, #32]
 8003d4c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d54:	2100      	movs	r1, #0
 8003d56:	4b47      	ldr	r3, [pc, #284]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d58:	fb03 f201 	mul.w	r2, r3, r1
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	fb00 f303 	mul.w	r3, r0, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	4a43      	ldr	r2, [pc, #268]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d66:	fba0 1202 	umull	r1, r2, r0, r2
 8003d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d6c:	460a      	mov	r2, r1
 8003d6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d72:	4413      	add	r3, r2
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	2200      	movs	r2, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	61fa      	str	r2, [r7, #28]
 8003d7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d86:	f7fc fa7b 	bl	8000280 <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4613      	mov	r3, r2
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d92:	e053      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d94:	4b35      	ldr	r3, [pc, #212]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	099b      	lsrs	r3, r3, #6
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	617a      	str	r2, [r7, #20]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003da6:	f04f 0b00 	mov.w	fp, #0
 8003daa:	4652      	mov	r2, sl
 8003dac:	465b      	mov	r3, fp
 8003dae:	f04f 0000 	mov.w	r0, #0
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	0159      	lsls	r1, r3, #5
 8003db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbc:	0150      	lsls	r0, r2, #5
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	ebb2 080a 	subs.w	r8, r2, sl
 8003dc6:	eb63 090b 	sbc.w	r9, r3, fp
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dde:	ebb2 0408 	subs.w	r4, r2, r8
 8003de2:	eb63 0509 	sbc.w	r5, r3, r9
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	00eb      	lsls	r3, r5, #3
 8003df0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003df4:	00e2      	lsls	r2, r4, #3
 8003df6:	4614      	mov	r4, r2
 8003df8:	461d      	mov	r5, r3
 8003dfa:	eb14 030a 	adds.w	r3, r4, sl
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	eb45 030b 	adc.w	r3, r5, fp
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e12:	4629      	mov	r1, r5
 8003e14:	028b      	lsls	r3, r1, #10
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	028a      	lsls	r2, r1, #10
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	2200      	movs	r2, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	60fa      	str	r2, [r7, #12]
 8003e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e30:	f7fc fa26 	bl	8000280 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	3301      	adds	r3, #1
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e56:	e002      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3740      	adds	r7, #64	; 0x40
 8003e64:	46bd      	mov	sp, r7
 8003e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	00f42400 	.word	0x00f42400
 8003e74:	017d7840 	.word	0x017d7840

08003e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000000 	.word	0x20000000

08003e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e94:	f7ff fff0 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0a9b      	lsrs	r3, r3, #10
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4903      	ldr	r1, [pc, #12]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	08024fc4 	.word	0x08024fc4

08003eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ebc:	f7ff ffdc 	bl	8003e78 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	0b5b      	lsrs	r3, r3, #13
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4903      	ldr	r1, [pc, #12]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	08024fc4 	.word	0x08024fc4

08003ee0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	220f      	movs	r2, #15
 8003eee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCC_GetClockConfig+0x5c>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0203 	and.w	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_RCC_GetClockConfig+0x5c>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f08:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <HAL_RCC_GetClockConfig+0x5c>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_GetClockConfig+0x5c>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	08db      	lsrs	r3, r3, #3
 8003f1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <HAL_RCC_GetClockConfig+0x60>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0207 	and.w	r2, r3, #7
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40023c00 	.word	0x40023c00

08003f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e07b      	b.n	800404e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f66:	d009      	beq.n	8003f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	61da      	str	r2, [r3, #28]
 8003f6e:	e005      	b.n	8003f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd f89a 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	ea42 0103 	orr.w	r1, r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	f003 0104 	and.w	r1, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	f003 0210 	and.w	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800403c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b088      	sub	sp, #32
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_SPI_Transmit+0x22>
 8004074:	2302      	movs	r3, #2
 8004076:	e12d      	b.n	80042d4 <HAL_SPI_Transmit+0x27e>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004080:	f7fd fc6e 	bl	8001960 <HAL_GetTick>
 8004084:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b01      	cmp	r3, #1
 8004094:	d002      	beq.n	800409c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	77fb      	strb	r3, [r7, #31]
    goto error;
 800409a:	e116      	b.n	80042ca <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <HAL_SPI_Transmit+0x52>
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040ac:	e10d      	b.n	80042ca <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2203      	movs	r2, #3
 80040b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f4:	d10f      	bne.n	8004116 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004104:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004114:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d007      	beq.n	8004134 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004132:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413c:	d14f      	bne.n	80041de <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_SPI_Transmit+0xf6>
 8004146:	8afb      	ldrh	r3, [r7, #22]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d142      	bne.n	80041d2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004170:	e02f      	b.n	80041d2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d112      	bne.n	80041a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	881a      	ldrh	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80041a4:	e015      	b.n	80041d2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a6:	f7fd fbdb 	bl	8001960 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d803      	bhi.n	80041be <HAL_SPI_Transmit+0x168>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041bc:	d102      	bne.n	80041c4 <HAL_SPI_Transmit+0x16e>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80041d0:	e07b      	b.n	80042ca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1ca      	bne.n	8004172 <HAL_SPI_Transmit+0x11c>
 80041dc:	e050      	b.n	8004280 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <HAL_SPI_Transmit+0x196>
 80041e6:	8afb      	ldrh	r3, [r7, #22]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d144      	bne.n	8004276 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	7812      	ldrb	r2, [r2, #0]
 80041f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004212:	e030      	b.n	8004276 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	d113      	bne.n	800424a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	7812      	ldrb	r2, [r2, #0]
 800422e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	86da      	strh	r2, [r3, #54]	; 0x36
 8004248:	e015      	b.n	8004276 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800424a:	f7fd fb89 	bl	8001960 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d803      	bhi.n	8004262 <HAL_SPI_Transmit+0x20c>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004260:	d102      	bne.n	8004268 <HAL_SPI_Transmit+0x212>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004274:	e029      	b.n	80042ca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1c9      	bne.n	8004214 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	6839      	ldr	r1, [r7, #0]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fbdf 	bl	8004a48 <SPI_EndRxTxTransaction>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e003      	b.n	80042ca <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d002      	beq.n	8004302 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
 80042fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004300:	e0fb      	b.n	80044fa <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800430a:	d112      	bne.n	8004332 <HAL_SPI_Receive+0x56>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10e      	bne.n	8004332 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2204      	movs	r2, #4
 8004318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f8ef 	bl	800450c <HAL_SPI_TransmitReceive>
 800432e:	4603      	mov	r3, r0
 8004330:	e0e8      	b.n	8004504 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_SPI_Receive+0x64>
 800433c:	2302      	movs	r3, #2
 800433e:	e0e1      	b.n	8004504 <HAL_SPI_Receive+0x228>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004348:	f7fd fb0a 	bl	8001960 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_SPI_Receive+0x7e>
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800435e:	e0cc      	b.n	80044fa <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2204      	movs	r2, #4
 8004364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a6:	d10f      	bne.n	80043c8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d007      	beq.n	80043e6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d16a      	bne.n	80044c4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043ee:	e032      	b.n	8004456 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d115      	bne.n	800442a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f103 020c 	add.w	r2, r3, #12
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	7812      	ldrb	r2, [r2, #0]
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004428:	e015      	b.n	8004456 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800442a:	f7fd fa99 	bl	8001960 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d803      	bhi.n	8004442 <HAL_SPI_Receive+0x166>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004440:	d102      	bne.n	8004448 <HAL_SPI_Receive+0x16c>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004454:	e051      	b.n	80044fa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1c7      	bne.n	80043f0 <HAL_SPI_Receive+0x114>
 8004460:	e035      	b.n	80044ce <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b01      	cmp	r3, #1
 800446e:	d113      	bne.n	8004498 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	b292      	uxth	r2, r2
 800447c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	1c9a      	adds	r2, r3, #2
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004496:	e015      	b.n	80044c4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004498:	f7fd fa62 	bl	8001960 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d803      	bhi.n	80044b0 <HAL_SPI_Receive+0x1d4>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Receive+0x1da>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80044c2:	e01a      	b.n	80044fa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1c9      	bne.n	8004462 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fa52 	bl	800497c <SPI_EndRxTransaction>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	75fb      	strb	r3, [r7, #23]
 80044f0:	e003      	b.n	80044fa <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004502:	7dfb      	ldrb	r3, [r7, #23]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08c      	sub	sp, #48	; 0x30
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800451a:	2301      	movs	r3, #1
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x26>
 800452e:	2302      	movs	r3, #2
 8004530:	e198      	b.n	8004864 <HAL_SPI_TransmitReceive+0x358>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800453a:	f7fd fa11 	bl	8001960 <HAL_GetTick>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004550:	887b      	ldrh	r3, [r7, #2]
 8004552:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004558:	2b01      	cmp	r3, #1
 800455a:	d00f      	beq.n	800457c <HAL_SPI_TransmitReceive+0x70>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004562:	d107      	bne.n	8004574 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d103      	bne.n	8004574 <HAL_SPI_TransmitReceive+0x68>
 800456c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004570:	2b04      	cmp	r3, #4
 8004572:	d003      	beq.n	800457c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004574:	2302      	movs	r3, #2
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800457a:	e16d      	b.n	8004858 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_SPI_TransmitReceive+0x82>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_TransmitReceive+0x82>
 8004588:	887b      	ldrh	r3, [r7, #2]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004594:	e160      	b.n	8004858 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d003      	beq.n	80045aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2205      	movs	r2, #5
 80045a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	887a      	ldrh	r2, [r7, #2]
 80045ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	887a      	ldrh	r2, [r7, #2]
 80045cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	887a      	ldrh	r2, [r7, #2]
 80045d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d007      	beq.n	80045fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004606:	d17c      	bne.n	8004702 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_SPI_TransmitReceive+0x10a>
 8004610:	8b7b      	ldrh	r3, [r7, #26]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d16a      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	881a      	ldrh	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800463a:	e057      	b.n	80046ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d11b      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x176>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d016      	beq.n	8004682 <HAL_SPI_TransmitReceive+0x176>
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d113      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	881a      	ldrh	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	1c9a      	adds	r2, r3, #2
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d119      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x1b8>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d014      	beq.n	80046c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	b292      	uxth	r2, r2
 80046a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046c0:	2301      	movs	r3, #1
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046c4:	f7fd f94c 	bl	8001960 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d80b      	bhi.n	80046ec <HAL_SPI_TransmitReceive+0x1e0>
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046da:	d007      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80046ea:	e0b5      	b.n	8004858 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1a2      	bne.n	800463c <HAL_SPI_TransmitReceive+0x130>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d19d      	bne.n	800463c <HAL_SPI_TransmitReceive+0x130>
 8004700:	e080      	b.n	8004804 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_SPI_TransmitReceive+0x204>
 800470a:	8b7b      	ldrh	r3, [r7, #26]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d16f      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	7812      	ldrb	r2, [r2, #0]
 800471c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004736:	e05b      	b.n	80047f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d11c      	bne.n	8004780 <HAL_SPI_TransmitReceive+0x274>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d017      	beq.n	8004780 <HAL_SPI_TransmitReceive+0x274>
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d114      	bne.n	8004780 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d119      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x2b6>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d014      	beq.n	80047c2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047be:	2301      	movs	r3, #1
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047c2:	f7fd f8cd 	bl	8001960 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d803      	bhi.n	80047da <HAL_SPI_TransmitReceive+0x2ce>
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d8:	d102      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x2d4>
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80047ee:	e033      	b.n	8004858 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d19e      	bne.n	8004738 <HAL_SPI_TransmitReceive+0x22c>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d199      	bne.n	8004738 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f91d 	bl	8004a48 <SPI_EndRxTxTransaction>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d006      	beq.n	8004822 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004820:	e01a      	b.n	8004858 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484e:	e003      	b.n	8004858 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004864:	4618      	mov	r0, r3
 8004866:	3730      	adds	r7, #48	; 0x30
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	4613      	mov	r3, r2
 800487a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800487c:	f7fd f870 	bl	8001960 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	4413      	add	r3, r2
 800488a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800488c:	f7fd f868 	bl	8001960 <HAL_GetTick>
 8004890:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004892:	4b39      	ldr	r3, [pc, #228]	; (8004978 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	015b      	lsls	r3, r3, #5
 8004898:	0d1b      	lsrs	r3, r3, #20
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048a2:	e054      	b.n	800494e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048aa:	d050      	beq.n	800494e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048ac:	f7fd f858 	bl	8001960 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d902      	bls.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d13d      	bne.n	800493e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048da:	d111      	bne.n	8004900 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e4:	d004      	beq.n	80048f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ee:	d107      	bne.n	8004900 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004908:	d10f      	bne.n	800492a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e017      	b.n	800496e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	3b01      	subs	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4013      	ands	r3, r2
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	429a      	cmp	r2, r3
 800496a:	d19b      	bne.n	80048a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000000 	.word	0x20000000

0800497c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004990:	d111      	bne.n	80049b6 <SPI_EndRxTransaction+0x3a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499a:	d004      	beq.n	80049a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	d107      	bne.n	80049b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049be:	d12a      	bne.n	8004a16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c8:	d012      	beq.n	80049f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2180      	movs	r1, #128	; 0x80
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff ff49 	bl	800486c <SPI_WaitFlagStateUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02d      	beq.n	8004a3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e026      	b.n	8004a3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2200      	movs	r2, #0
 80049f8:	2101      	movs	r1, #1
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7ff ff36 	bl	800486c <SPI_WaitFlagStateUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01a      	beq.n	8004a3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	f043 0220 	orr.w	r2, r3, #32
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e013      	b.n	8004a3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2101      	movs	r1, #1
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7ff ff23 	bl	800486c <SPI_WaitFlagStateUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e000      	b.n	8004a3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	2102      	movs	r1, #2
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ff04 	bl	800486c <SPI_WaitFlagStateUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e032      	b.n	8004ae0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <SPI_EndRxTxTransaction+0xa0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <SPI_EndRxTxTransaction+0xa4>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	0d5b      	lsrs	r3, r3, #21
 8004a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a98:	d112      	bne.n	8004ac0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fee1 	bl	800486c <SPI_WaitFlagStateUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d016      	beq.n	8004ade <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	f043 0220 	orr.w	r2, r3, #32
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e00f      	b.n	8004ae0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad6:	2b80      	cmp	r3, #128	; 0x80
 8004ad8:	d0f2      	beq.n	8004ac0 <SPI_EndRxTxTransaction+0x78>
 8004ada:	e000      	b.n	8004ade <SPI_EndRxTxTransaction+0x96>
        break;
 8004adc:	bf00      	nop
  }

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	165e9f81 	.word	0x165e9f81

08004af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e041      	b.n	8004b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f839 	bl	8004b8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f000 f9c0 	bl	8004eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d001      	beq.n	8004bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e04e      	b.n	8004c5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a23      	ldr	r2, [pc, #140]	; (8004c68 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d022      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x80>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d01d      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x80>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <HAL_TIM_Base_Start_IT+0xc8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d018      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x80>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d013      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x80>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00e      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x80>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d009      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x80>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x80>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d111      	bne.n	8004c48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d010      	beq.n	8004c58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	e007      	b.n	8004c58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40000c00 	.word	0x40000c00
 8004c78:	40010400 	.word	0x40010400
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40001800 	.word	0x40001800

08004c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d020      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0202 	mvn.w	r2, #2
 8004cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8d2 	bl	8004e78 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f8c4 	bl	8004e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f8d5 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d020      	beq.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01b      	beq.n	8004d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0204 	mvn.w	r2, #4
 8004d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f8ac 	bl	8004e78 <HAL_TIM_IC_CaptureCallback>
 8004d20:	e005      	b.n	8004d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f89e 	bl	8004e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f8af 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d020      	beq.n	8004d80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01b      	beq.n	8004d80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0208 	mvn.w	r2, #8
 8004d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2204      	movs	r2, #4
 8004d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f886 	bl	8004e78 <HAL_TIM_IC_CaptureCallback>
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f878 	bl	8004e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f889 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d020      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01b      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0210 	mvn.w	r2, #16
 8004d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2208      	movs	r2, #8
 8004da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f860 	bl	8004e78 <HAL_TIM_IC_CaptureCallback>
 8004db8:	e005      	b.n	8004dc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f852 	bl	8004e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f863 	bl	8004e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00c      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f06f 0201 	mvn.w	r2, #1
 8004de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fb ffac 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f906 	bl	8005020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f834 	bl	8004ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0220 	mvn.w	r2, #32
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f8d8 	bl	800500c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a46      	ldr	r2, [pc, #280]	; (8004fe0 <TIM_Base_SetConfig+0x12c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed2:	d00f      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a43      	ldr	r2, [pc, #268]	; (8004fe4 <TIM_Base_SetConfig+0x130>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a42      	ldr	r2, [pc, #264]	; (8004fe8 <TIM_Base_SetConfig+0x134>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a41      	ldr	r2, [pc, #260]	; (8004fec <TIM_Base_SetConfig+0x138>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0x40>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a40      	ldr	r2, [pc, #256]	; (8004ff0 <TIM_Base_SetConfig+0x13c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d108      	bne.n	8004f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a35      	ldr	r2, [pc, #212]	; (8004fe0 <TIM_Base_SetConfig+0x12c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d02b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f14:	d027      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a32      	ldr	r2, [pc, #200]	; (8004fe4 <TIM_Base_SetConfig+0x130>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d023      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a31      	ldr	r2, [pc, #196]	; (8004fe8 <TIM_Base_SetConfig+0x134>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a30      	ldr	r2, [pc, #192]	; (8004fec <TIM_Base_SetConfig+0x138>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2f      	ldr	r2, [pc, #188]	; (8004ff0 <TIM_Base_SetConfig+0x13c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d017      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a2e      	ldr	r2, [pc, #184]	; (8004ff4 <TIM_Base_SetConfig+0x140>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <TIM_Base_SetConfig+0x144>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00f      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <TIM_Base_SetConfig+0x148>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2b      	ldr	r2, [pc, #172]	; (8005000 <TIM_Base_SetConfig+0x14c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <TIM_Base_SetConfig+0x150>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d003      	beq.n	8004f66 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a29      	ldr	r2, [pc, #164]	; (8005008 <TIM_Base_SetConfig+0x154>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d108      	bne.n	8004f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <TIM_Base_SetConfig+0x12c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d003      	beq.n	8004fac <TIM_Base_SetConfig+0xf8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <TIM_Base_SetConfig+0x13c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d103      	bne.n	8004fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d105      	bne.n	8004fd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	611a      	str	r2, [r3, #16]
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40000c00 	.word	0x40000c00
 8004ff0:	40010400 	.word	0x40010400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40014400 	.word	0x40014400
 8004ffc:	40014800 	.word	0x40014800
 8005000:	40001800 	.word	0x40001800
 8005004:	40001c00 	.word	0x40001c00
 8005008:	40002000 	.word	0x40002000

0800500c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e042      	b.n	80050cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fc fa78 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	; 0x24
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f82b 	bl	80050d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800508c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800509c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d8:	b0c0      	sub	sp, #256	; 0x100
 80050da:	af00      	add	r7, sp, #0
 80050dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f0:	68d9      	ldr	r1, [r3, #12]
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	ea40 0301 	orr.w	r3, r0, r1
 80050fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	431a      	orrs	r2, r3
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	431a      	orrs	r2, r3
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800512c:	f021 010c 	bic.w	r1, r1, #12
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800513a:	430b      	orrs	r3, r1
 800513c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800513e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514e:	6999      	ldr	r1, [r3, #24]
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	ea40 0301 	orr.w	r3, r0, r1
 800515a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4b8f      	ldr	r3, [pc, #572]	; (80053a0 <UART_SetConfig+0x2cc>)
 8005164:	429a      	cmp	r2, r3
 8005166:	d005      	beq.n	8005174 <UART_SetConfig+0xa0>
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b8d      	ldr	r3, [pc, #564]	; (80053a4 <UART_SetConfig+0x2d0>)
 8005170:	429a      	cmp	r2, r3
 8005172:	d104      	bne.n	800517e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005174:	f7fe fea0 	bl	8003eb8 <HAL_RCC_GetPCLK2Freq>
 8005178:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800517c:	e003      	b.n	8005186 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800517e:	f7fe fe87 	bl	8003e90 <HAL_RCC_GetPCLK1Freq>
 8005182:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	f040 810c 	bne.w	80053ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005198:	2200      	movs	r2, #0
 800519a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800519e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051a6:	4622      	mov	r2, r4
 80051a8:	462b      	mov	r3, r5
 80051aa:	1891      	adds	r1, r2, r2
 80051ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80051ae:	415b      	adcs	r3, r3
 80051b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051b6:	4621      	mov	r1, r4
 80051b8:	eb12 0801 	adds.w	r8, r2, r1
 80051bc:	4629      	mov	r1, r5
 80051be:	eb43 0901 	adc.w	r9, r3, r1
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051d6:	4690      	mov	r8, r2
 80051d8:	4699      	mov	r9, r3
 80051da:	4623      	mov	r3, r4
 80051dc:	eb18 0303 	adds.w	r3, r8, r3
 80051e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051e4:	462b      	mov	r3, r5
 80051e6:	eb49 0303 	adc.w	r3, r9, r3
 80051ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005202:	460b      	mov	r3, r1
 8005204:	18db      	adds	r3, r3, r3
 8005206:	653b      	str	r3, [r7, #80]	; 0x50
 8005208:	4613      	mov	r3, r2
 800520a:	eb42 0303 	adc.w	r3, r2, r3
 800520e:	657b      	str	r3, [r7, #84]	; 0x54
 8005210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005218:	f7fb f832 	bl	8000280 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4b61      	ldr	r3, [pc, #388]	; (80053a8 <UART_SetConfig+0x2d4>)
 8005222:	fba3 2302 	umull	r2, r3, r3, r2
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	011c      	lsls	r4, r3, #4
 800522a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800522e:	2200      	movs	r2, #0
 8005230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005234:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800523c:	4642      	mov	r2, r8
 800523e:	464b      	mov	r3, r9
 8005240:	1891      	adds	r1, r2, r2
 8005242:	64b9      	str	r1, [r7, #72]	; 0x48
 8005244:	415b      	adcs	r3, r3
 8005246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800524c:	4641      	mov	r1, r8
 800524e:	eb12 0a01 	adds.w	sl, r2, r1
 8005252:	4649      	mov	r1, r9
 8005254:	eb43 0b01 	adc.w	fp, r3, r1
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800526c:	4692      	mov	sl, r2
 800526e:	469b      	mov	fp, r3
 8005270:	4643      	mov	r3, r8
 8005272:	eb1a 0303 	adds.w	r3, sl, r3
 8005276:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800527a:	464b      	mov	r3, r9
 800527c:	eb4b 0303 	adc.w	r3, fp, r3
 8005280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005290:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005298:	460b      	mov	r3, r1
 800529a:	18db      	adds	r3, r3, r3
 800529c:	643b      	str	r3, [r7, #64]	; 0x40
 800529e:	4613      	mov	r3, r2
 80052a0:	eb42 0303 	adc.w	r3, r2, r3
 80052a4:	647b      	str	r3, [r7, #68]	; 0x44
 80052a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052ae:	f7fa ffe7 	bl	8000280 <__aeabi_uldivmod>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	4b3b      	ldr	r3, [pc, #236]	; (80053a8 <UART_SetConfig+0x2d4>)
 80052ba:	fba3 2301 	umull	r2, r3, r3, r1
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	2264      	movs	r2, #100	; 0x64
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	1acb      	subs	r3, r1, r3
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052ce:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <UART_SetConfig+0x2d4>)
 80052d0:	fba3 2302 	umull	r2, r3, r3, r2
 80052d4:	095b      	lsrs	r3, r3, #5
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052dc:	441c      	add	r4, r3
 80052de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052f0:	4642      	mov	r2, r8
 80052f2:	464b      	mov	r3, r9
 80052f4:	1891      	adds	r1, r2, r2
 80052f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80052f8:	415b      	adcs	r3, r3
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005300:	4641      	mov	r1, r8
 8005302:	1851      	adds	r1, r2, r1
 8005304:	6339      	str	r1, [r7, #48]	; 0x30
 8005306:	4649      	mov	r1, r9
 8005308:	414b      	adcs	r3, r1
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005318:	4659      	mov	r1, fp
 800531a:	00cb      	lsls	r3, r1, #3
 800531c:	4651      	mov	r1, sl
 800531e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005322:	4651      	mov	r1, sl
 8005324:	00ca      	lsls	r2, r1, #3
 8005326:	4610      	mov	r0, r2
 8005328:	4619      	mov	r1, r3
 800532a:	4603      	mov	r3, r0
 800532c:	4642      	mov	r2, r8
 800532e:	189b      	adds	r3, r3, r2
 8005330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005334:	464b      	mov	r3, r9
 8005336:	460a      	mov	r2, r1
 8005338:	eb42 0303 	adc.w	r3, r2, r3
 800533c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800534c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005354:	460b      	mov	r3, r1
 8005356:	18db      	adds	r3, r3, r3
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
 800535a:	4613      	mov	r3, r2
 800535c:	eb42 0303 	adc.w	r3, r2, r3
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800536a:	f7fa ff89 	bl	8000280 <__aeabi_uldivmod>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <UART_SetConfig+0x2d4>)
 8005374:	fba3 1302 	umull	r1, r3, r3, r2
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	2164      	movs	r1, #100	; 0x64
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	3332      	adds	r3, #50	; 0x32
 8005386:	4a08      	ldr	r2, [pc, #32]	; (80053a8 <UART_SetConfig+0x2d4>)
 8005388:	fba2 2303 	umull	r2, r3, r2, r3
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	f003 0207 	and.w	r2, r3, #7
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4422      	add	r2, r4
 800539a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800539c:	e106      	b.n	80055ac <UART_SetConfig+0x4d8>
 800539e:	bf00      	nop
 80053a0:	40011000 	.word	0x40011000
 80053a4:	40011400 	.word	0x40011400
 80053a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b0:	2200      	movs	r2, #0
 80053b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053be:	4642      	mov	r2, r8
 80053c0:	464b      	mov	r3, r9
 80053c2:	1891      	adds	r1, r2, r2
 80053c4:	6239      	str	r1, [r7, #32]
 80053c6:	415b      	adcs	r3, r3
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ce:	4641      	mov	r1, r8
 80053d0:	1854      	adds	r4, r2, r1
 80053d2:	4649      	mov	r1, r9
 80053d4:	eb43 0501 	adc.w	r5, r3, r1
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	00eb      	lsls	r3, r5, #3
 80053e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053e6:	00e2      	lsls	r2, r4, #3
 80053e8:	4614      	mov	r4, r2
 80053ea:	461d      	mov	r5, r3
 80053ec:	4643      	mov	r3, r8
 80053ee:	18e3      	adds	r3, r4, r3
 80053f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053f4:	464b      	mov	r3, r9
 80053f6:	eb45 0303 	adc.w	r3, r5, r3
 80053fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800540a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800541a:	4629      	mov	r1, r5
 800541c:	008b      	lsls	r3, r1, #2
 800541e:	4621      	mov	r1, r4
 8005420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005424:	4621      	mov	r1, r4
 8005426:	008a      	lsls	r2, r1, #2
 8005428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800542c:	f7fa ff28 	bl	8000280 <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4b60      	ldr	r3, [pc, #384]	; (80055b8 <UART_SetConfig+0x4e4>)
 8005436:	fba3 2302 	umull	r2, r3, r3, r2
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	011c      	lsls	r4, r3, #4
 800543e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005442:	2200      	movs	r2, #0
 8005444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005448:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800544c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	1891      	adds	r1, r2, r2
 8005456:	61b9      	str	r1, [r7, #24]
 8005458:	415b      	adcs	r3, r3
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005460:	4641      	mov	r1, r8
 8005462:	1851      	adds	r1, r2, r1
 8005464:	6139      	str	r1, [r7, #16]
 8005466:	4649      	mov	r1, r9
 8005468:	414b      	adcs	r3, r1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005478:	4659      	mov	r1, fp
 800547a:	00cb      	lsls	r3, r1, #3
 800547c:	4651      	mov	r1, sl
 800547e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005482:	4651      	mov	r1, sl
 8005484:	00ca      	lsls	r2, r1, #3
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	4603      	mov	r3, r0
 800548c:	4642      	mov	r2, r8
 800548e:	189b      	adds	r3, r3, r2
 8005490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005494:	464b      	mov	r3, r9
 8005496:	460a      	mov	r2, r1
 8005498:	eb42 0303 	adc.w	r3, r2, r3
 800549c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80054aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054b8:	4649      	mov	r1, r9
 80054ba:	008b      	lsls	r3, r1, #2
 80054bc:	4641      	mov	r1, r8
 80054be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c2:	4641      	mov	r1, r8
 80054c4:	008a      	lsls	r2, r1, #2
 80054c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054ca:	f7fa fed9 	bl	8000280 <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	4b38      	ldr	r3, [pc, #224]	; (80055b8 <UART_SetConfig+0x4e4>)
 80054d6:	fba3 2301 	umull	r2, r3, r3, r1
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2264      	movs	r2, #100	; 0x64
 80054de:	fb02 f303 	mul.w	r3, r2, r3
 80054e2:	1acb      	subs	r3, r1, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	3332      	adds	r3, #50	; 0x32
 80054e8:	4a33      	ldr	r2, [pc, #204]	; (80055b8 <UART_SetConfig+0x4e4>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054f4:	441c      	add	r4, r3
 80054f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054fa:	2200      	movs	r2, #0
 80054fc:	673b      	str	r3, [r7, #112]	; 0x70
 80054fe:	677a      	str	r2, [r7, #116]	; 0x74
 8005500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	1891      	adds	r1, r2, r2
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	415b      	adcs	r3, r3
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005514:	4641      	mov	r1, r8
 8005516:	1851      	adds	r1, r2, r1
 8005518:	6039      	str	r1, [r7, #0]
 800551a:	4649      	mov	r1, r9
 800551c:	414b      	adcs	r3, r1
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800552c:	4659      	mov	r1, fp
 800552e:	00cb      	lsls	r3, r1, #3
 8005530:	4651      	mov	r1, sl
 8005532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005536:	4651      	mov	r1, sl
 8005538:	00ca      	lsls	r2, r1, #3
 800553a:	4610      	mov	r0, r2
 800553c:	4619      	mov	r1, r3
 800553e:	4603      	mov	r3, r0
 8005540:	4642      	mov	r2, r8
 8005542:	189b      	adds	r3, r3, r2
 8005544:	66bb      	str	r3, [r7, #104]	; 0x68
 8005546:	464b      	mov	r3, r9
 8005548:	460a      	mov	r2, r1
 800554a:	eb42 0303 	adc.w	r3, r2, r3
 800554e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
 800555a:	667a      	str	r2, [r7, #100]	; 0x64
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005568:	4649      	mov	r1, r9
 800556a:	008b      	lsls	r3, r1, #2
 800556c:	4641      	mov	r1, r8
 800556e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005572:	4641      	mov	r1, r8
 8005574:	008a      	lsls	r2, r1, #2
 8005576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800557a:	f7fa fe81 	bl	8000280 <__aeabi_uldivmod>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <UART_SetConfig+0x4e4>)
 8005584:	fba3 1302 	umull	r1, r3, r3, r2
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	2164      	movs	r1, #100	; 0x64
 800558c:	fb01 f303 	mul.w	r3, r1, r3
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	3332      	adds	r3, #50	; 0x32
 8005596:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <UART_SetConfig+0x4e4>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	f003 020f 	and.w	r2, r3, #15
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4422      	add	r2, r4
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055b2:	46bd      	mov	sp, r7
 80055b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b8:	51eb851f 	.word	0x51eb851f

080055bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80055bc:	b5b0      	push	{r4, r5, r7, lr}
 80055be:	b08c      	sub	sp, #48	; 0x30
 80055c0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80055c2:	2100      	movs	r1, #0
 80055c4:	2000      	movs	r0, #0
 80055c6:	f00b fe81 	bl	80112cc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80055ca:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <MX_LWIP_Init+0x78>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80055d0:	4b19      	ldr	r3, [pc, #100]	; (8005638 <MX_LWIP_Init+0x7c>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80055d6:	4b19      	ldr	r3, [pc, #100]	; (800563c <MX_LWIP_Init+0x80>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80055dc:	4b18      	ldr	r3, [pc, #96]	; (8005640 <MX_LWIP_Init+0x84>)
 80055de:	9302      	str	r3, [sp, #8]
 80055e0:	4b18      	ldr	r3, [pc, #96]	; (8005644 <MX_LWIP_Init+0x88>)
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	2300      	movs	r3, #0
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	4b14      	ldr	r3, [pc, #80]	; (800563c <MX_LWIP_Init+0x80>)
 80055ea:	4a13      	ldr	r2, [pc, #76]	; (8005638 <MX_LWIP_Init+0x7c>)
 80055ec:	4911      	ldr	r1, [pc, #68]	; (8005634 <MX_LWIP_Init+0x78>)
 80055ee:	4816      	ldr	r0, [pc, #88]	; (8005648 <MX_LWIP_Init+0x8c>)
 80055f0:	f00c fc36 	bl	8011e60 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80055f4:	4814      	ldr	r0, [pc, #80]	; (8005648 <MX_LWIP_Init+0x8c>)
 80055f6:	f00c fded 	bl	80121d4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80055fa:	4813      	ldr	r0, [pc, #76]	; (8005648 <MX_LWIP_Init+0x8c>)
 80055fc:	f00c fdfa 	bl	80121f4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005600:	4912      	ldr	r1, [pc, #72]	; (800564c <MX_LWIP_Init+0x90>)
 8005602:	4811      	ldr	r0, [pc, #68]	; (8005648 <MX_LWIP_Init+0x8c>)
 8005604:	f00c fefc 	bl	8012400 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 1024);
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <MX_LWIP_Init+0x94>)
 800560a:	1d3c      	adds	r4, r7, #4
 800560c:	461d      	mov	r5, r3
 800560e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	490a      	ldr	r1, [pc, #40]	; (8005648 <MX_LWIP_Init+0x8c>)
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fd20 	bl	8006064 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005624:	4808      	ldr	r0, [pc, #32]	; (8005648 <MX_LWIP_Init+0x8c>)
 8005626:	f014 fff3 	bl	801a610 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800562a:	bf00      	nop
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bdb0      	pop	{r4, r5, r7, pc}
 8005632:	bf00      	nop
 8005634:	2000068c 	.word	0x2000068c
 8005638:	20000690 	.word	0x20000690
 800563c:	20000694 	.word	0x20000694
 8005640:	080111dd 	.word	0x080111dd
 8005644:	08005b2d 	.word	0x08005b2d
 8005648:	20000654 	.word	0x20000654
 800564c:	08005655 	.word	0x08005655
 8005650:	08020c70 	.word	0x08020c70

08005654 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005670:	4b04      	ldr	r3, [pc, #16]	; (8005684 <HAL_ETH_RxCpltCallback+0x1c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fe71 	bl	800635c <osSemaphoreRelease>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20005164 	.word	0x20005164

08005688 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <HAL_ETH_TxCpltCallback+0x1c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fe61 	bl	800635c <osSemaphoreRelease>
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20005168 	.word	0x20005168

080056a8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7fd f8b1 	bl	8002818 <HAL_ETH_GetDMAError>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056bc:	2b80      	cmp	r3, #128	; 0x80
 80056be:	d104      	bne.n	80056ca <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80056c0:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <HAL_ETH_ErrorCallback+0x2c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fe49 	bl	800635c <osSemaphoreRelease>
  }
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20005164 	.word	0x20005164

080056d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80056d8:	b5b0      	push	{r4, r5, r7, lr}
 80056da:	b0ac      	sub	sp, #176	; 0xb0
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 80056f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80056f6:	2264      	movs	r2, #100	; 0x64
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f01a fa2c 	bl	801fb58 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005700:	4b90      	ldr	r3, [pc, #576]	; (8005944 <low_level_init+0x26c>)
 8005702:	4a91      	ldr	r2, [pc, #580]	; (8005948 <low_level_init+0x270>)
 8005704:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0xAE;
 8005706:	23ae      	movs	r3, #174	; 0xae
 8005708:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x04;
 800570c:	2304      	movs	r3, #4
 800570e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x65;
 8005712:	2365      	movs	r3, #101	; 0x65
 8005714:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x11;
 8005718:	2311      	movs	r3, #17
 800571a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xC2;
 800571e:	23c2      	movs	r3, #194	; 0xc2
 8005720:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xD9;
 8005724:	23d9      	movs	r3, #217	; 0xd9
 8005726:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800572a:	4a86      	ldr	r2, [pc, #536]	; (8005944 <low_level_init+0x26c>)
 800572c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005730:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005732:	4b84      	ldr	r3, [pc, #528]	; (8005944 <low_level_init+0x26c>)
 8005734:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005738:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800573a:	4b82      	ldr	r3, [pc, #520]	; (8005944 <low_level_init+0x26c>)
 800573c:	4a83      	ldr	r2, [pc, #524]	; (800594c <low_level_init+0x274>)
 800573e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005740:	4b80      	ldr	r3, [pc, #512]	; (8005944 <low_level_init+0x26c>)
 8005742:	4a83      	ldr	r2, [pc, #524]	; (8005950 <low_level_init+0x278>)
 8005744:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005746:	4b7f      	ldr	r3, [pc, #508]	; (8005944 <low_level_init+0x26c>)
 8005748:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800574c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800574e:	487d      	ldr	r0, [pc, #500]	; (8005944 <low_level_init+0x26c>)
 8005750:	f7fc fa18 	bl	8001b84 <HAL_ETH_Init>
 8005754:	4603      	mov	r3, r0
 8005756:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800575a:	2238      	movs	r2, #56	; 0x38
 800575c:	2100      	movs	r1, #0
 800575e:	487d      	ldr	r0, [pc, #500]	; (8005954 <low_level_init+0x27c>)
 8005760:	f01a f9fa 	bl	801fb58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005764:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <low_level_init+0x27c>)
 8005766:	2221      	movs	r2, #33	; 0x21
 8005768:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800576a:	4b7a      	ldr	r3, [pc, #488]	; (8005954 <low_level_init+0x27c>)
 800576c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005770:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005772:	4b78      	ldr	r3, [pc, #480]	; (8005954 <low_level_init+0x27c>)
 8005774:	2200      	movs	r2, #0
 8005776:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005778:	4877      	ldr	r0, [pc, #476]	; (8005958 <low_level_init+0x280>)
 800577a:	f00c fa2b 	bl	8011bd4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2206      	movs	r2, #6
 8005782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005786:	4b6f      	ldr	r3, [pc, #444]	; (8005944 <low_level_init+0x26c>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	781a      	ldrb	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005792:	4b6c      	ldr	r3, [pc, #432]	; (8005944 <low_level_init+0x26c>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	785a      	ldrb	r2, [r3, #1]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800579e:	4b69      	ldr	r3, [pc, #420]	; (8005944 <low_level_init+0x26c>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	789a      	ldrb	r2, [r3, #2]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80057aa:	4b66      	ldr	r3, [pc, #408]	; (8005944 <low_level_init+0x26c>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	78da      	ldrb	r2, [r3, #3]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80057b6:	4b63      	ldr	r3, [pc, #396]	; (8005944 <low_level_init+0x26c>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	791a      	ldrb	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80057c2:	4b60      	ldr	r3, [pc, #384]	; (8005944 <low_level_init+0x26c>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	795a      	ldrb	r2, [r3, #5]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80057d4:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057dc:	f043 030a 	orr.w	r3, r3, #10
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80057e8:	2300      	movs	r3, #0
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ec:	2300      	movs	r3, #0
 80057ee:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80057f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057f4:	2101      	movs	r1, #1
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fd30 	bl	800625c <osSemaphoreCreate>
 80057fc:	4603      	mov	r3, r0
 80057fe:	4a57      	ldr	r2, [pc, #348]	; (800595c <low_level_init+0x284>)
 8005800:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8005802:	2300      	movs	r3, #0
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
 8005806:	2300      	movs	r3, #0
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800580a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800580e:	2101      	movs	r1, #1
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fd23 	bl	800625c <osSemaphoreCreate>
 8005816:	4603      	mov	r3, r0
 8005818:	4a51      	ldr	r2, [pc, #324]	; (8005960 <low_level_init+0x288>)
 800581a:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800581c:	4b4f      	ldr	r3, [pc, #316]	; (800595c <low_level_init+0x284>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fd4c 	bl	80062c0 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8005828:	4b4d      	ldr	r3, [pc, #308]	; (8005960 <low_level_init+0x288>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fd46 	bl	80062c0 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005834:	4b4b      	ldr	r3, [pc, #300]	; (8005964 <low_level_init+0x28c>)
 8005836:	f107 0408 	add.w	r4, r7, #8
 800583a:	461d      	mov	r5, r3
 800583c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800583e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005840:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005848:	f107 0308 	add.w	r3, r7, #8
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fc08 	bl	8006064 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8005854:	4944      	ldr	r1, [pc, #272]	; (8005968 <low_level_init+0x290>)
 8005856:	4845      	ldr	r0, [pc, #276]	; (800596c <low_level_init+0x294>)
 8005858:	f7fb feeb 	bl	8001632 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 800585c:	4843      	ldr	r0, [pc, #268]	; (800596c <low_level_init+0x294>)
 800585e:	f7fb ff1a 	bl	8001696 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8005862:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005866:	2b00      	cmp	r3, #0
 8005868:	d165      	bne.n	8005936 <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800586a:	4840      	ldr	r0, [pc, #256]	; (800596c <low_level_init+0x294>)
 800586c:	f7fb ffbb 	bl	80017e6 <DP83848_GetLinkState>
 8005870:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8005874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005878:	2b01      	cmp	r3, #1
 800587a:	dc06      	bgt.n	800588a <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f00c fd8f 	bl	80123a0 <netif_set_link_down>
      netif_set_down(netif);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f00c fd22 	bl	80122cc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005888:	e057      	b.n	800593a <low_level_init+0x262>
      switch (PHYLinkState)
 800588a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800588e:	3b02      	subs	r3, #2
 8005890:	2b03      	cmp	r3, #3
 8005892:	d82b      	bhi.n	80058ec <low_level_init+0x214>
 8005894:	a201      	add	r2, pc, #4	; (adr r2, 800589c <low_level_init+0x1c4>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	080058bf 	.word	0x080058bf
 80058a4:	080058cf 	.word	0x080058cf
 80058a8:	080058df 	.word	0x080058df
        duplex = ETH_FULLDUPLEX_MODE;
 80058ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80058b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80058bc:	e01f      	b.n	80058fe <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 80058be:	2300      	movs	r3, #0
 80058c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80058c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80058cc:	e017      	b.n	80058fe <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80058ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80058dc:	e00f      	b.n	80058fe <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 80058de:	2300      	movs	r3, #0
 80058e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80058ea:	e008      	b.n	80058fe <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80058ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80058f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80058fc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80058fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005902:	4619      	mov	r1, r3
 8005904:	480f      	ldr	r0, [pc, #60]	; (8005944 <low_level_init+0x26c>)
 8005906:	f7fc fe2d 	bl	8002564 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800590a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800590e:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8005910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005914:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005916:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800591a:	4619      	mov	r1, r3
 800591c:	4809      	ldr	r0, [pc, #36]	; (8005944 <low_level_init+0x26c>)
 800591e:	f7fc ff0b 	bl	8002738 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005922:	4808      	ldr	r0, [pc, #32]	; (8005944 <low_level_init+0x26c>)
 8005924:	f7fc f9ac 	bl	8001c80 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f00c fc63 	bl	80121f4 <netif_set_up>
    netif_set_link_up(netif);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f00c fcfe 	bl	8012330 <netif_set_link_up>
}
 8005934:	e001      	b.n	800593a <low_level_init+0x262>
    Error_Handler();
 8005936:	f7fb fa19 	bl	8000d6c <Error_Handler>
}
 800593a:	bf00      	nop
 800593c:	37b0      	adds	r7, #176	; 0xb0
 800593e:	46bd      	mov	sp, r7
 8005940:	bdb0      	pop	{r4, r5, r7, pc}
 8005942:	bf00      	nop
 8005944:	2000516c 	.word	0x2000516c
 8005948:	40028000 	.word	0x40028000
 800594c:	200050c4 	.word	0x200050c4
 8005950:	20005024 	.word	0x20005024
 8005954:	2000521c 	.word	0x2000521c
 8005958:	08024fcc 	.word	0x08024fcc
 800595c:	20005164 	.word	0x20005164
 8005960:	20005168 	.word	0x20005168
 8005964:	08020c94 	.word	0x08020c94
 8005968:	2000000c 	.word	0x2000000c
 800596c:	20005254 	.word	0x20005254

08005970 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b092      	sub	sp, #72	; 0x48
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005988:	f107 030c 	add.w	r3, r7, #12
 800598c:	2230      	movs	r2, #48	; 0x30
 800598e:	2100      	movs	r1, #0
 8005990:	4618      	mov	r0, r3
 8005992:	f01a f8e1 	bl	801fb58 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005996:	f107 030c 	add.w	r3, r7, #12
 800599a:	2230      	movs	r2, #48	; 0x30
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f01a f8da 	bl	801fb58 <memset>

  for(q = p; q != NULL; q = q->next)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	643b      	str	r3, [r7, #64]	; 0x40
 80059a8:	e045      	b.n	8005a36 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80059aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d902      	bls.n	80059b6 <low_level_output+0x46>
      return ERR_IF;
 80059b0:	f06f 030b 	mvn.w	r3, #11
 80059b4:	e06c      	b.n	8005a90 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 80059b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b8:	6859      	ldr	r1, [r3, #4]
 80059ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059bc:	4613      	mov	r3, r2
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	3348      	adds	r3, #72	; 0x48
 80059c6:	443b      	add	r3, r7
 80059c8:	3b3c      	subs	r3, #60	; 0x3c
 80059ca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80059cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ce:	895b      	ldrh	r3, [r3, #10]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059d4:	4613      	mov	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	3348      	adds	r3, #72	; 0x48
 80059de:	443b      	add	r3, r7
 80059e0:	3b38      	subs	r3, #56	; 0x38
 80059e2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80059e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d011      	beq.n	8005a0e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80059ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ec:	1e5a      	subs	r2, r3, #1
 80059ee:	f107 000c 	add.w	r0, r7, #12
 80059f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059f4:	460b      	mov	r3, r1
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	440b      	add	r3, r1
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18c1      	adds	r1, r0, r3
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	3348      	adds	r3, #72	; 0x48
 8005a08:	443b      	add	r3, r7
 8005a0a:	3b34      	subs	r3, #52	; 0x34
 8005a0c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a18:	4613      	mov	r3, r2
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	3348      	adds	r3, #72	; 0x48
 8005a22:	443b      	add	r3, r7
 8005a24:	3b34      	subs	r3, #52	; 0x34
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	643b      	str	r3, [r7, #64]	; 0x40
 8005a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1b6      	bne.n	80059aa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	891b      	ldrh	r3, [r3, #8]
 8005a40:	461a      	mov	r2, r3
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <low_level_output+0x128>)
 8005a44:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005a46:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <low_level_output+0x128>)
 8005a48:	f107 030c 	add.w	r3, r7, #12
 8005a4c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005a4e:	4a12      	ldr	r2, [pc, #72]	; (8005a98 <low_level_output+0x128>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005a54:	6838      	ldr	r0, [r7, #0]
 8005a56:	f00d f95f 	bl	8012d18 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8005a5a:	490f      	ldr	r1, [pc, #60]	; (8005a98 <low_level_output+0x128>)
 8005a5c:	480f      	ldr	r0, [pc, #60]	; (8005a9c <low_level_output+0x12c>)
 8005a5e:	f7fc fa1c 	bl	8001e9a <HAL_ETH_Transmit_IT>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10e      	bne.n	8005a86 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005a68:	bf00      	nop
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <low_level_output+0x130>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fc24 	bl	80062c0 <osSemaphoreWait>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f5      	bne.n	8005a6a <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8005a7e:	4807      	ldr	r0, [pc, #28]	; (8005a9c <low_level_output+0x12c>)
 8005a80:	f7fc fbaa 	bl	80021d8 <HAL_ETH_ReleaseTxPacket>
 8005a84:	e002      	b.n	8005a8c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8005a86:	6838      	ldr	r0, [r7, #0]
 8005a88:	f00d f8a0 	bl	8012bcc <pbuf_free>
  }

  return errval;
 8005a8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3748      	adds	r7, #72	; 0x48
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	2000521c 	.word	0x2000521c
 8005a9c:	2000516c 	.word	0x2000516c
 8005aa0:	20005168 	.word	0x20005168

08005aa4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <low_level_input+0x2c>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005ab8:	f107 030c 	add.w	r3, r7, #12
 8005abc:	4619      	mov	r1, r3
 8005abe:	4805      	ldr	r0, [pc, #20]	; (8005ad4 <low_level_input+0x30>)
 8005ac0:	f7fc fa47 	bl	8001f52 <HAL_ETH_ReadData>
  }

  return p;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20005020 	.word	0x20005020
 8005ad4:	2000516c 	.word	0x2000516c

08005ad8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <ethernetif_input+0x50>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fbe5 	bl	80062c0 <osSemaphoreWait>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f5      	bne.n	8005ae8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005afc:	68b8      	ldr	r0, [r7, #8]
 8005afe:	f7ff ffd1 	bl	8005aa4 <low_level_input>
 8005b02:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	4798      	blx	r3
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f00d f856 	bl	8012bcc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1ea      	bne.n	8005afc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005b26:	e7df      	b.n	8005ae8 <ethernetif_input+0x10>
 8005b28:	20005164 	.word	0x20005164

08005b2c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <ethernetif_init+0x1c>
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <ethernetif_init+0x48>)
 8005b3c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005b40:	490d      	ldr	r1, [pc, #52]	; (8005b78 <ethernetif_init+0x4c>)
 8005b42:	480e      	ldr	r0, [pc, #56]	; (8005b7c <ethernetif_init+0x50>)
 8005b44:	f019 feb2 	bl	801f8ac <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2273      	movs	r2, #115	; 0x73
 8005b4c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2274      	movs	r2, #116	; 0x74
 8005b54:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <ethernetif_init+0x54>)
 8005b5c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a08      	ldr	r2, [pc, #32]	; (8005b84 <ethernetif_init+0x58>)
 8005b62:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fdb7 	bl	80056d8 <low_level_init>

  return ERR_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	08020cb0 	.word	0x08020cb0
 8005b78:	08020ccc 	.word	0x08020ccc
 8005b7c:	08020cdc 	.word	0x08020cdc
 8005b80:	0801c4dd 	.word	0x0801c4dd
 8005b84:	08005971 	.word	0x08005971

08005b88 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005b94:	68f9      	ldr	r1, [r7, #12]
 8005b96:	4809      	ldr	r0, [pc, #36]	; (8005bbc <pbuf_free_custom+0x34>)
 8005b98:	f00c f90c 	bl	8011db4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005b9c:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <pbuf_free_custom+0x38>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d107      	bne.n	8005bb4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005ba4:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <pbuf_free_custom+0x38>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <pbuf_free_custom+0x3c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fbd4 	bl	800635c <osSemaphoreRelease>
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	08024fcc 	.word	0x08024fcc
 8005bc0:	20005020 	.word	0x20005020
 8005bc4:	20005164 	.word	0x20005164

08005bc8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005bcc:	f7fb fec8 	bl	8001960 <HAL_GetTick>
 8005bd0:	4603      	mov	r3, r0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08e      	sub	sp, #56	; 0x38
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	605a      	str	r2, [r3, #4]
 8005bea:	609a      	str	r2, [r3, #8]
 8005bec:	60da      	str	r2, [r3, #12]
 8005bee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a4a      	ldr	r2, [pc, #296]	; (8005d20 <HAL_ETH_MspInit+0x148>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	f040 808d 	bne.w	8005d16 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	623b      	str	r3, [r7, #32]
 8005c00:	4b48      	ldr	r3, [pc, #288]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	4a47      	ldr	r2, [pc, #284]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c0c:	4b45      	ldr	r3, [pc, #276]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61fb      	str	r3, [r7, #28]
 8005c1c:	4b41      	ldr	r3, [pc, #260]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	4a40      	ldr	r2, [pc, #256]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c26:	6313      	str	r3, [r2, #48]	; 0x30
 8005c28:	4b3e      	ldr	r3, [pc, #248]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	4b3a      	ldr	r3, [pc, #232]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	4a39      	ldr	r2, [pc, #228]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c42:	6313      	str	r3, [r2, #48]	; 0x30
 8005c44:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	4b33      	ldr	r3, [pc, #204]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	4a32      	ldr	r2, [pc, #200]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c5a:	f043 0304 	orr.w	r3, r3, #4
 8005c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c60:	4b30      	ldr	r3, [pc, #192]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	4b2c      	ldr	r3, [pc, #176]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c74:	4a2b      	ldr	r2, [pc, #172]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c76:	f043 0301 	orr.w	r3, r3, #1
 8005c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c7c:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	4b25      	ldr	r3, [pc, #148]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	4a24      	ldr	r2, [pc, #144]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c92:	f043 0302 	orr.w	r3, r3, #2
 8005c96:	6313      	str	r3, [r2, #48]	; 0x30
 8005c98:	4b22      	ldr	r3, [pc, #136]	; (8005d24 <HAL_ETH_MspInit+0x14c>)
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005ca4:	2332      	movs	r3, #50	; 0x32
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cb4:	230b      	movs	r3, #11
 8005cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	481a      	ldr	r0, [pc, #104]	; (8005d28 <HAL_ETH_MspInit+0x150>)
 8005cc0:	f7fd f9bc 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005cc4:	2386      	movs	r3, #134	; 0x86
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cd4:	230b      	movs	r3, #11
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4813      	ldr	r0, [pc, #76]	; (8005d2c <HAL_ETH_MspInit+0x154>)
 8005ce0:	f7fd f9ac 	bl	800303c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005ce4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cea:	2302      	movs	r3, #2
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cf6:	230b      	movs	r3, #11
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cfe:	4619      	mov	r1, r3
 8005d00:	480b      	ldr	r0, [pc, #44]	; (8005d30 <HAL_ETH_MspInit+0x158>)
 8005d02:	f7fd f99b 	bl	800303c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005d06:	2200      	movs	r2, #0
 8005d08:	2105      	movs	r1, #5
 8005d0a:	203d      	movs	r0, #61	; 0x3d
 8005d0c:	f7fb ff10 	bl	8001b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005d10:	203d      	movs	r0, #61	; 0x3d
 8005d12:	f7fb ff29 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005d16:	bf00      	nop
 8005d18:	3738      	adds	r7, #56	; 0x38
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40028000 	.word	0x40028000
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40020800 	.word	0x40020800
 8005d2c:	40020000 	.word	0x40020000
 8005d30:	40020400 	.word	0x40020400

08005d34 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005d38:	4802      	ldr	r0, [pc, #8]	; (8005d44 <ETH_PHY_IO_Init+0x10>)
 8005d3a:	f7fc fd17 	bl	800276c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	2000516c 	.word	0x2000516c

08005d48 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  return 0;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	68f9      	ldr	r1, [r7, #12]
 8005d6a:	4807      	ldr	r0, [pc, #28]	; (8005d88 <ETH_PHY_IO_ReadReg+0x30>)
 8005d6c:	f7fc fb66 	bl	800243c <HAL_ETH_ReadPHYRegister>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d7a:	e000      	b.n	8005d7e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	2000516c 	.word	0x2000516c

08005d8c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	68f9      	ldr	r1, [r7, #12]
 8005d9e:	4807      	ldr	r0, [pc, #28]	; (8005dbc <ETH_PHY_IO_WriteReg+0x30>)
 8005da0:	f7fc fb97 	bl	80024d2 <HAL_ETH_WritePHYRegister>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dae:	e000      	b.n	8005db2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	2000516c 	.word	0x2000516c

08005dc0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005dc4:	f7fb fdcc 	bl	8001960 <HAL_GetTick>
 8005dc8:	4603      	mov	r3, r0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b0a0      	sub	sp, #128	; 0x80
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005dd8:	f107 0308 	add.w	r3, r7, #8
 8005ddc:	2264      	movs	r2, #100	; 0x64
 8005dde:	2100      	movs	r1, #0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f019 feb9 	bl	801fb58 <memset>
  int32_t PHYLinkState = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dee:	2300      	movs	r3, #0
 8005df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005df2:	2300      	movs	r3, #0
 8005df4:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005dfa:	483a      	ldr	r0, [pc, #232]	; (8005ee4 <ethernet_link_thread+0x114>)
 8005dfc:	f7fb fcf3 	bl	80017e6 <DP83848_GetLinkState>
 8005e00:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e08:	089b      	lsrs	r3, r3, #2
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00c      	beq.n	8005e2e <ethernet_link_thread+0x5e>
 8005e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	dc09      	bgt.n	8005e2e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005e1a:	4833      	ldr	r0, [pc, #204]	; (8005ee8 <ethernet_link_thread+0x118>)
 8005e1c:	f7fb ffbe 	bl	8001d9c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005e20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e22:	f00c fa53 	bl	80122cc <netif_set_down>
    netif_set_link_down(netif);
 8005e26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005e28:	f00c faba 	bl	80123a0 <netif_set_link_down>
 8005e2c:	e055      	b.n	8005eda <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8005e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d14e      	bne.n	8005eda <ethernet_link_thread+0x10a>
 8005e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	dd4b      	ble.n	8005eda <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e44:	3b02      	subs	r3, #2
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d82a      	bhi.n	8005ea0 <ethernet_link_thread+0xd0>
 8005e4a:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <ethernet_link_thread+0x80>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005e61 	.word	0x08005e61
 8005e54:	08005e73 	.word	0x08005e73
 8005e58:	08005e83 	.word	0x08005e83
 8005e5c:	08005e93 	.word	0x08005e93
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005e60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e64:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005e66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e6a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005e70:	e017      	b.n	8005ea2 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005e76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e7a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005e80:	e00f      	b.n	8005ea2 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e86:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005e90:	e007      	b.n	8005ea2 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005e96:	2300      	movs	r3, #0
 8005e98:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005e9e:	e000      	b.n	8005ea2 <ethernet_link_thread+0xd2>
    default:
      break;
 8005ea0:	bf00      	nop
    }

    if(linkchanged)
 8005ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d018      	beq.n	8005eda <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005ea8:	f107 0308 	add.w	r3, r7, #8
 8005eac:	4619      	mov	r1, r3
 8005eae:	480e      	ldr	r0, [pc, #56]	; (8005ee8 <ethernet_link_thread+0x118>)
 8005eb0:	f7fc fb58 	bl	8002564 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005eb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eba:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005ebc:	f107 0308 	add.w	r3, r7, #8
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4809      	ldr	r0, [pc, #36]	; (8005ee8 <ethernet_link_thread+0x118>)
 8005ec4:	f7fc fc38 	bl	8002738 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005ec8:	4807      	ldr	r0, [pc, #28]	; (8005ee8 <ethernet_link_thread+0x118>)
 8005eca:	f7fb fed9 	bl	8001c80 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005ece:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ed0:	f00c f990 	bl	80121f4 <netif_set_up>
      netif_set_link_up(netif);
 8005ed4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ed6:	f00c fa2b 	bl	8012330 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005eda:	2064      	movs	r0, #100	; 0x64
 8005edc:	f000 f90e 	bl	80060fc <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005ee0:	e78b      	b.n	8005dfa <ethernet_link_thread+0x2a>
 8005ee2:	bf00      	nop
 8005ee4:	20005254 	.word	0x20005254
 8005ee8:	2000516c 	.word	0x2000516c

08005eec <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005ef4:	4812      	ldr	r0, [pc, #72]	; (8005f40 <HAL_ETH_RxAllocateCallback+0x54>)
 8005ef6:	f00b fee9 	bl	8011ccc <memp_malloc_pool>
 8005efa:	60f8      	str	r0, [r7, #12]
  if (p)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d014      	beq.n	8005f2c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f103 0220 	add.w	r2, r3, #32
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a0d      	ldr	r2, [pc, #52]	; (8005f44 <HAL_ETH_RxAllocateCallback+0x58>)
 8005f10:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005f1a:	9201      	str	r2, [sp, #4]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2241      	movs	r2, #65	; 0x41
 8005f22:	2100      	movs	r1, #0
 8005f24:	2000      	movs	r0, #0
 8005f26:	f00c fc97 	bl	8012858 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005f2a:	e005      	b.n	8005f38 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_ETH_RxAllocateCallback+0x5c>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	08024fcc 	.word	0x08024fcc
 8005f44:	08005b89 	.word	0x08005b89
 8005f48:	20005020 	.word	0x20005020

08005f4c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b089      	sub	sp, #36	; 0x24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3b20      	subs	r3, #32
 8005f6a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2200      	movs	r2, #0
 8005f76:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d103      	bne.n	8005f8e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	e003      	b.n	8005f96 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	61fb      	str	r3, [r7, #28]
 8005fa2:	e009      	b.n	8005fb8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	891a      	ldrh	r2, [r3, #8]
 8005fa8:	887b      	ldrh	r3, [r7, #2]
 8005faa:	4413      	add	r3, r2
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f2      	bne.n	8005fa4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	3724      	adds	r7, #36	; 0x24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f00c fdf9 	bl	8012bcc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	4603      	mov	r3, r0
 8005fea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ff4:	2b84      	cmp	r3, #132	; 0x84
 8005ff6:	d005      	beq.n	8006004 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ff8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	3303      	adds	r3, #3
 8006002:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006018:	f3ef 8305 	mrs	r3, IPSR
 800601c:	607b      	str	r3, [r7, #4]
  return(result);
 800601e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006020:	2b00      	cmp	r3, #0
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800603a:	f001 fdcb 	bl	8007bd4 <vTaskStartScheduler>
  
  return osOK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}

08006044 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006048:	f7ff ffe3 	bl	8006012 <inHandlerMode>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006052:	f001 fee3 	bl	8007e1c <xTaskGetTickCountFromISR>
 8006056:	4603      	mov	r3, r0
 8006058:	e002      	b.n	8006060 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800605a:	f001 fecf 	bl	8007dfc <xTaskGetTickCount>
 800605e:	4603      	mov	r3, r0
  }
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}

08006064 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006066:	b089      	sub	sp, #36	; 0x24
 8006068:	af04      	add	r7, sp, #16
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d020      	beq.n	80060b8 <osThreadCreate+0x54>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01c      	beq.n	80060b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685c      	ldr	r4, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691e      	ldr	r6, [r3, #16]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff ffa6 	bl	8005fe2 <makeFreeRtosPriority>
 8006096:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060a0:	9202      	str	r2, [sp, #8]
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	9100      	str	r1, [sp, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	4632      	mov	r2, r6
 80060aa:	4629      	mov	r1, r5
 80060ac:	4620      	mov	r0, r4
 80060ae:	f001 fb23 	bl	80076f8 <xTaskCreateStatic>
 80060b2:	4603      	mov	r3, r0
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	e01c      	b.n	80060f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685c      	ldr	r4, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060c4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff ff88 	bl	8005fe2 <makeFreeRtosPriority>
 80060d2:	4602      	mov	r2, r0
 80060d4:	f107 030c 	add.w	r3, r7, #12
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	9200      	str	r2, [sp, #0]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	4632      	mov	r2, r6
 80060e0:	4629      	mov	r1, r5
 80060e2:	4620      	mov	r0, r4
 80060e4:	f001 fb65 	bl	80077b2 <xTaskCreate>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d001      	beq.n	80060f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	e000      	b.n	80060f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80060f2:	68fb      	ldr	r3, [r7, #12]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <osDelay+0x16>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	e000      	b.n	8006114 <osDelay+0x18>
 8006112:	2301      	movs	r3, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f001 fd29 	bl	8007b6c <vTaskDelay>
  
  return osOK;
 800611a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4619      	mov	r1, r3
 800613a:	2001      	movs	r0, #1
 800613c:	f000 fc7d 	bl	8006a3a <xQueueCreateMutexStatic>
 8006140:	4603      	mov	r3, r0
 8006142:	e003      	b.n	800614c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006144:	2001      	movs	r0, #1
 8006146:	f000 fc60 	bl	8006a0a <xQueueCreateMutex>
 800614a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800614c:	4618      	mov	r0, r3
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800615e:	2300      	movs	r3, #0
 8006160:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <osMutexWait+0x18>
    return osErrorParameter;
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	e03a      	b.n	80061e2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006176:	d103      	bne.n	8006180 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	e009      	b.n	8006194 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d006      	beq.n	8006194 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <osMutexWait+0x40>
      ticks = 1;
 8006190:	2301      	movs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006194:	f7ff ff3d 	bl	8006012 <inHandlerMode>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d017      	beq.n	80061ce <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800619e:	f107 0308 	add.w	r3, r7, #8
 80061a2:	461a      	mov	r2, r3
 80061a4:	2100      	movs	r1, #0
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 f874 	bl	8007294 <xQueueReceiveFromISR>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d001      	beq.n	80061b6 <osMutexWait+0x62>
      return osErrorOS;
 80061b2:	23ff      	movs	r3, #255	; 0xff
 80061b4:	e015      	b.n	80061e2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d011      	beq.n	80061e0 <osMutexWait+0x8c>
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <osMutexWait+0x98>)
 80061be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	e008      	b.n	80061e0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 ff53 	bl	800707c <xQueueSemaphoreTake>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d001      	beq.n	80061e0 <osMutexWait+0x8c>
    return osErrorOS;
 80061dc:	23ff      	movs	r3, #255	; 0xff
 80061de:	e000      	b.n	80061e2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006200:	f7ff ff07 	bl	8006012 <inHandlerMode>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d016      	beq.n	8006238 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800620a:	f107 0308 	add.w	r3, r7, #8
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fdc6 	bl	8006da2 <xQueueGiveFromISR>
 8006216:	4603      	mov	r3, r0
 8006218:	2b01      	cmp	r3, #1
 800621a:	d001      	beq.n	8006220 <osMutexRelease+0x30>
      return osErrorOS;
 800621c:	23ff      	movs	r3, #255	; 0xff
 800621e:	e017      	b.n	8006250 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d013      	beq.n	800624e <osMutexRelease+0x5e>
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <osMutexRelease+0x68>)
 8006228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	e00a      	b.n	800624e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006238:	2300      	movs	r3, #0
 800623a:	2200      	movs	r2, #0
 800623c:	2100      	movs	r1, #0
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fc16 	bl	8006a70 <xQueueGenericSend>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d001      	beq.n	800624e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800624a:	23ff      	movs	r3, #255	; 0xff
 800624c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800624e:	68fb      	ldr	r3, [r7, #12]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af02      	add	r7, sp, #8
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00f      	beq.n	800628e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d10a      	bne.n	800628a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2203      	movs	r2, #3
 800627a:	9200      	str	r2, [sp, #0]
 800627c:	2200      	movs	r2, #0
 800627e:	2100      	movs	r1, #0
 8006280:	2001      	movs	r0, #1
 8006282:	f000 fad7 	bl	8006834 <xQueueGenericCreateStatic>
 8006286:	4603      	mov	r3, r0
 8006288:	e016      	b.n	80062b8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800628a:	2300      	movs	r3, #0
 800628c:	e014      	b.n	80062b8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d110      	bne.n	80062b6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006294:	2203      	movs	r2, #3
 8006296:	2100      	movs	r1, #0
 8006298:	2001      	movs	r0, #1
 800629a:	f000 fb43 	bl	8006924 <xQueueGenericCreate>
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <osSemaphoreCreate+0x56>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2200      	movs	r2, #0
 80062aa:	2100      	movs	r1, #0
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fbdf 	bl	8006a70 <xQueueGenericSend>
      return sema;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	e000      	b.n	80062b8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80062b6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80062ca:	2300      	movs	r3, #0
 80062cc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	e03a      	b.n	800634e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e2:	d103      	bne.n	80062ec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e009      	b.n	8006300 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d006      	beq.n	8006300 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <osSemaphoreWait+0x40>
      ticks = 1;
 80062fc:	2301      	movs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006300:	f7ff fe87 	bl	8006012 <inHandlerMode>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d017      	beq.n	800633a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800630a:	f107 0308 	add.w	r3, r7, #8
 800630e:	461a      	mov	r2, r3
 8006310:	2100      	movs	r1, #0
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 ffbe 	bl	8007294 <xQueueReceiveFromISR>
 8006318:	4603      	mov	r3, r0
 800631a:	2b01      	cmp	r3, #1
 800631c:	d001      	beq.n	8006322 <osSemaphoreWait+0x62>
      return osErrorOS;
 800631e:	23ff      	movs	r3, #255	; 0xff
 8006320:	e015      	b.n	800634e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d011      	beq.n	800634c <osSemaphoreWait+0x8c>
 8006328:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <osSemaphoreWait+0x98>)
 800632a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	e008      	b.n	800634c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fe9d 	bl	800707c <xQueueSemaphoreTake>
 8006342:	4603      	mov	r3, r0
 8006344:	2b01      	cmp	r3, #1
 8006346:	d001      	beq.n	800634c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006348:	23ff      	movs	r3, #255	; 0xff
 800634a:	e000      	b.n	800634e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006368:	2300      	movs	r3, #0
 800636a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800636c:	f7ff fe51 	bl	8006012 <inHandlerMode>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d016      	beq.n	80063a4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006376:	f107 0308 	add.w	r3, r7, #8
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fd10 	bl	8006da2 <xQueueGiveFromISR>
 8006382:	4603      	mov	r3, r0
 8006384:	2b01      	cmp	r3, #1
 8006386:	d001      	beq.n	800638c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006388:	23ff      	movs	r3, #255	; 0xff
 800638a:	e017      	b.n	80063bc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d013      	beq.n	80063ba <osSemaphoreRelease+0x5e>
 8006392:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <osSemaphoreRelease+0x68>)
 8006394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	e00a      	b.n	80063ba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80063a4:	2300      	movs	r3, #0
 80063a6:	2200      	movs	r2, #0
 80063a8:	2100      	movs	r1, #0
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fb60 	bl	8006a70 <xQueueGenericSend>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d001      	beq.n	80063ba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80063b6:	23ff      	movs	r3, #255	; 0xff
 80063b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80063ba:	68fb      	ldr	r3, [r7, #12]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80063d0:	f7ff fe1f 	bl	8006012 <inHandlerMode>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <osSemaphoreDelete+0x16>
    return osErrorISR;
 80063da:	2382      	movs	r3, #130	; 0x82
 80063dc:	e003      	b.n	80063e6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 f814 	bl	800740c <vQueueDelete>

  return osOK; 
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80063ee:	b590      	push	{r4, r7, lr}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af02      	add	r7, sp, #8
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d011      	beq.n	8006424 <osMessageCreate+0x36>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00d      	beq.n	8006424 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6859      	ldr	r1, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2400      	movs	r4, #0
 800641a:	9400      	str	r4, [sp, #0]
 800641c:	f000 fa0a 	bl	8006834 <xQueueGenericCreateStatic>
 8006420:	4603      	mov	r3, r0
 8006422:	e008      	b.n	8006436 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	4619      	mov	r1, r3
 8006430:	f000 fa78 	bl	8006924 <xQueueGenericCreate>
 8006434:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	bd90      	pop	{r4, r7, pc}
	...

08006440 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <osMessagePut+0x1e>
    ticks = 1;
 800645a:	2301      	movs	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800645e:	f7ff fdd8 	bl	8006012 <inHandlerMode>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d018      	beq.n	800649a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006468:	f107 0210 	add.w	r2, r7, #16
 800646c:	f107 0108 	add.w	r1, r7, #8
 8006470:	2300      	movs	r3, #0
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fbfa 	bl	8006c6c <xQueueGenericSendFromISR>
 8006478:	4603      	mov	r3, r0
 800647a:	2b01      	cmp	r3, #1
 800647c:	d001      	beq.n	8006482 <osMessagePut+0x42>
      return osErrorOS;
 800647e:	23ff      	movs	r3, #255	; 0xff
 8006480:	e018      	b.n	80064b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d014      	beq.n	80064b2 <osMessagePut+0x72>
 8006488:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <osMessagePut+0x7c>)
 800648a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	e00b      	b.n	80064b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800649a:	f107 0108 	add.w	r1, r7, #8
 800649e:	2300      	movs	r3, #0
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fae4 	bl	8006a70 <xQueueGenericSend>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d001      	beq.n	80064b2 <osMessagePut+0x72>
      return osErrorOS;
 80064ae:	23ff      	movs	r3, #255	; 0xff
 80064b0:	e000      	b.n	80064b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	e000ed04 	.word	0xe000ed04

080064c0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b08b      	sub	sp, #44	; 0x2c
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	617b      	str	r3, [r7, #20]
    return event;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	461c      	mov	r4, r3
 80064e2:	f107 0314 	add.w	r3, r7, #20
 80064e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80064ee:	e054      	b.n	800659a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064fe:	d103      	bne.n	8006508 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
 8006506:	e009      	b.n	800651c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <osMessageGet+0x5c>
      ticks = 1;
 8006518:	2301      	movs	r3, #1
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800651c:	f7ff fd79 	bl	8006012 <inHandlerMode>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01c      	beq.n	8006560 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006526:	f107 0220 	add.w	r2, r7, #32
 800652a:	f107 0314 	add.w	r3, r7, #20
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	68b8      	ldr	r0, [r7, #8]
 8006534:	f000 feae 	bl	8007294 <xQueueReceiveFromISR>
 8006538:	4603      	mov	r3, r0
 800653a:	2b01      	cmp	r3, #1
 800653c:	d102      	bne.n	8006544 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800653e:	2310      	movs	r3, #16
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	e001      	b.n	8006548 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d01d      	beq.n	800658a <osMessageGet+0xca>
 800654e:	4b15      	ldr	r3, [pc, #84]	; (80065a4 <osMessageGet+0xe4>)
 8006550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	e014      	b.n	800658a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006560:	f107 0314 	add.w	r3, r7, #20
 8006564:	3304      	adds	r3, #4
 8006566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006568:	4619      	mov	r1, r3
 800656a:	68b8      	ldr	r0, [r7, #8]
 800656c:	f000 fca6 	bl	8006ebc <xQueueReceive>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d102      	bne.n	800657c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006576:	2310      	movs	r3, #16
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e006      	b.n	800658a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <osMessageGet+0xc6>
 8006582:	2300      	movs	r3, #0
 8006584:	e000      	b.n	8006588 <osMessageGet+0xc8>
 8006586:	2340      	movs	r3, #64	; 0x40
 8006588:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	461c      	mov	r4, r3
 800658e:	f107 0314 	add.w	r3, r7, #20
 8006592:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	372c      	adds	r7, #44	; 0x2c
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd90      	pop	{r4, r7, pc}
 80065a2:	bf00      	nop
 80065a4:	e000ed04 	.word	0xe000ed04

080065a8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80065b0:	f7ff fd2f 	bl	8006012 <inHandlerMode>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 ff08 	bl	80073d0 <uxQueueMessagesWaitingFromISR>
 80065c0:	4603      	mov	r3, r0
 80065c2:	e003      	b.n	80065cc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fee5 	bl	8007394 <uxQueueMessagesWaiting>
 80065ca:	4603      	mov	r3, r0
  }
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80065dc:	f7ff fd19 	bl	8006012 <inHandlerMode>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <osMessageDelete+0x16>
    return osErrorISR;
 80065e6:	2382      	movs	r3, #130	; 0x82
 80065e8:	e003      	b.n	80065f2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 ff0e 	bl	800740c <vQueueDelete>

  return osOK; 
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f103 0208 	add.w	r2, r3, #8
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006612:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f103 0208 	add.w	r2, r3, #8
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f103 0208 	add.w	r2, r3, #8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	601a      	str	r2, [r3, #0]
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b2:	d103      	bne.n	80066bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	e00c      	b.n	80066d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3308      	adds	r3, #8
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	e002      	b.n	80066ca <vListInsert+0x2e>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d2f6      	bcs.n	80066c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	601a      	str	r2, [r3, #0]
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6892      	ldr	r2, [r2, #8]
 8006724:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6852      	ldr	r2, [r2, #4]
 800672e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	429a      	cmp	r2, r3
 8006738:	d103      	bne.n	8006742 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	1e5a      	subs	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
	...

08006764 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800678e:	f002 f9a1 	bl	8008ad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679a:	68f9      	ldr	r1, [r7, #12]
 800679c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800679e:	fb01 f303 	mul.w	r3, r1, r3
 80067a2:	441a      	add	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	3b01      	subs	r3, #1
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	441a      	add	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	22ff      	movs	r2, #255	; 0xff
 80067d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	22ff      	movs	r2, #255	; 0xff
 80067da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d114      	bne.n	800680e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01a      	beq.n	8006822 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3310      	adds	r3, #16
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fc63 	bl	80080bc <xTaskRemoveFromEventList>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d012      	beq.n	8006822 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067fc:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <xQueueGenericReset+0xcc>)
 80067fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	e009      	b.n	8006822 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3310      	adds	r3, #16
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fef1 	bl	80065fa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3324      	adds	r3, #36	; 0x24
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff feec 	bl	80065fa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006822:	f002 f987 	bl	8008b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006826:	2301      	movs	r3, #1
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	e000ed04 	.word	0xe000ed04

08006834 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08e      	sub	sp, #56	; 0x38
 8006838:	af02      	add	r7, sp, #8
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10a      	bne.n	800687a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <xQueueGenericCreateStatic+0x52>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <xQueueGenericCreateStatic+0x56>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <xQueueGenericCreateStatic+0x58>
 800688a:	2300      	movs	r3, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	623b      	str	r3, [r7, #32]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <xQueueGenericCreateStatic+0x7e>
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <xQueueGenericCreateStatic+0x82>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <xQueueGenericCreateStatic+0x84>
 80068b6:	2300      	movs	r3, #0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	61fb      	str	r3, [r7, #28]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80068d2:	2348      	movs	r3, #72	; 0x48
 80068d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b48      	cmp	r3, #72	; 0x48
 80068da:	d00a      	beq.n	80068f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	61bb      	str	r3, [r7, #24]
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00d      	beq.n	800691a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006906:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4613      	mov	r3, r2
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f83f 	bl	8006998 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800691a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800691c:	4618      	mov	r0, r3
 800691e:	3730      	adds	r7, #48	; 0x30
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	; 0x28
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	613b      	str	r3, [r7, #16]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	fb02 f303 	mul.w	r3, r2, r3
 8006956:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	3348      	adds	r3, #72	; 0x48
 800695c:	4618      	mov	r0, r3
 800695e:	f002 f9db 	bl	8008d18 <pvPortMalloc>
 8006962:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d011      	beq.n	800698e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	3348      	adds	r3, #72	; 0x48
 8006972:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800697c:	79fa      	ldrb	r2, [r7, #7]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	4613      	mov	r3, r2
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f805 	bl	8006998 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800698e:	69bb      	ldr	r3, [r7, #24]
	}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	e002      	b.n	80069ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069c6:	2101      	movs	r1, #1
 80069c8:	69b8      	ldr	r0, [r7, #24]
 80069ca:	f7ff fecb 	bl	8006764 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00e      	beq.n	8006a02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80069f6:	2300      	movs	r3, #0
 80069f8:	2200      	movs	r2, #0
 80069fa:	2100      	movs	r1, #0
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f837 	bl	8006a70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	4603      	mov	r3, r0
 8006a12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a14:	2301      	movs	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6939      	ldr	r1, [r7, #16]
 8006a22:	6978      	ldr	r0, [r7, #20]
 8006a24:	f7ff ff7e 	bl	8006924 <xQueueGenericCreate>
 8006a28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff ffd3 	bl	80069d6 <prvInitialiseMutex>

		return xNewQueue;
 8006a30:	68fb      	ldr	r3, [r7, #12]
	}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b088      	sub	sp, #32
 8006a3e:	af02      	add	r7, sp, #8
 8006a40:	4603      	mov	r3, r0
 8006a42:	6039      	str	r1, [r7, #0]
 8006a44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a46:	2301      	movs	r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2200      	movs	r2, #0
 8006a56:	6939      	ldr	r1, [r7, #16]
 8006a58:	6978      	ldr	r0, [r7, #20]
 8006a5a:	f7ff feeb 	bl	8006834 <xQueueGenericCreateStatic>
 8006a5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff ffb8 	bl	80069d6 <prvInitialiseMutex>

		return xNewQueue;
 8006a66:	68fb      	ldr	r3, [r7, #12]
	}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	; 0x38
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xQueueGenericSend+0x32>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <xQueueGenericSend+0x40>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <xQueueGenericSend+0x44>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <xQueueGenericSend+0x46>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <xQueueGenericSend+0x60>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d103      	bne.n	8006ade <xQueueGenericSend+0x6e>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <xQueueGenericSend+0x72>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <xQueueGenericSend+0x74>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xQueueGenericSend+0x8e>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	623b      	str	r3, [r7, #32]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006afe:	f001 fc9d 	bl	800843c <xTaskGetSchedulerState>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <xQueueGenericSend+0x9e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <xQueueGenericSend+0xa2>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <xQueueGenericSend+0xa4>
 8006b12:	2300      	movs	r3, #0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <xQueueGenericSend+0xbe>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	61fb      	str	r3, [r7, #28]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b2e:	f001 ffd1 	bl	8008ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d302      	bcc.n	8006b44 <xQueueGenericSend+0xd4>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d129      	bne.n	8006b98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4a:	f000 fc9a 	bl	8007482 <prvCopyDataToQueue>
 8006b4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d010      	beq.n	8006b7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	3324      	adds	r3, #36	; 0x24
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 faad 	bl	80080bc <xTaskRemoveFromEventList>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d013      	beq.n	8006b90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b68:	4b3f      	ldr	r3, [pc, #252]	; (8006c68 <xQueueGenericSend+0x1f8>)
 8006b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	e00a      	b.n	8006b90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b80:	4b39      	ldr	r3, [pc, #228]	; (8006c68 <xQueueGenericSend+0x1f8>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b90:	f001 ffd0 	bl	8008b34 <vPortExitCritical>
				return pdPASS;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e063      	b.n	8006c60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b9e:	f001 ffc9 	bl	8008b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e05c      	b.n	8006c60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bac:	f107 0314 	add.w	r3, r7, #20
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f001 fae5 	bl	8008180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bba:	f001 ffbb 	bl	8008b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bbe:	f001 f873 	bl	8007ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bc2:	f001 ff87 	bl	8008ad4 <vPortEnterCritical>
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd2:	d103      	bne.n	8006bdc <xQueueGenericSend+0x16c>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be2:	b25b      	sxtb	r3, r3
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006be8:	d103      	bne.n	8006bf2 <xQueueGenericSend+0x182>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bf2:	f001 ff9f 	bl	8008b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bf6:	1d3a      	adds	r2, r7, #4
 8006bf8:	f107 0314 	add.w	r3, r7, #20
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f001 fad4 	bl	80081ac <xTaskCheckForTimeOut>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d124      	bne.n	8006c54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c0c:	f000 fd31 	bl	8007672 <prvIsQueueFull>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d018      	beq.n	8006c48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	3310      	adds	r3, #16
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fa28 	bl	8008074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c26:	f000 fcbc 	bl	80075a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c2a:	f001 f84b 	bl	8007cc4 <xTaskResumeAll>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f47f af7c 	bne.w	8006b2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <xQueueGenericSend+0x1f8>)
 8006c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	e772      	b.n	8006b2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c4a:	f000 fcaa 	bl	80075a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c4e:	f001 f839 	bl	8007cc4 <xTaskResumeAll>
 8006c52:	e76c      	b.n	8006b2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c56:	f000 fca4 	bl	80075a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c5a:	f001 f833 	bl	8007cc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3738      	adds	r7, #56	; 0x38
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b090      	sub	sp, #64	; 0x40
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d103      	bne.n	8006ca8 <xQueueGenericSendFromISR+0x3c>
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <xQueueGenericSendFromISR+0x40>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <xQueueGenericSendFromISR+0x42>
 8006cac:	2300      	movs	r3, #0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d103      	bne.n	8006cd6 <xQueueGenericSendFromISR+0x6a>
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <xQueueGenericSendFromISR+0x6e>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <xQueueGenericSendFromISR+0x70>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	623b      	str	r3, [r7, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cf6:	f001 ffcf 	bl	8008c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	61fa      	str	r2, [r7, #28]
 8006d10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d302      	bcc.n	8006d28 <xQueueGenericSendFromISR+0xbc>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d12f      	bne.n	8006d88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d3e:	f000 fba0 	bl	8007482 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d4a:	d112      	bne.n	8006d72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	3324      	adds	r3, #36	; 0x24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 f9af 	bl	80080bc <xTaskRemoveFromEventList>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00e      	beq.n	8006d82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e007      	b.n	8006d82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d76:	3301      	adds	r3, #1
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	b25a      	sxtb	r2, r3
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d82:	2301      	movs	r3, #1
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006d86:	e001      	b.n	8006d8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3740      	adds	r7, #64	; 0x40
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b08e      	sub	sp, #56	; 0x38
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	623b      	str	r3, [r7, #32]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <xQueueGiveFromISR+0x48>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	61fb      	str	r3, [r7, #28]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d103      	bne.n	8006dfa <xQueueGiveFromISR+0x58>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <xQueueGiveFromISR+0x5c>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <xQueueGiveFromISR+0x5e>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	61bb      	str	r3, [r7, #24]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e1a:	f001 ff3d 	bl	8008c98 <vPortValidateInterruptPriority>
	__asm volatile
 8006e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	617a      	str	r2, [r7, #20]
 8006e34:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006e36:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d22b      	bcs.n	8006ea2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e64:	d112      	bne.n	8006e8c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d016      	beq.n	8006e9c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	3324      	adds	r3, #36	; 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f922 	bl	80080bc <xTaskRemoveFromEventList>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00e      	beq.n	8006e9c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2201      	movs	r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	e007      	b.n	8006e9c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e90:	3301      	adds	r3, #1
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	b25a      	sxtb	r2, r3
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea0:	e001      	b.n	8006ea6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f383 8811 	msr	BASEPRI, r3
}
 8006eb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3738      	adds	r7, #56	; 0x38
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08c      	sub	sp, #48	; 0x30
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10a      	bne.n	8006eec <xQueueReceive+0x30>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	623b      	str	r3, [r7, #32]
}
 8006ee8:	bf00      	nop
 8006eea:	e7fe      	b.n	8006eea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d103      	bne.n	8006efa <xQueueReceive+0x3e>
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <xQueueReceive+0x42>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <xQueueReceive+0x44>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xQueueReceive+0x5e>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	61fb      	str	r3, [r7, #28]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f1a:	f001 fa8f 	bl	800843c <xTaskGetSchedulerState>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <xQueueReceive+0x6e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <xQueueReceive+0x72>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <xQueueReceive+0x74>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <xQueueReceive+0x8e>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	61bb      	str	r3, [r7, #24]
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f4a:	f001 fdc3 	bl	8008ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d01f      	beq.n	8006f9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f5e:	f000 fafa 	bl	8007556 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	1e5a      	subs	r2, r3, #1
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00f      	beq.n	8006f92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	3310      	adds	r3, #16
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 f8a0 	bl	80080bc <xTaskRemoveFromEventList>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f82:	4b3d      	ldr	r3, [pc, #244]	; (8007078 <xQueueReceive+0x1bc>)
 8006f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f92:	f001 fdcf 	bl	8008b34 <vPortExitCritical>
				return pdPASS;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e069      	b.n	800706e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d103      	bne.n	8006fa8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fa0:	f001 fdc8 	bl	8008b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e062      	b.n	800706e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fae:	f107 0310 	add.w	r3, r7, #16
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 f8e4 	bl	8008180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fbc:	f001 fdba 	bl	8008b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fc0:	f000 fe72 	bl	8007ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fc4:	f001 fd86 	bl	8008ad4 <vPortEnterCritical>
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fce:	b25b      	sxtb	r3, r3
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fd4:	d103      	bne.n	8006fde <xQueueReceive+0x122>
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe4:	b25b      	sxtb	r3, r3
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fea:	d103      	bne.n	8006ff4 <xQueueReceive+0x138>
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ff4:	f001 fd9e 	bl	8008b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ff8:	1d3a      	adds	r2, r7, #4
 8006ffa:	f107 0310 	add.w	r3, r7, #16
 8006ffe:	4611      	mov	r1, r2
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f8d3 	bl	80081ac <xTaskCheckForTimeOut>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d123      	bne.n	8007054 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800700c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800700e:	f000 fb1a 	bl	8007646 <prvIsQueueEmpty>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d017      	beq.n	8007048 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	3324      	adds	r3, #36	; 0x24
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	4611      	mov	r1, r2
 8007020:	4618      	mov	r0, r3
 8007022:	f001 f827 	bl	8008074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007028:	f000 fabb 	bl	80075a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800702c:	f000 fe4a 	bl	8007cc4 <xTaskResumeAll>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d189      	bne.n	8006f4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007036:	4b10      	ldr	r3, [pc, #64]	; (8007078 <xQueueReceive+0x1bc>)
 8007038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	e780      	b.n	8006f4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800704a:	f000 faaa 	bl	80075a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800704e:	f000 fe39 	bl	8007cc4 <xTaskResumeAll>
 8007052:	e77a      	b.n	8006f4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007056:	f000 faa4 	bl	80075a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800705a:	f000 fe33 	bl	8007cc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800705e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007060:	f000 faf1 	bl	8007646 <prvIsQueueEmpty>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	f43f af6f 	beq.w	8006f4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800706c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800706e:	4618      	mov	r0, r3
 8007070:	3730      	adds	r7, #48	; 0x30
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	e000ed04 	.word	0xe000ed04

0800707c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08e      	sub	sp, #56	; 0x38
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007086:	2300      	movs	r3, #0
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800708e:	2300      	movs	r3, #0
 8007090:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	623b      	str	r3, [r7, #32]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	61fb      	str	r3, [r7, #28]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070cc:	f001 f9b6 	bl	800843c <xTaskGetSchedulerState>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d102      	bne.n	80070dc <xQueueSemaphoreTake+0x60>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <xQueueSemaphoreTake+0x64>
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <xQueueSemaphoreTake+0x66>
 80070e0:	2300      	movs	r3, #0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	61bb      	str	r3, [r7, #24]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070fc:	f001 fcea 	bl	8008ad4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	2b00      	cmp	r3, #0
 800710a:	d024      	beq.n	8007156 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	1e5a      	subs	r2, r3, #1
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800711c:	f001 fb36 	bl	800878c <pvTaskIncrementMutexHeldCount>
 8007120:	4602      	mov	r2, r0
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00f      	beq.n	800714e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	3310      	adds	r3, #16
 8007132:	4618      	mov	r0, r3
 8007134:	f000 ffc2 	bl	80080bc <xTaskRemoveFromEventList>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d007      	beq.n	800714e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800713e:	4b54      	ldr	r3, [pc, #336]	; (8007290 <xQueueSemaphoreTake+0x214>)
 8007140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800714e:	f001 fcf1 	bl	8008b34 <vPortExitCritical>
				return pdPASS;
 8007152:	2301      	movs	r3, #1
 8007154:	e097      	b.n	8007286 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d111      	bne.n	8007180 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	617b      	str	r3, [r7, #20]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007178:	f001 fcdc 	bl	8008b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800717c:	2300      	movs	r3, #0
 800717e:	e082      	b.n	8007286 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007186:	f107 030c 	add.w	r3, r7, #12
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fff8 	bl	8008180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007190:	2301      	movs	r3, #1
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007194:	f001 fcce 	bl	8008b34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007198:	f000 fd86 	bl	8007ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800719c:	f001 fc9a 	bl	8008ad4 <vPortEnterCritical>
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071a6:	b25b      	sxtb	r3, r3
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ac:	d103      	bne.n	80071b6 <xQueueSemaphoreTake+0x13a>
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071bc:	b25b      	sxtb	r3, r3
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c2:	d103      	bne.n	80071cc <xQueueSemaphoreTake+0x150>
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071cc:	f001 fcb2 	bl	8008b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071d0:	463a      	mov	r2, r7
 80071d2:	f107 030c 	add.w	r3, r7, #12
 80071d6:	4611      	mov	r1, r2
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 ffe7 	bl	80081ac <xTaskCheckForTimeOut>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d132      	bne.n	800724a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071e6:	f000 fa2e 	bl	8007646 <prvIsQueueEmpty>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d026      	beq.n	800723e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d109      	bne.n	800720c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80071f8:	f001 fc6c 	bl	8008ad4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	4618      	mov	r0, r3
 8007202:	f001 f939 	bl	8008478 <xTaskPriorityInherit>
 8007206:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007208:	f001 fc94 	bl	8008b34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	3324      	adds	r3, #36	; 0x24
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	4611      	mov	r1, r2
 8007214:	4618      	mov	r0, r3
 8007216:	f000 ff2d 	bl	8008074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800721a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800721c:	f000 f9c1 	bl	80075a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007220:	f000 fd50 	bl	8007cc4 <xTaskResumeAll>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	f47f af68 	bne.w	80070fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800722c:	4b18      	ldr	r3, [pc, #96]	; (8007290 <xQueueSemaphoreTake+0x214>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	e75e      	b.n	80070fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800723e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007240:	f000 f9af 	bl	80075a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007244:	f000 fd3e 	bl	8007cc4 <xTaskResumeAll>
 8007248:	e758      	b.n	80070fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800724a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800724c:	f000 f9a9 	bl	80075a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007250:	f000 fd38 	bl	8007cc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007256:	f000 f9f6 	bl	8007646 <prvIsQueueEmpty>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	f43f af4d 	beq.w	80070fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00d      	beq.n	8007284 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007268:	f001 fc34 	bl	8008ad4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800726c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800726e:	f000 f8f0 	bl	8007452 <prvGetDisinheritPriorityAfterTimeout>
 8007272:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800727a:	4618      	mov	r0, r3
 800727c:	f001 f9f8 	bl	8008670 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007280:	f001 fc58 	bl	8008b34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007286:	4618      	mov	r0, r3
 8007288:	3738      	adds	r7, #56	; 0x38
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08e      	sub	sp, #56	; 0x38
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	623b      	str	r3, [r7, #32]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d103      	bne.n	80072ce <xQueueReceiveFromISR+0x3a>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <xQueueReceiveFromISR+0x3e>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <xQueueReceiveFromISR+0x40>
 80072d2:	2300      	movs	r3, #0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	61fb      	str	r3, [r7, #28]
}
 80072ea:	bf00      	nop
 80072ec:	e7fe      	b.n	80072ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072ee:	f001 fcd3 	bl	8008c98 <vPortValidateInterruptPriority>
	__asm volatile
 80072f2:	f3ef 8211 	mrs	r2, BASEPRI
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	61ba      	str	r2, [r7, #24]
 8007308:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800730a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d02f      	beq.n	800737a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007328:	f000 f915 	bl	8007556 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	1e5a      	subs	r2, r3, #1
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007334:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800733c:	d112      	bne.n	8007364 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d016      	beq.n	8007374 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	3310      	adds	r3, #16
 800734a:	4618      	mov	r0, r3
 800734c:	f000 feb6 	bl	80080bc <xTaskRemoveFromEventList>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00e      	beq.n	8007374 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	e007      	b.n	8007374 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007368:	3301      	adds	r3, #1
 800736a:	b2db      	uxtb	r3, r3
 800736c:	b25a      	sxtb	r2, r3
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007374:	2301      	movs	r3, #1
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
 8007378:	e001      	b.n	800737e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800737a:	2300      	movs	r3, #0
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f383 8811 	msr	BASEPRI, r3
}
 8007388:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800738c:	4618      	mov	r0, r3
 800738e:	3738      	adds	r7, #56	; 0x38
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	60bb      	str	r3, [r7, #8]
}
 80073b4:	bf00      	nop
 80073b6:	e7fe      	b.n	80073b6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80073b8:	f001 fb8c 	bl	8008ad4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80073c2:	f001 fbb7 	bl	8008b34 <vPortExitCritical>

	return uxReturn;
 80073c6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60fb      	str	r3, [r7, #12]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80073fe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007400:	4618      	mov	r0, r3
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <vQueueDelete+0x28>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	60bb      	str	r3, [r7, #8]
}
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f935 	bl	80076a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007440:	2b00      	cmp	r3, #0
 8007442:	d102      	bne.n	800744a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f001 fd33 	bl	8008eb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800744a:	bf00      	nop
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	d006      	beq.n	8007470 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f1c3 0307 	rsb	r3, r3, #7
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	e001      	b.n	8007474 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007474:	68fb      	ldr	r3, [r7, #12]
	}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b086      	sub	sp, #24
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10d      	bne.n	80074bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d14d      	bne.n	8007544 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 f859 	bl	8008564 <xTaskPriorityDisinherit>
 80074b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	609a      	str	r2, [r3, #8]
 80074ba:	e043      	b.n	8007544 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d119      	bne.n	80074f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6858      	ldr	r0, [r3, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	461a      	mov	r2, r3
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	f018 fc52 	bl	801fd76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	441a      	add	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d32b      	bcc.n	8007544 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	605a      	str	r2, [r3, #4]
 80074f4:	e026      	b.n	8007544 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	68d8      	ldr	r0, [r3, #12]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	461a      	mov	r2, r3
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	f018 fc38 	bl	801fd76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	425b      	negs	r3, r3
 8007510:	441a      	add	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d207      	bcs.n	8007532 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	425b      	negs	r3, r3
 800752c:	441a      	add	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d105      	bne.n	8007544 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3b01      	subs	r3, #1
 8007542:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800754c:	697b      	ldr	r3, [r7, #20]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d018      	beq.n	800759a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	441a      	add	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	429a      	cmp	r2, r3
 8007580:	d303      	bcc.n	800758a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68d9      	ldr	r1, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	461a      	mov	r2, r3
 8007594:	6838      	ldr	r0, [r7, #0]
 8007596:	f018 fbee 	bl	801fd76 <memcpy>
	}
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075aa:	f001 fa93 	bl	8008ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075b6:	e011      	b.n	80075dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d012      	beq.n	80075e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3324      	adds	r3, #36	; 0x24
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fd79 	bl	80080bc <xTaskRemoveFromEventList>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075d0:	f000 fe4e 	bl	8008270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dce9      	bgt.n	80075b8 <prvUnlockQueue+0x16>
 80075e4:	e000      	b.n	80075e8 <prvUnlockQueue+0x46>
					break;
 80075e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	22ff      	movs	r2, #255	; 0xff
 80075ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80075f0:	f001 faa0 	bl	8008b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075f4:	f001 fa6e 	bl	8008ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007600:	e011      	b.n	8007626 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d012      	beq.n	8007630 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3310      	adds	r3, #16
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fd54 	bl	80080bc <xTaskRemoveFromEventList>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800761a:	f000 fe29 	bl	8008270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	3b01      	subs	r3, #1
 8007622:	b2db      	uxtb	r3, r3
 8007624:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	dce9      	bgt.n	8007602 <prvUnlockQueue+0x60>
 800762e:	e000      	b.n	8007632 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007630:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	22ff      	movs	r2, #255	; 0xff
 8007636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800763a:	f001 fa7b 	bl	8008b34 <vPortExitCritical>
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800764e:	f001 fa41 	bl	8008ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800765a:	2301      	movs	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	e001      	b.n	8007664 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007664:	f001 fa66 	bl	8008b34 <vPortExitCritical>

	return xReturn;
 8007668:	68fb      	ldr	r3, [r7, #12]
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800767a:	f001 fa2b 	bl	8008ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007686:	429a      	cmp	r2, r3
 8007688:	d102      	bne.n	8007690 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800768a:	2301      	movs	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	e001      	b.n	8007694 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007694:	f001 fa4e 	bl	8008b34 <vPortExitCritical>

	return xReturn;
 8007698:	68fb      	ldr	r3, [r7, #12]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076ac:	2300      	movs	r3, #0
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	e016      	b.n	80076e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80076b2:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <vQueueUnregisterQueue+0x50>)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	4413      	add	r3, r2
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d10b      	bne.n	80076da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80076c2:	4a0c      	ldr	r2, [pc, #48]	; (80076f4 <vQueueUnregisterQueue+0x50>)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2100      	movs	r1, #0
 80076c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80076cc:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <vQueueUnregisterQueue+0x50>)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	4413      	add	r3, r2
 80076d4:	2200      	movs	r2, #0
 80076d6:	605a      	str	r2, [r3, #4]
				break;
 80076d8:	e006      	b.n	80076e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3301      	adds	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b07      	cmp	r3, #7
 80076e4:	d9e5      	bls.n	80076b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	20005274 	.word	0x20005274

080076f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08e      	sub	sp, #56	; 0x38
 80076fc:	af04      	add	r7, sp, #16
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <xTaskCreateStatic+0x2a>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	623b      	str	r3, [r7, #32]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10a      	bne.n	800773e <xTaskCreateStatic+0x46>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	61fb      	str	r3, [r7, #28]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800773e:	23a0      	movs	r3, #160	; 0xa0
 8007740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	2ba0      	cmp	r3, #160	; 0xa0
 8007746:	d00a      	beq.n	800775e <xTaskCreateStatic+0x66>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	61bb      	str	r3, [r7, #24]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800775e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01e      	beq.n	80077a4 <xTaskCreateStatic+0xac>
 8007766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01b      	beq.n	80077a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007774:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	2202      	movs	r2, #2
 800777a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800777e:	2300      	movs	r3, #0
 8007780:	9303      	str	r3, [sp, #12]
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	9302      	str	r3, [sp, #8]
 8007786:	f107 0314 	add.w	r3, r7, #20
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 f850 	bl	800783c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800779c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800779e:	f000 f8eb 	bl	8007978 <prvAddNewTaskToReadyList>
 80077a2:	e001      	b.n	80077a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077a8:	697b      	ldr	r3, [r7, #20]
	}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3728      	adds	r7, #40	; 0x28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b08c      	sub	sp, #48	; 0x30
 80077b6:	af04      	add	r7, sp, #16
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 faa6 	bl	8008d18 <pvPortMalloc>
 80077cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00e      	beq.n	80077f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077d4:	20a0      	movs	r0, #160	; 0xa0
 80077d6:	f001 fa9f 	bl	8008d18 <pvPortMalloc>
 80077da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	631a      	str	r2, [r3, #48]	; 0x30
 80077e8:	e005      	b.n	80077f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077ea:	6978      	ldr	r0, [r7, #20]
 80077ec:	f001 fb60 	bl	8008eb0 <vPortFree>
 80077f0:	e001      	b.n	80077f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d017      	beq.n	800782c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007804:	88fa      	ldrh	r2, [r7, #6]
 8007806:	2300      	movs	r3, #0
 8007808:	9303      	str	r3, [sp, #12]
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	9302      	str	r3, [sp, #8]
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f80e 	bl	800783c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007820:	69f8      	ldr	r0, [r7, #28]
 8007822:	f000 f8a9 	bl	8007978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007826:	2301      	movs	r3, #1
 8007828:	61bb      	str	r3, [r7, #24]
 800782a:	e002      	b.n	8007832 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800782c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007830:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007832:	69bb      	ldr	r3, [r7, #24]
	}
 8007834:	4618      	mov	r0, r3
 8007836:	3720      	adds	r7, #32
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007854:	3b01      	subs	r3, #1
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	f023 0307 	bic.w	r3, r3, #7
 8007862:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <prvInitialiseNewTask+0x48>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	617b      	str	r3, [r7, #20]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d01f      	beq.n	80078ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800788a:	2300      	movs	r3, #0
 800788c:	61fb      	str	r3, [r7, #28]
 800788e:	e012      	b.n	80078b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	7819      	ldrb	r1, [r3, #0]
 8007898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	3334      	adds	r3, #52	; 0x34
 80078a0:	460a      	mov	r2, r1
 80078a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	4413      	add	r3, r2
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d006      	beq.n	80078be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	3301      	adds	r3, #1
 80078b4:	61fb      	str	r3, [r7, #28]
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	2b0f      	cmp	r3, #15
 80078ba:	d9e9      	bls.n	8007890 <prvInitialiseNewTask+0x54>
 80078bc:	e000      	b.n	80078c0 <prvInitialiseNewTask+0x84>
			{
				break;
 80078be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078c8:	e003      	b.n	80078d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	2b06      	cmp	r3, #6
 80078d6:	d901      	bls.n	80078dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078d8:	2306      	movs	r3, #6
 80078da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	2200      	movs	r2, #0
 80078ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	3304      	adds	r3, #4
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fea1 	bl	800663a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	3318      	adds	r3, #24
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fe9c 	bl	800663a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007906:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	f1c3 0207 	rsb	r2, r3, #7
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007916:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	2200      	movs	r2, #0
 800791c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	2200      	movs	r2, #0
 8007924:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	334c      	adds	r3, #76	; 0x4c
 800792c:	224c      	movs	r2, #76	; 0x4c
 800792e:	2100      	movs	r1, #0
 8007930:	4618      	mov	r0, r3
 8007932:	f018 f911 	bl	801fb58 <memset>
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	4a0c      	ldr	r2, [pc, #48]	; (800796c <prvInitialiseNewTask+0x130>)
 800793a:	651a      	str	r2, [r3, #80]	; 0x50
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	4a0c      	ldr	r2, [pc, #48]	; (8007970 <prvInitialiseNewTask+0x134>)
 8007940:	655a      	str	r2, [r3, #84]	; 0x54
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	4a0b      	ldr	r2, [pc, #44]	; (8007974 <prvInitialiseNewTask+0x138>)
 8007946:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	69b8      	ldr	r0, [r7, #24]
 800794e:	f000 ff97 	bl	8008880 <pxPortInitialiseStack>
 8007952:	4602      	mov	r2, r0
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007962:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007964:	bf00      	nop
 8007966:	3720      	adds	r7, #32
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	2001080c 	.word	0x2001080c
 8007970:	20010874 	.word	0x20010874
 8007974:	200108dc 	.word	0x200108dc

08007978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007980:	f001 f8a8 	bl	8008ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007984:	4b2a      	ldr	r3, [pc, #168]	; (8007a30 <prvAddNewTaskToReadyList+0xb8>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3301      	adds	r3, #1
 800798a:	4a29      	ldr	r2, [pc, #164]	; (8007a30 <prvAddNewTaskToReadyList+0xb8>)
 800798c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800798e:	4b29      	ldr	r3, [pc, #164]	; (8007a34 <prvAddNewTaskToReadyList+0xbc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d109      	bne.n	80079aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007996:	4a27      	ldr	r2, [pc, #156]	; (8007a34 <prvAddNewTaskToReadyList+0xbc>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800799c:	4b24      	ldr	r3, [pc, #144]	; (8007a30 <prvAddNewTaskToReadyList+0xb8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d110      	bne.n	80079c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80079a4:	f000 fc88 	bl	80082b8 <prvInitialiseTaskLists>
 80079a8:	e00d      	b.n	80079c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80079aa:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <prvAddNewTaskToReadyList+0xc0>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079b2:	4b20      	ldr	r3, [pc, #128]	; (8007a34 <prvAddNewTaskToReadyList+0xbc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	429a      	cmp	r2, r3
 80079be:	d802      	bhi.n	80079c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079c0:	4a1c      	ldr	r2, [pc, #112]	; (8007a34 <prvAddNewTaskToReadyList+0xbc>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079c6:	4b1d      	ldr	r3, [pc, #116]	; (8007a3c <prvAddNewTaskToReadyList+0xc4>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3301      	adds	r3, #1
 80079cc:	4a1b      	ldr	r2, [pc, #108]	; (8007a3c <prvAddNewTaskToReadyList+0xc4>)
 80079ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	2201      	movs	r2, #1
 80079d6:	409a      	lsls	r2, r3
 80079d8:	4b19      	ldr	r3, [pc, #100]	; (8007a40 <prvAddNewTaskToReadyList+0xc8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4313      	orrs	r3, r2
 80079de:	4a18      	ldr	r2, [pc, #96]	; (8007a40 <prvAddNewTaskToReadyList+0xc8>)
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4a15      	ldr	r2, [pc, #84]	; (8007a44 <prvAddNewTaskToReadyList+0xcc>)
 80079f0:	441a      	add	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3304      	adds	r3, #4
 80079f6:	4619      	mov	r1, r3
 80079f8:	4610      	mov	r0, r2
 80079fa:	f7fe fe2b 	bl	8006654 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079fe:	f001 f899 	bl	8008b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a02:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <prvAddNewTaskToReadyList+0xc0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00e      	beq.n	8007a28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a0a:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <prvAddNewTaskToReadyList+0xbc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d207      	bcs.n	8007a28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a18:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <prvAddNewTaskToReadyList+0xd0>)
 8007a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	200053b4 	.word	0x200053b4
 8007a34:	200052b4 	.word	0x200052b4
 8007a38:	200053c0 	.word	0x200053c0
 8007a3c:	200053d0 	.word	0x200053d0
 8007a40:	200053bc 	.word	0x200053bc
 8007a44:	200052b8 	.word	0x200052b8
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007a54:	f001 f83e 	bl	8008ad4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <vTaskDelete+0x18>
 8007a5e:	4b39      	ldr	r3, [pc, #228]	; (8007b44 <vTaskDelete+0xf8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	e000      	b.n	8007a66 <vTaskDelete+0x1a>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe fe4e 	bl	800670e <uxListRemove>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d115      	bne.n	8007aa4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7c:	4932      	ldr	r1, [pc, #200]	; (8007b48 <vTaskDelete+0xfc>)
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	440b      	add	r3, r1
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10a      	bne.n	8007aa4 <vTaskDelete+0x58>
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a92:	2201      	movs	r2, #1
 8007a94:	fa02 f303 	lsl.w	r3, r2, r3
 8007a98:	43da      	mvns	r2, r3
 8007a9a:	4b2c      	ldr	r3, [pc, #176]	; (8007b4c <vTaskDelete+0x100>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	4a2a      	ldr	r2, [pc, #168]	; (8007b4c <vTaskDelete+0x100>)
 8007aa2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d004      	beq.n	8007ab6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3318      	adds	r3, #24
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe fe2c 	bl	800670e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007ab6:	4b26      	ldr	r3, [pc, #152]	; (8007b50 <vTaskDelete+0x104>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	4a24      	ldr	r2, [pc, #144]	; (8007b50 <vTaskDelete+0x104>)
 8007abe:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007ac0:	4b20      	ldr	r3, [pc, #128]	; (8007b44 <vTaskDelete+0xf8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d10b      	bne.n	8007ae2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4820      	ldr	r0, [pc, #128]	; (8007b54 <vTaskDelete+0x108>)
 8007ad2:	f7fe fdbf 	bl	8006654 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007ad6:	4b20      	ldr	r3, [pc, #128]	; (8007b58 <vTaskDelete+0x10c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3301      	adds	r3, #1
 8007adc:	4a1e      	ldr	r2, [pc, #120]	; (8007b58 <vTaskDelete+0x10c>)
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	e009      	b.n	8007af6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007ae2:	4b1e      	ldr	r3, [pc, #120]	; (8007b5c <vTaskDelete+0x110>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <vTaskDelete+0x110>)
 8007aea:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 fc51 	bl	8008394 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007af2:	f000 fc83 	bl	80083fc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007af6:	f001 f81d 	bl	8008b34 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007afa:	4b19      	ldr	r3, [pc, #100]	; (8007b60 <vTaskDelete+0x114>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d01b      	beq.n	8007b3a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8007b02:	4b10      	ldr	r3, [pc, #64]	; (8007b44 <vTaskDelete+0xf8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d116      	bne.n	8007b3a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007b0c:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <vTaskDelete+0x118>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <vTaskDelete+0xde>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	60bb      	str	r3, [r7, #8]
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007b2a:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <vTaskDelete+0x11c>)
 8007b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	200052b4 	.word	0x200052b4
 8007b48:	200052b8 	.word	0x200052b8
 8007b4c:	200053bc 	.word	0x200053bc
 8007b50:	200053d0 	.word	0x200053d0
 8007b54:	20005388 	.word	0x20005388
 8007b58:	2000539c 	.word	0x2000539c
 8007b5c:	200053b4 	.word	0x200053b4
 8007b60:	200053c0 	.word	0x200053c0
 8007b64:	200053dc 	.word	0x200053dc
 8007b68:	e000ed04 	.word	0xe000ed04

08007b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d017      	beq.n	8007bae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b7e:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <vTaskDelay+0x60>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <vTaskDelay+0x30>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60bb      	str	r3, [r7, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b9c:	f000 f884 	bl	8007ca8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fe06 	bl	80087b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ba8:	f000 f88c 	bl	8007cc4 <xTaskResumeAll>
 8007bac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d107      	bne.n	8007bc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bb4:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <vTaskDelay+0x64>)
 8007bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bc4:	bf00      	nop
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	200053dc 	.word	0x200053dc
 8007bd0:	e000ed04 	.word	0xe000ed04

08007bd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08a      	sub	sp, #40	; 0x28
 8007bd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007be2:	463a      	mov	r2, r7
 8007be4:	1d39      	adds	r1, r7, #4
 8007be6:	f107 0308 	add.w	r3, r7, #8
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7f8 fd5a 	bl	80006a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	9202      	str	r2, [sp, #8]
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	460a      	mov	r2, r1
 8007c02:	4921      	ldr	r1, [pc, #132]	; (8007c88 <vTaskStartScheduler+0xb4>)
 8007c04:	4821      	ldr	r0, [pc, #132]	; (8007c8c <vTaskStartScheduler+0xb8>)
 8007c06:	f7ff fd77 	bl	80076f8 <xTaskCreateStatic>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4a20      	ldr	r2, [pc, #128]	; (8007c90 <vTaskStartScheduler+0xbc>)
 8007c0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c10:	4b1f      	ldr	r3, [pc, #124]	; (8007c90 <vTaskStartScheduler+0xbc>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	e001      	b.n	8007c22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d11b      	bne.n	8007c60 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	613b      	str	r3, [r7, #16]
}
 8007c3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c3c:	4b15      	ldr	r3, [pc, #84]	; (8007c94 <vTaskStartScheduler+0xc0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	334c      	adds	r3, #76	; 0x4c
 8007c42:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <vTaskStartScheduler+0xc4>)
 8007c44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c46:	4b15      	ldr	r3, [pc, #84]	; (8007c9c <vTaskStartScheduler+0xc8>)
 8007c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c4e:	4b14      	ldr	r3, [pc, #80]	; (8007ca0 <vTaskStartScheduler+0xcc>)
 8007c50:	2201      	movs	r2, #1
 8007c52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c54:	4b13      	ldr	r3, [pc, #76]	; (8007ca4 <vTaskStartScheduler+0xd0>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c5a:	f000 fe99 	bl	8008990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c5e:	e00e      	b.n	8007c7e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c66:	d10a      	bne.n	8007c7e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60fb      	str	r3, [r7, #12]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <vTaskStartScheduler+0xa8>
}
 8007c7e:	bf00      	nop
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	08020d04 	.word	0x08020d04
 8007c8c:	08008289 	.word	0x08008289
 8007c90:	200053d8 	.word	0x200053d8
 8007c94:	200052b4 	.word	0x200052b4
 8007c98:	2000008c 	.word	0x2000008c
 8007c9c:	200053d4 	.word	0x200053d4
 8007ca0:	200053c0 	.word	0x200053c0
 8007ca4:	200053b8 	.word	0x200053b8

08007ca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cac:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <vTaskSuspendAll+0x18>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	4a03      	ldr	r2, [pc, #12]	; (8007cc0 <vTaskSuspendAll+0x18>)
 8007cb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cb6:	bf00      	nop
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	200053dc 	.word	0x200053dc

08007cc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cd2:	4b41      	ldr	r3, [pc, #260]	; (8007dd8 <xTaskResumeAll+0x114>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	603b      	str	r3, [r7, #0]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cf0:	f000 fef0 	bl	8008ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cf4:	4b38      	ldr	r3, [pc, #224]	; (8007dd8 <xTaskResumeAll+0x114>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	4a37      	ldr	r2, [pc, #220]	; (8007dd8 <xTaskResumeAll+0x114>)
 8007cfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cfe:	4b36      	ldr	r3, [pc, #216]	; (8007dd8 <xTaskResumeAll+0x114>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d161      	bne.n	8007dca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d06:	4b35      	ldr	r3, [pc, #212]	; (8007ddc <xTaskResumeAll+0x118>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d05d      	beq.n	8007dca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d0e:	e02e      	b.n	8007d6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d10:	4b33      	ldr	r3, [pc, #204]	; (8007de0 <xTaskResumeAll+0x11c>)
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3318      	adds	r3, #24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe fcf6 	bl	800670e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fcf1 	bl	800670e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	2201      	movs	r2, #1
 8007d32:	409a      	lsls	r2, r3
 8007d34:	4b2b      	ldr	r3, [pc, #172]	; (8007de4 <xTaskResumeAll+0x120>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	4a2a      	ldr	r2, [pc, #168]	; (8007de4 <xTaskResumeAll+0x120>)
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4a27      	ldr	r2, [pc, #156]	; (8007de8 <xTaskResumeAll+0x124>)
 8007d4c:	441a      	add	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7fe fc7d 	bl	8006654 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5e:	4b23      	ldr	r3, [pc, #140]	; (8007dec <xTaskResumeAll+0x128>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d302      	bcc.n	8007d6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007d68:	4b21      	ldr	r3, [pc, #132]	; (8007df0 <xTaskResumeAll+0x12c>)
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d6e:	4b1c      	ldr	r3, [pc, #112]	; (8007de0 <xTaskResumeAll+0x11c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1cc      	bne.n	8007d10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d7c:	f000 fb3e 	bl	80083fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d80:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <xTaskResumeAll+0x130>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d010      	beq.n	8007dae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d8c:	f000 f858 	bl	8007e40 <xTaskIncrementTick>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007d96:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <xTaskResumeAll+0x12c>)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1f1      	bne.n	8007d8c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007da8:	4b12      	ldr	r3, [pc, #72]	; (8007df4 <xTaskResumeAll+0x130>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dae:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <xTaskResumeAll+0x12c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007db6:	2301      	movs	r3, #1
 8007db8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dba:	4b0f      	ldr	r3, [pc, #60]	; (8007df8 <xTaskResumeAll+0x134>)
 8007dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dca:	f000 feb3 	bl	8008b34 <vPortExitCritical>

	return xAlreadyYielded;
 8007dce:	68bb      	ldr	r3, [r7, #8]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	200053dc 	.word	0x200053dc
 8007ddc:	200053b4 	.word	0x200053b4
 8007de0:	20005374 	.word	0x20005374
 8007de4:	200053bc 	.word	0x200053bc
 8007de8:	200052b8 	.word	0x200052b8
 8007dec:	200052b4 	.word	0x200052b4
 8007df0:	200053c8 	.word	0x200053c8
 8007df4:	200053c4 	.word	0x200053c4
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <xTaskGetTickCount+0x1c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e08:	687b      	ldr	r3, [r7, #4]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	200053b8 	.word	0x200053b8

08007e1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e22:	f000 ff39 	bl	8008c98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007e26:	2300      	movs	r3, #0
 8007e28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007e2a:	4b04      	ldr	r3, [pc, #16]	; (8007e3c <xTaskGetTickCountFromISR+0x20>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e30:	683b      	ldr	r3, [r7, #0]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	200053b8 	.word	0x200053b8

08007e40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e4a:	4b4e      	ldr	r3, [pc, #312]	; (8007f84 <xTaskIncrementTick+0x144>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f040 808e 	bne.w	8007f70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e54:	4b4c      	ldr	r3, [pc, #304]	; (8007f88 <xTaskIncrementTick+0x148>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e5c:	4a4a      	ldr	r2, [pc, #296]	; (8007f88 <xTaskIncrementTick+0x148>)
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d120      	bne.n	8007eaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e68:	4b48      	ldr	r3, [pc, #288]	; (8007f8c <xTaskIncrementTick+0x14c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	603b      	str	r3, [r7, #0]
}
 8007e84:	bf00      	nop
 8007e86:	e7fe      	b.n	8007e86 <xTaskIncrementTick+0x46>
 8007e88:	4b40      	ldr	r3, [pc, #256]	; (8007f8c <xTaskIncrementTick+0x14c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4b40      	ldr	r3, [pc, #256]	; (8007f90 <xTaskIncrementTick+0x150>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a3e      	ldr	r2, [pc, #248]	; (8007f8c <xTaskIncrementTick+0x14c>)
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4a3e      	ldr	r2, [pc, #248]	; (8007f90 <xTaskIncrementTick+0x150>)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6013      	str	r3, [r2, #0]
 8007e9c:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <xTaskIncrementTick+0x154>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	4a3c      	ldr	r2, [pc, #240]	; (8007f94 <xTaskIncrementTick+0x154>)
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	f000 faa9 	bl	80083fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007eaa:	4b3b      	ldr	r3, [pc, #236]	; (8007f98 <xTaskIncrementTick+0x158>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d348      	bcc.n	8007f46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eb4:	4b35      	ldr	r3, [pc, #212]	; (8007f8c <xTaskIncrementTick+0x14c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d104      	bne.n	8007ec8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ebe:	4b36      	ldr	r3, [pc, #216]	; (8007f98 <xTaskIncrementTick+0x158>)
 8007ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ec4:	601a      	str	r2, [r3, #0]
					break;
 8007ec6:	e03e      	b.n	8007f46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec8:	4b30      	ldr	r3, [pc, #192]	; (8007f8c <xTaskIncrementTick+0x14c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d203      	bcs.n	8007ee8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ee0:	4a2d      	ldr	r2, [pc, #180]	; (8007f98 <xTaskIncrementTick+0x158>)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ee6:	e02e      	b.n	8007f46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe fc0e 	bl	800670e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d004      	beq.n	8007f04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	3318      	adds	r3, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe fc05 	bl	800670e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	2201      	movs	r2, #1
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	4b23      	ldr	r3, [pc, #140]	; (8007f9c <xTaskIncrementTick+0x15c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	4a22      	ldr	r2, [pc, #136]	; (8007f9c <xTaskIncrementTick+0x15c>)
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4a1f      	ldr	r2, [pc, #124]	; (8007fa0 <xTaskIncrementTick+0x160>)
 8007f24:	441a      	add	r2, r3
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7fe fb91 	bl	8006654 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <xTaskIncrementTick+0x164>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d3b9      	bcc.n	8007eb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f44:	e7b6      	b.n	8007eb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f46:	4b17      	ldr	r3, [pc, #92]	; (8007fa4 <xTaskIncrementTick+0x164>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4c:	4914      	ldr	r1, [pc, #80]	; (8007fa0 <xTaskIncrementTick+0x160>)
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d901      	bls.n	8007f62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f62:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <xTaskIncrementTick+0x168>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d007      	beq.n	8007f7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	e004      	b.n	8007f7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f70:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <xTaskIncrementTick+0x16c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a0d      	ldr	r2, [pc, #52]	; (8007fac <xTaskIncrementTick+0x16c>)
 8007f78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f7a:	697b      	ldr	r3, [r7, #20]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	200053dc 	.word	0x200053dc
 8007f88:	200053b8 	.word	0x200053b8
 8007f8c:	2000536c 	.word	0x2000536c
 8007f90:	20005370 	.word	0x20005370
 8007f94:	200053cc 	.word	0x200053cc
 8007f98:	200053d4 	.word	0x200053d4
 8007f9c:	200053bc 	.word	0x200053bc
 8007fa0:	200052b8 	.word	0x200052b8
 8007fa4:	200052b4 	.word	0x200052b4
 8007fa8:	200053c8 	.word	0x200053c8
 8007fac:	200053c4 	.word	0x200053c4

08007fb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fb6:	4b29      	ldr	r3, [pc, #164]	; (800805c <vTaskSwitchContext+0xac>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fbe:	4b28      	ldr	r3, [pc, #160]	; (8008060 <vTaskSwitchContext+0xb0>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fc4:	e044      	b.n	8008050 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007fc6:	4b26      	ldr	r3, [pc, #152]	; (8008060 <vTaskSwitchContext+0xb0>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fcc:	4b25      	ldr	r3, [pc, #148]	; (8008064 <vTaskSwitchContext+0xb4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	fab3 f383 	clz	r3, r3
 8007fd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007fda:	7afb      	ldrb	r3, [r7, #11]
 8007fdc:	f1c3 031f 	rsb	r3, r3, #31
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	4921      	ldr	r1, [pc, #132]	; (8008068 <vTaskSwitchContext+0xb8>)
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	440b      	add	r3, r1
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10a      	bne.n	800800c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	607b      	str	r3, [r7, #4]
}
 8008008:	bf00      	nop
 800800a:	e7fe      	b.n	800800a <vTaskSwitchContext+0x5a>
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4a14      	ldr	r2, [pc, #80]	; (8008068 <vTaskSwitchContext+0xb8>)
 8008018:	4413      	add	r3, r2
 800801a:	613b      	str	r3, [r7, #16]
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	605a      	str	r2, [r3, #4]
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	3308      	adds	r3, #8
 800802e:	429a      	cmp	r2, r3
 8008030:	d104      	bne.n	800803c <vTaskSwitchContext+0x8c>
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	605a      	str	r2, [r3, #4]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	4a0a      	ldr	r2, [pc, #40]	; (800806c <vTaskSwitchContext+0xbc>)
 8008044:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008046:	4b09      	ldr	r3, [pc, #36]	; (800806c <vTaskSwitchContext+0xbc>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	334c      	adds	r3, #76	; 0x4c
 800804c:	4a08      	ldr	r2, [pc, #32]	; (8008070 <vTaskSwitchContext+0xc0>)
 800804e:	6013      	str	r3, [r2, #0]
}
 8008050:	bf00      	nop
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	200053dc 	.word	0x200053dc
 8008060:	200053c8 	.word	0x200053c8
 8008064:	200053bc 	.word	0x200053bc
 8008068:	200052b8 	.word	0x200052b8
 800806c:	200052b4 	.word	0x200052b4
 8008070:	2000008c 	.word	0x2000008c

08008074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	60fb      	str	r3, [r7, #12]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800809a:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <vTaskPlaceOnEventList+0x44>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3318      	adds	r3, #24
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fe fafa 	bl	800669c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080a8:	2101      	movs	r1, #1
 80080aa:	6838      	ldr	r0, [r7, #0]
 80080ac:	f000 fb82 	bl	80087b4 <prvAddCurrentTaskToDelayedList>
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	200052b4 	.word	0x200052b4

080080bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	60fb      	str	r3, [r7, #12]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	3318      	adds	r3, #24
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe fb0e 	bl	800670e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f2:	4b1d      	ldr	r3, [pc, #116]	; (8008168 <xTaskRemoveFromEventList+0xac>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d11c      	bne.n	8008134 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fb05 	bl	800670e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	2201      	movs	r2, #1
 800810a:	409a      	lsls	r2, r3
 800810c:	4b17      	ldr	r3, [pc, #92]	; (800816c <xTaskRemoveFromEventList+0xb0>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4313      	orrs	r3, r2
 8008112:	4a16      	ldr	r2, [pc, #88]	; (800816c <xTaskRemoveFromEventList+0xb0>)
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4a13      	ldr	r2, [pc, #76]	; (8008170 <xTaskRemoveFromEventList+0xb4>)
 8008124:	441a      	add	r2, r3
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	3304      	adds	r3, #4
 800812a:	4619      	mov	r1, r3
 800812c:	4610      	mov	r0, r2
 800812e:	f7fe fa91 	bl	8006654 <vListInsertEnd>
 8008132:	e005      	b.n	8008140 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	3318      	adds	r3, #24
 8008138:	4619      	mov	r1, r3
 800813a:	480e      	ldr	r0, [pc, #56]	; (8008174 <xTaskRemoveFromEventList+0xb8>)
 800813c:	f7fe fa8a 	bl	8006654 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <xTaskRemoveFromEventList+0xbc>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	429a      	cmp	r2, r3
 800814c:	d905      	bls.n	800815a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800814e:	2301      	movs	r3, #1
 8008150:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <xTaskRemoveFromEventList+0xc0>)
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	e001      	b.n	800815e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800815e:	697b      	ldr	r3, [r7, #20]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200053dc 	.word	0x200053dc
 800816c:	200053bc 	.word	0x200053bc
 8008170:	200052b8 	.word	0x200052b8
 8008174:	20005374 	.word	0x20005374
 8008178:	200052b4 	.word	0x200052b4
 800817c:	200053c8 	.word	0x200053c8

08008180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <vTaskInternalSetTimeOutState+0x24>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008190:	4b05      	ldr	r3, [pc, #20]	; (80081a8 <vTaskInternalSetTimeOutState+0x28>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	605a      	str	r2, [r3, #4]
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	200053cc 	.word	0x200053cc
 80081a8:	200053b8 	.word	0x200053b8

080081ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	613b      	str	r3, [r7, #16]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	60fb      	str	r3, [r7, #12]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80081ee:	f000 fc71 	bl	8008ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081f2:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <xTaskCheckForTimeOut+0xbc>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800820a:	d102      	bne.n	8008212 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800820c:	2300      	movs	r3, #0
 800820e:	61fb      	str	r3, [r7, #28]
 8008210:	e023      	b.n	800825a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4b15      	ldr	r3, [pc, #84]	; (800826c <xTaskCheckForTimeOut+0xc0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d007      	beq.n	800822e <xTaskCheckForTimeOut+0x82>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	429a      	cmp	r2, r3
 8008226:	d302      	bcc.n	800822e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	61fb      	str	r3, [r7, #28]
 800822c:	e015      	b.n	800825a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	429a      	cmp	r2, r3
 8008236:	d20b      	bcs.n	8008250 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	1ad2      	subs	r2, r2, r3
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7ff ff9b 	bl	8008180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	e004      	b.n	800825a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008256:	2301      	movs	r3, #1
 8008258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800825a:	f000 fc6b 	bl	8008b34 <vPortExitCritical>

	return xReturn;
 800825e:	69fb      	ldr	r3, [r7, #28]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	200053b8 	.word	0x200053b8
 800826c:	200053cc 	.word	0x200053cc

08008270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008274:	4b03      	ldr	r3, [pc, #12]	; (8008284 <vTaskMissedYield+0x14>)
 8008276:	2201      	movs	r2, #1
 8008278:	601a      	str	r2, [r3, #0]
}
 800827a:	bf00      	nop
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	200053c8 	.word	0x200053c8

08008288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008290:	f000 f852 	bl	8008338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008294:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <prvIdleTask+0x28>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d9f9      	bls.n	8008290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800829c:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <prvIdleTask+0x2c>)
 800829e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082ac:	e7f0      	b.n	8008290 <prvIdleTask+0x8>
 80082ae:	bf00      	nop
 80082b0:	200052b8 	.word	0x200052b8
 80082b4:	e000ed04 	.word	0xe000ed04

080082b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082be:	2300      	movs	r3, #0
 80082c0:	607b      	str	r3, [r7, #4]
 80082c2:	e00c      	b.n	80082de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4a12      	ldr	r2, [pc, #72]	; (8008318 <prvInitialiseTaskLists+0x60>)
 80082d0:	4413      	add	r3, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe f991 	bl	80065fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3301      	adds	r3, #1
 80082dc:	607b      	str	r3, [r7, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b06      	cmp	r3, #6
 80082e2:	d9ef      	bls.n	80082c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082e4:	480d      	ldr	r0, [pc, #52]	; (800831c <prvInitialiseTaskLists+0x64>)
 80082e6:	f7fe f988 	bl	80065fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082ea:	480d      	ldr	r0, [pc, #52]	; (8008320 <prvInitialiseTaskLists+0x68>)
 80082ec:	f7fe f985 	bl	80065fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082f0:	480c      	ldr	r0, [pc, #48]	; (8008324 <prvInitialiseTaskLists+0x6c>)
 80082f2:	f7fe f982 	bl	80065fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082f6:	480c      	ldr	r0, [pc, #48]	; (8008328 <prvInitialiseTaskLists+0x70>)
 80082f8:	f7fe f97f 	bl	80065fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082fc:	480b      	ldr	r0, [pc, #44]	; (800832c <prvInitialiseTaskLists+0x74>)
 80082fe:	f7fe f97c 	bl	80065fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008302:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <prvInitialiseTaskLists+0x78>)
 8008304:	4a05      	ldr	r2, [pc, #20]	; (800831c <prvInitialiseTaskLists+0x64>)
 8008306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008308:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <prvInitialiseTaskLists+0x7c>)
 800830a:	4a05      	ldr	r2, [pc, #20]	; (8008320 <prvInitialiseTaskLists+0x68>)
 800830c:	601a      	str	r2, [r3, #0]
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	200052b8 	.word	0x200052b8
 800831c:	20005344 	.word	0x20005344
 8008320:	20005358 	.word	0x20005358
 8008324:	20005374 	.word	0x20005374
 8008328:	20005388 	.word	0x20005388
 800832c:	200053a0 	.word	0x200053a0
 8008330:	2000536c 	.word	0x2000536c
 8008334:	20005370 	.word	0x20005370

08008338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800833e:	e019      	b.n	8008374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008340:	f000 fbc8 	bl	8008ad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008344:	4b10      	ldr	r3, [pc, #64]	; (8008388 <prvCheckTasksWaitingTermination+0x50>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe f9dc 	bl	800670e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008356:	4b0d      	ldr	r3, [pc, #52]	; (800838c <prvCheckTasksWaitingTermination+0x54>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	3b01      	subs	r3, #1
 800835c:	4a0b      	ldr	r2, [pc, #44]	; (800838c <prvCheckTasksWaitingTermination+0x54>)
 800835e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008360:	4b0b      	ldr	r3, [pc, #44]	; (8008390 <prvCheckTasksWaitingTermination+0x58>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3b01      	subs	r3, #1
 8008366:	4a0a      	ldr	r2, [pc, #40]	; (8008390 <prvCheckTasksWaitingTermination+0x58>)
 8008368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800836a:	f000 fbe3 	bl	8008b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f810 	bl	8008394 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008374:	4b06      	ldr	r3, [pc, #24]	; (8008390 <prvCheckTasksWaitingTermination+0x58>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e1      	bne.n	8008340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20005388 	.word	0x20005388
 800838c:	200053b4 	.word	0x200053b4
 8008390:	2000539c 	.word	0x2000539c

08008394 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	334c      	adds	r3, #76	; 0x4c
 80083a0:	4618      	mov	r0, r3
 80083a2:	f017 fc1f 	bl	801fbe4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d108      	bne.n	80083c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fd7b 	bl	8008eb0 <vPortFree>
				vPortFree( pxTCB );
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fd78 	bl	8008eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083c0:	e018      	b.n	80083f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d103      	bne.n	80083d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fd6f 	bl	8008eb0 <vPortFree>
	}
 80083d2:	e00f      	b.n	80083f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d00a      	beq.n	80083f4 <prvDeleteTCB+0x60>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	60fb      	str	r3, [r7, #12]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <prvDeleteTCB+0x5e>
	}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008402:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <prvResetNextTaskUnblockTime+0x38>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d104      	bne.n	8008416 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800840c:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <prvResetNextTaskUnblockTime+0x3c>)
 800840e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008412:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008414:	e008      	b.n	8008428 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008416:	4b07      	ldr	r3, [pc, #28]	; (8008434 <prvResetNextTaskUnblockTime+0x38>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	4a04      	ldr	r2, [pc, #16]	; (8008438 <prvResetNextTaskUnblockTime+0x3c>)
 8008426:	6013      	str	r3, [r2, #0]
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	2000536c 	.word	0x2000536c
 8008438:	200053d4 	.word	0x200053d4

0800843c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008442:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <xTaskGetSchedulerState+0x34>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d102      	bne.n	8008450 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800844a:	2301      	movs	r3, #1
 800844c:	607b      	str	r3, [r7, #4]
 800844e:	e008      	b.n	8008462 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008450:	4b08      	ldr	r3, [pc, #32]	; (8008474 <xTaskGetSchedulerState+0x38>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d102      	bne.n	800845e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008458:	2302      	movs	r3, #2
 800845a:	607b      	str	r3, [r7, #4]
 800845c:	e001      	b.n	8008462 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800845e:	2300      	movs	r3, #0
 8008460:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008462:	687b      	ldr	r3, [r7, #4]
	}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	200053c0 	.word	0x200053c0
 8008474:	200053dc 	.word	0x200053dc

08008478 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d05e      	beq.n	800854c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008492:	4b31      	ldr	r3, [pc, #196]	; (8008558 <xTaskPriorityInherit+0xe0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	429a      	cmp	r2, r3
 800849a:	d24e      	bcs.n	800853a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	db06      	blt.n	80084b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a4:	4b2c      	ldr	r3, [pc, #176]	; (8008558 <xTaskPriorityInherit+0xe0>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084aa:	f1c3 0207 	rsb	r2, r3, #7
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	6959      	ldr	r1, [r3, #20]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ba:	4613      	mov	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4a26      	ldr	r2, [pc, #152]	; (800855c <xTaskPriorityInherit+0xe4>)
 80084c4:	4413      	add	r3, r2
 80084c6:	4299      	cmp	r1, r3
 80084c8:	d12f      	bne.n	800852a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe f91d 	bl	800670e <uxListRemove>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084de:	2201      	movs	r2, #1
 80084e0:	fa02 f303 	lsl.w	r3, r2, r3
 80084e4:	43da      	mvns	r2, r3
 80084e6:	4b1e      	ldr	r3, [pc, #120]	; (8008560 <xTaskPriorityInherit+0xe8>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4013      	ands	r3, r2
 80084ec:	4a1c      	ldr	r2, [pc, #112]	; (8008560 <xTaskPriorityInherit+0xe8>)
 80084ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80084f0:	4b19      	ldr	r3, [pc, #100]	; (8008558 <xTaskPriorityInherit+0xe0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fe:	2201      	movs	r2, #1
 8008500:	409a      	lsls	r2, r3
 8008502:	4b17      	ldr	r3, [pc, #92]	; (8008560 <xTaskPriorityInherit+0xe8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4313      	orrs	r3, r2
 8008508:	4a15      	ldr	r2, [pc, #84]	; (8008560 <xTaskPriorityInherit+0xe8>)
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008510:	4613      	mov	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4a10      	ldr	r2, [pc, #64]	; (800855c <xTaskPriorityInherit+0xe4>)
 800851a:	441a      	add	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	3304      	adds	r3, #4
 8008520:	4619      	mov	r1, r3
 8008522:	4610      	mov	r0, r2
 8008524:	f7fe f896 	bl	8006654 <vListInsertEnd>
 8008528:	e004      	b.n	8008534 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800852a:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <xTaskPriorityInherit+0xe0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008534:	2301      	movs	r3, #1
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	e008      	b.n	800854c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800853e:	4b06      	ldr	r3, [pc, #24]	; (8008558 <xTaskPriorityInherit+0xe0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	429a      	cmp	r2, r3
 8008546:	d201      	bcs.n	800854c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008548:	2301      	movs	r3, #1
 800854a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800854c:	68fb      	ldr	r3, [r7, #12]
	}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	200052b4 	.word	0x200052b4
 800855c:	200052b8 	.word	0x200052b8
 8008560:	200053bc 	.word	0x200053bc

08008564 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008570:	2300      	movs	r3, #0
 8008572:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d06e      	beq.n	8008658 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800857a:	4b3a      	ldr	r3, [pc, #232]	; (8008664 <xTaskPriorityDisinherit+0x100>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	429a      	cmp	r2, r3
 8008582:	d00a      	beq.n	800859a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	60fb      	str	r3, [r7, #12]
}
 8008596:	bf00      	nop
 8008598:	e7fe      	b.n	8008598 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	60bb      	str	r3, [r7, #8]
}
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085bc:	1e5a      	subs	r2, r3, #1
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d044      	beq.n	8008658 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d140      	bne.n	8008658 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	3304      	adds	r3, #4
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe f897 	bl	800670e <uxListRemove>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d115      	bne.n	8008612 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	491f      	ldr	r1, [pc, #124]	; (8008668 <xTaskPriorityDisinherit+0x104>)
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xTaskPriorityDisinherit+0xae>
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	2201      	movs	r2, #1
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	43da      	mvns	r2, r3
 8008608:	4b18      	ldr	r3, [pc, #96]	; (800866c <xTaskPriorityDisinherit+0x108>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4013      	ands	r3, r2
 800860e:	4a17      	ldr	r2, [pc, #92]	; (800866c <xTaskPriorityDisinherit+0x108>)
 8008610:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	f1c3 0207 	rsb	r2, r3, #7
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	2201      	movs	r2, #1
 800862c:	409a      	lsls	r2, r3
 800862e:	4b0f      	ldr	r3, [pc, #60]	; (800866c <xTaskPriorityDisinherit+0x108>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4313      	orrs	r3, r2
 8008634:	4a0d      	ldr	r2, [pc, #52]	; (800866c <xTaskPriorityDisinherit+0x108>)
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4a08      	ldr	r2, [pc, #32]	; (8008668 <xTaskPriorityDisinherit+0x104>)
 8008646:	441a      	add	r2, r3
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	3304      	adds	r3, #4
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f7fe f800 	bl	8006654 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008658:	697b      	ldr	r3, [r7, #20]
	}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200052b4 	.word	0x200052b4
 8008668:	200052b8 	.word	0x200052b8
 800866c:	200053bc 	.word	0x200053bc

08008670 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800867e:	2301      	movs	r3, #1
 8008680:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d077      	beq.n	8008778 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	60fb      	str	r3, [r7, #12]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d902      	bls.n	80086b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	61fb      	str	r3, [r7, #28]
 80086b4:	e002      	b.n	80086bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d058      	beq.n	8008778 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d153      	bne.n	8008778 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80086d0:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d10a      	bne.n	80086f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60bb      	str	r3, [r7, #8]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	69fa      	ldr	r2, [r7, #28]
 80086fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	db04      	blt.n	800870e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	f1c3 0207 	rsb	r2, r3, #7
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	6959      	ldr	r1, [r3, #20]
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4a19      	ldr	r2, [pc, #100]	; (8008784 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800871e:	4413      	add	r3, r2
 8008720:	4299      	cmp	r1, r3
 8008722:	d129      	bne.n	8008778 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	3304      	adds	r3, #4
 8008728:	4618      	mov	r0, r3
 800872a:	f7fd fff0 	bl	800670e <uxListRemove>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10a      	bne.n	800874a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	2201      	movs	r2, #1
 800873a:	fa02 f303 	lsl.w	r3, r2, r3
 800873e:	43da      	mvns	r2, r3
 8008740:	4b11      	ldr	r3, [pc, #68]	; (8008788 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4013      	ands	r3, r2
 8008746:	4a10      	ldr	r2, [pc, #64]	; (8008788 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008748:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	2201      	movs	r2, #1
 8008750:	409a      	lsls	r2, r3
 8008752:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4313      	orrs	r3, r2
 8008758:	4a0b      	ldr	r2, [pc, #44]	; (8008788 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4a06      	ldr	r2, [pc, #24]	; (8008784 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800876a:	441a      	add	r2, r3
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	3304      	adds	r3, #4
 8008770:	4619      	mov	r1, r3
 8008772:	4610      	mov	r0, r2
 8008774:	f7fd ff6e 	bl	8006654 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008778:	bf00      	nop
 800877a:	3720      	adds	r7, #32
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	200052b4 	.word	0x200052b4
 8008784:	200052b8 	.word	0x200052b8
 8008788:	200053bc 	.word	0x200053bc

0800878c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800878c:	b480      	push	{r7}
 800878e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d004      	beq.n	80087a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800879e:	3201      	adds	r2, #1
 80087a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80087a2:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80087a4:	681b      	ldr	r3, [r3, #0]
	}
 80087a6:	4618      	mov	r0, r3
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	200052b4 	.word	0x200052b4

080087b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087be:	4b29      	ldr	r3, [pc, #164]	; (8008864 <prvAddCurrentTaskToDelayedList+0xb0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087c4:	4b28      	ldr	r3, [pc, #160]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3304      	adds	r3, #4
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fd ff9f 	bl	800670e <uxListRemove>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80087d6:	4b24      	ldr	r3, [pc, #144]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	2201      	movs	r2, #1
 80087de:	fa02 f303 	lsl.w	r3, r2, r3
 80087e2:	43da      	mvns	r2, r3
 80087e4:	4b21      	ldr	r3, [pc, #132]	; (800886c <prvAddCurrentTaskToDelayedList+0xb8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4013      	ands	r3, r2
 80087ea:	4a20      	ldr	r2, [pc, #128]	; (800886c <prvAddCurrentTaskToDelayedList+0xb8>)
 80087ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087f4:	d10a      	bne.n	800880c <prvAddCurrentTaskToDelayedList+0x58>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d007      	beq.n	800880c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087fc:	4b1a      	ldr	r3, [pc, #104]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3304      	adds	r3, #4
 8008802:	4619      	mov	r1, r3
 8008804:	481a      	ldr	r0, [pc, #104]	; (8008870 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008806:	f7fd ff25 	bl	8006654 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800880a:	e026      	b.n	800885a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4413      	add	r3, r2
 8008812:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008814:	4b14      	ldr	r3, [pc, #80]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	429a      	cmp	r2, r3
 8008822:	d209      	bcs.n	8008838 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008824:	4b13      	ldr	r3, [pc, #76]	; (8008874 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	4b0f      	ldr	r3, [pc, #60]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb4>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3304      	adds	r3, #4
 800882e:	4619      	mov	r1, r3
 8008830:	4610      	mov	r0, r2
 8008832:	f7fd ff33 	bl	800669c <vListInsert>
}
 8008836:	e010      	b.n	800885a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008838:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <prvAddCurrentTaskToDelayedList+0xc4>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <prvAddCurrentTaskToDelayedList+0xb4>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3304      	adds	r3, #4
 8008842:	4619      	mov	r1, r3
 8008844:	4610      	mov	r0, r2
 8008846:	f7fd ff29 	bl	800669c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800884a:	4b0c      	ldr	r3, [pc, #48]	; (800887c <prvAddCurrentTaskToDelayedList+0xc8>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	429a      	cmp	r2, r3
 8008852:	d202      	bcs.n	800885a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008854:	4a09      	ldr	r2, [pc, #36]	; (800887c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	6013      	str	r3, [r2, #0]
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	200053b8 	.word	0x200053b8
 8008868:	200052b4 	.word	0x200052b4
 800886c:	200053bc 	.word	0x200053bc
 8008870:	200053a0 	.word	0x200053a0
 8008874:	20005370 	.word	0x20005370
 8008878:	2000536c 	.word	0x2000536c
 800887c:	200053d4 	.word	0x200053d4

08008880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3b04      	subs	r3, #4
 8008890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3b04      	subs	r3, #4
 800889e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f023 0201 	bic.w	r2, r3, #1
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3b04      	subs	r3, #4
 80088ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088b0:	4a0c      	ldr	r2, [pc, #48]	; (80088e4 <pxPortInitialiseStack+0x64>)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3b14      	subs	r3, #20
 80088ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3b04      	subs	r3, #4
 80088c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f06f 0202 	mvn.w	r2, #2
 80088ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3b20      	subs	r3, #32
 80088d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088d6:	68fb      	ldr	r3, [r7, #12]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	080088e9 	.word	0x080088e9

080088e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088f2:	4b12      	ldr	r3, [pc, #72]	; (800893c <prvTaskExitError+0x54>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088fa:	d00a      	beq.n	8008912 <prvTaskExitError+0x2a>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	60fb      	str	r3, [r7, #12]
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <prvTaskExitError+0x28>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	60bb      	str	r3, [r7, #8]
}
 8008924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008926:	bf00      	nop
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0fc      	beq.n	8008928 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800892e:	bf00      	nop
 8008930:	bf00      	nop
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	20000020 	.word	0x20000020

08008940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008940:	4b07      	ldr	r3, [pc, #28]	; (8008960 <pxCurrentTCBConst2>)
 8008942:	6819      	ldr	r1, [r3, #0]
 8008944:	6808      	ldr	r0, [r1, #0]
 8008946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894a:	f380 8809 	msr	PSP, r0
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f04f 0000 	mov.w	r0, #0
 8008956:	f380 8811 	msr	BASEPRI, r0
 800895a:	4770      	bx	lr
 800895c:	f3af 8000 	nop.w

08008960 <pxCurrentTCBConst2>:
 8008960:	200052b4 	.word	0x200052b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008968:	4808      	ldr	r0, [pc, #32]	; (800898c <prvPortStartFirstTask+0x24>)
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	6800      	ldr	r0, [r0, #0]
 800896e:	f380 8808 	msr	MSP, r0
 8008972:	f04f 0000 	mov.w	r0, #0
 8008976:	f380 8814 	msr	CONTROL, r0
 800897a:	b662      	cpsie	i
 800897c:	b661      	cpsie	f
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	df00      	svc	0
 8008988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800898a:	bf00      	nop
 800898c:	e000ed08 	.word	0xe000ed08

08008990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008996:	4b46      	ldr	r3, [pc, #280]	; (8008ab0 <xPortStartScheduler+0x120>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a46      	ldr	r2, [pc, #280]	; (8008ab4 <xPortStartScheduler+0x124>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d10a      	bne.n	80089b6 <xPortStartScheduler+0x26>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	613b      	str	r3, [r7, #16]
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089b6:	4b3e      	ldr	r3, [pc, #248]	; (8008ab0 <xPortStartScheduler+0x120>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a3f      	ldr	r2, [pc, #252]	; (8008ab8 <xPortStartScheduler+0x128>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d10a      	bne.n	80089d6 <xPortStartScheduler+0x46>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	e7fe      	b.n	80089d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089d6:	4b39      	ldr	r3, [pc, #228]	; (8008abc <xPortStartScheduler+0x12c>)
 80089d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	22ff      	movs	r2, #255	; 0xff
 80089e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	4b31      	ldr	r3, [pc, #196]	; (8008ac0 <xPortStartScheduler+0x130>)
 80089fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089fe:	4b31      	ldr	r3, [pc, #196]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a00:	2207      	movs	r2, #7
 8008a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a04:	e009      	b.n	8008a1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a06:	4b2f      	ldr	r3, [pc, #188]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	4a2d      	ldr	r2, [pc, #180]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a1a:	78fb      	ldrb	r3, [r7, #3]
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a22:	2b80      	cmp	r3, #128	; 0x80
 8008a24:	d0ef      	beq.n	8008a06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a26:	4b27      	ldr	r3, [pc, #156]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1c3 0307 	rsb	r3, r3, #7
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d00a      	beq.n	8008a48 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	60bb      	str	r3, [r7, #8]
}
 8008a44:	bf00      	nop
 8008a46:	e7fe      	b.n	8008a46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a48:	4b1e      	ldr	r3, [pc, #120]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	021b      	lsls	r3, r3, #8
 8008a4e:	4a1d      	ldr	r2, [pc, #116]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a52:	4b1c      	ldr	r3, [pc, #112]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a5a:	4a1a      	ldr	r2, [pc, #104]	; (8008ac4 <xPortStartScheduler+0x134>)
 8008a5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a66:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <xPortStartScheduler+0x138>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a17      	ldr	r2, [pc, #92]	; (8008ac8 <xPortStartScheduler+0x138>)
 8008a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a72:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <xPortStartScheduler+0x138>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a14      	ldr	r2, [pc, #80]	; (8008ac8 <xPortStartScheduler+0x138>)
 8008a78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a7e:	f000 f8dd 	bl	8008c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a82:	4b12      	ldr	r3, [pc, #72]	; (8008acc <xPortStartScheduler+0x13c>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a88:	f000 f8fc 	bl	8008c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a8c:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <xPortStartScheduler+0x140>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a0f      	ldr	r2, [pc, #60]	; (8008ad0 <xPortStartScheduler+0x140>)
 8008a92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a98:	f7ff ff66 	bl	8008968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a9c:	f7ff fa88 	bl	8007fb0 <vTaskSwitchContext>
	prvTaskExitError();
 8008aa0:	f7ff ff22 	bl	80088e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	e000ed00 	.word	0xe000ed00
 8008ab4:	410fc271 	.word	0x410fc271
 8008ab8:	410fc270 	.word	0x410fc270
 8008abc:	e000e400 	.word	0xe000e400
 8008ac0:	200053e0 	.word	0x200053e0
 8008ac4:	200053e4 	.word	0x200053e4
 8008ac8:	e000ed20 	.word	0xe000ed20
 8008acc:	20000020 	.word	0x20000020
 8008ad0:	e000ef34 	.word	0xe000ef34

08008ad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	607b      	str	r3, [r7, #4]
}
 8008aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008aee:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <vPortEnterCritical+0x58>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3301      	adds	r3, #1
 8008af4:	4a0d      	ldr	r2, [pc, #52]	; (8008b2c <vPortEnterCritical+0x58>)
 8008af6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008af8:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <vPortEnterCritical+0x58>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d10f      	bne.n	8008b20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b00:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <vPortEnterCritical+0x5c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	603b      	str	r3, [r7, #0]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <vPortEnterCritical+0x4a>
	}
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20000020 	.word	0x20000020
 8008b30:	e000ed04 	.word	0xe000ed04

08008b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b3a:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <vPortExitCritical+0x50>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <vPortExitCritical+0x24>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	607b      	str	r3, [r7, #4]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b58:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <vPortExitCritical+0x50>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <vPortExitCritical+0x50>)
 8008b60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b62:	4b08      	ldr	r3, [pc, #32]	; (8008b84 <vPortExitCritical+0x50>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d105      	bne.n	8008b76 <vPortExitCritical+0x42>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	f383 8811 	msr	BASEPRI, r3
}
 8008b74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000020 	.word	0x20000020
	...

08008b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b90:	f3ef 8009 	mrs	r0, PSP
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	4b15      	ldr	r3, [pc, #84]	; (8008bf0 <pxCurrentTCBConst>)
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	f01e 0f10 	tst.w	lr, #16
 8008ba0:	bf08      	it	eq
 8008ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	6010      	str	r0, [r2, #0]
 8008bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bb4:	f380 8811 	msr	BASEPRI, r0
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f7ff f9f6 	bl	8007fb0 <vTaskSwitchContext>
 8008bc4:	f04f 0000 	mov.w	r0, #0
 8008bc8:	f380 8811 	msr	BASEPRI, r0
 8008bcc:	bc09      	pop	{r0, r3}
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	6808      	ldr	r0, [r1, #0]
 8008bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd6:	f01e 0f10 	tst.w	lr, #16
 8008bda:	bf08      	it	eq
 8008bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008be0:	f380 8809 	msr	PSP, r0
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst>:
 8008bf0:	200052b4 	.word	0x200052b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c12:	f7ff f915 	bl	8007e40 <xTaskIncrementTick>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <SysTick_Handler+0x40>)
 8008c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	f383 8811 	msr	BASEPRI, r3
}
 8008c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	e000ed04 	.word	0xe000ed04

08008c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c40:	4b0b      	ldr	r3, [pc, #44]	; (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c46:	4b0b      	ldr	r3, [pc, #44]	; (8008c74 <vPortSetupTimerInterrupt+0x38>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <vPortSetupTimerInterrupt+0x3c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a0a      	ldr	r2, [pc, #40]	; (8008c7c <vPortSetupTimerInterrupt+0x40>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	099b      	lsrs	r3, r3, #6
 8008c58:	4a09      	ldr	r2, [pc, #36]	; (8008c80 <vPortSetupTimerInterrupt+0x44>)
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c5e:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <vPortSetupTimerInterrupt+0x34>)
 8008c60:	2207      	movs	r2, #7
 8008c62:	601a      	str	r2, [r3, #0]
}
 8008c64:	bf00      	nop
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	e000e010 	.word	0xe000e010
 8008c74:	e000e018 	.word	0xe000e018
 8008c78:	20000000 	.word	0x20000000
 8008c7c:	10624dd3 	.word	0x10624dd3
 8008c80:	e000e014 	.word	0xe000e014

08008c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c94 <vPortEnableVFP+0x10>
 8008c88:	6801      	ldr	r1, [r0, #0]
 8008c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c8e:	6001      	str	r1, [r0, #0]
 8008c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c92:	bf00      	nop
 8008c94:	e000ed88 	.word	0xe000ed88

08008c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c9e:	f3ef 8305 	mrs	r3, IPSR
 8008ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b0f      	cmp	r3, #15
 8008ca8:	d914      	bls.n	8008cd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008caa:	4a17      	ldr	r2, [pc, #92]	; (8008d08 <vPortValidateInterruptPriority+0x70>)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cb4:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <vPortValidateInterruptPriority+0x74>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	7afa      	ldrb	r2, [r7, #11]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d20a      	bcs.n	8008cd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	; (8008d10 <vPortValidateInterruptPriority+0x78>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cdc:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <vPortValidateInterruptPriority+0x7c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d90a      	bls.n	8008cfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	603b      	str	r3, [r7, #0]
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <vPortValidateInterruptPriority+0x60>
	}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	e000e3f0 	.word	0xe000e3f0
 8008d0c:	200053e0 	.word	0x200053e0
 8008d10:	e000ed0c 	.word	0xe000ed0c
 8008d14:	200053e4 	.word	0x200053e4

08008d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08a      	sub	sp, #40	; 0x28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d24:	f7fe ffc0 	bl	8007ca8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d28:	4b5b      	ldr	r3, [pc, #364]	; (8008e98 <pvPortMalloc+0x180>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d30:	f000 f920 	bl	8008f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d34:	4b59      	ldr	r3, [pc, #356]	; (8008e9c <pvPortMalloc+0x184>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f040 8093 	bne.w	8008e68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01d      	beq.n	8008d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d48:	2208      	movs	r2, #8
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d014      	beq.n	8008d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f023 0307 	bic.w	r3, r3, #7
 8008d60:	3308      	adds	r3, #8
 8008d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <pvPortMalloc+0x6c>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	617b      	str	r3, [r7, #20]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d06e      	beq.n	8008e68 <pvPortMalloc+0x150>
 8008d8a:	4b45      	ldr	r3, [pc, #276]	; (8008ea0 <pvPortMalloc+0x188>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d869      	bhi.n	8008e68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d94:	4b43      	ldr	r3, [pc, #268]	; (8008ea4 <pvPortMalloc+0x18c>)
 8008d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d98:	4b42      	ldr	r3, [pc, #264]	; (8008ea4 <pvPortMalloc+0x18c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d9e:	e004      	b.n	8008daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d903      	bls.n	8008dbc <pvPortMalloc+0xa4>
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1f1      	bne.n	8008da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dbc:	4b36      	ldr	r3, [pc, #216]	; (8008e98 <pvPortMalloc+0x180>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d050      	beq.n	8008e68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2208      	movs	r2, #8
 8008dcc:	4413      	add	r3, r2
 8008dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	2308      	movs	r3, #8
 8008de2:	005b      	lsls	r3, r3, #1
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d91f      	bls.n	8008e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00a      	beq.n	8008e10 <pvPortMalloc+0xf8>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	613b      	str	r3, [r7, #16]
}
 8008e0c:	bf00      	nop
 8008e0e:	e7fe      	b.n	8008e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	1ad2      	subs	r2, r2, r3
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e22:	69b8      	ldr	r0, [r7, #24]
 8008e24:	f000 f908 	bl	8009038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e28:	4b1d      	ldr	r3, [pc, #116]	; (8008ea0 <pvPortMalloc+0x188>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	4a1b      	ldr	r2, [pc, #108]	; (8008ea0 <pvPortMalloc+0x188>)
 8008e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e36:	4b1a      	ldr	r3, [pc, #104]	; (8008ea0 <pvPortMalloc+0x188>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <pvPortMalloc+0x190>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d203      	bcs.n	8008e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e42:	4b17      	ldr	r3, [pc, #92]	; (8008ea0 <pvPortMalloc+0x188>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <pvPortMalloc+0x190>)
 8008e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <pvPortMalloc+0x184>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e5e:	4b13      	ldr	r3, [pc, #76]	; (8008eac <pvPortMalloc+0x194>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3301      	adds	r3, #1
 8008e64:	4a11      	ldr	r2, [pc, #68]	; (8008eac <pvPortMalloc+0x194>)
 8008e66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e68:	f7fe ff2c 	bl	8007cc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	f003 0307 	and.w	r3, r3, #7
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <pvPortMalloc+0x174>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	60fb      	str	r3, [r7, #12]
}
 8008e88:	bf00      	nop
 8008e8a:	e7fe      	b.n	8008e8a <pvPortMalloc+0x172>
	return pvReturn;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3728      	adds	r7, #40	; 0x28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	2000c920 	.word	0x2000c920
 8008e9c:	2000c934 	.word	0x2000c934
 8008ea0:	2000c924 	.word	0x2000c924
 8008ea4:	2000c918 	.word	0x2000c918
 8008ea8:	2000c928 	.word	0x2000c928
 8008eac:	2000c92c 	.word	0x2000c92c

08008eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d04d      	beq.n	8008f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ec2:	2308      	movs	r3, #8
 8008ec4:	425b      	negs	r3, r3
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	4b24      	ldr	r3, [pc, #144]	; (8008f68 <vPortFree+0xb8>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4013      	ands	r3, r2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <vPortFree+0x44>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	60fb      	str	r3, [r7, #12]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <vPortFree+0x62>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	60bb      	str	r3, [r7, #8]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	4b14      	ldr	r3, [pc, #80]	; (8008f68 <vPortFree+0xb8>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01e      	beq.n	8008f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d11a      	bne.n	8008f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	4b0e      	ldr	r3, [pc, #56]	; (8008f68 <vPortFree+0xb8>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	43db      	mvns	r3, r3
 8008f32:	401a      	ands	r2, r3
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f38:	f7fe feb6 	bl	8007ca8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	4b0a      	ldr	r3, [pc, #40]	; (8008f6c <vPortFree+0xbc>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4413      	add	r3, r2
 8008f46:	4a09      	ldr	r2, [pc, #36]	; (8008f6c <vPortFree+0xbc>)
 8008f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f4a:	6938      	ldr	r0, [r7, #16]
 8008f4c:	f000 f874 	bl	8009038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <vPortFree+0xc0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3301      	adds	r3, #1
 8008f56:	4a06      	ldr	r2, [pc, #24]	; (8008f70 <vPortFree+0xc0>)
 8008f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f5a:	f7fe feb3 	bl	8007cc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f5e:	bf00      	nop
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	2000c934 	.word	0x2000c934
 8008f6c:	2000c924 	.word	0x2000c924
 8008f70:	2000c930 	.word	0x2000c930

08008f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f7a:	f247 5330 	movw	r3, #30000	; 0x7530
 8008f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f80:	4b27      	ldr	r3, [pc, #156]	; (8009020 <prvHeapInit+0xac>)
 8008f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00c      	beq.n	8008fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3307      	adds	r3, #7
 8008f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 0307 	bic.w	r3, r3, #7
 8008f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	4a1f      	ldr	r2, [pc, #124]	; (8009020 <prvHeapInit+0xac>)
 8008fa4:	4413      	add	r3, r2
 8008fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fac:	4a1d      	ldr	r2, [pc, #116]	; (8009024 <prvHeapInit+0xb0>)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fb2:	4b1c      	ldr	r3, [pc, #112]	; (8009024 <prvHeapInit+0xb0>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	1a9b      	subs	r3, r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f023 0307 	bic.w	r3, r3, #7
 8008fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a15      	ldr	r2, [pc, #84]	; (8009028 <prvHeapInit+0xb4>)
 8008fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fd6:	4b14      	ldr	r3, [pc, #80]	; (8009028 <prvHeapInit+0xb4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fde:	4b12      	ldr	r3, [pc, #72]	; (8009028 <prvHeapInit+0xb4>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	1ad2      	subs	r2, r2, r3
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	; (8009028 <prvHeapInit+0xb4>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	4a0a      	ldr	r2, [pc, #40]	; (800902c <prvHeapInit+0xb8>)
 8009002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	4a09      	ldr	r2, [pc, #36]	; (8009030 <prvHeapInit+0xbc>)
 800900a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800900c:	4b09      	ldr	r3, [pc, #36]	; (8009034 <prvHeapInit+0xc0>)
 800900e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009012:	601a      	str	r2, [r3, #0]
}
 8009014:	bf00      	nop
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	200053e8 	.word	0x200053e8
 8009024:	2000c918 	.word	0x2000c918
 8009028:	2000c920 	.word	0x2000c920
 800902c:	2000c928 	.word	0x2000c928
 8009030:	2000c924 	.word	0x2000c924
 8009034:	2000c934 	.word	0x2000c934

08009038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009040:	4b28      	ldr	r3, [pc, #160]	; (80090e4 <prvInsertBlockIntoFreeList+0xac>)
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	e002      	b.n	800904c <prvInsertBlockIntoFreeList+0x14>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	429a      	cmp	r2, r3
 8009054:	d8f7      	bhi.n	8009046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	4413      	add	r3, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d108      	bne.n	800907a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	441a      	add	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	441a      	add	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d118      	bne.n	80090c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4b15      	ldr	r3, [pc, #84]	; (80090e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d00d      	beq.n	80090b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	441a      	add	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	e008      	b.n	80090c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090b6:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <prvInsertBlockIntoFreeList+0xb0>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	e003      	b.n	80090c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d002      	beq.n	80090d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	2000c918 	.word	0x2000c918
 80090e8:	2000c920 	.word	0x2000c920

080090ec <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4293      	cmp	r3, r2
 80090fc:	bf38      	it	cc
 80090fe:	4613      	movcc	r3, r2
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4293      	cmp	r3, r2
 800911c:	bf28      	it	cs
 800911e:	4613      	movcs	r3, r2
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	fbb3 f2f2 	udiv	r2, r3, r2
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	fb01 f202 	mul.w	r2, r1, r2
 8009144:	1a9b      	subs	r3, r3, r2
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	1ad3      	subs	r3, r2, r3
}
 800914a:	4618      	mov	r0, r3
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr

08009156 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	4413      	add	r3, r2
 8009166:	3b01      	subs	r3, #1
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff ffde 	bl	800912c <lfs_aligndown>
 8009170:	4603      	mov	r3, r0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3b01      	subs	r3, #1
 8009186:	fab3 f383 	clz	r3, r3
 800918a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	fa93 f3a3 	rbit	r3, r3
 80091a8:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7f7 f875 	bl	80002b0 <__popcountsi2>
 80091c6:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	1ad3      	subs	r3, r2, r3
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 80091f4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff ffee 	bl	80091ec <lfs_fromle32>
 8009210:	4603      	mov	r3, r0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800921a:	b480      	push	{r7}
 800921c:	b083      	sub	sp, #12
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8009226:	4618      	mov	r0, r3
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff ffed 	bl	800921a <lfs_frombe32>
 8009240:	4603      	mov	r3, r0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f016 f8d0 	bl	801f3f8 <malloc>
 8009258:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f016 f8cc 	bl	801f408 <free>
#else
    (void)p;
#endif
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <lfs_cache_drop>:
int lfs_mounted;
lfs_t lfs;
struct lfs_config cfg;

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009288:	601a      	str	r2, [r3, #0]
}
 800928a:	bf00      	nop
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	68d8      	ldr	r0, [r3, #12]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	461a      	mov	r2, r3
 80092ac:	21ff      	movs	r1, #255	; 0xff
 80092ae:	f016 fc53 	bl	801fb58 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092b8:	601a      	str	r2, [r3, #0]
}
 80092ba:	bf00      	nop
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80092c4:	b5b0      	push	{r4, r5, r7, lr}
 80092c6:	b08a      	sub	sp, #40	; 0x28
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092de:	429a      	cmp	r2, r3
 80092e0:	d208      	bcs.n	80092f4 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 80092e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e6:	441a      	add	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (block >= lfs->cfg->block_count ||
 80092ee:	429a      	cmp	r2, r3
 80092f0:	f240 811b 	bls.w	800952a <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 80092f4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80092f8:	e11c      	b.n	8009534 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80092fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fc:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d03f      	beq.n	8009384 <lfs_bd_read+0xc0>
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800930a:	429a      	cmp	r2, r3
 800930c:	d13a      	bne.n	8009384 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8009318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800931a:	429a      	cmp	r2, r3
 800931c:	d232      	bcs.n	8009384 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009324:	429a      	cmp	r2, r3
 8009326:	d324      	bcc.n	8009372 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6859      	ldr	r1, [r3, #4]
 8009330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009332:	1acb      	subs	r3, r1, r3
 8009334:	4413      	add	r3, r2
 8009336:	4619      	mov	r1, r3
 8009338:	69b8      	ldr	r0, [r7, #24]
 800933a:	f7ff fee7 	bl	800910c <lfs_min>
 800933e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800934a:	1acb      	subs	r3, r1, r3
 800934c:	4413      	add	r3, r2
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	4619      	mov	r1, r3
 8009352:	69f8      	ldr	r0, [r7, #28]
 8009354:	f016 fd0f 	bl	801fd76 <memcpy>

                data += diff;
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	4413      	add	r3, r2
 800935e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8009360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	4413      	add	r3, r2
 8009366:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8009368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8009370:	e0db      	b.n	800952a <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	4619      	mov	r1, r3
 800937c:	69b8      	ldr	r0, [r7, #24]
 800937e:	f7ff fec5 	bl	800910c <lfs_min>
 8009382:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938a:	429a      	cmp	r2, r3
 800938c:	d13a      	bne.n	8009404 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	4413      	add	r3, r2
        if (block == rcache->block &&
 8009398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800939a:	429a      	cmp	r2, r3
 800939c:	d232      	bcs.n	8009404 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d324      	bcc.n	80093f2 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6859      	ldr	r1, [r3, #4]
 80093b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b2:	1acb      	subs	r3, r1, r3
 80093b4:	4413      	add	r3, r2
 80093b6:	4619      	mov	r1, r3
 80093b8:	69b8      	ldr	r0, [r7, #24]
 80093ba:	f7ff fea7 	bl	800910c <lfs_min>
 80093be:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093ca:	1acb      	subs	r3, r1, r3
 80093cc:	4413      	add	r3, r2
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	4619      	mov	r1, r3
 80093d2:	69f8      	ldr	r0, [r7, #28]
 80093d4:	f016 fccf 	bl	801fd76 <memcpy>

                data += diff;
 80093d8:	69fa      	ldr	r2, [r7, #28]
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	4413      	add	r3, r2
 80093de:	61fb      	str	r3, [r7, #28]
                off += diff;
 80093e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	4413      	add	r3, r2
 80093e6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80093e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80093f0:	e09b      	b.n	800952a <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	4619      	mov	r1, r3
 80093fc:	69b8      	ldr	r0, [r7, #24]
 80093fe:	f7ff fe85 	bl	800910c <lfs_min>
 8009402:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8009404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d336      	bcc.n	800947a <lfs_bd_read+0x1b6>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009410:	69da      	ldr	r2, [r3, #28]
 8009412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009414:	fbb3 f1f2 	udiv	r1, r3, r2
 8009418:	fb01 f202 	mul.w	r2, r1, r2
 800941c:	1a9b      	subs	r3, r3, r2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d12b      	bne.n	800947a <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009426:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8009428:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800942a:	429a      	cmp	r2, r3
 800942c:	d325      	bcc.n	800947a <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	4619      	mov	r1, r3
 8009436:	69b8      	ldr	r0, [r7, #24]
 8009438:	f7ff fe78 	bl	800912c <lfs_aligndown>
 800943c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009442:	685c      	ldr	r4, [r3, #4]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009450:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009452:	47a0      	blx	r4
 8009454:	6178      	str	r0, [r7, #20]
            if (err) {
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <lfs_bd_read+0x19c>
                return err;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	e069      	b.n	8009534 <lfs_bd_read+0x270>
            }

            data += diff;
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	4413      	add	r3, r2
 8009466:	61fb      	str	r3, [r7, #28]
            off += diff;
 8009468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	4413      	add	r3, r2
 800946e:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8009470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8009478:	e057      	b.n	800952a <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800947e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009482:	429a      	cmp	r2, r3
 8009484:	d305      	bcc.n	8009492 <lfs_bd_read+0x1ce>
 8009486:	4b2d      	ldr	r3, [pc, #180]	; (800953c <lfs_bd_read+0x278>)
 8009488:	4a2d      	ldr	r2, [pc, #180]	; (8009540 <lfs_bd_read+0x27c>)
 800948a:	215e      	movs	r1, #94	; 0x5e
 800948c:	482d      	ldr	r0, [pc, #180]	; (8009544 <lfs_bd_read+0x280>)
 800948e:	f015 ff91 	bl	801f3b4 <__assert_func>
        rcache->block = block;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009496:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	4619      	mov	r1, r3
 80094a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80094a2:	f7ff fe43 	bl	800912c <lfs_aligndown>
 80094a6:	4602      	mov	r2, r0
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 80094ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094b6:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f7ff fe4b 	bl	8009156 <lfs_alignup>
 80094c0:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                lfs_min(
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f7ff fe1e 	bl	800910c <lfs_min>
 80094d0:	4602      	mov	r2, r0
                - rcache->off,
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 80094d6:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f7ff fe13 	bl	800910c <lfs_min>
 80094e6:	4602      	mov	r2, r0
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094f0:	685c      	ldr	r4, [r3, #4]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6819      	ldr	r1, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	462b      	mov	r3, r5
 800950a:	47a0      	blx	r4
 800950c:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	dd05      	ble.n	8009520 <lfs_bd_read+0x25c>
 8009514:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <lfs_bd_read+0x284>)
 8009516:	4a0a      	ldr	r2, [pc, #40]	; (8009540 <lfs_bd_read+0x27c>)
 8009518:	2169      	movs	r1, #105	; 0x69
 800951a:	480a      	ldr	r0, [pc, #40]	; (8009544 <lfs_bd_read+0x280>)
 800951c:	f015 ff4a 	bl	801f3b4 <__assert_func>
        if (err) {
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <lfs_bd_read+0x266>
            return err;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	e004      	b.n	8009534 <lfs_bd_read+0x270>
    while (size > 0) {
 800952a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952c:	2b00      	cmp	r3, #0
 800952e:	f47f aee4 	bne.w	80092fa <lfs_bd_read+0x36>
        }
    }

    return 0;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3720      	adds	r7, #32
 8009538:	46bd      	mov	sp, r7
 800953a:	bdb0      	pop	{r4, r5, r7, pc}
 800953c:	08020d0c 	.word	0x08020d0c
 8009540:	08024fd8 	.word	0x08024fd8
 8009544:	08020d2c 	.word	0x08020d2c
 8009548:	08020d58 	.word	0x08020d58

0800954c <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800954c:	b580      	push	{r7, lr}
 800954e:	b08e      	sub	sp, #56	; 0x38
 8009550:	af04      	add	r7, sp, #16
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8009562:	2300      	movs	r3, #0
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
 8009566:	e039      	b.n	80095dc <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8009568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	2108      	movs	r1, #8
 8009570:	4618      	mov	r0, r3
 8009572:	f7ff fdcb 	bl	800910c <lfs_min>
 8009576:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	1ad1      	subs	r1, r2, r3
 800957e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	4413      	add	r3, r2
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	9203      	str	r2, [sp, #12]
 8009588:	f107 0210 	add.w	r2, r7, #16
 800958c:	9202      	str	r2, [sp, #8]
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	460b      	mov	r3, r1
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	68b9      	ldr	r1, [r7, #8]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7ff fe92 	bl	80092c4 <lfs_bd_read>
 80095a0:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <lfs_bd_cmp+0x60>
            return res;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	e01c      	b.n	80095e6 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 80095ac:	6a3a      	ldr	r2, [r7, #32]
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	18d1      	adds	r1, r2, r3
 80095b2:	f107 0310 	add.w	r3, r7, #16
 80095b6:	69fa      	ldr	r2, [r7, #28]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f016 fabd 	bl	801fb38 <memcmp>
 80095be:	61b8      	str	r0, [r7, #24]
        if (res) {
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d006      	beq.n	80095d4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	da01      	bge.n	80095d0 <lfs_bd_cmp+0x84>
 80095cc:	2301      	movs	r3, #1
 80095ce:	e00a      	b.n	80095e6 <lfs_bd_cmp+0x9a>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e008      	b.n	80095e6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 80095d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	4413      	add	r3, r2
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
 80095dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d3c1      	bcc.n	8009568 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3728      	adds	r7, #40	; 0x28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80095f0:	b5b0      	push	{r4, r5, r7, lr}
 80095f2:	b08c      	sub	sp, #48	; 0x30
 80095f4:	af04      	add	r7, sp, #16
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009606:	d061      	beq.n	80096cc <lfs_bd_flush+0xdc>
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f113 0f02 	cmn.w	r3, #2
 8009610:	d05c      	beq.n	80096cc <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	429a      	cmp	r2, r3
 800961e:	d305      	bcc.n	800962c <lfs_bd_flush+0x3c>
 8009620:	4b2d      	ldr	r3, [pc, #180]	; (80096d8 <lfs_bd_flush+0xe8>)
 8009622:	4a2e      	ldr	r2, [pc, #184]	; (80096dc <lfs_bd_flush+0xec>)
 8009624:	2197      	movs	r1, #151	; 0x97
 8009626:	482e      	ldr	r0, [pc, #184]	; (80096e0 <lfs_bd_flush+0xf0>)
 8009628:	f015 fec4 	bl	801f3b4 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7ff fd8c 	bl	8009156 <lfs_alignup>
 800963e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009644:	689c      	ldr	r4, [r3, #8]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6819      	ldr	r1, [r3, #0]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	462b      	mov	r3, r5
 800965c:	47a0      	blx	r4
 800965e:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dd05      	ble.n	8009672 <lfs_bd_flush+0x82>
 8009666:	4b1f      	ldr	r3, [pc, #124]	; (80096e4 <lfs_bd_flush+0xf4>)
 8009668:	4a1c      	ldr	r2, [pc, #112]	; (80096dc <lfs_bd_flush+0xec>)
 800966a:	219b      	movs	r1, #155	; 0x9b
 800966c:	481c      	ldr	r0, [pc, #112]	; (80096e0 <lfs_bd_flush+0xf0>)
 800966e:	f015 fea1 	bl	801f3b4 <__assert_func>
        if (err) {
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <lfs_bd_flush+0x8c>
            return err;
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	e028      	b.n	80096ce <lfs_bd_flush+0xde>
        }

        if (validate) {
 800967c:	78fb      	ldrb	r3, [r7, #3]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d020      	beq.n	80096c4 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8009682:	6879      	ldr	r1, [r7, #4]
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff fdf7 	bl	8009278 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8009696:	69f8      	ldr	r0, [r7, #28]
 8009698:	9003      	str	r0, [sp, #12]
 800969a:	9102      	str	r1, [sp, #8]
 800969c:	9201      	str	r2, [sp, #4]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	2100      	movs	r1, #0
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f7ff ff50 	bl	800954c <lfs_bd_cmp>
 80096ac:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	da01      	bge.n	80096b8 <lfs_bd_flush+0xc8>
                return res;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	e00a      	b.n	80096ce <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 80096be:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80096c2:	e004      	b.n	80096ce <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7ff fde5 	bl	8009296 <lfs_cache_zero>
    }

    return 0;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3720      	adds	r7, #32
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bdb0      	pop	{r4, r5, r7, pc}
 80096d6:	bf00      	nop
 80096d8:	08020d64 	.word	0x08020d64
 80096dc:	08024fe4 	.word	0x08024fe4
 80096e0:	08020d2c 	.word	0x08020d2c
 80096e4:	08020d58 	.word	0x08020d58

080096e8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b086      	sub	sp, #24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7ff fdbd 	bl	8009278 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	68b9      	ldr	r1, [r7, #8]
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f7ff ff73 	bl	80095f0 <lfs_bd_flush>
 800970a:	6178      	str	r0, [r7, #20]
    if (err) {
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d001      	beq.n	8009716 <lfs_bd_sync+0x2e>
        return err;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	e011      	b.n	800973a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
 8009724:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	dd05      	ble.n	8009738 <lfs_bd_sync+0x50>
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <lfs_bd_sync+0x5c>)
 800972e:	4a06      	ldr	r2, [pc, #24]	; (8009748 <lfs_bd_sync+0x60>)
 8009730:	21c1      	movs	r1, #193	; 0xc1
 8009732:	4806      	ldr	r0, [pc, #24]	; (800974c <lfs_bd_sync+0x64>)
 8009734:	f015 fe3e 	bl	801f3b4 <__assert_func>
    return err;
 8009738:	697b      	ldr	r3, [r7, #20]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	08020d58 	.word	0x08020d58
 8009748:	08024ff4 	.word	0x08024ff4
 800974c:	08020d2c 	.word	0x08020d2c

08009750 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	f113 0f02 	cmn.w	r3, #2
 8009768:	d00b      	beq.n	8009782 <lfs_bd_prog+0x32>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800976e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009772:	429a      	cmp	r2, r3
 8009774:	d305      	bcc.n	8009782 <lfs_bd_prog+0x32>
 8009776:	4b47      	ldr	r3, [pc, #284]	; (8009894 <lfs_bd_prog+0x144>)
 8009778:	4a47      	ldr	r2, [pc, #284]	; (8009898 <lfs_bd_prog+0x148>)
 800977a:	21cc      	movs	r1, #204	; 0xcc
 800977c:	4847      	ldr	r0, [pc, #284]	; (800989c <lfs_bd_prog+0x14c>)
 800977e:	f015 fe19 	bl	801f3b4 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8009782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009786:	441a      	add	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	429a      	cmp	r2, r3
 8009790:	d977      	bls.n	8009882 <lfs_bd_prog+0x132>
 8009792:	4b43      	ldr	r3, [pc, #268]	; (80098a0 <lfs_bd_prog+0x150>)
 8009794:	4a40      	ldr	r2, [pc, #256]	; (8009898 <lfs_bd_prog+0x148>)
 8009796:	21cd      	movs	r1, #205	; 0xcd
 8009798:	4840      	ldr	r0, [pc, #256]	; (800989c <lfs_bd_prog+0x14c>)
 800979a:	f015 fe0b 	bl	801f3b4 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d151      	bne.n	800984c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80097ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d34c      	bcc.n	800984c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097bc:	4413      	add	r3, r2
                off >= pcache->off &&
 80097be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d243      	bcs.n	800984c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	6859      	ldr	r1, [r3, #4]
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80097d2:	4413      	add	r3, r2
 80097d4:	4619      	mov	r1, r3
 80097d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80097d8:	f7ff fc98 	bl	800910c <lfs_min>
 80097dc:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	68da      	ldr	r2, [r3, #12]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097e8:	1acb      	subs	r3, r1, r3
 80097ea:	4413      	add	r3, r2
 80097ec:	69ba      	ldr	r2, [r7, #24]
 80097ee:	69f9      	ldr	r1, [r7, #28]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f016 fac0 	bl	801fd76 <memcpy>

            data += diff;
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	4413      	add	r3, r2
 80097fc:	61fb      	str	r3, [r7, #28]
            off += diff;
 80097fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	4413      	add	r3, r2
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8009806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	6898      	ldr	r0, [r3, #8]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	4619      	mov	r1, r3
 800981c:	f7ff fc66 	bl	80090ec <lfs_max>
 8009820:	4602      	mov	r2, r0
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	689a      	ldr	r2, [r3, #8]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800982e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009830:	429a      	cmp	r2, r3
 8009832:	d126      	bne.n	8009882 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	68b9      	ldr	r1, [r7, #8]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f7ff fed8 	bl	80095f0 <lfs_bd_flush>
 8009840:	6178      	str	r0, [r7, #20]
                if (err) {
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d01c      	beq.n	8009882 <lfs_bd_prog+0x132>
                    return err;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	e01e      	b.n	800988a <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009854:	d005      	beq.n	8009862 <lfs_bd_prog+0x112>
 8009856:	4b13      	ldr	r3, [pc, #76]	; (80098a4 <lfs_bd_prog+0x154>)
 8009858:	4a0f      	ldr	r2, [pc, #60]	; (8009898 <lfs_bd_prog+0x148>)
 800985a:	21ea      	movs	r1, #234	; 0xea
 800985c:	480f      	ldr	r0, [pc, #60]	; (800989c <lfs_bd_prog+0x14c>)
 800985e:	f015 fda9 	bl	801f3b4 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009866:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	4619      	mov	r1, r3
 8009870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009872:	f7ff fc5b 	bl	800912c <lfs_aligndown>
 8009876:	4602      	mov	r2, r0
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2200      	movs	r2, #0
 8009880:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8009882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009884:	2b00      	cmp	r3, #0
 8009886:	d18a      	bne.n	800979e <lfs_bd_prog+0x4e>
    }

    return 0;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3720      	adds	r7, #32
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	08020d8c 	.word	0x08020d8c
 8009898:	08025000 	.word	0x08025000
 800989c:	08020d2c 	.word	0x08020d2c
 80098a0:	08020dc8 	.word	0x08020dc8
 80098a4:	08020dec 	.word	0x08020dec

080098a8 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d305      	bcc.n	80098ca <lfs_bd_erase+0x22>
 80098be:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <lfs_bd_erase+0x50>)
 80098c0:	4a0e      	ldr	r2, [pc, #56]	; (80098fc <lfs_bd_erase+0x54>)
 80098c2:	21f8      	movs	r1, #248	; 0xf8
 80098c4:	480e      	ldr	r0, [pc, #56]	; (8009900 <lfs_bd_erase+0x58>)
 80098c6:	f015 fd75 	bl	801f3b4 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	4610      	mov	r0, r2
 80098d8:	4798      	blx	r3
 80098da:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	dd05      	ble.n	80098ee <lfs_bd_erase+0x46>
 80098e2:	4b08      	ldr	r3, [pc, #32]	; (8009904 <lfs_bd_erase+0x5c>)
 80098e4:	4a05      	ldr	r2, [pc, #20]	; (80098fc <lfs_bd_erase+0x54>)
 80098e6:	21fa      	movs	r1, #250	; 0xfa
 80098e8:	4805      	ldr	r0, [pc, #20]	; (8009900 <lfs_bd_erase+0x58>)
 80098ea:	f015 fd63 	bl	801f3b4 <__assert_func>
    return err;
 80098ee:	68fb      	ldr	r3, [r7, #12]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	08020d0c 	.word	0x08020d0c
 80098fc:	0802500c 	.word	0x0802500c
 8009900:	08020d2c 	.word	0x08020d2c
 8009904:	08020d58 	.word	0x08020d58

08009908 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	685a      	ldr	r2, [r3, #4]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	3304      	adds	r3, #4
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	601a      	str	r2, [r3, #0]
}
 8009926:	bf00      	nop
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009942:	d005      	beq.n	8009950 <lfs_pair_isnull+0x1e>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3304      	adds	r3, #4
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800994e:	d101      	bne.n	8009954 <lfs_pair_isnull+0x22>
 8009950:	2301      	movs	r3, #1
 8009952:	e000      	b.n	8009956 <lfs_pair_isnull+0x24>
 8009954:	2300      	movs	r3, #0
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	b2db      	uxtb	r3, r3
}
 800995c:	4618      	mov	r0, r3
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	429a      	cmp	r2, r3
 800997c:	d017      	beq.n	80099ae <lfs_pair_cmp+0x46>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3304      	adds	r3, #4
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	3304      	adds	r3, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d00f      	beq.n	80099ae <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	3304      	adds	r3, #4
 8009996:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8009998:	429a      	cmp	r2, r3
 800999a:	d008      	beq.n	80099ae <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3304      	adds	r3, #4
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d001      	beq.n	80099ae <lfs_pair_cmp+0x46>
 80099aa:	2301      	movs	r3, #1
 80099ac:	e000      	b.n	80099b0 <lfs_pair_cmp+0x48>
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <lfs_pair_sync>:

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d107      	bne.n	80099e2 <lfs_pair_sync+0x26>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	3304      	adds	r3, #4
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	3304      	adds	r3, #4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d00d      	beq.n	80099fe <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	3304      	adds	r3, #4
 80099ea:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d108      	bne.n	8009a02 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3304      	adds	r3, #4
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d101      	bne.n	8009a02 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80099fe:	2301      	movs	r3, #1
 8009a00:	e000      	b.n	8009a04 <lfs_pair_sync+0x48>
 8009a02:	2300      	movs	r3, #0
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	b2db      	uxtb	r3, r3
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8009a16:	b590      	push	{r4, r7, lr}
 8009a18:	b083      	sub	sp, #12
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff fbe2 	bl	80091ec <lfs_fromle32>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3304      	adds	r3, #4
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	1d1c      	adds	r4, r3, #4
 8009a38:	4610      	mov	r0, r2
 8009a3a:	f7ff fbd7 	bl	80091ec <lfs_fromle32>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	6023      	str	r3, [r4, #0]
}
 8009a42:	bf00      	nop
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd90      	pop	{r4, r7, pc}

08009a4a <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8009a4a:	b590      	push	{r4, r7, lr}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff fbd3 	bl	8009202 <lfs_tole32>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	3304      	adds	r3, #4
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	1d1c      	adds	r4, r3, #4
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	f7ff fbc8 	bl	8009202 <lfs_tole32>
 8009a72:	4603      	mov	r3, r0
 8009a74:	6023      	str	r3, [r4, #0]
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd90      	pop	{r4, r7, pc}

08009a7e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	0fdb      	lsrs	r3, r3, #31
 8009a8c:	b2db      	uxtb	r3, r3
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	059b      	lsls	r3, r3, #22
 8009aa6:	159b      	asrs	r3, r3, #22
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aac:	bf0c      	ite	eq
 8009aae:	2301      	moveq	r3, #1
 8009ab0:	2300      	movne	r3, #0
 8009ab2:	b2db      	uxtb	r3, r3
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	0d1b      	lsrs	r3, r3, #20
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ad2:	b29b      	uxth	r3, r3
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	0d1b      	lsrs	r3, r3, #20
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009af2:	b29b      	uxth	r3, r3
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	0d1b      	lsrs	r3, r3, #20
 8009b0c:	b2db      	uxtb	r3, r3
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff ffec 	bl	8009b00 <lfs_tag_chunk>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	b25b      	sxtb	r3, r3
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	0a9b      	lsrs	r3, r3, #10
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b46:	b29b      	uxth	r3, r3
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff ff8f 	bl	8009a9a <lfs_tag_isdelete>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4413      	add	r3, r2
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7ff ffe5 	bl	8009b54 <lfs_tag_size>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	3304      	adds	r3, #4
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8009b96:	b480      	push	{r7}
 8009b98:	b085      	sub	sp, #20
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e012      	b.n	8009bcc <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	6819      	ldr	r1, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	4403      	add	r3, r0
 8009bc2:	404a      	eors	r2, r1
 8009bc4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	dde9      	ble.n	8009ba6 <lfs_gstate_xor+0x10>
    }
}
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	e00b      	b.n	8009c06 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <lfs_gstate_iszero+0x20>
            return false;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	e006      	b.n	8009c0e <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	3301      	adds	r3, #1
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	ddf0      	ble.n	8009bee <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8009c0c:	2301      	movs	r3, #1
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff ff94 	bl	8009b54 <lfs_tag_size>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bf14      	ite	ne
 8009c32:	2301      	movne	r3, #1
 8009c34:	2300      	moveq	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7ff ff81 	bl	8009b54 <lfs_tag_size>
 8009c52:	4603      	mov	r3, r0
 8009c54:	b2db      	uxtb	r3, r3
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff ff28 	bl	8009ac0 <lfs_tag_type1>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	bf14      	ite	ne
 8009c76:	2301      	movne	r3, #1
 8009c78:	2300      	moveq	r3, #0
 8009c7a:	b2db      	uxtb	r3, r3
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7ff ff14 	bl	8009ac0 <lfs_tag_type1>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <lfs_gstate_hasmovehere+0x30>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fe5f 	bl	8009968 <lfs_pair_cmp>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d101      	bne.n	8009cb4 <lfs_gstate_hasmovehere+0x30>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e000      	b.n	8009cb6 <lfs_gstate_hasmovehere+0x32>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	b2db      	uxtb	r3, r3
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff fa8b 	bl	80091ec <lfs_fromle32>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff fa83 	bl	80091ec <lfs_fromle32>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff fa7b 	bl	80091ec <lfs_fromle32>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	609a      	str	r2, [r3, #8]
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7ff fa76 	bl	8009202 <lfs_tole32>
 8009d16:	4602      	mov	r2, r0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff fa6e 	bl	8009202 <lfs_tole32>
 8009d26:	4602      	mov	r2, r0
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff fa66 	bl	8009202 <lfs_tole32>
 8009d36:	4602      	mov	r2, r0
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	609a      	str	r2, [r3, #8]
}
 8009d3c:	bf00      	nop
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7ff fa4b 	bl	80091ec <lfs_fromle32>
 8009d56:	4602      	mov	r2, r0
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff fa43 	bl	80091ec <lfs_fromle32>
 8009d66:	4602      	mov	r2, r0
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	605a      	str	r2, [r3, #4]
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <lfs_superblock_fromle32>:
    ctz->head = lfs_tole32(ctz->head);
    ctz->size = lfs_tole32(ctz->size);
}
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fa33 	bl	80091ec <lfs_fromle32>
 8009d86:	4602      	mov	r2, r0
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff fa2b 	bl	80091ec <lfs_fromle32>
 8009d96:	4602      	mov	r2, r0
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7ff fa23 	bl	80091ec <lfs_fromle32>
 8009da6:	4602      	mov	r2, r0
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff fa1b 	bl	80091ec <lfs_fromle32>
 8009db6:	4602      	mov	r2, r0
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff fa13 	bl	80091ec <lfs_fromle32>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff fa0b 	bl	80091ec <lfs_fromle32>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	615a      	str	r2, [r3, #20]
}
 8009ddc:	bf00      	nop
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fa06 	bl	8009202 <lfs_tole32>
 8009df6:	4602      	mov	r2, r0
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7ff f9fe 	bl	8009202 <lfs_tole32>
 8009e06:	4602      	mov	r2, r0
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff f9f6 	bl	8009202 <lfs_tole32>
 8009e16:	4602      	mov	r2, r0
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff f9ee 	bl	8009202 <lfs_tole32>
 8009e26:	4602      	mov	r2, r0
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff f9e6 	bl	8009202 <lfs_tole32>
 8009e36:	4602      	mov	r2, r0
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7ff f9de 	bl	8009202 <lfs_tole32>
 8009e46:	4602      	mov	r2, r0
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	615a      	str	r2, [r3, #20]
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e70:	4413      	add	r3, r2
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009e76:	6a92      	ldr	r2, [r2, #40]	; 0x28
    lfs_block_t off = ((block - lfs->free.off)
 8009e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e7c:	fb01 f202 	mul.w	r2, r1, r2
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d212      	bcs.n	8009eb4 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	095b      	lsrs	r3, r3, #5
 8009e96:	009a      	lsls	r2, r3, #2
 8009e98:	440a      	add	r2, r1
 8009e9a:	6811      	ldr	r1, [r2, #0]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	f002 021f 	and.w	r2, r2, #31
 8009ea2:	2001      	movs	r0, #1
 8009ea4:	fa00 f202 	lsl.w	r2, r0, r2
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4403      	add	r3, r0
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff ffe4 	bl	8009ec2 <lfs_alloc_ack>
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af02      	add	r7, sp, #8
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8009f0e:	e04f      	b.n	8009fb0 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f14:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f24:	1e5a      	subs	r2, r3, #1
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	095b      	lsrs	r3, r3, #5
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f003 031f 	and.w	r3, r3, #31
 8009f3e:	2101      	movs	r1, #1
 8009f40:	fa01 f303 	lsl.w	r3, r1, r3
 8009f44:	4013      	ands	r3, r2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d132      	bne.n	8009fb0 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	4413      	add	r3, r2
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009f56:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009f58:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f5c:	fb01 f202 	mul.w	r2, r1, r2
 8009f60:	1a9a      	subs	r2, r3, r2
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8009f66:	e009      	b.n	8009f7c <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f76:	1e5a      	subs	r2, r3, #1
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d011      	beq.n	8009fac <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f90:	095b      	lsrs	r3, r3, #5
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f9c:	f003 031f 	and.w	r3, r3, #31
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa6:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1dd      	bne.n	8009f68 <lfs_alloc+0x64>
                }

                return 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	e050      	b.n	800a052 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d1a9      	bne.n	8009f10 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10f      	bne.n	8009fe4 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fcc:	4413      	add	r3, r2
 8009fce:	4a23      	ldr	r2, [pc, #140]	; (800a05c <lfs_alloc+0x158>)
 8009fd0:	9200      	str	r2, [sp, #0]
 8009fd2:	f44f 720d 	mov.w	r2, #564	; 0x234
 8009fd6:	4922      	ldr	r1, [pc, #136]	; (800a060 <lfs_alloc+0x15c>)
 8009fd8:	4822      	ldr	r0, [pc, #136]	; (800a064 <lfs_alloc+0x160>)
 8009fda:	f015 fc67 	bl	801f8ac <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8009fde:	f06f 031b 	mvn.w	r3, #27
 8009fe2:	e036      	b.n	800a052 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fec:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009ff2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009ff4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ff8:	fb01 f202 	mul.w	r2, r1, r2
 8009ffc:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a008:	00da      	lsls	r2, r3, #3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a00e:	4619      	mov	r1, r3
 800a010:	4610      	mov	r0, r2
 800a012:	f7ff f87b 	bl	800910c <lfs_min>
 800a016:	4602      	mov	r2, r0
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02c:	461a      	mov	r2, r3
 800a02e:	2100      	movs	r1, #0
 800a030:	f015 fd92 	bl	801fb58 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800a034:	2301      	movs	r3, #1
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	490b      	ldr	r1, [pc, #44]	; (800a068 <lfs_alloc+0x164>)
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f003 fe5a 	bl	800dcf4 <lfs_fs_rawtraverse>
 800a040:	60f8      	str	r0, [r7, #12]
        if (err) {
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	f43f af62 	beq.w	8009f0e <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff ff48 	bl	8009ee0 <lfs_alloc_drop>
            return err;
 800a050:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	08020e38 	.word	0x08020e38
 800a060:	08020d2c 	.word	0x08020d2c
 800a064:	08020e10 	.word	0x08020e10
 800a068:	08009e55 	.word	0x08009e55

0800a06c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b08f      	sub	sp, #60	; 0x3c
 800a070:	af04      	add	r7, sp, #16
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	333c      	adds	r3, #60	; 0x3c
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f7ff fdf6 	bl	8009c84 <lfs_gstate_hasmovehere>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 80ba 	beq.w	800a214 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff fd47 	bl	8009b34 <lfs_tag_id>
 800a0a6:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 80b3 	beq.w	800a214 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7ff fd3e 	bl	8009b34 <lfs_tag_id>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	461c      	mov	r4, r3
 800a0bc:	6838      	ldr	r0, [r7, #0]
 800a0be:	f7ff fd39 	bl	8009b34 <lfs_tag_id>
 800a0c2:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800a0c4:	429c      	cmp	r4, r3
 800a0c6:	f200 80a5 	bhi.w	800a214 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800a0d0:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800a0d2:	e09f      	b.n	800a214 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7ff fd49 	bl	8009b6e <lfs_tag_dsize>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800a0e8:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800a0ee:	2204      	movs	r2, #4
 800a0f0:	9203      	str	r2, [sp, #12]
 800a0f2:	f107 0210 	add.w	r2, r7, #16
 800a0f6:	9202      	str	r2, [sp, #8]
 800a0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fa:	9201      	str	r2, [sp, #4]
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	2304      	movs	r3, #4
 800a100:	460a      	mov	r2, r1
 800a102:	2100      	movs	r1, #0
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7ff f8dd 	bl	80092c4 <lfs_bd_read>
 800a10a:	61b8      	str	r0, [r7, #24]
        if (err) {
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <lfs_dir_getslice+0xaa>
            return err;
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	e08a      	b.n	800a22c <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff f87e 	bl	800921a <lfs_frombe32>
 800a11e:	4602      	mov	r2, r0
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	4053      	eors	r3, r2
 800a124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a128:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff fd02 	bl	8009b34 <lfs_tag_id>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d02b      	beq.n	800a18e <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a136:	69f8      	ldr	r0, [r7, #28]
 800a138:	f7ff fcc2 	bl	8009ac0 <lfs_tag_type1>
 800a13c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800a13e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a142:	d124      	bne.n	800a18e <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800a144:	69f8      	ldr	r0, [r7, #28]
 800a146:	f7ff fcf5 	bl	8009b34 <lfs_tag_id>
 800a14a:	4603      	mov	r3, r0
 800a14c:	461c      	mov	r4, r3
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	4618      	mov	r0, r3
 800a156:	f7ff fced 	bl	8009b34 <lfs_tag_id>
 800a15a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a15c:	429c      	cmp	r4, r3
 800a15e:	d816      	bhi.n	800a18e <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	1ad2      	subs	r2, r2, r3
 800a166:	4b33      	ldr	r3, [pc, #204]	; (800a234 <lfs_dir_getslice+0x1c8>)
 800a168:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800a16a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a16e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	429a      	cmp	r2, r3
 800a176:	d102      	bne.n	800a17e <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 800a178:	f06f 0301 	mvn.w	r3, #1
 800a17c:	e056      	b.n	800a22c <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a17e:	69f8      	ldr	r0, [r7, #28]
 800a180:	f7ff fccb 	bl	8009b1a <lfs_tag_splice>
 800a184:	4603      	mov	r3, r0
 800a186:	029a      	lsls	r2, r3, #10
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	4413      	add	r3, r2
 800a18c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	401a      	ands	r2, r3
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	1ac9      	subs	r1, r1, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	400b      	ands	r3, r1
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d138      	bne.n	800a214 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 800a1a2:	69f8      	ldr	r0, [r7, #28]
 800a1a4:	f7ff fc79 	bl	8009a9a <lfs_tag_isdelete>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 800a1ae:	f06f 0301 	mvn.w	r3, #1
 800a1b2:	e03b      	b.n	800a22c <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800a1b4:	69f8      	ldr	r0, [r7, #28]
 800a1b6:	f7ff fccd 	bl	8009b54 <lfs_tag_size>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe ffa4 	bl	800910c <lfs_min>
 800a1c4:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800a1c6:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1d0:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800a1d2:	3204      	adds	r2, #4
 800a1d4:	6979      	ldr	r1, [r7, #20]
 800a1d6:	9103      	str	r1, [sp, #12]
 800a1d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1da:	9102      	str	r1, [sp, #8]
 800a1dc:	9201      	str	r2, [sp, #4]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff f86c 	bl	80092c4 <lfs_bd_read>
 800a1ec:	61b8      	str	r0, [r7, #24]
            if (err) {
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <lfs_dir_getslice+0x18c>
                return err;
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	e019      	b.n	800a22c <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800a1f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	18d0      	adds	r0, r2, r3
 800a1fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	461a      	mov	r2, r3
 800a206:	2100      	movs	r1, #0
 800a208:	f015 fca6 	bl	801fb58 <memset>

            return tag + gdiff;
 800a20c:	6a3a      	ldr	r2, [r7, #32]
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	4413      	add	r3, r2
 800a212:	e00b      	b.n	800a22c <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fca9 	bl	8009b6e <lfs_tag_dsize>
 800a21c:	4603      	mov	r3, r0
 800a21e:	3304      	adds	r3, #4
 800a220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a222:	429a      	cmp	r2, r3
 800a224:	f4bf af56 	bcs.w	800a0d4 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800a228:	f06f 0301 	mvn.w	r3, #1
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	372c      	adds	r7, #44	; 0x2c
 800a230:	46bd      	mov	sp, r7
 800a232:	bd90      	pop	{r4, r7, pc}
 800a234:	000ffc00 	.word	0x000ffc00

0800a238 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af04      	add	r7, sp, #16
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800a246:	6838      	ldr	r0, [r7, #0]
 800a248:	f7ff fc84 	bl	8009b54 <lfs_tag_size>
 800a24c:	4603      	mov	r3, r0
 800a24e:	9302      	str	r3, [sp, #8]
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	2300      	movs	r3, #0
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	68b9      	ldr	r1, [r7, #8]
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7ff ff04 	bl	800a06c <lfs_dir_getslice>
 800a264:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800a26e:	b580      	push	{r7, lr}
 800a270:	b08c      	sub	sp, #48	; 0x30
 800a272:	af04      	add	r7, sp, #16
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
 800a27a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800a280:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a284:	441a      	add	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	429a      	cmp	r2, r3
 800a28e:	f240 80c0 	bls.w	800a412 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800a292:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a296:	e0c1      	b.n	800a41c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800a298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a29a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d03f      	beq.n	800a322 <lfs_dir_getread+0xb4>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f113 0f02 	cmn.w	r3, #2
 800a2aa:	d13a      	bne.n	800a322 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800a2b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d232      	bcs.n	800a322 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d324      	bcc.n	800a310 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6859      	ldr	r1, [r3, #4]
 800a2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d0:	1acb      	subs	r3, r1, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	69b8      	ldr	r0, [r7, #24]
 800a2d8:	f7fe ff18 	bl	800910c <lfs_min>
 800a2dc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2e8:	1acb      	subs	r3, r1, r3
 800a2ea:	4413      	add	r3, r2
 800a2ec:	69ba      	ldr	r2, [r7, #24]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	69f8      	ldr	r0, [r7, #28]
 800a2f2:	f015 fd40 	bl	801fd76 <memcpy>

                data += diff;
 800a2f6:	69fa      	ldr	r2, [r7, #28]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	61fb      	str	r3, [r7, #28]
                off += diff;
 800a2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	4413      	add	r3, r2
 800a304:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800a306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800a30e:	e080      	b.n	800a412 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685a      	ldr	r2, [r3, #4]
 800a314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	4619      	mov	r1, r3
 800a31a:	69b8      	ldr	r0, [r7, #24]
 800a31c:	f7fe fef6 	bl	800910c <lfs_min>
 800a320:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f113 0f02 	cmn.w	r3, #2
 800a32a:	d13a      	bne.n	800a3a2 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800a336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a338:	429a      	cmp	r2, r3
 800a33a:	d232      	bcs.n	800a3a2 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a342:	429a      	cmp	r2, r3
 800a344:	d324      	bcc.n	800a390 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	689a      	ldr	r2, [r3, #8]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6859      	ldr	r1, [r3, #4]
 800a34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a350:	1acb      	subs	r3, r1, r3
 800a352:	4413      	add	r3, r2
 800a354:	4619      	mov	r1, r3
 800a356:	69b8      	ldr	r0, [r7, #24]
 800a358:	f7fe fed8 	bl	800910c <lfs_min>
 800a35c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a368:	1acb      	subs	r3, r1, r3
 800a36a:	4413      	add	r3, r2
 800a36c:	69ba      	ldr	r2, [r7, #24]
 800a36e:	4619      	mov	r1, r3
 800a370:	69f8      	ldr	r0, [r7, #28]
 800a372:	f015 fd00 	bl	801fd76 <memcpy>

                data += diff;
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	4413      	add	r3, r2
 800a37c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800a37e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	4413      	add	r3, r2
 800a384:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800a386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800a38e:	e040      	b.n	800a412 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	4619      	mov	r1, r3
 800a39a:	69b8      	ldr	r0, [r7, #24]
 800a39c:	f7fe feb6 	bl	800910c <lfs_min>
 800a3a0:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	f06f 0201 	mvn.w	r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a3b4:	f7fe feba 	bl	800912c <lfs_aligndown>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a3be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	441a      	add	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	f7fe fec2 	bl	8009156 <lfs_alignup>
 800a3d2:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4610      	mov	r0, r2
 800a3de:	f7fe fe95 	bl	800910c <lfs_min>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6889      	ldr	r1, [r1, #8]
 800a3f4:	9102      	str	r1, [sp, #8]
 800a3f6:	9201      	str	r2, [sp, #4]
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3fe:	68b9      	ldr	r1, [r7, #8]
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff fe33 	bl	800a06c <lfs_dir_getslice>
 800a406:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	da01      	bge.n	800a412 <lfs_dir_getread+0x1a4>
            return err;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	e004      	b.n	800a41c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800a412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a414:	2b00      	cmp	r3, #0
 800a416:	f47f af3f 	bne.w	800a298 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3720      	adds	r7, #32
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800a424:	b590      	push	{r4, r7, lr}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <lfs_dir_traverse_filter+0x1e>
 800a43e:	4b23      	ldr	r3, [pc, #140]	; (800a4cc <lfs_dir_traverse_filter+0xa8>)
 800a440:	e000      	b.n	800a444 <lfs_dir_traverse_filter+0x20>
 800a442:	4b23      	ldr	r3, [pc, #140]	; (800a4d0 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800a444:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	405a      	eors	r2, r3
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	4013      	ands	r3, r2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d014      	beq.n	800a480 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f7ff fb1d 	bl	8009a9a <lfs_tag_isdelete>
 800a460:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10c      	bne.n	800a480 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	4a18      	ldr	r2, [pc, #96]	; (800a4cc <lfs_dir_traverse_filter+0xa8>)
 800a46a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	6819      	ldr	r1, [r3, #0]
 800a470:	4b18      	ldr	r3, [pc, #96]	; (800a4d4 <lfs_dir_traverse_filter+0xb0>)
 800a472:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a474:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a478:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d101      	bne.n	800a484 <lfs_dir_traverse_filter+0x60>
        return true;
 800a480:	2301      	movs	r3, #1
 800a482:	e01e      	b.n	800a4c2 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a484:	68b8      	ldr	r0, [r7, #8]
 800a486:	f7ff fb1b 	bl	8009ac0 <lfs_tag_type1>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a490:	d116      	bne.n	800a4c0 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800a492:	68b8      	ldr	r0, [r7, #8]
 800a494:	f7ff fb4e 	bl	8009b34 <lfs_tag_id>
 800a498:	4603      	mov	r3, r0
 800a49a:	461c      	mov	r4, r3
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7ff fb47 	bl	8009b34 <lfs_tag_id>
 800a4a6:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a4a8:	429c      	cmp	r4, r3
 800a4aa:	d809      	bhi.n	800a4c0 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a4ac:	68b8      	ldr	r0, [r7, #8]
 800a4ae:	f7ff fb34 	bl	8009b1a <lfs_tag_splice>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	029a      	lsls	r2, r3, #10
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	441a      	add	r2, r3
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	601a      	str	r2, [r3, #0]
    }

    return false;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	371c      	adds	r7, #28
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd90      	pop	{r4, r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	7ffffc00 	.word	0x7ffffc00
 800a4d0:	700ffc00 	.word	0x700ffc00
 800a4d4:	000ffc00 	.word	0x000ffc00

0800a4d8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a4d8:	b590      	push	{r4, r7, lr}
 800a4da:	b09d      	sub	sp, #116	; 0x74
 800a4dc:	af0a      	add	r7, sp, #40	; 0x28
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800a4e6:	6838      	ldr	r0, [r7, #0]
 800a4e8:	f7ff fb41 	bl	8009b6e <lfs_tag_dsize>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	441a      	add	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d233      	bcs.n	800a562 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 800a4fa:	6838      	ldr	r0, [r7, #0]
 800a4fc:	f7ff fb37 	bl	8009b6e <lfs_tag_dsize>
 800a500:	4602      	mov	r2, r0
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4413      	add	r3, r2
 800a506:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 800a508:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	681b      	ldr	r3, [r3, #0]
            int err = lfs_bd_read(lfs,
 800a50e:	2204      	movs	r2, #4
 800a510:	9203      	str	r2, [sp, #12]
 800a512:	f107 021c 	add.w	r2, r7, #28
 800a516:	9202      	str	r2, [sp, #8]
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	9201      	str	r2, [sp, #4]
 800a51c:	9300      	str	r3, [sp, #0]
 800a51e:	2304      	movs	r3, #4
 800a520:	460a      	mov	r2, r1
 800a522:	2100      	movs	r1, #0
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7fe fecd 	bl	80092c4 <lfs_bd_read>
 800a52a:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (err) {
 800a52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <lfs_dir_traverse+0x5e>
                return err;
 800a532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a534:	e11e      	b.n	800a774 <lfs_dir_traverse+0x29c>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fe6e 	bl	800921a <lfs_frombe32>
 800a53e:	4602      	mov	r2, r0
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	4053      	eors	r3, r2
 800a544:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a548:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3304      	adds	r3, #4
 800a554:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 800a556:	f107 0314 	add.w	r3, r7, #20
 800a55a:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	e011      	b.n	800a586 <lfs_dir_traverse+0xae>
        } else if (attrcount > 0) {
 800a562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a564:	2b00      	cmp	r3, #0
 800a566:	dd0c      	ble.n	800a582 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 800a568:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 800a56e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 800a574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a576:	3308      	adds	r3, #8
 800a578:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 800a57a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a57c:	3b01      	subs	r3, #1
 800a57e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a580:	e001      	b.n	800a586 <lfs_dir_traverse+0xae>
        } else {
            return 0;
 800a582:	2300      	movs	r3, #0
 800a584:	e0f6      	b.n	800a774 <lfs_dir_traverse+0x29c>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800a586:	4b7d      	ldr	r3, [pc, #500]	; (800a77c <lfs_dir_traverse+0x2a4>)
 800a588:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800a58a:	69fa      	ldr	r2, [r7, #28]
 800a58c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a58e:	405a      	eors	r2, r3
 800a590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a594:	400b      	ands	r3, r1
 800a596:	4013      	ands	r3, r2
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f040 80e5 	bne.w	800a768 <lfs_dir_traverse+0x290>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 800a59e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a5a0:	f7ff fac8 	bl	8009b34 <lfs_tag_id>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d038      	beq.n	800a61c <lfs_dir_traverse+0x144>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 800a5aa:	f107 031c 	add.w	r3, r7, #28
 800a5ae:	9308      	str	r3, [sp, #32]
 800a5b0:	4b73      	ldr	r3, [pc, #460]	; (800a780 <lfs_dir_traverse+0x2a8>)
 800a5b2:	9307      	str	r3, [sp, #28]
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9306      	str	r3, [sp, #24]
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	9305      	str	r3, [sp, #20]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	9303      	str	r3, [sp, #12]
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9302      	str	r3, [sp, #8]
 800a5c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5ca:	9301      	str	r3, [sp, #4]
 800a5cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	68b9      	ldr	r1, [r7, #8]
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff ff7e 	bl	800a4d8 <lfs_dir_traverse>
 800a5dc:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 800a5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	da01      	bge.n	800a5e8 <lfs_dir_traverse+0x110>
                return filter;
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e6:	e0c5      	b.n	800a774 <lfs_dir_traverse+0x29c>
            }

            if (filter) {
 800a5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f040 80be 	bne.w	800a76c <lfs_dir_traverse+0x294>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff fa9e 	bl	8009b34 <lfs_tag_id>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a600:	4293      	cmp	r3, r2
 800a602:	f200 80b5 	bhi.w	800a770 <lfs_dir_traverse+0x298>
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fa93 	bl	8009b34 <lfs_tag_id>
 800a60e:	4603      	mov	r3, r0
 800a610:	461a      	mov	r2, r3
 800a612:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a616:	4293      	cmp	r3, r2
 800a618:	f240 80aa 	bls.w	800a770 <lfs_dir_traverse+0x298>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7ff fa5e 	bl	8009ae0 <lfs_tag_type3>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	f43f af5d 	beq.w	800a4e6 <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff fa56 	bl	8009ae0 <lfs_tag_type3>
 800a634:	4603      	mov	r3, r0
 800a636:	461a      	mov	r2, r3
 800a638:	f240 1301 	movw	r3, #257	; 0x101
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d136      	bne.n	800a6ae <lfs_dir_traverse+0x1d6>
            uint16_t fromid = lfs_tag_size(tag);
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fa86 	bl	8009b54 <lfs_tag_size>
 800a648:	4603      	mov	r3, r0
 800a64a:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	4618      	mov	r0, r3
 800a650:	f7ff fa70 	bl	8009b34 <lfs_tag_id>
 800a654:	4603      	mov	r3, r0
 800a656:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 800a658:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a65a:	3301      	adds	r3, #1
 800a65c:	b29b      	uxth	r3, r3
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 800a65e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800a660:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a662:	1a8a      	subs	r2, r1, r2
 800a664:	b291      	uxth	r1, r2
 800a666:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800a66a:	440a      	add	r2, r1
 800a66c:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 800a66e:	b212      	sxth	r2, r2
 800a670:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a672:	9108      	str	r1, [sp, #32]
 800a674:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a676:	9107      	str	r1, [sp, #28]
 800a678:	9206      	str	r2, [sp, #24]
 800a67a:	9305      	str	r3, [sp, #20]
 800a67c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a684:	9303      	str	r3, [sp, #12]
 800a686:	4b3f      	ldr	r3, [pc, #252]	; (800a784 <lfs_dir_traverse+0x2ac>)
 800a688:	9302      	str	r3, [sp, #8]
 800a68a:	2300      	movs	r3, #0
 800a68c:	9301      	str	r3, [sp, #4]
 800a68e:	2300      	movs	r3, #0
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a696:	2200      	movs	r2, #0
 800a698:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff ff1c 	bl	800a4d8 <lfs_dir_traverse>
 800a6a0:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f43f af1e 	beq.w	800a4e6 <lfs_dir_traverse+0xe>
                return err;
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	e062      	b.n	800a774 <lfs_dir_traverse+0x29c>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7ff fa15 	bl	8009ae0 <lfs_tag_type3>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800a6bc:	d144      	bne.n	800a748 <lfs_dir_traverse+0x270>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a6be:	2300      	movs	r3, #0
 800a6c0:	643b      	str	r3, [r7, #64]	; 0x40
 800a6c2:	e038      	b.n	800a736 <lfs_dir_traverse+0x25e>
                const struct lfs_attr *a = buffer;
 800a6c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a6c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	4413      	add	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d6:	4413      	add	r3, r2
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a6de:	051c      	lsls	r4, r3, #20
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff fa26 	bl	8009b34 <lfs_tag_id>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800a6f0:	4413      	add	r3, r2
 800a6f2:	029b      	lsls	r3, r3, #10
 800a6f4:	ea44 0103 	orr.w	r1, r4, r3
 800a6f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	005b      	lsls	r3, r3, #1
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	461a      	mov	r2, r3
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	4413      	add	r3, r2
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800a70c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a70e:	4613      	mov	r3, r2
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	4413      	add	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	461a      	mov	r2, r3
 800a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71a:	4413      	add	r3, r2
 800a71c:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a71e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a720:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a722:	4798      	blx	r3
 800a724:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 800a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d001      	beq.n	800a730 <lfs_dir_traverse+0x258>
                    return err;
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	e021      	b.n	800a774 <lfs_dir_traverse+0x29c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a732:	3301      	adds	r3, #1
 800a734:	643b      	str	r3, [r7, #64]	; 0x40
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff fa0b 	bl	8009b54 <lfs_tag_size>
 800a73e:	4602      	mov	r2, r0
 800a740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a742:	4293      	cmp	r3, r2
 800a744:	d3be      	bcc.n	800a6c4 <lfs_dir_traverse+0x1ec>
 800a746:	e6ce      	b.n	800a4e6 <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800a748:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800a74c:	029a      	lsls	r2, r3, #10
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	18d1      	adds	r1, r2, r3
 800a752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a754:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a756:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a758:	4798      	blx	r3
 800a75a:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f43f aec1 	beq.w	800a4e6 <lfs_dir_traverse+0xe>
                return err;
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	e005      	b.n	800a774 <lfs_dir_traverse+0x29c>
            continue;
 800a768:	bf00      	nop
 800a76a:	e6bc      	b.n	800a4e6 <lfs_dir_traverse+0xe>
                continue;
 800a76c:	bf00      	nop
 800a76e:	e6ba      	b.n	800a4e6 <lfs_dir_traverse+0xe>
                continue;
 800a770:	bf00      	nop
    while (true) {
 800a772:	e6b8      	b.n	800a4e6 <lfs_dir_traverse+0xe>
            }
        }
    }
}
 800a774:	4618      	mov	r0, r3
 800a776:	374c      	adds	r7, #76	; 0x4c
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd90      	pop	{r4, r7, pc}
 800a77c:	7ff00000 	.word	0x7ff00000
 800a780:	0800a425 	.word	0x0800a425
 800a784:	600ffc00 	.word	0x600ffc00

0800a788 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a788:	b590      	push	{r4, r7, lr}
 800a78a:	b09f      	sub	sp, #124	; 0x7c
 800a78c:	af04      	add	r7, sp, #16
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800a796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a79a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d207      	bcs.n	800a7ba <lfs_dir_fetchmatch+0x32>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	3304      	adds	r3, #4
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d302      	bcc.n	800a7c0 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800a7ba:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a7be:	e340      	b.n	800ae42 <lfs_dir_fetchmatch+0x6ba>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	633b      	str	r3, [r7, #48]	; 0x30
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7d0:	e052      	b.n	800a878 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800a7d2:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a7d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800a7dc:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a7de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a7e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7e4:	0092      	lsls	r2, r2, #2
 800a7e6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800a7e8:	2104      	movs	r1, #4
 800a7ea:	9103      	str	r1, [sp, #12]
 800a7ec:	9202      	str	r2, [sp, #8]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	9201      	str	r2, [sp, #4]
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f7fe fd62 	bl	80092c4 <lfs_bd_read>
 800a800:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800a802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	3368      	adds	r3, #104	; 0x68
 800a808:	443b      	add	r3, r7
 800a80a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe fcec 	bl	80091ec <lfs_fromle32>
 800a814:	4602      	mov	r2, r0
 800a816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	3368      	adds	r3, #104	; 0x68
 800a81c:	443b      	add	r3, r7
 800a81e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800a822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a824:	2b00      	cmp	r3, #0
 800a826:	d005      	beq.n	800a834 <lfs_dir_fetchmatch+0xac>
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a82e:	d001      	beq.n	800a834 <lfs_dir_fetchmatch+0xac>
            return err;
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	e306      	b.n	800ae42 <lfs_dir_fetchmatch+0x6ba>
        }

        if (err != LFS_ERR_CORRUPT &&
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a83a:	d01a      	beq.n	800a872 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800a83c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	3368      	adds	r3, #104	; 0x68
 800a842:	443b      	add	r3, r7
 800a844:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800a848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a84a:	3301      	adds	r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	bfb8      	it	lt
 800a854:	425b      	neglt	r3, r3
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	3368      	adds	r3, #104	; 0x68
 800a85a:	443b      	add	r3, r7
 800a85c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a860:	4619      	mov	r1, r3
 800a862:	4610      	mov	r0, r2
 800a864:	f7fe fcb4 	bl	80091d0 <lfs_scmp>
 800a868:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	dd01      	ble.n	800a872 <lfs_dir_fetchmatch+0xea>
            r = i;
 800a86e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a870:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800a872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a874:	3301      	adds	r3, #1
 800a876:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	dda9      	ble.n	800a7d2 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800a87e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a880:	2b00      	cmp	r3, #0
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	bfb8      	it	lt
 800a888:	425b      	neglt	r3, r3
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	4413      	add	r3, r2
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800a896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a898:	3301      	adds	r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	bfb8      	it	lt
 800a8a2:	425b      	neglt	r3, r3
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800a8b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	bfb8      	it	lt
 800a8ba:	425b      	neglt	r3, r3
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	3368      	adds	r3, #104	; 0x68
 800a8c0:	443b      	add	r3, r7
 800a8c2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8d4:	e2a1      	b.n	800ae1a <lfs_dir_fetchmatch+0x692>
        lfs_off_t off = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800a8da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8de:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800a8e6:	4a96      	ldr	r2, [pc, #600]	; (800ab40 <lfs_dir_fetchmatch+0x3b8>)
 800a8e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a8f0:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800a8fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8fc:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	4618      	mov	r0, r3
 800a904:	f7fe fc7d 	bl	8009202 <lfs_tole32>
 800a908:	4602      	mov	r2, r0
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	3308      	adds	r3, #8
 800a912:	2204      	movs	r2, #4
 800a914:	4619      	mov	r1, r3
 800a916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a91a:	f003 ffe1 	bl	800e8e0 <lfs_crc>
 800a91e:	4603      	mov	r3, r0
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe fc60 	bl	80091ec <lfs_fromle32>
 800a92c:	4602      	mov	r2, r0
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800a932:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a934:	f7ff f91b 	bl	8009b6e <lfs_tag_dsize>
 800a938:	4602      	mov	r2, r0
 800a93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a93c:	4413      	add	r3, r2
 800a93e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800a940:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a946:	6a58      	ldr	r0, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2204      	movs	r2, #4
 800a94e:	9203      	str	r2, [sp, #12]
 800a950:	f107 0220 	add.w	r2, r7, #32
 800a954:	9202      	str	r2, [sp, #8]
 800a956:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a958:	9201      	str	r2, [sp, #4]
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	4603      	mov	r3, r0
 800a95e:	460a      	mov	r2, r1
 800a960:	2100      	movs	r1, #0
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f7fe fcae 	bl	80092c4 <lfs_bd_read>
 800a968:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800a96a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d009      	beq.n	800a984 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800a970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a972:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a976:	d103      	bne.n	800a980 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	2200      	movs	r2, #0
 800a97c:	759a      	strb	r2, [r3, #22]
                    break;
 800a97e:	e1d4      	b.n	800ad2a <lfs_dir_fetchmatch+0x5a2>
                }
                return err;
 800a980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a982:	e25e      	b.n	800ae42 <lfs_dir_fetchmatch+0x6ba>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a986:	f107 0120 	add.w	r1, r7, #32
 800a98a:	2204      	movs	r2, #4
 800a98c:	4618      	mov	r0, r3
 800a98e:	f003 ffa7 	bl	800e8e0 <lfs_crc>
 800a992:	4603      	mov	r3, r0
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800a996:	6a3b      	ldr	r3, [r7, #32]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fe fc3e 	bl	800921a <lfs_frombe32>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9a2:	4053      	eors	r3, r2
 800a9a4:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7ff f868 	bl	8009a7e <lfs_tag_isvalid>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	f083 0301 	eor.w	r3, r3, #1
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d01b      	beq.n	800a9f2 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a9ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a9bc:	f7ff f880 	bl	8009ac0 <lfs_tag_type1>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a9c6:	d10d      	bne.n	800a9e4 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a9d0:	6a12      	ldr	r2, [r2, #32]
 800a9d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9d6:	fb01 f202 	mul.w	r2, r1, r2
 800a9da:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <lfs_dir_fetchmatch+0x25c>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <lfs_dir_fetchmatch+0x25e>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	759a      	strb	r2, [r3, #22]
                break;
 800a9f0:	e19b      	b.n	800ad2a <lfs_dir_fetchmatch+0x5a2>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff f8ba 	bl	8009b6e <lfs_tag_dsize>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9fe:	441a      	add	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d903      	bls.n	800aa12 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	759a      	strb	r2, [r3, #22]
                break;
 800aa10:	e18b      	b.n	800ad2a <lfs_dir_fetchmatch+0x5a2>
            }

            ptag = tag;
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff f851 	bl	8009ac0 <lfs_tag_type1>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800aa24:	d164      	bne.n	800aaf0 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800aa26:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa34:	3204      	adds	r2, #4
 800aa36:	2104      	movs	r1, #4
 800aa38:	9103      	str	r1, [sp, #12]
 800aa3a:	f107 011c 	add.w	r1, r7, #28
 800aa3e:	9102      	str	r1, [sp, #8]
 800aa40:	9201      	str	r2, [sp, #4]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	4623      	mov	r3, r4
 800aa46:	4602      	mov	r2, r0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7fe fc3a 	bl	80092c4 <lfs_bd_read>
 800aa50:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800aa52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800aa58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa5a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800aa5e:	d103      	bne.n	800aa68 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2200      	movs	r2, #0
 800aa64:	759a      	strb	r2, [r3, #22]
                        break;
 800aa66:	e160      	b.n	800ad2a <lfs_dir_fetchmatch+0x5a2>
                    }
                    return err;
 800aa68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800aa6a:	e1ea      	b.n	800ae42 <lfs_dir_fetchmatch+0x6ba>
                }
                dcrc = lfs_fromle32(dcrc);
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fbbc 	bl	80091ec <lfs_fromle32>
 800aa74:	4603      	mov	r3, r0
 800aa76:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800aa78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d003      	beq.n	800aa88 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	2200      	movs	r2, #0
 800aa84:	759a      	strb	r2, [r3, #22]
                    break;
 800aa86:	e150      	b.n	800ad2a <lfs_dir_fetchmatch+0x5a2>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff f838 	bl	8009b00 <lfs_tag_chunk>
 800aa90:	4603      	mov	r3, r0
 800aa92:	07db      	lsls	r3, r3, #31
 800aa94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa96:	4053      	eors	r3, r2
 800aa98:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800aaa2:	2204      	movs	r2, #4
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f003 ff1b 	bl	800e8e0 <lfs_crc>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800aab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aab2:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff f859 	bl	8009b6e <lfs_tag_dsize>
 800aabc:	4602      	mov	r2, r0
 800aabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac0:	441a      	add	r2, r3
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aaca:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800aad2:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800aad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800aada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800aae6:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800aae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaec:	627b      	str	r3, [r7, #36]	; 0x24
 800aaee:	e720      	b.n	800a932 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800aaf0:	2304      	movs	r3, #4
 800aaf2:	647b      	str	r3, [r7, #68]	; 0x44
 800aaf4:	e032      	b.n	800ab5c <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800aaf6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aafc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab06:	440a      	add	r2, r1
 800ab08:	2101      	movs	r1, #1
 800ab0a:	9103      	str	r1, [sp, #12]
 800ab0c:	f107 011b 	add.w	r1, r7, #27
 800ab10:	9102      	str	r1, [sp, #8]
 800ab12:	9201      	str	r2, [sp, #4]
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	4623      	mov	r3, r4
 800ab18:	4602      	mov	r2, r0
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f7fe fbd1 	bl	80092c4 <lfs_bd_read>
 800ab22:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800ab24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00c      	beq.n	800ab44 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800ab2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab2c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ab30:	d103      	bne.n	800ab3a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2200      	movs	r2, #0
 800ab36:	759a      	strb	r2, [r3, #22]
 800ab38:	e018      	b.n	800ab6c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800ab3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800ab3c:	e181      	b.n	800ae42 <lfs_dir_fetchmatch+0x6ba>
 800ab3e:	bf00      	nop
 800ab40:	08020e74 	.word	0x08020e74
                }

                crc = lfs_crc(crc, &dat, 1);
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	f107 011b 	add.w	r1, r7, #27
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f003 fec7 	bl	800e8e0 <lfs_crc>
 800ab52:	4603      	mov	r3, r0
 800ab54:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800ab56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab58:	3301      	adds	r3, #1
 800ab5a:	647b      	str	r3, [r7, #68]	; 0x44
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff f805 	bl	8009b6e <lfs_tag_dsize>
 800ab64:	4602      	mov	r2, r0
 800ab66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d3c4      	bcc.n	800aaf6 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fe ffa6 	bl	8009ac0 <lfs_tag_type1>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d113      	bne.n	800aba2 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800ab7a:	6a3b      	ldr	r3, [r7, #32]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe ffd9 	bl	8009b34 <lfs_tag_id>
 800ab82:	4603      	mov	r3, r0
 800ab84:	461a      	mov	r2, r3
 800ab86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	f200 8081 	bhi.w	800ac92 <lfs_dir_fetchmatch+0x50a>
                    tempcount = lfs_tag_id(tag) + 1;
 800ab90:	6a3b      	ldr	r3, [r7, #32]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe ffce 	bl	8009b34 <lfs_tag_id>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800aba0:	e077      	b.n	800ac92 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe ff8b 	bl	8009ac0 <lfs_tag_type1>
 800abaa:	4603      	mov	r3, r0
 800abac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abb0:	d134      	bne.n	800ac1c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7fe ffb0 	bl	8009b1a <lfs_tag_splice>
 800abba:	4603      	mov	r3, r0
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800abc2:	4413      	add	r3, r2
 800abc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800abc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abca:	4ba0      	ldr	r3, [pc, #640]	; (800ae4c <lfs_dir_fetchmatch+0x6c4>)
 800abcc:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800abce:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800abd2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800abd6:	6a3a      	ldr	r2, [r7, #32]
 800abd8:	4293      	cmp	r3, r2
 800abda:	d104      	bne.n	800abe6 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800abdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abe2:	64bb      	str	r3, [r7, #72]	; 0x48
 800abe4:	e055      	b.n	800ac92 <lfs_dir_fetchmatch+0x50a>
                } else if (tempbesttag != -1 &&
 800abe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abec:	d051      	beq.n	800ac92 <lfs_dir_fetchmatch+0x50a>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fe ff9f 	bl	8009b34 <lfs_tag_id>
 800abf6:	4603      	mov	r3, r0
 800abf8:	461c      	mov	r4, r3
 800abfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fe ff99 	bl	8009b34 <lfs_tag_id>
 800ac02:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800ac04:	429c      	cmp	r4, r3
 800ac06:	d844      	bhi.n	800ac92 <lfs_dir_fetchmatch+0x50a>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe ff85 	bl	8009b1a <lfs_tag_splice>
 800ac10:	4603      	mov	r3, r0
 800ac12:	029a      	lsls	r2, r3, #10
 800ac14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac16:	4413      	add	r3, r2
 800ac18:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac1a:	e03a      	b.n	800ac92 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fe ff4e 	bl	8009ac0 <lfs_tag_type1>
 800ac24:	4603      	mov	r3, r0
 800ac26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ac2a:	d132      	bne.n	800ac92 <lfs_dir_fetchmatch+0x50a>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe ff66 	bl	8009b00 <lfs_tag_chunk>
 800ac34:	4603      	mov	r3, r0
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	bf14      	ite	ne
 800ac3e:	2301      	movne	r3, #1
 800ac40:	2300      	moveq	r3, #0
 800ac42:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800ac46:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac54:	3204      	adds	r2, #4
 800ac56:	2108      	movs	r1, #8
 800ac58:	9103      	str	r1, [sp, #12]
 800ac5a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ac5e:	9102      	str	r1, [sp, #8]
 800ac60:	9201      	str	r2, [sp, #4]
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	4623      	mov	r3, r4
 800ac66:	4602      	mov	r2, r0
 800ac68:	2100      	movs	r1, #0
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f7fe fb2a 	bl	80092c4 <lfs_bd_read>
 800ac70:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800ac72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d007      	beq.n	800ac88 <lfs_dir_fetchmatch+0x500>
                    if (err == LFS_ERR_CORRUPT) {
 800ac78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac7a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ac7e:	d103      	bne.n	800ac88 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	2200      	movs	r2, #0
 800ac84:	759a      	strb	r2, [r3, #22]
                        break;
 800ac86:	e050      	b.n	800ad2a <lfs_dir_fetchmatch+0x5a2>
                    }
                }
                lfs_pair_fromle32(temptail);
 800ac88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fe fec2 	bl	8009a16 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800ac92:	6a3a      	ldr	r2, [r7, #32]
 800ac94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac96:	405a      	eors	r2, r3
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f47f ae48 	bne.w	800a932 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800aca2:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800aca8:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800acaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acac:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800acae:	617b      	str	r3, [r7, #20]
 800acb0:	f107 0210 	add.w	r2, r7, #16
 800acb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800acb8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800acbc:	4798      	blx	r3
 800acbe:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 800acc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	da09      	bge.n	800acda <lfs_dir_fetchmatch+0x552>
                    if (res == LFS_ERR_CORRUPT) {
 800acc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800accc:	d103      	bne.n	800acd6 <lfs_dir_fetchmatch+0x54e>
                        dir->erased = false;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2200      	movs	r2, #0
 800acd2:	759a      	strb	r2, [r3, #22]
 800acd4:	e029      	b.n	800ad2a <lfs_dir_fetchmatch+0x5a2>
                        break;
                    }
                    return res;
 800acd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800acd8:	e0b3      	b.n	800ae42 <lfs_dir_fetchmatch+0x6ba>
                }

                if (res == LFS_CMP_EQ) {
 800acda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <lfs_dir_fetchmatch+0x55e>
                    // found a match
                    tempbesttag = tag;
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	64bb      	str	r3, [r7, #72]	; 0x48
 800ace4:	e625      	b.n	800a932 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800ace6:	6a3a      	ldr	r2, [r7, #32]
 800ace8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acea:	405a      	eors	r2, r3
 800acec:	4b58      	ldr	r3, [pc, #352]	; (800ae50 <lfs_dir_fetchmatch+0x6c8>)
 800acee:	4013      	ands	r3, r2
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d103      	bne.n	800acfc <lfs_dir_fetchmatch+0x574>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800acf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800acfa:	e61a      	b.n	800a932 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 800acfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	f47f ae17 	bne.w	800a932 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe ff14 	bl	8009b34 <lfs_tag_id>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	461c      	mov	r4, r3
 800ad10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe ff0e 	bl	8009b34 <lfs_tag_id>
 800ad18:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800ad1a:	429c      	cmp	r4, r3
 800ad1c:	f63f ae09 	bhi.w	800a932 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad26:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad28:	e603      	b.n	800a932 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d100      	bne.n	800ad34 <lfs_dir_fetchmatch+0x5ac>
 800ad32:	e05d      	b.n	800adf0 <lfs_dir_fetchmatch+0x668>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	333c      	adds	r3, #60	; 0x3c
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe ffa1 	bl	8009c84 <lfs_gstate_hasmovehere>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d028      	beq.n	800ad9a <lfs_dir_fetchmatch+0x612>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe fef1 	bl	8009b34 <lfs_tag_id>
 800ad52:	4603      	mov	r3, r0
 800ad54:	461c      	mov	r4, r3
 800ad56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe feeb 	bl	8009b34 <lfs_tag_id>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	429c      	cmp	r4, r3
 800ad62:	d104      	bne.n	800ad6e <lfs_dir_fetchmatch+0x5e6>
                    besttag |= 0x80000000;
 800ad64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad6a:	667b      	str	r3, [r7, #100]	; 0x64
 800ad6c:	e015      	b.n	800ad9a <lfs_dir_fetchmatch+0x612>
                } else if (besttag != -1 &&
 800ad6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad74:	d011      	beq.n	800ad9a <lfs_dir_fetchmatch+0x612>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe feda 	bl	8009b34 <lfs_tag_id>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461c      	mov	r4, r3
 800ad84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7fe fed4 	bl	8009b34 <lfs_tag_id>
 800ad8c:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800ad8e:	429c      	cmp	r4, r3
 800ad90:	d203      	bcs.n	800ad9a <lfs_dir_fetchmatch+0x612>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800ad92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad94:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ad98:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800ad9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00f      	beq.n	800adc0 <lfs_dir_fetchmatch+0x638>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800ada0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe fec6 	bl	8009b34 <lfs_tag_id>
 800ada8:	4603      	mov	r3, r0
 800adaa:	461a      	mov	r2, r3
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	8a9b      	ldrh	r3, [r3, #20]
 800adb0:	4619      	mov	r1, r3
 800adb2:	4610      	mov	r0, r2
 800adb4:	f7fe f9aa 	bl	800910c <lfs_min>
 800adb8:	4603      	mov	r3, r0
 800adba:	b29a      	uxth	r2, r3
 800adbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adbe:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 800adc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fe5b 	bl	8009a7e <lfs_tag_isvalid>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <lfs_dir_fetchmatch+0x64a>
                return besttag;
 800adce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add0:	e037      	b.n	800ae42 <lfs_dir_fetchmatch+0x6ba>
            } else if (lfs_tag_id(besttag) < dir->count) {
 800add2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add4:	4618      	mov	r0, r3
 800add6:	f7fe fead 	bl	8009b34 <lfs_tag_id>
 800adda:	4603      	mov	r3, r0
 800addc:	461a      	mov	r2, r3
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	8a9b      	ldrh	r3, [r3, #20]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d202      	bcs.n	800adec <lfs_dir_fetchmatch+0x664>
                return LFS_ERR_NOENT;
 800ade6:	f06f 0301 	mvn.w	r3, #1
 800adea:	e02a      	b.n	800ae42 <lfs_dir_fetchmatch+0x6ba>
            } else {
                return 0;
 800adec:	2300      	movs	r3, #0
 800adee:	e028      	b.n	800ae42 <lfs_dir_fetchmatch+0x6ba>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe fd88 	bl	8009908 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800adf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adfa:	3301      	adds	r3, #1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	bfb8      	it	lt
 800ae04:	425b      	neglt	r3, r3
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	3368      	adds	r3, #104	; 0x68
 800ae0a:	443b      	add	r3, r7
 800ae0c:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800ae14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae16:	3301      	adds	r3, #1
 800ae18:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	f77f ad5a 	ble.w	800a8d6 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	490a      	ldr	r1, [pc, #40]	; (800ae54 <lfs_dir_fetchmatch+0x6cc>)
 800ae2c:	9101      	str	r1, [sp, #4]
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	4613      	mov	r3, r2
 800ae32:	f240 4232 	movw	r2, #1074	; 0x432
 800ae36:	4908      	ldr	r1, [pc, #32]	; (800ae58 <lfs_dir_fetchmatch+0x6d0>)
 800ae38:	4808      	ldr	r0, [pc, #32]	; (800ae5c <lfs_dir_fetchmatch+0x6d4>)
 800ae3a:	f014 fd37 	bl	801f8ac <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800ae3e:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	376c      	adds	r7, #108	; 0x6c
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd90      	pop	{r4, r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	000ffc00 	.word	0x000ffc00
 800ae50:	7ffffc00 	.word	0x7ffffc00
 800ae54:	08020e38 	.word	0x08020e38
 800ae58:	08020d2c 	.word	0x08020d2c
 800ae5c:	08020e3c 	.word	0x08020e3c

0800ae60 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af04      	add	r7, sp, #16
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9303      	str	r3, [sp, #12]
 800ae70:	2300      	movs	r3, #0
 800ae72:	9302      	str	r3, [sp, #8]
 800ae74:	2300      	movs	r3, #0
 800ae76:	9301      	str	r3, [sp, #4]
 800ae78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	68b9      	ldr	r1, [r7, #8]
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7ff fc7e 	bl	800a788 <lfs_dir_fetchmatch>
 800ae8c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
	...

0800ae98 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08a      	sub	sp, #40	; 0x28
 800ae9c:	af02      	add	r7, sp, #8
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800aea4:	f107 0310 	add.w	r3, r7, #16
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	4b12      	ldr	r3, [pc, #72]	; (800aef4 <lfs_dir_getgstate+0x5c>)
 800aeac:	4a12      	ldr	r2, [pc, #72]	; (800aef8 <lfs_dir_getgstate+0x60>)
 800aeae:	68b9      	ldr	r1, [r7, #8]
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f7ff f9c1 	bl	800a238 <lfs_dir_get>
 800aeb6:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	da05      	bge.n	800aeca <lfs_dir_getgstate+0x32>
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	f113 0f02 	cmn.w	r3, #2
 800aec4:	d001      	beq.n	800aeca <lfs_dir_getgstate+0x32>
        return res;
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	e00f      	b.n	800aeea <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	f113 0f02 	cmn.w	r3, #2
 800aed0:	d00a      	beq.n	800aee8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800aed2:	f107 0310 	add.w	r3, r7, #16
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fef4 	bl	8009cc4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800aedc:	f107 0310 	add.w	r3, r7, #16
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7fe fe57 	bl	8009b96 <lfs_gstate_xor>
    }

    return 0;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3720      	adds	r7, #32
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	7ff0000c 	.word	0x7ff0000c
 800aef8:	7ff00000 	.word	0x7ff00000

0800aefc <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800aefc:	b590      	push	{r4, r7, lr}
 800aefe:	b08f      	sub	sp, #60	; 0x3c
 800af00:	af04      	add	r7, sp, #16
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	689c      	ldr	r4, [r3, #8]
 800af1a:	68b8      	ldr	r0, [r7, #8]
 800af1c:	f7fe fe1a 	bl	8009b54 <lfs_tag_size>
 800af20:	4603      	mov	r3, r0
 800af22:	4619      	mov	r1, r3
 800af24:	4620      	mov	r0, r4
 800af26:	f7fe f8f1 	bl	800910c <lfs_min>
 800af2a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800af2c:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69fa      	ldr	r2, [r7, #28]
 800af34:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800af36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af38:	6849      	ldr	r1, [r1, #4]
 800af3a:	69b8      	ldr	r0, [r7, #24]
 800af3c:	9003      	str	r0, [sp, #12]
 800af3e:	9102      	str	r1, [sp, #8]
 800af40:	9201      	str	r2, [sp, #4]
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	4622      	mov	r2, r4
 800af48:	2100      	movs	r1, #0
 800af4a:	6a38      	ldr	r0, [r7, #32]
 800af4c:	f7fe fafe 	bl	800954c <lfs_bd_cmp>
 800af50:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <lfs_dir_find_match+0x60>
        return res;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	e014      	b.n	800af86 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	689c      	ldr	r4, [r3, #8]
 800af60:	68b8      	ldr	r0, [r7, #8]
 800af62:	f7fe fdf7 	bl	8009b54 <lfs_tag_size>
 800af66:	4603      	mov	r3, r0
 800af68:	429c      	cmp	r4, r3
 800af6a:	d00b      	beq.n	800af84 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	689c      	ldr	r4, [r3, #8]
 800af70:	68b8      	ldr	r0, [r7, #8]
 800af72:	f7fe fdef 	bl	8009b54 <lfs_tag_size>
 800af76:	4603      	mov	r3, r0
 800af78:	429c      	cmp	r4, r3
 800af7a:	d201      	bcs.n	800af80 <lfs_dir_find_match+0x84>
 800af7c:	2301      	movs	r3, #1
 800af7e:	e002      	b.n	800af86 <lfs_dir_find_match+0x8a>
 800af80:	2302      	movs	r3, #2
 800af82:	e000      	b.n	800af86 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	372c      	adds	r7, #44	; 0x2c
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd90      	pop	{r4, r7, pc}
	...

0800af90 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800af90:	b590      	push	{r4, r7, lr}
 800af92:	b093      	sub	sp, #76	; 0x4c
 800af94:	af04      	add	r7, sp, #16
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800afb0:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800afb2:	4b6e      	ldr	r3, [pc, #440]	; (800b16c <lfs_dir_find+0x1dc>)
 800afb4:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6a1a      	ldr	r2, [r3, #32]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800afc6:	496a      	ldr	r1, [pc, #424]	; (800b170 <lfs_dir_find+0x1e0>)
 800afc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800afca:	f014 fdeb 	bl	801fba4 <strspn>
 800afce:	4602      	mov	r2, r0
 800afd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd2:	4413      	add	r3, r2
 800afd4:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800afd6:	4966      	ldr	r1, [pc, #408]	; (800b170 <lfs_dir_find+0x1e0>)
 800afd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800afda:	f014 fdd2 	bl	801fb82 <strcspn>
 800afde:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d105      	bne.n	800aff2 <lfs_dir_find+0x62>
 800afe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe8:	781a      	ldrb	r2, [r3, #0]
 800afea:	4b62      	ldr	r3, [pc, #392]	; (800b174 <lfs_dir_find+0x1e4>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d00a      	beq.n	800b008 <lfs_dir_find+0x78>
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d10c      	bne.n	800b012 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800aff8:	2202      	movs	r2, #2
 800affa:	495f      	ldr	r1, [pc, #380]	; (800b178 <lfs_dir_find+0x1e8>)
 800affc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800affe:	f014 fd9b 	bl	801fb38 <memcmp>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d104      	bne.n	800b012 <lfs_dir_find+0x82>
            name += namelen;
 800b008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	4413      	add	r3, r2
 800b00e:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800b010:	e7d9      	b.n	800afc6 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800b012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	4413      	add	r3, r2
 800b018:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800b01a:	2301      	movs	r3, #1
 800b01c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800b01e:	4954      	ldr	r1, [pc, #336]	; (800b170 <lfs_dir_find+0x1e0>)
 800b020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b022:	f014 fdbf 	bl	801fba4 <strspn>
 800b026:	4602      	mov	r2, r0
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	4413      	add	r3, r2
 800b02c:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800b02e:	4950      	ldr	r1, [pc, #320]	; (800b170 <lfs_dir_find+0x1e0>)
 800b030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b032:	f014 fda6 	bl	801fb82 <strcspn>
 800b036:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d01d      	beq.n	800b07a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	2b02      	cmp	r3, #2
 800b042:	d112      	bne.n	800b06a <lfs_dir_find+0xda>
 800b044:	2202      	movs	r2, #2
 800b046:	494c      	ldr	r1, [pc, #304]	; (800b178 <lfs_dir_find+0x1e8>)
 800b048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b04a:	f014 fd75 	bl	801fb38 <memcmp>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10a      	bne.n	800b06a <lfs_dir_find+0xda>
                depth -= 1;
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	3b01      	subs	r3, #1
 800b058:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d107      	bne.n	800b070 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800b060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	4413      	add	r3, r2
 800b066:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800b068:	e7ad      	b.n	800afc6 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	3301      	adds	r3, #1
 800b06e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 800b070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	4413      	add	r3, r2
 800b076:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800b078:	e7d1      	b.n	800b01e <lfs_dir_find+0x8e>
                break;
 800b07a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800b07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <lfs_dir_find+0xf8>
            return tag;
 800b084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b086:	e06c      	b.n	800b162 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b08c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	4618      	mov	r0, r3
 800b092:	f7fe fd25 	bl	8009ae0 <lfs_tag_type3>
 800b096:	4603      	mov	r3, r0
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d002      	beq.n	800b0a2 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800b09c:	f06f 0313 	mvn.w	r3, #19
 800b0a0:	e05f      	b.n	800b162 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe fd45 	bl	8009b34 <lfs_tag_id>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d01c      	beq.n	800b0f0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7fe fd3b 	bl	8009b34 <lfs_tag_id>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b0c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0c6:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800b0ce:	9200      	str	r2, [sp, #0]
 800b0d0:	4a2a      	ldr	r2, [pc, #168]	; (800b17c <lfs_dir_find+0x1ec>)
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff f8af 	bl	800a238 <lfs_dir_get>
 800b0da:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	da01      	bge.n	800b0e6 <lfs_dir_find+0x156>
                return res;
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	e03d      	b.n	800b162 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	3318      	adds	r3, #24
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fc93 	bl	8009a16 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800b0f6:	212f      	movs	r1, #47	; 0x2f
 800b0f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b0fa:	f014 fd35 	bl	801fb68 <strchr>
 800b0fe:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <lfs_dir_find+0x178>
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	e000      	b.n	800b10a <lfs_dir_find+0x17a>
 800b108:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	613a      	str	r2, [r7, #16]
 800b10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b110:	617a      	str	r2, [r7, #20]
 800b112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b114:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800b116:	f107 0210 	add.w	r2, r7, #16
 800b11a:	9203      	str	r2, [sp, #12]
 800b11c:	4a18      	ldr	r2, [pc, #96]	; (800b180 <lfs_dir_find+0x1f0>)
 800b11e:	9202      	str	r2, [sp, #8]
 800b120:	9301      	str	r3, [sp, #4]
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800b12a:	4622      	mov	r2, r4
 800b12c:	68b9      	ldr	r1, [r7, #8]
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f7ff fb2a 	bl	800a788 <lfs_dir_fetchmatch>
 800b134:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800b136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b138:	2b00      	cmp	r3, #0
 800b13a:	da01      	bge.n	800b140 <lfs_dir_find+0x1b0>
                return tag;
 800b13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13e:	e010      	b.n	800b162 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800b140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b142:	2b00      	cmp	r3, #0
 800b144:	d004      	beq.n	800b150 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800b146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	4413      	add	r3, r2
 800b14c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800b14e:	e73a      	b.n	800afc6 <lfs_dir_find+0x36>
            if (!dir->split) {
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	7ddb      	ldrb	r3, [r3, #23]
 800b154:	f083 0301 	eor.w	r3, r3, #1
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d0c8      	beq.n	800b0f0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800b15e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800b162:	4618      	mov	r0, r3
 800b164:	373c      	adds	r7, #60	; 0x3c
 800b166:	46bd      	mov	sp, r7
 800b168:	bd90      	pop	{r4, r7, pc}
 800b16a:	bf00      	nop
 800b16c:	002ffc00 	.word	0x002ffc00
 800b170:	08020e7c 	.word	0x08020e7c
 800b174:	08020e80 	.word	0x08020e80
 800b178:	08020e84 	.word	0x08020e84
 800b17c:	700ffc00 	.word	0x700ffc00
 800b180:	0800aefd 	.word	0x0800aefd

0800b184 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800b184:	b590      	push	{r4, r7, lr}
 800b186:	b08b      	sub	sp, #44	; 0x2c
 800b188:	af04      	add	r7, sp, #16
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f103 0010 	add.w	r0, r3, #16
 800b198:	68fc      	ldr	r4, [r7, #12]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	6852      	ldr	r2, [r2, #4]
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	9103      	str	r1, [sp, #12]
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	9102      	str	r1, [sp, #8]
 800b1aa:	9201      	str	r2, [sp, #4]
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	4622      	mov	r2, r4
 800b1b2:	4601      	mov	r1, r0
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f7fe facb 	bl	8009750 <lfs_bd_prog>
 800b1ba:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d001      	beq.n	800b1c6 <lfs_dir_commitprog+0x42>
        return err;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	e010      	b.n	800b1e8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	6879      	ldr	r1, [r7, #4]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f003 fb86 	bl	800e8e0 <lfs_crc>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	685a      	ldr	r2, [r3, #4]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	605a      	str	r2, [r3, #4]
    return 0;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	371c      	adds	r7, #28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd90      	pop	{r4, r7, pc}

0800b1f0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800b1f0:	b590      	push	{r4, r7, lr}
 800b1f2:	b08f      	sub	sp, #60	; 0x3c
 800b1f4:	af04      	add	r7, sp, #16
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7fe fcb5 	bl	8009b6e <lfs_tag_dsize>
 800b204:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	685a      	ldr	r2, [r3, #4]
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	441a      	add	r2, r3
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	429a      	cmp	r2, r3
 800b214:	d902      	bls.n	800b21c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800b216:	f06f 031b 	mvn.w	r3, #27
 800b21a:	e065      	b.n	800b2e8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	4053      	eors	r3, r2
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fe f802 	bl	8009232 <lfs_tobe32>
 800b22e:	4603      	mov	r3, r0
 800b230:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800b232:	f107 0214 	add.w	r2, r7, #20
 800b236:	2304      	movs	r3, #4
 800b238:	68b9      	ldr	r1, [r7, #8]
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f7ff ffa2 	bl	800b184 <lfs_dir_commitprog>
 800b240:	61f8      	str	r0, [r7, #28]
    if (err) {
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d001      	beq.n	800b24c <lfs_dir_commitattr+0x5c>
        return err;
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	e04d      	b.n	800b2e8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	db0c      	blt.n	800b26c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	3b04      	subs	r3, #4
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	68b9      	ldr	r1, [r7, #8]
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7ff ff92 	bl	800b184 <lfs_dir_commitprog>
 800b260:	61f8      	str	r0, [r7, #28]
        if (err) {
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d039      	beq.n	800b2dc <lfs_dir_commitattr+0xec>
            return err;
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	e03d      	b.n	800b2e8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b270:	2300      	movs	r3, #0
 800b272:	627b      	str	r3, [r7, #36]	; 0x24
 800b274:	e02d      	b.n	800b2d2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800b276:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800b278:	6a3a      	ldr	r2, [r7, #32]
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800b27e:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800b288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28a:	440a      	add	r2, r1
 800b28c:	2101      	movs	r1, #1
 800b28e:	9103      	str	r1, [sp, #12]
 800b290:	f107 0113 	add.w	r1, r7, #19
 800b294:	9102      	str	r1, [sp, #8]
 800b296:	9201      	str	r2, [sp, #4]
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	4623      	mov	r3, r4
 800b29c:	4602      	mov	r2, r0
 800b29e:	2100      	movs	r1, #0
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7fe f80f 	bl	80092c4 <lfs_bd_read>
 800b2a6:	61f8      	str	r0, [r7, #28]
            if (err) {
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <lfs_dir_commitattr+0xc2>
                return err;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	e01a      	b.n	800b2e8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800b2b2:	f107 0213 	add.w	r2, r7, #19
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	68b9      	ldr	r1, [r7, #8]
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff ff62 	bl	800b184 <lfs_dir_commitprog>
 800b2c0:	61f8      	str	r0, [r7, #28]
            if (err) {
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <lfs_dir_commitattr+0xdc>
                return err;
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	e00d      	b.n	800b2e8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b2d2:	6a3b      	ldr	r3, [r7, #32]
 800b2d4:	3b04      	subs	r3, #4
 800b2d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d3cc      	bcc.n	800b276 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	609a      	str	r2, [r3, #8]
    return 0;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	372c      	adds	r7, #44	; 0x2c
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd90      	pop	{r4, r7, pc}

0800b2f0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800b2f0:	b590      	push	{r4, r7, lr}
 800b2f2:	b097      	sub	sp, #92	; 0x5c
 800b2f4:	af04      	add	r7, sp, #16
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b306:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b308:	4619      	mov	r1, r3
 800b30a:	4610      	mov	r0, r2
 800b30c:	f7fd ff23 	bl	8009156 <lfs_alignup>
 800b310:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800b312:	2300      	movs	r3, #0
 800b314:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800b316:	2300      	movs	r3, #0
 800b318:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800b31a:	e0a6      	b.n	800b46a <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	3304      	adds	r3, #4
 800b322:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800b324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fd feec 	bl	800910c <lfs_min>
 800b334:	4602      	mov	r2, r0
 800b336:	6a3b      	ldr	r3, [r7, #32]
 800b338:	4413      	add	r3, r2
 800b33a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800b33c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	429a      	cmp	r2, r3
 800b342:	d206      	bcs.n	800b352 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	3b08      	subs	r3, #8
 800b348:	4619      	mov	r1, r3
 800b34a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b34c:	f7fd fede 	bl	800910c <lfs_min>
 800b350:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800b352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b356:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2204      	movs	r2, #4
 800b360:	9203      	str	r2, [sp, #12]
 800b362:	f107 0214 	add.w	r2, r7, #20
 800b366:	9202      	str	r2, [sp, #8]
 800b368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b36a:	9201      	str	r2, [sp, #4]
 800b36c:	9300      	str	r3, [sp, #0]
 800b36e:	2304      	movs	r3, #4
 800b370:	460a      	mov	r2, r1
 800b372:	2100      	movs	r1, #0
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f7fd ffa5 	bl	80092c4 <lfs_bd_read>
 800b37a:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d005      	beq.n	800b38e <lfs_dir_commitcrc+0x9e>
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b388:	d001      	beq.n	800b38e <lfs_dir_commitcrc+0x9e>
            return err;
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	e0e8      	b.n	800b560 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	4618      	mov	r0, r3
 800b392:	f7fd ff42 	bl	800921a <lfs_frombe32>
 800b396:	4603      	mov	r3, r0
 800b398:	43db      	mvns	r3, r3
 800b39a:	0fdb      	lsrs	r3, r3, #31
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	bf14      	ite	ne
 800b3a0:	2301      	movne	r3, #1
 800b3a2:	2300      	moveq	r3, #0
 800b3a4:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800b3a6:	7efb      	ldrb	r3, [r7, #27]
 800b3a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ac:	051a      	lsls	r2, r3, #20
 800b3ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	1acb      	subs	r3, r1, r3
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800b3ba:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800b3be:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	689a      	ldr	r2, [r3, #8]
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	4053      	eors	r3, r2
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fd ff32 	bl	8009232 <lfs_tobe32>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	f107 010c 	add.w	r1, r7, #12
 800b3da:	2204      	movs	r2, #4
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f003 fa7f 	bl	800e8e0 <lfs_crc>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fd ff08 	bl	8009202 <lfs_tole32>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f103 0010 	add.w	r0, r3, #16
 800b3fc:	687c      	ldr	r4, [r7, #4]
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	6852      	ldr	r2, [r2, #4]
 800b406:	2108      	movs	r1, #8
 800b408:	9103      	str	r1, [sp, #12]
 800b40a:	f107 010c 	add.w	r1, r7, #12
 800b40e:	9102      	str	r1, [sp, #8]
 800b410:	9201      	str	r2, [sp, #4]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	2300      	movs	r3, #0
 800b416:	4622      	mov	r2, r4
 800b418:	4601      	mov	r1, r0
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7fe f998 	bl	8009750 <lfs_bd_prog>
 800b420:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <lfs_dir_commitcrc+0x13c>
            return err;
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	e099      	b.n	800b560 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800b42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d106      	bne.n	800b440 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	3304      	adds	r3, #4
 800b438:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fb86 	bl	8009b54 <lfs_tag_size>
 800b448:	4603      	mov	r3, r0
 800b44a:	1d1a      	adds	r2, r3, #4
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	441a      	add	r2, r3
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800b456:	7efb      	ldrb	r3, [r7, #27]
 800b458:	07da      	lsls	r2, r3, #31
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	405a      	eors	r2, r3
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b468:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b470:	429a      	cmp	r2, r3
 800b472:	f63f af53 	bhi.w	800b31c <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f103 0110 	add.w	r1, r3, #16
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	2300      	movs	r3, #0
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7fe f931 	bl	80096e8 <lfs_bd_sync>
 800b486:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <lfs_dir_commitcrc+0x1a2>
        return err;
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	e066      	b.n	800b560 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800b498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b49a:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800b49c:	e05b      	b.n	800b556 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800b49e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4a2:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4a8:	e030      	b.n	800b50c <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800b4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d106      	bne.n	800b4c0 <lfs_dir_commitcrc+0x1d0>
 800b4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d002      	beq.n	800b4c0 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800b4ba:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800b4be:	e04f      	b.n	800b560 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800b4c0:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800b4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c6:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800b4c8:	1d18      	adds	r0, r3, #4
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	9203      	str	r2, [sp, #12]
 800b4d2:	f107 020b 	add.w	r2, r7, #11
 800b4d6:	9202      	str	r2, [sp, #8]
 800b4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4da:	9201      	str	r2, [sp, #4]
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	4603      	mov	r3, r0
 800b4e0:	460a      	mov	r2, r1
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7fd feed 	bl	80092c4 <lfs_bd_read>
 800b4ea:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <lfs_dir_commitcrc+0x206>
                return err;
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	e034      	b.n	800b560 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800b4f6:	f107 030b 	add.w	r3, r7, #11
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b500:	f003 f9ee 	bl	800e8e0 <lfs_crc>
 800b504:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800b506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b508:	3301      	adds	r3, #1
 800b50a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50e:	3304      	adds	r3, #4
 800b510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b512:	429a      	cmp	r2, r3
 800b514:	d3c9      	bcc.n	800b4aa <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800b51c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800b520:	e01e      	b.n	800b560 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800b522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fd fded 	bl	800910c <lfs_min>
 800b532:	4602      	mov	r2, r0
 800b534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b536:	4413      	add	r3, r2
 800b538:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800b53a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53e:	429a      	cmp	r2, r3
 800b540:	d206      	bcs.n	800b550 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800b542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b544:	3b08      	subs	r3, #8
 800b546:	4619      	mov	r1, r3
 800b548:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b54a:	f7fd fddf 	bl	800910c <lfs_min>
 800b54e:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	3304      	adds	r3, #4
 800b554:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800b556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d39f      	bcc.n	800b49e <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	374c      	adds	r7, #76	; 0x4c
 800b564:	46bd      	mov	sp, r7
 800b566:	bd90      	pop	{r4, r7, pc}

0800b568 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08a      	sub	sp, #40	; 0x28
 800b56c:	af04      	add	r7, sp, #16
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	e016      	b.n	800b5a6 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	3301      	adds	r3, #1
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f003 0301 	and.w	r3, r3, #1
 800b582:	bfb8      	it	lt
 800b584:	425b      	neglt	r3, r3
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	4413      	add	r3, r2
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7fe fcb8 	bl	8009f04 <lfs_alloc>
 800b594:	60f8      	str	r0, [r7, #12]
        if (err) {
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <lfs_dir_alloc+0x38>
            return err;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	e058      	b.n	800b652 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	617b      	str	r3, [r7, #20]
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	dde5      	ble.n	800b578 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800b5b2:	6879      	ldr	r1, [r7, #4]
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800b5bc:	2004      	movs	r0, #4
 800b5be:	9003      	str	r0, [sp, #12]
 800b5c0:	9202      	str	r2, [sp, #8]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	9201      	str	r2, [sp, #4]
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	2304      	movs	r3, #4
 800b5ca:	460a      	mov	r2, r1
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7fd fe78 	bl	80092c4 <lfs_bd_read>
 800b5d4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fd fe06 	bl	80091ec <lfs_fromle32>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <lfs_dir_alloc+0x90>
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b5f2:	d001      	beq.n	800b5f8 <lfs_dir_alloc+0x90>
        return err;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	e02c      	b.n	800b652 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	dd0e      	ble.n	800b620 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	689a      	ldr	r2, [r3, #8]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60c:	3301      	adds	r3, #1
 800b60e:	f043 0301 	orr.w	r3, r3, #1
 800b612:	4619      	mov	r1, r3
 800b614:	4610      	mov	r0, r2
 800b616:	f7fd fd9e 	bl	8009156 <lfs_alignup>
 800b61a:	4602      	mov	r2, r0
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2204      	movs	r2, #4
 800b624:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b62c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2200      	movs	r2, #0
 800b632:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b63a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b642:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2200      	movs	r2, #0
 800b648:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2200      	movs	r2, #0
 800b64e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
	...

0800b65c <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08a      	sub	sp, #40	; 0x28
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3348      	adds	r3, #72	; 0x48
 800b66c:	461a      	mov	r2, r3
 800b66e:	6879      	ldr	r1, [r7, #4]
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f7ff fc11 	bl	800ae98 <lfs_dir_getgstate>
 800b676:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <lfs_dir_drop+0x26>
        return err;
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	e022      	b.n	800b6c8 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3318      	adds	r3, #24
 800b686:	4618      	mov	r0, r3
 800b688:	f7fe f9df 	bl	8009a4a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	7ddb      	ldrb	r3, [r3, #23]
 800b690:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800b694:	051a      	lsls	r2, r3, #20
 800b696:	4b0e      	ldr	r3, [pc, #56]	; (800b6d0 <lfs_dir_drop+0x74>)
 800b698:	4313      	orrs	r3, r2
 800b69a:	61fb      	str	r3, [r7, #28]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3318      	adds	r3, #24
 800b6a0:	623b      	str	r3, [r7, #32]
 800b6a2:	f107 021c 	add.w	r2, r7, #28
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	68b9      	ldr	r1, [r7, #8]
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 fbac 	bl	800be08 <lfs_dir_commit>
 800b6b0:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	3318      	adds	r3, #24
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe f9ad 	bl	8009a16 <lfs_pair_fromle32>
    if (err) {
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <lfs_dir_drop+0x6a>
        return err;
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	e000      	b.n	800b6c8 <lfs_dir_drop+0x6c>
    }

    return 0;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3728      	adds	r7, #40	; 0x28
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	000ffc08 	.word	0x000ffc08

0800b6d4 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b092      	sub	sp, #72	; 0x48
 800b6d8:	af04      	add	r7, sp, #16
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_alloc_ack(lfs);
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f7fe fbed 	bl	8009ec2 <lfs_alloc_ack>
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800b6e8:	f107 0314 	add.w	r3, r7, #20
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff ff3a 	bl	800b568 <lfs_dir_alloc>
 800b6f4:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800b6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <lfs_dir_split+0x2c>
        return err;
 800b6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fe:	e03c      	b.n	800b77a <lfs_dir_split+0xa6>
    }

    tail.split = dir->split;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	7ddb      	ldrb	r3, [r3, #23]
 800b704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	699b      	ldr	r3, [r3, #24]
 800b70c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800b714:	f107 0114 	add.w	r1, r7, #20
 800b718:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b71c:	9302      	str	r3, [sp, #8]
 800b71e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f000 f853 	bl	800b7d8 <lfs_dir_compact>
 800b732:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800b734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <lfs_dir_split+0x6a>
        return err;
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	e01d      	b.n	800b77a <lfs_dir_split+0xa6>
    }

    dir->tail[0] = tail.pair[0];
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800b744:	69ba      	ldr	r2, [r7, #24]
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2201      	movs	r2, #1
 800b74e:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3320      	adds	r3, #32
 800b756:	4619      	mov	r1, r3
 800b758:	4610      	mov	r0, r2
 800b75a:	f7fe f905 	bl	8009968 <lfs_pair_cmp>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d109      	bne.n	800b778 <lfs_dir_split+0xa4>
 800b764:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d105      	bne.n	800b778 <lfs_dir_split+0xa4>
        lfs->root[0] = tail.pair[0];
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3738      	adds	r7, #56	; 0x38
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800b782:	b580      	push	{r7, lr}
 800b784:	b086      	sub	sp, #24
 800b786:	af00      	add	r7, sp, #0
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	60b9      	str	r1, [r7, #8]
 800b78c:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800b792:	68b8      	ldr	r0, [r7, #8]
 800b794:	f7fe f9eb 	bl	8009b6e <lfs_tag_dsize>
 800b798:	4602      	mov	r2, r0
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	441a      	add	r2, r3
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	601a      	str	r2, [r3, #0]
    return 0;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3718      	adds	r7, #24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b086      	sub	sp, #24
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	60f8      	str	r0, [r7, #12]
 800b7b6:	60b9      	str	r1, [r7, #8]
 800b7b8:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	6818      	ldr	r0, [r3, #0]
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	6859      	ldr	r1, [r3, #4]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	f7ff fd11 	bl	800b1f0 <lfs_dir_commitattr>
 800b7ce:	4603      	mov	r3, r0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800b7d8:	b590      	push	{r4, r7, lr}
 800b7da:	b0ad      	sub	sp, #180	; 0xb4
 800b7dc:	af0a      	add	r7, sp, #40	; 0x28
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	663b      	str	r3, [r7, #96]	; 0x60
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	667b      	str	r3, [r7, #100]	; 0x64
    bool relocated = false;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool tired = false;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    // should we split?
    while (end - begin > 1) {
 800b7fe:	e08f      	b.n	800b920 <lfs_dir_compact+0x148>
        // find size
        lfs_size_t size = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	65fb      	str	r3, [r7, #92]	; 0x5c
        int err = lfs_dir_traverse(lfs,
 800b804:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b808:	425b      	negs	r3, r3
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	b21b      	sxth	r3, r3
 800b80e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b812:	9208      	str	r2, [sp, #32]
 800b814:	4aa4      	ldr	r2, [pc, #656]	; (800baa8 <lfs_dir_compact+0x2d0>)
 800b816:	9207      	str	r2, [sp, #28]
 800b818:	9306      	str	r3, [sp, #24]
 800b81a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b81e:	9305      	str	r3, [sp, #20]
 800b820:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b824:	9304      	str	r3, [sp, #16]
 800b826:	2300      	movs	r3, #0
 800b828:	9303      	str	r3, [sp, #12]
 800b82a:	4ba0      	ldr	r3, [pc, #640]	; (800baac <lfs_dir_compact+0x2d4>)
 800b82c:	9302      	str	r3, [sp, #8]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f7fe fe49 	bl	800a4d8 <lfs_dir_traverse>
 800b846:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 800b84a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <lfs_dir_compact+0x80>
            return err;
 800b852:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b856:	e2cc      	b.n	800bdf2 <lfs_dir_compact+0x61a>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 800b858:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b85c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	2bfe      	cmp	r3, #254	; 0xfe
 800b864:	dc22      	bgt.n	800b8ac <lfs_dir_compact+0xd4>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup((lfs->cfg->metadata_max ?
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b876:	2b00      	cmp	r3, #0
 800b878:	d004      	beq.n	800b884 <lfs_dir_compact+0xac>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b880:	085b      	lsrs	r3, r3, #1
 800b882:	e003      	b.n	800b88c <lfs_dir_compact+0xb4>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b88a:	085b      	lsrs	r3, r3, #1
                        lfs->cfg->prog_size))) {
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b890:	6a12      	ldr	r2, [r2, #32]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b892:	4611      	mov	r1, r2
 800b894:	4618      	mov	r0, r3
 800b896:	f7fd fc5e 	bl	8009156 <lfs_alignup>
 800b89a:	4603      	mov	r3, r0
 800b89c:	4619      	mov	r1, r3
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7fd fc34 	bl	800910c <lfs_min>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
        if (end - begin < 0xff &&
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d242      	bcs.n	800b932 <lfs_dir_compact+0x15a>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 800b8ac:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b8b0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b8b4:	1ad3      	subs	r3, r2, r3
 800b8b6:	0fda      	lsrs	r2, r3, #31
 800b8b8:	4413      	add	r3, r2
 800b8ba:	105b      	asrs	r3, r3, #1
 800b8bc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800b8c0:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800b8c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800b8c8:	4413      	add	r3, r2
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b8d0:	9202      	str	r2, [sp, #8]
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	68b9      	ldr	r1, [r7, #8]
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f7ff fef7 	bl	800b6d4 <lfs_dir_split>
 800b8e6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, begin+split, end);
        if (err) {
 800b8ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00f      	beq.n	800b912 <lfs_dir_compact+0x13a>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800b8f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8f6:	f113 0f1c 	cmn.w	r3, #28
 800b8fa:	d107      	bne.n	800b90c <lfs_dir_compact+0x134>
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800b906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b908:	429a      	cmp	r2, r3
 800b90a:	d214      	bcs.n	800b936 <lfs_dir_compact+0x15e>
                break;
            }
            return err;
 800b90c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b910:	e26f      	b.n	800bdf2 <lfs_dir_compact+0x61a>
        }

        end = begin + split;
 800b912:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800b916:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800b91a:	4413      	add	r3, r2
 800b91c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    while (end - begin > 1) {
 800b920:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b924:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	f73f af68 	bgt.w	800b800 <lfs_dir_compact+0x28>
 800b930:	e002      	b.n	800b938 <lfs_dir_compact+0x160>
            break;
 800b932:	bf00      	nop
 800b934:	e000      	b.n	800b938 <lfs_dir_compact+0x160>
                break;
 800b936:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	1c5a      	adds	r2, r3, #1
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	609a      	str	r2, [r3, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	dd5b      	ble.n	800ba04 <lfs_dir_compact+0x22c>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b954:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b956:	3201      	adds	r2, #1
 800b958:	f042 0201 	orr.w	r2, r2, #1
 800b95c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b960:	fb01 f202 	mul.w	r2, r1, r2
 800b964:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 800b966:	2b00      	cmp	r3, #0
 800b968:	d14c      	bne.n	800ba04 <lfs_dir_compact+0x22c>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2200      	movs	r2, #0
 800b96e:	657a      	str	r2, [r7, #84]	; 0x54
 800b970:	2201      	movs	r2, #1
 800b972:	65ba      	str	r2, [r7, #88]	; 0x58
 800b974:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b978:	4611      	mov	r1, r2
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fd fff4 	bl	8009968 <lfs_pair_cmp>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d13a      	bne.n	800b9fc <lfs_dir_compact+0x224>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_rawsize(lfs);
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f002 ff32 	bl	800e7f0 <lfs_fs_rawsize>
 800b98c:	67b8      	str	r0, [r7, #120]	; 0x78
            if (res < 0) {
 800b98e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b990:	2b00      	cmp	r3, #0
 800b992:	da01      	bge.n	800b998 <lfs_dir_compact+0x1c0>
                return res;
 800b994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b996:	e22c      	b.n	800bdf2 <lfs_dir_compact+0x61a>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99e:	085a      	lsrs	r2, r3, #1
 800b9a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d92e      	bls.n	800ba04 <lfs_dir_compact+0x22c>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	4a41      	ldr	r2, [pc, #260]	; (800bab0 <lfs_dir_compact+0x2d8>)
 800b9ac:	9200      	str	r2, [sp, #0]
 800b9ae:	f240 626c 	movw	r2, #1644	; 0x66c
 800b9b2:	4940      	ldr	r1, [pc, #256]	; (800bab4 <lfs_dir_compact+0x2dc>)
 800b9b4:	4840      	ldr	r0, [pc, #256]	; (800bab8 <lfs_dir_compact+0x2e0>)
 800b9b6:	f013 ff79 	bl	801f8ac <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800b9ba:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b9be:	9302      	str	r3, [sp, #8]
 800b9c0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	68b9      	ldr	r1, [r7, #8]
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f7ff fe7e 	bl	800b6d4 <lfs_dir_split>
 800b9d8:	6778      	str	r0, [r7, #116]	; 0x74
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 800b9da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d005      	beq.n	800b9ec <lfs_dir_compact+0x214>
 800b9e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9e2:	f113 0f1c 	cmn.w	r3, #28
 800b9e6:	d001      	beq.n	800b9ec <lfs_dir_compact+0x214>
                    return err;
 800b9e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9ea:	e202      	b.n	800bdf2 <lfs_dir_compact+0x61a>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 800b9ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d108      	bne.n	800ba04 <lfs_dir_compact+0x22c>
                    end = begin;
 800b9f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b9f6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800b9fa:	e003      	b.n	800ba04 <lfs_dir_compact+0x22c>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ba02:	e16b      	b.n	800bcdc <lfs_dir_compact+0x504>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800ba08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	643b      	str	r3, [r7, #64]	; 0x40
 800ba0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba12:	647b      	str	r3, [r7, #68]	; 0x44
 800ba14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba18:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d004      	beq.n	800ba32 <lfs_dir_compact+0x25a>
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2e:	3b08      	subs	r3, #8
 800ba30:	e003      	b.n	800ba3a <lfs_dir_compact+0x262>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800ba3a:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	4619      	mov	r1, r3
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f7fd ff30 	bl	80098a8 <lfs_bd_erase>
 800ba48:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800ba4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d006      	beq.n	800ba5e <lfs_dir_compact+0x286>
                if (err == LFS_ERR_CORRUPT) {
 800ba50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba52:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ba56:	f000 8136 	beq.w	800bcc6 <lfs_dir_compact+0x4ee>
                    goto relocate;
                }
                return err;
 800ba5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba5c:	e1c9      	b.n	800bdf2 <lfs_dir_compact+0x61a>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fd fbcd 	bl	8009202 <lfs_tole32>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800ba74:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ba78:	2304      	movs	r3, #4
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f7ff fb82 	bl	800b184 <lfs_dir_commitprog>
 800ba80:	6738      	str	r0, [r7, #112]	; 0x70
            dir->rev = lfs_fromle32(dir->rev);
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fd fbb0 	bl	80091ec <lfs_fromle32>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	609a      	str	r2, [r3, #8]
            if (err) {
 800ba92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d011      	beq.n	800babc <lfs_dir_compact+0x2e4>
                if (err == LFS_ERR_CORRUPT) {
 800ba98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba9a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ba9e:	f000 8114 	beq.w	800bcca <lfs_dir_compact+0x4f2>
                    goto relocate;
                }
                return err;
 800baa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baa4:	e1a5      	b.n	800bdf2 <lfs_dir_compact+0x61a>
 800baa6:	bf00      	nop
 800baa8:	0800b783 	.word	0x0800b783
 800baac:	400ffc00 	.word	0x400ffc00
 800bab0:	08020e38 	.word	0x08020e38
 800bab4:	08020d2c 	.word	0x08020d2c
 800bab8:	08020e88 	.word	0x08020e88
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800babc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800bac0:	425b      	negs	r3, r3
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	637a      	str	r2, [r7, #52]	; 0x34
 800baca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bace:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800bad0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800bad4:	9208      	str	r2, [sp, #32]
 800bad6:	4aaa      	ldr	r2, [pc, #680]	; (800bd80 <lfs_dir_compact+0x5a8>)
 800bad8:	9207      	str	r2, [sp, #28]
 800bada:	9306      	str	r3, [sp, #24]
 800badc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800bae0:	9305      	str	r3, [sp, #20]
 800bae2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800bae6:	9304      	str	r3, [sp, #16]
 800bae8:	2300      	movs	r3, #0
 800baea:	9303      	str	r3, [sp, #12]
 800baec:	4ba5      	ldr	r3, [pc, #660]	; (800bd84 <lfs_dir_compact+0x5ac>)
 800baee:	9302      	str	r3, [sp, #8]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	9301      	str	r3, [sp, #4]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bafc:	2200      	movs	r2, #0
 800bafe:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f7fe fce8 	bl	800a4d8 <lfs_dir_traverse>
 800bb08:	6738      	str	r0, [r7, #112]	; 0x70
                        lfs, &commit});
            if (err) {
 800bb0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d006      	beq.n	800bb1e <lfs_dir_compact+0x346>
                if (err == LFS_ERR_CORRUPT) {
 800bb10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb12:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bb16:	f000 80da 	beq.w	800bcce <lfs_dir_compact+0x4f6>
                    goto relocate;
                }
                return err;
 800bb1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb1c:	e169      	b.n	800bdf2 <lfs_dir_compact+0x61a>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	3318      	adds	r3, #24
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fd ff05 	bl	8009932 <lfs_pair_isnull>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	f083 0301 	eor.w	r3, r3, #1
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d022      	beq.n	800bb7a <lfs_dir_compact+0x3a2>
                lfs_pair_tole32(dir->tail);
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	3318      	adds	r3, #24
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fd ff86 	bl	8009a4a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	7ddb      	ldrb	r3, [r3, #23]
 800bb42:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800bb46:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800bb48:	4a8f      	ldr	r2, [pc, #572]	; (800bd88 <lfs_dir_compact+0x5b0>)
 800bb4a:	431a      	orrs	r2, r3
                        dir->tail);
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800bb50:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff fb4b 	bl	800b1f0 <lfs_dir_commitattr>
 800bb5a:	6738      	str	r0, [r7, #112]	; 0x70
                lfs_pair_fromle32(dir->tail);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	3318      	adds	r3, #24
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fd ff58 	bl	8009a16 <lfs_pair_fromle32>
                if (err) {
 800bb66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d006      	beq.n	800bb7a <lfs_dir_compact+0x3a2>
                    if (err == LFS_ERR_CORRUPT) {
 800bb6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb6e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bb72:	f000 80ae 	beq.w	800bcd2 <lfs_dir_compact+0x4fa>
                        goto relocate;
                    }
                    return err;
 800bb76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb78:	e13b      	b.n	800bdf2 <lfs_dir_compact+0x61a>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800bb7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb7e:	2200      	movs	r2, #0
 800bb80:	601a      	str	r2, [r3, #0]
 800bb82:	605a      	str	r2, [r3, #4]
 800bb84:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800bb86:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bb8a:	f083 0301 	eor.w	r3, r3, #1
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d011      	beq.n	800bbb8 <lfs_dir_compact+0x3e0>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800bb9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb9e:	4611      	mov	r1, r2
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7fd fff8 	bl	8009b96 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd ffef 	bl	8009b96 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800bbbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fd ffe6 	bl	8009b96 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbcc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bbd0:	f023 0303 	bic.w	r3, r3, #3
 800bbd4:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800bbd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbda:	461a      	mov	r2, r3
 800bbdc:	68b9      	ldr	r1, [r7, #8]
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f7ff f95a 	bl	800ae98 <lfs_dir_getgstate>
 800bbe4:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800bbe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <lfs_dir_compact+0x418>
                return err;
 800bbec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbee:	e100      	b.n	800bdf2 <lfs_dir_compact+0x61a>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800bbf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fd fff3 	bl	8009be0 <lfs_gstate_iszero>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	f083 0301 	eor.w	r3, r3, #1
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d016      	beq.n	800bc34 <lfs_dir_compact+0x45c>
                lfs_gstate_tole32(&delta);
 800bc06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe f87a 	bl	8009d04 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800bc10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc14:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bc18:	4a5c      	ldr	r2, [pc, #368]	; (800bd8c <lfs_dir_compact+0x5b4>)
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f7ff fae8 	bl	800b1f0 <lfs_dir_commitattr>
 800bc20:	6738      	str	r0, [r7, #112]	; 0x70
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800bc22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d005      	beq.n	800bc34 <lfs_dir_compact+0x45c>
                    if (err == LFS_ERR_CORRUPT) {
 800bc28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc2a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bc2e:	d052      	beq.n	800bcd6 <lfs_dir_compact+0x4fe>
                        goto relocate;
                    }
                    return err;
 800bc30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc32:	e0de      	b.n	800bdf2 <lfs_dir_compact+0x61a>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800bc34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bc38:	4619      	mov	r1, r3
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f7ff fb58 	bl	800b2f0 <lfs_dir_commitcrc>
 800bc40:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800bc42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d005      	beq.n	800bc54 <lfs_dir_compact+0x47c>
                if (err == LFS_ERR_CORRUPT) {
 800bc48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc4a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bc4e:	d044      	beq.n	800bcda <lfs_dir_compact+0x502>
                    goto relocate;
                }
                return err;
 800bc50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc52:	e0ce      	b.n	800bdf2 <lfs_dir_compact+0x61a>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800bc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800bc5a:	6a12      	ldr	r2, [r2, #32]
 800bc5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc60:	fb01 f202 	mul.w	r2, r1, r2
 800bc64:	1a9b      	subs	r3, r3, r2
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d006      	beq.n	800bc78 <lfs_dir_compact+0x4a0>
 800bc6a:	4b49      	ldr	r3, [pc, #292]	; (800bd90 <lfs_dir_compact+0x5b8>)
 800bc6c:	4a49      	ldr	r2, [pc, #292]	; (800bd94 <lfs_dir_compact+0x5bc>)
 800bc6e:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 800bc72:	4849      	ldr	r0, [pc, #292]	; (800bd98 <lfs_dir_compact+0x5c0>)
 800bc74:	f013 fb9e 	bl	801f3b4 <__assert_func>
            lfs_pair_swap(dir->pair);
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fd fe44 	bl	8009908 <lfs_pair_swap>
            dir->count = end - begin;
 800bc80:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800bc84:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800bc90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800bc96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3348      	adds	r3, #72	; 0x48
 800bca0:	2200      	movs	r2, #0
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	605a      	str	r2, [r3, #4]
 800bca6:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800bca8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bcac:	f083 0301 	eor.w	r3, r3, #1
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d078      	beq.n	800bda8 <lfs_dir_compact+0x5d0>
                lfs->gdisk = lfs->gstate;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	333c      	adds	r3, #60	; 0x3c
 800bcbc:	3230      	adds	r2, #48	; 0x30
 800bcbe:	ca07      	ldmia	r2, {r0, r1, r2}
 800bcc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800bcc4:	e070      	b.n	800bda8 <lfs_dir_compact+0x5d0>
                    goto relocate;
 800bcc6:	bf00      	nop
 800bcc8:	e008      	b.n	800bcdc <lfs_dir_compact+0x504>
                    goto relocate;
 800bcca:	bf00      	nop
 800bccc:	e006      	b.n	800bcdc <lfs_dir_compact+0x504>
                    goto relocate;
 800bcce:	bf00      	nop
 800bcd0:	e004      	b.n	800bcdc <lfs_dir_compact+0x504>
                        goto relocate;
 800bcd2:	bf00      	nop
 800bcd4:	e002      	b.n	800bcdc <lfs_dir_compact+0x504>
                        goto relocate;
 800bcd6:	bf00      	nop
 800bcd8:	e000      	b.n	800bcdc <lfs_dir_compact+0x504>
                    goto relocate;
 800bcda:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        lfs_cache_drop(lfs, &lfs->pcache);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	3310      	adds	r3, #16
 800bce6:	4619      	mov	r1, r3
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f7fd fac5 	bl	8009278 <lfs_cache_drop>
        if (!tired) {
 800bcee:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800bcf2:	f083 0301 	eor.w	r3, r3, #1
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d009      	beq.n	800bd10 <lfs_dir_compact+0x538>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	4a26      	ldr	r2, [pc, #152]	; (800bd9c <lfs_dir_compact+0x5c4>)
 800bd02:	9200      	str	r2, [sp, #0]
 800bd04:	f240 7202 	movw	r2, #1794	; 0x702
 800bd08:	4923      	ldr	r1, [pc, #140]	; (800bd98 <lfs_dir_compact+0x5c0>)
 800bd0a:	4825      	ldr	r0, [pc, #148]	; (800bda0 <lfs_dir_compact+0x5c8>)
 800bd0c:	f013 fdce 	bl	801f8ac <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	2200      	movs	r2, #0
 800bd14:	617a      	str	r2, [r7, #20]
 800bd16:	2201      	movs	r2, #1
 800bd18:	61ba      	str	r2, [r7, #24]
 800bd1a:	f107 0214 	add.w	r2, r7, #20
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fd fe21 	bl	8009968 <lfs_pair_cmp>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10c      	bne.n	800bd46 <lfs_dir_compact+0x56e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	4a1a      	ldr	r2, [pc, #104]	; (800bd9c <lfs_dir_compact+0x5c4>)
 800bd32:	9200      	str	r2, [sp, #0]
 800bd34:	f240 7207 	movw	r2, #1799	; 0x707
 800bd38:	4917      	ldr	r1, [pc, #92]	; (800bd98 <lfs_dir_compact+0x5c0>)
 800bd3a:	481a      	ldr	r0, [pc, #104]	; (800bda4 <lfs_dir_compact+0x5cc>)
 800bd3c:	f013 fdb6 	bl	801f8ac <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800bd40:	f06f 031b 	mvn.w	r3, #27
 800bd44:	e055      	b.n	800bdf2 <lfs_dir_compact+0x61a>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f7fe f8d9 	bl	8009f04 <lfs_alloc>
 800bd52:	66b8      	str	r0, [r7, #104]	; 0x68
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800bd54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00c      	beq.n	800bd74 <lfs_dir_compact+0x59c>
 800bd5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd5c:	f113 0f1c 	cmn.w	r3, #28
 800bd60:	d106      	bne.n	800bd70 <lfs_dir_compact+0x598>
 800bd62:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800bd66:	f083 0301 	eor.w	r3, r3, #1
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <lfs_dir_compact+0x59c>
            return err;
 800bd70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd72:	e03e      	b.n	800bdf2 <lfs_dir_compact+0x61a>
        }

        tired = false;
 800bd74:	2300      	movs	r3, #0
 800bd76:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        continue;
 800bd7a:	bf00      	nop
    while (true) {
 800bd7c:	e642      	b.n	800ba04 <lfs_dir_compact+0x22c>
 800bd7e:	bf00      	nop
 800bd80:	0800b7af 	.word	0x0800b7af
 800bd84:	400ffc00 	.word	0x400ffc00
 800bd88:	000ffc08 	.word	0x000ffc08
 800bd8c:	7ffffc0c 	.word	0x7ffffc0c
 800bd90:	08020eb8 	.word	0x08020eb8
 800bd94:	0802501c 	.word	0x0802501c
 800bd98:	08020d2c 	.word	0x08020d2c
 800bd9c:	08020e38 	.word	0x08020e38
 800bda0:	08020ee0 	.word	0x08020ee0
 800bda4:	08020f04 	.word	0x08020f04
        break;
 800bda8:	bf00      	nop
    }

    if (relocated) {
 800bdaa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d01e      	beq.n	800bdf0 <lfs_dir_compact+0x618>
        // update references if we relocated
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800bdb2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800bdb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	6812      	ldr	r2, [r2, #0]
 800bdba:	68b9      	ldr	r1, [r7, #8]
 800bdbc:	6849      	ldr	r1, [r1, #4]
 800bdbe:	4c0f      	ldr	r4, [pc, #60]	; (800bdfc <lfs_dir_compact+0x624>)
 800bdc0:	9403      	str	r4, [sp, #12]
 800bdc2:	9102      	str	r1, [sp, #8]
 800bdc4:	9201      	str	r2, [sp, #4]
 800bdc6:	9300      	str	r3, [sp, #0]
 800bdc8:	4603      	mov	r3, r0
 800bdca:	f44f 62e3 	mov.w	r2, #1816	; 0x718
 800bdce:	490c      	ldr	r1, [pc, #48]	; (800be00 <lfs_dir_compact+0x628>)
 800bdd0:	480c      	ldr	r0, [pc, #48]	; (800be04 <lfs_dir_compact+0x62c>)
 800bdd2:	f013 fd6b 	bl	801f8ac <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bddc:	4619      	mov	r1, r3
 800bdde:	68f8      	ldr	r0, [r7, #12]
 800bde0:	f002 f98e 	bl	800e100 <lfs_fs_relocate>
 800bde4:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800bde6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <lfs_dir_compact+0x618>
            return err;
 800bdec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdee:	e000      	b.n	800bdf2 <lfs_dir_compact+0x61a>
        }
    }

    return 0;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	378c      	adds	r7, #140	; 0x8c
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd90      	pop	{r4, r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	08020e38 	.word	0x08020e38
 800be00:	08020d2c 	.word	0x08020d2c
 800be04:	08020f3c 	.word	0x08020f3c

0800be08 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800be08:	b5b0      	push	{r4, r5, r7, lr}
 800be0a:	b0b8      	sub	sp, #224	; 0xe0
 800be0c:	af0a      	add	r7, sp, #40	; 0x28
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be1e:	e045      	b.n	800beac <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800be20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be24:	3308      	adds	r3, #8
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d03a      	beq.n	800bea2 <lfs_dir_commit+0x9a>
 800be2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be30:	3308      	adds	r3, #8
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	4611      	mov	r1, r2
 800be36:	4618      	mov	r0, r3
 800be38:	f7fd fd96 	bl	8009968 <lfs_pair_cmp>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d12f      	bne.n	800bea2 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800be42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be46:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d12a      	bne.n	800bea2 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800be4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be56:	2b00      	cmp	r3, #0
 800be58:	d023      	beq.n	800bea2 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800be5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800be5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800be66:	429a      	cmp	r2, r3
 800be68:	d91b      	bls.n	800bea2 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800be6a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f000 ffbe 	bl	800cdf0 <lfs_file_outline>
 800be74:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800be78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <lfs_dir_commit+0x7e>
                return err;
 800be80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be84:	e36e      	b.n	800c564 <lfs_dir_commit+0x75c>
            }

            err = lfs_file_flush(lfs, f);
 800be86:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 ffd2 	bl	800ce34 <lfs_file_flush>
 800be90:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800be94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <lfs_dir_commit+0x9a>
                return err;
 800be9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bea0:	e360      	b.n	800c564 <lfs_dir_commit+0x75c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800beac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1b5      	bne.n	800be20 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800beba:	461d      	mov	r5, r3
 800bebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bec0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bool hasdelete = false;
 800bec8:	2300      	movs	r3, #0
 800beca:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    for (int i = 0; i < attrcount; i++) {
 800bece:	2300      	movs	r3, #0
 800bed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bed4:	e075      	b.n	800bfc2 <lfs_dir_commit+0x1ba>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800bed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800beda:	00db      	lsls	r3, r3, #3
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	4413      	add	r3, r2
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fd fdfc 	bl	8009ae0 <lfs_tag_type3>
 800bee8:	4603      	mov	r3, r0
 800beea:	461a      	mov	r2, r3
 800beec:	f240 4301 	movw	r3, #1025	; 0x401
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d106      	bne.n	800bf02 <lfs_dir_commit+0xfa>
            dir->count += 1;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	8a9b      	ldrh	r3, [r3, #20]
 800bef8:	3301      	adds	r3, #1
 800befa:	b29a      	uxth	r2, r3
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	829a      	strh	r2, [r3, #20]
 800bf00:	e05a      	b.n	800bfb8 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800bf02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fd fde6 	bl	8009ae0 <lfs_tag_type3>
 800bf14:	4603      	mov	r3, r0
 800bf16:	461a      	mov	r2, r3
 800bf18:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d114      	bne.n	800bf4a <lfs_dir_commit+0x142>
            LFS_ASSERT(dir->count > 0);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	8a9b      	ldrh	r3, [r3, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <lfs_dir_commit+0x12e>
 800bf28:	4bac      	ldr	r3, [pc, #688]	; (800c1dc <lfs_dir_commit+0x3d4>)
 800bf2a:	4aad      	ldr	r2, [pc, #692]	; (800c1e0 <lfs_dir_commit+0x3d8>)
 800bf2c:	f240 7141 	movw	r1, #1857	; 0x741
 800bf30:	48ac      	ldr	r0, [pc, #688]	; (800c1e4 <lfs_dir_commit+0x3dc>)
 800bf32:	f013 fa3f 	bl	801f3b4 <__assert_func>
            dir->count -= 1;
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	8a9b      	ldrh	r3, [r3, #20]
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800bf42:	2301      	movs	r3, #1
 800bf44:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800bf48:	e036      	b.n	800bfb8 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800bf4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf4e:	00db      	lsls	r3, r3, #3
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	4413      	add	r3, r2
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fd fdb2 	bl	8009ac0 <lfs_tag_type1>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bf62:	d129      	bne.n	800bfb8 <lfs_dir_commit+0x1b0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800bf64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf68:	00db      	lsls	r3, r3, #3
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800bf76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	4413      	add	r3, r2
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800bf88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	4413      	add	r3, r2
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fd fdb3 	bl	8009b00 <lfs_tag_chunk>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	f003 0301 	and.w	r3, r3, #1
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	bf14      	ite	ne
 800bfa4:	2301      	movne	r3, #1
 800bfa6:	2300      	moveq	r3, #0
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	3318      	adds	r3, #24
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fd fd2f 	bl	8009a16 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800bfb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	db84      	blt.n	800bed6 <lfs_dir_commit+0xce>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800bfcc:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d045      	beq.n	800c060 <lfs_dir_commit+0x258>
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	8a9b      	ldrh	r3, [r3, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d141      	bne.n	800c060 <lfs_dir_commit+0x258>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	f107 0214 	add.w	r2, r7, #20
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f001 ffab 	bl	800df40 <lfs_fs_pred>
 800bfea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err && err != LFS_ERR_NOENT) {
 800bfee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d011      	beq.n	800c01a <lfs_dir_commit+0x212>
 800bff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bffa:	f113 0f02 	cmn.w	r3, #2
 800bffe:	d00c      	beq.n	800c01a <lfs_dir_commit+0x212>
            *dir = olddir;
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	461d      	mov	r5, r3
 800c004:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c00a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c00c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c010:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800c014:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c018:	e2a4      	b.n	800c564 <lfs_dir_commit+0x75c>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 800c01a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c01e:	f113 0f02 	cmn.w	r3, #2
 800c022:	d01d      	beq.n	800c060 <lfs_dir_commit+0x258>
 800c024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d019      	beq.n	800c060 <lfs_dir_commit+0x258>
            err = lfs_dir_drop(lfs, &pdir, dir);
 800c02c:	f107 0314 	add.w	r3, r7, #20
 800c030:	68ba      	ldr	r2, [r7, #8]
 800c032:	4619      	mov	r1, r3
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff fb11 	bl	800b65c <lfs_dir_drop>
 800c03a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (err) {
 800c03e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00c      	beq.n	800c060 <lfs_dir_commit+0x258>
                *dir = olddir;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	461d      	mov	r5, r3
 800c04a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c04e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c052:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c056:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800c05a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c05e:	e281      	b.n	800c564 <lfs_dir_commit+0x75c>
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	7d9b      	ldrb	r3, [r3, #22]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d104      	bne.n	800c072 <lfs_dir_commit+0x26a>
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	8a9b      	ldrh	r3, [r3, #20]
 800c06c:	2bfe      	cmp	r3, #254	; 0xfe
 800c06e:	f240 8130 	bls.w	800c2d2 <lfs_dir_commit+0x4ca>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800c076:	657b      	str	r3, [r7, #84]	; 0x54
            .off = dir->off,
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800c07c:	65bb      	str	r3, [r7, #88]	; 0x58
            .ptag = dir->etag,
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800c082:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c088:	663b      	str	r3, [r7, #96]	; 0x60
            .crc = 0xffffffff,

            .begin = dir->off,
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800c08e:	667b      	str	r3, [r7, #100]	; 0x64
            .end = (lfs->cfg->metadata_max ?
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800c096:	2b00      	cmp	r3, #0
 800c098:	d004      	beq.n	800c0a4 <lfs_dir_commit+0x29c>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0a0:	3b08      	subs	r3, #8
 800c0a2:	e003      	b.n	800c0ac <lfs_dir_commit+0x2a4>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0aa:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800c0ac:	66bb      	str	r3, [r7, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	3318      	adds	r3, #24
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fd fcc9 	bl	8009a4a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	68da      	ldr	r2, [r3, #12]
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c0c8:	653b      	str	r3, [r7, #80]	; 0x50
        int err = lfs_dir_traverse(lfs,
 800c0ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c0ce:	9308      	str	r3, [sp, #32]
 800c0d0:	4b45      	ldr	r3, [pc, #276]	; (800c1e8 <lfs_dir_commit+0x3e0>)
 800c0d2:	9307      	str	r3, [sp, #28]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	9306      	str	r3, [sp, #24]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9305      	str	r3, [sp, #20]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9304      	str	r3, [sp, #16]
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	9302      	str	r3, [sp, #8]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	68b9      	ldr	r1, [r7, #8]
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	f7fe f9ef 	bl	800a4d8 <lfs_dir_traverse>
 800c0fa:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	3318      	adds	r3, #24
 800c102:	4618      	mov	r0, r3
 800c104:	f7fd fc87 	bl	8009a16 <lfs_pair_fromle32>
        if (err) {
 800c108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d018      	beq.n	800c142 <lfs_dir_commit+0x33a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c114:	f113 0f1c 	cmn.w	r3, #28
 800c118:	f000 80dd 	beq.w	800c2d6 <lfs_dir_commit+0x4ce>
 800c11c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c120:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c124:	f000 80d7 	beq.w	800c2d6 <lfs_dir_commit+0x4ce>
                goto compact;
            }
            *dir = olddir;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	461d      	mov	r5, r3
 800c12c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c134:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c138:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800c13c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c140:	e210      	b.n	800c564 <lfs_dir_commit+0x75c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800c142:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c146:	2200      	movs	r2, #0
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	605a      	str	r2, [r3, #4]
 800c14c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c158:	4611      	mov	r1, r2
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fd fd1b 	bl	8009b96 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c166:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c16a:	4611      	mov	r1, r2
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fd fd12 	bl	8009b96 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800c178:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fd fd09 	bl	8009b96 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800c184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c186:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c18a:	f023 0303 	bic.w	r3, r3, #3
 800c18e:	643b      	str	r3, [r7, #64]	; 0x40
        if (!lfs_gstate_iszero(&delta)) {
 800c190:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c194:	4618      	mov	r0, r3
 800c196:	f7fd fd23 	bl	8009be0 <lfs_gstate_iszero>
 800c19a:	4603      	mov	r3, r0
 800c19c:	f083 0301 	eor.w	r3, r3, #1
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d04c      	beq.n	800c240 <lfs_dir_commit+0x438>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800c1a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	68b9      	ldr	r1, [r7, #8]
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f7fe fe72 	bl	800ae98 <lfs_dir_getgstate>
 800c1b4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 800c1b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d015      	beq.n	800c1ec <lfs_dir_commit+0x3e4>
                *dir = olddir;
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	461d      	mov	r5, r3
 800c1c4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c1c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c1d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800c1d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1d8:	e1c4      	b.n	800c564 <lfs_dir_commit+0x75c>
 800c1da:	bf00      	nop
 800c1dc:	08020f78 	.word	0x08020f78
 800c1e0:	0802502c 	.word	0x0802502c
 800c1e4:	08020d2c 	.word	0x08020d2c
 800c1e8:	0800b7af 	.word	0x0800b7af
            }

            lfs_gstate_tole32(&delta);
 800c1ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fd fd87 	bl	8009d04 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800c1f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c1fa:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800c1fe:	4aba      	ldr	r2, [pc, #744]	; (800c4e8 <lfs_dir_commit+0x6e0>)
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7fe fff5 	bl	800b1f0 <lfs_dir_commitattr>
 800c206:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800c20a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d016      	beq.n	800c240 <lfs_dir_commit+0x438>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c212:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c216:	f113 0f1c 	cmn.w	r3, #28
 800c21a:	d05e      	beq.n	800c2da <lfs_dir_commit+0x4d2>
 800c21c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c220:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c224:	d059      	beq.n	800c2da <lfs_dir_commit+0x4d2>
                    goto compact;
                }
                *dir = olddir;
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	461d      	mov	r5, r3
 800c22a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c22e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c232:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c236:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800c23a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c23e:	e191      	b.n	800c564 <lfs_dir_commit+0x75c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800c240:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c244:	4619      	mov	r1, r3
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7ff f852 	bl	800b2f0 <lfs_dir_commitcrc>
 800c24c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if (err) {
 800c250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c254:	2b00      	cmp	r3, #0
 800c256:	d016      	beq.n	800c286 <lfs_dir_commit+0x47e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c25c:	f113 0f1c 	cmn.w	r3, #28
 800c260:	d03d      	beq.n	800c2de <lfs_dir_commit+0x4d6>
 800c262:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c266:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c26a:	d038      	beq.n	800c2de <lfs_dir_commit+0x4d6>
                goto compact;
            }
            *dir = olddir;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	461d      	mov	r5, r3
 800c270:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c278:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c27c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800c280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c284:	e16e      	b.n	800c564 <lfs_dir_commit+0x75c>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800c286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c28c:	6a12      	ldr	r2, [r2, #32]
 800c28e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c292:	fb01 f202 	mul.w	r2, r1, r2
 800c296:	1a9b      	subs	r3, r3, r2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d006      	beq.n	800c2aa <lfs_dir_commit+0x4a2>
 800c29c:	4b93      	ldr	r3, [pc, #588]	; (800c4ec <lfs_dir_commit+0x6e4>)
 800c29e:	4a94      	ldr	r2, [pc, #592]	; (800c4f0 <lfs_dir_commit+0x6e8>)
 800c2a0:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 800c2a4:	4893      	ldr	r0, [pc, #588]	; (800c4f4 <lfs_dir_commit+0x6ec>)
 800c2a6:	f013 f885 	bl	801f3b4 <__assert_func>
        dir->off = commit.off;
 800c2aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800c2b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	333c      	adds	r3, #60	; 0x3c
 800c2bc:	3230      	adds	r2, #48	; 0x30
 800c2be:	ca07      	ldmia	r2, {r0, r1, r2}
 800c2c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3348      	adds	r3, #72	; 0x48
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	601a      	str	r2, [r3, #0]
 800c2cc:	605a      	str	r2, [r3, #4]
 800c2ce:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 800c2d0:	e02c      	b.n	800c32c <lfs_dir_commit+0x524>
    } else {
compact:
 800c2d2:	bf00      	nop
 800c2d4:	e004      	b.n	800c2e0 <lfs_dir_commit+0x4d8>
                goto compact;
 800c2d6:	bf00      	nop
 800c2d8:	e002      	b.n	800c2e0 <lfs_dir_commit+0x4d8>
                    goto compact;
 800c2da:	bf00      	nop
 800c2dc:	e000      	b.n	800c2e0 <lfs_dir_commit+0x4d8>
                goto compact;
 800c2de:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3310      	adds	r3, #16
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7fc ffc6 	bl	8009278 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	8a9b      	ldrh	r3, [r3, #20]
 800c2f0:	9302      	str	r3, [sp, #8]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	9301      	str	r3, [sp, #4]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	68b9      	ldr	r1, [r7, #8]
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f7ff fa69 	bl	800b7d8 <lfs_dir_compact>
 800c306:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                dir, 0, dir->count);
        if (err) {
 800c30a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00c      	beq.n	800c32c <lfs_dir_commit+0x524>
            *dir = olddir;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	461d      	mov	r5, r3
 800c316:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c31a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c31c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c31e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c322:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800c326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c32a:	e11b      	b.n	800c564 <lfs_dir_commit+0x75c>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c330:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c334:	e0c1      	b.n	800c4ba <lfs_dir_commit+0x6b2>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800c336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c33a:	3308      	adds	r3, #8
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	429a      	cmp	r2, r3
 800c340:	f000 80b6 	beq.w	800c4b0 <lfs_dir_commit+0x6a8>
 800c344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c348:	3308      	adds	r3, #8
 800c34a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c34e:	4611      	mov	r1, r2
 800c350:	4618      	mov	r0, r3
 800c352:	f7fd fb09 	bl	8009968 <lfs_pair_cmp>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f040 80a9 	bne.w	800c4b0 <lfs_dir_commit+0x6a8>
            d->m = *dir;
 800c35e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	f103 0408 	add.w	r4, r3, #8
 800c368:	4615      	mov	r5, r2
 800c36a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c36c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c36e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
 800c376:	2300      	movs	r3, #0
 800c378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c37c:	e092      	b.n	800c4a4 <lfs_dir_commit+0x69c>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c37e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	4413      	add	r3, r2
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fd fba8 	bl	8009ae0 <lfs_tag_type3>
 800c390:	4603      	mov	r3, r0
 800c392:	461a      	mov	r2, r3
 800c394:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800c398:	429a      	cmp	r2, r3
 800c39a:	d119      	bne.n	800c3d0 <lfs_dir_commit+0x5c8>
                        d->id == lfs_tag_id(attrs[i].tag)) {
 800c39c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3a0:	889c      	ldrh	r4, [r3, #4]
 800c3a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fd fbc0 	bl	8009b34 <lfs_tag_id>
 800c3b4:	4603      	mov	r3, r0
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c3b6:	429c      	cmp	r4, r3
 800c3b8:	d10a      	bne.n	800c3d0 <lfs_dir_commit+0x5c8>
                    d->m.pair[0] = LFS_BLOCK_NULL;
 800c3ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3c2:	609a      	str	r2, [r3, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
 800c3c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3cc:	60da      	str	r2, [r3, #12]
 800c3ce:	e064      	b.n	800c49a <lfs_dir_commit+0x692>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c3d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c3d4:	00db      	lsls	r3, r3, #3
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	4413      	add	r3, r2
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fd fb7f 	bl	8009ae0 <lfs_tag_type3>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d123      	bne.n	800c436 <lfs_dir_commit+0x62e>
                        d->id > lfs_tag_id(attrs[i].tag)) {
 800c3ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3f2:	889c      	ldrh	r4, [r3, #4]
 800c3f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c3f8:	00db      	lsls	r3, r3, #3
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4618      	mov	r0, r3
 800c402:	f7fd fb97 	bl	8009b34 <lfs_tag_id>
 800c406:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c408:	429c      	cmp	r4, r3
 800c40a:	d914      	bls.n	800c436 <lfs_dir_commit+0x62e>
                    d->id -= 1;
 800c40c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c410:	889b      	ldrh	r3, [r3, #4]
 800c412:	3b01      	subs	r3, #1
 800c414:	b29a      	uxth	r2, r3
 800c416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c41a:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800c41c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c420:	799b      	ldrb	r3, [r3, #6]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d139      	bne.n	800c49a <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos -= 1;
 800c426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42c:	1e5a      	subs	r2, r3, #1
 800c42e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c432:	629a      	str	r2, [r3, #40]	; 0x28
                    if (d->type == LFS_TYPE_DIR) {
 800c434:	e031      	b.n	800c49a <lfs_dir_commit+0x692>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800c436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c43a:	00db      	lsls	r3, r3, #3
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	4413      	add	r3, r2
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4618      	mov	r0, r3
 800c444:	f7fd fb4c 	bl	8009ae0 <lfs_tag_type3>
 800c448:	4603      	mov	r3, r0
 800c44a:	461a      	mov	r2, r3
 800c44c:	f240 4301 	movw	r3, #1025	; 0x401
 800c450:	429a      	cmp	r2, r3
 800c452:	d122      	bne.n	800c49a <lfs_dir_commit+0x692>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
 800c454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c458:	889c      	ldrh	r4, [r3, #4]
 800c45a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c45e:	00db      	lsls	r3, r3, #3
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	4413      	add	r3, r2
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4618      	mov	r0, r3
 800c468:	f7fd fb64 	bl	8009b34 <lfs_tag_id>
 800c46c:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800c46e:	429c      	cmp	r4, r3
 800c470:	d313      	bcc.n	800c49a <lfs_dir_commit+0x692>
                    d->id += 1;
 800c472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c476:	889b      	ldrh	r3, [r3, #4]
 800c478:	3301      	adds	r3, #1
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c480:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800c482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c486:	799b      	ldrb	r3, [r3, #6]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d106      	bne.n	800c49a <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos += 1;
 800c48c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c492:	1c5a      	adds	r2, r3, #1
 800c494:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c498:	629a      	str	r2, [r3, #40]	; 0x28
            for (int i = 0; i < attrcount; i++) {
 800c49a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c49e:	3301      	adds	r3, #1
 800c4a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c4a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	f6ff af67 	blt.w	800c37e <lfs_dir_commit+0x576>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c4b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c4ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f47f af39 	bne.w	800c336 <lfs_dir_commit+0x52e>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4cc:	e045      	b.n	800c55a <lfs_dir_commit+0x752>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800c4ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4d2:	3308      	adds	r3, #8
 800c4d4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c4d8:	4611      	mov	r1, r2
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fd fa44 	bl	8009968 <lfs_pair_cmp>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d134      	bne.n	800c550 <lfs_dir_commit+0x748>
            while (d->id >= d->m.count && d->m.split) {
 800c4e6:	e026      	b.n	800c536 <lfs_dir_commit+0x72e>
 800c4e8:	7ffffc0c 	.word	0x7ffffc0c
 800c4ec:	08020eb8 	.word	0x08020eb8
 800c4f0:	0802502c 	.word	0x0802502c
 800c4f4:	08020d2c 	.word	0x08020d2c
                // we split and id is on tail now
                d->id -= d->m.count;
 800c4f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4fc:	889a      	ldrh	r2, [r3, #4]
 800c4fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c502:	8b9b      	ldrh	r3, [r3, #28]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	b29a      	uxth	r2, r3
 800c508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c50c:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800c50e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c512:	f103 0108 	add.w	r1, r3, #8
 800c516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c51a:	3320      	adds	r3, #32
 800c51c:	461a      	mov	r2, r3
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f7fe fc9e 	bl	800ae60 <lfs_dir_fetch>
 800c524:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 800c528:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d002      	beq.n	800c536 <lfs_dir_commit+0x72e>
                    return err;
 800c530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c534:	e016      	b.n	800c564 <lfs_dir_commit+0x75c>
            while (d->id >= d->m.count && d->m.split) {
 800c536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c53a:	889a      	ldrh	r2, [r3, #4]
 800c53c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c540:	8b9b      	ldrh	r3, [r3, #28]
 800c542:	429a      	cmp	r2, r3
 800c544:	d304      	bcc.n	800c550 <lfs_dir_commit+0x748>
 800c546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c54a:	7fdb      	ldrb	r3, [r3, #31]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1d3      	bne.n	800c4f8 <lfs_dir_commit+0x6f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c55a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1b5      	bne.n	800c4ce <lfs_dir_commit+0x6c6>
                }
            }
        }
    }

    return 0;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	37b8      	adds	r7, #184	; 0xb8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bdb0      	pop	{r4, r5, r7, pc}

0800c56c <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 800c56c:	b5b0      	push	{r4, r5, r7, lr}
 800c56e:	b0b8      	sub	sp, #224	; 0xe0
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f002 f90c 	bl	800e794 <lfs_fs_forceconsistency>
 800c57c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800c580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <lfs_rawmkdir+0x22>
        return err;
 800c588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c58c:	e128      	b.n	800c7e0 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 800c596:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 800c59a:	463a      	mov	r2, r7
 800c59c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c5a0:	f103 0108 	add.w	r1, r3, #8
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7fe fcf2 	bl	800af90 <lfs_dir_find>
 800c5ac:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 800c5b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5b4:	f113 0f02 	cmn.w	r3, #2
 800c5b8:	d105      	bne.n	800c5c6 <lfs_rawmkdir+0x5a>
 800c5ba:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c5be:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d109      	bne.n	800c5da <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 800c5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	da02      	bge.n	800c5d4 <lfs_rawmkdir+0x68>
 800c5ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5d2:	e105      	b.n	800c7e0 <lfs_rawmkdir+0x274>
 800c5d4:	f06f 0310 	mvn.w	r3, #16
 800c5d8:	e102      	b.n	800c7e0 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7f3 fdf7 	bl	80001d0 <strlen>
 800c5e2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ea:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d902      	bls.n	800c5f8 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 800c5f2:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800c5f6:	e0f3      	b.n	800c7e0 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f7fd fc62 	bl	8009ec2 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 800c5fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7fe ffaf 	bl	800b568 <lfs_dir_alloc>
 800c60a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800c60e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c612:	2b00      	cmp	r3, #0
 800c614:	d002      	beq.n	800c61c <lfs_rawmkdir+0xb0>
        return err;
 800c616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c61a:	e0e1      	b.n	800c7e0 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 800c61c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c620:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800c624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c628:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c62c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 800c630:	e012      	b.n	800c658 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 800c632:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c636:	f103 0218 	add.w	r2, r3, #24
 800c63a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c63e:	4619      	mov	r1, r3
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7fe fc0d 	bl	800ae60 <lfs_dir_fetch>
 800c646:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800c64a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d002      	beq.n	800c658 <lfs_rawmkdir+0xec>
            return err;
 800c652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c656:	e0c3      	b.n	800c7e0 <lfs_rawmkdir+0x274>
    while (pred.split) {
 800c658:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d1e8      	bne.n	800c632 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 800c660:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c664:	3318      	adds	r3, #24
 800c666:	4618      	mov	r0, r3
 800c668:	f7fd f9ef 	bl	8009a4a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 800c66c:	4b5e      	ldr	r3, [pc, #376]	; (800c7e8 <lfs_rawmkdir+0x27c>)
 800c66e:	667b      	str	r3, [r7, #100]	; 0x64
 800c670:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c674:	3318      	adds	r3, #24
 800c676:	66bb      	str	r3, [r7, #104]	; 0x68
 800c678:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800c67c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800c680:	2301      	movs	r3, #1
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f7ff fbc0 	bl	800be08 <lfs_dir_commit>
 800c688:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 800c68c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c690:	3318      	adds	r3, #24
 800c692:	4618      	mov	r0, r3
 800c694:	f7fd f9bf 	bl	8009a16 <lfs_pair_fromle32>
    if (err) {
 800c698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <lfs_rawmkdir+0x13a>
        return err;
 800c6a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6a4:	e09c      	b.n	800c7e0 <lfs_rawmkdir+0x274>
    }

    // current block end of list?
    if (cwd.m.split) {
 800c6a6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d04c      	beq.n	800c748 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 800c6ae:	2101      	movs	r1, #1
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f001 fe8d 	bl	800e3d0 <lfs_fs_preporphans>
 800c6b6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800c6ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <lfs_rawmkdir+0x15c>
            return err;
 800c6c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6c6:	e08b      	b.n	800c7e0 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800c6da:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 800c6dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fd f9b2 	bl	8009a4a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 800c6e6:	4b40      	ldr	r3, [pc, #256]	; (800c7e8 <lfs_rawmkdir+0x27c>)
 800c6e8:	617b      	str	r3, [r7, #20]
 800c6ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c6ee:	61bb      	str	r3, [r7, #24]
 800c6f0:	f107 0214 	add.w	r2, r7, #20
 800c6f4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7ff fb84 	bl	800be08 <lfs_dir_commit>
 800c700:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 800c704:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fd f984 	bl	8009a16 <lfs_pair_fromle32>
        if (err) {
 800c70e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c712:	2b00      	cmp	r3, #0
 800c714:	d006      	beq.n	800c724 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 800c716:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 800c71e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c722:	e05d      	b.n	800c7e0 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 800c724:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 800c72c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f001 fe4d 	bl	800e3d0 <lfs_fs_preporphans>
 800c736:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800c73a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <lfs_rawmkdir+0x1dc>
            return err;
 800c742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c746:	e04b      	b.n	800c7e0 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 800c748:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fd f97c 	bl	8009a4a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 800c752:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c756:	029b      	lsls	r3, r3, #10
 800c758:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c75c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c760:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c762:	2300      	movs	r3, #0
 800c764:	643b      	str	r3, [r7, #64]	; 0x40
 800c766:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c76a:	029a      	lsls	r2, r3, #10
 800c76c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c770:	4313      	orrs	r3, r2
 800c772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c776:	647b      	str	r3, [r7, #68]	; 0x44
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c77c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c780:	029b      	lsls	r3, r3, #10
 800c782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c786:	f043 0308 	orr.w	r3, r3, #8
 800c78a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c78c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c790:	653b      	str	r3, [r7, #80]	; 0x50
 800c792:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c796:	f083 0301 	eor.w	r3, r3, #1
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <lfs_rawmkdir+0x238>
 800c7a0:	4b11      	ldr	r3, [pc, #68]	; (800c7e8 <lfs_rawmkdir+0x27c>)
 800c7a2:	e000      	b.n	800c7a6 <lfs_rawmkdir+0x23a>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	657b      	str	r3, [r7, #84]	; 0x54
 800c7a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c7ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c7b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c7b6:	f103 0108 	add.w	r1, r3, #8
 800c7ba:	2304      	movs	r3, #4
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7ff fb23 	bl	800be08 <lfs_dir_commit>
 800c7c2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 800c7c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fd f923 	bl	8009a16 <lfs_pair_fromle32>
    if (err) {
 800c7d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <lfs_rawmkdir+0x272>
        return err;
 800c7d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7dc:	e000      	b.n	800c7e0 <lfs_rawmkdir+0x274>
    }

    return 0;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	37e0      	adds	r7, #224	; 0xe0
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bdb0      	pop	{r4, r5, r7, pc}
 800c7e8:	600ffc08 	.word	0x600ffc08

0800c7ec <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800c7ec:	b590      	push	{r4, r7, lr}
 800c7ee:	b087      	sub	sp, #28
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c802:	3b08      	subs	r3, #8
 800c804:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c80e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <lfs_ctz_index+0x2e>
        return 0;
 800c816:	2300      	movs	r3, #0
 800c818:	e01c      	b.n	800c854 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	4618      	mov	r0, r3
 800c820:	f7fc fcca 	bl	80091b8 <lfs_popc>
 800c824:	4603      	mov	r3, r0
 800c826:	3302      	adds	r3, #2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	1ad2      	subs	r2, r2, r3
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	fbb2 f3f3 	udiv	r3, r2, r3
 800c834:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	fb02 f303 	mul.w	r3, r2, r3
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	1ad4      	subs	r4, r2, r3
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f7fc fcb8 	bl	80091b8 <lfs_popc>
 800c848:	4603      	mov	r3, r0
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	1ae2      	subs	r2, r4, r3
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	601a      	str	r2, [r3, #0]
    return i;
 800c852:	68fb      	ldr	r3, [r7, #12]
}
 800c854:	4618      	mov	r0, r3
 800c856:	371c      	adds	r7, #28
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd90      	pop	{r4, r7, pc}

0800c85c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800c85c:	b590      	push	{r4, r7, lr}
 800c85e:	b08f      	sub	sp, #60	; 0x3c
 800c860:	af04      	add	r7, sp, #16
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800c86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d108      	bne.n	800c882 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800c870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c876:	601a      	str	r2, [r3, #0]
        *off = 0;
 800c878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c87a:	2200      	movs	r2, #0
 800c87c:	601a      	str	r2, [r3, #0]
        return 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	e053      	b.n	800c92a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800c882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c884:	3b01      	subs	r3, #1
 800c886:	617b      	str	r3, [r7, #20]
 800c888:	f107 0314 	add.w	r3, r7, #20
 800c88c:	4619      	mov	r1, r3
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f7ff ffac 	bl	800c7ec <lfs_ctz_index>
 800c894:	4603      	mov	r3, r0
 800c896:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800c898:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c89c:	4619      	mov	r1, r3
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f7ff ffa4 	bl	800c7ec <lfs_ctz_index>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800c8a8:	e034      	b.n	800c914 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800c8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	1ad3      	subs	r3, r2, r3
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fc fc61 	bl	800917a <lfs_npw2>
 800c8b8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800c8ba:	1e5c      	subs	r4, r3, #1
 800c8bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8be:	f7fc fc6c 	bl	800919a <lfs_ctz>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f7fc fc20 	bl	800910c <lfs_min>
 800c8cc:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	69fa      	ldr	r2, [r7, #28]
 800c8d2:	0092      	lsls	r2, r2, #2
 800c8d4:	2104      	movs	r1, #4
 800c8d6:	9103      	str	r1, [sp, #12]
 800c8d8:	4639      	mov	r1, r7
 800c8da:	9102      	str	r1, [sp, #8]
 800c8dc:	9201      	str	r2, [sp, #4]
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	2304      	movs	r3, #4
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	68b9      	ldr	r1, [r7, #8]
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f7fc fcec 	bl	80092c4 <lfs_bd_read>
 800c8ec:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fc fc7b 	bl	80091ec <lfs_fromle32>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	603b      	str	r3, [r7, #0]
        if (err) {
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <lfs_ctz_find+0xa8>
            return err;
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	e012      	b.n	800c92a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800c904:	2201      	movs	r2, #1
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	fa02 f303 	lsl.w	r3, r2, r3
 800c90c:	461a      	mov	r2, r3
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	1a9b      	subs	r3, r3, r2
 800c912:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800c914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d8c6      	bhi.n	800c8aa <lfs_ctz_find+0x4e>
    }

    *block = head;
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c920:	601a      	str	r2, [r3, #0]
    *off = pos;
 800c922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c926:	601a      	str	r2, [r3, #0]
    return 0;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	372c      	adds	r7, #44	; 0x2c
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd90      	pop	{r4, r7, pc}
	...

0800c934 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800c934:	b580      	push	{r7, lr}
 800c936:	b092      	sub	sp, #72	; 0x48
 800c938:	af04      	add	r7, sp, #16
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800c942:	f107 0320 	add.w	r3, r7, #32
 800c946:	4619      	mov	r1, r3
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7fd fadb 	bl	8009f04 <lfs_alloc>
 800c94e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <lfs_ctz_extend+0x26>
            return err;
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	e0e9      	b.n	800cb2e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800c95a:	6a3b      	ldr	r3, [r7, #32]
 800c95c:	4619      	mov	r1, r3
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f7fc ffa2 	bl	80098a8 <lfs_bd_erase>
 800c964:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d006      	beq.n	800c97a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800c96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c972:	f000 80cb 	beq.w	800cb0c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800c976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c978:	e0d9      	b.n	800cb2e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800c97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d107      	bne.n	800c990 <lfs_ctz_extend+0x5c>
                *block = nblock;
 800c980:	6a3a      	ldr	r2, [r7, #32]
 800c982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c984:	601a      	str	r2, [r3, #0]
                *off = 0;
 800c986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c988:	2200      	movs	r2, #0
 800c98a:	601a      	str	r2, [r3, #0]
                return 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	e0ce      	b.n	800cb2e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800c990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c992:	3b01      	subs	r3, #1
 800c994:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800c996:	f107 031c 	add.w	r3, r7, #28
 800c99a:	4619      	mov	r1, r3
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f7ff ff25 	bl	800c7ec <lfs_ctz_index>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d044      	beq.n	800ca42 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c9bc:	e035      	b.n	800ca2a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800c9be:	69fa      	ldr	r2, [r7, #28]
 800c9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c2:	1ad2      	subs	r2, r2, r3
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	9303      	str	r3, [sp, #12]
 800c9c8:	f107 0317 	add.w	r3, r7, #23
 800c9cc:	9302      	str	r3, [sp, #8]
 800c9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	2100      	movs	r1, #0
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f7fc fc71 	bl	80092c4 <lfs_bd_read>
 800c9e2:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <lfs_ctz_extend+0xba>
                        return err;
 800c9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ec:	e09f      	b.n	800cb2e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	9203      	str	r2, [sp, #12]
 800c9f4:	f107 0217 	add.w	r2, r7, #23
 800c9f8:	9202      	str	r2, [sp, #8]
 800c9fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9fc:	9201      	str	r2, [sp, #4]
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	2301      	movs	r3, #1
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	68b9      	ldr	r1, [r7, #8]
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f7fc fea2 	bl	8009750 <lfs_bd_prog>
 800ca0c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800ca0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d007      	beq.n	800ca24 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca16:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ca1a:	d101      	bne.n	800ca20 <lfs_ctz_extend+0xec>
                            goto relocate;
 800ca1c:	bf00      	nop
                    goto relocate;
 800ca1e:	e075      	b.n	800cb0c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800ca20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800ca22:	e084      	b.n	800cb2e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 800ca24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca26:	3301      	adds	r3, #1
 800ca28:	637b      	str	r3, [r7, #52]	; 0x34
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d3c5      	bcc.n	800c9be <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800ca32:	6a3a      	ldr	r2, [r7, #32]
 800ca34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca36:	601a      	str	r2, [r3, #0]
                *off = noff;
 800ca38:	69fa      	ldr	r2, [r7, #28]
 800ca3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca3c:	601a      	str	r2, [r3, #0]
                return 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	e075      	b.n	800cb2e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800ca42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca44:	3301      	adds	r3, #1
 800ca46:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800ca48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca4a:	f7fc fba6 	bl	800919a <lfs_ctz>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	3301      	adds	r3, #1
 800ca52:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800ca58:	2300      	movs	r3, #0
 800ca5a:	633b      	str	r3, [r7, #48]	; 0x30
 800ca5c:	e049      	b.n	800caf2 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fc fbce 	bl	8009202 <lfs_tole32>
 800ca66:	4603      	mov	r3, r0
 800ca68:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800ca6a:	6a3b      	ldr	r3, [r7, #32]
 800ca6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca6e:	0092      	lsls	r2, r2, #2
 800ca70:	2104      	movs	r1, #4
 800ca72:	9103      	str	r1, [sp, #12]
 800ca74:	f107 0118 	add.w	r1, r7, #24
 800ca78:	9102      	str	r1, [sp, #8]
 800ca7a:	9201      	str	r2, [sp, #4]
 800ca7c:	9300      	str	r3, [sp, #0]
 800ca7e:	2301      	movs	r3, #1
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	68b9      	ldr	r1, [r7, #8]
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f7fc fe63 	bl	8009750 <lfs_bd_prog>
 800ca8a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fc fbac 	bl	80091ec <lfs_fromle32>
 800ca94:	4603      	mov	r3, r0
 800ca96:	61bb      	str	r3, [r7, #24]
                if (err) {
 800ca98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d005      	beq.n	800caaa <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800ca9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800caa4:	d034      	beq.n	800cb10 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800caa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa8:	e041      	b.n	800cb2e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	3b01      	subs	r3, #1
 800caae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d01b      	beq.n	800caec <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cab8:	0092      	lsls	r2, r2, #2
 800caba:	2104      	movs	r1, #4
 800cabc:	9103      	str	r1, [sp, #12]
 800cabe:	f107 0118 	add.w	r1, r7, #24
 800cac2:	9102      	str	r1, [sp, #8]
 800cac4:	9201      	str	r2, [sp, #4]
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	2304      	movs	r3, #4
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	2100      	movs	r1, #0
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f7fc fbf8 	bl	80092c4 <lfs_bd_read>
 800cad4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fc fb87 	bl	80091ec <lfs_fromle32>
 800cade:	4603      	mov	r3, r0
 800cae0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <lfs_ctz_extend+0x1b8>
                        return err;
 800cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caea:	e020      	b.n	800cb2e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800caec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caee:	3301      	adds	r3, #1
 800caf0:	633b      	str	r3, [r7, #48]	; 0x30
 800caf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d3b1      	bcc.n	800ca5e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800cafa:	6a3a      	ldr	r2, [r7, #32]
 800cafc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cafe:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	009a      	lsls	r2, r3, #2
 800cb04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb06:	601a      	str	r2, [r3, #0]
            return 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e010      	b.n	800cb2e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800cb0c:	bf00      	nop
 800cb0e:	e000      	b.n	800cb12 <lfs_ctz_extend+0x1de>
                        goto relocate;
 800cb10:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800cb12:	6a3b      	ldr	r3, [r7, #32]
 800cb14:	4a08      	ldr	r2, [pc, #32]	; (800cb38 <lfs_ctz_extend+0x204>)
 800cb16:	9200      	str	r2, [sp, #0]
 800cb18:	f640 126a 	movw	r2, #2410	; 0x96a
 800cb1c:	4907      	ldr	r1, [pc, #28]	; (800cb3c <lfs_ctz_extend+0x208>)
 800cb1e:	4808      	ldr	r0, [pc, #32]	; (800cb40 <lfs_ctz_extend+0x20c>)
 800cb20:	f012 fec4 	bl	801f8ac <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800cb24:	68b9      	ldr	r1, [r7, #8]
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7fc fba6 	bl	8009278 <lfs_cache_drop>
    while (true) {
 800cb2c:	e709      	b.n	800c942 <lfs_ctz_extend+0xe>
    }
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3738      	adds	r7, #56	; 0x38
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	08020e38 	.word	0x08020e38
 800cb3c:	08020d2c 	.word	0x08020d2c
 800cb40:	08020ee0 	.word	0x08020ee0

0800cb44 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b090      	sub	sp, #64	; 0x40
 800cb48:	af04      	add	r7, sp, #16
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800cb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d101      	bne.n	800cb5c <lfs_ctz_traverse+0x18>
        return 0;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e06b      	b.n	800cc34 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	61fb      	str	r3, [r7, #28]
 800cb62:	f107 031c 	add.w	r3, r7, #28
 800cb66:	4619      	mov	r1, r3
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f7ff fe3f 	bl	800c7ec <lfs_ctz_index>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800cb72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb74:	6839      	ldr	r1, [r7, #0]
 800cb76:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cb78:	4798      	blx	r3
 800cb7a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d001      	beq.n	800cb86 <lfs_ctz_traverse+0x42>
            return err;
 800cb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb84:	e056      	b.n	800cc34 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <lfs_ctz_traverse+0x4c>
            return 0;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	e051      	b.n	800cc34 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	f1c3 0302 	rsb	r3, r3, #2
 800cb9a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800cb9e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800cba0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800cba2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800cba4:	9303      	str	r3, [sp, #12]
 800cba6:	f107 0314 	add.w	r3, r7, #20
 800cbaa:	9302      	str	r3, [sp, #8]
 800cbac:	2300      	movs	r3, #0
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	68b9      	ldr	r1, [r7, #8]
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f7fc fb82 	bl	80092c4 <lfs_bd_read>
 800cbc0:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fc fb11 	bl	80091ec <lfs_fromle32>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fc fb0b 	bl	80091ec <lfs_fromle32>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	61bb      	str	r3, [r7, #24]
        if (err) {
 800cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <lfs_ctz_traverse+0xa0>
            return err;
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	e027      	b.n	800cc34 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbe8:	e012      	b.n	800cc10 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800cbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	3330      	adds	r3, #48	; 0x30
 800cbf0:	443b      	add	r3, r7
 800cbf2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800cbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cbfc:	4798      	blx	r3
 800cbfe:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d001      	beq.n	800cc0a <lfs_ctz_traverse+0xc6>
                return err;
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	e014      	b.n	800cc34 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800cc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc10:	6a3b      	ldr	r3, [r7, #32]
 800cc12:	3b01      	subs	r3, #1
 800cc14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc16:	429a      	cmp	r2, r3
 800cc18:	dbe7      	blt.n	800cbea <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800cc1a:	6a3b      	ldr	r3, [r7, #32]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	3330      	adds	r3, #48	; 0x30
 800cc22:	443b      	add	r3, r7
 800cc24:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800cc28:	603b      	str	r3, [r7, #0]
        index -= count;
 800cc2a:	6a3b      	ldr	r3, [r7, #32]
 800cc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800cc32:	e79e      	b.n	800cb72 <lfs_ctz_traverse+0x2e>
    }
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3730      	adds	r7, #48	; 0x30
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <lfs_file_relocate>:
    return err;
}


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800cc3c:	b590      	push	{r4, r7, lr}
 800cc3e:	b08d      	sub	sp, #52	; 0x34
 800cc40:	af06      	add	r7, sp, #24
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800cc46:	f107 030c 	add.w	r3, r7, #12
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7fd f959 	bl	8009f04 <lfs_alloc>
 800cc52:	6138      	str	r0, [r7, #16]
        if (err) {
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <lfs_file_relocate+0x22>
            return err;
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	e0bb      	b.n	800cdd6 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	4619      	mov	r1, r3
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7fc fe20 	bl	80098a8 <lfs_bd_erase>
 800cc68:	6138      	str	r0, [r7, #16]
        if (err) {
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d006      	beq.n	800cc7e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cc76:	f000 809b 	beq.w	800cdb0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	e0ab      	b.n	800cdd6 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800cc7e:	2300      	movs	r3, #0
 800cc80:	617b      	str	r3, [r7, #20]
 800cc82:	e069      	b.n	800cd58 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d027      	beq.n	800cce0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	f103 0008 	add.w	r0, r3, #8
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	889b      	ldrh	r3, [r3, #4]
 800cca8:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800ccaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ccae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	9105      	str	r1, [sp, #20]
 800ccb6:	f107 010b 	add.w	r1, r7, #11
 800ccba:	9104      	str	r1, [sp, #16]
 800ccbc:	6979      	ldr	r1, [r7, #20]
 800ccbe:	9103      	str	r1, [sp, #12]
 800ccc0:	9302      	str	r3, [sp, #8]
 800ccc2:	4b47      	ldr	r3, [pc, #284]	; (800cde0 <lfs_file_relocate+0x1a4>)
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	9200      	str	r2, [sp, #0]
 800ccc8:	4623      	mov	r3, r4
 800ccca:	2200      	movs	r2, #0
 800cccc:	4601      	mov	r1, r0
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7fd facd 	bl	800a26e <lfs_dir_getread>
 800ccd4:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d01e      	beq.n	800cd1a <lfs_file_relocate+0xde>
                    return err;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	e07a      	b.n	800cdd6 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800cce6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	1ad4      	subs	r4, r2, r3
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	9203      	str	r2, [sp, #12]
 800ccf8:	f107 020b 	add.w	r2, r7, #11
 800ccfc:	9202      	str	r2, [sp, #8]
 800ccfe:	697a      	ldr	r2, [r7, #20]
 800cd00:	9201      	str	r2, [sp, #4]
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	4623      	mov	r3, r4
 800cd06:	4602      	mov	r2, r0
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7fc fadb 	bl	80092c4 <lfs_bd_read>
 800cd0e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d001      	beq.n	800cd1a <lfs_file_relocate+0xde>
                    return err;
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	e05d      	b.n	800cdd6 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f103 0110 	add.w	r1, r3, #16
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2201      	movs	r2, #1
 800cd26:	9203      	str	r2, [sp, #12]
 800cd28:	f107 020b 	add.w	r2, r7, #11
 800cd2c:	9202      	str	r2, [sp, #8]
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	9201      	str	r2, [sp, #4]
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	2301      	movs	r3, #1
 800cd36:	4602      	mov	r2, r0
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7fc fd09 	bl	8009750 <lfs_bd_prog>
 800cd3e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d005      	beq.n	800cd52 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cd4c:	d032      	beq.n	800cdb4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	e041      	b.n	800cdd6 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	3301      	adds	r3, #1
 800cd56:	617b      	str	r3, [r7, #20]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5c:	697a      	ldr	r2, [r7, #20]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d390      	bcc.n	800cc84 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	69d9      	ldr	r1, [r3, #28]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd70:	461a      	mov	r2, r3
 800cd72:	f013 f800 	bl	801fd76 <memcpy>
        file->cache.block = lfs->pcache.block;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	691a      	ldr	r2, [r3, #16]
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	695a      	ldr	r2, [r3, #20]
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699a      	ldr	r2, [r3, #24]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3310      	adds	r3, #16
 800cd92:	4619      	mov	r1, r3
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7fc fa7e 	bl	8009296 <lfs_cache_zero>

        file->block = nblock;
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	e012      	b.n	800cdd6 <lfs_file_relocate+0x19a>
                goto relocate;
 800cdb0:	bf00      	nop
 800cdb2:	e000      	b.n	800cdb6 <lfs_file_relocate+0x17a>
                    goto relocate;
 800cdb4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	4a0a      	ldr	r2, [pc, #40]	; (800cde4 <lfs_file_relocate+0x1a8>)
 800cdba:	9200      	str	r2, [sp, #0]
 800cdbc:	f640 229b 	movw	r2, #2715	; 0xa9b
 800cdc0:	4909      	ldr	r1, [pc, #36]	; (800cde8 <lfs_file_relocate+0x1ac>)
 800cdc2:	480a      	ldr	r0, [pc, #40]	; (800cdec <lfs_file_relocate+0x1b0>)
 800cdc4:	f012 fd72 	bl	801f8ac <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	3310      	adds	r3, #16
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7fc fa52 	bl	8009278 <lfs_cache_drop>
    while (true) {
 800cdd4:	e737      	b.n	800cc46 <lfs_file_relocate+0xa>
    }
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	371c      	adds	r7, #28
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd90      	pop	{r4, r7, pc}
 800cdde:	bf00      	nop
 800cde0:	fff7fc00 	.word	0xfff7fc00
 800cde4:	08020e38 	.word	0x08020e38
 800cde8:	08020d2c 	.word	0x08020d2c
 800cdec:	08020ee0 	.word	0x08020ee0

0800cdf0 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7fd f85d 	bl	8009ec2 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff ff16 	bl	800cc3c <lfs_file_relocate>
 800ce10:	60f8      	str	r0, [r7, #12]
    if (err) {
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <lfs_file_outline+0x2c>
        return err;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	e006      	b.n	800ce2a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <lfs_file_flush>:
#endif

#ifndef LFS_READONLY
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800ce34:	b590      	push	{r4, r7, lr}
 800ce36:	b09f      	sub	sp, #124	; 0x7c
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d011      	beq.n	800ce6e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d105      	bne.n	800ce62 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	3340      	adds	r3, #64	; 0x40
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7fc fa0b 	bl	8009278 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce66:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	f000 80a4 	beq.w	800cfc4 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce80:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d176      	bne.n	800cf7c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800ce8e:	f107 030c 	add.w	r3, r7, #12
 800ce92:	2254      	movs	r2, #84	; 0x54
 800ce94:	2100      	movs	r1, #0
 800ce96:	4618      	mov	r0, r3
 800ce98:	f012 fe5e 	bl	801fb58 <memset>
                .ctz.head = file->ctz.head,
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 800cea0:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800cea6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cea8:	2301      	movs	r3, #1
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 800ceb0:	643b      	str	r3, [r7, #64]	; 0x40
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ceb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ceba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f7fc f9d8 	bl	8009278 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800cec8:	e02b      	b.n	800cf22 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_rawread(lfs, &orig, &data, 1);
 800ceca:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800cece:	f107 010c 	add.w	r1, r7, #12
 800ced2:	2301      	movs	r3, #1
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f881 	bl	800cfdc <lfs_file_rawread>
 800ceda:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800cedc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cede:	2b00      	cmp	r3, #0
 800cee0:	da01      	bge.n	800cee6 <lfs_file_flush+0xb2>
                    return res;
 800cee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cee4:	e06f      	b.n	800cfc6 <lfs_file_flush+0x192>
                }

                res = lfs_file_rawwrite(lfs, file, &data, 1);
 800cee6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800ceea:	2301      	movs	r3, #1
 800ceec:	6839      	ldr	r1, [r7, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f968 	bl	800d1c4 <lfs_file_rawwrite>
 800cef4:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800cef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	da01      	bge.n	800cf00 <lfs_file_flush+0xcc>
                    return res;
 800cefc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cefe:	e062      	b.n	800cfc6 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf08:	d00b      	beq.n	800cf22 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800cf0a:	f107 030c 	add.w	r3, r7, #12
 800cf0e:	3340      	adds	r3, #64	; 0x40
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7fc f9b0 	bl	8009278 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7fc f9ab 	bl	8009278 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d3cd      	bcc.n	800ceca <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	2301      	movs	r3, #1
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7fc fb59 	bl	80095f0 <lfs_bd_flush>
 800cf3e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800cf40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d026      	beq.n	800cf94 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800cf46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf48:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cf4c:	d001      	beq.n	800cf52 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800cf4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf50:	e039      	b.n	800cfc6 <lfs_file_flush+0x192>
                        goto relocate;
 800cf52:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf58:	4a1d      	ldr	r2, [pc, #116]	; (800cfd0 <lfs_file_flush+0x19c>)
 800cf5a:	9200      	str	r2, [sp, #0]
 800cf5c:	f640 22ea 	movw	r2, #2794	; 0xaea
 800cf60:	491c      	ldr	r1, [pc, #112]	; (800cfd4 <lfs_file_flush+0x1a0>)
 800cf62:	481d      	ldr	r0, [pc, #116]	; (800cfd8 <lfs_file_flush+0x1a4>)
 800cf64:	f012 fca2 	bl	801f8ac <iprintf>
                err = lfs_file_relocate(lfs, file);
 800cf68:	6839      	ldr	r1, [r7, #0]
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7ff fe66 	bl	800cc3c <lfs_file_relocate>
 800cf70:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800cf72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d0da      	beq.n	800cf2e <lfs_file_flush+0xfa>
                    return err;
 800cf78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf7a:	e024      	b.n	800cfc6 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	4619      	mov	r1, r3
 800cf86:	4610      	mov	r0, r2
 800cf88:	f7fc f8b0 	bl	80090ec <lfs_max>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	635a      	str	r2, [r3, #52]	; 0x34
 800cf92:	e000      	b.n	800cf96 <lfs_file_flush+0x162>
                break;
 800cf94:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfaa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cfc2:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3774      	adds	r7, #116	; 0x74
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd90      	pop	{r4, r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	08020e38 	.word	0x08020e38
 800cfd4:	08020d2c 	.word	0x08020d2c
 800cfd8:	08020ee0 	.word	0x08020ee0

0800cfdc <lfs_file_rawread>:
    return 0;
}
#endif

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800cfdc:	b5b0      	push	{r4, r5, r7, lr}
 800cfde:	b092      	sub	sp, #72	; 0x48
 800cfe0:	af06      	add	r7, sp, #24
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfee:	f003 0301 	and.w	r3, r3, #1
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d106      	bne.n	800d004 <lfs_file_rawread+0x28>
 800cff6:	4b6f      	ldr	r3, [pc, #444]	; (800d1b4 <lfs_file_rawread+0x1d8>)
 800cff8:	4a6f      	ldr	r2, [pc, #444]	; (800d1b8 <lfs_file_rawread+0x1dc>)
 800cffa:	f640 3138 	movw	r1, #2872	; 0xb38
 800cffe:	486f      	ldr	r0, [pc, #444]	; (800d1bc <lfs_file_rawread+0x1e0>)
 800d000:	f012 f9d8 	bl	801f3b4 <__assert_func>

    uint8_t *data = buffer;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d009      	beq.n	800d02c <lfs_file_rawread+0x50>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800d018:	68b9      	ldr	r1, [r7, #8]
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f7ff ff0a 	bl	800ce34 <lfs_file_flush>
 800d020:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800d022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <lfs_file_rawread+0x50>
            return err;
 800d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02a:	e0bf      	b.n	800d1ac <lfs_file_rawread+0x1d0>
        }
    }
#endif

    if (file->pos >= file->ctz.size) {
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d034:	429a      	cmp	r2, r3
 800d036:	d301      	bcc.n	800d03c <lfs_file_rawread+0x60>
        // eof if past end
        return 0;
 800d038:	2300      	movs	r3, #0
 800d03a:	e0b7      	b.n	800d1ac <lfs_file_rawread+0x1d0>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	4619      	mov	r1, r3
 800d048:	6838      	ldr	r0, [r7, #0]
 800d04a:	f7fc f85f 	bl	800910c <lfs_min>
 800d04e:	6038      	str	r0, [r7, #0]
    nsize = size;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 800d054:	e0a5      	b.n	800d1a2 <lfs_file_rawread+0x1c6>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d006      	beq.n	800d070 <lfs_file_rawread+0x94>
                file->off == lfs->cfg->block_size) {
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_READING) ||
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d130      	bne.n	800d0d2 <lfs_file_rawread+0xf6>
            if (!(file->flags & LFS_F_INLINE)) {
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d11c      	bne.n	800d0b6 <lfs_file_rawread+0xda>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d08e:	68b9      	ldr	r1, [r7, #8]
 800d090:	3138      	adds	r1, #56	; 0x38
 800d092:	68b8      	ldr	r0, [r7, #8]
 800d094:	303c      	adds	r0, #60	; 0x3c
 800d096:	9003      	str	r0, [sp, #12]
 800d098:	9102      	str	r1, [sp, #8]
 800d09a:	9201      	str	r2, [sp, #4]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	462b      	mov	r3, r5
 800d0a0:	4622      	mov	r2, r4
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f7ff fbd9 	bl	800c85c <lfs_ctz_find>
 800d0aa:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d009      	beq.n	800d0c6 <lfs_file_rawread+0xea>
                    return err;
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	e07a      	b.n	800d1ac <lfs_file_rawread+0x1d0>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	f06f 0201 	mvn.w	r2, #1
 800d0bc:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	4619      	mov	r1, r3
 800d0e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0e2:	f7fc f813 	bl	800910c <lfs_min>
 800d0e6:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d026      	beq.n	800d142 <lfs_file_rawread+0x166>
            int err = lfs_dir_getread(lfs, &file->m,
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	f103 0408 	add.w	r4, r3, #8
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	889b      	ldrh	r3, [r3, #4]
 800d10a:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800d10c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d114:	68b9      	ldr	r1, [r7, #8]
 800d116:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800d118:	69f8      	ldr	r0, [r7, #28]
 800d11a:	9005      	str	r0, [sp, #20]
 800d11c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d11e:	9004      	str	r0, [sp, #16]
 800d120:	9103      	str	r1, [sp, #12]
 800d122:	9302      	str	r3, [sp, #8]
 800d124:	4b26      	ldr	r3, [pc, #152]	; (800d1c0 <lfs_file_rawread+0x1e4>)
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	9200      	str	r2, [sp, #0]
 800d12a:	462b      	mov	r3, r5
 800d12c:	2200      	movs	r2, #0
 800d12e:	4621      	mov	r1, r4
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7fd f89c 	bl	800a26e <lfs_dir_getread>
 800d136:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d01d      	beq.n	800d17a <lfs_file_rawread+0x19e>
                return err;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	e034      	b.n	800d1ac <lfs_file_rawread+0x1d0>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d14c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d156:	69f9      	ldr	r1, [r7, #28]
 800d158:	9103      	str	r1, [sp, #12]
 800d15a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d15c:	9102      	str	r1, [sp, #8]
 800d15e:	9201      	str	r2, [sp, #4]
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	4623      	mov	r3, r4
 800d164:	4602      	mov	r2, r0
 800d166:	2100      	movs	r1, #0
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f7fc f8ab 	bl	80092c4 <lfs_bd_read>
 800d16e:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <lfs_file_rawread+0x19e>
                return err;
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	e018      	b.n	800d1ac <lfs_file_rawread+0x1d0>
            }
        }

        file->pos += diff;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	441a      	add	r2, r3
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	441a      	add	r2, r3
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800d192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	4413      	add	r3, r2
 800d198:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800d19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	1ad3      	subs	r3, r2, r3
 800d1a0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 800d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f47f af56 	bne.w	800d056 <lfs_file_rawread+0x7a>
    }

    return size;
 800d1aa:	683b      	ldr	r3, [r7, #0]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3730      	adds	r7, #48	; 0x30
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bdb0      	pop	{r4, r5, r7, pc}
 800d1b4:	08020f88 	.word	0x08020f88
 800d1b8:	0802503c 	.word	0x0802503c
 800d1bc:	08020d2c 	.word	0x08020d2c
 800d1c0:	fff7fc00 	.word	0xfff7fc00

0800d1c4 <lfs_file_rawwrite>:

#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800d1c4:	b5b0      	push	{r4, r5, r7, lr}
 800d1c6:	b094      	sub	sp, #80	; 0x50
 800d1c8:	af04      	add	r7, sp, #16
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d6:	f003 0302 	and.w	r3, r3, #2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d106      	bne.n	800d1ec <lfs_file_rawwrite+0x28>
 800d1de:	4b85      	ldr	r3, [pc, #532]	; (800d3f4 <lfs_file_rawwrite+0x230>)
 800d1e0:	4a85      	ldr	r2, [pc, #532]	; (800d3f8 <lfs_file_rawwrite+0x234>)
 800d1e2:	f640 3182 	movw	r1, #2946	; 0xb82
 800d1e6:	4885      	ldr	r0, [pc, #532]	; (800d3fc <lfs_file_rawwrite+0x238>)
 800d1e8:	f012 f8e4 	bl	801f3b4 <__assert_func>

    const uint8_t *data = buffer;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d009      	beq.n	800d214 <lfs_file_rawwrite+0x50>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800d200:	68b9      	ldr	r1, [r7, #8]
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7ff fe16 	bl	800ce34 <lfs_file_flush>
 800d208:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 800d20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d001      	beq.n	800d214 <lfs_file_rawwrite+0x50>
            return err;
 800d210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d212:	e166      	b.n	800d4e2 <lfs_file_rawwrite+0x31e>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d009      	beq.n	800d234 <lfs_file_rawwrite+0x70>
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d228:	429a      	cmp	r2, r3
 800d22a:	d203      	bcs.n	800d234 <lfs_file_rawwrite+0x70>
        file->pos = file->ctz.size;
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	441a      	add	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d240:	429a      	cmp	r2, r3
 800d242:	d902      	bls.n	800d24a <lfs_file_rawwrite+0x86>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 800d244:	f06f 031a 	mvn.w	r3, #26
 800d248:	e14b      	b.n	800d4e2 <lfs_file_rawwrite+0x31e>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d252:	2b00      	cmp	r3, #0
 800d254:	d121      	bne.n	800d29a <lfs_file_rawwrite+0xd6>
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	429a      	cmp	r2, r3
 800d260:	d91b      	bls.n	800d29a <lfs_file_rawwrite+0xd6>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d266:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800d270:	e00e      	b.n	800d290 <lfs_file_rawwrite+0xcc>
            lfs_ssize_t res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
 800d272:	2300      	movs	r3, #0
 800d274:	75fb      	strb	r3, [r7, #23]
 800d276:	f107 0217 	add.w	r2, r7, #23
 800d27a:	2301      	movs	r3, #1
 800d27c:	68b9      	ldr	r1, [r7, #8]
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f7ff ffa0 	bl	800d1c4 <lfs_file_rawwrite>
 800d284:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 800d286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d288:	2b00      	cmp	r3, #0
 800d28a:	da01      	bge.n	800d290 <lfs_file_rawwrite+0xcc>
                return res;
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	e128      	b.n	800d4e2 <lfs_file_rawwrite+0x31e>
        while (file->pos < pos) {
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d296:	429a      	cmp	r2, r3
 800d298:	d8eb      	bhi.n	800d272 <lfs_file_rawwrite+0xae>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d29e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 8112 	beq.w	800d4cc <lfs_file_rawwrite+0x308>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ae:	441a      	add	r2, r3
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	f7fb ff18 	bl	80090ec <lfs_max>
 800d2bc:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                (lfs->cfg->metadata_max ?
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <lfs_file_rawwrite+0x114>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800d2d4:	08db      	lsrs	r3, r3, #3
 800d2d6:	e003      	b.n	800d2e0 <lfs_file_rawwrite+0x11c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            lfs_min(0x3fe, lfs_min(
 800d2de:	08db      	lsrs	r3, r3, #3
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	f7fb ff12 	bl	800910c <lfs_min>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	f240 30fe 	movw	r0, #1022	; 0x3fe
 800d2f0:	f7fb ff0c 	bl	800910c <lfs_min>
 800d2f4:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800d2f6:	429c      	cmp	r4, r3
 800d2f8:	f240 80e8 	bls.w	800d4cc <lfs_file_rawwrite+0x308>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800d2fc:	68b9      	ldr	r1, [r7, #8]
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f7ff fd76 	bl	800cdf0 <lfs_file_outline>
 800d304:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 800d306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 80df 	beq.w	800d4cc <lfs_file_rawwrite+0x308>
            file->flags |= LFS_F_ERRED;
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d312:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800d31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31c:	e0e1      	b.n	800d4e2 <lfs_file_rawwrite+0x31e>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d326:	2b00      	cmp	r3, #0
 800d328:	d006      	beq.n	800d338 <lfs_file_rawwrite+0x174>
                file->off == lfs->cfg->block_size) {
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 800d334:	429a      	cmp	r2, r3
 800d336:	d171      	bne.n	800d41c <lfs_file_rawwrite+0x258>
            if (!(file->flags & LFS_F_INLINE)) {
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d340:	2b00      	cmp	r3, #0
 800d342:	d15d      	bne.n	800d400 <lfs_file_rawwrite+0x23c>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d12d      	bne.n	800d3ac <lfs_file_rawwrite+0x1e8>
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d354:	2b00      	cmp	r3, #0
 800d356:	d029      	beq.n	800d3ac <lfs_file_rawwrite+0x1e8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800d36a:	3a01      	subs	r2, #1
 800d36c:	68b9      	ldr	r1, [r7, #8]
 800d36e:	3138      	adds	r1, #56	; 0x38
 800d370:	68b8      	ldr	r0, [r7, #8]
 800d372:	303c      	adds	r0, #60	; 0x3c
 800d374:	9003      	str	r0, [sp, #12]
 800d376:	9102      	str	r1, [sp, #8]
 800d378:	9201      	str	r2, [sp, #4]
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	462b      	mov	r3, r5
 800d37e:	4622      	mov	r2, r4
 800d380:	2100      	movs	r1, #0
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f7ff fa6a 	bl	800c85c <lfs_ctz_find>
 800d388:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 800d38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d007      	beq.n	800d3a0 <lfs_file_rawwrite+0x1dc>
                        file->flags |= LFS_F_ERRED;
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d394:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	e0a0      	b.n	800d4e2 <lfs_file_rawwrite+0x31e>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	3340      	adds	r3, #64	; 0x40
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f7fb ff75 	bl	8009296 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f7fc fd88 	bl	8009ec2 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d3b8:	68fc      	ldr	r4, [r7, #12]
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c2:	68ba      	ldr	r2, [r7, #8]
 800d3c4:	3238      	adds	r2, #56	; 0x38
 800d3c6:	68b9      	ldr	r1, [r7, #8]
 800d3c8:	313c      	adds	r1, #60	; 0x3c
 800d3ca:	9102      	str	r1, [sp, #8]
 800d3cc:	9201      	str	r2, [sp, #4]
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	462b      	mov	r3, r5
 800d3d2:	4622      	mov	r2, r4
 800d3d4:	4601      	mov	r1, r0
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f7ff faac 	bl	800c934 <lfs_ctz_extend>
 800d3dc:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800d3de:	6a3b      	ldr	r3, [r7, #32]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d015      	beq.n	800d410 <lfs_file_rawwrite+0x24c>
                    file->flags |= LFS_F_ERRED;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	e076      	b.n	800d4e2 <lfs_file_rawwrite+0x31e>
 800d3f4:	08020fb8 	.word	0x08020fb8
 800d3f8:	08025050 	.word	0x08025050
 800d3fc:	08020d2c 	.word	0x08020d2c
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	f06f 0201 	mvn.w	r2, #1
 800d406:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d414:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d426:	1ad3      	subs	r3, r2, r3
 800d428:	4619      	mov	r1, r3
 800d42a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d42c:	f7fb fe6e 	bl	800910c <lfs_min>
 800d430:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d438:	68fc      	ldr	r4, [r7, #12]
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43e:	68ba      	ldr	r2, [r7, #8]
 800d440:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d442:	69f9      	ldr	r1, [r7, #28]
 800d444:	9103      	str	r1, [sp, #12]
 800d446:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d448:	9102      	str	r1, [sp, #8]
 800d44a:	9201      	str	r2, [sp, #4]
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	2301      	movs	r3, #1
 800d450:	4622      	mov	r2, r4
 800d452:	4601      	mov	r1, r0
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f7fc f97b 	bl	8009750 <lfs_bd_prog>
 800d45a:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d01c      	beq.n	800d49c <lfs_file_rawwrite+0x2d8>
                if (err == LFS_ERR_CORRUPT) {
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d468:	d007      	beq.n	800d47a <lfs_file_rawwrite+0x2b6>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	e033      	b.n	800d4e2 <lfs_file_rawwrite+0x31e>
                    goto relocate;
 800d47a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800d47c:	68b9      	ldr	r1, [r7, #8]
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f7ff fbdc 	bl	800cc3c <lfs_file_relocate>
 800d484:	61b8      	str	r0, [r7, #24]
            if (err) {
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d0d2      	beq.n	800d432 <lfs_file_rawwrite+0x26e>
                file->flags |= LFS_F_ERRED;
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d490:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	e022      	b.n	800d4e2 <lfs_file_rawwrite+0x31e>
            break;
 800d49c:	bf00      	nop
            }
        }

        file->pos += diff;
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	441a      	add	r2, r3
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	441a      	add	r2, r3
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800d4b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 800d4be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	1ad3      	subs	r3, r2, r3
 800d4c4:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f7fc fcfb 	bl	8009ec2 <lfs_alloc_ack>
    while (nsize > 0) {
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f47f af25 	bne.w	800d31e <lfs_file_rawwrite+0x15a>
    }

    file->flags &= ~LFS_F_ERRED;
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	631a      	str	r2, [r3, #48]	; 0x30
    return size;
 800d4e0:	683b      	ldr	r3, [r7, #0]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3740      	adds	r7, #64	; 0x40
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bdb0      	pop	{r4, r5, r7, pc}
 800d4ea:	bf00      	nop

0800d4ec <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08c      	sub	sp, #48	; 0x30
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	683a      	ldr	r2, [r7, #0]
 800d4fa:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d504:	69db      	ldr	r3, [r3, #28]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <lfs_init+0x2c>
 800d50a:	4b92      	ldr	r3, [pc, #584]	; (800d754 <lfs_init+0x268>)
 800d50c:	4a92      	ldr	r2, [pc, #584]	; (800d758 <lfs_init+0x26c>)
 800d50e:	f640 51a4 	movw	r1, #3492	; 0xda4
 800d512:	4892      	ldr	r0, [pc, #584]	; (800d75c <lfs_init+0x270>)
 800d514:	f011 ff4e 	bl	801f3b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <lfs_init+0x44>
 800d522:	4b8f      	ldr	r3, [pc, #572]	; (800d760 <lfs_init+0x274>)
 800d524:	4a8c      	ldr	r2, [pc, #560]	; (800d758 <lfs_init+0x26c>)
 800d526:	f640 51a5 	movw	r1, #3493	; 0xda5
 800d52a:	488c      	ldr	r0, [pc, #560]	; (800d75c <lfs_init+0x270>)
 800d52c:	f011 ff42 	bl	801f3b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d536:	2b00      	cmp	r3, #0
 800d538:	d106      	bne.n	800d548 <lfs_init+0x5c>
 800d53a:	4b8a      	ldr	r3, [pc, #552]	; (800d764 <lfs_init+0x278>)
 800d53c:	4a86      	ldr	r2, [pc, #536]	; (800d758 <lfs_init+0x26c>)
 800d53e:	f640 51a6 	movw	r1, #3494	; 0xda6
 800d542:	4886      	ldr	r0, [pc, #536]	; (800d75c <lfs_init+0x270>)
 800d544:	f011 ff36 	bl	801f3b4 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d552:	69d2      	ldr	r2, [r2, #28]
 800d554:	fbb3 f1f2 	udiv	r1, r3, r2
 800d558:	fb01 f202 	mul.w	r2, r1, r2
 800d55c:	1a9b      	subs	r3, r3, r2
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d006      	beq.n	800d570 <lfs_init+0x84>
 800d562:	4b81      	ldr	r3, [pc, #516]	; (800d768 <lfs_init+0x27c>)
 800d564:	4a7c      	ldr	r2, [pc, #496]	; (800d758 <lfs_init+0x26c>)
 800d566:	f640 51aa 	movw	r1, #3498	; 0xdaa
 800d56a:	487c      	ldr	r0, [pc, #496]	; (800d75c <lfs_init+0x270>)
 800d56c:	f011 ff22 	bl	801f3b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d57a:	6a12      	ldr	r2, [r2, #32]
 800d57c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d580:	fb01 f202 	mul.w	r2, r1, r2
 800d584:	1a9b      	subs	r3, r3, r2
 800d586:	2b00      	cmp	r3, #0
 800d588:	d006      	beq.n	800d598 <lfs_init+0xac>
 800d58a:	4b78      	ldr	r3, [pc, #480]	; (800d76c <lfs_init+0x280>)
 800d58c:	4a72      	ldr	r2, [pc, #456]	; (800d758 <lfs_init+0x26c>)
 800d58e:	f640 51ab 	movw	r1, #3499	; 0xdab
 800d592:	4872      	ldr	r0, [pc, #456]	; (800d75c <lfs_init+0x270>)
 800d594:	f011 ff0e 	bl	801f3b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d5a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d5a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5a8:	fb01 f202 	mul.w	r2, r1, r2
 800d5ac:	1a9b      	subs	r3, r3, r2
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d006      	beq.n	800d5c0 <lfs_init+0xd4>
 800d5b2:	4b6f      	ldr	r3, [pc, #444]	; (800d770 <lfs_init+0x284>)
 800d5b4:	4a68      	ldr	r2, [pc, #416]	; (800d758 <lfs_init+0x26c>)
 800d5b6:	f640 51ac 	movw	r1, #3500	; 0xdac
 800d5ba:	4868      	ldr	r0, [pc, #416]	; (800d75c <lfs_init+0x270>)
 800d5bc:	f011 fefa 	bl	801f3b4 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c6:	3b08      	subs	r3, #8
 800d5c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fb fdd2 	bl	800917a <lfs_npw2>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	009a      	lsls	r2, r3, #2
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d906      	bls.n	800d5f2 <lfs_init+0x106>
 800d5e4:	4b63      	ldr	r3, [pc, #396]	; (800d774 <lfs_init+0x288>)
 800d5e6:	4a5c      	ldr	r2, [pc, #368]	; (800d758 <lfs_init+0x26c>)
 800d5e8:	f640 51af 	movw	r1, #3503	; 0xdaf
 800d5ec:	485b      	ldr	r0, [pc, #364]	; (800d75c <lfs_init+0x270>)
 800d5ee:	f011 fee1 	bl	801f3b4 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d106      	bne.n	800d60a <lfs_init+0x11e>
 800d5fc:	4b5e      	ldr	r3, [pc, #376]	; (800d778 <lfs_init+0x28c>)
 800d5fe:	4a56      	ldr	r2, [pc, #344]	; (800d758 <lfs_init+0x26c>)
 800d600:	f640 51b8 	movw	r1, #3512	; 0xdb8
 800d604:	4855      	ldr	r0, [pc, #340]	; (800d75c <lfs_init+0x270>)
 800d606:	f011 fed5 	bl	801f3b4 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d610:	2b00      	cmp	r3, #0
 800d612:	d005      	beq.n	800d620 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	60da      	str	r2, [r3, #12]
 800d61e:	e010      	b.n	800d642 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d626:	4618      	mov	r0, r3
 800d628:	f7fb fe0f 	bl	800924a <lfs_malloc>
 800d62c:	4602      	mov	r2, r0
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d103      	bne.n	800d642 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800d63a:	f06f 030b 	mvn.w	r3, #11
 800d63e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800d640:	e0fd      	b.n	800d83e <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d005      	beq.n	800d658 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	61da      	str	r2, [r3, #28]
 800d656:	e010      	b.n	800d67a <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fb fdf3 	bl	800924a <lfs_malloc>
 800d664:	4602      	mov	r2, r0
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	69db      	ldr	r3, [r3, #28]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d103      	bne.n	800d67a <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800d672:	f06f 030b 	mvn.w	r3, #11
 800d676:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800d678:	e0e1      	b.n	800d83e <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4619      	mov	r1, r3
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7fb fe09 	bl	8009296 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	3310      	adds	r3, #16
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7fb fe03 	bl	8009296 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d696:	2b00      	cmp	r3, #0
 800d698:	d106      	bne.n	800d6a8 <lfs_init+0x1bc>
 800d69a:	4b38      	ldr	r3, [pc, #224]	; (800d77c <lfs_init+0x290>)
 800d69c:	4a2e      	ldr	r2, [pc, #184]	; (800d758 <lfs_init+0x26c>)
 800d69e:	f640 51d6 	movw	r1, #3542	; 0xdd6
 800d6a2:	482e      	ldr	r0, [pc, #184]	; (800d75c <lfs_init+0x270>)
 800d6a4:	f011 fe86 	bl	801f3b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ae:	f003 0307 	and.w	r3, r3, #7
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <lfs_init+0x1d8>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6bc:	f003 0303 	and.w	r3, r3, #3
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d006      	beq.n	800d6d2 <lfs_init+0x1e6>
 800d6c4:	4b2e      	ldr	r3, [pc, #184]	; (800d780 <lfs_init+0x294>)
 800d6c6:	4a24      	ldr	r2, [pc, #144]	; (800d758 <lfs_init+0x26c>)
 800d6c8:	f640 51d7 	movw	r1, #3543	; 0xdd7
 800d6cc:	4823      	ldr	r0, [pc, #140]	; (800d75c <lfs_init+0x270>)
 800d6ce:	f011 fe71 	bl	801f3b4 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d005      	beq.n	800d6e8 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	665a      	str	r2, [r3, #100]	; 0x64
 800d6e6:	e010      	b.n	800d70a <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fb fdab 	bl	800924a <lfs_malloc>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d103      	bne.n	800d70a <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800d702:	f06f 030b 	mvn.w	r3, #11
 800d706:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800d708:	e099      	b.n	800d83e <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d710:	2bff      	cmp	r3, #255	; 0xff
 800d712:	d906      	bls.n	800d722 <lfs_init+0x236>
 800d714:	4b1b      	ldr	r3, [pc, #108]	; (800d784 <lfs_init+0x298>)
 800d716:	4a10      	ldr	r2, [pc, #64]	; (800d758 <lfs_init+0x26c>)
 800d718:	f640 51e4 	movw	r1, #3556	; 0xde4
 800d71c:	480f      	ldr	r0, [pc, #60]	; (800d75c <lfs_init+0x270>)
 800d71e:	f011 fe49 	bl	801f3b4 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d730:	2b00      	cmp	r3, #0
 800d732:	d102      	bne.n	800d73a <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	22ff      	movs	r2, #255	; 0xff
 800d738:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d73e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d740:	2b00      	cmp	r3, #0
 800d742:	da23      	bge.n	800d78c <lfs_init+0x2a0>
 800d744:	4b10      	ldr	r3, [pc, #64]	; (800d788 <lfs_init+0x29c>)
 800d746:	4a04      	ldr	r2, [pc, #16]	; (800d758 <lfs_init+0x26c>)
 800d748:	f640 51ea 	movw	r1, #3562	; 0xdea
 800d74c:	4803      	ldr	r0, [pc, #12]	; (800d75c <lfs_init+0x270>)
 800d74e:	f011 fe31 	bl	801f3b4 <__assert_func>
 800d752:	bf00      	nop
 800d754:	08020fe8 	.word	0x08020fe8
 800d758:	08025064 	.word	0x08025064
 800d75c:	08020d2c 	.word	0x08020d2c
 800d760:	08021004 	.word	0x08021004
 800d764:	08021020 	.word	0x08021020
 800d768:	0802103c 	.word	0x0802103c
 800d76c:	0802106c 	.word	0x0802106c
 800d770:	0802109c 	.word	0x0802109c
 800d774:	080210d0 	.word	0x080210d0
 800d778:	0802111c 	.word	0x0802111c
 800d77c:	08021138 	.word	0x08021138
 800d780:	08021158 	.word	0x08021158
 800d784:	080211ac 	.word	0x080211ac
 800d788:	080211c8 	.word	0x080211c8
    lfs->file_max = lfs->cfg->file_max;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d103      	bne.n	800d7a6 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d7a4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ac:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d906      	bls.n	800d7c2 <lfs_init+0x2d6>
 800d7b4:	4b26      	ldr	r3, [pc, #152]	; (800d850 <lfs_init+0x364>)
 800d7b6:	4a27      	ldr	r2, [pc, #156]	; (800d854 <lfs_init+0x368>)
 800d7b8:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 800d7bc:	4826      	ldr	r0, [pc, #152]	; (800d858 <lfs_init+0x36c>)
 800d7be:	f011 fdf9 	bl	801f3b4 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d103      	bne.n	800d7dc <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d7da:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d906      	bls.n	800d7fa <lfs_init+0x30e>
 800d7ec:	4b1b      	ldr	r3, [pc, #108]	; (800d85c <lfs_init+0x370>)
 800d7ee:	4a19      	ldr	r2, [pc, #100]	; (800d854 <lfs_init+0x368>)
 800d7f0:	f640 51f6 	movw	r1, #3574	; 0xdf6
 800d7f4:	4818      	ldr	r0, [pc, #96]	; (800d858 <lfs_init+0x36c>)
 800d7f6:	f011 fddd 	bl	801f3b4 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d800:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d808:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	333c      	adds	r3, #60	; 0x3c
 800d81a:	2200      	movs	r2, #0
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	605a      	str	r2, [r3, #4]
 800d820:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	3330      	adds	r3, #48	; 0x30
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]
 800d82a:	605a      	str	r2, [r3, #4]
 800d82c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	3348      	adds	r3, #72	; 0x48
 800d832:	2200      	movs	r2, #0
 800d834:	601a      	str	r2, [r3, #0]
 800d836:	605a      	str	r2, [r3, #4]
 800d838:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800d83a:	2300      	movs	r3, #0
 800d83c:	e003      	b.n	800d846 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f80e 	bl	800d860 <lfs_deinit>
    return err;
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d846:	4618      	mov	r0, r3
 800d848:	3730      	adds	r7, #48	; 0x30
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	080211ec 	.word	0x080211ec
 800d854:	08025064 	.word	0x08025064
 800d858:	08020d2c 	.word	0x08020d2c
 800d85c:	08021208 	.word	0x08021208

0800d860 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d104      	bne.n	800d87c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	4618      	mov	r0, r3
 800d878:	f7fb fcf3 	bl	8009262 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d882:	2b00      	cmp	r3, #0
 800d884:	d104      	bne.n	800d890 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	69db      	ldr	r3, [r3, #28]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fb fce9 	bl	8009262 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d896:	2b00      	cmp	r3, #0
 800d898:	d104      	bne.n	800d8a4 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fb fcdf 	bl	8009262 <lfs_free>
    }

    return 0;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
	...

0800d8b0 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b0a0      	sub	sp, #128	; 0x80
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
    int err = 0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7ff fe13 	bl	800d4ec <lfs_init>
 800d8c6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d8c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <lfs_rawformat+0x22>
            return err;
 800d8ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8d0:	e082      	b.n	800d9d8 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8dc:	461a      	mov	r2, r3
 800d8de:	2100      	movs	r1, #0
 800d8e0:	f012 f93a 	bl	801fb58 <memset>
        lfs->free.off = 0;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f0:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	4610      	mov	r0, r2
 800d8fc:	f7fb fc06 	bl	800910c <lfs_min>
 800d900:	4602      	mov	r2, r0
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7fc fad8 	bl	8009ec2 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800d912:	f107 030c 	add.w	r3, r7, #12
 800d916:	4619      	mov	r1, r3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7fd fe25 	bl	800b568 <lfs_dir_alloc>
 800d91e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d922:	2b00      	cmp	r3, #0
 800d924:	d14f      	bne.n	800d9c6 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800d926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d92a:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        lfs_superblock_t superblock = {
 800d932:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs_superblock_t superblock = {
 800d93a:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800d940:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800d946:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800d94c:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 800d94e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d952:	4618      	mov	r0, r3
 800d954:	f7fc fa46 	bl	8009de4 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800d958:	4b21      	ldr	r3, [pc, #132]	; (800d9e0 <lfs_rawformat+0x130>)
 800d95a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d95c:	2300      	movs	r3, #0
 800d95e:	653b      	str	r3, [r7, #80]	; 0x50
 800d960:	4b20      	ldr	r3, [pc, #128]	; (800d9e4 <lfs_rawformat+0x134>)
 800d962:	657b      	str	r3, [r7, #84]	; 0x54
 800d964:	4b20      	ldr	r3, [pc, #128]	; (800d9e8 <lfs_rawformat+0x138>)
 800d966:	65bb      	str	r3, [r7, #88]	; 0x58
 800d968:	4b20      	ldr	r3, [pc, #128]	; (800d9ec <lfs_rawformat+0x13c>)
 800d96a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d96c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d970:	663b      	str	r3, [r7, #96]	; 0x60
 800d972:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d976:	f107 010c 	add.w	r1, r7, #12
 800d97a:	2303      	movs	r3, #3
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7fe fa43 	bl	800be08 <lfs_dir_commit>
 800d982:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800d984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d986:	2b00      	cmp	r3, #0
 800d988:	d11f      	bne.n	800d9ca <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800d98a:	2300      	movs	r3, #0
 800d98c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800d990:	f107 010c 	add.w	r1, r7, #12
 800d994:	2300      	movs	r3, #0
 800d996:	2200      	movs	r2, #0
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7fe fa35 	bl	800be08 <lfs_dir_commit>
 800d99e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d9a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d113      	bne.n	800d9ce <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	633b      	str	r3, [r7, #48]	; 0x30
 800d9ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d9b2:	f107 030c 	add.w	r3, r7, #12
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7fd fa51 	bl	800ae60 <lfs_dir_fetch>
 800d9be:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d9c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	e004      	b.n	800d9d0 <lfs_rawformat+0x120>
            goto cleanup;
 800d9c6:	bf00      	nop
 800d9c8:	e002      	b.n	800d9d0 <lfs_rawformat+0x120>
            goto cleanup;
 800d9ca:	bf00      	nop
 800d9cc:	e000      	b.n	800d9d0 <lfs_rawformat+0x120>
            goto cleanup;
 800d9ce:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f7ff ff45 	bl	800d860 <lfs_deinit>
    return err;
 800d9d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3780      	adds	r7, #128	; 0x80
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	40100000 	.word	0x40100000
 800d9e4:	0ff00008 	.word	0x0ff00008
 800d9e8:	08021238 	.word	0x08021238
 800d9ec:	20100018 	.word	0x20100018

0800d9f0 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b09c      	sub	sp, #112	; 0x70
 800d9f4:	af04      	add	r7, sp, #16
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800d9fa:	6839      	ldr	r1, [r7, #0]
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff fd75 	bl	800d4ec <lfs_init>
 800da02:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 800da04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da06:	2b00      	cmp	r3, #0
 800da08:	d001      	beq.n	800da0e <lfs_rawmount+0x1e>
        return err;
 800da0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da0c:	e149      	b.n	800dca2 <lfs_rawmount+0x2b2>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800da0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da12:	2220      	movs	r2, #32
 800da14:	2100      	movs	r1, #0
 800da16:	4618      	mov	r0, r3
 800da18:	f012 f89e 	bl	801fb58 <memset>
 800da1c:	2301      	movs	r3, #1
 800da1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 800da20:	2300      	movs	r3, #0
 800da22:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 800da24:	e0dc      	b.n	800dbe0 <lfs_rawmount+0x1f0>
        if (cycle >= lfs->cfg->block_count/2) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da2c:	085b      	lsrs	r3, r3, #1
 800da2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da30:	429a      	cmp	r2, r3
 800da32:	d303      	bcc.n	800da3c <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 800da34:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800da38:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800da3a:	e12e      	b.n	800dc9a <lfs_rawmount+0x2aa>
        }
        cycle += 1;
 800da3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da3e:	3301      	adds	r3, #1
 800da40:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	627b      	str	r3, [r7, #36]	; 0x24
 800da46:	4b99      	ldr	r3, [pc, #612]	; (800dcac <lfs_rawmount+0x2bc>)
 800da48:	62bb      	str	r3, [r7, #40]	; 0x28
 800da4a:	2308      	movs	r3, #8
 800da4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800da4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da52:	f103 0218 	add.w	r2, r3, #24
 800da56:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800da5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da5e:	9303      	str	r3, [sp, #12]
 800da60:	4b93      	ldr	r3, [pc, #588]	; (800dcb0 <lfs_rawmount+0x2c0>)
 800da62:	9302      	str	r3, [sp, #8]
 800da64:	2300      	movs	r3, #0
 800da66:	9301      	str	r3, [sp, #4]
 800da68:	4b92      	ldr	r3, [pc, #584]	; (800dcb4 <lfs_rawmount+0x2c4>)
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	4b92      	ldr	r3, [pc, #584]	; (800dcb8 <lfs_rawmount+0x2c8>)
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7fc fe8a 	bl	800a788 <lfs_dir_fetchmatch>
 800da74:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800da76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da78:	2b00      	cmp	r3, #0
 800da7a:	da02      	bge.n	800da82 <lfs_rawmount+0x92>
            err = tag;
 800da7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da7e:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800da80:	e10b      	b.n	800dc9a <lfs_rawmount+0x2aa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800da82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da84:	2b00      	cmp	r3, #0
 800da86:	f000 809e 	beq.w	800dbc6 <lfs_rawmount+0x1d6>
 800da8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fc f804 	bl	8009a9a <lfs_tag_isdelete>
 800da92:	4603      	mov	r3, r0
 800da94:	f083 0301 	eor.w	r3, r3, #1
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f000 8093 	beq.w	800dbc6 <lfs_rawmount+0x1d6>
            // update root
            lfs->root[0] = dir.pair[0];
 800daa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800daa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800daac:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800dab0:	f107 030c 	add.w	r3, r7, #12
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	4b81      	ldr	r3, [pc, #516]	; (800dcbc <lfs_rawmount+0x2cc>)
 800dab8:	4a7f      	ldr	r2, [pc, #508]	; (800dcb8 <lfs_rawmount+0x2c8>)
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7fc fbbc 	bl	800a238 <lfs_dir_get>
 800dac0:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800dac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	da02      	bge.n	800dace <lfs_rawmount+0xde>
                err = tag;
 800dac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daca:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800dacc:	e0e5      	b.n	800dc9a <lfs_rawmount+0x2aa>
            }
            lfs_superblock_fromle32(&superblock);
 800dace:	f107 030c 	add.w	r3, r7, #12
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fc f94e 	bl	8009d74 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	0c1b      	lsrs	r3, r3, #16
 800dadc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800dae6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800daea:	2b02      	cmp	r3, #2
 800daec:	d103      	bne.n	800daf6 <lfs_rawmount+0x106>
 800daee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d011      	beq.n	800db1a <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800daf6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800dafa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800dafe:	4970      	ldr	r1, [pc, #448]	; (800dcc0 <lfs_rawmount+0x2d0>)
 800db00:	9101      	str	r1, [sp, #4]
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	4613      	mov	r3, r2
 800db06:	f640 6291 	movw	r2, #3729	; 0xe91
 800db0a:	496e      	ldr	r1, [pc, #440]	; (800dcc4 <lfs_rawmount+0x2d4>)
 800db0c:	486e      	ldr	r0, [pc, #440]	; (800dcc8 <lfs_rawmount+0x2d8>)
 800db0e:	f011 fecd 	bl	801f8ac <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800db12:	f06f 0315 	mvn.w	r3, #21
 800db16:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800db18:	e054      	b.n	800dbc4 <lfs_rawmount+0x1d4>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d018      	beq.n	800db52 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 800db20:	69ba      	ldr	r2, [r7, #24]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db26:	429a      	cmp	r2, r3
 800db28:	d910      	bls.n	800db4c <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800db2a:	69ba      	ldr	r2, [r7, #24]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db30:	4963      	ldr	r1, [pc, #396]	; (800dcc0 <lfs_rawmount+0x2d0>)
 800db32:	9101      	str	r1, [sp, #4]
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	4613      	mov	r3, r2
 800db38:	f640 629a 	movw	r2, #3738	; 0xe9a
 800db3c:	4961      	ldr	r1, [pc, #388]	; (800dcc4 <lfs_rawmount+0x2d4>)
 800db3e:	4863      	ldr	r0, [pc, #396]	; (800dccc <lfs_rawmount+0x2dc>)
 800db40:	f011 feb4 	bl	801f8ac <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800db44:	f06f 0315 	mvn.w	r3, #21
 800db48:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800db4a:	e03b      	b.n	800dbc4 <lfs_rawmount+0x1d4>
                }

                lfs->name_max = superblock.name_max;
 800db4c:	69ba      	ldr	r2, [r7, #24]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d018      	beq.n	800db8a <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 800db58:	69fa      	ldr	r2, [r7, #28]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5e:	429a      	cmp	r2, r3
 800db60:	d910      	bls.n	800db84 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800db62:	69fa      	ldr	r2, [r7, #28]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db68:	4955      	ldr	r1, [pc, #340]	; (800dcc0 <lfs_rawmount+0x2d0>)
 800db6a:	9101      	str	r1, [sp, #4]
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	4613      	mov	r3, r2
 800db70:	f640 62a5 	movw	r2, #3749	; 0xea5
 800db74:	4953      	ldr	r1, [pc, #332]	; (800dcc4 <lfs_rawmount+0x2d4>)
 800db76:	4856      	ldr	r0, [pc, #344]	; (800dcd0 <lfs_rawmount+0x2e0>)
 800db78:	f011 fe98 	bl	801f8ac <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800db7c:	f06f 0315 	mvn.w	r3, #21
 800db80:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800db82:	e01f      	b.n	800dbc4 <lfs_rawmount+0x1d4>
                }

                lfs->file_max = superblock.file_max;
 800db84:	69fa      	ldr	r2, [r7, #28]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800db8a:	6a3b      	ldr	r3, [r7, #32]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d01a      	beq.n	800dbc6 <lfs_rawmount+0x1d6>
                if (superblock.attr_max > lfs->attr_max) {
 800db90:	6a3a      	ldr	r2, [r7, #32]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db96:	429a      	cmp	r2, r3
 800db98:	d910      	bls.n	800dbbc <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800db9a:	6a3a      	ldr	r2, [r7, #32]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dba0:	4947      	ldr	r1, [pc, #284]	; (800dcc0 <lfs_rawmount+0x2d0>)
 800dba2:	9101      	str	r1, [sp, #4]
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	4613      	mov	r3, r2
 800dba8:	f44f 626b 	mov.w	r2, #3760	; 0xeb0
 800dbac:	4945      	ldr	r1, [pc, #276]	; (800dcc4 <lfs_rawmount+0x2d4>)
 800dbae:	4849      	ldr	r0, [pc, #292]	; (800dcd4 <lfs_rawmount+0x2e4>)
 800dbb0:	f011 fe7c 	bl	801f8ac <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800dbb4:	f06f 0315 	mvn.w	r3, #21
 800dbb8:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800dbba:	e003      	b.n	800dbc4 <lfs_rawmount+0x1d4>
                }

                lfs->attr_max = superblock.attr_max;
 800dbbc:	6a3a      	ldr	r2, [r7, #32]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	675a      	str	r2, [r3, #116]	; 0x74
 800dbc2:	e000      	b.n	800dbc6 <lfs_rawmount+0x1d6>
            goto cleanup;
 800dbc4:	e069      	b.n	800dc9a <lfs_rawmount+0x2aa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dbcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7fd f960 	bl	800ae98 <lfs_dir_getgstate>
 800dbd8:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 800dbda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d15b      	bne.n	800dc98 <lfs_rawmount+0x2a8>
    while (!lfs_pair_isnull(dir.tail)) {
 800dbe0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbe4:	3318      	adds	r3, #24
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fb fea3 	bl	8009932 <lfs_pair_isnull>
 800dbec:	4603      	mov	r3, r0
 800dbee:	f083 0301 	eor.w	r3, r3, #1
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f47f af16 	bne.w	800da26 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	3320      	adds	r3, #32
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fb fe97 	bl	8009932 <lfs_pair_isnull>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d003      	beq.n	800dc12 <lfs_rawmount+0x222>
        err = LFS_ERR_INVAL;
 800dc0a:	f06f 0315 	mvn.w	r3, #21
 800dc0e:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800dc10:	e043      	b.n	800dc9a <lfs_rawmount+0x2aa>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	3330      	adds	r3, #48	; 0x30
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7fb ffe2 	bl	8009be0 <lfs_gstate_iszero>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	f083 0301 	eor.w	r3, r3, #1
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d010      	beq.n	800dc4a <lfs_rawmount+0x25a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dc34:	4822      	ldr	r0, [pc, #136]	; (800dcc0 <lfs_rawmount+0x2d0>)
 800dc36:	9002      	str	r0, [sp, #8]
 800dc38:	9201      	str	r2, [sp, #4]
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	f640 62c9 	movw	r2, #3785	; 0xec9
 800dc42:	4920      	ldr	r1, [pc, #128]	; (800dcc4 <lfs_rawmount+0x2d4>)
 800dc44:	4824      	ldr	r0, [pc, #144]	; (800dcd8 <lfs_rawmount+0x2e8>)
 800dc46:	f011 fe31 	bl	801f8ac <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fb ff15 	bl	8009a7e <lfs_tag_isvalid>
 800dc54:	4603      	mov	r3, r0
 800dc56:	f083 0301 	eor.w	r3, r3, #1
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc62:	441a      	add	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	333c      	adds	r3, #60	; 0x3c
 800dc6e:	3230      	adds	r2, #48	; 0x30
 800dc70:	ca07      	ldmia	r2, {r0, r1, r2}
 800dc72:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800dc7e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dc80:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc84:	fb01 f202 	mul.w	r2, r1, r2
 800dc88:	1a9a      	subs	r2, r3, r2
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7fc f926 	bl	8009ee0 <lfs_alloc_drop>

    return 0;
 800dc94:	2300      	movs	r3, #0
 800dc96:	e004      	b.n	800dca2 <lfs_rawmount+0x2b2>
            goto cleanup;
 800dc98:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f81e 	bl	800dcdc <lfs_rawunmount>
    return err;
 800dca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3760      	adds	r7, #96	; 0x60
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	08021238 	.word	0x08021238
 800dcb0:	0800aefd 	.word	0x0800aefd
 800dcb4:	0ff00008 	.word	0x0ff00008
 800dcb8:	7ffffc00 	.word	0x7ffffc00
 800dcbc:	20100018 	.word	0x20100018
 800dcc0:	08020e38 	.word	0x08020e38
 800dcc4:	08020d2c 	.word	0x08020d2c
 800dcc8:	08021244 	.word	0x08021244
 800dccc:	08021270 	.word	0x08021270
 800dcd0:	080212a4 	.word	0x080212a4
 800dcd4:	080212d8 	.word	0x080212d8
 800dcd8:	0802130c 	.word	0x0802130c

0800dcdc <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7ff fdbb 	bl	800d860 <lfs_deinit>
 800dcea:	4603      	mov	r3, r0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800dcf4:	b590      	push	{r4, r7, lr}
 800dcf6:	b09d      	sub	sp, #116	; 0x74
 800dcf8:	af04      	add	r7, sp, #16
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800dd02:	f107 0318 	add.w	r3, r7, #24
 800dd06:	2220      	movs	r2, #32
 800dd08:	2100      	movs	r1, #0
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f011 ff24 	bl	801fb58 <memset>
 800dd10:	2301      	movs	r3, #1
 800dd12:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800dd14:	2300      	movs	r3, #0
 800dd16:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800dd18:	e0a7      	b.n	800de6a <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd20:	085b      	lsrs	r3, r3, #1
 800dd22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d302      	bcc.n	800dd2e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 800dd28:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800dd2c:	e102      	b.n	800df34 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 800dd2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd30:	3301      	adds	r3, #1
 800dd32:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 800dd34:	2300      	movs	r3, #0
 800dd36:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd38:	e013      	b.n	800dd62 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 800dd3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd3c:	3306      	adds	r3, #6
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	3360      	adds	r3, #96	; 0x60
 800dd42:	443b      	add	r3, r7
 800dd44:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	4798      	blx	r3
 800dd50:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 800dd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <lfs_fs_rawtraverse+0x68>
                return err;
 800dd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5a:	e0eb      	b.n	800df34 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 800dd5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd5e:	3301      	adds	r3, #1
 800dd60:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	dde8      	ble.n	800dd3a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800dd68:	f107 0318 	add.w	r3, r7, #24
 800dd6c:	f103 0218 	add.w	r2, r3, #24
 800dd70:	f107 0318 	add.w	r3, r7, #24
 800dd74:	4619      	mov	r1, r3
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7fd f872 	bl	800ae60 <lfs_dir_fetch>
 800dd7c:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800dd7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <lfs_fs_rawtraverse+0x94>
            return err;
 800dd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd86:	e0d5      	b.n	800df34 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800dd88:	2300      	movs	r3, #0
 800dd8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800dd8e:	e067      	b.n	800de60 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800dd90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dd94:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800dd96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dd9a:	f043 0308 	orr.w	r3, r3, #8
 800dd9e:	f107 0118 	add.w	r1, r7, #24
 800dda2:	f107 0210 	add.w	r2, r7, #16
 800dda6:	9200      	str	r2, [sp, #0]
 800dda8:	4a64      	ldr	r2, [pc, #400]	; (800df3c <lfs_fs_rawtraverse+0x248>)
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f7fc fa44 	bl	800a238 <lfs_dir_get>
 800ddb0:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800ddb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	da05      	bge.n	800ddc4 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 800ddb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddba:	f113 0f02 	cmn.w	r3, #2
 800ddbe:	d049      	beq.n	800de54 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 800ddc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc2:	e0b7      	b.n	800df34 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 800ddc4:	f107 0310 	add.w	r3, r7, #16
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7fb ffbb 	bl	8009d44 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800ddce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7fb fe85 	bl	8009ae0 <lfs_tag_type3>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	461a      	mov	r2, r3
 800ddda:	f240 2302 	movw	r3, #514	; 0x202
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d113      	bne.n	800de0a <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800dde2:	68f9      	ldr	r1, [r7, #12]
 800dde4:	6938      	ldr	r0, [r7, #16]
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	9202      	str	r2, [sp, #8]
 800ddec:	68ba      	ldr	r2, [r7, #8]
 800ddee:	9201      	str	r2, [sp, #4]
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	460a      	mov	r2, r1
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f7fe fea3 	bl	800cb44 <lfs_ctz_traverse>
 800ddfe:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800de00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de02:	2b00      	cmp	r3, #0
 800de04:	d027      	beq.n	800de56 <lfs_fs_rawtraverse+0x162>
                    return err;
 800de06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de08:	e094      	b.n	800df34 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800de0a:	78fb      	ldrb	r3, [r7, #3]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d022      	beq.n	800de56 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800de10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de12:	4618      	mov	r0, r3
 800de14:	f7fb fe64 	bl	8009ae0 <lfs_tag_type3>
 800de18:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800de1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de1e:	d11a      	bne.n	800de56 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 800de20:	2300      	movs	r3, #0
 800de22:	653b      	str	r3, [r7, #80]	; 0x50
 800de24:	e012      	b.n	800de4c <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 800de26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	f107 0210 	add.w	r2, r7, #16
 800de2e:	4413      	add	r3, r2
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	4611      	mov	r1, r2
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	4798      	blx	r3
 800de3a:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800de3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d001      	beq.n	800de46 <lfs_fs_rawtraverse+0x152>
                        return err;
 800de42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de44:	e076      	b.n	800df34 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 800de46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de48:	3301      	adds	r3, #1
 800de4a:	653b      	str	r3, [r7, #80]	; 0x50
 800de4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de4e:	2b01      	cmp	r3, #1
 800de50:	dde9      	ble.n	800de26 <lfs_fs_rawtraverse+0x132>
 800de52:	e000      	b.n	800de56 <lfs_fs_rawtraverse+0x162>
                    continue;
 800de54:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800de56:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800de5a:	3301      	adds	r3, #1
 800de5c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800de60:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de62:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800de66:	429a      	cmp	r2, r3
 800de68:	d392      	bcc.n	800dd90 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 800de6a:	f107 0318 	add.w	r3, r7, #24
 800de6e:	3318      	adds	r3, #24
 800de70:	4618      	mov	r0, r3
 800de72:	f7fb fd5e 	bl	8009932 <lfs_pair_isnull>
 800de76:	4603      	mov	r3, r0
 800de78:	f083 0301 	eor.w	r3, r3, #1
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f47f af4b 	bne.w	800dd1a <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de8a:	e04f      	b.n	800df2c <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 800de8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de8e:	799b      	ldrb	r3, [r3, #6]
 800de90:	2b01      	cmp	r3, #1
 800de92:	d147      	bne.n	800df24 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800de94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d01d      	beq.n	800dedc <lfs_fs_rawtraverse+0x1e8>
 800dea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d117      	bne.n	800dedc <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800deac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deae:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800deb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	9202      	str	r2, [sp, #8]
 800dec0:	68ba      	ldr	r2, [r7, #8]
 800dec2:	9201      	str	r2, [sp, #4]
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	4623      	mov	r3, r4
 800dec8:	4602      	mov	r2, r0
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f7fe fe3a 	bl	800cb44 <lfs_ctz_traverse>
 800ded0:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800ded2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <lfs_fs_rawtraverse+0x1e8>
                return err;
 800ded8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deda:	e02b      	b.n	800df34 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800dedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d01e      	beq.n	800df26 <lfs_fs_rawtraverse+0x232>
 800dee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800def0:	2b00      	cmp	r3, #0
 800def2:	d118      	bne.n	800df26 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800def4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defe:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800df00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	9202      	str	r2, [sp, #8]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	9201      	str	r2, [sp, #4]
 800df0c:	9300      	str	r3, [sp, #0]
 800df0e:	4623      	mov	r3, r4
 800df10:	4602      	mov	r2, r0
 800df12:	68f8      	ldr	r0, [r7, #12]
 800df14:	f7fe fe16 	bl	800cb44 <lfs_ctz_traverse>
 800df18:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800df1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <lfs_fs_rawtraverse+0x232>
                return err;
 800df20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df22:	e007      	b.n	800df34 <lfs_fs_rawtraverse+0x240>
            continue;
 800df24:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800df26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1ac      	bne.n	800de8c <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3764      	adds	r7, #100	; 0x64
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd90      	pop	{r4, r7, pc}
 800df3c:	700ffc00 	.word	0x700ffc00

0800df40 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800df40:	b580      	push	{r7, lr}
 800df42:	b086      	sub	sp, #24
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800df58:	2300      	movs	r3, #0
 800df5a:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800df5c:	e024      	b.n	800dfa8 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df64:	085b      	lsrs	r3, r3, #1
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d302      	bcc.n	800df72 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800df6c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800df70:	e027      	b.n	800dfc2 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	3301      	adds	r3, #1
 800df76:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	3318      	adds	r3, #24
 800df7c:	68b9      	ldr	r1, [r7, #8]
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fb fcf2 	bl	8009968 <lfs_pair_cmp>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d101      	bne.n	800df8e <lfs_fs_pred+0x4e>
            return 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	e019      	b.n	800dfc2 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	3318      	adds	r3, #24
 800df92:	461a      	mov	r2, r3
 800df94:	6879      	ldr	r1, [r7, #4]
 800df96:	68f8      	ldr	r0, [r7, #12]
 800df98:	f7fc ff62 	bl	800ae60 <lfs_dir_fetch>
 800df9c:	6138      	str	r0, [r7, #16]
        if (err) {
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <lfs_fs_pred+0x68>
            return err;
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	e00c      	b.n	800dfc2 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	3318      	adds	r3, #24
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fb fcc0 	bl	8009932 <lfs_pair_isnull>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	f083 0301 	eor.w	r3, r3, #1
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1cf      	bne.n	800df5e <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800dfbe:	f06f 0301 	mvn.w	r3, #1
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3718      	adds	r7, #24
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800dfca:	b5b0      	push	{r4, r5, r7, lr}
 800dfcc:	b08e      	sub	sp, #56	; 0x38
 800dfce:	af04      	add	r7, sp, #16
 800dfd0:	60f8      	str	r0, [r7, #12]
 800dfd2:	60b9      	str	r1, [r7, #8]
 800dfd4:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800dfe4:	6a3b      	ldr	r3, [r7, #32]
 800dfe6:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800dfea:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dff0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
            disk->block, disk->off, &child, sizeof(child));
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	69fa      	ldr	r2, [r7, #28]
 800dff8:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 800dffa:	2108      	movs	r1, #8
 800dffc:	9103      	str	r1, [sp, #12]
 800dffe:	f107 0110 	add.w	r1, r7, #16
 800e002:	9102      	str	r1, [sp, #8]
 800e004:	9201      	str	r2, [sp, #4]
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	462b      	mov	r3, r5
 800e00a:	4622      	mov	r2, r4
 800e00c:	4601      	mov	r1, r0
 800e00e:	6a38      	ldr	r0, [r7, #32]
 800e010:	f7fb f958 	bl	80092c4 <lfs_bd_read>
 800e014:	61b8      	str	r0, [r7, #24]
    if (err) {
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d001      	beq.n	800e020 <lfs_fs_parent_match+0x56>
        return err;
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	e012      	b.n	800e046 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800e020:	f107 0310 	add.w	r3, r7, #16
 800e024:	4618      	mov	r0, r3
 800e026:	f7fb fcf6 	bl	8009a16 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800e02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02c:	1d1a      	adds	r2, r3, #4
 800e02e:	f107 0310 	add.w	r3, r7, #16
 800e032:	4611      	mov	r1, r2
 800e034:	4618      	mov	r0, r3
 800e036:	f7fb fc97 	bl	8009968 <lfs_pair_cmp>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	bf14      	ite	ne
 800e040:	2301      	movne	r3, #1
 800e042:	2300      	moveq	r3, #0
 800e044:	b2db      	uxtb	r3, r3
}
 800e046:	4618      	mov	r0, r3
 800e048:	3728      	adds	r7, #40	; 0x28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e050 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800e050:	b580      	push	{r7, lr}
 800e052:	b08e      	sub	sp, #56	; 0x38
 800e054:	af04      	add	r7, sp, #16
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800e068:	2300      	movs	r3, #0
 800e06a:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800e06c:	e030      	b.n	800e0d0 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e074:	085b      	lsrs	r3, r3, #1
 800e076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e078:	429a      	cmp	r2, r3
 800e07a:	d302      	bcc.n	800e082 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800e07c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800e080:	e033      	b.n	800e0ea <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 800e082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e084:	3301      	adds	r3, #1
 800e086:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800e096:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	3304      	adds	r3, #4
 800e09c:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800e09e:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800e0a0:	f107 0314 	add.w	r3, r7, #20
 800e0a4:	9303      	str	r3, [sp, #12]
 800e0a6:	4b13      	ldr	r3, [pc, #76]	; (800e0f4 <lfs_fs_parent+0xa4>)
 800e0a8:	9302      	str	r3, [sp, #8]
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	9301      	str	r3, [sp, #4]
 800e0ae:	4b12      	ldr	r3, [pc, #72]	; (800e0f8 <lfs_fs_parent+0xa8>)
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	4b12      	ldr	r3, [pc, #72]	; (800e0fc <lfs_fs_parent+0xac>)
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7fc fb66 	bl	800a788 <lfs_dir_fetchmatch>
 800e0bc:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800e0be:	6a3b      	ldr	r3, [r7, #32]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d005      	beq.n	800e0d0 <lfs_fs_parent+0x80>
 800e0c4:	6a3b      	ldr	r3, [r7, #32]
 800e0c6:	f113 0f02 	cmn.w	r3, #2
 800e0ca:	d001      	beq.n	800e0d0 <lfs_fs_parent+0x80>
            return tag;
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	e00c      	b.n	800e0ea <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	3318      	adds	r3, #24
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7fb fc2c 	bl	8009932 <lfs_pair_isnull>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	f083 0301 	eor.w	r3, r3, #1
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1c3      	bne.n	800e06e <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800e0e6:	f06f 0301 	mvn.w	r3, #1
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3728      	adds	r7, #40	; 0x28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	0800dfcb 	.word	0x0800dfcb
 800e0f8:	20000008 	.word	0x20000008
 800e0fc:	7ff003ff 	.word	0x7ff003ff

0800e100 <lfs_fs_relocate>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 800e100:	b580      	push	{r7, lr}
 800e102:	b0a6      	sub	sp, #152	; 0x98
 800e104:	af04      	add	r7, sp, #16
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	3320      	adds	r3, #32
 800e110:	4619      	mov	r1, r3
 800e112:	68b8      	ldr	r0, [r7, #8]
 800e114:	f7fb fc28 	bl	8009968 <lfs_pair_cmp>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d107      	bne.n	800e12e <lfs_fs_relocate+0x2e>
        lfs->root[0] = newpair[0];
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	685a      	ldr	r2, [r3, #4]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e136:	e031      	b.n	800e19c <lfs_fs_relocate+0x9c>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 800e138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e13c:	3308      	adds	r3, #8
 800e13e:	4619      	mov	r1, r3
 800e140:	68b8      	ldr	r0, [r7, #8]
 800e142:	f7fb fc11 	bl	8009968 <lfs_pair_cmp>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d109      	bne.n	800e160 <lfs_fs_relocate+0x60>
            d->m.pair[0] = newpair[0];
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e154:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e15e:	60da      	str	r2, [r3, #12]
        }

        if (d->type == LFS_TYPE_DIR &&
 800e160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e164:	799b      	ldrb	r3, [r3, #6]
 800e166:	2b02      	cmp	r3, #2
 800e168:	d113      	bne.n	800e192 <lfs_fs_relocate+0x92>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
 800e16a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e16e:	332c      	adds	r3, #44	; 0x2c
 800e170:	4619      	mov	r1, r3
 800e172:	68b8      	ldr	r0, [r7, #8]
 800e174:	f7fb fbf8 	bl	8009968 <lfs_pair_cmp>
 800e178:	4603      	mov	r3, r0
        if (d->type == LFS_TYPE_DIR &&
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d109      	bne.n	800e192 <lfs_fs_relocate+0x92>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e186:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e190:	631a      	str	r2, [r3, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800e192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e19c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d1c9      	bne.n	800e138 <lfs_fs_relocate+0x38>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 800e1a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	68b9      	ldr	r1, [r7, #8]
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f7ff ff4f 	bl	800e050 <lfs_fs_parent>
 800e1b2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800e1b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	da07      	bge.n	800e1ce <lfs_fs_relocate+0xce>
 800e1be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1c2:	f113 0f02 	cmn.w	r3, #2
 800e1c6:	d002      	beq.n	800e1ce <lfs_fs_relocate+0xce>
        return tag;
 800e1c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1cc:	e0f3      	b.n	800e3b6 <lfs_fs_relocate+0x2b6>
    }

    if (tag != LFS_ERR_NOENT) {
 800e1ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1d2:	f113 0f02 	cmn.w	r3, #2
 800e1d6:	d07c      	beq.n	800e2d2 <lfs_fs_relocate+0x1d2>
        // update disk, this creates a desync
        int err = lfs_fs_preporphans(lfs, +1);
 800e1d8:	2101      	movs	r1, #1
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 f8f8 	bl	800e3d0 <lfs_fs_preporphans>
 800e1e0:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800e1e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <lfs_fs_relocate+0xec>
            return err;
 800e1e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1ea:	e0e4      	b.n	800e3b6 <lfs_fs_relocate+0x2b6>
        }

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800e1ec:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e1f0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	3330      	adds	r3, #48	; 0x30
 800e1f8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fb fd40 	bl	8009c84 <lfs_gstate_hasmovehere>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d02d      	beq.n	800e266 <lfs_fs_relocate+0x166>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fb fc90 	bl	8009b34 <lfs_tag_id>
 800e214:	4603      	mov	r3, r0
 800e216:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            LFS_DEBUG("Fixing move while relocating "
 800e21a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e21c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e21e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800e222:	4867      	ldr	r0, [pc, #412]	; (800e3c0 <lfs_fs_relocate+0x2c0>)
 800e224:	9002      	str	r0, [sp, #8]
 800e226:	9201      	str	r2, [sp, #4]
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	460b      	mov	r3, r1
 800e22c:	f640 72c4 	movw	r2, #4036	; 0xfc4
 800e230:	4964      	ldr	r1, [pc, #400]	; (800e3c4 <lfs_fs_relocate+0x2c4>)
 800e232:	4865      	ldr	r0, [pc, #404]	; (800e3c8 <lfs_fs_relocate+0x2c8>)
 800e234:	f011 fb3a 	bl	801f8ac <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800e238:	2200      	movs	r2, #0
 800e23a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f000 f900 	bl	800e444 <lfs_fs_prepmove>
            if (moveid < lfs_tag_id(tag)) {
 800e244:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fb fc73 	bl	8009b34 <lfs_tag_id>
 800e24e:	4603      	mov	r3, r0
 800e250:	461a      	mov	r2, r3
 800e252:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e256:	4293      	cmp	r3, r2
 800e258:	d205      	bcs.n	800e266 <lfs_fs_relocate+0x166>
                tag -= LFS_MKTAG(0, 1, 0);
 800e25a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e25e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
        }

        lfs_pair_tole32(newpair);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7fb fbef 	bl	8009a4a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800e26c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e270:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e274:	4293      	cmp	r3, r2
 800e276:	d007      	beq.n	800e288 <lfs_fs_relocate+0x188>
 800e278:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e27c:	029b      	lsls	r3, r3, #10
 800e27e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e282:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e286:	e000      	b.n	800e28a <lfs_fs_relocate+0x18a>
 800e288:	2300      	movs	r3, #0
 800e28a:	647b      	str	r3, [r7, #68]	; 0x44
 800e28c:	2300      	movs	r3, #0
 800e28e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e294:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	653b      	str	r3, [r7, #80]	; 0x50
 800e29a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e29e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800e2a2:	2302      	movs	r3, #2
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	f7fd fdaf 	bl	800be08 <lfs_dir_commit>
 800e2aa:	67b8      	str	r0, [r7, #120]	; 0x78
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7fb fbb2 	bl	8009a16 <lfs_pair_fromle32>
        if (err) {
 800e2b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <lfs_fs_relocate+0x1bc>
            return err;
 800e2b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2ba:	e07c      	b.n	800e3b6 <lfs_fs_relocate+0x2b6>
        }

        // next step, clean up orphans
        err = lfs_fs_preporphans(lfs, -1);
 800e2bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f000 f885 	bl	800e3d0 <lfs_fs_preporphans>
 800e2c6:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800e2c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d001      	beq.n	800e2d2 <lfs_fs_relocate+0x1d2>
            return err;
 800e2ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2d0:	e071      	b.n	800e3b6 <lfs_fs_relocate+0x2b6>
        }
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 800e2d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	68b9      	ldr	r1, [r7, #8]
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f7ff fe30 	bl	800df40 <lfs_fs_pred>
 800e2e0:	6778      	str	r0, [r7, #116]	; 0x74
    if (err && err != LFS_ERR_NOENT) {
 800e2e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d005      	beq.n	800e2f4 <lfs_fs_relocate+0x1f4>
 800e2e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2ea:	f113 0f02 	cmn.w	r3, #2
 800e2ee:	d001      	beq.n	800e2f4 <lfs_fs_relocate+0x1f4>
        return err;
 800e2f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2f2:	e060      	b.n	800e3b6 <lfs_fs_relocate+0x2b6>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 800e2f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e2f6:	f113 0f02 	cmn.w	r3, #2
 800e2fa:	d05b      	beq.n	800e3b4 <lfs_fs_relocate+0x2b4>
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800e2fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e300:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	3330      	adds	r3, #48	; 0x30
 800e308:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e30c:	4611      	mov	r1, r2
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fb fcb8 	bl	8009c84 <lfs_gstate_hasmovehere>
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d01c      	beq.n	800e354 <lfs_fs_relocate+0x254>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fb fc08 	bl	8009b34 <lfs_tag_id>
 800e324:	4603      	mov	r3, r0
 800e326:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            LFS_DEBUG("Fixing move while relocating "
 800e32a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e32c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e32e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800e332:	4823      	ldr	r0, [pc, #140]	; (800e3c0 <lfs_fs_relocate+0x2c0>)
 800e334:	9002      	str	r0, [sp, #8]
 800e336:	9201      	str	r2, [sp, #4]
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	460b      	mov	r3, r1
 800e33c:	f640 72eb 	movw	r2, #4075	; 0xfeb
 800e340:	4920      	ldr	r1, [pc, #128]	; (800e3c4 <lfs_fs_relocate+0x2c4>)
 800e342:	4821      	ldr	r0, [pc, #132]	; (800e3c8 <lfs_fs_relocate+0x2c8>)
 800e344:	f011 fab2 	bl	801f8ac <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800e348:	2200      	movs	r2, #0
 800e34a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f000 f878 	bl	800e444 <lfs_fs_prepmove>
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7fb fb78 	bl	8009a4a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800e35a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800e35e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e362:	4293      	cmp	r3, r2
 800e364:	d007      	beq.n	800e376 <lfs_fs_relocate+0x276>
 800e366:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800e36a:	029b      	lsls	r3, r3, #10
 800e36c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e370:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e374:	e000      	b.n	800e378 <lfs_fs_relocate+0x278>
 800e376:	2300      	movs	r3, #0
 800e378:	627b      	str	r3, [r7, #36]	; 0x24
 800e37a:	2300      	movs	r3, #0
 800e37c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e37e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e382:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800e386:	051a      	lsls	r2, r3, #20
 800e388:	4b10      	ldr	r3, [pc, #64]	; (800e3cc <lfs_fs_relocate+0x2cc>)
 800e38a:	4313      	orrs	r3, r2
 800e38c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	633b      	str	r3, [r7, #48]	; 0x30
 800e392:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e396:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800e39a:	2302      	movs	r3, #2
 800e39c:	68f8      	ldr	r0, [r7, #12]
 800e39e:	f7fd fd33 	bl	800be08 <lfs_dir_commit>
 800e3a2:	6778      	str	r0, [r7, #116]	; 0x74
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f7fb fb36 	bl	8009a16 <lfs_pair_fromle32>
        if (err) {
 800e3aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <lfs_fs_relocate+0x2b4>
            return err;
 800e3b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3b2:	e000      	b.n	800e3b6 <lfs_fs_relocate+0x2b6>
        }
    }

    return 0;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3788      	adds	r7, #136	; 0x88
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	08020e38 	.word	0x08020e38
 800e3c4:	08020d2c 	.word	0x08020d2c
 800e3c8:	08021344 	.word	0x08021344
 800e3cc:	000ffc08 	.word	0x000ffc08

0800e3d0 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800e3d0:	b590      	push	{r4, r7, lr}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fb fbb7 	bl	8009b54 <lfs_tag_size>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10a      	bne.n	800e402 <lfs_fs_preporphans+0x32>
 800e3ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	da06      	bge.n	800e402 <lfs_fs_preporphans+0x32>
 800e3f4:	4b10      	ldr	r3, [pc, #64]	; (800e438 <lfs_fs_preporphans+0x68>)
 800e3f6:	4a11      	ldr	r2, [pc, #68]	; (800e43c <lfs_fs_preporphans+0x6c>)
 800e3f8:	f241 0103 	movw	r1, #4099	; 0x1003
 800e3fc:	4810      	ldr	r0, [pc, #64]	; (800e440 <lfs_fs_preporphans+0x70>)
 800e3fe:	f010 ffd9 	bl	801f3b4 <__assert_func>
    lfs->gstate.tag += orphans;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e40a:	441a      	add	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e414:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	3330      	adds	r3, #48	; 0x30
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fb fbfc 	bl	8009c1a <lfs_gstate_hasorphans>
 800e422:	4603      	mov	r3, r0
 800e424:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800e426:	ea44 0203 	orr.w	r2, r4, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	370c      	adds	r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	bd90      	pop	{r4, r7, pc}
 800e438:	08021388 	.word	0x08021388
 800e43c:	08025070 	.word	0x08025070
 800e440:	08020d2c 	.word	0x08020d2c

0800e444 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800e444:	b480      	push	{r7}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	460b      	mov	r3, r1
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e456:	4a17      	ldr	r2, [pc, #92]	; (800e4b4 <lfs_fs_prepmove+0x70>)
 800e458:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800e45a:	897b      	ldrh	r3, [r7, #10]
 800e45c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e460:	428b      	cmp	r3, r1
 800e462:	d006      	beq.n	800e472 <lfs_fs_prepmove+0x2e>
 800e464:	897b      	ldrh	r3, [r7, #10]
 800e466:	029b      	lsls	r3, r3, #10
 800e468:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e46c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e470:	e000      	b.n	800e474 <lfs_fs_prepmove+0x30>
 800e472:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800e474:	431a      	orrs	r2, r3
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800e47a:	897b      	ldrh	r3, [r7, #10]
 800e47c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e480:	4293      	cmp	r3, r2
 800e482:	d002      	beq.n	800e48a <lfs_fs_prepmove+0x46>
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	e000      	b.n	800e48c <lfs_fs_prepmove+0x48>
 800e48a:	2300      	movs	r3, #0
 800e48c:	68fa      	ldr	r2, [r7, #12]
 800e48e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800e490:	897b      	ldrh	r3, [r7, #10]
 800e492:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e496:	4293      	cmp	r3, r2
 800e498:	d003      	beq.n	800e4a2 <lfs_fs_prepmove+0x5e>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	3304      	adds	r3, #4
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	e000      	b.n	800e4a4 <lfs_fs_prepmove+0x60>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e4a8:	bf00      	nop
 800e4aa:	3714      	adds	r7, #20
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr
 800e4b4:	800003ff 	.word	0x800003ff

0800e4b8 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800e4b8:	b5b0      	push	{r4, r5, r7, lr}
 800e4ba:	b094      	sub	sp, #80	; 0x50
 800e4bc:	af04      	add	r7, sp, #16
 800e4be:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	333c      	adds	r3, #60	; 0x3c
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fb fbca 	bl	8009c5e <lfs_gstate_hasmove>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	f083 0301 	eor.w	r3, r3, #1
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <lfs_fs_demove+0x22>
        return 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	e049      	b.n	800e56e <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fb fb24 	bl	8009b34 <lfs_tag_id>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	4b21      	ldr	r3, [pc, #132]	; (800e578 <lfs_fs_demove+0xc0>)
 800e4f2:	9302      	str	r3, [sp, #8]
 800e4f4:	9201      	str	r2, [sp, #4]
 800e4f6:	9400      	str	r4, [sp, #0]
 800e4f8:	462b      	mov	r3, r5
 800e4fa:	f241 021d 	movw	r2, #4125	; 0x101d
 800e4fe:	491f      	ldr	r1, [pc, #124]	; (800e57c <lfs_fs_demove+0xc4>)
 800e500:	481f      	ldr	r0, [pc, #124]	; (800e580 <lfs_fs_demove+0xc8>)
 800e502:	f011 f9d3 	bl	801f8ac <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e50c:	f107 0318 	add.w	r3, r7, #24
 800e510:	4619      	mov	r1, r3
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f7fc fca4 	bl	800ae60 <lfs_dir_fetch>
 800e518:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 800e51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d001      	beq.n	800e524 <lfs_fs_demove+0x6c>
        return err;
 800e520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e522:	e024      	b.n	800e56e <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fb fb03 	bl	8009b34 <lfs_tag_id>
 800e52e:	4603      	mov	r3, r0
 800e530:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800e532:	2200      	movs	r2, #0
 800e534:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff ff83 	bl	800e444 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800e53e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e540:	029b      	lsls	r3, r3, #10
 800e542:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e546:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e54a:	613b      	str	r3, [r7, #16]
 800e54c:	2300      	movs	r3, #0
 800e54e:	617b      	str	r3, [r7, #20]
 800e550:	f107 0210 	add.w	r2, r7, #16
 800e554:	f107 0118 	add.w	r1, r7, #24
 800e558:	2301      	movs	r3, #1
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7fd fc54 	bl	800be08 <lfs_dir_commit>
 800e560:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800e562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e564:	2b00      	cmp	r3, #0
 800e566:	d001      	beq.n	800e56c <lfs_fs_demove+0xb4>
        return err;
 800e568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56a:	e000      	b.n	800e56e <lfs_fs_demove+0xb6>
    }

    return 0;
 800e56c:	2300      	movs	r3, #0
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3740      	adds	r7, #64	; 0x40
 800e572:	46bd      	mov	sp, r7
 800e574:	bdb0      	pop	{r4, r5, r7, pc}
 800e576:	bf00      	nop
 800e578:	08020e38 	.word	0x08020e38
 800e57c:	08020d2c 	.word	0x08020d2c
 800e580:	080213bc 	.word	0x080213bc

0800e584 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs) {
 800e584:	b5b0      	push	{r4, r5, r7, lr}
 800e586:	b0a8      	sub	sp, #160	; 0xa0
 800e588:	af04      	add	r7, sp, #16
 800e58a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3330      	adds	r3, #48	; 0x30
 800e590:	4618      	mov	r0, r3
 800e592:	f7fb fb42 	bl	8009c1a <lfs_gstate_hasorphans>
 800e596:	4603      	mov	r3, r0
 800e598:	f083 0301 	eor.w	r3, r3, #1
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d001      	beq.n	800e5a6 <lfs_fs_deorphan+0x22>
        return 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	e0e6      	b.n	800e774 <lfs_fs_deorphan+0x1f0>
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800e5a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e5aa:	2220      	movs	r2, #32
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f011 fad2 	bl	801fb58 <memset>
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
 800e5c0:	e0bd      	b.n	800e73e <lfs_fs_deorphan+0x1ba>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800e5c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e5c6:	f103 0218 	add.w	r2, r3, #24
 800e5ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7fc fc45 	bl	800ae60 <lfs_dir_fetch>
 800e5d6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 800e5da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <lfs_fs_deorphan+0x64>
            return err;
 800e5e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5e6:	e0c5      	b.n	800e774 <lfs_fs_deorphan+0x1f0>
        }

        // check head blocks for orphans
        if (!pdir.split) {
 800e5e8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800e5ec:	f083 0301 	eor.w	r3, r3, #1
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f000 8099 	beq.w	800e72a <lfs_fs_deorphan+0x1a6>
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800e5f8:	f107 020c 	add.w	r2, r7, #12
 800e5fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e600:	3318      	adds	r3, #24
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7ff fd23 	bl	800e050 <lfs_fs_parent>
 800e60a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800e60e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e612:	2b00      	cmp	r3, #0
 800e614:	da07      	bge.n	800e626 <lfs_fs_deorphan+0xa2>
 800e616:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e61a:	f113 0f02 	cmn.w	r3, #2
 800e61e:	d002      	beq.n	800e626 <lfs_fs_deorphan+0xa2>
                return tag;
 800e620:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e624:	e0a6      	b.n	800e774 <lfs_fs_deorphan+0x1f0>
            }

            if (tag == LFS_ERR_NOENT) {
 800e626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e62a:	f113 0f02 	cmn.w	r3, #2
 800e62e:	d11d      	bne.n	800e66c <lfs_fs_deorphan+0xe8>
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800e630:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e636:	4951      	ldr	r1, [pc, #324]	; (800e77c <lfs_fs_deorphan+0x1f8>)
 800e638:	9101      	str	r1, [sp, #4]
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	4613      	mov	r3, r2
 800e63e:	f241 0252 	movw	r2, #4178	; 0x1052
 800e642:	494f      	ldr	r1, [pc, #316]	; (800e780 <lfs_fs_deorphan+0x1fc>)
 800e644:	484f      	ldr	r0, [pc, #316]	; (800e784 <lfs_fs_deorphan+0x200>)
 800e646:	f011 f931 	bl	801f8ac <iprintf>
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
 800e64a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e64e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7fd f801 	bl	800b65c <lfs_dir_drop>
 800e65a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (err) {
 800e65e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e662:	2b00      	cmp	r3, #0
 800e664:	d05d      	beq.n	800e722 <lfs_fs_deorphan+0x19e>
                    return err;
 800e666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e66a:	e083      	b.n	800e774 <lfs_fs_deorphan+0x1f0>
                // refetch tail
                continue;
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 800e66c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e670:	f107 010c 	add.w	r1, r7, #12
 800e674:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	4613      	mov	r3, r2
 800e67c:	4a42      	ldr	r2, [pc, #264]	; (800e788 <lfs_fs_deorphan+0x204>)
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7fb fdda 	bl	800a238 <lfs_dir_get>
 800e684:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
 800e688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	da02      	bge.n	800e696 <lfs_fs_deorphan+0x112>
                return res;
 800e690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e694:	e06e      	b.n	800e774 <lfs_fs_deorphan+0x1f0>
            }
            lfs_pair_fromle32(pair);
 800e696:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fb f9bb 	bl	8009a16 <lfs_pair_fromle32>

            if (!lfs_pair_sync(pair, pdir.tail)) {
 800e6a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e6a4:	f103 0218 	add.w	r2, r3, #24
 800e6a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e6ac:	4611      	mov	r1, r2
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fb f984 	bl	80099bc <lfs_pair_sync>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	f083 0301 	eor.w	r3, r3, #1
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d034      	beq.n	800e72a <lfs_fs_deorphan+0x1a6>
                // we have desynced
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 800e6c0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e6c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e6c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6ca:	4c2c      	ldr	r4, [pc, #176]	; (800e77c <lfs_fs_deorphan+0x1f8>)
 800e6cc:	9403      	str	r4, [sp, #12]
 800e6ce:	9102      	str	r1, [sp, #8]
 800e6d0:	9201      	str	r2, [sp, #4]
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	f241 0268 	movw	r2, #4200	; 0x1068
 800e6da:	4929      	ldr	r1, [pc, #164]	; (800e780 <lfs_fs_deorphan+0x1fc>)
 800e6dc:	482b      	ldr	r0, [pc, #172]	; (800e78c <lfs_fs_deorphan+0x208>)
 800e6de:	f011 f8e5 	bl	801f8ac <iprintf>
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
 800e6e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fb f9af 	bl	8009a4a <lfs_pair_tole32>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 800e6ec:	4b28      	ldr	r3, [pc, #160]	; (800e790 <lfs_fs_deorphan+0x20c>)
 800e6ee:	637b      	str	r3, [r7, #52]	; 0x34
 800e6f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e6f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e6fa:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800e6fe:	2301      	movs	r3, #1
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f7fd fb81 	bl	800be08 <lfs_dir_commit>
 800e706:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
 800e70a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fb f981 	bl	8009a16 <lfs_pair_fromle32>
                if (err) {
 800e714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d004      	beq.n	800e726 <lfs_fs_deorphan+0x1a2>
                    return err;
 800e71c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                return tag;
 800e720:	e028      	b.n	800e774 <lfs_fs_deorphan+0x1f0>
                continue;
 800e722:	bf00      	nop
 800e724:	e00b      	b.n	800e73e <lfs_fs_deorphan+0x1ba>
                }

                // refetch tail
                continue;
 800e726:	bf00      	nop
 800e728:	e009      	b.n	800e73e <lfs_fs_deorphan+0x1ba>
            }
        }

        pdir = dir;
 800e72a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800e72e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 800e732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e736:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e73a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (!lfs_pair_isnull(pdir.tail)) {
 800e73e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e742:	3318      	adds	r3, #24
 800e744:	4618      	mov	r0, r3
 800e746:	f7fb f8f4 	bl	8009932 <lfs_pair_isnull>
 800e74a:	4603      	mov	r3, r0
 800e74c:	f083 0301 	eor.w	r3, r3, #1
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b00      	cmp	r3, #0
 800e754:	f47f af35 	bne.w	800e5c2 <lfs_fs_deorphan+0x3e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	3330      	adds	r3, #48	; 0x30
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fb fa6f 	bl	8009c40 <lfs_gstate_getorphans>
 800e762:	4603      	mov	r3, r0
 800e764:	425b      	negs	r3, r3
 800e766:	b2db      	uxtb	r3, r3
 800e768:	b25b      	sxtb	r3, r3
 800e76a:	4619      	mov	r1, r3
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f7ff fe2f 	bl	800e3d0 <lfs_fs_preporphans>
 800e772:	4603      	mov	r3, r0
}
 800e774:	4618      	mov	r0, r3
 800e776:	3790      	adds	r7, #144	; 0x90
 800e778:	46bd      	mov	sp, r7
 800e77a:	bdb0      	pop	{r4, r5, r7, pc}
 800e77c:	08020e38 	.word	0x08020e38
 800e780:	08020d2c 	.word	0x08020d2c
 800e784:	080213f0 	.word	0x080213f0
 800e788:	7ffffc00 	.word	0x7ffffc00
 800e78c:	08021420 	.word	0x08021420
 800e790:	600ffc08 	.word	0x600ffc08

0800e794 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7ff fe8b 	bl	800e4b8 <lfs_fs_demove>
 800e7a2:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d001      	beq.n	800e7ae <lfs_fs_forceconsistency+0x1a>
        return err;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	e009      	b.n	800e7c2 <lfs_fs_forceconsistency+0x2e>
    }

    err = lfs_fs_deorphan(lfs);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7ff fee8 	bl	800e584 <lfs_fs_deorphan>
 800e7b4:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d001      	beq.n	800e7c0 <lfs_fs_forceconsistency+0x2c>
        return err;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	e000      	b.n	800e7c2 <lfs_fs_forceconsistency+0x2e>
    }

    return 0;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800e7ca:	b480      	push	{r7}
 800e7cc:	b085      	sub	sp, #20
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	1c5a      	adds	r2, r3, #1
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	601a      	str	r2, [r3, #0]
    return 0;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3714      	adds	r7, #20
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800e7fc:	f107 0208 	add.w	r2, r7, #8
 800e800:	2300      	movs	r3, #0
 800e802:	4907      	ldr	r1, [pc, #28]	; (800e820 <lfs_fs_rawsize+0x30>)
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f7ff fa75 	bl	800dcf4 <lfs_fs_rawtraverse>
 800e80a:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d001      	beq.n	800e816 <lfs_fs_rawsize+0x26>
        return err;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	e000      	b.n	800e818 <lfs_fs_rawsize+0x28>
    }

    return size;
 800e816:	68bb      	ldr	r3, [r7, #8]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3710      	adds	r7, #16
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}
 800e820:	0800e7cb 	.word	0x0800e7cb

0800e824 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	695b      	ldr	r3, [r3, #20]
 800e832:	6838      	ldr	r0, [r7, #0]
 800e834:	4798      	blx	r3
 800e836:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <lfs_format+0x1e>
        return err;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	e009      	b.n	800e856 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7ff f833 	bl	800d8b0 <lfs_rawformat>
 800e84a:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	6838      	ldr	r0, [r7, #0]
 800e852:	4798      	blx	r3
    return err;
 800e854:	68fb      	ldr	r3, [r7, #12]
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800e85e:	b580      	push	{r7, lr}
 800e860:	b084      	sub	sp, #16
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	695b      	ldr	r3, [r3, #20]
 800e86c:	6838      	ldr	r0, [r7, #0]
 800e86e:	4798      	blx	r3
 800e870:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d001      	beq.n	800e87c <lfs_mount+0x1e>
        return err;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	e009      	b.n	800e890 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800e87c:	6839      	ldr	r1, [r7, #0]
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7ff f8b6 	bl	800d9f0 <lfs_rawmount>
 800e884:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	6838      	ldr	r0, [r7, #0]
 800e88c:	4798      	blx	r3
    return err;
 800e88e:	68fb      	ldr	r3, [r7, #12]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3710      	adds	r7, #16
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8a6:	695b      	ldr	r3, [r3, #20]
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	4798      	blx	r3
 800e8b0:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d001      	beq.n	800e8bc <lfs_mkdir+0x24>
        return err;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	e00c      	b.n	800e8d6 <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 800e8bc:	6839      	ldr	r1, [r7, #0]
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7fd fe54 	bl	800c56c <lfs_rawmkdir>
 800e8c4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e8d0:	4610      	mov	r0, r2
 800e8d2:	4798      	blx	r3
    return err;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
	...

0800e8e0 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800e8e0:	b480      	push	{r7}
 800e8e2:	b087      	sub	sp, #28
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	617b      	str	r3, [r7, #20]
 800e8f4:	e024      	b.n	800e940 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	091a      	lsrs	r2, r3, #4
 800e8fa:	6939      	ldr	r1, [r7, #16]
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	440b      	add	r3, r1
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	4619      	mov	r1, r3
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	404b      	eors	r3, r1
 800e908:	f003 030f 	and.w	r3, r3, #15
 800e90c:	4912      	ldr	r1, [pc, #72]	; (800e958 <lfs_crc+0x78>)
 800e90e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e912:	4053      	eors	r3, r2
 800e914:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	091a      	lsrs	r2, r3, #4
 800e91a:	6939      	ldr	r1, [r7, #16]
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	440b      	add	r3, r1
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	091b      	lsrs	r3, r3, #4
 800e924:	b2db      	uxtb	r3, r3
 800e926:	4619      	mov	r1, r3
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	404b      	eors	r3, r1
 800e92c:	f003 030f 	and.w	r3, r3, #15
 800e930:	4909      	ldr	r1, [pc, #36]	; (800e958 <lfs_crc+0x78>)
 800e932:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e936:	4053      	eors	r3, r2
 800e938:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	3301      	adds	r3, #1
 800e93e:	617b      	str	r3, [r7, #20]
 800e940:	697a      	ldr	r2, [r7, #20]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	429a      	cmp	r2, r3
 800e946:	d3d6      	bcc.n	800e8f6 <lfs_crc+0x16>
    }

    return crc;
 800e948:	68fb      	ldr	r3, [r7, #12]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	371c      	adds	r7, #28
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	08025084 	.word	0x08025084

0800e95c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	330c      	adds	r3, #12
 800e96c:	461a      	mov	r2, r3
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f002 fc95 	bl	80112a0 <tcpip_send_msg_wait_sem>
 800e976:	4603      	mov	r3, r0
 800e978:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d103      	bne.n	800e98a <netconn_apimsg+0x2e>
    return apimsg->err;
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e988:	e001      	b.n	800e98e <netconn_apimsg+0x32>
  }
  return err;
 800e98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
	...

0800e998 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b08c      	sub	sp, #48	; 0x30
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	603a      	str	r2, [r7, #0]
 800e9a2:	71fb      	strb	r3, [r7, #7]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e9a8:	79fb      	ldrb	r3, [r7, #7]
 800e9aa:	6839      	ldr	r1, [r7, #0]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f001 f923 	bl	800fbf8 <netconn_alloc>
 800e9b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800e9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d054      	beq.n	800ea64 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e9ba:	79bb      	ldrb	r3, [r7, #6]
 800e9bc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e9c2:	f107 0308 	add.w	r3, r7, #8
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	4829      	ldr	r0, [pc, #164]	; (800ea70 <netconn_new_with_proto_and_callback+0xd8>)
 800e9ca:	f7ff ffc7 	bl	800e95c <netconn_apimsg>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800e9d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d043      	beq.n	800ea64 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d005      	beq.n	800e9f0 <netconn_new_with_proto_and_callback+0x58>
 800e9e4:	4b23      	ldr	r3, [pc, #140]	; (800ea74 <netconn_new_with_proto_and_callback+0xdc>)
 800e9e6:	22a3      	movs	r2, #163	; 0xa3
 800e9e8:	4923      	ldr	r1, [pc, #140]	; (800ea78 <netconn_new_with_proto_and_callback+0xe0>)
 800e9ea:	4824      	ldr	r0, [pc, #144]	; (800ea7c <netconn_new_with_proto_and_callback+0xe4>)
 800e9ec:	f010 ff5e 	bl	801f8ac <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f2:	3310      	adds	r3, #16
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f00f fcb2 	bl	801e35e <sys_mbox_valid>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d105      	bne.n	800ea0c <netconn_new_with_proto_and_callback+0x74>
 800ea00:	4b1c      	ldr	r3, [pc, #112]	; (800ea74 <netconn_new_with_proto_and_callback+0xdc>)
 800ea02:	22a4      	movs	r2, #164	; 0xa4
 800ea04:	491e      	ldr	r1, [pc, #120]	; (800ea80 <netconn_new_with_proto_and_callback+0xe8>)
 800ea06:	481d      	ldr	r0, [pc, #116]	; (800ea7c <netconn_new_with_proto_and_callback+0xe4>)
 800ea08:	f010 ff50 	bl	801f8ac <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0e:	3314      	adds	r3, #20
 800ea10:	4618      	mov	r0, r3
 800ea12:	f00f fca4 	bl	801e35e <sys_mbox_valid>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d005      	beq.n	800ea28 <netconn_new_with_proto_and_callback+0x90>
 800ea1c:	4b15      	ldr	r3, [pc, #84]	; (800ea74 <netconn_new_with_proto_and_callback+0xdc>)
 800ea1e:	22a6      	movs	r2, #166	; 0xa6
 800ea20:	4918      	ldr	r1, [pc, #96]	; (800ea84 <netconn_new_with_proto_and_callback+0xec>)
 800ea22:	4816      	ldr	r0, [pc, #88]	; (800ea7c <netconn_new_with_proto_and_callback+0xe4>)
 800ea24:	f010 ff42 	bl	801f8ac <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ea28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2a:	330c      	adds	r3, #12
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f00f fd27 	bl	801e480 <sys_sem_valid>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d105      	bne.n	800ea44 <netconn_new_with_proto_and_callback+0xac>
 800ea38:	4b0e      	ldr	r3, [pc, #56]	; (800ea74 <netconn_new_with_proto_and_callback+0xdc>)
 800ea3a:	22a9      	movs	r2, #169	; 0xa9
 800ea3c:	4912      	ldr	r1, [pc, #72]	; (800ea88 <netconn_new_with_proto_and_callback+0xf0>)
 800ea3e:	480f      	ldr	r0, [pc, #60]	; (800ea7c <netconn_new_with_proto_and_callback+0xe4>)
 800ea40:	f010 ff34 	bl	801f8ac <iprintf>
      sys_sem_free(&conn->op_completed);
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea46:	330c      	adds	r3, #12
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f00f fd0c 	bl	801e466 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ea4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea50:	3310      	adds	r3, #16
 800ea52:	4618      	mov	r0, r3
 800ea54:	f00f fbfc 	bl	801e250 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ea58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea5a:	2007      	movs	r0, #7
 800ea5c:	f003 f9ce 	bl	8011dfc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ea60:	2300      	movs	r3, #0
 800ea62:	e000      	b.n	800ea66 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3730      	adds	r7, #48	; 0x30
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	0800fbcd 	.word	0x0800fbcd
 800ea74:	0802150c 	.word	0x0802150c
 800ea78:	08021540 	.word	0x08021540
 800ea7c:	08021564 	.word	0x08021564
 800ea80:	0802158c 	.word	0x0802158c
 800ea84:	080215a4 	.word	0x080215a4
 800ea88:	080215c8 	.word	0x080215c8

0800ea8c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b08c      	sub	sp, #48	; 0x30
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d101      	bne.n	800ea9e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	e014      	b.n	800eac8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800eaa2:	2329      	movs	r3, #41	; 0x29
 800eaa4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800eaa6:	f107 030c 	add.w	r3, r7, #12
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4808      	ldr	r0, [pc, #32]	; (800ead0 <netconn_prepare_delete+0x44>)
 800eaae:	f7ff ff55 	bl	800e95c <netconn_apimsg>
 800eab2:	4603      	mov	r3, r0
 800eab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800eab8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <netconn_prepare_delete+0x3a>
    return err;
 800eac0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800eac4:	e000      	b.n	800eac8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3730      	adds	r7, #48	; 0x30
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	08010139 	.word	0x08010139

0800ead4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d101      	bne.n	800eae6 <netconn_delete+0x12>
    return ERR_OK;
 800eae2:	2300      	movs	r3, #0
 800eae4:	e00d      	b.n	800eb02 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff ffd0 	bl	800ea8c <netconn_prepare_delete>
 800eaec:	4603      	mov	r3, r0
 800eaee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800eaf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d102      	bne.n	800eafe <netconn_delete+0x2a>
    netconn_free(conn);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f001 f8eb 	bl	800fcd4 <netconn_free>
  }
  return err;
 800eafe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
	...

0800eb0c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08e      	sub	sp, #56	; 0x38
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	4613      	mov	r3, r2
 800eb18:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d109      	bne.n	800eb34 <netconn_bind+0x28>
 800eb20:	4b11      	ldr	r3, [pc, #68]	; (800eb68 <netconn_bind+0x5c>)
 800eb22:	f44f 729c 	mov.w	r2, #312	; 0x138
 800eb26:	4911      	ldr	r1, [pc, #68]	; (800eb6c <netconn_bind+0x60>)
 800eb28:	4811      	ldr	r0, [pc, #68]	; (800eb70 <netconn_bind+0x64>)
 800eb2a:	f010 febf 	bl	801f8ac <iprintf>
 800eb2e:	f06f 030f 	mvn.w	r3, #15
 800eb32:	e015      	b.n	800eb60 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d101      	bne.n	800eb3e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800eb3a:	4b0e      	ldr	r3, [pc, #56]	; (800eb74 <netconn_bind+0x68>)
 800eb3c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800eb46:	88fb      	ldrh	r3, [r7, #6]
 800eb48:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800eb4a:	f107 0314 	add.w	r3, r7, #20
 800eb4e:	4619      	mov	r1, r3
 800eb50:	4809      	ldr	r0, [pc, #36]	; (800eb78 <netconn_bind+0x6c>)
 800eb52:	f7ff ff03 	bl	800e95c <netconn_apimsg>
 800eb56:	4603      	mov	r3, r0
 800eb58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800eb5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3738      	adds	r7, #56	; 0x38
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	0802150c 	.word	0x0802150c
 800eb6c:	08021644 	.word	0x08021644
 800eb70:	08021564 	.word	0x08021564
 800eb74:	080251e8 	.word	0x080251e8
 800eb78:	08010301 	.word	0x08010301

0800eb7c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b08c      	sub	sp, #48	; 0x30
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	460b      	mov	r3, r1
 800eb86:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d109      	bne.n	800eba2 <netconn_listen_with_backlog+0x26>
 800eb8e:	4b0d      	ldr	r3, [pc, #52]	; (800ebc4 <netconn_listen_with_backlog+0x48>)
 800eb90:	f240 12bb 	movw	r2, #443	; 0x1bb
 800eb94:	490c      	ldr	r1, [pc, #48]	; (800ebc8 <netconn_listen_with_backlog+0x4c>)
 800eb96:	480d      	ldr	r0, [pc, #52]	; (800ebcc <netconn_listen_with_backlog+0x50>)
 800eb98:	f010 fe88 	bl	801f8ac <iprintf>
 800eb9c:	f06f 030f 	mvn.w	r3, #15
 800eba0:	e00c      	b.n	800ebbc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800eba6:	f107 030c 	add.w	r3, r7, #12
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4808      	ldr	r0, [pc, #32]	; (800ebd0 <netconn_listen_with_backlog+0x54>)
 800ebae:	f7ff fed5 	bl	800e95c <netconn_apimsg>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ebb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3730      	adds	r7, #48	; 0x30
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	0802150c 	.word	0x0802150c
 800ebc8:	080216c4 	.word	0x080216c4
 800ebcc:	08021564 	.word	0x08021564
 800ebd0:	08010375 	.word	0x08010375

0800ebd4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d109      	bne.n	800ebf8 <netconn_accept+0x24>
 800ebe4:	4b3d      	ldr	r3, [pc, #244]	; (800ecdc <netconn_accept+0x108>)
 800ebe6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ebea:	493d      	ldr	r1, [pc, #244]	; (800ece0 <netconn_accept+0x10c>)
 800ebec:	483d      	ldr	r0, [pc, #244]	; (800ece4 <netconn_accept+0x110>)
 800ebee:	f010 fe5d 	bl	801f8ac <iprintf>
 800ebf2:	f06f 030f 	mvn.w	r3, #15
 800ebf6:	e06c      	b.n	800ecd2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d109      	bne.n	800ec18 <netconn_accept+0x44>
 800ec04:	4b35      	ldr	r3, [pc, #212]	; (800ecdc <netconn_accept+0x108>)
 800ec06:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ec0a:	4937      	ldr	r1, [pc, #220]	; (800ece8 <netconn_accept+0x114>)
 800ec0c:	4835      	ldr	r0, [pc, #212]	; (800ece4 <netconn_accept+0x110>)
 800ec0e:	f010 fe4d 	bl	801f8ac <iprintf>
 800ec12:	f06f 030f 	mvn.w	r3, #15
 800ec16:	e05c      	b.n	800ecd2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 fb6c 	bl	800f2f6 <netconn_err>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800ec22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d002      	beq.n	800ec30 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800ec2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec2e:	e050      	b.n	800ecd2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	3314      	adds	r3, #20
 800ec34:	4618      	mov	r0, r3
 800ec36:	f00f fb92 	bl	801e35e <sys_mbox_valid>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d005      	beq.n	800ec4c <netconn_accept+0x78>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	7f1b      	ldrb	r3, [r3, #28]
 800ec44:	f003 0301 	and.w	r3, r3, #1
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d002      	beq.n	800ec52 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800ec4c:	f06f 030e 	mvn.w	r3, #14
 800ec50:	e03f      	b.n	800ecd2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	7f1b      	ldrb	r3, [r3, #28]
 800ec56:	f003 0302 	and.w	r3, r3, #2
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00e      	beq.n	800ec7c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	3314      	adds	r3, #20
 800ec62:	f107 020c 	add.w	r2, r7, #12
 800ec66:	4611      	mov	r1, r2
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f00f fb5c 	bl	801e326 <sys_arch_mbox_tryfetch>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec74:	d10a      	bne.n	800ec8c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ec76:	f06f 0306 	mvn.w	r3, #6
 800ec7a:	e02a      	b.n	800ecd2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	3314      	adds	r3, #20
 800ec80:	f107 010c 	add.w	r1, r7, #12
 800ec84:	2200      	movs	r2, #0
 800ec86:	4618      	mov	r0, r3
 800ec88:	f00f fb0e 	bl	801e2a8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d005      	beq.n	800eca0 <netconn_accept+0xcc>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2101      	movs	r1, #1
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f107 0213 	add.w	r2, r7, #19
 800eca6:	4611      	mov	r1, r2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f000 fb75 	bl	800f398 <lwip_netconn_is_err_msg>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d002      	beq.n	800ecba <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800ecb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecb8:	e00b      	b.n	800ecd2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d102      	bne.n	800ecc6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800ecc0:	f06f 030e 	mvn.w	r3, #14
 800ecc4:	e005      	b.n	800ecd2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	697a      	ldr	r2, [r7, #20]
 800ecce:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ecd0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	0802150c 	.word	0x0802150c
 800ece0:	080216e4 	.word	0x080216e4
 800ece4:	08021564 	.word	0x08021564
 800ece8:	08021704 	.word	0x08021704

0800ecec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b088      	sub	sp, #32
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d109      	bne.n	800ed18 <netconn_recv_data+0x2c>
 800ed04:	4b58      	ldr	r3, [pc, #352]	; (800ee68 <netconn_recv_data+0x17c>)
 800ed06:	f44f 7212 	mov.w	r2, #584	; 0x248
 800ed0a:	4958      	ldr	r1, [pc, #352]	; (800ee6c <netconn_recv_data+0x180>)
 800ed0c:	4858      	ldr	r0, [pc, #352]	; (800ee70 <netconn_recv_data+0x184>)
 800ed0e:	f010 fdcd 	bl	801f8ac <iprintf>
 800ed12:	f06f 030f 	mvn.w	r3, #15
 800ed16:	e0a2      	b.n	800ee5e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d109      	bne.n	800ed38 <netconn_recv_data+0x4c>
 800ed24:	4b50      	ldr	r3, [pc, #320]	; (800ee68 <netconn_recv_data+0x17c>)
 800ed26:	f240 224a 	movw	r2, #586	; 0x24a
 800ed2a:	4952      	ldr	r1, [pc, #328]	; (800ee74 <netconn_recv_data+0x188>)
 800ed2c:	4850      	ldr	r0, [pc, #320]	; (800ee70 <netconn_recv_data+0x184>)
 800ed2e:	f010 fdbd 	bl	801f8ac <iprintf>
 800ed32:	f06f 030f 	mvn.w	r3, #15
 800ed36:	e092      	b.n	800ee5e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	3310      	adds	r3, #16
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f00f fb0e 	bl	801e35e <sys_mbox_valid>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d10e      	bne.n	800ed66 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f000 fad4 	bl	800f2f6 <netconn_err>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800ed52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d002      	beq.n	800ed60 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800ed5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ed5e:	e07e      	b.n	800ee5e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800ed60:	f06f 030a 	mvn.w	r3, #10
 800ed64:	e07b      	b.n	800ee5e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	7f1b      	ldrb	r3, [r3, #28]
 800ed6a:	f003 0302 	and.w	r3, r3, #2
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10f      	bne.n	800ed92 <netconn_recv_data+0xa6>
 800ed72:	79fb      	ldrb	r3, [r7, #7]
 800ed74:	f003 0304 	and.w	r3, r3, #4
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10a      	bne.n	800ed92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	7f1b      	ldrb	r3, [r3, #28]
 800ed80:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d104      	bne.n	800ed92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d023      	beq.n	800edda <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	3310      	adds	r3, #16
 800ed96:	f107 0218 	add.w	r2, r7, #24
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f00f fac2 	bl	801e326 <sys_arch_mbox_tryfetch>
 800eda2:	4603      	mov	r3, r0
 800eda4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eda8:	d11f      	bne.n	800edea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f000 faa3 	bl	800f2f6 <netconn_err>
 800edb0:	4603      	mov	r3, r0
 800edb2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800edb4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d002      	beq.n	800edc2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800edbc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800edc0:	e04d      	b.n	800ee5e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	7f1b      	ldrb	r3, [r3, #28]
 800edc6:	f003 0301 	and.w	r3, r3, #1
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d002      	beq.n	800edd4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800edce:	f06f 030a 	mvn.w	r3, #10
 800edd2:	e044      	b.n	800ee5e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800edd4:	f06f 0306 	mvn.w	r3, #6
 800edd8:	e041      	b.n	800ee5e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	3310      	adds	r3, #16
 800edde:	f107 0118 	add.w	r1, r7, #24
 800ede2:	2200      	movs	r2, #0
 800ede4:	4618      	mov	r0, r3
 800ede6:	f00f fa5f 	bl	801e2a8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800edf2:	2b10      	cmp	r3, #16
 800edf4:	d117      	bne.n	800ee26 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	f107 0217 	add.w	r2, r7, #23
 800edfc:	4611      	mov	r1, r2
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 faca 	bl	800f398 <lwip_netconn_is_err_msg>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d009      	beq.n	800ee1e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ee0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee0e:	f113 0f0f 	cmn.w	r3, #15
 800ee12:	d101      	bne.n	800ee18 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	e022      	b.n	800ee5e <netconn_recv_data+0x172>
      }
      return err;
 800ee18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee1c:	e01f      	b.n	800ee5e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800ee1e:	69bb      	ldr	r3, [r7, #24]
 800ee20:	891b      	ldrh	r3, [r3, #8]
 800ee22:	83fb      	strh	r3, [r7, #30]
 800ee24:	e00d      	b.n	800ee42 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d106      	bne.n	800ee3a <netconn_recv_data+0x14e>
 800ee2c:	4b0e      	ldr	r3, [pc, #56]	; (800ee68 <netconn_recv_data+0x17c>)
 800ee2e:	f240 2291 	movw	r2, #657	; 0x291
 800ee32:	4911      	ldr	r1, [pc, #68]	; (800ee78 <netconn_recv_data+0x18c>)
 800ee34:	480e      	ldr	r0, [pc, #56]	; (800ee70 <netconn_recv_data+0x184>)
 800ee36:	f010 fd39 	bl	801f8ac <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	891b      	ldrh	r3, [r3, #8]
 800ee40:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d005      	beq.n	800ee56 <netconn_recv_data+0x16a>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee4e:	8bfa      	ldrh	r2, [r7, #30]
 800ee50:	2101      	movs	r1, #1
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ee56:	69ba      	ldr	r2, [r7, #24]
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ee5c:	2300      	movs	r3, #0
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3720      	adds	r7, #32
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	0802150c 	.word	0x0802150c
 800ee6c:	08021724 	.word	0x08021724
 800ee70:	08021564 	.word	0x08021564
 800ee74:	08021744 	.word	0x08021744
 800ee78:	08021760 	.word	0x08021760

0800ee7c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d005      	beq.n	800ee9a <netconn_tcp_recvd_msg+0x1e>
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee96:	2b10      	cmp	r3, #16
 800ee98:	d009      	beq.n	800eeae <netconn_tcp_recvd_msg+0x32>
 800ee9a:	4b0c      	ldr	r3, [pc, #48]	; (800eecc <netconn_tcp_recvd_msg+0x50>)
 800ee9c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800eea0:	490b      	ldr	r1, [pc, #44]	; (800eed0 <netconn_tcp_recvd_msg+0x54>)
 800eea2:	480c      	ldr	r0, [pc, #48]	; (800eed4 <netconn_tcp_recvd_msg+0x58>)
 800eea4:	f010 fd02 	bl	801f8ac <iprintf>
 800eea8:	f06f 030f 	mvn.w	r3, #15
 800eeac:	e00a      	b.n	800eec4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800eeba:	6879      	ldr	r1, [r7, #4]
 800eebc:	4806      	ldr	r0, [pc, #24]	; (800eed8 <netconn_tcp_recvd_msg+0x5c>)
 800eebe:	f7ff fd4d 	bl	800e95c <netconn_apimsg>
 800eec2:	4603      	mov	r3, r0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	0802150c 	.word	0x0802150c
 800eed0:	0802176c 	.word	0x0802176c
 800eed4:	08021564 	.word	0x08021564
 800eed8:	080104a5 	.word	0x080104a5

0800eedc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b090      	sub	sp, #64	; 0x40
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	60b9      	str	r1, [r7, #8]
 800eee6:	4613      	mov	r3, r2
 800eee8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	3310      	adds	r3, #16
 800eeee:	4618      	mov	r0, r3
 800eef0:	f00f fa35 	bl	801e35e <sys_mbox_valid>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d102      	bne.n	800ef00 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800eefa:	f06f 030a 	mvn.w	r3, #10
 800eefe:	e06d      	b.n	800efdc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	7f1b      	ldrb	r3, [r3, #28]
 800ef04:	b25b      	sxtb	r3, r3
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	da07      	bge.n	800ef1a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	7f1b      	ldrb	r3, [r3, #28]
 800ef0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef12:	b2da      	uxtb	r2, r3
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800ef18:	e039      	b.n	800ef8e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ef1a:	79fb      	ldrb	r3, [r7, #7]
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	68b9      	ldr	r1, [r7, #8]
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f7ff fee3 	bl	800ecec <netconn_recv_data>
 800ef26:	4603      	mov	r3, r0
 800ef28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800ef2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ef34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ef38:	e050      	b.n	800efdc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ef40:	79fb      	ldrb	r3, [r7, #7]
 800ef42:	f003 0308 	and.w	r3, r3, #8
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d10e      	bne.n	800ef68 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800ef4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d002      	beq.n	800ef56 <netconn_recv_data_tcp+0x7a>
 800ef50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef52:	891b      	ldrh	r3, [r3, #8]
 800ef54:	e000      	b.n	800ef58 <netconn_recv_data_tcp+0x7c>
 800ef56:	2301      	movs	r3, #1
 800ef58:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ef5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ef5c:	f107 0214 	add.w	r2, r7, #20
 800ef60:	4619      	mov	r1, r3
 800ef62:	68f8      	ldr	r0, [r7, #12]
 800ef64:	f7ff ff8a 	bl	800ee7c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ef68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d134      	bne.n	800efd8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800ef6e:	79fb      	ldrb	r3, [r7, #7]
 800ef70:	f003 0310 	and.w	r3, r3, #16
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d009      	beq.n	800ef8c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	7f1b      	ldrb	r3, [r3, #28]
 800ef7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ef86:	f06f 0306 	mvn.w	r3, #6
 800ef8a:	e027      	b.n	800efdc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ef8c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d005      	beq.n	800efa2 <netconn_recv_data_tcp+0xc6>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	2101      	movs	r1, #1
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10f      	bne.n	800efca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f000 f9a3 	bl	800f2f6 <netconn_err>
 800efb0:	4603      	mov	r3, r0
 800efb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800efb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d002      	beq.n	800efc4 <netconn_recv_data_tcp+0xe8>
          return err;
 800efbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800efc2:	e00b      	b.n	800efdc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800efc4:	f06f 030d 	mvn.w	r3, #13
 800efc8:	e008      	b.n	800efdc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800efca:	2101      	movs	r1, #1
 800efcc:	68f8      	ldr	r0, [r7, #12]
 800efce:	f000 f955 	bl	800f27c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800efd2:	f06f 030e 	mvn.w	r3, #14
 800efd6:	e001      	b.n	800efdc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800efd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3740      	adds	r7, #64	; 0x40
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b086      	sub	sp, #24
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800efee:	2300      	movs	r3, #0
 800eff0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d109      	bne.n	800f00c <netconn_recv+0x28>
 800eff8:	4b32      	ldr	r3, [pc, #200]	; (800f0c4 <netconn_recv+0xe0>)
 800effa:	f240 3263 	movw	r2, #867	; 0x363
 800effe:	4932      	ldr	r1, [pc, #200]	; (800f0c8 <netconn_recv+0xe4>)
 800f000:	4832      	ldr	r0, [pc, #200]	; (800f0cc <netconn_recv+0xe8>)
 800f002:	f010 fc53 	bl	801f8ac <iprintf>
 800f006:	f06f 030f 	mvn.w	r3, #15
 800f00a:	e056      	b.n	800f0ba <netconn_recv+0xd6>
  *new_buf = NULL;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2200      	movs	r2, #0
 800f010:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d109      	bne.n	800f02c <netconn_recv+0x48>
 800f018:	4b2a      	ldr	r3, [pc, #168]	; (800f0c4 <netconn_recv+0xe0>)
 800f01a:	f240 3265 	movw	r2, #869	; 0x365
 800f01e:	492c      	ldr	r1, [pc, #176]	; (800f0d0 <netconn_recv+0xec>)
 800f020:	482a      	ldr	r0, [pc, #168]	; (800f0cc <netconn_recv+0xe8>)
 800f022:	f010 fc43 	bl	801f8ac <iprintf>
 800f026:	f06f 030f 	mvn.w	r3, #15
 800f02a:	e046      	b.n	800f0ba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f034:	2b10      	cmp	r3, #16
 800f036:	d13a      	bne.n	800f0ae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800f038:	2300      	movs	r3, #0
 800f03a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f03c:	2006      	movs	r0, #6
 800f03e:	f002 fe67 	bl	8011d10 <memp_malloc>
 800f042:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d102      	bne.n	800f050 <netconn_recv+0x6c>
      return ERR_MEM;
 800f04a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f04e:	e034      	b.n	800f0ba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800f050:	f107 030c 	add.w	r3, r7, #12
 800f054:	2200      	movs	r2, #0
 800f056:	4619      	mov	r1, r3
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7ff ff3f 	bl	800eedc <netconn_recv_data_tcp>
 800f05e:	4603      	mov	r3, r0
 800f060:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f062:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d006      	beq.n	800f078 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800f06a:	6979      	ldr	r1, [r7, #20]
 800f06c:	2006      	movs	r0, #6
 800f06e:	f002 fec5 	bl	8011dfc <memp_free>
      return err;
 800f072:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f076:	e020      	b.n	800f0ba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d106      	bne.n	800f08c <netconn_recv+0xa8>
 800f07e:	4b11      	ldr	r3, [pc, #68]	; (800f0c4 <netconn_recv+0xe0>)
 800f080:	f240 3279 	movw	r2, #889	; 0x379
 800f084:	4913      	ldr	r1, [pc, #76]	; (800f0d4 <netconn_recv+0xf0>)
 800f086:	4811      	ldr	r0, [pc, #68]	; (800f0cc <netconn_recv+0xe8>)
 800f088:	f010 fc10 	bl	801f8ac <iprintf>

    buf->p = p;
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	2200      	movs	r2, #0
 800f09c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	e005      	b.n	800f0ba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	6839      	ldr	r1, [r7, #0]
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7ff fe1a 	bl	800ecec <netconn_recv_data>
 800f0b8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	0802150c 	.word	0x0802150c
 800f0c8:	08021724 	.word	0x08021724
 800f0cc:	08021564 	.word	0x08021564
 800f0d0:	08021744 	.word	0x08021744
 800f0d4:	080217bc 	.word	0x080217bc

0800f0d8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b088      	sub	sp, #32
 800f0dc:	af02      	add	r7, sp, #8
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
 800f0e4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800f0ee:	78fa      	ldrb	r2, [r7, #3]
 800f0f0:	f107 0110 	add.w	r1, r7, #16
 800f0f4:	6a3b      	ldr	r3, [r7, #32]
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	68f8      	ldr	r0, [r7, #12]
 800f0fe:	f000 f805 	bl	800f10c <netconn_write_vectors_partly>
 800f102:	4603      	mov	r3, r0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3718      	adds	r7, #24
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b092      	sub	sp, #72	; 0x48
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	4611      	mov	r1, r2
 800f118:	461a      	mov	r2, r3
 800f11a:	460b      	mov	r3, r1
 800f11c:	80fb      	strh	r3, [r7, #6]
 800f11e:	4613      	mov	r3, r2
 800f120:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d109      	bne.n	800f13c <netconn_write_vectors_partly+0x30>
 800f128:	4b4e      	ldr	r3, [pc, #312]	; (800f264 <netconn_write_vectors_partly+0x158>)
 800f12a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f12e:	494e      	ldr	r1, [pc, #312]	; (800f268 <netconn_write_vectors_partly+0x15c>)
 800f130:	484e      	ldr	r0, [pc, #312]	; (800f26c <netconn_write_vectors_partly+0x160>)
 800f132:	f010 fbbb 	bl	801f8ac <iprintf>
 800f136:	f06f 030f 	mvn.w	r3, #15
 800f13a:	e08e      	b.n	800f25a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f144:	2b10      	cmp	r3, #16
 800f146:	d009      	beq.n	800f15c <netconn_write_vectors_partly+0x50>
 800f148:	4b46      	ldr	r3, [pc, #280]	; (800f264 <netconn_write_vectors_partly+0x158>)
 800f14a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f14e:	4948      	ldr	r1, [pc, #288]	; (800f270 <netconn_write_vectors_partly+0x164>)
 800f150:	4846      	ldr	r0, [pc, #280]	; (800f26c <netconn_write_vectors_partly+0x160>)
 800f152:	f010 fbab 	bl	801f8ac <iprintf>
 800f156:	f06f 0305 	mvn.w	r3, #5
 800f15a:	e07e      	b.n	800f25a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	7f1b      	ldrb	r3, [r3, #28]
 800f160:	f003 0302 	and.w	r3, r3, #2
 800f164:	2b00      	cmp	r3, #0
 800f166:	d104      	bne.n	800f172 <netconn_write_vectors_partly+0x66>
 800f168:	797b      	ldrb	r3, [r7, #5]
 800f16a:	f003 0304 	and.w	r3, r3, #4
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d001      	beq.n	800f176 <netconn_write_vectors_partly+0x6a>
 800f172:	2301      	movs	r3, #1
 800f174:	e000      	b.n	800f178 <netconn_write_vectors_partly+0x6c>
 800f176:	2300      	movs	r3, #0
 800f178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800f17c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f180:	2b00      	cmp	r3, #0
 800f182:	d005      	beq.n	800f190 <netconn_write_vectors_partly+0x84>
 800f184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f186:	2b00      	cmp	r3, #0
 800f188:	d102      	bne.n	800f190 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800f18a:	f06f 0305 	mvn.w	r3, #5
 800f18e:	e064      	b.n	800f25a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800f190:	2300      	movs	r3, #0
 800f192:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800f194:	2300      	movs	r3, #0
 800f196:	643b      	str	r3, [r7, #64]	; 0x40
 800f198:	e015      	b.n	800f1c6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800f19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f19c:	00db      	lsls	r3, r3, #3
 800f19e:	68ba      	ldr	r2, [r7, #8]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1a6:	4413      	add	r3, r2
 800f1a8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800f1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d202      	bcs.n	800f1c0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f1ba:	f06f 0305 	mvn.w	r3, #5
 800f1be:	e04c      	b.n	800f25a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	643b      	str	r3, [r7, #64]	; 0x40
 800f1c6:	88fb      	ldrh	r3, [r7, #6]
 800f1c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	dbe5      	blt.n	800f19a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f1ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d101      	bne.n	800f1d8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	e040      	b.n	800f25a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	da0a      	bge.n	800f1f4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f1de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d102      	bne.n	800f1ea <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f1e4:	f06f 0305 	mvn.w	r3, #5
 800f1e8:	e037      	b.n	800f25a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f1ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f1ee:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f1fc:	88fb      	ldrh	r3, [r7, #6]
 800f1fe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f200:	2300      	movs	r3, #0
 800f202:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f204:	797b      	ldrb	r3, [r7, #5]
 800f206:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f20a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f20c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f20e:	2300      	movs	r3, #0
 800f210:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f212:	f107 0314 	add.w	r3, r7, #20
 800f216:	4619      	mov	r1, r3
 800f218:	4816      	ldr	r0, [pc, #88]	; (800f274 <netconn_write_vectors_partly+0x168>)
 800f21a:	f7ff fb9f 	bl	800e95c <netconn_apimsg>
 800f21e:	4603      	mov	r3, r0
 800f220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800f224:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d114      	bne.n	800f256 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f22c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d002      	beq.n	800f238 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f236:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f238:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d10a      	bne.n	800f256 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f244:	429a      	cmp	r2, r3
 800f246:	d006      	beq.n	800f256 <netconn_write_vectors_partly+0x14a>
 800f248:	4b06      	ldr	r3, [pc, #24]	; (800f264 <netconn_write_vectors_partly+0x158>)
 800f24a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f24e:	490a      	ldr	r1, [pc, #40]	; (800f278 <netconn_write_vectors_partly+0x16c>)
 800f250:	4806      	ldr	r0, [pc, #24]	; (800f26c <netconn_write_vectors_partly+0x160>)
 800f252:	f010 fb2b 	bl	801f8ac <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f256:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3748      	adds	r7, #72	; 0x48
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	0802150c 	.word	0x0802150c
 800f268:	080217e4 	.word	0x080217e4
 800f26c:	08021564 	.word	0x08021564
 800f270:	08021800 	.word	0x08021800
 800f274:	080108a9 	.word	0x080108a9
 800f278:	08021824 	.word	0x08021824

0800f27c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08c      	sub	sp, #48	; 0x30
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d109      	bne.n	800f2a2 <netconn_close_shutdown+0x26>
 800f28e:	4b0f      	ldr	r3, [pc, #60]	; (800f2cc <netconn_close_shutdown+0x50>)
 800f290:	f240 4247 	movw	r2, #1095	; 0x447
 800f294:	490e      	ldr	r1, [pc, #56]	; (800f2d0 <netconn_close_shutdown+0x54>)
 800f296:	480f      	ldr	r0, [pc, #60]	; (800f2d4 <netconn_close_shutdown+0x58>)
 800f298:	f010 fb08 	bl	801f8ac <iprintf>
 800f29c:	f06f 030f 	mvn.w	r3, #15
 800f2a0:	e010      	b.n	800f2c4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800f2a6:	78fb      	ldrb	r3, [r7, #3]
 800f2a8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f2aa:	2329      	movs	r3, #41	; 0x29
 800f2ac:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800f2ae:	f107 030c 	add.w	r3, r7, #12
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	4808      	ldr	r0, [pc, #32]	; (800f2d8 <netconn_close_shutdown+0x5c>)
 800f2b6:	f7ff fb51 	bl	800e95c <netconn_apimsg>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f2c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3730      	adds	r7, #48	; 0x30
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	0802150c 	.word	0x0802150c
 800f2d0:	08021848 	.word	0x08021848
 800f2d4:	08021564 	.word	0x08021564
 800f2d8:	080109c1 	.word	0x080109c1

0800f2dc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800f2e4:	2103      	movs	r1, #3
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f7ff ffc8 	bl	800f27c <netconn_close_shutdown>
 800f2ec:	4603      	mov	r3, r0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}

0800f2f6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b084      	sub	sp, #16
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d101      	bne.n	800f308 <netconn_err+0x12>
    return ERR_OK;
 800f304:	2300      	movs	r3, #0
 800f306:	e00d      	b.n	800f324 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f308:	f00f f944 	bl	801e594 <sys_arch_protect>
 800f30c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	7a1b      	ldrb	r3, [r3, #8]
 800f312:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f00f f948 	bl	801e5b0 <sys_arch_unprotect>
  return err;
 800f320:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f324:	4618      	mov	r0, r3
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	4603      	mov	r3, r0
 800f334:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f33a:	f113 0f0d 	cmn.w	r3, #13
 800f33e:	d009      	beq.n	800f354 <lwip_netconn_err_to_msg+0x28>
 800f340:	f113 0f0d 	cmn.w	r3, #13
 800f344:	dc0c      	bgt.n	800f360 <lwip_netconn_err_to_msg+0x34>
 800f346:	f113 0f0f 	cmn.w	r3, #15
 800f34a:	d007      	beq.n	800f35c <lwip_netconn_err_to_msg+0x30>
 800f34c:	f113 0f0e 	cmn.w	r3, #14
 800f350:	d002      	beq.n	800f358 <lwip_netconn_err_to_msg+0x2c>
 800f352:	e005      	b.n	800f360 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f354:	4b0a      	ldr	r3, [pc, #40]	; (800f380 <lwip_netconn_err_to_msg+0x54>)
 800f356:	e00e      	b.n	800f376 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f358:	4b0a      	ldr	r3, [pc, #40]	; (800f384 <lwip_netconn_err_to_msg+0x58>)
 800f35a:	e00c      	b.n	800f376 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f35c:	4b0a      	ldr	r3, [pc, #40]	; (800f388 <lwip_netconn_err_to_msg+0x5c>)
 800f35e:	e00a      	b.n	800f376 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d005      	beq.n	800f374 <lwip_netconn_err_to_msg+0x48>
 800f368:	4b08      	ldr	r3, [pc, #32]	; (800f38c <lwip_netconn_err_to_msg+0x60>)
 800f36a:	227d      	movs	r2, #125	; 0x7d
 800f36c:	4908      	ldr	r1, [pc, #32]	; (800f390 <lwip_netconn_err_to_msg+0x64>)
 800f36e:	4809      	ldr	r0, [pc, #36]	; (800f394 <lwip_netconn_err_to_msg+0x68>)
 800f370:	f010 fa9c 	bl	801f8ac <iprintf>
      return NULL;
 800f374:	2300      	movs	r3, #0
  }
}
 800f376:	4618      	mov	r0, r3
 800f378:	3708      	adds	r7, #8
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	080250c4 	.word	0x080250c4
 800f384:	080250c5 	.word	0x080250c5
 800f388:	080250c6 	.word	0x080250c6
 800f38c:	08021864 	.word	0x08021864
 800f390:	08021898 	.word	0x08021898
 800f394:	080218a8 	.word	0x080218a8

0800f398 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d105      	bne.n	800f3b4 <lwip_netconn_is_err_msg+0x1c>
 800f3a8:	4b12      	ldr	r3, [pc, #72]	; (800f3f4 <lwip_netconn_is_err_msg+0x5c>)
 800f3aa:	2285      	movs	r2, #133	; 0x85
 800f3ac:	4912      	ldr	r1, [pc, #72]	; (800f3f8 <lwip_netconn_is_err_msg+0x60>)
 800f3ae:	4813      	ldr	r0, [pc, #76]	; (800f3fc <lwip_netconn_is_err_msg+0x64>)
 800f3b0:	f010 fa7c 	bl	801f8ac <iprintf>

  if (msg == &netconn_aborted) {
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4a12      	ldr	r2, [pc, #72]	; (800f400 <lwip_netconn_is_err_msg+0x68>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d104      	bne.n	800f3c6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	22f3      	movs	r2, #243	; 0xf3
 800f3c0:	701a      	strb	r2, [r3, #0]
    return 1;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e012      	b.n	800f3ec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a0e      	ldr	r2, [pc, #56]	; (800f404 <lwip_netconn_is_err_msg+0x6c>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d104      	bne.n	800f3d8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	22f2      	movs	r2, #242	; 0xf2
 800f3d2:	701a      	strb	r2, [r3, #0]
    return 1;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	e009      	b.n	800f3ec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a0b      	ldr	r2, [pc, #44]	; (800f408 <lwip_netconn_is_err_msg+0x70>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d104      	bne.n	800f3ea <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	22f1      	movs	r2, #241	; 0xf1
 800f3e4:	701a      	strb	r2, [r3, #0]
    return 1;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e000      	b.n	800f3ec <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f3ea:	2300      	movs	r3, #0
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	08021864 	.word	0x08021864
 800f3f8:	080218d0 	.word	0x080218d0
 800f3fc:	080218a8 	.word	0x080218a8
 800f400:	080250c4 	.word	0x080250c4
 800f404:	080250c5 	.word	0x080250c5
 800f408:	080250c6 	.word	0x080250c6

0800f40c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b088      	sub	sp, #32
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
 800f418:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d105      	bne.n	800f42c <recv_udp+0x20>
 800f420:	4b34      	ldr	r3, [pc, #208]	; (800f4f4 <recv_udp+0xe8>)
 800f422:	22e5      	movs	r2, #229	; 0xe5
 800f424:	4934      	ldr	r1, [pc, #208]	; (800f4f8 <recv_udp+0xec>)
 800f426:	4835      	ldr	r0, [pc, #212]	; (800f4fc <recv_udp+0xf0>)
 800f428:	f010 fa40 	bl	801f8ac <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d105      	bne.n	800f43e <recv_udp+0x32>
 800f432:	4b30      	ldr	r3, [pc, #192]	; (800f4f4 <recv_udp+0xe8>)
 800f434:	22e6      	movs	r2, #230	; 0xe6
 800f436:	4932      	ldr	r1, [pc, #200]	; (800f500 <recv_udp+0xf4>)
 800f438:	4830      	ldr	r0, [pc, #192]	; (800f4fc <recv_udp+0xf0>)
 800f43a:	f010 fa37 	bl	801f8ac <iprintf>
  conn = (struct netconn *)arg;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d103      	bne.n	800f450 <recv_udp+0x44>
    pbuf_free(p);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f003 fbbf 	bl	8012bcc <pbuf_free>
    return;
 800f44e:	e04d      	b.n	800f4ec <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	68ba      	ldr	r2, [r7, #8]
 800f456:	429a      	cmp	r2, r3
 800f458:	d005      	beq.n	800f466 <recv_udp+0x5a>
 800f45a:	4b26      	ldr	r3, [pc, #152]	; (800f4f4 <recv_udp+0xe8>)
 800f45c:	22ee      	movs	r2, #238	; 0xee
 800f45e:	4929      	ldr	r1, [pc, #164]	; (800f504 <recv_udp+0xf8>)
 800f460:	4826      	ldr	r0, [pc, #152]	; (800f4fc <recv_udp+0xf0>)
 800f462:	f010 fa23 	bl	801f8ac <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	3310      	adds	r3, #16
 800f46a:	4618      	mov	r0, r3
 800f46c:	f00e ff77 	bl	801e35e <sys_mbox_valid>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d103      	bne.n	800f47e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f003 fba8 	bl	8012bcc <pbuf_free>
    return;
 800f47c:	e036      	b.n	800f4ec <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f47e:	2006      	movs	r0, #6
 800f480:	f002 fc46 	bl	8011d10 <memp_malloc>
 800f484:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d103      	bne.n	800f494 <recv_udp+0x88>
    pbuf_free(p);
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f003 fb9d 	bl	8012bcc <pbuf_free>
    return;
 800f492:	e02b      	b.n	800f4ec <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f494:	69bb      	ldr	r3, [r7, #24]
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d002      	beq.n	800f4ac <recv_udp+0xa0>
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	e000      	b.n	800f4ae <recv_udp+0xa2>
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	69ba      	ldr	r2, [r7, #24]
 800f4b0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f4b6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	891b      	ldrh	r3, [r3, #8]
 800f4bc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	3310      	adds	r3, #16
 800f4c2:	69b9      	ldr	r1, [r7, #24]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f00e fed5 	bl	801e274 <sys_mbox_trypost>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d003      	beq.n	800f4d8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f4d0:	69b8      	ldr	r0, [r7, #24]
 800f4d2:	f001 fb01 	bl	8010ad8 <netbuf_delete>
    return;
 800f4d6:	e009      	b.n	800f4ec <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d005      	beq.n	800f4ec <recv_udp+0xe0>
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e4:	8afa      	ldrh	r2, [r7, #22]
 800f4e6:	2100      	movs	r1, #0
 800f4e8:	69f8      	ldr	r0, [r7, #28]
 800f4ea:	4798      	blx	r3
  }
}
 800f4ec:	3720      	adds	r7, #32
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bd80      	pop	{r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	08021864 	.word	0x08021864
 800f4f8:	080218dc 	.word	0x080218dc
 800f4fc:	080218a8 	.word	0x080218a8
 800f500:	08021900 	.word	0x08021900
 800f504:	08021920 	.word	0x08021920

0800f508 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b088      	sub	sp, #32
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d106      	bne.n	800f52a <recv_tcp+0x22>
 800f51c:	4b36      	ldr	r3, [pc, #216]	; (800f5f8 <recv_tcp+0xf0>)
 800f51e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f522:	4936      	ldr	r1, [pc, #216]	; (800f5fc <recv_tcp+0xf4>)
 800f524:	4836      	ldr	r0, [pc, #216]	; (800f600 <recv_tcp+0xf8>)
 800f526:	f010 f9c1 	bl	801f8ac <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d106      	bne.n	800f53e <recv_tcp+0x36>
 800f530:	4b31      	ldr	r3, [pc, #196]	; (800f5f8 <recv_tcp+0xf0>)
 800f532:	f240 122d 	movw	r2, #301	; 0x12d
 800f536:	4933      	ldr	r1, [pc, #204]	; (800f604 <recv_tcp+0xfc>)
 800f538:	4831      	ldr	r0, [pc, #196]	; (800f600 <recv_tcp+0xf8>)
 800f53a:	f010 f9b7 	bl	801f8ac <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f53e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d006      	beq.n	800f554 <recv_tcp+0x4c>
 800f546:	4b2c      	ldr	r3, [pc, #176]	; (800f5f8 <recv_tcp+0xf0>)
 800f548:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f54c:	492e      	ldr	r1, [pc, #184]	; (800f608 <recv_tcp+0x100>)
 800f54e:	482c      	ldr	r0, [pc, #176]	; (800f600 <recv_tcp+0xf8>)
 800f550:	f010 f9ac 	bl	801f8ac <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d102      	bne.n	800f564 <recv_tcp+0x5c>
    return ERR_VAL;
 800f55e:	f06f 0305 	mvn.w	r3, #5
 800f562:	e045      	b.n	800f5f0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	68ba      	ldr	r2, [r7, #8]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d006      	beq.n	800f57c <recv_tcp+0x74>
 800f56e:	4b22      	ldr	r3, [pc, #136]	; (800f5f8 <recv_tcp+0xf0>)
 800f570:	f240 1235 	movw	r2, #309	; 0x135
 800f574:	4925      	ldr	r1, [pc, #148]	; (800f60c <recv_tcp+0x104>)
 800f576:	4822      	ldr	r0, [pc, #136]	; (800f600 <recv_tcp+0xf8>)
 800f578:	f010 f998 	bl	801f8ac <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	3310      	adds	r3, #16
 800f580:	4618      	mov	r0, r3
 800f582:	f00e feec 	bl	801e35e <sys_mbox_valid>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d10d      	bne.n	800f5a8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d008      	beq.n	800f5a4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	891b      	ldrh	r3, [r3, #8]
 800f596:	4619      	mov	r1, r3
 800f598:	68b8      	ldr	r0, [r7, #8]
 800f59a:	f004 faf9 	bl	8013b90 <tcp_recved>
      pbuf_free(p);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f003 fb14 	bl	8012bcc <pbuf_free>
    }
    return ERR_OK;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	e023      	b.n	800f5f0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d005      	beq.n	800f5ba <recv_tcp+0xb2>
    msg = p;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	891b      	ldrh	r3, [r3, #8]
 800f5b6:	83fb      	strh	r3, [r7, #30]
 800f5b8:	e003      	b.n	800f5c2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f5ba:	4b15      	ldr	r3, [pc, #84]	; (800f610 <recv_tcp+0x108>)
 800f5bc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	3310      	adds	r3, #16
 800f5c6:	69b9      	ldr	r1, [r7, #24]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f00e fe53 	bl	801e274 <sys_mbox_trypost>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f5d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5d8:	e00a      	b.n	800f5f0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d005      	beq.n	800f5ee <recv_tcp+0xe6>
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e6:	8bfa      	ldrh	r2, [r7, #30]
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	6978      	ldr	r0, [r7, #20]
 800f5ec:	4798      	blx	r3
  }

  return ERR_OK;
 800f5ee:	2300      	movs	r3, #0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3720      	adds	r7, #32
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	08021864 	.word	0x08021864
 800f5fc:	08021940 	.word	0x08021940
 800f600:	080218a8 	.word	0x080218a8
 800f604:	08021964 	.word	0x08021964
 800f608:	08021984 	.word	0x08021984
 800f60c:	0802199c 	.word	0x0802199c
 800f610:	080250c6 	.word	0x080250c6

0800f614 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d106      	bne.n	800f636 <poll_tcp+0x22>
 800f628:	4b29      	ldr	r3, [pc, #164]	; (800f6d0 <poll_tcp+0xbc>)
 800f62a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f62e:	4929      	ldr	r1, [pc, #164]	; (800f6d4 <poll_tcp+0xc0>)
 800f630:	4829      	ldr	r0, [pc, #164]	; (800f6d8 <poll_tcp+0xc4>)
 800f632:	f010 f93b 	bl	801f8ac <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	785b      	ldrb	r3, [r3, #1]
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d104      	bne.n	800f648 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f63e:	2101      	movs	r1, #1
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f000 ff65 	bl	8010510 <lwip_netconn_do_writemore>
 800f646:	e016      	b.n	800f676 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	785b      	ldrb	r3, [r3, #1]
 800f64c:	2b04      	cmp	r3, #4
 800f64e:	d112      	bne.n	800f676 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	6a1b      	ldr	r3, [r3, #32]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d00a      	beq.n	800f66e <poll_tcp+0x5a>
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6a1b      	ldr	r3, [r3, #32]
 800f65c:	7a5b      	ldrb	r3, [r3, #9]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d005      	beq.n	800f66e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6a1b      	ldr	r3, [r3, #32]
 800f666:	7a5a      	ldrb	r2, [r3, #9]
 800f668:	3a01      	subs	r2, #1
 800f66a:	b2d2      	uxtb	r2, r2
 800f66c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f66e:	2101      	movs	r1, #1
 800f670:	68f8      	ldr	r0, [r7, #12]
 800f672:	f000 fbf7 	bl	800fe64 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	7f1b      	ldrb	r3, [r3, #28]
 800f67a:	f003 0310 	and.w	r3, r3, #16
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d021      	beq.n	800f6c6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d01d      	beq.n	800f6c6 <poll_tcp+0xb2>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f692:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f696:	d316      	bcc.n	800f6c6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	685b      	ldr	r3, [r3, #4]
 800f69c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f6a0:	2b04      	cmp	r3, #4
 800f6a2:	d810      	bhi.n	800f6c6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	7f1b      	ldrb	r3, [r3, #28]
 800f6a8:	f023 0310 	bic.w	r3, r3, #16
 800f6ac:	b2da      	uxtb	r2, r3
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d005      	beq.n	800f6c6 <poll_tcp+0xb2>
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6be:	2200      	movs	r2, #0
 800f6c0:	2102      	movs	r1, #2
 800f6c2:	68f8      	ldr	r0, [r7, #12]
 800f6c4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f6c6:	2300      	movs	r3, #0
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3710      	adds	r7, #16
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	08021864 	.word	0x08021864
 800f6d4:	080219bc 	.word	0x080219bc
 800f6d8:	080218a8 	.word	0x080218a8

0800f6dc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b086      	sub	sp, #24
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d106      	bne.n	800f702 <sent_tcp+0x26>
 800f6f4:	4b20      	ldr	r3, [pc, #128]	; (800f778 <sent_tcp+0x9c>)
 800f6f6:	f240 1293 	movw	r2, #403	; 0x193
 800f6fa:	4920      	ldr	r1, [pc, #128]	; (800f77c <sent_tcp+0xa0>)
 800f6fc:	4820      	ldr	r0, [pc, #128]	; (800f780 <sent_tcp+0xa4>)
 800f6fe:	f010 f8d5 	bl	801f8ac <iprintf>

  if (conn) {
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d032      	beq.n	800f76e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	785b      	ldrb	r3, [r3, #1]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d104      	bne.n	800f71a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f710:	2101      	movs	r1, #1
 800f712:	6978      	ldr	r0, [r7, #20]
 800f714:	f000 fefc 	bl	8010510 <lwip_netconn_do_writemore>
 800f718:	e007      	b.n	800f72a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	785b      	ldrb	r3, [r3, #1]
 800f71e:	2b04      	cmp	r3, #4
 800f720:	d103      	bne.n	800f72a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f722:	2101      	movs	r1, #1
 800f724:	6978      	ldr	r0, [r7, #20]
 800f726:	f000 fb9d 	bl	800fe64 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d01d      	beq.n	800f76e <sent_tcp+0x92>
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f73a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f73e:	d316      	bcc.n	800f76e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f748:	2b04      	cmp	r3, #4
 800f74a:	d810      	bhi.n	800f76e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	7f1b      	ldrb	r3, [r3, #28]
 800f750:	f023 0310 	bic.w	r3, r3, #16
 800f754:	b2da      	uxtb	r2, r3
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d005      	beq.n	800f76e <sent_tcp+0x92>
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f766:	88fa      	ldrh	r2, [r7, #6]
 800f768:	2102      	movs	r1, #2
 800f76a:	6978      	ldr	r0, [r7, #20]
 800f76c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3718      	adds	r7, #24
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	08021864 	.word	0x08021864
 800f77c:	080219bc 	.word	0x080219bc
 800f780:	080218a8 	.word	0x080218a8

0800f784 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b088      	sub	sp, #32
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	460b      	mov	r3, r1
 800f78e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d106      	bne.n	800f7a8 <err_tcp+0x24>
 800f79a:	4b5f      	ldr	r3, [pc, #380]	; (800f918 <err_tcp+0x194>)
 800f79c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f7a0:	495e      	ldr	r1, [pc, #376]	; (800f91c <err_tcp+0x198>)
 800f7a2:	485f      	ldr	r0, [pc, #380]	; (800f920 <err_tcp+0x19c>)
 800f7a4:	f010 f882 	bl	801f8ac <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f7a8:	f00e fef4 	bl	801e594 <sys_arch_protect>
 800f7ac:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	78fa      	ldrb	r2, [r7, #3]
 800f7b8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	7f1b      	ldrb	r3, [r3, #28]
 800f7be:	f043 0301 	orr.w	r3, r3, #1
 800f7c2:	b2da      	uxtb	r2, r3
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	785b      	ldrb	r3, [r3, #1]
 800f7cc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f7d4:	69b8      	ldr	r0, [r7, #24]
 800f7d6:	f00e feeb 	bl	801e5b0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f7da:	69fb      	ldr	r3, [r7, #28]
 800f7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d005      	beq.n	800f7ee <err_tcp+0x6a>
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	2104      	movs	r1, #4
 800f7ea:	69f8      	ldr	r0, [r7, #28]
 800f7ec:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d005      	beq.n	800f802 <err_tcp+0x7e>
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	69f8      	ldr	r0, [r7, #28]
 800f800:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f802:	69fb      	ldr	r3, [r7, #28]
 800f804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f806:	2b00      	cmp	r3, #0
 800f808:	d005      	beq.n	800f816 <err_tcp+0x92>
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f80e:	2200      	movs	r2, #0
 800f810:	2102      	movs	r1, #2
 800f812:	69f8      	ldr	r0, [r7, #28]
 800f814:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7ff fd86 	bl	800f32c <lwip_netconn_err_to_msg>
 800f820:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	3310      	adds	r3, #16
 800f826:	4618      	mov	r0, r3
 800f828:	f00e fd99 	bl	801e35e <sys_mbox_valid>
 800f82c:	4603      	mov	r3, r0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d005      	beq.n	800f83e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	3310      	adds	r3, #16
 800f836:	6939      	ldr	r1, [r7, #16]
 800f838:	4618      	mov	r0, r3
 800f83a:	f00e fd1b 	bl	801e274 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	3314      	adds	r3, #20
 800f842:	4618      	mov	r0, r3
 800f844:	f00e fd8b 	bl	801e35e <sys_mbox_valid>
 800f848:	4603      	mov	r3, r0
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d005      	beq.n	800f85a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	3314      	adds	r3, #20
 800f852:	6939      	ldr	r1, [r7, #16]
 800f854:	4618      	mov	r0, r3
 800f856:	f00e fd0d 	bl	801e274 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f85a:	7dfb      	ldrb	r3, [r7, #23]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d005      	beq.n	800f86c <err_tcp+0xe8>
 800f860:	7dfb      	ldrb	r3, [r7, #23]
 800f862:	2b04      	cmp	r3, #4
 800f864:	d002      	beq.n	800f86c <err_tcp+0xe8>
 800f866:	7dfb      	ldrb	r3, [r7, #23]
 800f868:	2b03      	cmp	r3, #3
 800f86a:	d143      	bne.n	800f8f4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	7f1b      	ldrb	r3, [r3, #28]
 800f870:	f003 0304 	and.w	r3, r3, #4
 800f874:	2b00      	cmp	r3, #0
 800f876:	bf14      	ite	ne
 800f878:	2301      	movne	r3, #1
 800f87a:	2300      	moveq	r3, #0
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	7f1b      	ldrb	r3, [r3, #28]
 800f884:	f023 0304 	bic.w	r3, r3, #4
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d13b      	bne.n	800f90c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	6a1b      	ldr	r3, [r3, #32]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d106      	bne.n	800f8aa <err_tcp+0x126>
 800f89c:	4b1e      	ldr	r3, [pc, #120]	; (800f918 <err_tcp+0x194>)
 800f89e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f8a2:	4920      	ldr	r1, [pc, #128]	; (800f924 <err_tcp+0x1a0>)
 800f8a4:	481e      	ldr	r0, [pc, #120]	; (800f920 <err_tcp+0x19c>)
 800f8a6:	f010 f801 	bl	801f8ac <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f8aa:	7dfb      	ldrb	r3, [r7, #23]
 800f8ac:	2b04      	cmp	r3, #4
 800f8ae:	d104      	bne.n	800f8ba <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	6a1b      	ldr	r3, [r3, #32]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	711a      	strb	r2, [r3, #4]
 800f8b8:	e003      	b.n	800f8c2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	6a1b      	ldr	r3, [r3, #32]
 800f8be:	78fa      	ldrb	r2, [r7, #3]
 800f8c0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	6a1b      	ldr	r3, [r3, #32]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	330c      	adds	r3, #12
 800f8ca:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f8cc:	68b8      	ldr	r0, [r7, #8]
 800f8ce:	f00e fdd7 	bl	801e480 <sys_sem_valid>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d106      	bne.n	800f8e6 <err_tcp+0x162>
 800f8d8:	4b0f      	ldr	r3, [pc, #60]	; (800f918 <err_tcp+0x194>)
 800f8da:	f240 12ef 	movw	r2, #495	; 0x1ef
 800f8de:	4912      	ldr	r1, [pc, #72]	; (800f928 <err_tcp+0x1a4>)
 800f8e0:	480f      	ldr	r0, [pc, #60]	; (800f920 <err_tcp+0x19c>)
 800f8e2:	f00f ffe3 	bl	801f8ac <iprintf>
      conn->current_msg = NULL;
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f8ec:	68b8      	ldr	r0, [r7, #8]
 800f8ee:	f00e fdad 	bl	801e44c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f8f2:	e00b      	b.n	800f90c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f8f4:	69fb      	ldr	r3, [r7, #28]
 800f8f6:	6a1b      	ldr	r3, [r3, #32]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d008      	beq.n	800f90e <err_tcp+0x18a>
 800f8fc:	4b06      	ldr	r3, [pc, #24]	; (800f918 <err_tcp+0x194>)
 800f8fe:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f902:	490a      	ldr	r1, [pc, #40]	; (800f92c <err_tcp+0x1a8>)
 800f904:	4806      	ldr	r0, [pc, #24]	; (800f920 <err_tcp+0x19c>)
 800f906:	f00f ffd1 	bl	801f8ac <iprintf>
  }
}
 800f90a:	e000      	b.n	800f90e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f90c:	bf00      	nop
}
 800f90e:	bf00      	nop
 800f910:	3720      	adds	r7, #32
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	08021864 	.word	0x08021864
 800f91c:	080219bc 	.word	0x080219bc
 800f920:	080218a8 	.word	0x080218a8
 800f924:	080219cc 	.word	0x080219cc
 800f928:	080219e8 	.word	0x080219e8
 800f92c:	08021a04 	.word	0x08021a04

0800f930 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f93e:	6879      	ldr	r1, [r7, #4]
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f004 ffeb 	bl	801491c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f946:	490a      	ldr	r1, [pc, #40]	; (800f970 <setup_tcp+0x40>)
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f004 fff9 	bl	8014940 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f94e:	4909      	ldr	r1, [pc, #36]	; (800f974 <setup_tcp+0x44>)
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f005 f817 	bl	8014984 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f956:	2202      	movs	r2, #2
 800f958:	4907      	ldr	r1, [pc, #28]	; (800f978 <setup_tcp+0x48>)
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f005 f86e 	bl	8014a3c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f960:	4906      	ldr	r1, [pc, #24]	; (800f97c <setup_tcp+0x4c>)
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f005 f830 	bl	80149c8 <tcp_err>
}
 800f968:	bf00      	nop
 800f96a:	3710      	adds	r7, #16
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	0800f509 	.word	0x0800f509
 800f974:	0800f6dd 	.word	0x0800f6dd
 800f978:	0800f615 	.word	0x0800f615
 800f97c:	0800f785 	.word	0x0800f785

0800f980 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f980:	b590      	push	{r4, r7, lr}
 800f982:	b089      	sub	sp, #36	; 0x24
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	4613      	mov	r3, r2
 800f98c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d102      	bne.n	800f99e <accept_function+0x1e>
    return ERR_VAL;
 800f998:	f06f 0305 	mvn.w	r3, #5
 800f99c:	e0a1      	b.n	800fae2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	3314      	adds	r3, #20
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f00e fcdb 	bl	801e35e <sys_mbox_valid>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d102      	bne.n	800f9b4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f9ae:	f06f 0305 	mvn.w	r3, #5
 800f9b2:	e096      	b.n	800fae2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d11b      	bne.n	800f9f2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	f103 0414 	add.w	r4, r3, #20
 800f9c0:	f06f 000c 	mvn.w	r0, #12
 800f9c4:	f7ff fcb2 	bl	800f32c <lwip_netconn_err_to_msg>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	f00e fc51 	bl	801e274 <sys_mbox_trypost>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d109      	bne.n	800f9ec <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d005      	beq.n	800f9ec <accept_function+0x6c>
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	69f8      	ldr	r0, [r7, #28]
 800f9ea:	4798      	blx	r3
    }
    return ERR_VAL;
 800f9ec:	f06f 0305 	mvn.w	r3, #5
 800f9f0:	e077      	b.n	800fae2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f9f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d006      	beq.n	800fa08 <accept_function+0x88>
 800f9fa:	4b3c      	ldr	r3, [pc, #240]	; (800faec <accept_function+0x16c>)
 800f9fc:	f240 222a 	movw	r2, #554	; 0x22a
 800fa00:	493b      	ldr	r1, [pc, #236]	; (800faf0 <accept_function+0x170>)
 800fa02:	483c      	ldr	r0, [pc, #240]	; (800faf4 <accept_function+0x174>)
 800fa04:	f00f ff52 	bl	801f8ac <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	781a      	ldrb	r2, [r3, #0]
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa10:	4619      	mov	r1, r3
 800fa12:	4610      	mov	r0, r2
 800fa14:	f000 f8f0 	bl	800fbf8 <netconn_alloc>
 800fa18:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d11b      	bne.n	800fa58 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	f103 0414 	add.w	r4, r3, #20
 800fa26:	f06f 000c 	mvn.w	r0, #12
 800fa2a:	f7ff fc7f 	bl	800f32c <lwip_netconn_err_to_msg>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	4619      	mov	r1, r3
 800fa32:	4620      	mov	r0, r4
 800fa34:	f00e fc1e 	bl	801e274 <sys_mbox_trypost>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d109      	bne.n	800fa52 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d005      	beq.n	800fa52 <accept_function+0xd2>
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	69f8      	ldr	r0, [r7, #28]
 800fa50:	4798      	blx	r3
    }
    return ERR_MEM;
 800fa52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa56:	e044      	b.n	800fae2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	68ba      	ldr	r2, [r7, #8]
 800fa5c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800fa5e:	69b8      	ldr	r0, [r7, #24]
 800fa60:	f7ff ff66 	bl	800f930 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	3314      	adds	r3, #20
 800fa68:	69b9      	ldr	r1, [r7, #24]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f00e fc02 	bl	801e274 <sys_mbox_trypost>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d02a      	beq.n	800facc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	6978      	ldr	r0, [r7, #20]
 800fa80:	f004 ff4c 	bl	801491c <tcp_arg>
    tcp_recv(pcb, NULL);
 800fa84:	2100      	movs	r1, #0
 800fa86:	6978      	ldr	r0, [r7, #20]
 800fa88:	f004 ff5a 	bl	8014940 <tcp_recv>
    tcp_sent(pcb, NULL);
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	6978      	ldr	r0, [r7, #20]
 800fa90:	f004 ff78 	bl	8014984 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800fa94:	2200      	movs	r2, #0
 800fa96:	2100      	movs	r1, #0
 800fa98:	6978      	ldr	r0, [r7, #20]
 800fa9a:	f004 ffcf 	bl	8014a3c <tcp_poll>
    tcp_err(pcb, NULL);
 800fa9e:	2100      	movs	r1, #0
 800faa0:	6978      	ldr	r0, [r7, #20]
 800faa2:	f004 ff91 	bl	80149c8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800faa6:	69bb      	ldr	r3, [r7, #24]
 800faa8:	2200      	movs	r2, #0
 800faaa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	3310      	adds	r3, #16
 800fab0:	4618      	mov	r0, r3
 800fab2:	f00e fbcd 	bl	801e250 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	3310      	adds	r3, #16
 800faba:	4618      	mov	r0, r3
 800fabc:	f00e fc60 	bl	801e380 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800fac0:	69b8      	ldr	r0, [r7, #24]
 800fac2:	f000 f907 	bl	800fcd4 <netconn_free>
    return ERR_MEM;
 800fac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800faca:	e00a      	b.n	800fae2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d005      	beq.n	800fae0 <accept_function+0x160>
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad8:	2200      	movs	r2, #0
 800fada:	2100      	movs	r1, #0
 800fadc:	69f8      	ldr	r0, [r7, #28]
 800fade:	4798      	blx	r3
  }

  return ERR_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3724      	adds	r7, #36	; 0x24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd90      	pop	{r4, r7, pc}
 800faea:	bf00      	nop
 800faec:	08021864 	.word	0x08021864
 800faf0:	08021a20 	.word	0x08021a20
 800faf4:	080218a8 	.word	0x080218a8

0800faf8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800faf8:	b590      	push	{r4, r7, lr}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800fb00:	2300      	movs	r3, #0
 800fb02:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d006      	beq.n	800fb1c <pcb_new+0x24>
 800fb0e:	4b2b      	ldr	r3, [pc, #172]	; (800fbbc <pcb_new+0xc4>)
 800fb10:	f240 2265 	movw	r2, #613	; 0x265
 800fb14:	492a      	ldr	r1, [pc, #168]	; (800fbc0 <pcb_new+0xc8>)
 800fb16:	482b      	ldr	r0, [pc, #172]	; (800fbc4 <pcb_new+0xcc>)
 800fb18:	f00f fec8 	bl	801f8ac <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb26:	2b10      	cmp	r3, #16
 800fb28:	d022      	beq.n	800fb70 <pcb_new+0x78>
 800fb2a:	2b20      	cmp	r3, #32
 800fb2c:	d133      	bne.n	800fb96 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681c      	ldr	r4, [r3, #0]
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
 800fb34:	4618      	mov	r0, r3
 800fb36:	f00a f9b2 	bl	8019e9e <udp_new_ip_type>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d02a      	beq.n	800fb9e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	2b22      	cmp	r3, #34	; 0x22
 800fb50:	d104      	bne.n	800fb5c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	2201      	movs	r2, #1
 800fb5a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	6858      	ldr	r0, [r3, #4]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	461a      	mov	r2, r3
 800fb68:	4917      	ldr	r1, [pc, #92]	; (800fbc8 <pcb_new+0xd0>)
 800fb6a:	f00a f91f 	bl	8019dac <udp_recv>
      }
      break;
 800fb6e:	e016      	b.n	800fb9e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681c      	ldr	r4, [r3, #0]
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f004 fec2 	bl	8014900 <tcp_new_ip_type>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00b      	beq.n	800fba2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7ff fece 	bl	800f930 <setup_tcp>
      }
      break;
 800fb94:	e005      	b.n	800fba2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	22fa      	movs	r2, #250	; 0xfa
 800fb9a:	711a      	strb	r2, [r3, #4]
      return;
 800fb9c:	e00a      	b.n	800fbb4 <pcb_new+0xbc>
      break;
 800fb9e:	bf00      	nop
 800fba0:	e000      	b.n	800fba4 <pcb_new+0xac>
      break;
 800fba2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d102      	bne.n	800fbb4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	22ff      	movs	r2, #255	; 0xff
 800fbb2:	711a      	strb	r2, [r3, #4]
  }
}
 800fbb4:	3714      	adds	r7, #20
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd90      	pop	{r4, r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	08021864 	.word	0x08021864
 800fbc0:	08021a48 	.word	0x08021a48
 800fbc4:	080218a8 	.word	0x080218a8
 800fbc8:	0800f40d 	.word	0x0800f40d

0800fbcc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d102      	bne.n	800fbee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800fbe8:	68f8      	ldr	r0, [r7, #12]
 800fbea:	f7ff ff85 	bl	800faf8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800fbee:	bf00      	nop
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
	...

0800fbf8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	4603      	mov	r3, r0
 800fc00:	6039      	str	r1, [r7, #0]
 800fc02:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800fc08:	2007      	movs	r0, #7
 800fc0a:	f002 f881 	bl	8011d10 <memp_malloc>
 800fc0e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d101      	bne.n	800fc1a <netconn_alloc+0x22>
    return NULL;
 800fc16:	2300      	movs	r3, #0
 800fc18:	e052      	b.n	800fcc0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	79fa      	ldrb	r2, [r7, #7]
 800fc24:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc32:	2b10      	cmp	r3, #16
 800fc34:	d004      	beq.n	800fc40 <netconn_alloc+0x48>
 800fc36:	2b20      	cmp	r3, #32
 800fc38:	d105      	bne.n	800fc46 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800fc3a:	2306      	movs	r3, #6
 800fc3c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800fc3e:	e00a      	b.n	800fc56 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800fc40:	2306      	movs	r3, #6
 800fc42:	617b      	str	r3, [r7, #20]
      break;
 800fc44:	e007      	b.n	800fc56 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800fc46:	4b20      	ldr	r3, [pc, #128]	; (800fcc8 <netconn_alloc+0xd0>)
 800fc48:	f240 22e5 	movw	r2, #741	; 0x2e5
 800fc4c:	491f      	ldr	r1, [pc, #124]	; (800fccc <netconn_alloc+0xd4>)
 800fc4e:	4820      	ldr	r0, [pc, #128]	; (800fcd0 <netconn_alloc+0xd8>)
 800fc50:	f00f fe2c 	bl	801f8ac <iprintf>
      goto free_and_return;
 800fc54:	e02f      	b.n	800fcb6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	3310      	adds	r3, #16
 800fc5a:	6979      	ldr	r1, [r7, #20]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f00e fad5 	bl	801e20c <sys_mbox_new>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d125      	bne.n	800fcb4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	330c      	adds	r3, #12
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f00e fb93 	bl	801e39a <sys_sem_new>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d005      	beq.n	800fc86 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	3310      	adds	r3, #16
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f00e fae6 	bl	801e250 <sys_mbox_free>
    goto free_and_return;
 800fc84:	e017      	b.n	800fcb6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	3314      	adds	r3, #20
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f00e fb78 	bl	801e380 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2200      	movs	r2, #0
 800fc94:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc9c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	683a      	ldr	r2, [r7, #0]
 800fca2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2200      	movs	r2, #0
 800fca8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	7cfa      	ldrb	r2, [r7, #19]
 800fcae:	771a      	strb	r2, [r3, #28]
  return conn;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	e005      	b.n	800fcc0 <netconn_alloc+0xc8>
    goto free_and_return;
 800fcb4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800fcb6:	68f9      	ldr	r1, [r7, #12]
 800fcb8:	2007      	movs	r0, #7
 800fcba:	f002 f89f 	bl	8011dfc <memp_free>
  return NULL;
 800fcbe:	2300      	movs	r3, #0
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3718      	adds	r7, #24
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	08021864 	.word	0x08021864
 800fccc:	08021a68 	.word	0x08021a68
 800fcd0:	080218a8 	.word	0x080218a8

0800fcd4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d006      	beq.n	800fcf2 <netconn_free+0x1e>
 800fce4:	4b1b      	ldr	r3, [pc, #108]	; (800fd54 <netconn_free+0x80>)
 800fce6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fcea:	491b      	ldr	r1, [pc, #108]	; (800fd58 <netconn_free+0x84>)
 800fcec:	481b      	ldr	r0, [pc, #108]	; (800fd5c <netconn_free+0x88>)
 800fcee:	f00f fddd 	bl	801f8ac <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	3310      	adds	r3, #16
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f00e fb31 	bl	801e35e <sys_mbox_valid>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d006      	beq.n	800fd10 <netconn_free+0x3c>
 800fd02:	4b14      	ldr	r3, [pc, #80]	; (800fd54 <netconn_free+0x80>)
 800fd04:	f240 3223 	movw	r2, #803	; 0x323
 800fd08:	4915      	ldr	r1, [pc, #84]	; (800fd60 <netconn_free+0x8c>)
 800fd0a:	4814      	ldr	r0, [pc, #80]	; (800fd5c <netconn_free+0x88>)
 800fd0c:	f00f fdce 	bl	801f8ac <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3314      	adds	r3, #20
 800fd14:	4618      	mov	r0, r3
 800fd16:	f00e fb22 	bl	801e35e <sys_mbox_valid>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d006      	beq.n	800fd2e <netconn_free+0x5a>
 800fd20:	4b0c      	ldr	r3, [pc, #48]	; (800fd54 <netconn_free+0x80>)
 800fd22:	f240 3226 	movw	r2, #806	; 0x326
 800fd26:	490f      	ldr	r1, [pc, #60]	; (800fd64 <netconn_free+0x90>)
 800fd28:	480c      	ldr	r0, [pc, #48]	; (800fd5c <netconn_free+0x88>)
 800fd2a:	f00f fdbf 	bl	801f8ac <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	330c      	adds	r3, #12
 800fd32:	4618      	mov	r0, r3
 800fd34:	f00e fb97 	bl	801e466 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	330c      	adds	r3, #12
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f00e fbb0 	bl	801e4a2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800fd42:	6879      	ldr	r1, [r7, #4]
 800fd44:	2007      	movs	r0, #7
 800fd46:	f002 f859 	bl	8011dfc <memp_free>
}
 800fd4a:	bf00      	nop
 800fd4c:	3708      	adds	r7, #8
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	08021864 	.word	0x08021864
 800fd58:	08021a90 	.word	0x08021a90
 800fd5c:	080218a8 	.word	0x080218a8
 800fd60:	08021ac0 	.word	0x08021ac0
 800fd64:	08021afc 	.word	0x08021afc

0800fd68 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b086      	sub	sp, #24
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	3310      	adds	r3, #16
 800fd74:	4618      	mov	r0, r3
 800fd76:	f00e faf2 	bl	801e35e <sys_mbox_valid>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d02f      	beq.n	800fde0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fd80:	e018      	b.n	800fdb4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd8a:	2b10      	cmp	r3, #16
 800fd8c:	d10e      	bne.n	800fdac <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	f107 020f 	add.w	r2, r7, #15
 800fd94:	4611      	mov	r1, r2
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7ff fafe 	bl	800f398 <lwip_netconn_is_err_msg>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d108      	bne.n	800fdb4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f002 ff11 	bl	8012bcc <pbuf_free>
 800fdaa:	e003      	b.n	800fdb4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f000 fe92 	bl	8010ad8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	3310      	adds	r3, #16
 800fdb8:	f107 0210 	add.w	r2, r7, #16
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f00e fab1 	bl	801e326 <sys_arch_mbox_tryfetch>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdca:	d1da      	bne.n	800fd82 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	3310      	adds	r3, #16
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f00e fa3d 	bl	801e250 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	3310      	adds	r3, #16
 800fdda:	4618      	mov	r0, r3
 800fddc:	f00e fad0 	bl	801e380 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	3314      	adds	r3, #20
 800fde4:	4618      	mov	r0, r3
 800fde6:	f00e faba 	bl	801e35e <sys_mbox_valid>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d034      	beq.n	800fe5a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fdf0:	e01d      	b.n	800fe2e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	f107 020e 	add.w	r2, r7, #14
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7ff facc 	bl	800f398 <lwip_netconn_is_err_msg>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d113      	bne.n	800fe2e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800fe0a:	6978      	ldr	r0, [r7, #20]
 800fe0c:	f7ff ffac 	bl	800fd68 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d007      	beq.n	800fe28 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f003 fcd5 	bl	80137cc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	2200      	movs	r2, #0
 800fe26:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800fe28:	6978      	ldr	r0, [r7, #20]
 800fe2a:	f7ff ff53 	bl	800fcd4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	3314      	adds	r3, #20
 800fe32:	f107 0210 	add.w	r2, r7, #16
 800fe36:	4611      	mov	r1, r2
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f00e fa74 	bl	801e326 <sys_arch_mbox_tryfetch>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe44:	d1d5      	bne.n	800fdf2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	3314      	adds	r3, #20
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f00e fa00 	bl	801e250 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	3314      	adds	r3, #20
 800fe54:	4618      	mov	r0, r3
 800fe56:	f00e fa93 	bl	801e380 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800fe5a:	bf00      	nop
 800fe5c:	3718      	adds	r7, #24
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b086      	sub	sp, #24
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800fe70:	2300      	movs	r3, #0
 800fe72:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d106      	bne.n	800fe88 <lwip_netconn_do_close_internal+0x24>
 800fe7a:	4b87      	ldr	r3, [pc, #540]	; (8010098 <lwip_netconn_do_close_internal+0x234>)
 800fe7c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800fe80:	4986      	ldr	r1, [pc, #536]	; (801009c <lwip_netconn_do_close_internal+0x238>)
 800fe82:	4887      	ldr	r0, [pc, #540]	; (80100a0 <lwip_netconn_do_close_internal+0x23c>)
 800fe84:	f00f fd12 	bl	801f8ac <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe90:	2b10      	cmp	r3, #16
 800fe92:	d006      	beq.n	800fea2 <lwip_netconn_do_close_internal+0x3e>
 800fe94:	4b80      	ldr	r3, [pc, #512]	; (8010098 <lwip_netconn_do_close_internal+0x234>)
 800fe96:	f240 32a3 	movw	r2, #931	; 0x3a3
 800fe9a:	4982      	ldr	r1, [pc, #520]	; (80100a4 <lwip_netconn_do_close_internal+0x240>)
 800fe9c:	4880      	ldr	r0, [pc, #512]	; (80100a0 <lwip_netconn_do_close_internal+0x23c>)
 800fe9e:	f00f fd05 	bl	801f8ac <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	785b      	ldrb	r3, [r3, #1]
 800fea6:	2b04      	cmp	r3, #4
 800fea8:	d006      	beq.n	800feb8 <lwip_netconn_do_close_internal+0x54>
 800feaa:	4b7b      	ldr	r3, [pc, #492]	; (8010098 <lwip_netconn_do_close_internal+0x234>)
 800feac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800feb0:	497d      	ldr	r1, [pc, #500]	; (80100a8 <lwip_netconn_do_close_internal+0x244>)
 800feb2:	487b      	ldr	r0, [pc, #492]	; (80100a0 <lwip_netconn_do_close_internal+0x23c>)
 800feb4:	f00f fcfa 	bl	801f8ac <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d106      	bne.n	800fece <lwip_netconn_do_close_internal+0x6a>
 800fec0:	4b75      	ldr	r3, [pc, #468]	; (8010098 <lwip_netconn_do_close_internal+0x234>)
 800fec2:	f240 32a5 	movw	r2, #933	; 0x3a5
 800fec6:	4979      	ldr	r1, [pc, #484]	; (80100ac <lwip_netconn_do_close_internal+0x248>)
 800fec8:	4875      	ldr	r0, [pc, #468]	; (80100a0 <lwip_netconn_do_close_internal+0x23c>)
 800feca:	f00f fcef 	bl	801f8ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6a1b      	ldr	r3, [r3, #32]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d106      	bne.n	800fee4 <lwip_netconn_do_close_internal+0x80>
 800fed6:	4b70      	ldr	r3, [pc, #448]	; (8010098 <lwip_netconn_do_close_internal+0x234>)
 800fed8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fedc:	4974      	ldr	r1, [pc, #464]	; (80100b0 <lwip_netconn_do_close_internal+0x24c>)
 800fede:	4870      	ldr	r0, [pc, #448]	; (80100a0 <lwip_netconn_do_close_internal+0x23c>)
 800fee0:	f00f fce4 	bl	801f8ac <iprintf>

  tpcb = conn->pcb.tcp;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a1b      	ldr	r3, [r3, #32]
 800feee:	7a1b      	ldrb	r3, [r3, #8]
 800fef0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800fef2:	7bfb      	ldrb	r3, [r7, #15]
 800fef4:	f003 0301 	and.w	r3, r3, #1
 800fef8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800fefa:	7bfb      	ldrb	r3, [r7, #15]
 800fefc:	f003 0302 	and.w	r3, r3, #2
 800ff00:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ff02:	7bfb      	ldrb	r3, [r7, #15]
 800ff04:	2b03      	cmp	r3, #3
 800ff06:	d102      	bne.n	800ff0e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ff08:	2301      	movs	r3, #1
 800ff0a:	75bb      	strb	r3, [r7, #22]
 800ff0c:	e01f      	b.n	800ff4e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ff0e:	7bbb      	ldrb	r3, [r7, #14]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00e      	beq.n	800ff32 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ff18:	2b05      	cmp	r3, #5
 800ff1a:	d007      	beq.n	800ff2c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ff20:	2b06      	cmp	r3, #6
 800ff22:	d003      	beq.n	800ff2c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ff28:	2b08      	cmp	r3, #8
 800ff2a:	d102      	bne.n	800ff32 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	75bb      	strb	r3, [r7, #22]
 800ff30:	e00d      	b.n	800ff4e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ff32:	7b7b      	ldrb	r3, [r7, #13]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d008      	beq.n	800ff4a <lwip_netconn_do_close_internal+0xe6>
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	8b5b      	ldrh	r3, [r3, #26]
 800ff3c:	f003 0310 	and.w	r3, r3, #16
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d002      	beq.n	800ff4a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800ff44:	2301      	movs	r3, #1
 800ff46:	75bb      	strb	r3, [r7, #22]
 800ff48:	e001      	b.n	800ff4e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800ff4e:	7dbb      	ldrb	r3, [r7, #22]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d003      	beq.n	800ff5c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ff54:	2100      	movs	r1, #0
 800ff56:	6938      	ldr	r0, [r7, #16]
 800ff58:	f004 fce0 	bl	801491c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	7d1b      	ldrb	r3, [r3, #20]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d104      	bne.n	800ff6e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ff64:	2100      	movs	r1, #0
 800ff66:	6938      	ldr	r0, [r7, #16]
 800ff68:	f004 fd50 	bl	8014a0c <tcp_accept>
 800ff6c:	e01d      	b.n	800ffaa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ff6e:	7bbb      	ldrb	r3, [r7, #14]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d007      	beq.n	800ff84 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ff74:	2100      	movs	r1, #0
 800ff76:	6938      	ldr	r0, [r7, #16]
 800ff78:	f004 fce2 	bl	8014940 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	6938      	ldr	r0, [r7, #16]
 800ff80:	f004 fd44 	bl	8014a0c <tcp_accept>
    }
    if (shut_tx) {
 800ff84:	7b7b      	ldrb	r3, [r7, #13]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d003      	beq.n	800ff92 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ff8a:	2100      	movs	r1, #0
 800ff8c:	6938      	ldr	r0, [r7, #16]
 800ff8e:	f004 fcf9 	bl	8014984 <tcp_sent>
    }
    if (shut_close) {
 800ff92:	7dbb      	ldrb	r3, [r7, #22]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d008      	beq.n	800ffaa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ff98:	2200      	movs	r2, #0
 800ff9a:	2100      	movs	r1, #0
 800ff9c:	6938      	ldr	r0, [r7, #16]
 800ff9e:	f004 fd4d 	bl	8014a3c <tcp_poll>
      tcp_err(tpcb, NULL);
 800ffa2:	2100      	movs	r1, #0
 800ffa4:	6938      	ldr	r0, [r7, #16]
 800ffa6:	f004 fd0f 	bl	80149c8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ffaa:	7dbb      	ldrb	r3, [r7, #22]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d005      	beq.n	800ffbc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ffb0:	6938      	ldr	r0, [r7, #16]
 800ffb2:	f003 fac5 	bl	8013540 <tcp_close>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	75fb      	strb	r3, [r7, #23]
 800ffba:	e007      	b.n	800ffcc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ffbc:	7bbb      	ldrb	r3, [r7, #14]
 800ffbe:	7b7a      	ldrb	r2, [r7, #13]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6938      	ldr	r0, [r7, #16]
 800ffc4:	f003 fae8 	bl	8013598 <tcp_shutdown>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ffcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d102      	bne.n	800ffda <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	757b      	strb	r3, [r7, #21]
 800ffd8:	e016      	b.n	8010008 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ffda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ffde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffe2:	d10f      	bne.n	8010004 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a1b      	ldr	r3, [r3, #32]
 800ffe8:	7a5b      	ldrb	r3, [r3, #9]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d10c      	bne.n	8010008 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ffee:	2301      	movs	r3, #1
 800fff0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800fff2:	7dbb      	ldrb	r3, [r7, #22]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d007      	beq.n	8010008 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800fff8:	6938      	ldr	r0, [r7, #16]
 800fffa:	f003 fbe7 	bl	80137cc <tcp_abort>
          err = ERR_OK;
 800fffe:	2300      	movs	r3, #0
 8010000:	75fb      	strb	r3, [r7, #23]
 8010002:	e001      	b.n	8010008 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8010004:	2301      	movs	r3, #1
 8010006:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8010008:	7d7b      	ldrb	r3, [r7, #21]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d052      	beq.n	80100b4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6a1b      	ldr	r3, [r3, #32]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	330c      	adds	r3, #12
 8010016:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a1b      	ldr	r3, [r3, #32]
 801001c:	7dfa      	ldrb	r2, [r7, #23]
 801001e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2200      	movs	r2, #0
 8010024:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 801002c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d129      	bne.n	8010088 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8010034:	7dbb      	ldrb	r3, [r7, #22]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d00c      	beq.n	8010054 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010044:	2b00      	cmp	r3, #0
 8010046:	d005      	beq.n	8010054 <lwip_netconn_do_close_internal+0x1f0>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004c:	2200      	movs	r2, #0
 801004e:	2104      	movs	r1, #4
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	4798      	blx	r3
      }
      if (shut_rx) {
 8010054:	7bbb      	ldrb	r3, [r7, #14]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d009      	beq.n	801006e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801005e:	2b00      	cmp	r3, #0
 8010060:	d005      	beq.n	801006e <lwip_netconn_do_close_internal+0x20a>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010066:	2200      	movs	r2, #0
 8010068:	2100      	movs	r1, #0
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	4798      	blx	r3
      }
      if (shut_tx) {
 801006e:	7b7b      	ldrb	r3, [r7, #13]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d009      	beq.n	8010088 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010078:	2b00      	cmp	r3, #0
 801007a:	d005      	beq.n	8010088 <lwip_netconn_do_close_internal+0x224>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010080:	2200      	movs	r2, #0
 8010082:	2102      	movs	r1, #2
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010088:	78fb      	ldrb	r3, [r7, #3]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d002      	beq.n	8010094 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801008e:	68b8      	ldr	r0, [r7, #8]
 8010090:	f00e f9dc 	bl	801e44c <sys_sem_signal>
    }
    return ERR_OK;
 8010094:	2300      	movs	r3, #0
 8010096:	e03c      	b.n	8010112 <lwip_netconn_do_close_internal+0x2ae>
 8010098:	08021864 	.word	0x08021864
 801009c:	08021b38 	.word	0x08021b38
 80100a0:	080218a8 	.word	0x080218a8
 80100a4:	08021b48 	.word	0x08021b48
 80100a8:	08021b68 	.word	0x08021b68
 80100ac:	08021b8c 	.word	0x08021b8c
 80100b0:	080219cc 	.word	0x080219cc
  }
  if (!close_finished) {
 80100b4:	7d7b      	ldrb	r3, [r7, #21]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d11e      	bne.n	80100f8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	7d1b      	ldrb	r3, [r3, #20]
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d106      	bne.n	80100d0 <lwip_netconn_do_close_internal+0x26c>
 80100c2:	4b16      	ldr	r3, [pc, #88]	; (801011c <lwip_netconn_do_close_internal+0x2b8>)
 80100c4:	f240 4241 	movw	r2, #1089	; 0x441
 80100c8:	4915      	ldr	r1, [pc, #84]	; (8010120 <lwip_netconn_do_close_internal+0x2bc>)
 80100ca:	4816      	ldr	r0, [pc, #88]	; (8010124 <lwip_netconn_do_close_internal+0x2c0>)
 80100cc:	f00f fbee 	bl	801f8ac <iprintf>
    if (shut_tx) {
 80100d0:	7b7b      	ldrb	r3, [r7, #13]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d003      	beq.n	80100de <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80100d6:	4914      	ldr	r1, [pc, #80]	; (8010128 <lwip_netconn_do_close_internal+0x2c4>)
 80100d8:	6938      	ldr	r0, [r7, #16]
 80100da:	f004 fc53 	bl	8014984 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80100de:	2201      	movs	r2, #1
 80100e0:	4912      	ldr	r1, [pc, #72]	; (801012c <lwip_netconn_do_close_internal+0x2c8>)
 80100e2:	6938      	ldr	r0, [r7, #16]
 80100e4:	f004 fcaa 	bl	8014a3c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80100e8:	4911      	ldr	r1, [pc, #68]	; (8010130 <lwip_netconn_do_close_internal+0x2cc>)
 80100ea:	6938      	ldr	r0, [r7, #16]
 80100ec:	f004 fc6c 	bl	80149c8 <tcp_err>
    tcp_arg(tpcb, conn);
 80100f0:	6879      	ldr	r1, [r7, #4]
 80100f2:	6938      	ldr	r0, [r7, #16]
 80100f4:	f004 fc12 	bl	801491c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80100f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d106      	bne.n	801010e <lwip_netconn_do_close_internal+0x2aa>
 8010100:	4b06      	ldr	r3, [pc, #24]	; (801011c <lwip_netconn_do_close_internal+0x2b8>)
 8010102:	f240 424d 	movw	r2, #1101	; 0x44d
 8010106:	490b      	ldr	r1, [pc, #44]	; (8010134 <lwip_netconn_do_close_internal+0x2d0>)
 8010108:	4806      	ldr	r0, [pc, #24]	; (8010124 <lwip_netconn_do_close_internal+0x2c0>)
 801010a:	f00f fbcf 	bl	801f8ac <iprintf>
  return err;
 801010e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3718      	adds	r7, #24
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	08021864 	.word	0x08021864
 8010120:	08021ba0 	.word	0x08021ba0
 8010124:	080218a8 	.word	0x080218a8
 8010128:	0800f6dd 	.word	0x0800f6dd
 801012c:	0800f615 	.word	0x0800f615
 8010130:	0800f785 	.word	0x0800f785
 8010134:	08021bc4 	.word	0x08021bc4

08010138 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b084      	sub	sp, #16
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	785b      	ldrb	r3, [r3, #1]
 801014a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801014c:	7afb      	ldrb	r3, [r7, #11]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d00d      	beq.n	801016e <lwip_netconn_do_delconn+0x36>
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801015c:	2b10      	cmp	r3, #16
 801015e:	d006      	beq.n	801016e <lwip_netconn_do_delconn+0x36>
 8010160:	4b60      	ldr	r3, [pc, #384]	; (80102e4 <lwip_netconn_do_delconn+0x1ac>)
 8010162:	f240 425e 	movw	r2, #1118	; 0x45e
 8010166:	4960      	ldr	r1, [pc, #384]	; (80102e8 <lwip_netconn_do_delconn+0x1b0>)
 8010168:	4860      	ldr	r0, [pc, #384]	; (80102ec <lwip_netconn_do_delconn+0x1b4>)
 801016a:	f00f fb9f 	bl	801f8ac <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801016e:	7afb      	ldrb	r3, [r7, #11]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d005      	beq.n	8010180 <lwip_netconn_do_delconn+0x48>
 8010174:	7afb      	ldrb	r3, [r7, #11]
 8010176:	2b02      	cmp	r3, #2
 8010178:	d002      	beq.n	8010180 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801017a:	7afb      	ldrb	r3, [r7, #11]
 801017c:	2b03      	cmp	r3, #3
 801017e:	d109      	bne.n	8010194 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010180:	7afb      	ldrb	r3, [r7, #11]
 8010182:	2b03      	cmp	r3, #3
 8010184:	d10a      	bne.n	801019c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	7f1b      	ldrb	r3, [r3, #28]
 801018c:	f003 0304 	and.w	r3, r3, #4
 8010190:	2b00      	cmp	r3, #0
 8010192:	d103      	bne.n	801019c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	22fb      	movs	r2, #251	; 0xfb
 8010198:	711a      	strb	r2, [r3, #4]
 801019a:	e097      	b.n	80102cc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801019c:	7afb      	ldrb	r3, [r7, #11]
 801019e:	2b03      	cmp	r3, #3
 80101a0:	d10d      	bne.n	80101be <lwip_netconn_do_delconn+0x86>
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	7f1b      	ldrb	r3, [r3, #28]
 80101a8:	f003 0304 	and.w	r3, r3, #4
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d106      	bne.n	80101be <lwip_netconn_do_delconn+0x86>
 80101b0:	4b4c      	ldr	r3, [pc, #304]	; (80102e4 <lwip_netconn_do_delconn+0x1ac>)
 80101b2:	f240 427a 	movw	r2, #1146	; 0x47a
 80101b6:	494e      	ldr	r1, [pc, #312]	; (80102f0 <lwip_netconn_do_delconn+0x1b8>)
 80101b8:	484c      	ldr	r0, [pc, #304]	; (80102ec <lwip_netconn_do_delconn+0x1b4>)
 80101ba:	f00f fb77 	bl	801f8ac <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	2200      	movs	r2, #0
 80101c2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7ff fdcd 	bl	800fd68 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d05f      	beq.n	8010298 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101e2:	2b10      	cmp	r3, #16
 80101e4:	d00d      	beq.n	8010202 <lwip_netconn_do_delconn+0xca>
 80101e6:	2b20      	cmp	r3, #32
 80101e8:	d151      	bne.n	801028e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	4618      	mov	r0, r3
 80101fc:	f009 fdf6 	bl	8019dec <udp_remove>
          break;
 8010200:	e046      	b.n	8010290 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6a1b      	ldr	r3, [r3, #32]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d006      	beq.n	801021a <lwip_netconn_do_delconn+0xe2>
 801020c:	4b35      	ldr	r3, [pc, #212]	; (80102e4 <lwip_netconn_do_delconn+0x1ac>)
 801020e:	f240 4294 	movw	r2, #1172	; 0x494
 8010212:	4938      	ldr	r1, [pc, #224]	; (80102f4 <lwip_netconn_do_delconn+0x1bc>)
 8010214:	4835      	ldr	r0, [pc, #212]	; (80102ec <lwip_netconn_do_delconn+0x1b4>)
 8010216:	f00f fb49 	bl	801f8ac <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2204      	movs	r2, #4
 8010220:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2203      	movs	r2, #3
 8010226:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2100      	movs	r1, #0
 8010236:	4618      	mov	r0, r3
 8010238:	f7ff fe14 	bl	800fe64 <lwip_netconn_do_close_internal>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d04b      	beq.n	80102da <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	785b      	ldrb	r3, [r3, #1]
 8010248:	2b04      	cmp	r3, #4
 801024a:	d006      	beq.n	801025a <lwip_netconn_do_delconn+0x122>
 801024c:	4b25      	ldr	r3, [pc, #148]	; (80102e4 <lwip_netconn_do_delconn+0x1ac>)
 801024e:	f240 429a 	movw	r2, #1178	; 0x49a
 8010252:	4929      	ldr	r1, [pc, #164]	; (80102f8 <lwip_netconn_do_delconn+0x1c0>)
 8010254:	4825      	ldr	r0, [pc, #148]	; (80102ec <lwip_netconn_do_delconn+0x1b4>)
 8010256:	f00f fb29 	bl	801f8ac <iprintf>
            UNLOCK_TCPIP_CORE();
 801025a:	4828      	ldr	r0, [pc, #160]	; (80102fc <lwip_netconn_do_delconn+0x1c4>)
 801025c:	f00e f967 	bl	801e52e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	330c      	adds	r3, #12
 8010266:	2100      	movs	r1, #0
 8010268:	4618      	mov	r0, r3
 801026a:	f00e f8be 	bl	801e3ea <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801026e:	4823      	ldr	r0, [pc, #140]	; (80102fc <lwip_netconn_do_delconn+0x1c4>)
 8010270:	f00e f94e 	bl	801e510 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	785b      	ldrb	r3, [r3, #1]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d02d      	beq.n	80102da <lwip_netconn_do_delconn+0x1a2>
 801027e:	4b19      	ldr	r3, [pc, #100]	; (80102e4 <lwip_netconn_do_delconn+0x1ac>)
 8010280:	f240 429e 	movw	r2, #1182	; 0x49e
 8010284:	491c      	ldr	r1, [pc, #112]	; (80102f8 <lwip_netconn_do_delconn+0x1c0>)
 8010286:	4819      	ldr	r0, [pc, #100]	; (80102ec <lwip_netconn_do_delconn+0x1b4>)
 8010288:	f00f fb10 	bl	801f8ac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 801028c:	e025      	b.n	80102da <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 801028e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2200      	movs	r2, #0
 8010296:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d007      	beq.n	80102b2 <lwip_netconn_do_delconn+0x17a>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	6810      	ldr	r0, [r2, #0]
 80102ac:	2200      	movs	r2, #0
 80102ae:	2100      	movs	r1, #0
 80102b0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d007      	beq.n	80102cc <lwip_netconn_do_delconn+0x194>
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c2:	68fa      	ldr	r2, [r7, #12]
 80102c4:	6810      	ldr	r0, [r2, #0]
 80102c6:	2200      	movs	r2, #0
 80102c8:	2102      	movs	r1, #2
 80102ca:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	330c      	adds	r3, #12
 80102d2:	4618      	mov	r0, r3
 80102d4:	f00e f8d4 	bl	801e480 <sys_sem_valid>
 80102d8:	e000      	b.n	80102dc <lwip_netconn_do_delconn+0x1a4>
          return;
 80102da:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	08021864 	.word	0x08021864
 80102e8:	08021bd4 	.word	0x08021bd4
 80102ec:	080218a8 	.word	0x080218a8
 80102f0:	08021be8 	.word	0x08021be8
 80102f4:	08021c08 	.word	0x08021c08
 80102f8:	08021c24 	.word	0x08021c24
 80102fc:	2000ca54 	.word	0x2000ca54

08010300 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d025      	beq.n	8010362 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010320:	2b10      	cmp	r3, #16
 8010322:	d00e      	beq.n	8010342 <lwip_netconn_do_bind+0x42>
 8010324:	2b20      	cmp	r3, #32
 8010326:	d119      	bne.n	801035c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	6858      	ldr	r0, [r3, #4]
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	6899      	ldr	r1, [r3, #8]
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	899b      	ldrh	r3, [r3, #12]
 8010336:	461a      	mov	r2, r3
 8010338:	f009 fc28 	bl	8019b8c <udp_bind>
 801033c:	4603      	mov	r3, r0
 801033e:	73fb      	strb	r3, [r7, #15]
        break;
 8010340:	e011      	b.n	8010366 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	6858      	ldr	r0, [r3, #4]
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	6899      	ldr	r1, [r3, #8]
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	899b      	ldrh	r3, [r3, #12]
 8010350:	461a      	mov	r2, r3
 8010352:	f003 fa47 	bl	80137e4 <tcp_bind>
 8010356:	4603      	mov	r3, r0
 8010358:	73fb      	strb	r3, [r7, #15]
        break;
 801035a:	e004      	b.n	8010366 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801035c:	23fa      	movs	r3, #250	; 0xfa
 801035e:	73fb      	strb	r3, [r7, #15]
        break;
 8010360:	e001      	b.n	8010366 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8010362:	23fa      	movs	r3, #250	; 0xfa
 8010364:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	7bfa      	ldrb	r2, [r7, #15]
 801036a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801036c:	bf00      	nop
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b086      	sub	sp, #24
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d07f      	beq.n	801048a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010394:	2b10      	cmp	r3, #16
 8010396:	d175      	bne.n	8010484 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	785b      	ldrb	r3, [r3, #1]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d165      	bne.n	801046e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	7d1b      	ldrb	r3, [r3, #20]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d002      	beq.n	80103b4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80103ae:	23fa      	movs	r3, #250	; 0xfa
 80103b0:	72fb      	strb	r3, [r7, #11]
 80103b2:	e06c      	b.n	801048e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80103b4:	23ff      	movs	r3, #255	; 0xff
 80103b6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	f107 020b 	add.w	r2, r7, #11
 80103c2:	7cf9      	ldrb	r1, [r7, #19]
 80103c4:	4618      	mov	r0, r3
 80103c6:	f003 fadf 	bl	8013988 <tcp_listen_with_backlog_and_err>
 80103ca:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d05d      	beq.n	801048e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	3310      	adds	r3, #16
 80103d8:	4618      	mov	r0, r3
 80103da:	f00d ffc0 	bl	801e35e <sys_mbox_valid>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d00b      	beq.n	80103fc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	3310      	adds	r3, #16
 80103ea:	4618      	mov	r0, r3
 80103ec:	f00d ff30 	bl	801e250 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	3310      	adds	r3, #16
 80103f6:	4618      	mov	r0, r3
 80103f8:	f00d ffc2 	bl	801e380 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80103fc:	2300      	movs	r3, #0
 80103fe:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	3314      	adds	r3, #20
 8010406:	4618      	mov	r0, r3
 8010408:	f00d ffa9 	bl	801e35e <sys_mbox_valid>
 801040c:	4603      	mov	r3, r0
 801040e:	2b00      	cmp	r3, #0
 8010410:	d108      	bne.n	8010424 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	3314      	adds	r3, #20
 8010418:	2106      	movs	r1, #6
 801041a:	4618      	mov	r0, r3
 801041c:	f00d fef6 	bl	801e20c <sys_mbox_new>
 8010420:	4603      	mov	r3, r0
 8010422:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8010424:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d118      	bne.n	801045e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	2202      	movs	r2, #2
 8010432:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	685a      	ldr	r2, [r3, #4]
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	4619      	mov	r1, r3
 8010448:	4610      	mov	r0, r2
 801044a:	f004 fa67 	bl	801491c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	4912      	ldr	r1, [pc, #72]	; (80104a0 <lwip_netconn_do_listen+0x12c>)
 8010456:	4618      	mov	r0, r3
 8010458:	f004 fad8 	bl	8014a0c <tcp_accept>
 801045c:	e017      	b.n	801048e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	f003 f86e 	bl	8013540 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2200      	movs	r2, #0
 801046a:	605a      	str	r2, [r3, #4]
 801046c:	e00f      	b.n	801048e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	785b      	ldrb	r3, [r3, #1]
 8010474:	2b02      	cmp	r3, #2
 8010476:	d102      	bne.n	801047e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8010478:	2300      	movs	r3, #0
 801047a:	72fb      	strb	r3, [r7, #11]
 801047c:	e007      	b.n	801048e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801047e:	23f5      	movs	r3, #245	; 0xf5
 8010480:	72fb      	strb	r3, [r7, #11]
 8010482:	e004      	b.n	801048e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8010484:	23f0      	movs	r3, #240	; 0xf0
 8010486:	72fb      	strb	r3, [r7, #11]
 8010488:	e001      	b.n	801048e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801048a:	23f5      	movs	r3, #245	; 0xf5
 801048c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801048e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010496:	bf00      	nop
 8010498:	3718      	adds	r7, #24
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop
 80104a0:	0800f981 	.word	0x0800f981

080104a4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	2200      	movs	r2, #0
 80104b4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d022      	beq.n	8010506 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80104ca:	2b10      	cmp	r3, #16
 80104cc:	d11b      	bne.n	8010506 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	689b      	ldr	r3, [r3, #8]
 80104d2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104da:	d202      	bcs.n	80104e2 <lwip_netconn_do_recv+0x3e>
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	b29b      	uxth	r3, r3
 80104e0:	e001      	b.n	80104e6 <lwip_netconn_do_recv+0x42>
 80104e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104e6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	89fa      	ldrh	r2, [r7, #14]
 80104f0:	4611      	mov	r1, r2
 80104f2:	4618      	mov	r0, r3
 80104f4:	f003 fb4c 	bl	8013b90 <tcp_recved>
        remaining -= recved;
 80104f8:	89fb      	ldrh	r3, [r7, #14]
 80104fa:	697a      	ldr	r2, [r7, #20]
 80104fc:	1ad3      	subs	r3, r2, r3
 80104fe:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1e6      	bne.n	80104d4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010506:	bf00      	nop
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
	...

08010510 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b088      	sub	sp, #32
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	460b      	mov	r3, r1
 801051a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 801051c:	2300      	movs	r3, #0
 801051e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d106      	bne.n	8010534 <lwip_netconn_do_writemore+0x24>
 8010526:	4b96      	ldr	r3, [pc, #600]	; (8010780 <lwip_netconn_do_writemore+0x270>)
 8010528:	f240 6273 	movw	r2, #1651	; 0x673
 801052c:	4995      	ldr	r1, [pc, #596]	; (8010784 <lwip_netconn_do_writemore+0x274>)
 801052e:	4896      	ldr	r0, [pc, #600]	; (8010788 <lwip_netconn_do_writemore+0x278>)
 8010530:	f00f f9bc 	bl	801f8ac <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	785b      	ldrb	r3, [r3, #1]
 8010538:	2b01      	cmp	r3, #1
 801053a:	d006      	beq.n	801054a <lwip_netconn_do_writemore+0x3a>
 801053c:	4b90      	ldr	r3, [pc, #576]	; (8010780 <lwip_netconn_do_writemore+0x270>)
 801053e:	f240 6274 	movw	r2, #1652	; 0x674
 8010542:	4992      	ldr	r1, [pc, #584]	; (801078c <lwip_netconn_do_writemore+0x27c>)
 8010544:	4890      	ldr	r0, [pc, #576]	; (8010788 <lwip_netconn_do_writemore+0x278>)
 8010546:	f00f f9b1 	bl	801f8ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a1b      	ldr	r3, [r3, #32]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <lwip_netconn_do_writemore+0x50>
 8010552:	4b8b      	ldr	r3, [pc, #556]	; (8010780 <lwip_netconn_do_writemore+0x270>)
 8010554:	f240 6275 	movw	r2, #1653	; 0x675
 8010558:	498d      	ldr	r1, [pc, #564]	; (8010790 <lwip_netconn_do_writemore+0x280>)
 801055a:	488b      	ldr	r0, [pc, #556]	; (8010788 <lwip_netconn_do_writemore+0x278>)
 801055c:	f00f f9a6 	bl	801f8ac <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d106      	bne.n	8010576 <lwip_netconn_do_writemore+0x66>
 8010568:	4b85      	ldr	r3, [pc, #532]	; (8010780 <lwip_netconn_do_writemore+0x270>)
 801056a:	f240 6276 	movw	r2, #1654	; 0x676
 801056e:	4989      	ldr	r1, [pc, #548]	; (8010794 <lwip_netconn_do_writemore+0x284>)
 8010570:	4885      	ldr	r0, [pc, #532]	; (8010788 <lwip_netconn_do_writemore+0x278>)
 8010572:	f00f f99b 	bl	801f8ac <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6a1b      	ldr	r3, [r3, #32]
 801057a:	699a      	ldr	r2, [r3, #24]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6a1b      	ldr	r3, [r3, #32]
 8010580:	695b      	ldr	r3, [r3, #20]
 8010582:	429a      	cmp	r2, r3
 8010584:	d306      	bcc.n	8010594 <lwip_netconn_do_writemore+0x84>
 8010586:	4b7e      	ldr	r3, [pc, #504]	; (8010780 <lwip_netconn_do_writemore+0x270>)
 8010588:	f240 6277 	movw	r2, #1655	; 0x677
 801058c:	4982      	ldr	r1, [pc, #520]	; (8010798 <lwip_netconn_do_writemore+0x288>)
 801058e:	487e      	ldr	r0, [pc, #504]	; (8010788 <lwip_netconn_do_writemore+0x278>)
 8010590:	f00f f98c 	bl	801f8ac <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6a1b      	ldr	r3, [r3, #32]
 8010598:	899b      	ldrh	r3, [r3, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d106      	bne.n	80105ac <lwip_netconn_do_writemore+0x9c>
 801059e:	4b78      	ldr	r3, [pc, #480]	; (8010780 <lwip_netconn_do_writemore+0x270>)
 80105a0:	f240 6279 	movw	r2, #1657	; 0x679
 80105a4:	497d      	ldr	r1, [pc, #500]	; (801079c <lwip_netconn_do_writemore+0x28c>)
 80105a6:	4878      	ldr	r0, [pc, #480]	; (8010788 <lwip_netconn_do_writemore+0x278>)
 80105a8:	f00f f980 	bl	801f8ac <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6a1b      	ldr	r3, [r3, #32]
 80105b0:	7f1b      	ldrb	r3, [r3, #28]
 80105b2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	7f1b      	ldrb	r3, [r3, #28]
 80105b8:	f003 0302 	and.w	r3, r3, #2
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d104      	bne.n	80105ca <lwip_netconn_do_writemore+0xba>
 80105c0:	7ebb      	ldrb	r3, [r7, #26]
 80105c2:	f003 0304 	and.w	r3, r3, #4
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d001      	beq.n	80105ce <lwip_netconn_do_writemore+0xbe>
 80105ca:	2301      	movs	r3, #1
 80105cc:	e000      	b.n	80105d0 <lwip_netconn_do_writemore+0xc0>
 80105ce:	2300      	movs	r3, #0
 80105d0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6a1b      	ldr	r3, [r3, #32]
 80105d6:	689b      	ldr	r3, [r3, #8]
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6a1b      	ldr	r3, [r3, #32]
 80105de:	691b      	ldr	r3, [r3, #16]
 80105e0:	4413      	add	r3, r2
 80105e2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6a1b      	ldr	r3, [r3, #32]
 80105e8:	689b      	ldr	r3, [r3, #8]
 80105ea:	685a      	ldr	r2, [r3, #4]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6a1b      	ldr	r3, [r3, #32]
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	1ad3      	subs	r3, r2, r3
 80105f4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105fc:	d307      	bcc.n	801060e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80105fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010602:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010604:	7ebb      	ldrb	r3, [r7, #26]
 8010606:	f043 0302 	orr.w	r3, r3, #2
 801060a:	76bb      	strb	r3, [r7, #26]
 801060c:	e001      	b.n	8010612 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801061a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 801061c:	89fa      	ldrh	r2, [r7, #14]
 801061e:	8bbb      	ldrh	r3, [r7, #28]
 8010620:	429a      	cmp	r2, r3
 8010622:	d216      	bcs.n	8010652 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010624:	89fb      	ldrh	r3, [r7, #14]
 8010626:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010628:	7e3b      	ldrb	r3, [r7, #24]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00d      	beq.n	801064a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801062e:	8bbb      	ldrh	r3, [r7, #28]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d10e      	bne.n	8010652 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6a1b      	ldr	r3, [r3, #32]
 8010638:	699b      	ldr	r3, [r3, #24]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d102      	bne.n	8010644 <lwip_netconn_do_writemore+0x134>
 801063e:	f06f 0306 	mvn.w	r3, #6
 8010642:	e000      	b.n	8010646 <lwip_netconn_do_writemore+0x136>
 8010644:	2300      	movs	r3, #0
 8010646:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010648:	e07d      	b.n	8010746 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801064a:	7ebb      	ldrb	r3, [r7, #26]
 801064c:	f043 0302 	orr.w	r3, r3, #2
 8010650:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6a1b      	ldr	r3, [r3, #32]
 8010656:	691a      	ldr	r2, [r3, #16]
 8010658:	8bbb      	ldrh	r3, [r7, #28]
 801065a:	441a      	add	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6a1b      	ldr	r3, [r3, #32]
 8010660:	689b      	ldr	r3, [r3, #8]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	429a      	cmp	r2, r3
 8010666:	d906      	bls.n	8010676 <lwip_netconn_do_writemore+0x166>
 8010668:	4b45      	ldr	r3, [pc, #276]	; (8010780 <lwip_netconn_do_writemore+0x270>)
 801066a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801066e:	494c      	ldr	r1, [pc, #304]	; (80107a0 <lwip_netconn_do_writemore+0x290>)
 8010670:	4845      	ldr	r0, [pc, #276]	; (8010788 <lwip_netconn_do_writemore+0x278>)
 8010672:	f00f f91b 	bl	801f8ac <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010676:	8bbb      	ldrh	r3, [r7, #28]
 8010678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801067c:	4293      	cmp	r3, r2
 801067e:	d103      	bne.n	8010688 <lwip_netconn_do_writemore+0x178>
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010686:	d209      	bcs.n	801069c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801068c:	8bba      	ldrh	r2, [r7, #28]
 801068e:	429a      	cmp	r2, r3
 8010690:	d10b      	bne.n	80106aa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6a1b      	ldr	r3, [r3, #32]
 8010696:	899b      	ldrh	r3, [r3, #12]
 8010698:	2b01      	cmp	r3, #1
 801069a:	d906      	bls.n	80106aa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 801069c:	2301      	movs	r3, #1
 801069e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80106a0:	7ebb      	ldrb	r3, [r7, #26]
 80106a2:	f043 0302 	orr.w	r3, r3, #2
 80106a6:	76bb      	strb	r3, [r7, #26]
 80106a8:	e001      	b.n	80106ae <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80106aa:	2300      	movs	r3, #0
 80106ac:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6858      	ldr	r0, [r3, #4]
 80106b2:	7ebb      	ldrb	r3, [r7, #26]
 80106b4:	8bba      	ldrh	r2, [r7, #28]
 80106b6:	6979      	ldr	r1, [r7, #20]
 80106b8:	f007 f872 	bl	80177a0 <tcp_write>
 80106bc:	4603      	mov	r3, r0
 80106be:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80106c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d12c      	bne.n	8010722 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6a1b      	ldr	r3, [r3, #32]
 80106cc:	6999      	ldr	r1, [r3, #24]
 80106ce:	8bba      	ldrh	r2, [r7, #28]
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6a1b      	ldr	r3, [r3, #32]
 80106d4:	440a      	add	r2, r1
 80106d6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6a1b      	ldr	r3, [r3, #32]
 80106dc:	6919      	ldr	r1, [r3, #16]
 80106de:	8bba      	ldrh	r2, [r7, #28]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6a1b      	ldr	r3, [r3, #32]
 80106e4:	440a      	add	r2, r1
 80106e6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6a1b      	ldr	r3, [r3, #32]
 80106ec:	691a      	ldr	r2, [r3, #16]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6a1b      	ldr	r3, [r3, #32]
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d113      	bne.n	8010722 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6a1b      	ldr	r3, [r3, #32]
 80106fe:	899a      	ldrh	r2, [r3, #12]
 8010700:	3a01      	subs	r2, #1
 8010702:	b292      	uxth	r2, r2
 8010704:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6a1b      	ldr	r3, [r3, #32]
 801070a:	899b      	ldrh	r3, [r3, #12]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d008      	beq.n	8010722 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6a1b      	ldr	r3, [r3, #32]
 8010714:	689a      	ldr	r2, [r3, #8]
 8010716:	3208      	adds	r2, #8
 8010718:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6a1b      	ldr	r3, [r3, #32]
 801071e:	2200      	movs	r2, #0
 8010720:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010722:	7e7b      	ldrb	r3, [r7, #25]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d004      	beq.n	8010732 <lwip_netconn_do_writemore+0x222>
 8010728:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801072c:	2b00      	cmp	r3, #0
 801072e:	f43f af50 	beq.w	80105d2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010732:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d004      	beq.n	8010744 <lwip_netconn_do_writemore+0x234>
 801073a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801073e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010742:	d146      	bne.n	80107d2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010744:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010746:	7e3b      	ldrb	r3, [r7, #24]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d02b      	beq.n	80107a4 <lwip_netconn_do_writemore+0x294>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6a1b      	ldr	r3, [r3, #32]
 8010750:	699a      	ldr	r2, [r3, #24]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a1b      	ldr	r3, [r3, #32]
 8010756:	695b      	ldr	r3, [r3, #20]
 8010758:	429a      	cmp	r2, r3
 801075a:	d223      	bcs.n	80107a4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010760:	2b00      	cmp	r3, #0
 8010762:	d005      	beq.n	8010770 <lwip_netconn_do_writemore+0x260>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010768:	2200      	movs	r2, #0
 801076a:	2103      	movs	r1, #3
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	7f1b      	ldrb	r3, [r3, #28]
 8010774:	f043 0310 	orr.w	r3, r3, #16
 8010778:	b2da      	uxtb	r2, r3
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	771a      	strb	r2, [r3, #28]
 801077e:	e028      	b.n	80107d2 <lwip_netconn_do_writemore+0x2c2>
 8010780:	08021864 	.word	0x08021864
 8010784:	080219bc 	.word	0x080219bc
 8010788:	080218a8 	.word	0x080218a8
 801078c:	08021cc4 	.word	0x08021cc4
 8010790:	080219cc 	.word	0x080219cc
 8010794:	08021ce4 	.word	0x08021ce4
 8010798:	08021cfc 	.word	0x08021cfc
 801079c:	08021d3c 	.word	0x08021d3c
 80107a0:	08021d64 	.word	0x08021d64
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80107ac:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80107b0:	d305      	bcc.n	80107be <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80107ba:	2b04      	cmp	r3, #4
 80107bc:	d909      	bls.n	80107d2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d005      	beq.n	80107d2 <lwip_netconn_do_writemore+0x2c2>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ca:	2200      	movs	r2, #0
 80107cc:	2103      	movs	r1, #3
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80107d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d11d      	bne.n	8010816 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6a1b      	ldr	r3, [r3, #32]
 80107de:	699a      	ldr	r2, [r3, #24]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6a1b      	ldr	r3, [r3, #32]
 80107e4:	695b      	ldr	r3, [r3, #20]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d002      	beq.n	80107f0 <lwip_netconn_do_writemore+0x2e0>
 80107ea:	7e3b      	ldrb	r3, [r7, #24]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d001      	beq.n	80107f4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80107f0:	2301      	movs	r3, #1
 80107f2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	4618      	mov	r0, r3
 80107fa:	f007 fdbb 	bl	8018374 <tcp_output>
 80107fe:	4603      	mov	r3, r0
 8010800:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010802:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010806:	f113 0f04 	cmn.w	r3, #4
 801080a:	d12c      	bne.n	8010866 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801080c:	7b3b      	ldrb	r3, [r7, #12]
 801080e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010810:	2301      	movs	r3, #1
 8010812:	76fb      	strb	r3, [r7, #27]
 8010814:	e027      	b.n	8010866 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010816:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801081a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801081e:	d120      	bne.n	8010862 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	4618      	mov	r0, r3
 8010826:	f007 fda5 	bl	8018374 <tcp_output>
 801082a:	4603      	mov	r3, r0
 801082c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801082e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010832:	f113 0f04 	cmn.w	r3, #4
 8010836:	d104      	bne.n	8010842 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010838:	7b7b      	ldrb	r3, [r7, #13]
 801083a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801083c:	2301      	movs	r3, #1
 801083e:	76fb      	strb	r3, [r7, #27]
 8010840:	e011      	b.n	8010866 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010842:	7e3b      	ldrb	r3, [r7, #24]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d00e      	beq.n	8010866 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6a1b      	ldr	r3, [r3, #32]
 801084c:	699b      	ldr	r3, [r3, #24]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d102      	bne.n	8010858 <lwip_netconn_do_writemore+0x348>
 8010852:	f06f 0306 	mvn.w	r3, #6
 8010856:	e000      	b.n	801085a <lwip_netconn_do_writemore+0x34a>
 8010858:	2300      	movs	r3, #0
 801085a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801085c:	2301      	movs	r3, #1
 801085e:	76fb      	strb	r3, [r7, #27]
 8010860:	e001      	b.n	8010866 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010862:	2301      	movs	r3, #1
 8010864:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010866:	7efb      	ldrb	r3, [r7, #27]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d015      	beq.n	8010898 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6a1b      	ldr	r3, [r3, #32]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	330c      	adds	r3, #12
 8010874:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6a1b      	ldr	r3, [r3, #32]
 801087a:	7ffa      	ldrb	r2, [r7, #31]
 801087c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2200      	movs	r2, #0
 8010882:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2200      	movs	r2, #0
 8010888:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801088a:	78fb      	ldrb	r3, [r7, #3]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d006      	beq.n	801089e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010890:	68b8      	ldr	r0, [r7, #8]
 8010892:	f00d fddb 	bl	801e44c <sys_sem_signal>
 8010896:	e002      	b.n	801089e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801089c:	e000      	b.n	80108a0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 801089e:	2300      	movs	r3, #0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3720      	adds	r7, #32
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7fe fd1c 	bl	800f2f6 <netconn_err>
 80108be:	4603      	mov	r3, r0
 80108c0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80108c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d166      	bne.n	8010998 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108d4:	2b10      	cmp	r3, #16
 80108d6:	d15d      	bne.n	8010994 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	785b      	ldrb	r3, [r3, #1]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d002      	beq.n	80108e8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80108e2:	23fb      	movs	r3, #251	; 0xfb
 80108e4:	73fb      	strb	r3, [r7, #15]
 80108e6:	e057      	b.n	8010998 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d04d      	beq.n	801098e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2201      	movs	r2, #1
 80108f8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	6a1b      	ldr	r3, [r3, #32]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d006      	beq.n	8010912 <lwip_netconn_do_write+0x6a>
 8010904:	4b28      	ldr	r3, [pc, #160]	; (80109a8 <lwip_netconn_do_write+0x100>)
 8010906:	f240 7223 	movw	r2, #1827	; 0x723
 801090a:	4928      	ldr	r1, [pc, #160]	; (80109ac <lwip_netconn_do_write+0x104>)
 801090c:	4828      	ldr	r0, [pc, #160]	; (80109b0 <lwip_netconn_do_write+0x108>)
 801090e:	f00e ffcd 	bl	801f8ac <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	695b      	ldr	r3, [r3, #20]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d106      	bne.n	8010928 <lwip_netconn_do_write+0x80>
 801091a:	4b23      	ldr	r3, [pc, #140]	; (80109a8 <lwip_netconn_do_write+0x100>)
 801091c:	f240 7224 	movw	r2, #1828	; 0x724
 8010920:	4924      	ldr	r1, [pc, #144]	; (80109b4 <lwip_netconn_do_write+0x10c>)
 8010922:	4823      	ldr	r0, [pc, #140]	; (80109b0 <lwip_netconn_do_write+0x108>)
 8010924:	f00e ffc2 	bl	801f8ac <iprintf>
        msg->conn->current_msg = msg;
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68ba      	ldr	r2, [r7, #8]
 801092e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	2100      	movs	r1, #0
 8010936:	4618      	mov	r0, r3
 8010938:	f7ff fdea 	bl	8010510 <lwip_netconn_do_writemore>
 801093c:	4603      	mov	r3, r0
 801093e:	2b00      	cmp	r3, #0
 8010940:	d02e      	beq.n	80109a0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	785b      	ldrb	r3, [r3, #1]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d006      	beq.n	801095a <lwip_netconn_do_write+0xb2>
 801094c:	4b16      	ldr	r3, [pc, #88]	; (80109a8 <lwip_netconn_do_write+0x100>)
 801094e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010952:	4919      	ldr	r1, [pc, #100]	; (80109b8 <lwip_netconn_do_write+0x110>)
 8010954:	4816      	ldr	r0, [pc, #88]	; (80109b0 <lwip_netconn_do_write+0x108>)
 8010956:	f00e ffa9 	bl	801f8ac <iprintf>
          UNLOCK_TCPIP_CORE();
 801095a:	4818      	ldr	r0, [pc, #96]	; (80109bc <lwip_netconn_do_write+0x114>)
 801095c:	f00d fde7 	bl	801e52e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	330c      	adds	r3, #12
 8010966:	2100      	movs	r1, #0
 8010968:	4618      	mov	r0, r3
 801096a:	f00d fd3e 	bl	801e3ea <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801096e:	4813      	ldr	r0, [pc, #76]	; (80109bc <lwip_netconn_do_write+0x114>)
 8010970:	f00d fdce 	bl	801e510 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	785b      	ldrb	r3, [r3, #1]
 801097a:	2b01      	cmp	r3, #1
 801097c:	d110      	bne.n	80109a0 <lwip_netconn_do_write+0xf8>
 801097e:	4b0a      	ldr	r3, [pc, #40]	; (80109a8 <lwip_netconn_do_write+0x100>)
 8010980:	f240 722c 	movw	r2, #1836	; 0x72c
 8010984:	490c      	ldr	r1, [pc, #48]	; (80109b8 <lwip_netconn_do_write+0x110>)
 8010986:	480a      	ldr	r0, [pc, #40]	; (80109b0 <lwip_netconn_do_write+0x108>)
 8010988:	f00e ff90 	bl	801f8ac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 801098c:	e008      	b.n	80109a0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801098e:	23f5      	movs	r3, #245	; 0xf5
 8010990:	73fb      	strb	r3, [r7, #15]
 8010992:	e001      	b.n	8010998 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010994:	23fa      	movs	r3, #250	; 0xfa
 8010996:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	7bfa      	ldrb	r2, [r7, #15]
 801099c:	711a      	strb	r2, [r3, #4]
 801099e:	e000      	b.n	80109a2 <lwip_netconn_do_write+0xfa>
        return;
 80109a0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80109a2:	3710      	adds	r7, #16
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	08021864 	.word	0x08021864
 80109ac:	08021c08 	.word	0x08021c08
 80109b0:	080218a8 	.word	0x080218a8
 80109b4:	08021d90 	.word	0x08021d90
 80109b8:	08021c24 	.word	0x08021c24
 80109bc:	2000ca54 	.word	0x2000ca54

080109c0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	785b      	ldrb	r3, [r3, #1]
 80109d2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	685b      	ldr	r3, [r3, #4]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d069      	beq.n	8010ab2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	781b      	ldrb	r3, [r3, #0]
 80109e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80109e8:	2b10      	cmp	r3, #16
 80109ea:	d162      	bne.n	8010ab2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80109f0:	2b03      	cmp	r3, #3
 80109f2:	d002      	beq.n	80109fa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80109f4:	7afb      	ldrb	r3, [r7, #11]
 80109f6:	2b02      	cmp	r3, #2
 80109f8:	d05b      	beq.n	8010ab2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80109fa:	7afb      	ldrb	r3, [r7, #11]
 80109fc:	2b03      	cmp	r3, #3
 80109fe:	d103      	bne.n	8010a08 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	22f5      	movs	r2, #245	; 0xf5
 8010a04:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010a06:	e059      	b.n	8010abc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010a08:	7afb      	ldrb	r3, [r7, #11]
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	d103      	bne.n	8010a16 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	22fb      	movs	r2, #251	; 0xfb
 8010a12:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010a14:	e052      	b.n	8010abc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	7a1b      	ldrb	r3, [r3, #8]
 8010a1a:	f003 0301 	and.w	r3, r3, #1
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d004      	beq.n	8010a2c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7ff f99e 	bl	800fd68 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	6a1b      	ldr	r3, [r3, #32]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d006      	beq.n	8010a44 <lwip_netconn_do_close+0x84>
 8010a36:	4b23      	ldr	r3, [pc, #140]	; (8010ac4 <lwip_netconn_do_close+0x104>)
 8010a38:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8010a3c:	4922      	ldr	r1, [pc, #136]	; (8010ac8 <lwip_netconn_do_close+0x108>)
 8010a3e:	4823      	ldr	r0, [pc, #140]	; (8010acc <lwip_netconn_do_close+0x10c>)
 8010a40:	f00e ff34 	bl	801f8ac <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2204      	movs	r2, #4
 8010a4a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2100      	movs	r1, #0
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7ff fa02 	bl	800fe64 <lwip_netconn_do_close_internal>
 8010a60:	4603      	mov	r3, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d029      	beq.n	8010aba <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	785b      	ldrb	r3, [r3, #1]
 8010a6c:	2b04      	cmp	r3, #4
 8010a6e:	d006      	beq.n	8010a7e <lwip_netconn_do_close+0xbe>
 8010a70:	4b14      	ldr	r3, [pc, #80]	; (8010ac4 <lwip_netconn_do_close+0x104>)
 8010a72:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8010a76:	4916      	ldr	r1, [pc, #88]	; (8010ad0 <lwip_netconn_do_close+0x110>)
 8010a78:	4814      	ldr	r0, [pc, #80]	; (8010acc <lwip_netconn_do_close+0x10c>)
 8010a7a:	f00e ff17 	bl	801f8ac <iprintf>
        UNLOCK_TCPIP_CORE();
 8010a7e:	4815      	ldr	r0, [pc, #84]	; (8010ad4 <lwip_netconn_do_close+0x114>)
 8010a80:	f00d fd55 	bl	801e52e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	330c      	adds	r3, #12
 8010a8a:	2100      	movs	r1, #0
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f00d fcac 	bl	801e3ea <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010a92:	4810      	ldr	r0, [pc, #64]	; (8010ad4 <lwip_netconn_do_close+0x114>)
 8010a94:	f00d fd3c 	bl	801e510 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	785b      	ldrb	r3, [r3, #1]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d00b      	beq.n	8010aba <lwip_netconn_do_close+0xfa>
 8010aa2:	4b08      	ldr	r3, [pc, #32]	; (8010ac4 <lwip_netconn_do_close+0x104>)
 8010aa4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8010aa8:	4909      	ldr	r1, [pc, #36]	; (8010ad0 <lwip_netconn_do_close+0x110>)
 8010aaa:	4808      	ldr	r0, [pc, #32]	; (8010acc <lwip_netconn_do_close+0x10c>)
 8010aac:	f00e fefe 	bl	801f8ac <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010ab0:	e003      	b.n	8010aba <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	22f5      	movs	r2, #245	; 0xf5
 8010ab6:	711a      	strb	r2, [r3, #4]
 8010ab8:	e000      	b.n	8010abc <lwip_netconn_do_close+0xfc>
      return;
 8010aba:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	08021864 	.word	0x08021864
 8010ac8:	08021c08 	.word	0x08021c08
 8010acc:	080218a8 	.word	0x080218a8
 8010ad0:	08021c24 	.word	0x08021c24
 8010ad4:	2000ca54 	.word	0x2000ca54

08010ad8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d013      	beq.n	8010b0e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00b      	beq.n	8010b06 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f002 f86a 	bl	8012bcc <pbuf_free>
      buf->p = buf->ptr = NULL;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	605a      	str	r2, [r3, #4]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	685a      	ldr	r2, [r3, #4]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8010b06:	6879      	ldr	r1, [r7, #4]
 8010b08:	2006      	movs	r0, #6
 8010b0a:	f001 f977 	bl	8011dfc <memp_free>
  }
}
 8010b0e:	bf00      	nop
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
	...

08010b18 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	db02      	blt.n	8010b30 <tryget_socket_unconn_nouse+0x18>
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	2b03      	cmp	r3, #3
 8010b2e:	dd01      	ble.n	8010b34 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8010b30:	2300      	movs	r3, #0
 8010b32:	e003      	b.n	8010b3c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	011b      	lsls	r3, r3, #4
 8010b38:	4a03      	ldr	r2, [pc, #12]	; (8010b48 <tryget_socket_unconn_nouse+0x30>)
 8010b3a:	4413      	add	r3, r2
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3714      	adds	r7, #20
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr
 8010b48:	2000ca08 	.word	0x2000ca08

08010b4c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7ff ffdf 	bl	8010b18 <tryget_socket_unconn_nouse>
 8010b5a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b084      	sub	sp, #16
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f7ff ffec 	bl	8010b4c <tryget_socket_unconn>
 8010b74:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d005      	beq.n	8010b88 <tryget_socket+0x22>
    if (sock->conn) {
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d001      	beq.n	8010b88 <tryget_socket+0x22>
      return sock;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	e000      	b.n	8010b8a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8010b88:	2300      	movs	r3, #0
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
	...

08010b94 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b084      	sub	sp, #16
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f7ff ffe2 	bl	8010b66 <tryget_socket>
 8010ba2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d104      	bne.n	8010bb4 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 8010baa:	4b05      	ldr	r3, [pc, #20]	; (8010bc0 <get_socket+0x2c>)
 8010bac:	2209      	movs	r2, #9
 8010bae:	601a      	str	r2, [r3, #0]
    return NULL;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	e000      	b.n	8010bb6 <get_socket+0x22>
  }
  return sock;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	20010948 	.word	0x20010948

08010bc4 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2b20      	cmp	r3, #32
 8010bd0:	d009      	beq.n	8010be6 <lwip_sockopt_to_ipopt+0x22>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2b20      	cmp	r3, #32
 8010bd6:	dc0c      	bgt.n	8010bf2 <lwip_sockopt_to_ipopt+0x2e>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2b04      	cmp	r3, #4
 8010bdc:	d007      	beq.n	8010bee <lwip_sockopt_to_ipopt+0x2a>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b08      	cmp	r3, #8
 8010be2:	d002      	beq.n	8010bea <lwip_sockopt_to_ipopt+0x26>
 8010be4:	e005      	b.n	8010bf2 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 8010be6:	2320      	movs	r3, #32
 8010be8:	e00b      	b.n	8010c02 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 8010bea:	2308      	movs	r3, #8
 8010bec:	e009      	b.n	8010c02 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 8010bee:	2304      	movs	r3, #4
 8010bf0:	e007      	b.n	8010c02 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 8010bf2:	4b06      	ldr	r3, [pc, #24]	; (8010c0c <lwip_sockopt_to_ipopt+0x48>)
 8010bf4:	f640 3239 	movw	r2, #2873	; 0xb39
 8010bf8:	4905      	ldr	r1, [pc, #20]	; (8010c10 <lwip_sockopt_to_ipopt+0x4c>)
 8010bfa:	4806      	ldr	r0, [pc, #24]	; (8010c14 <lwip_sockopt_to_ipopt+0x50>)
 8010bfc:	f00e fe56 	bl	801f8ac <iprintf>
    return 0;
 8010c00:	2300      	movs	r3, #0
  }
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	08021dbc 	.word	0x08021dbc
 8010c10:	08022148 	.word	0x08022148
 8010c14:	08021e10 	.word	0x08021e10

08010c18 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b08a      	sub	sp, #40	; 0x28
 8010c1c:	af02      	add	r7, sp, #8
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	603b      	str	r3, [r7, #0]
  int err = 0;
 8010c26:	2300      	movs	r3, #0
 8010c28:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f7ff ffb2 	bl	8010b94 <get_socket>
 8010c30:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 8010c32:	69bb      	ldr	r3, [r7, #24]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d102      	bne.n	8010c3e <lwip_setsockopt+0x26>
    return -1;
 8010c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c3c:	e02b      	b.n	8010c96 <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d10a      	bne.n	8010c5a <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 8010c44:	230e      	movs	r3, #14
 8010c46:	613b      	str	r3, [r7, #16]
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d002      	beq.n	8010c54 <lwip_setsockopt+0x3c>
 8010c4e:	4a14      	ldr	r2, [pc, #80]	; (8010ca0 <lwip_setsockopt+0x88>)
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c58:	e01d      	b.n	8010c96 <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 8010c5a:	4812      	ldr	r0, [pc, #72]	; (8010ca4 <lwip_setsockopt+0x8c>)
 8010c5c:	f00d fc58 	bl	801e510 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 8010c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	68b9      	ldr	r1, [r7, #8]
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f000 f81c 	bl	8010ca8 <lwip_setsockopt_impl>
 8010c70:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 8010c72:	480c      	ldr	r0, [pc, #48]	; (8010ca4 <lwip_setsockopt+0x8c>)
 8010c74:	f00d fc5b 	bl	801e52e <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	617b      	str	r3, [r7, #20]
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d002      	beq.n	8010c88 <lwip_setsockopt+0x70>
 8010c82:	4a07      	ldr	r2, [pc, #28]	; (8010ca0 <lwip_setsockopt+0x88>)
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d002      	beq.n	8010c94 <lwip_setsockopt+0x7c>
 8010c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c92:	e000      	b.n	8010c96 <lwip_setsockopt+0x7e>
 8010c94:	2300      	movs	r3, #0
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3720      	adds	r7, #32
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	20010948 	.word	0x20010948
 8010ca4:	2000ca54 	.word	0x2000ca54

08010ca8 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b088      	sub	sp, #32
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60f8      	str	r0, [r7, #12]
 8010cb0:	60b9      	str	r1, [r7, #8]
 8010cb2:	607a      	str	r2, [r7, #4]
 8010cb4:	603b      	str	r3, [r7, #0]
  int err = 0;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 8010cba:	68f8      	ldr	r0, [r7, #12]
 8010cbc:	f7ff ff53 	bl	8010b66 <tryget_socket>
 8010cc0:	6178      	str	r0, [r7, #20]
  if (!sock) {
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d101      	bne.n	8010ccc <lwip_setsockopt_impl+0x24>
    return EBADF;
 8010cc8:	2309      	movs	r3, #9
 8010cca:	e187      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d015      	beq.n	8010d02 <lwip_setsockopt_impl+0x5a>
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cdc:	f280 817a 	bge.w	8010fd4 <lwip_setsockopt_impl+0x32c>
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	2bff      	cmp	r3, #255	; 0xff
 8010ce4:	f000 8172 	beq.w	8010fcc <lwip_setsockopt_impl+0x324>
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	2bff      	cmp	r3, #255	; 0xff
 8010cec:	f300 8172 	bgt.w	8010fd4 <lwip_setsockopt_impl+0x32c>
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f000 80e0 	beq.w	8010eb8 <lwip_setsockopt_impl+0x210>
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	2b06      	cmp	r3, #6
 8010cfc:	f000 8116 	beq.w	8010f2c <lwip_setsockopt_impl+0x284>
 8010d00:	e168      	b.n	8010fd4 <lwip_setsockopt_impl+0x32c>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f241 020b 	movw	r2, #4107	; 0x100b
 8010d08:	4293      	cmp	r3, r2
 8010d0a:	f000 8091 	beq.w	8010e30 <lwip_setsockopt_impl+0x188>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f241 020b 	movw	r2, #4107	; 0x100b
 8010d14:	4293      	cmp	r3, r2
 8010d16:	f300 80cb 	bgt.w	8010eb0 <lwip_setsockopt_impl+0x208>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f241 020a 	movw	r2, #4106	; 0x100a
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d050      	beq.n	8010dc6 <lwip_setsockopt_impl+0x11e>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f241 020a 	movw	r2, #4106	; 0x100a
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	f300 80c0 	bgt.w	8010eb0 <lwip_setsockopt_impl+0x208>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2b08      	cmp	r3, #8
 8010d34:	d003      	beq.n	8010d3e <lwip_setsockopt_impl+0x96>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2b20      	cmp	r3, #32
 8010d3a:	f040 80b9 	bne.w	8010eb0 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2b20      	cmp	r3, #32
 8010d42:	d108      	bne.n	8010d56 <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 8010d4e:	2b20      	cmp	r3, #32
 8010d50:	d001      	beq.n	8010d56 <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 8010d52:	235c      	movs	r3, #92	; 0x5c
 8010d54:	e142      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7ff ff34 	bl	8010bc4 <lwip_sockopt_to_ipopt>
 8010d5c:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8010d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d60:	2b03      	cmp	r3, #3
 8010d62:	d801      	bhi.n	8010d68 <lwip_setsockopt_impl+0xc0>
 8010d64:	2316      	movs	r3, #22
 8010d66:	e139      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d004      	beq.n	8010d7a <lwip_setsockopt_impl+0xd2>
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d101      	bne.n	8010d7e <lwip_setsockopt_impl+0xd6>
 8010d7a:	2316      	movs	r3, #22
 8010d7c:	e12e      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
          if (*(const int *)optval) {
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00e      	beq.n	8010da4 <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	7a5b      	ldrb	r3, [r3, #9]
 8010d8e:	b25a      	sxtb	r2, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	b25b      	sxtb	r3, r3
 8010d94:	4313      	orrs	r3, r2
 8010d96:	b25a      	sxtb	r2, r3
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	b2d2      	uxtb	r2, r2
 8010da0:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 8010da2:	e088      	b.n	8010eb6 <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	7a5b      	ldrb	r3, [r3, #9]
 8010dac:	b25a      	sxtb	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	b25b      	sxtb	r3, r3
 8010db2:	43db      	mvns	r3, r3
 8010db4:	b25b      	sxtb	r3, r3
 8010db6:	4013      	ands	r3, r2
 8010db8:	b25a      	sxtb	r2, r3
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	b2d2      	uxtb	r2, r2
 8010dc2:	725a      	strb	r2, [r3, #9]
          break;
 8010dc4:	e077      	b.n	8010eb6 <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 8010dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc8:	2b03      	cmp	r3, #3
 8010dca:	d801      	bhi.n	8010dd0 <lwip_setsockopt_impl+0x128>
 8010dcc:	2316      	movs	r3, #22
 8010dce:	e105      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d004      	beq.n	8010de2 <lwip_setsockopt_impl+0x13a>
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d101      	bne.n	8010de6 <lwip_setsockopt_impl+0x13e>
 8010de2:	2316      	movs	r3, #22
 8010de4:	e0fa      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010df0:	2b20      	cmp	r3, #32
 8010df2:	d001      	beq.n	8010df8 <lwip_setsockopt_impl+0x150>
 8010df4:	235c      	movs	r3, #92	; 0x5c
 8010df6:	e0f1      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d00b      	beq.n	8010e18 <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	7c1a      	ldrb	r2, [r3, #16]
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	f042 0201 	orr.w	r2, r2, #1
 8010e12:	b2d2      	uxtb	r2, r2
 8010e14:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 8010e16:	e04e      	b.n	8010eb6 <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	7c1a      	ldrb	r2, [r3, #16]
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	f022 0201 	bic.w	r2, r2, #1
 8010e2a:	b2d2      	uxtb	r2, r2
 8010e2c:	741a      	strb	r2, [r3, #16]
          break;
 8010e2e:	e042      	b.n	8010eb6 <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 8010e30:	2300      	movs	r3, #0
 8010e32:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 8010e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e36:	2b05      	cmp	r3, #5
 8010e38:	d801      	bhi.n	8010e3e <lwip_setsockopt_impl+0x196>
 8010e3a:	2316      	movs	r3, #22
 8010e3c:	e0ce      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
 8010e3e:	697b      	ldr	r3, [r7, #20]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d101      	bne.n	8010e4a <lwip_setsockopt_impl+0x1a2>
 8010e46:	2316      	movs	r3, #22
 8010e48:	e0c8      	b.n	8010fdc <lwip_setsockopt_impl+0x334>

          iface = (const struct ifreq *)optval;
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d009      	beq.n	8010e6a <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f001 fb17 	bl	801248c <netif_find>
 8010e5e:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 8010e60:	69bb      	ldr	r3, [r7, #24]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d101      	bne.n	8010e6a <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 8010e66:	2313      	movs	r3, #19
 8010e68:	e0b8      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e74:	2b10      	cmp	r3, #16
 8010e76:	d002      	beq.n	8010e7e <lwip_setsockopt_impl+0x1d6>
 8010e78:	2b20      	cmp	r3, #32
 8010e7a:	d008      	beq.n	8010e8e <lwip_setsockopt_impl+0x1e6>
 8010e7c:	e00f      	b.n	8010e9e <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	69b9      	ldr	r1, [r7, #24]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f002 fd44 	bl	8013914 <tcp_bind_netif>
              break;
 8010e8c:	e00f      	b.n	8010eae <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	69b9      	ldr	r1, [r7, #24]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f008 ff00 	bl	8019c9c <udp_bind_netif>
              break;
 8010e9c:	e007      	b.n	8010eae <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 8010e9e:	4b51      	ldr	r3, [pc, #324]	; (8010fe4 <lwip_setsockopt_impl+0x33c>)
 8010ea0:	f640 527d 	movw	r2, #3453	; 0xd7d
 8010ea4:	4950      	ldr	r1, [pc, #320]	; (8010fe8 <lwip_setsockopt_impl+0x340>)
 8010ea6:	4851      	ldr	r0, [pc, #324]	; (8010fec <lwip_setsockopt_impl+0x344>)
 8010ea8:	f00e fd00 	bl	801f8ac <iprintf>
              break;
 8010eac:	bf00      	nop
          }
        }
        break;
 8010eae:	e002      	b.n	8010eb6 <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010eb0:	235c      	movs	r3, #92	; 0x5c
 8010eb2:	61fb      	str	r3, [r7, #28]
          break;
 8010eb4:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010eb6:	e090      	b.n	8010fda <lwip_setsockopt_impl+0x332>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2b01      	cmp	r3, #1
 8010ebc:	d01a      	beq.n	8010ef4 <lwip_setsockopt_impl+0x24c>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2b02      	cmp	r3, #2
 8010ec2:	d12f      	bne.n	8010f24 <lwip_setsockopt_impl+0x27c>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8010ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec6:	2b03      	cmp	r3, #3
 8010ec8:	d801      	bhi.n	8010ece <lwip_setsockopt_impl+0x226>
 8010eca:	2316      	movs	r3, #22
 8010ecc:	e086      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d004      	beq.n	8010ee0 <lwip_setsockopt_impl+0x238>
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d101      	bne.n	8010ee4 <lwip_setsockopt_impl+0x23c>
 8010ee0:	2316      	movs	r3, #22
 8010ee2:	e07b      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	681a      	ldr	r2, [r3, #0]
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	b2d2      	uxtb	r2, r2
 8010ef0:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 8010ef2:	e01a      	b.n	8010f2a <lwip_setsockopt_impl+0x282>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8010ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef6:	2b03      	cmp	r3, #3
 8010ef8:	d801      	bhi.n	8010efe <lwip_setsockopt_impl+0x256>
 8010efa:	2316      	movs	r3, #22
 8010efc:	e06e      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d004      	beq.n	8010f10 <lwip_setsockopt_impl+0x268>
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d101      	bne.n	8010f14 <lwip_setsockopt_impl+0x26c>
 8010f10:	2316      	movs	r3, #22
 8010f12:	e063      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	b2d2      	uxtb	r2, r2
 8010f20:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 8010f22:	e002      	b.n	8010f2a <lwip_setsockopt_impl+0x282>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010f24:	235c      	movs	r3, #92	; 0x5c
 8010f26:	61fb      	str	r3, [r7, #28]
          break;
 8010f28:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010f2a:	e056      	b.n	8010fda <lwip_setsockopt_impl+0x332>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 8010f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2e:	2b03      	cmp	r3, #3
 8010f30:	d801      	bhi.n	8010f36 <lwip_setsockopt_impl+0x28e>
 8010f32:	2316      	movs	r3, #22
 8010f34:	e052      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d004      	beq.n	8010f48 <lwip_setsockopt_impl+0x2a0>
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d101      	bne.n	8010f4c <lwip_setsockopt_impl+0x2a4>
 8010f48:	2316      	movs	r3, #22
 8010f4a:	e047      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f56:	2b10      	cmp	r3, #16
 8010f58:	d001      	beq.n	8010f5e <lwip_setsockopt_impl+0x2b6>
 8010f5a:	235c      	movs	r3, #92	; 0x5c
 8010f5c:	e03e      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	7d1b      	ldrb	r3, [r3, #20]
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d101      	bne.n	8010f6e <lwip_setsockopt_impl+0x2c6>
        done_socket(sock);
        return EINVAL;
 8010f6a:	2316      	movs	r3, #22
 8010f6c:	e036      	b.n	8010fdc <lwip_setsockopt_impl+0x334>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d003      	beq.n	8010f7c <lwip_setsockopt_impl+0x2d4>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b02      	cmp	r3, #2
 8010f78:	d01c      	beq.n	8010fb4 <lwip_setsockopt_impl+0x30c>
 8010f7a:	e023      	b.n	8010fc4 <lwip_setsockopt_impl+0x31c>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d00b      	beq.n	8010f9c <lwip_setsockopt_impl+0x2f4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	8b5a      	ldrh	r2, [r3, #26]
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f96:	b292      	uxth	r2, r2
 8010f98:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 8010f9a:	e016      	b.n	8010fca <lwip_setsockopt_impl+0x322>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	8b5a      	ldrh	r2, [r3, #26]
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010fae:	b292      	uxth	r2, r2
 8010fb0:	835a      	strh	r2, [r3, #26]
          break;
 8010fb2:	e00a      	b.n	8010fca <lwip_setsockopt_impl+0x322>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	681a      	ldr	r2, [r3, #0]
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 8010fc2:	e002      	b.n	8010fca <lwip_setsockopt_impl+0x322>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010fc4:	235c      	movs	r3, #92	; 0x5c
 8010fc6:	61fb      	str	r3, [r7, #28]
          break;
 8010fc8:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010fca:	e006      	b.n	8010fda <lwip_setsockopt_impl+0x332>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010fcc:	235c      	movs	r3, #92	; 0x5c
 8010fce:	61fb      	str	r3, [r7, #28]
          break;
 8010fd0:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010fd2:	e002      	b.n	8010fda <lwip_setsockopt_impl+0x332>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 8010fd4:	235c      	movs	r3, #92	; 0x5c
 8010fd6:	61fb      	str	r3, [r7, #28]
      break;
 8010fd8:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 8010fda:	69fb      	ldr	r3, [r7, #28]
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3720      	adds	r7, #32
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	08021dbc 	.word	0x08021dbc
 8010fe8:	08022160 	.word	0x08022160
 8010fec:	08021e10 	.word	0x08021e10

08010ff0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b084      	sub	sp, #16
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010ffa:	f008 fa73 	bl	80194e4 <sys_timeouts_sleeptime>
 8010ffe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011006:	d10b      	bne.n	8011020 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011008:	4813      	ldr	r0, [pc, #76]	; (8011058 <tcpip_timeouts_mbox_fetch+0x68>)
 801100a:	f00d fa90 	bl	801e52e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801100e:	2200      	movs	r2, #0
 8011010:	6839      	ldr	r1, [r7, #0]
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f00d f948 	bl	801e2a8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011018:	480f      	ldr	r0, [pc, #60]	; (8011058 <tcpip_timeouts_mbox_fetch+0x68>)
 801101a:	f00d fa79 	bl	801e510 <sys_mutex_lock>
    return;
 801101e:	e018      	b.n	8011052 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d102      	bne.n	801102c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011026:	f008 fa23 	bl	8019470 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801102a:	e7e6      	b.n	8010ffa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801102c:	480a      	ldr	r0, [pc, #40]	; (8011058 <tcpip_timeouts_mbox_fetch+0x68>)
 801102e:	f00d fa7e 	bl	801e52e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	6839      	ldr	r1, [r7, #0]
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f00d f936 	bl	801e2a8 <sys_arch_mbox_fetch>
 801103c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801103e:	4806      	ldr	r0, [pc, #24]	; (8011058 <tcpip_timeouts_mbox_fetch+0x68>)
 8011040:	f00d fa66 	bl	801e510 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801104a:	d102      	bne.n	8011052 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801104c:	f008 fa10 	bl	8019470 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011050:	e7d3      	b.n	8010ffa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	2000ca54 	.word	0x2000ca54

0801105c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011064:	4810      	ldr	r0, [pc, #64]	; (80110a8 <tcpip_thread+0x4c>)
 8011066:	f00d fa53 	bl	801e510 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801106a:	4b10      	ldr	r3, [pc, #64]	; (80110ac <tcpip_thread+0x50>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d005      	beq.n	801107e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011072:	4b0e      	ldr	r3, [pc, #56]	; (80110ac <tcpip_thread+0x50>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	4a0e      	ldr	r2, [pc, #56]	; (80110b0 <tcpip_thread+0x54>)
 8011078:	6812      	ldr	r2, [r2, #0]
 801107a:	4610      	mov	r0, r2
 801107c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801107e:	f107 030c 	add.w	r3, r7, #12
 8011082:	4619      	mov	r1, r3
 8011084:	480b      	ldr	r0, [pc, #44]	; (80110b4 <tcpip_thread+0x58>)
 8011086:	f7ff ffb3 	bl	8010ff0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d106      	bne.n	801109e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011090:	4b09      	ldr	r3, [pc, #36]	; (80110b8 <tcpip_thread+0x5c>)
 8011092:	2291      	movs	r2, #145	; 0x91
 8011094:	4909      	ldr	r1, [pc, #36]	; (80110bc <tcpip_thread+0x60>)
 8011096:	480a      	ldr	r0, [pc, #40]	; (80110c0 <tcpip_thread+0x64>)
 8011098:	f00e fc08 	bl	801f8ac <iprintf>
      continue;
 801109c:	e003      	b.n	80110a6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	4618      	mov	r0, r3
 80110a2:	f000 f80f 	bl	80110c4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80110a6:	e7ea      	b.n	801107e <tcpip_thread+0x22>
 80110a8:	2000ca54 	.word	0x2000ca54
 80110ac:	2000ca48 	.word	0x2000ca48
 80110b0:	2000ca4c 	.word	0x2000ca4c
 80110b4:	2000ca50 	.word	0x2000ca50
 80110b8:	0802218c 	.word	0x0802218c
 80110bc:	080221bc 	.word	0x080221bc
 80110c0:	080221dc 	.word	0x080221dc

080110c4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	2b02      	cmp	r3, #2
 80110d2:	d026      	beq.n	8011122 <tcpip_thread_handle_msg+0x5e>
 80110d4:	2b02      	cmp	r3, #2
 80110d6:	dc2b      	bgt.n	8011130 <tcpip_thread_handle_msg+0x6c>
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d002      	beq.n	80110e2 <tcpip_thread_handle_msg+0x1e>
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d015      	beq.n	801110c <tcpip_thread_handle_msg+0x48>
 80110e0:	e026      	b.n	8011130 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	687a      	ldr	r2, [r7, #4]
 80110e8:	6850      	ldr	r0, [r2, #4]
 80110ea:	687a      	ldr	r2, [r7, #4]
 80110ec:	6892      	ldr	r2, [r2, #8]
 80110ee:	4611      	mov	r1, r2
 80110f0:	4798      	blx	r3
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d004      	beq.n	8011102 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	4618      	mov	r0, r3
 80110fe:	f001 fd65 	bl	8012bcc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011102:	6879      	ldr	r1, [r7, #4]
 8011104:	2009      	movs	r0, #9
 8011106:	f000 fe79 	bl	8011dfc <memp_free>
      break;
 801110a:	e018      	b.n	801113e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	6892      	ldr	r2, [r2, #8]
 8011114:	4610      	mov	r0, r2
 8011116:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011118:	6879      	ldr	r1, [r7, #4]
 801111a:	2008      	movs	r0, #8
 801111c:	f000 fe6e 	bl	8011dfc <memp_free>
      break;
 8011120:	e00d      	b.n	801113e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	6892      	ldr	r2, [r2, #8]
 801112a:	4610      	mov	r0, r2
 801112c:	4798      	blx	r3
      break;
 801112e:	e006      	b.n	801113e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011130:	4b05      	ldr	r3, [pc, #20]	; (8011148 <tcpip_thread_handle_msg+0x84>)
 8011132:	22cf      	movs	r2, #207	; 0xcf
 8011134:	4905      	ldr	r1, [pc, #20]	; (801114c <tcpip_thread_handle_msg+0x88>)
 8011136:	4806      	ldr	r0, [pc, #24]	; (8011150 <tcpip_thread_handle_msg+0x8c>)
 8011138:	f00e fbb8 	bl	801f8ac <iprintf>
      break;
 801113c:	bf00      	nop
  }
}
 801113e:	bf00      	nop
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}
 8011146:	bf00      	nop
 8011148:	0802218c 	.word	0x0802218c
 801114c:	080221bc 	.word	0x080221bc
 8011150:	080221dc 	.word	0x080221dc

08011154 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b086      	sub	sp, #24
 8011158:	af00      	add	r7, sp, #0
 801115a:	60f8      	str	r0, [r7, #12]
 801115c:	60b9      	str	r1, [r7, #8]
 801115e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011160:	481a      	ldr	r0, [pc, #104]	; (80111cc <tcpip_inpkt+0x78>)
 8011162:	f00d f8fc 	bl	801e35e <sys_mbox_valid>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d105      	bne.n	8011178 <tcpip_inpkt+0x24>
 801116c:	4b18      	ldr	r3, [pc, #96]	; (80111d0 <tcpip_inpkt+0x7c>)
 801116e:	22fc      	movs	r2, #252	; 0xfc
 8011170:	4918      	ldr	r1, [pc, #96]	; (80111d4 <tcpip_inpkt+0x80>)
 8011172:	4819      	ldr	r0, [pc, #100]	; (80111d8 <tcpip_inpkt+0x84>)
 8011174:	f00e fb9a 	bl	801f8ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011178:	2009      	movs	r0, #9
 801117a:	f000 fdc9 	bl	8011d10 <memp_malloc>
 801117e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d102      	bne.n	801118c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801118a:	e01a      	b.n	80111c2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	2200      	movs	r2, #0
 8011190:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	68fa      	ldr	r2, [r7, #12]
 8011196:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	68ba      	ldr	r2, [r7, #8]
 801119c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80111a4:	6979      	ldr	r1, [r7, #20]
 80111a6:	4809      	ldr	r0, [pc, #36]	; (80111cc <tcpip_inpkt+0x78>)
 80111a8:	f00d f864 	bl	801e274 <sys_mbox_trypost>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d006      	beq.n	80111c0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80111b2:	6979      	ldr	r1, [r7, #20]
 80111b4:	2009      	movs	r0, #9
 80111b6:	f000 fe21 	bl	8011dfc <memp_free>
    return ERR_MEM;
 80111ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111be:	e000      	b.n	80111c2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80111c0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3718      	adds	r7, #24
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	2000ca50 	.word	0x2000ca50
 80111d0:	0802218c 	.word	0x0802218c
 80111d4:	08022204 	.word	0x08022204
 80111d8:	080221dc 	.word	0x080221dc

080111dc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80111ec:	f003 0318 	and.w	r3, r3, #24
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d006      	beq.n	8011202 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80111f4:	4a08      	ldr	r2, [pc, #32]	; (8011218 <tcpip_input+0x3c>)
 80111f6:	6839      	ldr	r1, [r7, #0]
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f7ff ffab 	bl	8011154 <tcpip_inpkt>
 80111fe:	4603      	mov	r3, r0
 8011200:	e005      	b.n	801120e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011202:	4a06      	ldr	r2, [pc, #24]	; (801121c <tcpip_input+0x40>)
 8011204:	6839      	ldr	r1, [r7, #0]
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f7ff ffa4 	bl	8011154 <tcpip_inpkt>
 801120c:	4603      	mov	r3, r0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	0801e061 	.word	0x0801e061
 801121c:	0801cf2d 	.word	0x0801cf2d

08011220 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801122a:	4819      	ldr	r0, [pc, #100]	; (8011290 <tcpip_try_callback+0x70>)
 801122c:	f00d f897 	bl	801e35e <sys_mbox_valid>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d106      	bne.n	8011244 <tcpip_try_callback+0x24>
 8011236:	4b17      	ldr	r3, [pc, #92]	; (8011294 <tcpip_try_callback+0x74>)
 8011238:	f240 125d 	movw	r2, #349	; 0x15d
 801123c:	4916      	ldr	r1, [pc, #88]	; (8011298 <tcpip_try_callback+0x78>)
 801123e:	4817      	ldr	r0, [pc, #92]	; (801129c <tcpip_try_callback+0x7c>)
 8011240:	f00e fb34 	bl	801f8ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011244:	2008      	movs	r0, #8
 8011246:	f000 fd63 	bl	8011d10 <memp_malloc>
 801124a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d102      	bne.n	8011258 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011256:	e017      	b.n	8011288 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2201      	movs	r2, #1
 801125c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	687a      	ldr	r2, [r7, #4]
 8011262:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	683a      	ldr	r2, [r7, #0]
 8011268:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801126a:	68f9      	ldr	r1, [r7, #12]
 801126c:	4808      	ldr	r0, [pc, #32]	; (8011290 <tcpip_try_callback+0x70>)
 801126e:	f00d f801 	bl	801e274 <sys_mbox_trypost>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	d006      	beq.n	8011286 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011278:	68f9      	ldr	r1, [r7, #12]
 801127a:	2008      	movs	r0, #8
 801127c:	f000 fdbe 	bl	8011dfc <memp_free>
    return ERR_MEM;
 8011280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011284:	e000      	b.n	8011288 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011286:	2300      	movs	r3, #0
}
 8011288:	4618      	mov	r0, r3
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	2000ca50 	.word	0x2000ca50
 8011294:	0802218c 	.word	0x0802218c
 8011298:	08022204 	.word	0x08022204
 801129c:	080221dc 	.word	0x080221dc

080112a0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80112ac:	4806      	ldr	r0, [pc, #24]	; (80112c8 <tcpip_send_msg_wait_sem+0x28>)
 80112ae:	f00d f92f 	bl	801e510 <sys_mutex_lock>
  fn(apimsg);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	68b8      	ldr	r0, [r7, #8]
 80112b6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80112b8:	4803      	ldr	r0, [pc, #12]	; (80112c8 <tcpip_send_msg_wait_sem+0x28>)
 80112ba:	f00d f938 	bl	801e52e <sys_mutex_unlock>
  return ERR_OK;
 80112be:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	2000ca54 	.word	0x2000ca54

080112cc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af02      	add	r7, sp, #8
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80112d6:	f000 f871 	bl	80113bc <lwip_init>

  tcpip_init_done = initfunc;
 80112da:	4a17      	ldr	r2, [pc, #92]	; (8011338 <tcpip_init+0x6c>)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80112e0:	4a16      	ldr	r2, [pc, #88]	; (801133c <tcpip_init+0x70>)
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80112e6:	2106      	movs	r1, #6
 80112e8:	4815      	ldr	r0, [pc, #84]	; (8011340 <tcpip_init+0x74>)
 80112ea:	f00c ff8f 	bl	801e20c <sys_mbox_new>
 80112ee:	4603      	mov	r3, r0
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d006      	beq.n	8011302 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80112f4:	4b13      	ldr	r3, [pc, #76]	; (8011344 <tcpip_init+0x78>)
 80112f6:	f240 2261 	movw	r2, #609	; 0x261
 80112fa:	4913      	ldr	r1, [pc, #76]	; (8011348 <tcpip_init+0x7c>)
 80112fc:	4813      	ldr	r0, [pc, #76]	; (801134c <tcpip_init+0x80>)
 80112fe:	f00e fad5 	bl	801f8ac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011302:	4813      	ldr	r0, [pc, #76]	; (8011350 <tcpip_init+0x84>)
 8011304:	f00d f8e8 	bl	801e4d8 <sys_mutex_new>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d006      	beq.n	801131c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801130e:	4b0d      	ldr	r3, [pc, #52]	; (8011344 <tcpip_init+0x78>)
 8011310:	f240 2265 	movw	r2, #613	; 0x265
 8011314:	490f      	ldr	r1, [pc, #60]	; (8011354 <tcpip_init+0x88>)
 8011316:	480d      	ldr	r0, [pc, #52]	; (801134c <tcpip_init+0x80>)
 8011318:	f00e fac8 	bl	801f8ac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801131c:	2300      	movs	r3, #0
 801131e:	9300      	str	r3, [sp, #0]
 8011320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011324:	2200      	movs	r2, #0
 8011326:	490c      	ldr	r1, [pc, #48]	; (8011358 <tcpip_init+0x8c>)
 8011328:	480c      	ldr	r0, [pc, #48]	; (801135c <tcpip_init+0x90>)
 801132a:	f00d f90d 	bl	801e548 <sys_thread_new>
}
 801132e:	bf00      	nop
 8011330:	3708      	adds	r7, #8
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	2000ca48 	.word	0x2000ca48
 801133c:	2000ca4c 	.word	0x2000ca4c
 8011340:	2000ca50 	.word	0x2000ca50
 8011344:	0802218c 	.word	0x0802218c
 8011348:	08022214 	.word	0x08022214
 801134c:	080221dc 	.word	0x080221dc
 8011350:	2000ca54 	.word	0x2000ca54
 8011354:	08022238 	.word	0x08022238
 8011358:	0801105d 	.word	0x0801105d
 801135c:	0802225c 	.word	0x0802225c

08011360 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
 8011366:	4603      	mov	r3, r0
 8011368:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801136a:	88fb      	ldrh	r3, [r7, #6]
 801136c:	021b      	lsls	r3, r3, #8
 801136e:	b21a      	sxth	r2, r3
 8011370:	88fb      	ldrh	r3, [r7, #6]
 8011372:	0a1b      	lsrs	r3, r3, #8
 8011374:	b29b      	uxth	r3, r3
 8011376:	b21b      	sxth	r3, r3
 8011378:	4313      	orrs	r3, r2
 801137a:	b21b      	sxth	r3, r3
 801137c:	b29b      	uxth	r3, r3
}
 801137e:	4618      	mov	r0, r3
 8011380:	370c      	adds	r7, #12
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr

0801138a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801138a:	b480      	push	{r7}
 801138c:	b083      	sub	sp, #12
 801138e:	af00      	add	r7, sp, #0
 8011390:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	061a      	lsls	r2, r3, #24
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	021b      	lsls	r3, r3, #8
 801139a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801139e:	431a      	orrs	r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	0a1b      	lsrs	r3, r3, #8
 80113a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80113a8:	431a      	orrs	r2, r3
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	0e1b      	lsrs	r3, r3, #24
 80113ae:	4313      	orrs	r3, r2
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80113c2:	2300      	movs	r3, #0
 80113c4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80113c6:	f00d f879 	bl	801e4bc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80113ca:	f000 f8d5 	bl	8011578 <mem_init>
  memp_init();
 80113ce:	f000 fc31 	bl	8011c34 <memp_init>
  pbuf_init();
  netif_init();
 80113d2:	f000 fd3d 	bl	8011e50 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80113d6:	f008 f8bd 	bl	8019554 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80113da:	f001 fea1 	bl	8013120 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80113de:	f007 ffff 	bl	80193e0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80113e2:	bf00      	nop
 80113e4:	3708      	adds	r7, #8
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
	...

080113ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	4603      	mov	r3, r0
 80113f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80113f6:	4b05      	ldr	r3, [pc, #20]	; (801140c <ptr_to_mem+0x20>)
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	88fb      	ldrh	r3, [r7, #6]
 80113fc:	4413      	add	r3, r2
}
 80113fe:	4618      	mov	r0, r3
 8011400:	370c      	adds	r7, #12
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr
 801140a:	bf00      	nop
 801140c:	2000d0c4 	.word	0x2000d0c4

08011410 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011410:	b480      	push	{r7}
 8011412:	b083      	sub	sp, #12
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011418:	4b05      	ldr	r3, [pc, #20]	; (8011430 <mem_to_ptr+0x20>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	687a      	ldr	r2, [r7, #4]
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	b29b      	uxth	r3, r3
}
 8011422:	4618      	mov	r0, r3
 8011424:	370c      	adds	r7, #12
 8011426:	46bd      	mov	sp, r7
 8011428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop
 8011430:	2000d0c4 	.word	0x2000d0c4

08011434 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011434:	b590      	push	{r4, r7, lr}
 8011436:	b085      	sub	sp, #20
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801143c:	4b45      	ldr	r3, [pc, #276]	; (8011554 <plug_holes+0x120>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	687a      	ldr	r2, [r7, #4]
 8011442:	429a      	cmp	r2, r3
 8011444:	d206      	bcs.n	8011454 <plug_holes+0x20>
 8011446:	4b44      	ldr	r3, [pc, #272]	; (8011558 <plug_holes+0x124>)
 8011448:	f240 12df 	movw	r2, #479	; 0x1df
 801144c:	4943      	ldr	r1, [pc, #268]	; (801155c <plug_holes+0x128>)
 801144e:	4844      	ldr	r0, [pc, #272]	; (8011560 <plug_holes+0x12c>)
 8011450:	f00e fa2c 	bl	801f8ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011454:	4b43      	ldr	r3, [pc, #268]	; (8011564 <plug_holes+0x130>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	429a      	cmp	r2, r3
 801145c:	d306      	bcc.n	801146c <plug_holes+0x38>
 801145e:	4b3e      	ldr	r3, [pc, #248]	; (8011558 <plug_holes+0x124>)
 8011460:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011464:	4940      	ldr	r1, [pc, #256]	; (8011568 <plug_holes+0x134>)
 8011466:	483e      	ldr	r0, [pc, #248]	; (8011560 <plug_holes+0x12c>)
 8011468:	f00e fa20 	bl	801f8ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	791b      	ldrb	r3, [r3, #4]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d006      	beq.n	8011482 <plug_holes+0x4e>
 8011474:	4b38      	ldr	r3, [pc, #224]	; (8011558 <plug_holes+0x124>)
 8011476:	f240 12e1 	movw	r2, #481	; 0x1e1
 801147a:	493c      	ldr	r1, [pc, #240]	; (801156c <plug_holes+0x138>)
 801147c:	4838      	ldr	r0, [pc, #224]	; (8011560 <plug_holes+0x12c>)
 801147e:	f00e fa15 	bl	801f8ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	881b      	ldrh	r3, [r3, #0]
 8011486:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801148a:	d906      	bls.n	801149a <plug_holes+0x66>
 801148c:	4b32      	ldr	r3, [pc, #200]	; (8011558 <plug_holes+0x124>)
 801148e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8011492:	4937      	ldr	r1, [pc, #220]	; (8011570 <plug_holes+0x13c>)
 8011494:	4832      	ldr	r0, [pc, #200]	; (8011560 <plug_holes+0x12c>)
 8011496:	f00e fa09 	bl	801f8ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	881b      	ldrh	r3, [r3, #0]
 801149e:	4618      	mov	r0, r3
 80114a0:	f7ff ffa4 	bl	80113ec <ptr_to_mem>
 80114a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d024      	beq.n	80114f8 <plug_holes+0xc4>
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	791b      	ldrb	r3, [r3, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d120      	bne.n	80114f8 <plug_holes+0xc4>
 80114b6:	4b2b      	ldr	r3, [pc, #172]	; (8011564 <plug_holes+0x130>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d01b      	beq.n	80114f8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80114c0:	4b2c      	ldr	r3, [pc, #176]	; (8011574 <plug_holes+0x140>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d102      	bne.n	80114d0 <plug_holes+0x9c>
      lfree = mem;
 80114ca:	4a2a      	ldr	r2, [pc, #168]	; (8011574 <plug_holes+0x140>)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	881a      	ldrh	r2, [r3, #0]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80114e0:	d00a      	beq.n	80114f8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	881b      	ldrh	r3, [r3, #0]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7ff ff80 	bl	80113ec <ptr_to_mem>
 80114ec:	4604      	mov	r4, r0
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f7ff ff8e 	bl	8011410 <mem_to_ptr>
 80114f4:	4603      	mov	r3, r0
 80114f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	885b      	ldrh	r3, [r3, #2]
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7ff ff75 	bl	80113ec <ptr_to_mem>
 8011502:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011504:	68ba      	ldr	r2, [r7, #8]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	429a      	cmp	r2, r3
 801150a:	d01f      	beq.n	801154c <plug_holes+0x118>
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	791b      	ldrb	r3, [r3, #4]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d11b      	bne.n	801154c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011514:	4b17      	ldr	r3, [pc, #92]	; (8011574 <plug_holes+0x140>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	687a      	ldr	r2, [r7, #4]
 801151a:	429a      	cmp	r2, r3
 801151c:	d102      	bne.n	8011524 <plug_holes+0xf0>
      lfree = pmem;
 801151e:	4a15      	ldr	r2, [pc, #84]	; (8011574 <plug_holes+0x140>)
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	881a      	ldrh	r2, [r3, #0]
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011534:	d00a      	beq.n	801154c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	881b      	ldrh	r3, [r3, #0]
 801153a:	4618      	mov	r0, r3
 801153c:	f7ff ff56 	bl	80113ec <ptr_to_mem>
 8011540:	4604      	mov	r4, r0
 8011542:	68b8      	ldr	r0, [r7, #8]
 8011544:	f7ff ff64 	bl	8011410 <mem_to_ptr>
 8011548:	4603      	mov	r3, r0
 801154a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801154c:	bf00      	nop
 801154e:	3714      	adds	r7, #20
 8011550:	46bd      	mov	sp, r7
 8011552:	bd90      	pop	{r4, r7, pc}
 8011554:	2000d0c4 	.word	0x2000d0c4
 8011558:	0802226c 	.word	0x0802226c
 801155c:	0802229c 	.word	0x0802229c
 8011560:	080222b4 	.word	0x080222b4
 8011564:	2000d0c8 	.word	0x2000d0c8
 8011568:	080222dc 	.word	0x080222dc
 801156c:	080222f8 	.word	0x080222f8
 8011570:	08022314 	.word	0x08022314
 8011574:	2000d0d0 	.word	0x2000d0d0

08011578 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801157e:	4b1f      	ldr	r3, [pc, #124]	; (80115fc <mem_init+0x84>)
 8011580:	3303      	adds	r3, #3
 8011582:	f023 0303 	bic.w	r3, r3, #3
 8011586:	461a      	mov	r2, r3
 8011588:	4b1d      	ldr	r3, [pc, #116]	; (8011600 <mem_init+0x88>)
 801158a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801158c:	4b1c      	ldr	r3, [pc, #112]	; (8011600 <mem_init+0x88>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011598:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80115a6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80115aa:	f7ff ff1f 	bl	80113ec <ptr_to_mem>
 80115ae:	4603      	mov	r3, r0
 80115b0:	4a14      	ldr	r2, [pc, #80]	; (8011604 <mem_init+0x8c>)
 80115b2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80115b4:	4b13      	ldr	r3, [pc, #76]	; (8011604 <mem_init+0x8c>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2201      	movs	r2, #1
 80115ba:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80115bc:	4b11      	ldr	r3, [pc, #68]	; (8011604 <mem_init+0x8c>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80115c4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80115c6:	4b0f      	ldr	r3, [pc, #60]	; (8011604 <mem_init+0x8c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80115ce:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80115d0:	4b0b      	ldr	r3, [pc, #44]	; (8011600 <mem_init+0x88>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	4a0c      	ldr	r2, [pc, #48]	; (8011608 <mem_init+0x90>)
 80115d6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80115d8:	480c      	ldr	r0, [pc, #48]	; (801160c <mem_init+0x94>)
 80115da:	f00c ff7d 	bl	801e4d8 <sys_mutex_new>
 80115de:	4603      	mov	r3, r0
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d006      	beq.n	80115f2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80115e4:	4b0a      	ldr	r3, [pc, #40]	; (8011610 <mem_init+0x98>)
 80115e6:	f240 221f 	movw	r2, #543	; 0x21f
 80115ea:	490a      	ldr	r1, [pc, #40]	; (8011614 <mem_init+0x9c>)
 80115ec:	480a      	ldr	r0, [pc, #40]	; (8011618 <mem_init+0xa0>)
 80115ee:	f00e f95d 	bl	801f8ac <iprintf>
  }
}
 80115f2:	bf00      	nop
 80115f4:	3708      	adds	r7, #8
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	2000ca70 	.word	0x2000ca70
 8011600:	2000d0c4 	.word	0x2000d0c4
 8011604:	2000d0c8 	.word	0x2000d0c8
 8011608:	2000d0d0 	.word	0x2000d0d0
 801160c:	2000d0cc 	.word	0x2000d0cc
 8011610:	0802226c 	.word	0x0802226c
 8011614:	08022340 	.word	0x08022340
 8011618:	080222b4 	.word	0x080222b4

0801161c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b086      	sub	sp, #24
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7ff fef3 	bl	8011410 <mem_to_ptr>
 801162a:	4603      	mov	r3, r0
 801162c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	881b      	ldrh	r3, [r3, #0]
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff feda 	bl	80113ec <ptr_to_mem>
 8011638:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	885b      	ldrh	r3, [r3, #2]
 801163e:	4618      	mov	r0, r3
 8011640:	f7ff fed4 	bl	80113ec <ptr_to_mem>
 8011644:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	881b      	ldrh	r3, [r3, #0]
 801164a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801164e:	d818      	bhi.n	8011682 <mem_link_valid+0x66>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	885b      	ldrh	r3, [r3, #2]
 8011654:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011658:	d813      	bhi.n	8011682 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801165e:	8afa      	ldrh	r2, [r7, #22]
 8011660:	429a      	cmp	r2, r3
 8011662:	d004      	beq.n	801166e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	881b      	ldrh	r3, [r3, #0]
 8011668:	8afa      	ldrh	r2, [r7, #22]
 801166a:	429a      	cmp	r2, r3
 801166c:	d109      	bne.n	8011682 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801166e:	4b08      	ldr	r3, [pc, #32]	; (8011690 <mem_link_valid+0x74>)
 8011670:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011672:	693a      	ldr	r2, [r7, #16]
 8011674:	429a      	cmp	r2, r3
 8011676:	d006      	beq.n	8011686 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	885b      	ldrh	r3, [r3, #2]
 801167c:	8afa      	ldrh	r2, [r7, #22]
 801167e:	429a      	cmp	r2, r3
 8011680:	d001      	beq.n	8011686 <mem_link_valid+0x6a>
    return 0;
 8011682:	2300      	movs	r3, #0
 8011684:	e000      	b.n	8011688 <mem_link_valid+0x6c>
  }
  return 1;
 8011686:	2301      	movs	r3, #1
}
 8011688:	4618      	mov	r0, r3
 801168a:	3718      	adds	r7, #24
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	2000d0c8 	.word	0x2000d0c8

08011694 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d070      	beq.n	8011784 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f003 0303 	and.w	r3, r3, #3
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d00d      	beq.n	80116c8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80116ac:	4b37      	ldr	r3, [pc, #220]	; (801178c <mem_free+0xf8>)
 80116ae:	f240 2273 	movw	r2, #627	; 0x273
 80116b2:	4937      	ldr	r1, [pc, #220]	; (8011790 <mem_free+0xfc>)
 80116b4:	4837      	ldr	r0, [pc, #220]	; (8011794 <mem_free+0x100>)
 80116b6:	f00e f8f9 	bl	801f8ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80116ba:	f00c ff6b 	bl	801e594 <sys_arch_protect>
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	68f8      	ldr	r0, [r7, #12]
 80116c2:	f00c ff75 	bl	801e5b0 <sys_arch_unprotect>
    return;
 80116c6:	e05e      	b.n	8011786 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	3b08      	subs	r3, #8
 80116cc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80116ce:	4b32      	ldr	r3, [pc, #200]	; (8011798 <mem_free+0x104>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	69fa      	ldr	r2, [r7, #28]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d306      	bcc.n	80116e6 <mem_free+0x52>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f103 020c 	add.w	r2, r3, #12
 80116de:	4b2f      	ldr	r3, [pc, #188]	; (801179c <mem_free+0x108>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d90d      	bls.n	8011702 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80116e6:	4b29      	ldr	r3, [pc, #164]	; (801178c <mem_free+0xf8>)
 80116e8:	f240 227f 	movw	r2, #639	; 0x27f
 80116ec:	492c      	ldr	r1, [pc, #176]	; (80117a0 <mem_free+0x10c>)
 80116ee:	4829      	ldr	r0, [pc, #164]	; (8011794 <mem_free+0x100>)
 80116f0:	f00e f8dc 	bl	801f8ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80116f4:	f00c ff4e 	bl	801e594 <sys_arch_protect>
 80116f8:	6138      	str	r0, [r7, #16]
 80116fa:	6938      	ldr	r0, [r7, #16]
 80116fc:	f00c ff58 	bl	801e5b0 <sys_arch_unprotect>
    return;
 8011700:	e041      	b.n	8011786 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011702:	4828      	ldr	r0, [pc, #160]	; (80117a4 <mem_free+0x110>)
 8011704:	f00c ff04 	bl	801e510 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	791b      	ldrb	r3, [r3, #4]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d110      	bne.n	8011732 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011710:	4b1e      	ldr	r3, [pc, #120]	; (801178c <mem_free+0xf8>)
 8011712:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011716:	4924      	ldr	r1, [pc, #144]	; (80117a8 <mem_free+0x114>)
 8011718:	481e      	ldr	r0, [pc, #120]	; (8011794 <mem_free+0x100>)
 801171a:	f00e f8c7 	bl	801f8ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801171e:	4821      	ldr	r0, [pc, #132]	; (80117a4 <mem_free+0x110>)
 8011720:	f00c ff05 	bl	801e52e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011724:	f00c ff36 	bl	801e594 <sys_arch_protect>
 8011728:	6178      	str	r0, [r7, #20]
 801172a:	6978      	ldr	r0, [r7, #20]
 801172c:	f00c ff40 	bl	801e5b0 <sys_arch_unprotect>
    return;
 8011730:	e029      	b.n	8011786 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011732:	69f8      	ldr	r0, [r7, #28]
 8011734:	f7ff ff72 	bl	801161c <mem_link_valid>
 8011738:	4603      	mov	r3, r0
 801173a:	2b00      	cmp	r3, #0
 801173c:	d110      	bne.n	8011760 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801173e:	4b13      	ldr	r3, [pc, #76]	; (801178c <mem_free+0xf8>)
 8011740:	f240 2295 	movw	r2, #661	; 0x295
 8011744:	4919      	ldr	r1, [pc, #100]	; (80117ac <mem_free+0x118>)
 8011746:	4813      	ldr	r0, [pc, #76]	; (8011794 <mem_free+0x100>)
 8011748:	f00e f8b0 	bl	801f8ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801174c:	4815      	ldr	r0, [pc, #84]	; (80117a4 <mem_free+0x110>)
 801174e:	f00c feee 	bl	801e52e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011752:	f00c ff1f 	bl	801e594 <sys_arch_protect>
 8011756:	61b8      	str	r0, [r7, #24]
 8011758:	69b8      	ldr	r0, [r7, #24]
 801175a:	f00c ff29 	bl	801e5b0 <sys_arch_unprotect>
    return;
 801175e:	e012      	b.n	8011786 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	2200      	movs	r2, #0
 8011764:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011766:	4b12      	ldr	r3, [pc, #72]	; (80117b0 <mem_free+0x11c>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	69fa      	ldr	r2, [r7, #28]
 801176c:	429a      	cmp	r2, r3
 801176e:	d202      	bcs.n	8011776 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011770:	4a0f      	ldr	r2, [pc, #60]	; (80117b0 <mem_free+0x11c>)
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011776:	69f8      	ldr	r0, [r7, #28]
 8011778:	f7ff fe5c 	bl	8011434 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801177c:	4809      	ldr	r0, [pc, #36]	; (80117a4 <mem_free+0x110>)
 801177e:	f00c fed6 	bl	801e52e <sys_mutex_unlock>
 8011782:	e000      	b.n	8011786 <mem_free+0xf2>
    return;
 8011784:	bf00      	nop
}
 8011786:	3720      	adds	r7, #32
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}
 801178c:	0802226c 	.word	0x0802226c
 8011790:	0802235c 	.word	0x0802235c
 8011794:	080222b4 	.word	0x080222b4
 8011798:	2000d0c4 	.word	0x2000d0c4
 801179c:	2000d0c8 	.word	0x2000d0c8
 80117a0:	08022380 	.word	0x08022380
 80117a4:	2000d0cc 	.word	0x2000d0cc
 80117a8:	0802239c 	.word	0x0802239c
 80117ac:	080223c4 	.word	0x080223c4
 80117b0:	2000d0d0 	.word	0x2000d0d0

080117b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b088      	sub	sp, #32
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	460b      	mov	r3, r1
 80117be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80117c0:	887b      	ldrh	r3, [r7, #2]
 80117c2:	3303      	adds	r3, #3
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	f023 0303 	bic.w	r3, r3, #3
 80117ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80117cc:	8bfb      	ldrh	r3, [r7, #30]
 80117ce:	2b0b      	cmp	r3, #11
 80117d0:	d801      	bhi.n	80117d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80117d2:	230c      	movs	r3, #12
 80117d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80117d6:	8bfb      	ldrh	r3, [r7, #30]
 80117d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80117dc:	d803      	bhi.n	80117e6 <mem_trim+0x32>
 80117de:	8bfa      	ldrh	r2, [r7, #30]
 80117e0:	887b      	ldrh	r3, [r7, #2]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d201      	bcs.n	80117ea <mem_trim+0x36>
    return NULL;
 80117e6:	2300      	movs	r3, #0
 80117e8:	e0d8      	b.n	801199c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80117ea:	4b6e      	ldr	r3, [pc, #440]	; (80119a4 <mem_trim+0x1f0>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d304      	bcc.n	80117fe <mem_trim+0x4a>
 80117f4:	4b6c      	ldr	r3, [pc, #432]	; (80119a8 <mem_trim+0x1f4>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d306      	bcc.n	801180c <mem_trim+0x58>
 80117fe:	4b6b      	ldr	r3, [pc, #428]	; (80119ac <mem_trim+0x1f8>)
 8011800:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011804:	496a      	ldr	r1, [pc, #424]	; (80119b0 <mem_trim+0x1fc>)
 8011806:	486b      	ldr	r0, [pc, #428]	; (80119b4 <mem_trim+0x200>)
 8011808:	f00e f850 	bl	801f8ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801180c:	4b65      	ldr	r3, [pc, #404]	; (80119a4 <mem_trim+0x1f0>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	429a      	cmp	r2, r3
 8011814:	d304      	bcc.n	8011820 <mem_trim+0x6c>
 8011816:	4b64      	ldr	r3, [pc, #400]	; (80119a8 <mem_trim+0x1f4>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	687a      	ldr	r2, [r7, #4]
 801181c:	429a      	cmp	r2, r3
 801181e:	d307      	bcc.n	8011830 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011820:	f00c feb8 	bl	801e594 <sys_arch_protect>
 8011824:	60b8      	str	r0, [r7, #8]
 8011826:	68b8      	ldr	r0, [r7, #8]
 8011828:	f00c fec2 	bl	801e5b0 <sys_arch_unprotect>
    return rmem;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	e0b5      	b.n	801199c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	3b08      	subs	r3, #8
 8011834:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011836:	69b8      	ldr	r0, [r7, #24]
 8011838:	f7ff fdea 	bl	8011410 <mem_to_ptr>
 801183c:	4603      	mov	r3, r0
 801183e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011840:	69bb      	ldr	r3, [r7, #24]
 8011842:	881a      	ldrh	r2, [r3, #0]
 8011844:	8afb      	ldrh	r3, [r7, #22]
 8011846:	1ad3      	subs	r3, r2, r3
 8011848:	b29b      	uxth	r3, r3
 801184a:	3b08      	subs	r3, #8
 801184c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801184e:	8bfa      	ldrh	r2, [r7, #30]
 8011850:	8abb      	ldrh	r3, [r7, #20]
 8011852:	429a      	cmp	r2, r3
 8011854:	d906      	bls.n	8011864 <mem_trim+0xb0>
 8011856:	4b55      	ldr	r3, [pc, #340]	; (80119ac <mem_trim+0x1f8>)
 8011858:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801185c:	4956      	ldr	r1, [pc, #344]	; (80119b8 <mem_trim+0x204>)
 801185e:	4855      	ldr	r0, [pc, #340]	; (80119b4 <mem_trim+0x200>)
 8011860:	f00e f824 	bl	801f8ac <iprintf>
  if (newsize > size) {
 8011864:	8bfa      	ldrh	r2, [r7, #30]
 8011866:	8abb      	ldrh	r3, [r7, #20]
 8011868:	429a      	cmp	r2, r3
 801186a:	d901      	bls.n	8011870 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801186c:	2300      	movs	r3, #0
 801186e:	e095      	b.n	801199c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011870:	8bfa      	ldrh	r2, [r7, #30]
 8011872:	8abb      	ldrh	r3, [r7, #20]
 8011874:	429a      	cmp	r2, r3
 8011876:	d101      	bne.n	801187c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	e08f      	b.n	801199c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801187c:	484f      	ldr	r0, [pc, #316]	; (80119bc <mem_trim+0x208>)
 801187e:	f00c fe47 	bl	801e510 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	4618      	mov	r0, r3
 8011888:	f7ff fdb0 	bl	80113ec <ptr_to_mem>
 801188c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	791b      	ldrb	r3, [r3, #4]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d13f      	bne.n	8011916 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	881b      	ldrh	r3, [r3, #0]
 801189a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801189e:	d106      	bne.n	80118ae <mem_trim+0xfa>
 80118a0:	4b42      	ldr	r3, [pc, #264]	; (80119ac <mem_trim+0x1f8>)
 80118a2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80118a6:	4946      	ldr	r1, [pc, #280]	; (80119c0 <mem_trim+0x20c>)
 80118a8:	4842      	ldr	r0, [pc, #264]	; (80119b4 <mem_trim+0x200>)
 80118aa:	f00d ffff 	bl	801f8ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	881b      	ldrh	r3, [r3, #0]
 80118b2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80118b4:	8afa      	ldrh	r2, [r7, #22]
 80118b6:	8bfb      	ldrh	r3, [r7, #30]
 80118b8:	4413      	add	r3, r2
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	3308      	adds	r3, #8
 80118be:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80118c0:	4b40      	ldr	r3, [pc, #256]	; (80119c4 <mem_trim+0x210>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	693a      	ldr	r2, [r7, #16]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d106      	bne.n	80118d8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80118ca:	89fb      	ldrh	r3, [r7, #14]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff fd8d 	bl	80113ec <ptr_to_mem>
 80118d2:	4603      	mov	r3, r0
 80118d4:	4a3b      	ldr	r2, [pc, #236]	; (80119c4 <mem_trim+0x210>)
 80118d6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80118d8:	89fb      	ldrh	r3, [r7, #14]
 80118da:	4618      	mov	r0, r3
 80118dc:	f7ff fd86 	bl	80113ec <ptr_to_mem>
 80118e0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	2200      	movs	r2, #0
 80118e6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	89ba      	ldrh	r2, [r7, #12]
 80118ec:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	8afa      	ldrh	r2, [r7, #22]
 80118f2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	89fa      	ldrh	r2, [r7, #14]
 80118f8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	881b      	ldrh	r3, [r3, #0]
 80118fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011902:	d047      	beq.n	8011994 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	881b      	ldrh	r3, [r3, #0]
 8011908:	4618      	mov	r0, r3
 801190a:	f7ff fd6f 	bl	80113ec <ptr_to_mem>
 801190e:	4602      	mov	r2, r0
 8011910:	89fb      	ldrh	r3, [r7, #14]
 8011912:	8053      	strh	r3, [r2, #2]
 8011914:	e03e      	b.n	8011994 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011916:	8bfb      	ldrh	r3, [r7, #30]
 8011918:	f103 0214 	add.w	r2, r3, #20
 801191c:	8abb      	ldrh	r3, [r7, #20]
 801191e:	429a      	cmp	r2, r3
 8011920:	d838      	bhi.n	8011994 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011922:	8afa      	ldrh	r2, [r7, #22]
 8011924:	8bfb      	ldrh	r3, [r7, #30]
 8011926:	4413      	add	r3, r2
 8011928:	b29b      	uxth	r3, r3
 801192a:	3308      	adds	r3, #8
 801192c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801192e:	69bb      	ldr	r3, [r7, #24]
 8011930:	881b      	ldrh	r3, [r3, #0]
 8011932:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011936:	d106      	bne.n	8011946 <mem_trim+0x192>
 8011938:	4b1c      	ldr	r3, [pc, #112]	; (80119ac <mem_trim+0x1f8>)
 801193a:	f240 3216 	movw	r2, #790	; 0x316
 801193e:	4920      	ldr	r1, [pc, #128]	; (80119c0 <mem_trim+0x20c>)
 8011940:	481c      	ldr	r0, [pc, #112]	; (80119b4 <mem_trim+0x200>)
 8011942:	f00d ffb3 	bl	801f8ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011946:	89fb      	ldrh	r3, [r7, #14]
 8011948:	4618      	mov	r0, r3
 801194a:	f7ff fd4f 	bl	80113ec <ptr_to_mem>
 801194e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011950:	4b1c      	ldr	r3, [pc, #112]	; (80119c4 <mem_trim+0x210>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	693a      	ldr	r2, [r7, #16]
 8011956:	429a      	cmp	r2, r3
 8011958:	d202      	bcs.n	8011960 <mem_trim+0x1ac>
      lfree = mem2;
 801195a:	4a1a      	ldr	r2, [pc, #104]	; (80119c4 <mem_trim+0x210>)
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011960:	693b      	ldr	r3, [r7, #16]
 8011962:	2200      	movs	r2, #0
 8011964:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011966:	69bb      	ldr	r3, [r7, #24]
 8011968:	881a      	ldrh	r2, [r3, #0]
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	8afa      	ldrh	r2, [r7, #22]
 8011972:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	89fa      	ldrh	r2, [r7, #14]
 8011978:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	881b      	ldrh	r3, [r3, #0]
 801197e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011982:	d007      	beq.n	8011994 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	881b      	ldrh	r3, [r3, #0]
 8011988:	4618      	mov	r0, r3
 801198a:	f7ff fd2f 	bl	80113ec <ptr_to_mem>
 801198e:	4602      	mov	r2, r0
 8011990:	89fb      	ldrh	r3, [r7, #14]
 8011992:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011994:	4809      	ldr	r0, [pc, #36]	; (80119bc <mem_trim+0x208>)
 8011996:	f00c fdca 	bl	801e52e <sys_mutex_unlock>
  return rmem;
 801199a:	687b      	ldr	r3, [r7, #4]
}
 801199c:	4618      	mov	r0, r3
 801199e:	3720      	adds	r7, #32
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	2000d0c4 	.word	0x2000d0c4
 80119a8:	2000d0c8 	.word	0x2000d0c8
 80119ac:	0802226c 	.word	0x0802226c
 80119b0:	080223f8 	.word	0x080223f8
 80119b4:	080222b4 	.word	0x080222b4
 80119b8:	08022410 	.word	0x08022410
 80119bc:	2000d0cc 	.word	0x2000d0cc
 80119c0:	08022430 	.word	0x08022430
 80119c4:	2000d0d0 	.word	0x2000d0d0

080119c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b088      	sub	sp, #32
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	4603      	mov	r3, r0
 80119d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80119d2:	88fb      	ldrh	r3, [r7, #6]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d101      	bne.n	80119dc <mem_malloc+0x14>
    return NULL;
 80119d8:	2300      	movs	r3, #0
 80119da:	e0e2      	b.n	8011ba2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80119dc:	88fb      	ldrh	r3, [r7, #6]
 80119de:	3303      	adds	r3, #3
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	f023 0303 	bic.w	r3, r3, #3
 80119e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80119e8:	8bbb      	ldrh	r3, [r7, #28]
 80119ea:	2b0b      	cmp	r3, #11
 80119ec:	d801      	bhi.n	80119f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80119ee:	230c      	movs	r3, #12
 80119f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80119f2:	8bbb      	ldrh	r3, [r7, #28]
 80119f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80119f8:	d803      	bhi.n	8011a02 <mem_malloc+0x3a>
 80119fa:	8bba      	ldrh	r2, [r7, #28]
 80119fc:	88fb      	ldrh	r3, [r7, #6]
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d201      	bcs.n	8011a06 <mem_malloc+0x3e>
    return NULL;
 8011a02:	2300      	movs	r3, #0
 8011a04:	e0cd      	b.n	8011ba2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011a06:	4869      	ldr	r0, [pc, #420]	; (8011bac <mem_malloc+0x1e4>)
 8011a08:	f00c fd82 	bl	801e510 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011a0c:	4b68      	ldr	r3, [pc, #416]	; (8011bb0 <mem_malloc+0x1e8>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7ff fcfd 	bl	8011410 <mem_to_ptr>
 8011a16:	4603      	mov	r3, r0
 8011a18:	83fb      	strh	r3, [r7, #30]
 8011a1a:	e0b7      	b.n	8011b8c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011a1c:	8bfb      	ldrh	r3, [r7, #30]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7ff fce4 	bl	80113ec <ptr_to_mem>
 8011a24:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	791b      	ldrb	r3, [r3, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f040 80a7 	bne.w	8011b7e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	881b      	ldrh	r3, [r3, #0]
 8011a34:	461a      	mov	r2, r3
 8011a36:	8bfb      	ldrh	r3, [r7, #30]
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	f1a3 0208 	sub.w	r2, r3, #8
 8011a3e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011a40:	429a      	cmp	r2, r3
 8011a42:	f0c0 809c 	bcc.w	8011b7e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	881b      	ldrh	r3, [r3, #0]
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	8bfb      	ldrh	r3, [r7, #30]
 8011a4e:	1ad3      	subs	r3, r2, r3
 8011a50:	f1a3 0208 	sub.w	r2, r3, #8
 8011a54:	8bbb      	ldrh	r3, [r7, #28]
 8011a56:	3314      	adds	r3, #20
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d333      	bcc.n	8011ac4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011a5c:	8bfa      	ldrh	r2, [r7, #30]
 8011a5e:	8bbb      	ldrh	r3, [r7, #28]
 8011a60:	4413      	add	r3, r2
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	3308      	adds	r3, #8
 8011a66:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011a68:	8a7b      	ldrh	r3, [r7, #18]
 8011a6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a6e:	d106      	bne.n	8011a7e <mem_malloc+0xb6>
 8011a70:	4b50      	ldr	r3, [pc, #320]	; (8011bb4 <mem_malloc+0x1ec>)
 8011a72:	f240 3287 	movw	r2, #903	; 0x387
 8011a76:	4950      	ldr	r1, [pc, #320]	; (8011bb8 <mem_malloc+0x1f0>)
 8011a78:	4850      	ldr	r0, [pc, #320]	; (8011bbc <mem_malloc+0x1f4>)
 8011a7a:	f00d ff17 	bl	801f8ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011a7e:	8a7b      	ldrh	r3, [r7, #18]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7ff fcb3 	bl	80113ec <ptr_to_mem>
 8011a86:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	881a      	ldrh	r2, [r3, #0]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	8bfa      	ldrh	r2, [r7, #30]
 8011a9a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	8a7a      	ldrh	r2, [r7, #18]
 8011aa0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	881b      	ldrh	r3, [r3, #0]
 8011aac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011ab0:	d00b      	beq.n	8011aca <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	881b      	ldrh	r3, [r3, #0]
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7ff fc98 	bl	80113ec <ptr_to_mem>
 8011abc:	4602      	mov	r2, r0
 8011abe:	8a7b      	ldrh	r3, [r7, #18]
 8011ac0:	8053      	strh	r3, [r2, #2]
 8011ac2:	e002      	b.n	8011aca <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011aca:	4b39      	ldr	r3, [pc, #228]	; (8011bb0 <mem_malloc+0x1e8>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	697a      	ldr	r2, [r7, #20]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d127      	bne.n	8011b24 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011ad4:	4b36      	ldr	r3, [pc, #216]	; (8011bb0 <mem_malloc+0x1e8>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011ada:	e005      	b.n	8011ae8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	881b      	ldrh	r3, [r3, #0]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7ff fc83 	bl	80113ec <ptr_to_mem>
 8011ae6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	791b      	ldrb	r3, [r3, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d004      	beq.n	8011afa <mem_malloc+0x132>
 8011af0:	4b33      	ldr	r3, [pc, #204]	; (8011bc0 <mem_malloc+0x1f8>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	69ba      	ldr	r2, [r7, #24]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d1f0      	bne.n	8011adc <mem_malloc+0x114>
          }
          lfree = cur;
 8011afa:	4a2d      	ldr	r2, [pc, #180]	; (8011bb0 <mem_malloc+0x1e8>)
 8011afc:	69bb      	ldr	r3, [r7, #24]
 8011afe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011b00:	4b2b      	ldr	r3, [pc, #172]	; (8011bb0 <mem_malloc+0x1e8>)
 8011b02:	681a      	ldr	r2, [r3, #0]
 8011b04:	4b2e      	ldr	r3, [pc, #184]	; (8011bc0 <mem_malloc+0x1f8>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d00b      	beq.n	8011b24 <mem_malloc+0x15c>
 8011b0c:	4b28      	ldr	r3, [pc, #160]	; (8011bb0 <mem_malloc+0x1e8>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	791b      	ldrb	r3, [r3, #4]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d006      	beq.n	8011b24 <mem_malloc+0x15c>
 8011b16:	4b27      	ldr	r3, [pc, #156]	; (8011bb4 <mem_malloc+0x1ec>)
 8011b18:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011b1c:	4929      	ldr	r1, [pc, #164]	; (8011bc4 <mem_malloc+0x1fc>)
 8011b1e:	4827      	ldr	r0, [pc, #156]	; (8011bbc <mem_malloc+0x1f4>)
 8011b20:	f00d fec4 	bl	801f8ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011b24:	4821      	ldr	r0, [pc, #132]	; (8011bac <mem_malloc+0x1e4>)
 8011b26:	f00c fd02 	bl	801e52e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011b2a:	8bba      	ldrh	r2, [r7, #28]
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	4413      	add	r3, r2
 8011b30:	3308      	adds	r3, #8
 8011b32:	4a23      	ldr	r2, [pc, #140]	; (8011bc0 <mem_malloc+0x1f8>)
 8011b34:	6812      	ldr	r2, [r2, #0]
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d906      	bls.n	8011b48 <mem_malloc+0x180>
 8011b3a:	4b1e      	ldr	r3, [pc, #120]	; (8011bb4 <mem_malloc+0x1ec>)
 8011b3c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011b40:	4921      	ldr	r1, [pc, #132]	; (8011bc8 <mem_malloc+0x200>)
 8011b42:	481e      	ldr	r0, [pc, #120]	; (8011bbc <mem_malloc+0x1f4>)
 8011b44:	f00d feb2 	bl	801f8ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	f003 0303 	and.w	r3, r3, #3
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d006      	beq.n	8011b60 <mem_malloc+0x198>
 8011b52:	4b18      	ldr	r3, [pc, #96]	; (8011bb4 <mem_malloc+0x1ec>)
 8011b54:	f240 32bb 	movw	r2, #955	; 0x3bb
 8011b58:	491c      	ldr	r1, [pc, #112]	; (8011bcc <mem_malloc+0x204>)
 8011b5a:	4818      	ldr	r0, [pc, #96]	; (8011bbc <mem_malloc+0x1f4>)
 8011b5c:	f00d fea6 	bl	801f8ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	f003 0303 	and.w	r3, r3, #3
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d006      	beq.n	8011b78 <mem_malloc+0x1b0>
 8011b6a:	4b12      	ldr	r3, [pc, #72]	; (8011bb4 <mem_malloc+0x1ec>)
 8011b6c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011b70:	4917      	ldr	r1, [pc, #92]	; (8011bd0 <mem_malloc+0x208>)
 8011b72:	4812      	ldr	r0, [pc, #72]	; (8011bbc <mem_malloc+0x1f4>)
 8011b74:	f00d fe9a 	bl	801f8ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	3308      	adds	r3, #8
 8011b7c:	e011      	b.n	8011ba2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011b7e:	8bfb      	ldrh	r3, [r7, #30]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7ff fc33 	bl	80113ec <ptr_to_mem>
 8011b86:	4603      	mov	r3, r0
 8011b88:	881b      	ldrh	r3, [r3, #0]
 8011b8a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011b8c:	8bfa      	ldrh	r2, [r7, #30]
 8011b8e:	8bbb      	ldrh	r3, [r7, #28]
 8011b90:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011b94:	429a      	cmp	r2, r3
 8011b96:	f4ff af41 	bcc.w	8011a1c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011b9a:	4804      	ldr	r0, [pc, #16]	; (8011bac <mem_malloc+0x1e4>)
 8011b9c:	f00c fcc7 	bl	801e52e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011ba0:	2300      	movs	r3, #0
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3720      	adds	r7, #32
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	bf00      	nop
 8011bac:	2000d0cc 	.word	0x2000d0cc
 8011bb0:	2000d0d0 	.word	0x2000d0d0
 8011bb4:	0802226c 	.word	0x0802226c
 8011bb8:	08022430 	.word	0x08022430
 8011bbc:	080222b4 	.word	0x080222b4
 8011bc0:	2000d0c8 	.word	0x2000d0c8
 8011bc4:	08022444 	.word	0x08022444
 8011bc8:	08022460 	.word	0x08022460
 8011bcc:	08022490 	.word	0x08022490
 8011bd0:	080224c0 	.word	0x080224c0

08011bd4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b085      	sub	sp, #20
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	689b      	ldr	r3, [r3, #8]
 8011be0:	2200      	movs	r2, #0
 8011be2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	3303      	adds	r3, #3
 8011bea:	f023 0303 	bic.w	r3, r3, #3
 8011bee:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	60fb      	str	r3, [r7, #12]
 8011bf4:	e011      	b.n	8011c1a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	689b      	ldr	r3, [r3, #8]
 8011bfa:	681a      	ldr	r2, [r3, #0]
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	68ba      	ldr	r2, [r7, #8]
 8011c06:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	881b      	ldrh	r3, [r3, #0]
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	4413      	add	r3, r2
 8011c12:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	3301      	adds	r3, #1
 8011c18:	60fb      	str	r3, [r7, #12]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	885b      	ldrh	r3, [r3, #2]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	4293      	cmp	r3, r2
 8011c24:	dbe7      	blt.n	8011bf6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011c26:	bf00      	nop
 8011c28:	bf00      	nop
 8011c2a:	3714      	adds	r7, #20
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	80fb      	strh	r3, [r7, #6]
 8011c3e:	e009      	b.n	8011c54 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011c40:	88fb      	ldrh	r3, [r7, #6]
 8011c42:	4a08      	ldr	r2, [pc, #32]	; (8011c64 <memp_init+0x30>)
 8011c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7ff ffc3 	bl	8011bd4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011c4e:	88fb      	ldrh	r3, [r7, #6]
 8011c50:	3301      	adds	r3, #1
 8011c52:	80fb      	strh	r3, [r7, #6]
 8011c54:	88fb      	ldrh	r3, [r7, #6]
 8011c56:	2b0c      	cmp	r3, #12
 8011c58:	d9f2      	bls.n	8011c40 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011c5a:	bf00      	nop
 8011c5c:	bf00      	nop
 8011c5e:	3708      	adds	r7, #8
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	08025164 	.word	0x08025164

08011c68 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b084      	sub	sp, #16
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011c70:	f00c fc90 	bl	801e594 <sys_arch_protect>
 8011c74:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	689b      	ldr	r3, [r3, #8]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d015      	beq.n	8011cb0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	689b      	ldr	r3, [r3, #8]
 8011c88:	68ba      	ldr	r2, [r7, #8]
 8011c8a:	6812      	ldr	r2, [r2, #0]
 8011c8c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	f003 0303 	and.w	r3, r3, #3
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d006      	beq.n	8011ca6 <do_memp_malloc_pool+0x3e>
 8011c98:	4b09      	ldr	r3, [pc, #36]	; (8011cc0 <do_memp_malloc_pool+0x58>)
 8011c9a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8011c9e:	4909      	ldr	r1, [pc, #36]	; (8011cc4 <do_memp_malloc_pool+0x5c>)
 8011ca0:	4809      	ldr	r0, [pc, #36]	; (8011cc8 <do_memp_malloc_pool+0x60>)
 8011ca2:	f00d fe03 	bl	801f8ac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f00c fc82 	bl	801e5b0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	e003      	b.n	8011cb8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f00c fc7d 	bl	801e5b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3710      	adds	r7, #16
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	080224e4 	.word	0x080224e4
 8011cc4:	08022514 	.word	0x08022514
 8011cc8:	08022538 	.word	0x08022538

08011ccc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d106      	bne.n	8011ce8 <memp_malloc_pool+0x1c>
 8011cda:	4b0a      	ldr	r3, [pc, #40]	; (8011d04 <memp_malloc_pool+0x38>)
 8011cdc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011ce0:	4909      	ldr	r1, [pc, #36]	; (8011d08 <memp_malloc_pool+0x3c>)
 8011ce2:	480a      	ldr	r0, [pc, #40]	; (8011d0c <memp_malloc_pool+0x40>)
 8011ce4:	f00d fde2 	bl	801f8ac <iprintf>
  if (desc == NULL) {
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d101      	bne.n	8011cf2 <memp_malloc_pool+0x26>
    return NULL;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	e003      	b.n	8011cfa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff ffb8 	bl	8011c68 <do_memp_malloc_pool>
 8011cf8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	080224e4 	.word	0x080224e4
 8011d08:	08022560 	.word	0x08022560
 8011d0c:	08022538 	.word	0x08022538

08011d10 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	4603      	mov	r3, r0
 8011d18:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011d1a:	79fb      	ldrb	r3, [r7, #7]
 8011d1c:	2b0c      	cmp	r3, #12
 8011d1e:	d908      	bls.n	8011d32 <memp_malloc+0x22>
 8011d20:	4b0a      	ldr	r3, [pc, #40]	; (8011d4c <memp_malloc+0x3c>)
 8011d22:	f240 1257 	movw	r2, #343	; 0x157
 8011d26:	490a      	ldr	r1, [pc, #40]	; (8011d50 <memp_malloc+0x40>)
 8011d28:	480a      	ldr	r0, [pc, #40]	; (8011d54 <memp_malloc+0x44>)
 8011d2a:	f00d fdbf 	bl	801f8ac <iprintf>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	e008      	b.n	8011d44 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011d32:	79fb      	ldrb	r3, [r7, #7]
 8011d34:	4a08      	ldr	r2, [pc, #32]	; (8011d58 <memp_malloc+0x48>)
 8011d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7ff ff94 	bl	8011c68 <do_memp_malloc_pool>
 8011d40:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011d42:	68fb      	ldr	r3, [r7, #12]
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3710      	adds	r7, #16
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	080224e4 	.word	0x080224e4
 8011d50:	08022574 	.word	0x08022574
 8011d54:	08022538 	.word	0x08022538
 8011d58:	08025164 	.word	0x08025164

08011d5c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b084      	sub	sp, #16
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	f003 0303 	and.w	r3, r3, #3
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d006      	beq.n	8011d7e <do_memp_free_pool+0x22>
 8011d70:	4b0d      	ldr	r3, [pc, #52]	; (8011da8 <do_memp_free_pool+0x4c>)
 8011d72:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8011d76:	490d      	ldr	r1, [pc, #52]	; (8011dac <do_memp_free_pool+0x50>)
 8011d78:	480d      	ldr	r0, [pc, #52]	; (8011db0 <do_memp_free_pool+0x54>)
 8011d7a:	f00d fd97 	bl	801f8ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011d82:	f00c fc07 	bl	801e594 <sys_arch_protect>
 8011d86:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	689b      	ldr	r3, [r3, #8]
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	689b      	ldr	r3, [r3, #8]
 8011d96:	68fa      	ldr	r2, [r7, #12]
 8011d98:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011d9a:	68b8      	ldr	r0, [r7, #8]
 8011d9c:	f00c fc08 	bl	801e5b0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011da0:	bf00      	nop
 8011da2:	3710      	adds	r7, #16
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	080224e4 	.word	0x080224e4
 8011dac:	08022594 	.word	0x08022594
 8011db0:	08022538 	.word	0x08022538

08011db4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b082      	sub	sp, #8
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d106      	bne.n	8011dd2 <memp_free_pool+0x1e>
 8011dc4:	4b0a      	ldr	r3, [pc, #40]	; (8011df0 <memp_free_pool+0x3c>)
 8011dc6:	f240 1295 	movw	r2, #405	; 0x195
 8011dca:	490a      	ldr	r1, [pc, #40]	; (8011df4 <memp_free_pool+0x40>)
 8011dcc:	480a      	ldr	r0, [pc, #40]	; (8011df8 <memp_free_pool+0x44>)
 8011dce:	f00d fd6d 	bl	801f8ac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d007      	beq.n	8011de8 <memp_free_pool+0x34>
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d004      	beq.n	8011de8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011dde:	6839      	ldr	r1, [r7, #0]
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f7ff ffbb 	bl	8011d5c <do_memp_free_pool>
 8011de6:	e000      	b.n	8011dea <memp_free_pool+0x36>
    return;
 8011de8:	bf00      	nop
}
 8011dea:	3708      	adds	r7, #8
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}
 8011df0:	080224e4 	.word	0x080224e4
 8011df4:	08022560 	.word	0x08022560
 8011df8:	08022538 	.word	0x08022538

08011dfc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	4603      	mov	r3, r0
 8011e04:	6039      	str	r1, [r7, #0]
 8011e06:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011e08:	79fb      	ldrb	r3, [r7, #7]
 8011e0a:	2b0c      	cmp	r3, #12
 8011e0c:	d907      	bls.n	8011e1e <memp_free+0x22>
 8011e0e:	4b0c      	ldr	r3, [pc, #48]	; (8011e40 <memp_free+0x44>)
 8011e10:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011e14:	490b      	ldr	r1, [pc, #44]	; (8011e44 <memp_free+0x48>)
 8011e16:	480c      	ldr	r0, [pc, #48]	; (8011e48 <memp_free+0x4c>)
 8011e18:	f00d fd48 	bl	801f8ac <iprintf>
 8011e1c:	e00c      	b.n	8011e38 <memp_free+0x3c>

  if (mem == NULL) {
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d008      	beq.n	8011e36 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011e24:	79fb      	ldrb	r3, [r7, #7]
 8011e26:	4a09      	ldr	r2, [pc, #36]	; (8011e4c <memp_free+0x50>)
 8011e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7ff ff94 	bl	8011d5c <do_memp_free_pool>
 8011e34:	e000      	b.n	8011e38 <memp_free+0x3c>
    return;
 8011e36:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011e38:	3708      	adds	r7, #8
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	080224e4 	.word	0x080224e4
 8011e44:	080225b4 	.word	0x080225b4
 8011e48:	08022538 	.word	0x08022538
 8011e4c:	08025164 	.word	0x08025164

08011e50 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011e50:	b480      	push	{r7}
 8011e52:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011e54:	bf00      	nop
 8011e56:	46bd      	mov	sp, r7
 8011e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5c:	4770      	bx	lr
	...

08011e60 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b086      	sub	sp, #24
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	60b9      	str	r1, [r7, #8]
 8011e6a:	607a      	str	r2, [r7, #4]
 8011e6c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d108      	bne.n	8011e86 <netif_add+0x26>
 8011e74:	4b5b      	ldr	r3, [pc, #364]	; (8011fe4 <netif_add+0x184>)
 8011e76:	f240 1227 	movw	r2, #295	; 0x127
 8011e7a:	495b      	ldr	r1, [pc, #364]	; (8011fe8 <netif_add+0x188>)
 8011e7c:	485b      	ldr	r0, [pc, #364]	; (8011fec <netif_add+0x18c>)
 8011e7e:	f00d fd15 	bl	801f8ac <iprintf>
 8011e82:	2300      	movs	r3, #0
 8011e84:	e0a9      	b.n	8011fda <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d108      	bne.n	8011e9e <netif_add+0x3e>
 8011e8c:	4b55      	ldr	r3, [pc, #340]	; (8011fe4 <netif_add+0x184>)
 8011e8e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011e92:	4957      	ldr	r1, [pc, #348]	; (8011ff0 <netif_add+0x190>)
 8011e94:	4855      	ldr	r0, [pc, #340]	; (8011fec <netif_add+0x18c>)
 8011e96:	f00d fd09 	bl	801f8ac <iprintf>
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	e09d      	b.n	8011fda <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d101      	bne.n	8011ea8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011ea4:	4b53      	ldr	r3, [pc, #332]	; (8011ff4 <netif_add+0x194>)
 8011ea6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d101      	bne.n	8011eb2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8011eae:	4b51      	ldr	r3, [pc, #324]	; (8011ff4 <netif_add+0x194>)
 8011eb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d101      	bne.n	8011ebc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011eb8:	4b4e      	ldr	r3, [pc, #312]	; (8011ff4 <netif_add+0x194>)
 8011eba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	4a49      	ldr	r2, [pc, #292]	; (8011ff8 <netif_add+0x198>)
 8011ed2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	2200      	movs	r2, #0
 8011ede:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	3324      	adds	r3, #36	; 0x24
 8011ee6:	2204      	movs	r2, #4
 8011ee8:	2100      	movs	r1, #0
 8011eea:	4618      	mov	r0, r3
 8011eec:	f00d fe34 	bl	801fb58 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	6a3a      	ldr	r2, [r7, #32]
 8011efa:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011efc:	4b3f      	ldr	r3, [pc, #252]	; (8011ffc <netif_add+0x19c>)
 8011efe:	781a      	ldrb	r2, [r3, #0]
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f0a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	687a      	ldr	r2, [r7, #4]
 8011f10:	68b9      	ldr	r1, [r7, #8]
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	f000 f914 	bl	8012140 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	4798      	blx	r3
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d001      	beq.n	8011f28 <netif_add+0xc8>
    return NULL;
 8011f24:	2300      	movs	r3, #0
 8011f26:	e058      	b.n	8011fda <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f2e:	2bff      	cmp	r3, #255	; 0xff
 8011f30:	d103      	bne.n	8011f3a <netif_add+0xda>
        netif->num = 0;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	2200      	movs	r2, #0
 8011f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011f3e:	4b30      	ldr	r3, [pc, #192]	; (8012000 <netif_add+0x1a0>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	617b      	str	r3, [r7, #20]
 8011f44:	e02b      	b.n	8011f9e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011f46:	697a      	ldr	r2, [r7, #20]
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d106      	bne.n	8011f5c <netif_add+0xfc>
 8011f4e:	4b25      	ldr	r3, [pc, #148]	; (8011fe4 <netif_add+0x184>)
 8011f50:	f240 128b 	movw	r2, #395	; 0x18b
 8011f54:	492b      	ldr	r1, [pc, #172]	; (8012004 <netif_add+0x1a4>)
 8011f56:	4825      	ldr	r0, [pc, #148]	; (8011fec <netif_add+0x18c>)
 8011f58:	f00d fca8 	bl	801f8ac <iprintf>
        num_netifs++;
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	3301      	adds	r3, #1
 8011f60:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	2bff      	cmp	r3, #255	; 0xff
 8011f66:	dd06      	ble.n	8011f76 <netif_add+0x116>
 8011f68:	4b1e      	ldr	r3, [pc, #120]	; (8011fe4 <netif_add+0x184>)
 8011f6a:	f240 128d 	movw	r2, #397	; 0x18d
 8011f6e:	4926      	ldr	r1, [pc, #152]	; (8012008 <netif_add+0x1a8>)
 8011f70:	481e      	ldr	r0, [pc, #120]	; (8011fec <netif_add+0x18c>)
 8011f72:	f00d fc9b 	bl	801f8ac <iprintf>
        if (netif2->num == netif->num) {
 8011f76:	697b      	ldr	r3, [r7, #20]
 8011f78:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d108      	bne.n	8011f98 <netif_add+0x138>
          netif->num++;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f8c:	3301      	adds	r3, #1
 8011f8e:	b2da      	uxtb	r2, r3
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8011f96:	e005      	b.n	8011fa4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	617b      	str	r3, [r7, #20]
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d1d0      	bne.n	8011f46 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1be      	bne.n	8011f28 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011fb0:	2bfe      	cmp	r3, #254	; 0xfe
 8011fb2:	d103      	bne.n	8011fbc <netif_add+0x15c>
    netif_num = 0;
 8011fb4:	4b11      	ldr	r3, [pc, #68]	; (8011ffc <netif_add+0x19c>)
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	701a      	strb	r2, [r3, #0]
 8011fba:	e006      	b.n	8011fca <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	b2da      	uxtb	r2, r3
 8011fc6:	4b0d      	ldr	r3, [pc, #52]	; (8011ffc <netif_add+0x19c>)
 8011fc8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011fca:	4b0d      	ldr	r3, [pc, #52]	; (8012000 <netif_add+0x1a0>)
 8011fcc:	681a      	ldr	r2, [r3, #0]
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011fd2:	4a0b      	ldr	r2, [pc, #44]	; (8012000 <netif_add+0x1a0>)
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3718      	adds	r7, #24
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	080225d0 	.word	0x080225d0
 8011fe8:	08022664 	.word	0x08022664
 8011fec:	08022620 	.word	0x08022620
 8011ff0:	08022680 	.word	0x08022680
 8011ff4:	080251e8 	.word	0x080251e8
 8011ff8:	08012423 	.word	0x08012423
 8011ffc:	200101c8 	.word	0x200101c8
 8012000:	200101c0 	.word	0x200101c0
 8012004:	080226a4 	.word	0x080226a4
 8012008:	080226b8 	.word	0x080226b8

0801200c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b082      	sub	sp, #8
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8012016:	6839      	ldr	r1, [r7, #0]
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f002 feb5 	bl	8014d88 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801201e:	6839      	ldr	r1, [r7, #0]
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f007 ff49 	bl	8019eb8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8012026:	bf00      	nop
 8012028:	3708      	adds	r7, #8
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}
	...

08012030 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b086      	sub	sp, #24
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d106      	bne.n	8012050 <netif_do_set_ipaddr+0x20>
 8012042:	4b1d      	ldr	r3, [pc, #116]	; (80120b8 <netif_do_set_ipaddr+0x88>)
 8012044:	f240 12cb 	movw	r2, #459	; 0x1cb
 8012048:	491c      	ldr	r1, [pc, #112]	; (80120bc <netif_do_set_ipaddr+0x8c>)
 801204a:	481d      	ldr	r0, [pc, #116]	; (80120c0 <netif_do_set_ipaddr+0x90>)
 801204c:	f00d fc2e 	bl	801f8ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d106      	bne.n	8012064 <netif_do_set_ipaddr+0x34>
 8012056:	4b18      	ldr	r3, [pc, #96]	; (80120b8 <netif_do_set_ipaddr+0x88>)
 8012058:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801205c:	4917      	ldr	r1, [pc, #92]	; (80120bc <netif_do_set_ipaddr+0x8c>)
 801205e:	4818      	ldr	r0, [pc, #96]	; (80120c0 <netif_do_set_ipaddr+0x90>)
 8012060:	f00d fc24 	bl	801f8ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	3304      	adds	r3, #4
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	429a      	cmp	r2, r3
 8012070:	d01c      	beq.n	80120ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	3304      	adds	r3, #4
 801207c:	681a      	ldr	r2, [r3, #0]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012082:	f107 0314 	add.w	r3, r7, #20
 8012086:	4619      	mov	r1, r3
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f7ff ffbf 	bl	801200c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d002      	beq.n	801209a <netif_do_set_ipaddr+0x6a>
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	e000      	b.n	801209c <netif_do_set_ipaddr+0x6c>
 801209a:	2300      	movs	r3, #0
 801209c:	68fa      	ldr	r2, [r7, #12]
 801209e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80120a0:	2101      	movs	r1, #1
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f000 f8d2 	bl	801224c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80120a8:	2301      	movs	r3, #1
 80120aa:	e000      	b.n	80120ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80120ac:	2300      	movs	r3, #0
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3718      	adds	r7, #24
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	080225d0 	.word	0x080225d0
 80120bc:	080226e8 	.word	0x080226e8
 80120c0:	08022620 	.word	0x08022620

080120c4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80120c4:	b480      	push	{r7}
 80120c6:	b085      	sub	sp, #20
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	681a      	ldr	r2, [r3, #0]
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	3308      	adds	r3, #8
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d00a      	beq.n	80120f4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d002      	beq.n	80120ea <netif_do_set_netmask+0x26>
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	e000      	b.n	80120ec <netif_do_set_netmask+0x28>
 80120ea:	2300      	movs	r3, #0
 80120ec:	68fa      	ldr	r2, [r7, #12]
 80120ee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80120f0:	2301      	movs	r3, #1
 80120f2:	e000      	b.n	80120f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80120f4:	2300      	movs	r3, #0
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3714      	adds	r7, #20
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr

08012102 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012102:	b480      	push	{r7}
 8012104:	b085      	sub	sp, #20
 8012106:	af00      	add	r7, sp, #0
 8012108:	60f8      	str	r0, [r7, #12]
 801210a:	60b9      	str	r1, [r7, #8]
 801210c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	330c      	adds	r3, #12
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	429a      	cmp	r2, r3
 801211a:	d00a      	beq.n	8012132 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d002      	beq.n	8012128 <netif_do_set_gw+0x26>
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	e000      	b.n	801212a <netif_do_set_gw+0x28>
 8012128:	2300      	movs	r3, #0
 801212a:	68fa      	ldr	r2, [r7, #12]
 801212c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801212e:	2301      	movs	r3, #1
 8012130:	e000      	b.n	8012134 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012132:	2300      	movs	r3, #0
}
 8012134:	4618      	mov	r0, r3
 8012136:	3714      	adds	r7, #20
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr

08012140 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b088      	sub	sp, #32
 8012144:	af00      	add	r7, sp, #0
 8012146:	60f8      	str	r0, [r7, #12]
 8012148:	60b9      	str	r1, [r7, #8]
 801214a:	607a      	str	r2, [r7, #4]
 801214c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801214e:	2300      	movs	r3, #0
 8012150:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012152:	2300      	movs	r3, #0
 8012154:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d101      	bne.n	8012160 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801215c:	4b1c      	ldr	r3, [pc, #112]	; (80121d0 <netif_set_addr+0x90>)
 801215e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d101      	bne.n	801216a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012166:	4b1a      	ldr	r3, [pc, #104]	; (80121d0 <netif_set_addr+0x90>)
 8012168:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d101      	bne.n	8012174 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012170:	4b17      	ldr	r3, [pc, #92]	; (80121d0 <netif_set_addr+0x90>)
 8012172:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d003      	beq.n	8012182 <netif_set_addr+0x42>
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d101      	bne.n	8012186 <netif_set_addr+0x46>
 8012182:	2301      	movs	r3, #1
 8012184:	e000      	b.n	8012188 <netif_set_addr+0x48>
 8012186:	2300      	movs	r3, #0
 8012188:	617b      	str	r3, [r7, #20]
  if (remove) {
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d006      	beq.n	801219e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012190:	f107 0310 	add.w	r3, r7, #16
 8012194:	461a      	mov	r2, r3
 8012196:	68b9      	ldr	r1, [r7, #8]
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f7ff ff49 	bl	8012030 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801219e:	69fa      	ldr	r2, [r7, #28]
 80121a0:	6879      	ldr	r1, [r7, #4]
 80121a2:	68f8      	ldr	r0, [r7, #12]
 80121a4:	f7ff ff8e 	bl	80120c4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80121a8:	69ba      	ldr	r2, [r7, #24]
 80121aa:	6839      	ldr	r1, [r7, #0]
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f7ff ffa8 	bl	8012102 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d106      	bne.n	80121c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80121b8:	f107 0310 	add.w	r3, r7, #16
 80121bc:	461a      	mov	r2, r3
 80121be:	68b9      	ldr	r1, [r7, #8]
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f7ff ff35 	bl	8012030 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80121c6:	bf00      	nop
 80121c8:	3720      	adds	r7, #32
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	080251e8 	.word	0x080251e8

080121d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80121d4:	b480      	push	{r7}
 80121d6:	b083      	sub	sp, #12
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80121dc:	4a04      	ldr	r2, [pc, #16]	; (80121f0 <netif_set_default+0x1c>)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80121e2:	bf00      	nop
 80121e4:	370c      	adds	r7, #12
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr
 80121ee:	bf00      	nop
 80121f0:	200101c4 	.word	0x200101c4

080121f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d107      	bne.n	8012212 <netif_set_up+0x1e>
 8012202:	4b0f      	ldr	r3, [pc, #60]	; (8012240 <netif_set_up+0x4c>)
 8012204:	f44f 7254 	mov.w	r2, #848	; 0x350
 8012208:	490e      	ldr	r1, [pc, #56]	; (8012244 <netif_set_up+0x50>)
 801220a:	480f      	ldr	r0, [pc, #60]	; (8012248 <netif_set_up+0x54>)
 801220c:	f00d fb4e 	bl	801f8ac <iprintf>
 8012210:	e013      	b.n	801223a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012218:	f003 0301 	and.w	r3, r3, #1
 801221c:	2b00      	cmp	r3, #0
 801221e:	d10c      	bne.n	801223a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012226:	f043 0301 	orr.w	r3, r3, #1
 801222a:	b2da      	uxtb	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012232:	2103      	movs	r1, #3
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 f809 	bl	801224c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	080225d0 	.word	0x080225d0
 8012244:	08022758 	.word	0x08022758
 8012248:	08022620 	.word	0x08022620

0801224c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	460b      	mov	r3, r1
 8012256:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <netif_issue_reports+0x20>
 801225e:	4b18      	ldr	r3, [pc, #96]	; (80122c0 <netif_issue_reports+0x74>)
 8012260:	f240 326d 	movw	r2, #877	; 0x36d
 8012264:	4917      	ldr	r1, [pc, #92]	; (80122c4 <netif_issue_reports+0x78>)
 8012266:	4818      	ldr	r0, [pc, #96]	; (80122c8 <netif_issue_reports+0x7c>)
 8012268:	f00d fb20 	bl	801f8ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012272:	f003 0304 	and.w	r3, r3, #4
 8012276:	2b00      	cmp	r3, #0
 8012278:	d01e      	beq.n	80122b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012280:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012284:	2b00      	cmp	r3, #0
 8012286:	d017      	beq.n	80122b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012288:	78fb      	ldrb	r3, [r7, #3]
 801228a:	f003 0301 	and.w	r3, r3, #1
 801228e:	2b00      	cmp	r3, #0
 8012290:	d013      	beq.n	80122ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	3304      	adds	r3, #4
 8012296:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012298:	2b00      	cmp	r3, #0
 801229a:	d00e      	beq.n	80122ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80122a2:	f003 0308 	and.w	r3, r3, #8
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d007      	beq.n	80122ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	3304      	adds	r3, #4
 80122ae:	4619      	mov	r1, r3
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f00a fc01 	bl	801cab8 <etharp_request>
 80122b6:	e000      	b.n	80122ba <netif_issue_reports+0x6e>
    return;
 80122b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80122ba:	3708      	adds	r7, #8
 80122bc:	46bd      	mov	sp, r7
 80122be:	bd80      	pop	{r7, pc}
 80122c0:	080225d0 	.word	0x080225d0
 80122c4:	08022774 	.word	0x08022774
 80122c8:	08022620 	.word	0x08022620

080122cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d107      	bne.n	80122ea <netif_set_down+0x1e>
 80122da:	4b12      	ldr	r3, [pc, #72]	; (8012324 <netif_set_down+0x58>)
 80122dc:	f240 329b 	movw	r2, #923	; 0x39b
 80122e0:	4911      	ldr	r1, [pc, #68]	; (8012328 <netif_set_down+0x5c>)
 80122e2:	4812      	ldr	r0, [pc, #72]	; (801232c <netif_set_down+0x60>)
 80122e4:	f00d fae2 	bl	801f8ac <iprintf>
 80122e8:	e019      	b.n	801231e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80122f0:	f003 0301 	and.w	r3, r3, #1
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d012      	beq.n	801231e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80122fe:	f023 0301 	bic.w	r3, r3, #1
 8012302:	b2da      	uxtb	r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012310:	f003 0308 	and.w	r3, r3, #8
 8012314:	2b00      	cmp	r3, #0
 8012316:	d002      	beq.n	801231e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f009 ff87 	bl	801c22c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801231e:	3708      	adds	r7, #8
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	080225d0 	.word	0x080225d0
 8012328:	08022798 	.word	0x08022798
 801232c:	08022620 	.word	0x08022620

08012330 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d107      	bne.n	801234e <netif_set_link_up+0x1e>
 801233e:	4b15      	ldr	r3, [pc, #84]	; (8012394 <netif_set_link_up+0x64>)
 8012340:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012344:	4914      	ldr	r1, [pc, #80]	; (8012398 <netif_set_link_up+0x68>)
 8012346:	4815      	ldr	r0, [pc, #84]	; (801239c <netif_set_link_up+0x6c>)
 8012348:	f00d fab0 	bl	801f8ac <iprintf>
 801234c:	e01e      	b.n	801238c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012354:	f003 0304 	and.w	r3, r3, #4
 8012358:	2b00      	cmp	r3, #0
 801235a:	d117      	bne.n	801238c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012362:	f043 0304 	orr.w	r3, r3, #4
 8012366:	b2da      	uxtb	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f008 f9cc 	bl	801a70c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012374:	2103      	movs	r1, #3
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f7ff ff68 	bl	801224c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	69db      	ldr	r3, [r3, #28]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d003      	beq.n	801238c <netif_set_link_up+0x5c>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	69db      	ldr	r3, [r3, #28]
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801238c:	3708      	adds	r7, #8
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	080225d0 	.word	0x080225d0
 8012398:	080227b8 	.word	0x080227b8
 801239c:	08022620 	.word	0x08022620

080123a0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d107      	bne.n	80123be <netif_set_link_down+0x1e>
 80123ae:	4b11      	ldr	r3, [pc, #68]	; (80123f4 <netif_set_link_down+0x54>)
 80123b0:	f240 4206 	movw	r2, #1030	; 0x406
 80123b4:	4910      	ldr	r1, [pc, #64]	; (80123f8 <netif_set_link_down+0x58>)
 80123b6:	4811      	ldr	r0, [pc, #68]	; (80123fc <netif_set_link_down+0x5c>)
 80123b8:	f00d fa78 	bl	801f8ac <iprintf>
 80123bc:	e017      	b.n	80123ee <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80123c4:	f003 0304 	and.w	r3, r3, #4
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d010      	beq.n	80123ee <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80123d2:	f023 0304 	bic.w	r3, r3, #4
 80123d6:	b2da      	uxtb	r2, r3
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	69db      	ldr	r3, [r3, #28]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d003      	beq.n	80123ee <netif_set_link_down+0x4e>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	69db      	ldr	r3, [r3, #28]
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	080225d0 	.word	0x080225d0
 80123f8:	080227dc 	.word	0x080227dc
 80123fc:	08022620 	.word	0x08022620

08012400 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012400:	b480      	push	{r7}
 8012402:	b083      	sub	sp, #12
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d002      	beq.n	8012416 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	683a      	ldr	r2, [r7, #0]
 8012414:	61da      	str	r2, [r3, #28]
  }
}
 8012416:	bf00      	nop
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr

08012422 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012422:	b480      	push	{r7}
 8012424:	b085      	sub	sp, #20
 8012426:	af00      	add	r7, sp, #0
 8012428:	60f8      	str	r0, [r7, #12]
 801242a:	60b9      	str	r1, [r7, #8]
 801242c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801242e:	f06f 030b 	mvn.w	r3, #11
}
 8012432:	4618      	mov	r0, r3
 8012434:	3714      	adds	r7, #20
 8012436:	46bd      	mov	sp, r7
 8012438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243c:	4770      	bx	lr
	...

08012440 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012440:	b480      	push	{r7}
 8012442:	b085      	sub	sp, #20
 8012444:	af00      	add	r7, sp, #0
 8012446:	4603      	mov	r3, r0
 8012448:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801244a:	79fb      	ldrb	r3, [r7, #7]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d013      	beq.n	8012478 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012450:	4b0d      	ldr	r3, [pc, #52]	; (8012488 <netif_get_by_index+0x48>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	60fb      	str	r3, [r7, #12]
 8012456:	e00c      	b.n	8012472 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801245e:	3301      	adds	r3, #1
 8012460:	b2db      	uxtb	r3, r3
 8012462:	79fa      	ldrb	r2, [r7, #7]
 8012464:	429a      	cmp	r2, r3
 8012466:	d101      	bne.n	801246c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	e006      	b.n	801247a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	60fb      	str	r3, [r7, #12]
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d1ef      	bne.n	8012458 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012478:	2300      	movs	r3, #0
}
 801247a:	4618      	mov	r0, r3
 801247c:	3714      	adds	r7, #20
 801247e:	46bd      	mov	sp, r7
 8012480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop
 8012488:	200101c0 	.word	0x200101c0

0801248c <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d101      	bne.n	801249e <netif_find+0x12>
    return NULL;
 801249a:	2300      	movs	r3, #0
 801249c:	e028      	b.n	80124f0 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	3302      	adds	r3, #2
 80124a2:	4618      	mov	r0, r3
 80124a4:	f00c ffa4 	bl	801f3f0 <atoi>
 80124a8:	4603      	mov	r3, r0
 80124aa:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 80124ac:	4b12      	ldr	r3, [pc, #72]	; (80124f8 <netif_find+0x6c>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	60fb      	str	r3, [r7, #12]
 80124b2:	e019      	b.n	80124e8 <netif_find+0x5c>
    if (num == netif->num &&
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80124ba:	7afa      	ldrb	r2, [r7, #11]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d110      	bne.n	80124e2 <netif_find+0x56>
        name[0] == netif->name[0] &&
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	781a      	ldrb	r2, [r3, #0]
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if (num == netif->num &&
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d109      	bne.n	80124e2 <netif_find+0x56>
        name[1] == netif->name[1]) {
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	3301      	adds	r3, #1
 80124d2:	781a      	ldrb	r2, [r3, #0]
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
        name[0] == netif->name[0] &&
 80124da:	429a      	cmp	r2, r3
 80124dc:	d101      	bne.n	80124e2 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	e006      	b.n	80124f0 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	60fb      	str	r3, [r7, #12]
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d1e2      	bne.n	80124b4 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 80124ee:	2300      	movs	r3, #0
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3710      	adds	r7, #16
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	200101c0 	.word	0x200101c0

080124fc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012502:	f00c f847 	bl	801e594 <sys_arch_protect>
 8012506:	6038      	str	r0, [r7, #0]
 8012508:	4b0d      	ldr	r3, [pc, #52]	; (8012540 <pbuf_free_ooseq+0x44>)
 801250a:	2200      	movs	r2, #0
 801250c:	701a      	strb	r2, [r3, #0]
 801250e:	6838      	ldr	r0, [r7, #0]
 8012510:	f00c f84e 	bl	801e5b0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012514:	4b0b      	ldr	r3, [pc, #44]	; (8012544 <pbuf_free_ooseq+0x48>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	607b      	str	r3, [r7, #4]
 801251a:	e00a      	b.n	8012532 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012520:	2b00      	cmp	r3, #0
 8012522:	d003      	beq.n	801252c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f002 fc6d 	bl	8014e04 <tcp_free_ooseq>
      return;
 801252a:	e005      	b.n	8012538 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	607b      	str	r3, [r7, #4]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d1f1      	bne.n	801251c <pbuf_free_ooseq+0x20>
    }
  }
}
 8012538:	3708      	adds	r7, #8
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	200101c9 	.word	0x200101c9
 8012544:	200101d8 	.word	0x200101d8

08012548 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012550:	f7ff ffd4 	bl	80124fc <pbuf_free_ooseq>
}
 8012554:	bf00      	nop
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012562:	f00c f817 	bl	801e594 <sys_arch_protect>
 8012566:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012568:	4b0f      	ldr	r3, [pc, #60]	; (80125a8 <pbuf_pool_is_empty+0x4c>)
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801256e:	4b0e      	ldr	r3, [pc, #56]	; (80125a8 <pbuf_pool_is_empty+0x4c>)
 8012570:	2201      	movs	r2, #1
 8012572:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f00c f81b 	bl	801e5b0 <sys_arch_unprotect>

  if (!queued) {
 801257a:	78fb      	ldrb	r3, [r7, #3]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d10f      	bne.n	80125a0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012580:	2100      	movs	r1, #0
 8012582:	480a      	ldr	r0, [pc, #40]	; (80125ac <pbuf_pool_is_empty+0x50>)
 8012584:	f7fe fe4c 	bl	8011220 <tcpip_try_callback>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d008      	beq.n	80125a0 <pbuf_pool_is_empty+0x44>
 801258e:	f00c f801 	bl	801e594 <sys_arch_protect>
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	4b04      	ldr	r3, [pc, #16]	; (80125a8 <pbuf_pool_is_empty+0x4c>)
 8012596:	2200      	movs	r2, #0
 8012598:	701a      	strb	r2, [r3, #0]
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f00c f808 	bl	801e5b0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80125a0:	bf00      	nop
 80125a2:	3708      	adds	r7, #8
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}
 80125a8:	200101c9 	.word	0x200101c9
 80125ac:	08012549 	.word	0x08012549

080125b0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80125b0:	b480      	push	{r7}
 80125b2:	b085      	sub	sp, #20
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	60f8      	str	r0, [r7, #12]
 80125b8:	60b9      	str	r1, [r7, #8]
 80125ba:	4611      	mov	r1, r2
 80125bc:	461a      	mov	r2, r3
 80125be:	460b      	mov	r3, r1
 80125c0:	80fb      	strh	r3, [r7, #6]
 80125c2:	4613      	mov	r3, r2
 80125c4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2200      	movs	r2, #0
 80125ca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	68ba      	ldr	r2, [r7, #8]
 80125d0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	88fa      	ldrh	r2, [r7, #6]
 80125d6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	88ba      	ldrh	r2, [r7, #4]
 80125dc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80125de:	8b3b      	ldrh	r3, [r7, #24]
 80125e0:	b2da      	uxtb	r2, r3
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	7f3a      	ldrb	r2, [r7, #28]
 80125ea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2201      	movs	r2, #1
 80125f0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	2200      	movs	r2, #0
 80125f6:	73da      	strb	r2, [r3, #15]
}
 80125f8:	bf00      	nop
 80125fa:	3714      	adds	r7, #20
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr

08012604 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b08c      	sub	sp, #48	; 0x30
 8012608:	af02      	add	r7, sp, #8
 801260a:	4603      	mov	r3, r0
 801260c:	71fb      	strb	r3, [r7, #7]
 801260e:	460b      	mov	r3, r1
 8012610:	80bb      	strh	r3, [r7, #4]
 8012612:	4613      	mov	r3, r2
 8012614:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012616:	79fb      	ldrb	r3, [r7, #7]
 8012618:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801261a:	887b      	ldrh	r3, [r7, #2]
 801261c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012620:	d07f      	beq.n	8012722 <pbuf_alloc+0x11e>
 8012622:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012626:	f300 80c8 	bgt.w	80127ba <pbuf_alloc+0x1b6>
 801262a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801262e:	d010      	beq.n	8012652 <pbuf_alloc+0x4e>
 8012630:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012634:	f300 80c1 	bgt.w	80127ba <pbuf_alloc+0x1b6>
 8012638:	2b01      	cmp	r3, #1
 801263a:	d002      	beq.n	8012642 <pbuf_alloc+0x3e>
 801263c:	2b41      	cmp	r3, #65	; 0x41
 801263e:	f040 80bc 	bne.w	80127ba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012642:	887a      	ldrh	r2, [r7, #2]
 8012644:	88bb      	ldrh	r3, [r7, #4]
 8012646:	4619      	mov	r1, r3
 8012648:	2000      	movs	r0, #0
 801264a:	f000 f8d1 	bl	80127f0 <pbuf_alloc_reference>
 801264e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012650:	e0bd      	b.n	80127ce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012652:	2300      	movs	r3, #0
 8012654:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012656:	2300      	movs	r3, #0
 8012658:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801265a:	88bb      	ldrh	r3, [r7, #4]
 801265c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801265e:	200c      	movs	r0, #12
 8012660:	f7ff fb56 	bl	8011d10 <memp_malloc>
 8012664:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d109      	bne.n	8012680 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801266c:	f7ff ff76 	bl	801255c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012672:	2b00      	cmp	r3, #0
 8012674:	d002      	beq.n	801267c <pbuf_alloc+0x78>
            pbuf_free(p);
 8012676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012678:	f000 faa8 	bl	8012bcc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801267c:	2300      	movs	r3, #0
 801267e:	e0a7      	b.n	80127d0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012680:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012682:	3303      	adds	r3, #3
 8012684:	b29b      	uxth	r3, r3
 8012686:	f023 0303 	bic.w	r3, r3, #3
 801268a:	b29b      	uxth	r3, r3
 801268c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012690:	b29b      	uxth	r3, r3
 8012692:	8b7a      	ldrh	r2, [r7, #26]
 8012694:	4293      	cmp	r3, r2
 8012696:	bf28      	it	cs
 8012698:	4613      	movcs	r3, r2
 801269a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801269c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801269e:	3310      	adds	r3, #16
 80126a0:	693a      	ldr	r2, [r7, #16]
 80126a2:	4413      	add	r3, r2
 80126a4:	3303      	adds	r3, #3
 80126a6:	f023 0303 	bic.w	r3, r3, #3
 80126aa:	4618      	mov	r0, r3
 80126ac:	89f9      	ldrh	r1, [r7, #14]
 80126ae:	8b7a      	ldrh	r2, [r7, #26]
 80126b0:	2300      	movs	r3, #0
 80126b2:	9301      	str	r3, [sp, #4]
 80126b4:	887b      	ldrh	r3, [r7, #2]
 80126b6:	9300      	str	r3, [sp, #0]
 80126b8:	460b      	mov	r3, r1
 80126ba:	4601      	mov	r1, r0
 80126bc:	6938      	ldr	r0, [r7, #16]
 80126be:	f7ff ff77 	bl	80125b0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	f003 0303 	and.w	r3, r3, #3
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d006      	beq.n	80126dc <pbuf_alloc+0xd8>
 80126ce:	4b42      	ldr	r3, [pc, #264]	; (80127d8 <pbuf_alloc+0x1d4>)
 80126d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126d4:	4941      	ldr	r1, [pc, #260]	; (80127dc <pbuf_alloc+0x1d8>)
 80126d6:	4842      	ldr	r0, [pc, #264]	; (80127e0 <pbuf_alloc+0x1dc>)
 80126d8:	f00d f8e8 	bl	801f8ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80126dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126de:	3303      	adds	r3, #3
 80126e0:	f023 0303 	bic.w	r3, r3, #3
 80126e4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80126e8:	d106      	bne.n	80126f8 <pbuf_alloc+0xf4>
 80126ea:	4b3b      	ldr	r3, [pc, #236]	; (80127d8 <pbuf_alloc+0x1d4>)
 80126ec:	f44f 7281 	mov.w	r2, #258	; 0x102
 80126f0:	493c      	ldr	r1, [pc, #240]	; (80127e4 <pbuf_alloc+0x1e0>)
 80126f2:	483b      	ldr	r0, [pc, #236]	; (80127e0 <pbuf_alloc+0x1dc>)
 80126f4:	f00d f8da 	bl	801f8ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80126f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d102      	bne.n	8012704 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	627b      	str	r3, [r7, #36]	; 0x24
 8012702:	e002      	b.n	801270a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	693a      	ldr	r2, [r7, #16]
 8012708:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801270e:	8b7a      	ldrh	r2, [r7, #26]
 8012710:	89fb      	ldrh	r3, [r7, #14]
 8012712:	1ad3      	subs	r3, r2, r3
 8012714:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012716:	2300      	movs	r3, #0
 8012718:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801271a:	8b7b      	ldrh	r3, [r7, #26]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d19e      	bne.n	801265e <pbuf_alloc+0x5a>
      break;
 8012720:	e055      	b.n	80127ce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012722:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012724:	3303      	adds	r3, #3
 8012726:	b29b      	uxth	r3, r3
 8012728:	f023 0303 	bic.w	r3, r3, #3
 801272c:	b29a      	uxth	r2, r3
 801272e:	88bb      	ldrh	r3, [r7, #4]
 8012730:	3303      	adds	r3, #3
 8012732:	b29b      	uxth	r3, r3
 8012734:	f023 0303 	bic.w	r3, r3, #3
 8012738:	b29b      	uxth	r3, r3
 801273a:	4413      	add	r3, r2
 801273c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801273e:	8b3b      	ldrh	r3, [r7, #24]
 8012740:	3310      	adds	r3, #16
 8012742:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012744:	8b3a      	ldrh	r2, [r7, #24]
 8012746:	88bb      	ldrh	r3, [r7, #4]
 8012748:	3303      	adds	r3, #3
 801274a:	f023 0303 	bic.w	r3, r3, #3
 801274e:	429a      	cmp	r2, r3
 8012750:	d306      	bcc.n	8012760 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012752:	8afa      	ldrh	r2, [r7, #22]
 8012754:	88bb      	ldrh	r3, [r7, #4]
 8012756:	3303      	adds	r3, #3
 8012758:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801275c:	429a      	cmp	r2, r3
 801275e:	d201      	bcs.n	8012764 <pbuf_alloc+0x160>
        return NULL;
 8012760:	2300      	movs	r3, #0
 8012762:	e035      	b.n	80127d0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012764:	8afb      	ldrh	r3, [r7, #22]
 8012766:	4618      	mov	r0, r3
 8012768:	f7ff f92e 	bl	80119c8 <mem_malloc>
 801276c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012770:	2b00      	cmp	r3, #0
 8012772:	d101      	bne.n	8012778 <pbuf_alloc+0x174>
        return NULL;
 8012774:	2300      	movs	r3, #0
 8012776:	e02b      	b.n	80127d0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012778:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801277a:	3310      	adds	r3, #16
 801277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801277e:	4413      	add	r3, r2
 8012780:	3303      	adds	r3, #3
 8012782:	f023 0303 	bic.w	r3, r3, #3
 8012786:	4618      	mov	r0, r3
 8012788:	88b9      	ldrh	r1, [r7, #4]
 801278a:	88ba      	ldrh	r2, [r7, #4]
 801278c:	2300      	movs	r3, #0
 801278e:	9301      	str	r3, [sp, #4]
 8012790:	887b      	ldrh	r3, [r7, #2]
 8012792:	9300      	str	r3, [sp, #0]
 8012794:	460b      	mov	r3, r1
 8012796:	4601      	mov	r1, r0
 8012798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801279a:	f7ff ff09 	bl	80125b0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	f003 0303 	and.w	r3, r3, #3
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d010      	beq.n	80127cc <pbuf_alloc+0x1c8>
 80127aa:	4b0b      	ldr	r3, [pc, #44]	; (80127d8 <pbuf_alloc+0x1d4>)
 80127ac:	f44f 7291 	mov.w	r2, #290	; 0x122
 80127b0:	490d      	ldr	r1, [pc, #52]	; (80127e8 <pbuf_alloc+0x1e4>)
 80127b2:	480b      	ldr	r0, [pc, #44]	; (80127e0 <pbuf_alloc+0x1dc>)
 80127b4:	f00d f87a 	bl	801f8ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80127b8:	e008      	b.n	80127cc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80127ba:	4b07      	ldr	r3, [pc, #28]	; (80127d8 <pbuf_alloc+0x1d4>)
 80127bc:	f240 1227 	movw	r2, #295	; 0x127
 80127c0:	490a      	ldr	r1, [pc, #40]	; (80127ec <pbuf_alloc+0x1e8>)
 80127c2:	4807      	ldr	r0, [pc, #28]	; (80127e0 <pbuf_alloc+0x1dc>)
 80127c4:	f00d f872 	bl	801f8ac <iprintf>
      return NULL;
 80127c8:	2300      	movs	r3, #0
 80127ca:	e001      	b.n	80127d0 <pbuf_alloc+0x1cc>
      break;
 80127cc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80127ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3728      	adds	r7, #40	; 0x28
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	08022800 	.word	0x08022800
 80127dc:	08022830 	.word	0x08022830
 80127e0:	08022860 	.word	0x08022860
 80127e4:	08022888 	.word	0x08022888
 80127e8:	080228bc 	.word	0x080228bc
 80127ec:	080228e8 	.word	0x080228e8

080127f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b086      	sub	sp, #24
 80127f4:	af02      	add	r7, sp, #8
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	460b      	mov	r3, r1
 80127fa:	807b      	strh	r3, [r7, #2]
 80127fc:	4613      	mov	r3, r2
 80127fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012800:	883b      	ldrh	r3, [r7, #0]
 8012802:	2b41      	cmp	r3, #65	; 0x41
 8012804:	d009      	beq.n	801281a <pbuf_alloc_reference+0x2a>
 8012806:	883b      	ldrh	r3, [r7, #0]
 8012808:	2b01      	cmp	r3, #1
 801280a:	d006      	beq.n	801281a <pbuf_alloc_reference+0x2a>
 801280c:	4b0f      	ldr	r3, [pc, #60]	; (801284c <pbuf_alloc_reference+0x5c>)
 801280e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012812:	490f      	ldr	r1, [pc, #60]	; (8012850 <pbuf_alloc_reference+0x60>)
 8012814:	480f      	ldr	r0, [pc, #60]	; (8012854 <pbuf_alloc_reference+0x64>)
 8012816:	f00d f849 	bl	801f8ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801281a:	200b      	movs	r0, #11
 801281c:	f7ff fa78 	bl	8011d10 <memp_malloc>
 8012820:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d101      	bne.n	801282c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012828:	2300      	movs	r3, #0
 801282a:	e00b      	b.n	8012844 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801282c:	8879      	ldrh	r1, [r7, #2]
 801282e:	887a      	ldrh	r2, [r7, #2]
 8012830:	2300      	movs	r3, #0
 8012832:	9301      	str	r3, [sp, #4]
 8012834:	883b      	ldrh	r3, [r7, #0]
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	460b      	mov	r3, r1
 801283a:	6879      	ldr	r1, [r7, #4]
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f7ff feb7 	bl	80125b0 <pbuf_init_alloced_pbuf>
  return p;
 8012842:	68fb      	ldr	r3, [r7, #12]
}
 8012844:	4618      	mov	r0, r3
 8012846:	3710      	adds	r7, #16
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}
 801284c:	08022800 	.word	0x08022800
 8012850:	08022904 	.word	0x08022904
 8012854:	08022860 	.word	0x08022860

08012858 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b088      	sub	sp, #32
 801285c:	af02      	add	r7, sp, #8
 801285e:	607b      	str	r3, [r7, #4]
 8012860:	4603      	mov	r3, r0
 8012862:	73fb      	strb	r3, [r7, #15]
 8012864:	460b      	mov	r3, r1
 8012866:	81bb      	strh	r3, [r7, #12]
 8012868:	4613      	mov	r3, r2
 801286a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801286c:	7bfb      	ldrb	r3, [r7, #15]
 801286e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012870:	8a7b      	ldrh	r3, [r7, #18]
 8012872:	3303      	adds	r3, #3
 8012874:	f023 0203 	bic.w	r2, r3, #3
 8012878:	89bb      	ldrh	r3, [r7, #12]
 801287a:	441a      	add	r2, r3
 801287c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801287e:	429a      	cmp	r2, r3
 8012880:	d901      	bls.n	8012886 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012882:	2300      	movs	r3, #0
 8012884:	e018      	b.n	80128b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012886:	6a3b      	ldr	r3, [r7, #32]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d007      	beq.n	801289c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801288c:	8a7b      	ldrh	r3, [r7, #18]
 801288e:	3303      	adds	r3, #3
 8012890:	f023 0303 	bic.w	r3, r3, #3
 8012894:	6a3a      	ldr	r2, [r7, #32]
 8012896:	4413      	add	r3, r2
 8012898:	617b      	str	r3, [r7, #20]
 801289a:	e001      	b.n	80128a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801289c:	2300      	movs	r3, #0
 801289e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	89b9      	ldrh	r1, [r7, #12]
 80128a4:	89ba      	ldrh	r2, [r7, #12]
 80128a6:	2302      	movs	r3, #2
 80128a8:	9301      	str	r3, [sp, #4]
 80128aa:	897b      	ldrh	r3, [r7, #10]
 80128ac:	9300      	str	r3, [sp, #0]
 80128ae:	460b      	mov	r3, r1
 80128b0:	6979      	ldr	r1, [r7, #20]
 80128b2:	f7ff fe7d 	bl	80125b0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80128b6:	687b      	ldr	r3, [r7, #4]
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3718      	adds	r7, #24
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}

080128c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b084      	sub	sp, #16
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	460b      	mov	r3, r1
 80128ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d106      	bne.n	80128e0 <pbuf_realloc+0x20>
 80128d2:	4b3a      	ldr	r3, [pc, #232]	; (80129bc <pbuf_realloc+0xfc>)
 80128d4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80128d8:	4939      	ldr	r1, [pc, #228]	; (80129c0 <pbuf_realloc+0x100>)
 80128da:	483a      	ldr	r0, [pc, #232]	; (80129c4 <pbuf_realloc+0x104>)
 80128dc:	f00c ffe6 	bl	801f8ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	891b      	ldrh	r3, [r3, #8]
 80128e4:	887a      	ldrh	r2, [r7, #2]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d263      	bcs.n	80129b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	891a      	ldrh	r2, [r3, #8]
 80128ee:	887b      	ldrh	r3, [r7, #2]
 80128f0:	1ad3      	subs	r3, r2, r3
 80128f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80128f4:	887b      	ldrh	r3, [r7, #2]
 80128f6:	817b      	strh	r3, [r7, #10]
  q = p;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80128fc:	e018      	b.n	8012930 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	895b      	ldrh	r3, [r3, #10]
 8012902:	897a      	ldrh	r2, [r7, #10]
 8012904:	1ad3      	subs	r3, r2, r3
 8012906:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	891a      	ldrh	r2, [r3, #8]
 801290c:	893b      	ldrh	r3, [r7, #8]
 801290e:	1ad3      	subs	r3, r2, r3
 8012910:	b29a      	uxth	r2, r3
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d106      	bne.n	8012930 <pbuf_realloc+0x70>
 8012922:	4b26      	ldr	r3, [pc, #152]	; (80129bc <pbuf_realloc+0xfc>)
 8012924:	f240 12af 	movw	r2, #431	; 0x1af
 8012928:	4927      	ldr	r1, [pc, #156]	; (80129c8 <pbuf_realloc+0x108>)
 801292a:	4826      	ldr	r0, [pc, #152]	; (80129c4 <pbuf_realloc+0x104>)
 801292c:	f00c ffbe 	bl	801f8ac <iprintf>
  while (rem_len > q->len) {
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	895b      	ldrh	r3, [r3, #10]
 8012934:	897a      	ldrh	r2, [r7, #10]
 8012936:	429a      	cmp	r2, r3
 8012938:	d8e1      	bhi.n	80128fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	7b1b      	ldrb	r3, [r3, #12]
 801293e:	f003 030f 	and.w	r3, r3, #15
 8012942:	2b00      	cmp	r3, #0
 8012944:	d121      	bne.n	801298a <pbuf_realloc+0xca>
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	895b      	ldrh	r3, [r3, #10]
 801294a:	897a      	ldrh	r2, [r7, #10]
 801294c:	429a      	cmp	r2, r3
 801294e:	d01c      	beq.n	801298a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	7b5b      	ldrb	r3, [r3, #13]
 8012954:	f003 0302 	and.w	r3, r3, #2
 8012958:	2b00      	cmp	r3, #0
 801295a:	d116      	bne.n	801298a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	685a      	ldr	r2, [r3, #4]
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	1ad3      	subs	r3, r2, r3
 8012964:	b29a      	uxth	r2, r3
 8012966:	897b      	ldrh	r3, [r7, #10]
 8012968:	4413      	add	r3, r2
 801296a:	b29b      	uxth	r3, r3
 801296c:	4619      	mov	r1, r3
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f7fe ff20 	bl	80117b4 <mem_trim>
 8012974:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d106      	bne.n	801298a <pbuf_realloc+0xca>
 801297c:	4b0f      	ldr	r3, [pc, #60]	; (80129bc <pbuf_realloc+0xfc>)
 801297e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012982:	4912      	ldr	r1, [pc, #72]	; (80129cc <pbuf_realloc+0x10c>)
 8012984:	480f      	ldr	r0, [pc, #60]	; (80129c4 <pbuf_realloc+0x104>)
 8012986:	f00c ff91 	bl	801f8ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	897a      	ldrh	r2, [r7, #10]
 801298e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	895a      	ldrh	r2, [r3, #10]
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d004      	beq.n	80129aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4618      	mov	r0, r3
 80129a6:	f000 f911 	bl	8012bcc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	2200      	movs	r2, #0
 80129ae:	601a      	str	r2, [r3, #0]
 80129b0:	e000      	b.n	80129b4 <pbuf_realloc+0xf4>
    return;
 80129b2:	bf00      	nop

}
 80129b4:	3710      	adds	r7, #16
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	08022800 	.word	0x08022800
 80129c0:	08022918 	.word	0x08022918
 80129c4:	08022860 	.word	0x08022860
 80129c8:	08022930 	.word	0x08022930
 80129cc:	08022948 	.word	0x08022948

080129d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b086      	sub	sp, #24
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	60b9      	str	r1, [r7, #8]
 80129da:	4613      	mov	r3, r2
 80129dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d106      	bne.n	80129f2 <pbuf_add_header_impl+0x22>
 80129e4:	4b2b      	ldr	r3, [pc, #172]	; (8012a94 <pbuf_add_header_impl+0xc4>)
 80129e6:	f240 12df 	movw	r2, #479	; 0x1df
 80129ea:	492b      	ldr	r1, [pc, #172]	; (8012a98 <pbuf_add_header_impl+0xc8>)
 80129ec:	482b      	ldr	r0, [pc, #172]	; (8012a9c <pbuf_add_header_impl+0xcc>)
 80129ee:	f00c ff5d 	bl	801f8ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d003      	beq.n	8012a00 <pbuf_add_header_impl+0x30>
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80129fe:	d301      	bcc.n	8012a04 <pbuf_add_header_impl+0x34>
    return 1;
 8012a00:	2301      	movs	r3, #1
 8012a02:	e043      	b.n	8012a8c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d101      	bne.n	8012a0e <pbuf_add_header_impl+0x3e>
    return 0;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	e03e      	b.n	8012a8c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	891a      	ldrh	r2, [r3, #8]
 8012a16:	8a7b      	ldrh	r3, [r7, #18]
 8012a18:	4413      	add	r3, r2
 8012a1a:	b29b      	uxth	r3, r3
 8012a1c:	8a7a      	ldrh	r2, [r7, #18]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d901      	bls.n	8012a26 <pbuf_add_header_impl+0x56>
    return 1;
 8012a22:	2301      	movs	r3, #1
 8012a24:	e032      	b.n	8012a8c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	7b1b      	ldrb	r3, [r3, #12]
 8012a2a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012a2c:	8a3b      	ldrh	r3, [r7, #16]
 8012a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d00c      	beq.n	8012a50 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	685a      	ldr	r2, [r3, #4]
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	425b      	negs	r3, r3
 8012a3e:	4413      	add	r3, r2
 8012a40:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	3310      	adds	r3, #16
 8012a46:	697a      	ldr	r2, [r7, #20]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d20d      	bcs.n	8012a68 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	e01d      	b.n	8012a8c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012a50:	79fb      	ldrb	r3, [r7, #7]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d006      	beq.n	8012a64 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	685a      	ldr	r2, [r3, #4]
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	425b      	negs	r3, r3
 8012a5e:	4413      	add	r3, r2
 8012a60:	617b      	str	r3, [r7, #20]
 8012a62:	e001      	b.n	8012a68 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012a64:	2301      	movs	r3, #1
 8012a66:	e011      	b.n	8012a8c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	697a      	ldr	r2, [r7, #20]
 8012a6c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	895a      	ldrh	r2, [r3, #10]
 8012a72:	8a7b      	ldrh	r3, [r7, #18]
 8012a74:	4413      	add	r3, r2
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	891a      	ldrh	r2, [r3, #8]
 8012a80:	8a7b      	ldrh	r3, [r7, #18]
 8012a82:	4413      	add	r3, r2
 8012a84:	b29a      	uxth	r2, r3
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	811a      	strh	r2, [r3, #8]


  return 0;
 8012a8a:	2300      	movs	r3, #0
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3718      	adds	r7, #24
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	08022800 	.word	0x08022800
 8012a98:	08022964 	.word	0x08022964
 8012a9c:	08022860 	.word	0x08022860

08012aa0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012aaa:	2200      	movs	r2, #0
 8012aac:	6839      	ldr	r1, [r7, #0]
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7ff ff8e 	bl	80129d0 <pbuf_add_header_impl>
 8012ab4:	4603      	mov	r3, r0
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3708      	adds	r7, #8
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
	...

08012ac0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b084      	sub	sp, #16
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d106      	bne.n	8012ade <pbuf_remove_header+0x1e>
 8012ad0:	4b20      	ldr	r3, [pc, #128]	; (8012b54 <pbuf_remove_header+0x94>)
 8012ad2:	f240 224b 	movw	r2, #587	; 0x24b
 8012ad6:	4920      	ldr	r1, [pc, #128]	; (8012b58 <pbuf_remove_header+0x98>)
 8012ad8:	4820      	ldr	r0, [pc, #128]	; (8012b5c <pbuf_remove_header+0x9c>)
 8012ada:	f00c fee7 	bl	801f8ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d003      	beq.n	8012aec <pbuf_remove_header+0x2c>
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012aea:	d301      	bcc.n	8012af0 <pbuf_remove_header+0x30>
    return 1;
 8012aec:	2301      	movs	r3, #1
 8012aee:	e02c      	b.n	8012b4a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d101      	bne.n	8012afa <pbuf_remove_header+0x3a>
    return 0;
 8012af6:	2300      	movs	r3, #0
 8012af8:	e027      	b.n	8012b4a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	895b      	ldrh	r3, [r3, #10]
 8012b02:	89fa      	ldrh	r2, [r7, #14]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d908      	bls.n	8012b1a <pbuf_remove_header+0x5a>
 8012b08:	4b12      	ldr	r3, [pc, #72]	; (8012b54 <pbuf_remove_header+0x94>)
 8012b0a:	f240 2255 	movw	r2, #597	; 0x255
 8012b0e:	4914      	ldr	r1, [pc, #80]	; (8012b60 <pbuf_remove_header+0xa0>)
 8012b10:	4812      	ldr	r0, [pc, #72]	; (8012b5c <pbuf_remove_header+0x9c>)
 8012b12:	f00c fecb 	bl	801f8ac <iprintf>
 8012b16:	2301      	movs	r3, #1
 8012b18:	e017      	b.n	8012b4a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	685a      	ldr	r2, [r3, #4]
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	441a      	add	r2, r3
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	895a      	ldrh	r2, [r3, #10]
 8012b30:	89fb      	ldrh	r3, [r7, #14]
 8012b32:	1ad3      	subs	r3, r2, r3
 8012b34:	b29a      	uxth	r2, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	891a      	ldrh	r2, [r3, #8]
 8012b3e:	89fb      	ldrh	r3, [r7, #14]
 8012b40:	1ad3      	subs	r3, r2, r3
 8012b42:	b29a      	uxth	r2, r3
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}
 8012b52:	bf00      	nop
 8012b54:	08022800 	.word	0x08022800
 8012b58:	08022964 	.word	0x08022964
 8012b5c:	08022860 	.word	0x08022860
 8012b60:	08022970 	.word	0x08022970

08012b64 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b082      	sub	sp, #8
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	807b      	strh	r3, [r7, #2]
 8012b70:	4613      	mov	r3, r2
 8012b72:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012b74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	da08      	bge.n	8012b8e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012b7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012b80:	425b      	negs	r3, r3
 8012b82:	4619      	mov	r1, r3
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7ff ff9b 	bl	8012ac0 <pbuf_remove_header>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	e007      	b.n	8012b9e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012b8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012b92:	787a      	ldrb	r2, [r7, #1]
 8012b94:	4619      	mov	r1, r3
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7ff ff1a 	bl	80129d0 <pbuf_add_header_impl>
 8012b9c:	4603      	mov	r3, r0
  }
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3708      	adds	r7, #8
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012ba6:	b580      	push	{r7, lr}
 8012ba8:	b082      	sub	sp, #8
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
 8012bae:	460b      	mov	r3, r1
 8012bb0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012bb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	4619      	mov	r1, r3
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f7ff ffd2 	bl	8012b64 <pbuf_header_impl>
 8012bc0:	4603      	mov	r3, r0
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3708      	adds	r7, #8
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
	...

08012bcc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b088      	sub	sp, #32
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d10b      	bne.n	8012bf2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d106      	bne.n	8012bee <pbuf_free+0x22>
 8012be0:	4b3b      	ldr	r3, [pc, #236]	; (8012cd0 <pbuf_free+0x104>)
 8012be2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012be6:	493b      	ldr	r1, [pc, #236]	; (8012cd4 <pbuf_free+0x108>)
 8012be8:	483b      	ldr	r0, [pc, #236]	; (8012cd8 <pbuf_free+0x10c>)
 8012bea:	f00c fe5f 	bl	801f8ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	e069      	b.n	8012cc6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012bf6:	e062      	b.n	8012cbe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012bf8:	f00b fccc 	bl	801e594 <sys_arch_protect>
 8012bfc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	7b9b      	ldrb	r3, [r3, #14]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d106      	bne.n	8012c14 <pbuf_free+0x48>
 8012c06:	4b32      	ldr	r3, [pc, #200]	; (8012cd0 <pbuf_free+0x104>)
 8012c08:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012c0c:	4933      	ldr	r1, [pc, #204]	; (8012cdc <pbuf_free+0x110>)
 8012c0e:	4832      	ldr	r0, [pc, #200]	; (8012cd8 <pbuf_free+0x10c>)
 8012c10:	f00c fe4c 	bl	801f8ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	7b9b      	ldrb	r3, [r3, #14]
 8012c18:	3b01      	subs	r3, #1
 8012c1a:	b2da      	uxtb	r2, r3
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	739a      	strb	r2, [r3, #14]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	7b9b      	ldrb	r3, [r3, #14]
 8012c24:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012c26:	69b8      	ldr	r0, [r7, #24]
 8012c28:	f00b fcc2 	bl	801e5b0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012c2c:	7dfb      	ldrb	r3, [r7, #23]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d143      	bne.n	8012cba <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	7b1b      	ldrb	r3, [r3, #12]
 8012c3c:	f003 030f 	and.w	r3, r3, #15
 8012c40:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	7b5b      	ldrb	r3, [r3, #13]
 8012c46:	f003 0302 	and.w	r3, r3, #2
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d011      	beq.n	8012c72 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	691b      	ldr	r3, [r3, #16]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d106      	bne.n	8012c68 <pbuf_free+0x9c>
 8012c5a:	4b1d      	ldr	r3, [pc, #116]	; (8012cd0 <pbuf_free+0x104>)
 8012c5c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012c60:	491f      	ldr	r1, [pc, #124]	; (8012ce0 <pbuf_free+0x114>)
 8012c62:	481d      	ldr	r0, [pc, #116]	; (8012cd8 <pbuf_free+0x10c>)
 8012c64:	f00c fe22 	bl	801f8ac <iprintf>
        pc->custom_free_function(p);
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	691b      	ldr	r3, [r3, #16]
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	4798      	blx	r3
 8012c70:	e01d      	b.n	8012cae <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012c72:	7bfb      	ldrb	r3, [r7, #15]
 8012c74:	2b02      	cmp	r3, #2
 8012c76:	d104      	bne.n	8012c82 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012c78:	6879      	ldr	r1, [r7, #4]
 8012c7a:	200c      	movs	r0, #12
 8012c7c:	f7ff f8be 	bl	8011dfc <memp_free>
 8012c80:	e015      	b.n	8012cae <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012c82:	7bfb      	ldrb	r3, [r7, #15]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d104      	bne.n	8012c92 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012c88:	6879      	ldr	r1, [r7, #4]
 8012c8a:	200b      	movs	r0, #11
 8012c8c:	f7ff f8b6 	bl	8011dfc <memp_free>
 8012c90:	e00d      	b.n	8012cae <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012c92:	7bfb      	ldrb	r3, [r7, #15]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d103      	bne.n	8012ca0 <pbuf_free+0xd4>
          mem_free(p);
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f7fe fcfb 	bl	8011694 <mem_free>
 8012c9e:	e006      	b.n	8012cae <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012ca0:	4b0b      	ldr	r3, [pc, #44]	; (8012cd0 <pbuf_free+0x104>)
 8012ca2:	f240 320f 	movw	r2, #783	; 0x30f
 8012ca6:	490f      	ldr	r1, [pc, #60]	; (8012ce4 <pbuf_free+0x118>)
 8012ca8:	480b      	ldr	r0, [pc, #44]	; (8012cd8 <pbuf_free+0x10c>)
 8012caa:	f00c fdff 	bl	801f8ac <iprintf>
        }
      }
      count++;
 8012cae:	7ffb      	ldrb	r3, [r7, #31]
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	607b      	str	r3, [r7, #4]
 8012cb8:	e001      	b.n	8012cbe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d199      	bne.n	8012bf8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3720      	adds	r7, #32
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	08022800 	.word	0x08022800
 8012cd4:	08022964 	.word	0x08022964
 8012cd8:	08022860 	.word	0x08022860
 8012cdc:	08022990 	.word	0x08022990
 8012ce0:	080229a8 	.word	0x080229a8
 8012ce4:	080229cc 	.word	0x080229cc

08012ce8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b085      	sub	sp, #20
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012cf4:	e005      	b.n	8012d02 <pbuf_clen+0x1a>
    ++len;
 8012cf6:	89fb      	ldrh	r3, [r7, #14]
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d1f6      	bne.n	8012cf6 <pbuf_clen+0xe>
  }
  return len;
 8012d08:	89fb      	ldrh	r3, [r7, #14]
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3714      	adds	r7, #20
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr
	...

08012d18 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b084      	sub	sp, #16
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d016      	beq.n	8012d54 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012d26:	f00b fc35 	bl	801e594 <sys_arch_protect>
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	7b9b      	ldrb	r3, [r3, #14]
 8012d30:	3301      	adds	r3, #1
 8012d32:	b2da      	uxtb	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	739a      	strb	r2, [r3, #14]
 8012d38:	68f8      	ldr	r0, [r7, #12]
 8012d3a:	f00b fc39 	bl	801e5b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	7b9b      	ldrb	r3, [r3, #14]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d106      	bne.n	8012d54 <pbuf_ref+0x3c>
 8012d46:	4b05      	ldr	r3, [pc, #20]	; (8012d5c <pbuf_ref+0x44>)
 8012d48:	f240 3242 	movw	r2, #834	; 0x342
 8012d4c:	4904      	ldr	r1, [pc, #16]	; (8012d60 <pbuf_ref+0x48>)
 8012d4e:	4805      	ldr	r0, [pc, #20]	; (8012d64 <pbuf_ref+0x4c>)
 8012d50:	f00c fdac 	bl	801f8ac <iprintf>
  }
}
 8012d54:	bf00      	nop
 8012d56:	3710      	adds	r7, #16
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	08022800 	.word	0x08022800
 8012d60:	080229e0 	.word	0x080229e0
 8012d64:	08022860 	.word	0x08022860

08012d68 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d002      	beq.n	8012d7e <pbuf_cat+0x16>
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d107      	bne.n	8012d8e <pbuf_cat+0x26>
 8012d7e:	4b20      	ldr	r3, [pc, #128]	; (8012e00 <pbuf_cat+0x98>)
 8012d80:	f240 3259 	movw	r2, #857	; 0x359
 8012d84:	491f      	ldr	r1, [pc, #124]	; (8012e04 <pbuf_cat+0x9c>)
 8012d86:	4820      	ldr	r0, [pc, #128]	; (8012e08 <pbuf_cat+0xa0>)
 8012d88:	f00c fd90 	bl	801f8ac <iprintf>
 8012d8c:	e034      	b.n	8012df8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	60fb      	str	r3, [r7, #12]
 8012d92:	e00a      	b.n	8012daa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	891a      	ldrh	r2, [r3, #8]
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	891b      	ldrh	r3, [r3, #8]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	60fb      	str	r3, [r7, #12]
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d1f0      	bne.n	8012d94 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	891a      	ldrh	r2, [r3, #8]
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	895b      	ldrh	r3, [r3, #10]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d006      	beq.n	8012dcc <pbuf_cat+0x64>
 8012dbe:	4b10      	ldr	r3, [pc, #64]	; (8012e00 <pbuf_cat+0x98>)
 8012dc0:	f240 3262 	movw	r2, #866	; 0x362
 8012dc4:	4911      	ldr	r1, [pc, #68]	; (8012e0c <pbuf_cat+0xa4>)
 8012dc6:	4810      	ldr	r0, [pc, #64]	; (8012e08 <pbuf_cat+0xa0>)
 8012dc8:	f00c fd70 	bl	801f8ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d006      	beq.n	8012de2 <pbuf_cat+0x7a>
 8012dd4:	4b0a      	ldr	r3, [pc, #40]	; (8012e00 <pbuf_cat+0x98>)
 8012dd6:	f240 3263 	movw	r2, #867	; 0x363
 8012dda:	490d      	ldr	r1, [pc, #52]	; (8012e10 <pbuf_cat+0xa8>)
 8012ddc:	480a      	ldr	r0, [pc, #40]	; (8012e08 <pbuf_cat+0xa0>)
 8012dde:	f00c fd65 	bl	801f8ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	891a      	ldrh	r2, [r3, #8]
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	891b      	ldrh	r3, [r3, #8]
 8012dea:	4413      	add	r3, r2
 8012dec:	b29a      	uxth	r2, r3
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	683a      	ldr	r2, [r7, #0]
 8012df6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012df8:	3710      	adds	r7, #16
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	08022800 	.word	0x08022800
 8012e04:	080229f4 	.word	0x080229f4
 8012e08:	08022860 	.word	0x08022860
 8012e0c:	08022a2c 	.word	0x08022a2c
 8012e10:	08022a5c 	.word	0x08022a5c

08012e14 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012e1e:	6839      	ldr	r1, [r7, #0]
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f7ff ffa1 	bl	8012d68 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8012e26:	6838      	ldr	r0, [r7, #0]
 8012e28:	f7ff ff76 	bl	8012d18 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012e2c:	bf00      	nop
 8012e2e:	3708      	adds	r7, #8
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}

08012e34 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b086      	sub	sp, #24
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	617b      	str	r3, [r7, #20]
 8012e42:	2300      	movs	r3, #0
 8012e44:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d008      	beq.n	8012e5e <pbuf_copy+0x2a>
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d005      	beq.n	8012e5e <pbuf_copy+0x2a>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	891a      	ldrh	r2, [r3, #8]
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	891b      	ldrh	r3, [r3, #8]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d209      	bcs.n	8012e72 <pbuf_copy+0x3e>
 8012e5e:	4b57      	ldr	r3, [pc, #348]	; (8012fbc <pbuf_copy+0x188>)
 8012e60:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012e64:	4956      	ldr	r1, [pc, #344]	; (8012fc0 <pbuf_copy+0x18c>)
 8012e66:	4857      	ldr	r0, [pc, #348]	; (8012fc4 <pbuf_copy+0x190>)
 8012e68:	f00c fd20 	bl	801f8ac <iprintf>
 8012e6c:	f06f 030f 	mvn.w	r3, #15
 8012e70:	e09f      	b.n	8012fb2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	895b      	ldrh	r3, [r3, #10]
 8012e76:	461a      	mov	r2, r3
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	1ad2      	subs	r2, r2, r3
 8012e7c:	683b      	ldr	r3, [r7, #0]
 8012e7e:	895b      	ldrh	r3, [r3, #10]
 8012e80:	4619      	mov	r1, r3
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	1acb      	subs	r3, r1, r3
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d306      	bcc.n	8012e98 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	895b      	ldrh	r3, [r3, #10]
 8012e8e:	461a      	mov	r2, r3
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	1ad3      	subs	r3, r2, r3
 8012e94:	60fb      	str	r3, [r7, #12]
 8012e96:	e005      	b.n	8012ea4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	895b      	ldrh	r3, [r3, #10]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	1ad3      	subs	r3, r2, r3
 8012ea2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	685a      	ldr	r2, [r3, #4]
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	18d0      	adds	r0, r2, r3
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	685a      	ldr	r2, [r3, #4]
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	4413      	add	r3, r2
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	f00c ff5d 	bl	801fd76 <memcpy>
    offset_to += len;
 8012ebc:	697a      	ldr	r2, [r7, #20]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	4413      	add	r3, r2
 8012ec2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012ec4:	693a      	ldr	r2, [r7, #16]
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	4413      	add	r3, r2
 8012eca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	895b      	ldrh	r3, [r3, #10]
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	4293      	cmp	r3, r2
 8012ed6:	d906      	bls.n	8012ee6 <pbuf_copy+0xb2>
 8012ed8:	4b38      	ldr	r3, [pc, #224]	; (8012fbc <pbuf_copy+0x188>)
 8012eda:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012ede:	493a      	ldr	r1, [pc, #232]	; (8012fc8 <pbuf_copy+0x194>)
 8012ee0:	4838      	ldr	r0, [pc, #224]	; (8012fc4 <pbuf_copy+0x190>)
 8012ee2:	f00c fce3 	bl	801f8ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	895b      	ldrh	r3, [r3, #10]
 8012eea:	461a      	mov	r2, r3
 8012eec:	693b      	ldr	r3, [r7, #16]
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d906      	bls.n	8012f00 <pbuf_copy+0xcc>
 8012ef2:	4b32      	ldr	r3, [pc, #200]	; (8012fbc <pbuf_copy+0x188>)
 8012ef4:	f240 32da 	movw	r2, #986	; 0x3da
 8012ef8:	4934      	ldr	r1, [pc, #208]	; (8012fcc <pbuf_copy+0x198>)
 8012efa:	4832      	ldr	r0, [pc, #200]	; (8012fc4 <pbuf_copy+0x190>)
 8012efc:	f00c fcd6 	bl	801f8ac <iprintf>
    if (offset_from >= p_from->len) {
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	895b      	ldrh	r3, [r3, #10]
 8012f04:	461a      	mov	r2, r3
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	4293      	cmp	r3, r2
 8012f0a:	d304      	bcc.n	8012f16 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	895b      	ldrh	r3, [r3, #10]
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	d114      	bne.n	8012f4c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012f22:	2300      	movs	r3, #0
 8012f24:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d10c      	bne.n	8012f4c <pbuf_copy+0x118>
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d009      	beq.n	8012f4c <pbuf_copy+0x118>
 8012f38:	4b20      	ldr	r3, [pc, #128]	; (8012fbc <pbuf_copy+0x188>)
 8012f3a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012f3e:	4924      	ldr	r1, [pc, #144]	; (8012fd0 <pbuf_copy+0x19c>)
 8012f40:	4820      	ldr	r0, [pc, #128]	; (8012fc4 <pbuf_copy+0x190>)
 8012f42:	f00c fcb3 	bl	801f8ac <iprintf>
 8012f46:	f06f 030f 	mvn.w	r3, #15
 8012f4a:	e032      	b.n	8012fb2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d013      	beq.n	8012f7a <pbuf_copy+0x146>
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	895a      	ldrh	r2, [r3, #10]
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	891b      	ldrh	r3, [r3, #8]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d10d      	bne.n	8012f7a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d009      	beq.n	8012f7a <pbuf_copy+0x146>
 8012f66:	4b15      	ldr	r3, [pc, #84]	; (8012fbc <pbuf_copy+0x188>)
 8012f68:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012f6c:	4919      	ldr	r1, [pc, #100]	; (8012fd4 <pbuf_copy+0x1a0>)
 8012f6e:	4815      	ldr	r0, [pc, #84]	; (8012fc4 <pbuf_copy+0x190>)
 8012f70:	f00c fc9c 	bl	801f8ac <iprintf>
 8012f74:	f06f 0305 	mvn.w	r3, #5
 8012f78:	e01b      	b.n	8012fb2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d013      	beq.n	8012fa8 <pbuf_copy+0x174>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	895a      	ldrh	r2, [r3, #10]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	891b      	ldrh	r3, [r3, #8]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d10d      	bne.n	8012fa8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d009      	beq.n	8012fa8 <pbuf_copy+0x174>
 8012f94:	4b09      	ldr	r3, [pc, #36]	; (8012fbc <pbuf_copy+0x188>)
 8012f96:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012f9a:	490e      	ldr	r1, [pc, #56]	; (8012fd4 <pbuf_copy+0x1a0>)
 8012f9c:	4809      	ldr	r0, [pc, #36]	; (8012fc4 <pbuf_copy+0x190>)
 8012f9e:	f00c fc85 	bl	801f8ac <iprintf>
 8012fa2:	f06f 0305 	mvn.w	r3, #5
 8012fa6:	e004      	b.n	8012fb2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	f47f af61 	bne.w	8012e72 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012fb0:	2300      	movs	r3, #0
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3718      	adds	r7, #24
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	08022800 	.word	0x08022800
 8012fc0:	08022aa8 	.word	0x08022aa8
 8012fc4:	08022860 	.word	0x08022860
 8012fc8:	08022ad8 	.word	0x08022ad8
 8012fcc:	08022af0 	.word	0x08022af0
 8012fd0:	08022b0c 	.word	0x08022b0c
 8012fd4:	08022b1c 	.word	0x08022b1c

08012fd8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b088      	sub	sp, #32
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	60b9      	str	r1, [r7, #8]
 8012fe2:	4611      	mov	r1, r2
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	460b      	mov	r3, r1
 8012fe8:	80fb      	strh	r3, [r7, #6]
 8012fea:	4613      	mov	r3, r2
 8012fec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d108      	bne.n	801300e <pbuf_copy_partial+0x36>
 8012ffc:	4b2b      	ldr	r3, [pc, #172]	; (80130ac <pbuf_copy_partial+0xd4>)
 8012ffe:	f240 420a 	movw	r2, #1034	; 0x40a
 8013002:	492b      	ldr	r1, [pc, #172]	; (80130b0 <pbuf_copy_partial+0xd8>)
 8013004:	482b      	ldr	r0, [pc, #172]	; (80130b4 <pbuf_copy_partial+0xdc>)
 8013006:	f00c fc51 	bl	801f8ac <iprintf>
 801300a:	2300      	movs	r3, #0
 801300c:	e04a      	b.n	80130a4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d108      	bne.n	8013026 <pbuf_copy_partial+0x4e>
 8013014:	4b25      	ldr	r3, [pc, #148]	; (80130ac <pbuf_copy_partial+0xd4>)
 8013016:	f240 420b 	movw	r2, #1035	; 0x40b
 801301a:	4927      	ldr	r1, [pc, #156]	; (80130b8 <pbuf_copy_partial+0xe0>)
 801301c:	4825      	ldr	r0, [pc, #148]	; (80130b4 <pbuf_copy_partial+0xdc>)
 801301e:	f00c fc45 	bl	801f8ac <iprintf>
 8013022:	2300      	movs	r3, #0
 8013024:	e03e      	b.n	80130a4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	61fb      	str	r3, [r7, #28]
 801302a:	e034      	b.n	8013096 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801302c:	88bb      	ldrh	r3, [r7, #4]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d00a      	beq.n	8013048 <pbuf_copy_partial+0x70>
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	895b      	ldrh	r3, [r3, #10]
 8013036:	88ba      	ldrh	r2, [r7, #4]
 8013038:	429a      	cmp	r2, r3
 801303a:	d305      	bcc.n	8013048 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	895b      	ldrh	r3, [r3, #10]
 8013040:	88ba      	ldrh	r2, [r7, #4]
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	80bb      	strh	r3, [r7, #4]
 8013046:	e023      	b.n	8013090 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013048:	69fb      	ldr	r3, [r7, #28]
 801304a:	895a      	ldrh	r2, [r3, #10]
 801304c:	88bb      	ldrh	r3, [r7, #4]
 801304e:	1ad3      	subs	r3, r2, r3
 8013050:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8013052:	8b3a      	ldrh	r2, [r7, #24]
 8013054:	88fb      	ldrh	r3, [r7, #6]
 8013056:	429a      	cmp	r2, r3
 8013058:	d901      	bls.n	801305e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801305a:	88fb      	ldrh	r3, [r7, #6]
 801305c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801305e:	8b7b      	ldrh	r3, [r7, #26]
 8013060:	68ba      	ldr	r2, [r7, #8]
 8013062:	18d0      	adds	r0, r2, r3
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	685a      	ldr	r2, [r3, #4]
 8013068:	88bb      	ldrh	r3, [r7, #4]
 801306a:	4413      	add	r3, r2
 801306c:	8b3a      	ldrh	r2, [r7, #24]
 801306e:	4619      	mov	r1, r3
 8013070:	f00c fe81 	bl	801fd76 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013074:	8afa      	ldrh	r2, [r7, #22]
 8013076:	8b3b      	ldrh	r3, [r7, #24]
 8013078:	4413      	add	r3, r2
 801307a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801307c:	8b7a      	ldrh	r2, [r7, #26]
 801307e:	8b3b      	ldrh	r3, [r7, #24]
 8013080:	4413      	add	r3, r2
 8013082:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013084:	88fa      	ldrh	r2, [r7, #6]
 8013086:	8b3b      	ldrh	r3, [r7, #24]
 8013088:	1ad3      	subs	r3, r2, r3
 801308a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801308c:	2300      	movs	r3, #0
 801308e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	61fb      	str	r3, [r7, #28]
 8013096:	88fb      	ldrh	r3, [r7, #6]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d002      	beq.n	80130a2 <pbuf_copy_partial+0xca>
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d1c4      	bne.n	801302c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80130a2:	8afb      	ldrh	r3, [r7, #22]
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	3720      	adds	r7, #32
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	08022800 	.word	0x08022800
 80130b0:	08022b48 	.word	0x08022b48
 80130b4:	08022860 	.word	0x08022860
 80130b8:	08022b68 	.word	0x08022b68

080130bc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b084      	sub	sp, #16
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	4603      	mov	r3, r0
 80130c4:	603a      	str	r2, [r7, #0]
 80130c6:	71fb      	strb	r3, [r7, #7]
 80130c8:	460b      	mov	r3, r1
 80130ca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	8919      	ldrh	r1, [r3, #8]
 80130d0:	88ba      	ldrh	r2, [r7, #4]
 80130d2:	79fb      	ldrb	r3, [r7, #7]
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7ff fa95 	bl	8012604 <pbuf_alloc>
 80130da:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d101      	bne.n	80130e6 <pbuf_clone+0x2a>
    return NULL;
 80130e2:	2300      	movs	r3, #0
 80130e4:	e011      	b.n	801310a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80130e6:	6839      	ldr	r1, [r7, #0]
 80130e8:	68f8      	ldr	r0, [r7, #12]
 80130ea:	f7ff fea3 	bl	8012e34 <pbuf_copy>
 80130ee:	4603      	mov	r3, r0
 80130f0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80130f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d006      	beq.n	8013108 <pbuf_clone+0x4c>
 80130fa:	4b06      	ldr	r3, [pc, #24]	; (8013114 <pbuf_clone+0x58>)
 80130fc:	f240 5224 	movw	r2, #1316	; 0x524
 8013100:	4905      	ldr	r1, [pc, #20]	; (8013118 <pbuf_clone+0x5c>)
 8013102:	4806      	ldr	r0, [pc, #24]	; (801311c <pbuf_clone+0x60>)
 8013104:	f00c fbd2 	bl	801f8ac <iprintf>
  return q;
 8013108:	68fb      	ldr	r3, [r7, #12]
}
 801310a:	4618      	mov	r0, r3
 801310c:	3710      	adds	r7, #16
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
 8013112:	bf00      	nop
 8013114:	08022800 	.word	0x08022800
 8013118:	08022c74 	.word	0x08022c74
 801311c:	08022860 	.word	0x08022860

08013120 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013124:	f00c fa24 	bl	801f570 <rand>
 8013128:	4603      	mov	r3, r0
 801312a:	b29b      	uxth	r3, r3
 801312c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013130:	b29b      	uxth	r3, r3
 8013132:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013136:	b29a      	uxth	r2, r3
 8013138:	4b01      	ldr	r3, [pc, #4]	; (8013140 <tcp_init+0x20>)
 801313a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801313c:	bf00      	nop
 801313e:	bd80      	pop	{r7, pc}
 8013140:	20000024 	.word	0x20000024

08013144 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	7d1b      	ldrb	r3, [r3, #20]
 8013150:	2b01      	cmp	r3, #1
 8013152:	d105      	bne.n	8013160 <tcp_free+0x1c>
 8013154:	4b06      	ldr	r3, [pc, #24]	; (8013170 <tcp_free+0x2c>)
 8013156:	22d4      	movs	r2, #212	; 0xd4
 8013158:	4906      	ldr	r1, [pc, #24]	; (8013174 <tcp_free+0x30>)
 801315a:	4807      	ldr	r0, [pc, #28]	; (8013178 <tcp_free+0x34>)
 801315c:	f00c fba6 	bl	801f8ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013160:	6879      	ldr	r1, [r7, #4]
 8013162:	2001      	movs	r0, #1
 8013164:	f7fe fe4a 	bl	8011dfc <memp_free>
}
 8013168:	bf00      	nop
 801316a:	3708      	adds	r7, #8
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}
 8013170:	08022d00 	.word	0x08022d00
 8013174:	08022d30 	.word	0x08022d30
 8013178:	08022d44 	.word	0x08022d44

0801317c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	7d1b      	ldrb	r3, [r3, #20]
 8013188:	2b01      	cmp	r3, #1
 801318a:	d105      	bne.n	8013198 <tcp_free_listen+0x1c>
 801318c:	4b06      	ldr	r3, [pc, #24]	; (80131a8 <tcp_free_listen+0x2c>)
 801318e:	22df      	movs	r2, #223	; 0xdf
 8013190:	4906      	ldr	r1, [pc, #24]	; (80131ac <tcp_free_listen+0x30>)
 8013192:	4807      	ldr	r0, [pc, #28]	; (80131b0 <tcp_free_listen+0x34>)
 8013194:	f00c fb8a 	bl	801f8ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013198:	6879      	ldr	r1, [r7, #4]
 801319a:	2002      	movs	r0, #2
 801319c:	f7fe fe2e 	bl	8011dfc <memp_free>
}
 80131a0:	bf00      	nop
 80131a2:	3708      	adds	r7, #8
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	08022d00 	.word	0x08022d00
 80131ac:	08022d6c 	.word	0x08022d6c
 80131b0:	08022d44 	.word	0x08022d44

080131b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80131b8:	f001 f8c0 	bl	801433c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80131bc:	4b07      	ldr	r3, [pc, #28]	; (80131dc <tcp_tmr+0x28>)
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	3301      	adds	r3, #1
 80131c2:	b2da      	uxtb	r2, r3
 80131c4:	4b05      	ldr	r3, [pc, #20]	; (80131dc <tcp_tmr+0x28>)
 80131c6:	701a      	strb	r2, [r3, #0]
 80131c8:	4b04      	ldr	r3, [pc, #16]	; (80131dc <tcp_tmr+0x28>)
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	f003 0301 	and.w	r3, r3, #1
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d001      	beq.n	80131d8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80131d4:	f000 fd72 	bl	8013cbc <tcp_slowtmr>
  }
}
 80131d8:	bf00      	nop
 80131da:	bd80      	pop	{r7, pc}
 80131dc:	200101e1 	.word	0x200101e1

080131e0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d105      	bne.n	80131fc <tcp_remove_listener+0x1c>
 80131f0:	4b0d      	ldr	r3, [pc, #52]	; (8013228 <tcp_remove_listener+0x48>)
 80131f2:	22ff      	movs	r2, #255	; 0xff
 80131f4:	490d      	ldr	r1, [pc, #52]	; (801322c <tcp_remove_listener+0x4c>)
 80131f6:	480e      	ldr	r0, [pc, #56]	; (8013230 <tcp_remove_listener+0x50>)
 80131f8:	f00c fb58 	bl	801f8ac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	60fb      	str	r3, [r7, #12]
 8013200:	e00a      	b.n	8013218 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013206:	683a      	ldr	r2, [r7, #0]
 8013208:	429a      	cmp	r2, r3
 801320a:	d102      	bne.n	8013212 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	2200      	movs	r2, #0
 8013210:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	68db      	ldr	r3, [r3, #12]
 8013216:	60fb      	str	r3, [r7, #12]
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d1f1      	bne.n	8013202 <tcp_remove_listener+0x22>
    }
  }
}
 801321e:	bf00      	nop
 8013220:	bf00      	nop
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	08022d00 	.word	0x08022d00
 801322c:	08022d88 	.word	0x08022d88
 8013230:	08022d44 	.word	0x08022d44

08013234 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d106      	bne.n	8013250 <tcp_listen_closed+0x1c>
 8013242:	4b14      	ldr	r3, [pc, #80]	; (8013294 <tcp_listen_closed+0x60>)
 8013244:	f240 1211 	movw	r2, #273	; 0x111
 8013248:	4913      	ldr	r1, [pc, #76]	; (8013298 <tcp_listen_closed+0x64>)
 801324a:	4814      	ldr	r0, [pc, #80]	; (801329c <tcp_listen_closed+0x68>)
 801324c:	f00c fb2e 	bl	801f8ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	7d1b      	ldrb	r3, [r3, #20]
 8013254:	2b01      	cmp	r3, #1
 8013256:	d006      	beq.n	8013266 <tcp_listen_closed+0x32>
 8013258:	4b0e      	ldr	r3, [pc, #56]	; (8013294 <tcp_listen_closed+0x60>)
 801325a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801325e:	4910      	ldr	r1, [pc, #64]	; (80132a0 <tcp_listen_closed+0x6c>)
 8013260:	480e      	ldr	r0, [pc, #56]	; (801329c <tcp_listen_closed+0x68>)
 8013262:	f00c fb23 	bl	801f8ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013266:	2301      	movs	r3, #1
 8013268:	60fb      	str	r3, [r7, #12]
 801326a:	e00b      	b.n	8013284 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801326c:	4a0d      	ldr	r2, [pc, #52]	; (80132a4 <tcp_listen_closed+0x70>)
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	6879      	ldr	r1, [r7, #4]
 8013278:	4618      	mov	r0, r3
 801327a:	f7ff ffb1 	bl	80131e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	3301      	adds	r3, #1
 8013282:	60fb      	str	r3, [r7, #12]
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	2b03      	cmp	r3, #3
 8013288:	d9f0      	bls.n	801326c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801328a:	bf00      	nop
 801328c:	bf00      	nop
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}
 8013294:	08022d00 	.word	0x08022d00
 8013298:	08022db0 	.word	0x08022db0
 801329c:	08022d44 	.word	0x08022d44
 80132a0:	08022dbc 	.word	0x08022dbc
 80132a4:	080251b0 	.word	0x080251b0

080132a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80132a8:	b5b0      	push	{r4, r5, r7, lr}
 80132aa:	b088      	sub	sp, #32
 80132ac:	af04      	add	r7, sp, #16
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	460b      	mov	r3, r1
 80132b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d106      	bne.n	80132c8 <tcp_close_shutdown+0x20>
 80132ba:	4b63      	ldr	r3, [pc, #396]	; (8013448 <tcp_close_shutdown+0x1a0>)
 80132bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80132c0:	4962      	ldr	r1, [pc, #392]	; (801344c <tcp_close_shutdown+0x1a4>)
 80132c2:	4863      	ldr	r0, [pc, #396]	; (8013450 <tcp_close_shutdown+0x1a8>)
 80132c4:	f00c faf2 	bl	801f8ac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80132c8:	78fb      	ldrb	r3, [r7, #3]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d066      	beq.n	801339c <tcp_close_shutdown+0xf4>
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	7d1b      	ldrb	r3, [r3, #20]
 80132d2:	2b04      	cmp	r3, #4
 80132d4:	d003      	beq.n	80132de <tcp_close_shutdown+0x36>
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	7d1b      	ldrb	r3, [r3, #20]
 80132da:	2b07      	cmp	r3, #7
 80132dc:	d15e      	bne.n	801339c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d104      	bne.n	80132f0 <tcp_close_shutdown+0x48>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80132ee:	d055      	beq.n	801339c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	8b5b      	ldrh	r3, [r3, #26]
 80132f4:	f003 0310 	and.w	r3, r3, #16
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d106      	bne.n	801330a <tcp_close_shutdown+0x62>
 80132fc:	4b52      	ldr	r3, [pc, #328]	; (8013448 <tcp_close_shutdown+0x1a0>)
 80132fe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013302:	4954      	ldr	r1, [pc, #336]	; (8013454 <tcp_close_shutdown+0x1ac>)
 8013304:	4852      	ldr	r0, [pc, #328]	; (8013450 <tcp_close_shutdown+0x1a8>)
 8013306:	f00c fad1 	bl	801f8ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013312:	687d      	ldr	r5, [r7, #4]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	3304      	adds	r3, #4
 8013318:	687a      	ldr	r2, [r7, #4]
 801331a:	8ad2      	ldrh	r2, [r2, #22]
 801331c:	6879      	ldr	r1, [r7, #4]
 801331e:	8b09      	ldrh	r1, [r1, #24]
 8013320:	9102      	str	r1, [sp, #8]
 8013322:	9201      	str	r2, [sp, #4]
 8013324:	9300      	str	r3, [sp, #0]
 8013326:	462b      	mov	r3, r5
 8013328:	4622      	mov	r2, r4
 801332a:	4601      	mov	r1, r0
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f005 fdd5 	bl	8018edc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f001 fbb2 	bl	8014a9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013338:	4b47      	ldr	r3, [pc, #284]	; (8013458 <tcp_close_shutdown+0x1b0>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	687a      	ldr	r2, [r7, #4]
 801333e:	429a      	cmp	r2, r3
 8013340:	d105      	bne.n	801334e <tcp_close_shutdown+0xa6>
 8013342:	4b45      	ldr	r3, [pc, #276]	; (8013458 <tcp_close_shutdown+0x1b0>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	4a43      	ldr	r2, [pc, #268]	; (8013458 <tcp_close_shutdown+0x1b0>)
 801334a:	6013      	str	r3, [r2, #0]
 801334c:	e013      	b.n	8013376 <tcp_close_shutdown+0xce>
 801334e:	4b42      	ldr	r3, [pc, #264]	; (8013458 <tcp_close_shutdown+0x1b0>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	60fb      	str	r3, [r7, #12]
 8013354:	e00c      	b.n	8013370 <tcp_close_shutdown+0xc8>
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	68db      	ldr	r3, [r3, #12]
 801335a:	687a      	ldr	r2, [r7, #4]
 801335c:	429a      	cmp	r2, r3
 801335e:	d104      	bne.n	801336a <tcp_close_shutdown+0xc2>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	68da      	ldr	r2, [r3, #12]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	60da      	str	r2, [r3, #12]
 8013368:	e005      	b.n	8013376 <tcp_close_shutdown+0xce>
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	68db      	ldr	r3, [r3, #12]
 801336e:	60fb      	str	r3, [r7, #12]
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d1ef      	bne.n	8013356 <tcp_close_shutdown+0xae>
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2200      	movs	r2, #0
 801337a:	60da      	str	r2, [r3, #12]
 801337c:	4b37      	ldr	r3, [pc, #220]	; (801345c <tcp_close_shutdown+0x1b4>)
 801337e:	2201      	movs	r2, #1
 8013380:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013382:	4b37      	ldr	r3, [pc, #220]	; (8013460 <tcp_close_shutdown+0x1b8>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	429a      	cmp	r2, r3
 801338a:	d102      	bne.n	8013392 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801338c:	f004 f84a 	bl	8017424 <tcp_trigger_input_pcb_close>
 8013390:	e002      	b.n	8013398 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7ff fed6 	bl	8013144 <tcp_free>
      }
      return ERR_OK;
 8013398:	2300      	movs	r3, #0
 801339a:	e050      	b.n	801343e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	7d1b      	ldrb	r3, [r3, #20]
 80133a0:	2b02      	cmp	r3, #2
 80133a2:	d03b      	beq.n	801341c <tcp_close_shutdown+0x174>
 80133a4:	2b02      	cmp	r3, #2
 80133a6:	dc44      	bgt.n	8013432 <tcp_close_shutdown+0x18a>
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d002      	beq.n	80133b2 <tcp_close_shutdown+0x10a>
 80133ac:	2b01      	cmp	r3, #1
 80133ae:	d02a      	beq.n	8013406 <tcp_close_shutdown+0x15e>
 80133b0:	e03f      	b.n	8013432 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	8adb      	ldrh	r3, [r3, #22]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d021      	beq.n	80133fe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80133ba:	4b2a      	ldr	r3, [pc, #168]	; (8013464 <tcp_close_shutdown+0x1bc>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d105      	bne.n	80133d0 <tcp_close_shutdown+0x128>
 80133c4:	4b27      	ldr	r3, [pc, #156]	; (8013464 <tcp_close_shutdown+0x1bc>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	4a26      	ldr	r2, [pc, #152]	; (8013464 <tcp_close_shutdown+0x1bc>)
 80133cc:	6013      	str	r3, [r2, #0]
 80133ce:	e013      	b.n	80133f8 <tcp_close_shutdown+0x150>
 80133d0:	4b24      	ldr	r3, [pc, #144]	; (8013464 <tcp_close_shutdown+0x1bc>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	60bb      	str	r3, [r7, #8]
 80133d6:	e00c      	b.n	80133f2 <tcp_close_shutdown+0x14a>
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d104      	bne.n	80133ec <tcp_close_shutdown+0x144>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	68da      	ldr	r2, [r3, #12]
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	60da      	str	r2, [r3, #12]
 80133ea:	e005      	b.n	80133f8 <tcp_close_shutdown+0x150>
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	68db      	ldr	r3, [r3, #12]
 80133f0:	60bb      	str	r3, [r7, #8]
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d1ef      	bne.n	80133d8 <tcp_close_shutdown+0x130>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2200      	movs	r2, #0
 80133fc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f7ff fea0 	bl	8013144 <tcp_free>
      break;
 8013404:	e01a      	b.n	801343c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f7ff ff14 	bl	8013234 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801340c:	6879      	ldr	r1, [r7, #4]
 801340e:	4816      	ldr	r0, [pc, #88]	; (8013468 <tcp_close_shutdown+0x1c0>)
 8013410:	f001 fb94 	bl	8014b3c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f7ff feb1 	bl	801317c <tcp_free_listen>
      break;
 801341a:	e00f      	b.n	801343c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801341c:	6879      	ldr	r1, [r7, #4]
 801341e:	480e      	ldr	r0, [pc, #56]	; (8013458 <tcp_close_shutdown+0x1b0>)
 8013420:	f001 fb8c 	bl	8014b3c <tcp_pcb_remove>
 8013424:	4b0d      	ldr	r3, [pc, #52]	; (801345c <tcp_close_shutdown+0x1b4>)
 8013426:	2201      	movs	r2, #1
 8013428:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f7ff fe8a 	bl	8013144 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013430:	e004      	b.n	801343c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f000 f81a 	bl	801346c <tcp_close_shutdown_fin>
 8013438:	4603      	mov	r3, r0
 801343a:	e000      	b.n	801343e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801343c:	2300      	movs	r3, #0
}
 801343e:	4618      	mov	r0, r3
 8013440:	3710      	adds	r7, #16
 8013442:	46bd      	mov	sp, r7
 8013444:	bdb0      	pop	{r4, r5, r7, pc}
 8013446:	bf00      	nop
 8013448:	08022d00 	.word	0x08022d00
 801344c:	08022dd4 	.word	0x08022dd4
 8013450:	08022d44 	.word	0x08022d44
 8013454:	08022df4 	.word	0x08022df4
 8013458:	200101d8 	.word	0x200101d8
 801345c:	200101e0 	.word	0x200101e0
 8013460:	20010218 	.word	0x20010218
 8013464:	200101d0 	.word	0x200101d0
 8013468:	200101d4 	.word	0x200101d4

0801346c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b084      	sub	sp, #16
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d106      	bne.n	8013488 <tcp_close_shutdown_fin+0x1c>
 801347a:	4b2e      	ldr	r3, [pc, #184]	; (8013534 <tcp_close_shutdown_fin+0xc8>)
 801347c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013480:	492d      	ldr	r1, [pc, #180]	; (8013538 <tcp_close_shutdown_fin+0xcc>)
 8013482:	482e      	ldr	r0, [pc, #184]	; (801353c <tcp_close_shutdown_fin+0xd0>)
 8013484:	f00c fa12 	bl	801f8ac <iprintf>

  switch (pcb->state) {
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	7d1b      	ldrb	r3, [r3, #20]
 801348c:	2b07      	cmp	r3, #7
 801348e:	d020      	beq.n	80134d2 <tcp_close_shutdown_fin+0x66>
 8013490:	2b07      	cmp	r3, #7
 8013492:	dc2b      	bgt.n	80134ec <tcp_close_shutdown_fin+0x80>
 8013494:	2b03      	cmp	r3, #3
 8013496:	d002      	beq.n	801349e <tcp_close_shutdown_fin+0x32>
 8013498:	2b04      	cmp	r3, #4
 801349a:	d00d      	beq.n	80134b8 <tcp_close_shutdown_fin+0x4c>
 801349c:	e026      	b.n	80134ec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f004 fe2a 	bl	80180f8 <tcp_send_fin>
 80134a4:	4603      	mov	r3, r0
 80134a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80134a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d11f      	bne.n	80134f0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2205      	movs	r2, #5
 80134b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80134b6:	e01b      	b.n	80134f0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f004 fe1d 	bl	80180f8 <tcp_send_fin>
 80134be:	4603      	mov	r3, r0
 80134c0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80134c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d114      	bne.n	80134f4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2205      	movs	r2, #5
 80134ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80134d0:	e010      	b.n	80134f4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f004 fe10 	bl	80180f8 <tcp_send_fin>
 80134d8:	4603      	mov	r3, r0
 80134da:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80134dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d109      	bne.n	80134f8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2209      	movs	r2, #9
 80134e8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80134ea:	e005      	b.n	80134f8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80134ec:	2300      	movs	r3, #0
 80134ee:	e01c      	b.n	801352a <tcp_close_shutdown_fin+0xbe>
      break;
 80134f0:	bf00      	nop
 80134f2:	e002      	b.n	80134fa <tcp_close_shutdown_fin+0x8e>
      break;
 80134f4:	bf00      	nop
 80134f6:	e000      	b.n	80134fa <tcp_close_shutdown_fin+0x8e>
      break;
 80134f8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80134fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d103      	bne.n	801350a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f004 ff36 	bl	8018374 <tcp_output>
 8013508:	e00d      	b.n	8013526 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801350e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013512:	d108      	bne.n	8013526 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	8b5b      	ldrh	r3, [r3, #26]
 8013518:	f043 0308 	orr.w	r3, r3, #8
 801351c:	b29a      	uxth	r2, r3
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013522:	2300      	movs	r3, #0
 8013524:	e001      	b.n	801352a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013526:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801352a:	4618      	mov	r0, r3
 801352c:	3710      	adds	r7, #16
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	08022d00 	.word	0x08022d00
 8013538:	08022db0 	.word	0x08022db0
 801353c:	08022d44 	.word	0x08022d44

08013540 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b082      	sub	sp, #8
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d109      	bne.n	8013562 <tcp_close+0x22>
 801354e:	4b0f      	ldr	r3, [pc, #60]	; (801358c <tcp_close+0x4c>)
 8013550:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013554:	490e      	ldr	r1, [pc, #56]	; (8013590 <tcp_close+0x50>)
 8013556:	480f      	ldr	r0, [pc, #60]	; (8013594 <tcp_close+0x54>)
 8013558:	f00c f9a8 	bl	801f8ac <iprintf>
 801355c:	f06f 030f 	mvn.w	r3, #15
 8013560:	e00f      	b.n	8013582 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	7d1b      	ldrb	r3, [r3, #20]
 8013566:	2b01      	cmp	r3, #1
 8013568:	d006      	beq.n	8013578 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	8b5b      	ldrh	r3, [r3, #26]
 801356e:	f043 0310 	orr.w	r3, r3, #16
 8013572:	b29a      	uxth	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013578:	2101      	movs	r1, #1
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7ff fe94 	bl	80132a8 <tcp_close_shutdown>
 8013580:	4603      	mov	r3, r0
}
 8013582:	4618      	mov	r0, r3
 8013584:	3708      	adds	r7, #8
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	bf00      	nop
 801358c:	08022d00 	.word	0x08022d00
 8013590:	08022e10 	.word	0x08022e10
 8013594:	08022d44 	.word	0x08022d44

08013598 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	60b9      	str	r1, [r7, #8]
 80135a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d109      	bne.n	80135be <tcp_shutdown+0x26>
 80135aa:	4b26      	ldr	r3, [pc, #152]	; (8013644 <tcp_shutdown+0xac>)
 80135ac:	f240 2207 	movw	r2, #519	; 0x207
 80135b0:	4925      	ldr	r1, [pc, #148]	; (8013648 <tcp_shutdown+0xb0>)
 80135b2:	4826      	ldr	r0, [pc, #152]	; (801364c <tcp_shutdown+0xb4>)
 80135b4:	f00c f97a 	bl	801f8ac <iprintf>
 80135b8:	f06f 030f 	mvn.w	r3, #15
 80135bc:	e03d      	b.n	801363a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	7d1b      	ldrb	r3, [r3, #20]
 80135c2:	2b01      	cmp	r3, #1
 80135c4:	d102      	bne.n	80135cc <tcp_shutdown+0x34>
    return ERR_CONN;
 80135c6:	f06f 030a 	mvn.w	r3, #10
 80135ca:	e036      	b.n	801363a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d01b      	beq.n	801360a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	8b5b      	ldrh	r3, [r3, #26]
 80135d6:	f043 0310 	orr.w	r3, r3, #16
 80135da:	b29a      	uxth	r2, r3
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d005      	beq.n	80135f2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80135e6:	2101      	movs	r1, #1
 80135e8:	68f8      	ldr	r0, [r7, #12]
 80135ea:	f7ff fe5d 	bl	80132a8 <tcp_close_shutdown>
 80135ee:	4603      	mov	r3, r0
 80135f0:	e023      	b.n	801363a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d007      	beq.n	801360a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135fe:	4618      	mov	r0, r3
 8013600:	f7ff fae4 	bl	8012bcc <pbuf_free>
      pcb->refused_data = NULL;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2200      	movs	r2, #0
 8013608:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d013      	beq.n	8013638 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	7d1b      	ldrb	r3, [r3, #20]
 8013614:	2b04      	cmp	r3, #4
 8013616:	dc02      	bgt.n	801361e <tcp_shutdown+0x86>
 8013618:	2b03      	cmp	r3, #3
 801361a:	da02      	bge.n	8013622 <tcp_shutdown+0x8a>
 801361c:	e009      	b.n	8013632 <tcp_shutdown+0x9a>
 801361e:	2b07      	cmp	r3, #7
 8013620:	d107      	bne.n	8013632 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	b2db      	uxtb	r3, r3
 8013626:	4619      	mov	r1, r3
 8013628:	68f8      	ldr	r0, [r7, #12]
 801362a:	f7ff fe3d 	bl	80132a8 <tcp_close_shutdown>
 801362e:	4603      	mov	r3, r0
 8013630:	e003      	b.n	801363a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8013632:	f06f 030a 	mvn.w	r3, #10
 8013636:	e000      	b.n	801363a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013638:	2300      	movs	r3, #0
}
 801363a:	4618      	mov	r0, r3
 801363c:	3710      	adds	r7, #16
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}
 8013642:	bf00      	nop
 8013644:	08022d00 	.word	0x08022d00
 8013648:	08022e28 	.word	0x08022e28
 801364c:	08022d44 	.word	0x08022d44

08013650 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b08e      	sub	sp, #56	; 0x38
 8013654:	af04      	add	r7, sp, #16
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d107      	bne.n	8013670 <tcp_abandon+0x20>
 8013660:	4b52      	ldr	r3, [pc, #328]	; (80137ac <tcp_abandon+0x15c>)
 8013662:	f240 223d 	movw	r2, #573	; 0x23d
 8013666:	4952      	ldr	r1, [pc, #328]	; (80137b0 <tcp_abandon+0x160>)
 8013668:	4852      	ldr	r0, [pc, #328]	; (80137b4 <tcp_abandon+0x164>)
 801366a:	f00c f91f 	bl	801f8ac <iprintf>
 801366e:	e099      	b.n	80137a4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	7d1b      	ldrb	r3, [r3, #20]
 8013674:	2b01      	cmp	r3, #1
 8013676:	d106      	bne.n	8013686 <tcp_abandon+0x36>
 8013678:	4b4c      	ldr	r3, [pc, #304]	; (80137ac <tcp_abandon+0x15c>)
 801367a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801367e:	494e      	ldr	r1, [pc, #312]	; (80137b8 <tcp_abandon+0x168>)
 8013680:	484c      	ldr	r0, [pc, #304]	; (80137b4 <tcp_abandon+0x164>)
 8013682:	f00c f913 	bl	801f8ac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	7d1b      	ldrb	r3, [r3, #20]
 801368a:	2b0a      	cmp	r3, #10
 801368c:	d107      	bne.n	801369e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801368e:	6879      	ldr	r1, [r7, #4]
 8013690:	484a      	ldr	r0, [pc, #296]	; (80137bc <tcp_abandon+0x16c>)
 8013692:	f001 fa53 	bl	8014b3c <tcp_pcb_remove>
    tcp_free(pcb);
 8013696:	6878      	ldr	r0, [r7, #4]
 8013698:	f7ff fd54 	bl	8013144 <tcp_free>
 801369c:	e082      	b.n	80137a4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801369e:	2300      	movs	r3, #0
 80136a0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80136a2:	2300      	movs	r3, #0
 80136a4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136aa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136b0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80136b8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	691b      	ldr	r3, [r3, #16]
 80136be:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	7d1b      	ldrb	r3, [r3, #20]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d126      	bne.n	8013716 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	8adb      	ldrh	r3, [r3, #22]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d02e      	beq.n	801372e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80136d0:	4b3b      	ldr	r3, [pc, #236]	; (80137c0 <tcp_abandon+0x170>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	687a      	ldr	r2, [r7, #4]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d105      	bne.n	80136e6 <tcp_abandon+0x96>
 80136da:	4b39      	ldr	r3, [pc, #228]	; (80137c0 <tcp_abandon+0x170>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	4a37      	ldr	r2, [pc, #220]	; (80137c0 <tcp_abandon+0x170>)
 80136e2:	6013      	str	r3, [r2, #0]
 80136e4:	e013      	b.n	801370e <tcp_abandon+0xbe>
 80136e6:	4b36      	ldr	r3, [pc, #216]	; (80137c0 <tcp_abandon+0x170>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	61fb      	str	r3, [r7, #28]
 80136ec:	e00c      	b.n	8013708 <tcp_abandon+0xb8>
 80136ee:	69fb      	ldr	r3, [r7, #28]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	687a      	ldr	r2, [r7, #4]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d104      	bne.n	8013702 <tcp_abandon+0xb2>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	68da      	ldr	r2, [r3, #12]
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	60da      	str	r2, [r3, #12]
 8013700:	e005      	b.n	801370e <tcp_abandon+0xbe>
 8013702:	69fb      	ldr	r3, [r7, #28]
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	61fb      	str	r3, [r7, #28]
 8013708:	69fb      	ldr	r3, [r7, #28]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1ef      	bne.n	80136ee <tcp_abandon+0x9e>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2200      	movs	r2, #0
 8013712:	60da      	str	r2, [r3, #12]
 8013714:	e00b      	b.n	801372e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	8adb      	ldrh	r3, [r3, #22]
 801371e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013720:	6879      	ldr	r1, [r7, #4]
 8013722:	4828      	ldr	r0, [pc, #160]	; (80137c4 <tcp_abandon+0x174>)
 8013724:	f001 fa0a 	bl	8014b3c <tcp_pcb_remove>
 8013728:	4b27      	ldr	r3, [pc, #156]	; (80137c8 <tcp_abandon+0x178>)
 801372a:	2201      	movs	r2, #1
 801372c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013732:	2b00      	cmp	r3, #0
 8013734:	d004      	beq.n	8013740 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801373a:	4618      	mov	r0, r3
 801373c:	f000 fede 	bl	80144fc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013744:	2b00      	cmp	r3, #0
 8013746:	d004      	beq.n	8013752 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801374c:	4618      	mov	r0, r3
 801374e:	f000 fed5 	bl	80144fc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013756:	2b00      	cmp	r3, #0
 8013758:	d004      	beq.n	8013764 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801375e:	4618      	mov	r0, r3
 8013760:	f000 fecc 	bl	80144fc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013766:	2b00      	cmp	r3, #0
 8013768:	d00e      	beq.n	8013788 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801376a:	6879      	ldr	r1, [r7, #4]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	3304      	adds	r3, #4
 8013770:	687a      	ldr	r2, [r7, #4]
 8013772:	8b12      	ldrh	r2, [r2, #24]
 8013774:	9202      	str	r2, [sp, #8]
 8013776:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013778:	9201      	str	r2, [sp, #4]
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	460b      	mov	r3, r1
 801377e:	697a      	ldr	r2, [r7, #20]
 8013780:	69b9      	ldr	r1, [r7, #24]
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f005 fbaa 	bl	8018edc <tcp_rst>
    }
    last_state = pcb->state;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	7d1b      	ldrb	r3, [r3, #20]
 801378c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7ff fcd8 	bl	8013144 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d004      	beq.n	80137a4 <tcp_abandon+0x154>
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	f06f 010c 	mvn.w	r1, #12
 80137a0:	68f8      	ldr	r0, [r7, #12]
 80137a2:	4798      	blx	r3
  }
}
 80137a4:	3728      	adds	r7, #40	; 0x28
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}
 80137aa:	bf00      	nop
 80137ac:	08022d00 	.word	0x08022d00
 80137b0:	08022e44 	.word	0x08022e44
 80137b4:	08022d44 	.word	0x08022d44
 80137b8:	08022e60 	.word	0x08022e60
 80137bc:	200101dc 	.word	0x200101dc
 80137c0:	200101d0 	.word	0x200101d0
 80137c4:	200101d8 	.word	0x200101d8
 80137c8:	200101e0 	.word	0x200101e0

080137cc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80137d4:	2101      	movs	r1, #1
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f7ff ff3a 	bl	8013650 <tcp_abandon>
}
 80137dc:	bf00      	nop
 80137de:	3708      	adds	r7, #8
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b088      	sub	sp, #32
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	60f8      	str	r0, [r7, #12]
 80137ec:	60b9      	str	r1, [r7, #8]
 80137ee:	4613      	mov	r3, r2
 80137f0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80137f2:	2304      	movs	r3, #4
 80137f4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d101      	bne.n	8013800 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80137fc:	4b3e      	ldr	r3, [pc, #248]	; (80138f8 <tcp_bind+0x114>)
 80137fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d109      	bne.n	801381a <tcp_bind+0x36>
 8013806:	4b3d      	ldr	r3, [pc, #244]	; (80138fc <tcp_bind+0x118>)
 8013808:	f240 22a9 	movw	r2, #681	; 0x2a9
 801380c:	493c      	ldr	r1, [pc, #240]	; (8013900 <tcp_bind+0x11c>)
 801380e:	483d      	ldr	r0, [pc, #244]	; (8013904 <tcp_bind+0x120>)
 8013810:	f00c f84c 	bl	801f8ac <iprintf>
 8013814:	f06f 030f 	mvn.w	r3, #15
 8013818:	e06a      	b.n	80138f0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	7d1b      	ldrb	r3, [r3, #20]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d009      	beq.n	8013836 <tcp_bind+0x52>
 8013822:	4b36      	ldr	r3, [pc, #216]	; (80138fc <tcp_bind+0x118>)
 8013824:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013828:	4937      	ldr	r1, [pc, #220]	; (8013908 <tcp_bind+0x124>)
 801382a:	4836      	ldr	r0, [pc, #216]	; (8013904 <tcp_bind+0x120>)
 801382c:	f00c f83e 	bl	801f8ac <iprintf>
 8013830:	f06f 0305 	mvn.w	r3, #5
 8013834:	e05c      	b.n	80138f0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013836:	88fb      	ldrh	r3, [r7, #6]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d109      	bne.n	8013850 <tcp_bind+0x6c>
    port = tcp_new_port();
 801383c:	f000 f9f8 	bl	8013c30 <tcp_new_port>
 8013840:	4603      	mov	r3, r0
 8013842:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013844:	88fb      	ldrh	r3, [r7, #6]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d135      	bne.n	80138b6 <tcp_bind+0xd2>
      return ERR_BUF;
 801384a:	f06f 0301 	mvn.w	r3, #1
 801384e:	e04f      	b.n	80138f0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013850:	2300      	movs	r3, #0
 8013852:	61fb      	str	r3, [r7, #28]
 8013854:	e02b      	b.n	80138ae <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013856:	4a2d      	ldr	r2, [pc, #180]	; (801390c <tcp_bind+0x128>)
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	61bb      	str	r3, [r7, #24]
 8013862:	e01e      	b.n	80138a2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013864:	69bb      	ldr	r3, [r7, #24]
 8013866:	8adb      	ldrh	r3, [r3, #22]
 8013868:	88fa      	ldrh	r2, [r7, #6]
 801386a:	429a      	cmp	r2, r3
 801386c:	d116      	bne.n	801389c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801386e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013870:	2b00      	cmp	r3, #0
 8013872:	d010      	beq.n	8013896 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013874:	69bb      	ldr	r3, [r7, #24]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d00c      	beq.n	8013896 <tcp_bind+0xb2>
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d009      	beq.n	8013896 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d005      	beq.n	8013896 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	681a      	ldr	r2, [r3, #0]
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013892:	429a      	cmp	r2, r3
 8013894:	d102      	bne.n	801389c <tcp_bind+0xb8>
              return ERR_USE;
 8013896:	f06f 0307 	mvn.w	r3, #7
 801389a:	e029      	b.n	80138f0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801389c:	69bb      	ldr	r3, [r7, #24]
 801389e:	68db      	ldr	r3, [r3, #12]
 80138a0:	61bb      	str	r3, [r7, #24]
 80138a2:	69bb      	ldr	r3, [r7, #24]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d1dd      	bne.n	8013864 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	3301      	adds	r3, #1
 80138ac:	61fb      	str	r3, [r7, #28]
 80138ae:	69fa      	ldr	r2, [r7, #28]
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	429a      	cmp	r2, r3
 80138b4:	dbcf      	blt.n	8013856 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d00c      	beq.n	80138d6 <tcp_bind+0xf2>
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d008      	beq.n	80138d6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d002      	beq.n	80138d0 <tcp_bind+0xec>
 80138ca:	68bb      	ldr	r3, [r7, #8]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	e000      	b.n	80138d2 <tcp_bind+0xee>
 80138d0:	2300      	movs	r3, #0
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	88fa      	ldrh	r2, [r7, #6]
 80138da:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80138dc:	4b0c      	ldr	r3, [pc, #48]	; (8013910 <tcp_bind+0x12c>)
 80138de:	681a      	ldr	r2, [r3, #0]
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	60da      	str	r2, [r3, #12]
 80138e4:	4a0a      	ldr	r2, [pc, #40]	; (8013910 <tcp_bind+0x12c>)
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	6013      	str	r3, [r2, #0]
 80138ea:	f005 fcb9 	bl	8019260 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80138ee:	2300      	movs	r3, #0
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	3720      	adds	r7, #32
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	080251e8 	.word	0x080251e8
 80138fc:	08022d00 	.word	0x08022d00
 8013900:	08022e94 	.word	0x08022e94
 8013904:	08022d44 	.word	0x08022d44
 8013908:	08022eac 	.word	0x08022eac
 801390c:	080251b0 	.word	0x080251b0
 8013910:	200101d0 	.word	0x200101d0

08013914 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d007      	beq.n	8013934 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801392a:	3301      	adds	r3, #1
 801392c:	b2da      	uxtb	r2, r3
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8013932:	e002      	b.n	801393a <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2200      	movs	r2, #0
 8013938:	721a      	strb	r2, [r3, #8]
}
 801393a:	bf00      	nop
 801393c:	370c      	adds	r7, #12
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr
	...

08013948 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b084      	sub	sp, #16
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	4613      	mov	r3, r2
 8013954:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d106      	bne.n	801396a <tcp_accept_null+0x22>
 801395c:	4b07      	ldr	r3, [pc, #28]	; (801397c <tcp_accept_null+0x34>)
 801395e:	f240 320f 	movw	r2, #783	; 0x30f
 8013962:	4907      	ldr	r1, [pc, #28]	; (8013980 <tcp_accept_null+0x38>)
 8013964:	4807      	ldr	r0, [pc, #28]	; (8013984 <tcp_accept_null+0x3c>)
 8013966:	f00b ffa1 	bl	801f8ac <iprintf>

  tcp_abort(pcb);
 801396a:	68b8      	ldr	r0, [r7, #8]
 801396c:	f7ff ff2e 	bl	80137cc <tcp_abort>

  return ERR_ABRT;
 8013970:	f06f 030c 	mvn.w	r3, #12
}
 8013974:	4618      	mov	r0, r3
 8013976:	3710      	adds	r7, #16
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}
 801397c:	08022d00 	.word	0x08022d00
 8013980:	08022ed4 	.word	0x08022ed4
 8013984:	08022d44 	.word	0x08022d44

08013988 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b088      	sub	sp, #32
 801398c:	af00      	add	r7, sp, #0
 801398e:	60f8      	str	r0, [r7, #12]
 8013990:	460b      	mov	r3, r1
 8013992:	607a      	str	r2, [r7, #4]
 8013994:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013996:	2300      	movs	r3, #0
 8013998:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d109      	bne.n	80139b4 <tcp_listen_with_backlog_and_err+0x2c>
 80139a0:	4b47      	ldr	r3, [pc, #284]	; (8013ac0 <tcp_listen_with_backlog_and_err+0x138>)
 80139a2:	f240 3259 	movw	r2, #857	; 0x359
 80139a6:	4947      	ldr	r1, [pc, #284]	; (8013ac4 <tcp_listen_with_backlog_and_err+0x13c>)
 80139a8:	4847      	ldr	r0, [pc, #284]	; (8013ac8 <tcp_listen_with_backlog_and_err+0x140>)
 80139aa:	f00b ff7f 	bl	801f8ac <iprintf>
 80139ae:	23f0      	movs	r3, #240	; 0xf0
 80139b0:	76fb      	strb	r3, [r7, #27]
 80139b2:	e079      	b.n	8013aa8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	7d1b      	ldrb	r3, [r3, #20]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d009      	beq.n	80139d0 <tcp_listen_with_backlog_and_err+0x48>
 80139bc:	4b40      	ldr	r3, [pc, #256]	; (8013ac0 <tcp_listen_with_backlog_and_err+0x138>)
 80139be:	f240 325a 	movw	r2, #858	; 0x35a
 80139c2:	4942      	ldr	r1, [pc, #264]	; (8013acc <tcp_listen_with_backlog_and_err+0x144>)
 80139c4:	4840      	ldr	r0, [pc, #256]	; (8013ac8 <tcp_listen_with_backlog_and_err+0x140>)
 80139c6:	f00b ff71 	bl	801f8ac <iprintf>
 80139ca:	23f1      	movs	r3, #241	; 0xf1
 80139cc:	76fb      	strb	r3, [r7, #27]
 80139ce:	e06b      	b.n	8013aa8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	7d1b      	ldrb	r3, [r3, #20]
 80139d4:	2b01      	cmp	r3, #1
 80139d6:	d104      	bne.n	80139e2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80139dc:	23f7      	movs	r3, #247	; 0xf7
 80139de:	76fb      	strb	r3, [r7, #27]
    goto done;
 80139e0:	e062      	b.n	8013aa8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80139e2:	2002      	movs	r0, #2
 80139e4:	f7fe f994 	bl	8011d10 <memp_malloc>
 80139e8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80139ea:	69fb      	ldr	r3, [r7, #28]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d102      	bne.n	80139f6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80139f0:	23ff      	movs	r3, #255	; 0xff
 80139f2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80139f4:	e058      	b.n	8013aa8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	691a      	ldr	r2, [r3, #16]
 80139fa:	69fb      	ldr	r3, [r7, #28]
 80139fc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	8ada      	ldrh	r2, [r3, #22]
 8013a02:	69fb      	ldr	r3, [r7, #28]
 8013a04:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013a06:	69fb      	ldr	r3, [r7, #28]
 8013a08:	2201      	movs	r2, #1
 8013a0a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	7d5a      	ldrb	r2, [r3, #21]
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	7a5a      	ldrb	r2, [r3, #9]
 8013a18:	69fb      	ldr	r3, [r7, #28]
 8013a1a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013a1c:	69fb      	ldr	r3, [r7, #28]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	7ada      	ldrb	r2, [r3, #11]
 8013a26:	69fb      	ldr	r3, [r7, #28]
 8013a28:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	7a9a      	ldrb	r2, [r3, #10]
 8013a2e:	69fb      	ldr	r3, [r7, #28]
 8013a30:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	69fb      	ldr	r3, [r7, #28]
 8013a38:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	8adb      	ldrh	r3, [r3, #22]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d021      	beq.n	8013a86 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013a42:	4b23      	ldr	r3, [pc, #140]	; (8013ad0 <tcp_listen_with_backlog_and_err+0x148>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	68fa      	ldr	r2, [r7, #12]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d105      	bne.n	8013a58 <tcp_listen_with_backlog_and_err+0xd0>
 8013a4c:	4b20      	ldr	r3, [pc, #128]	; (8013ad0 <tcp_listen_with_backlog_and_err+0x148>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	4a1f      	ldr	r2, [pc, #124]	; (8013ad0 <tcp_listen_with_backlog_and_err+0x148>)
 8013a54:	6013      	str	r3, [r2, #0]
 8013a56:	e013      	b.n	8013a80 <tcp_listen_with_backlog_and_err+0xf8>
 8013a58:	4b1d      	ldr	r3, [pc, #116]	; (8013ad0 <tcp_listen_with_backlog_and_err+0x148>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	617b      	str	r3, [r7, #20]
 8013a5e:	e00c      	b.n	8013a7a <tcp_listen_with_backlog_and_err+0xf2>
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	68fa      	ldr	r2, [r7, #12]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d104      	bne.n	8013a74 <tcp_listen_with_backlog_and_err+0xec>
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	68da      	ldr	r2, [r3, #12]
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	60da      	str	r2, [r3, #12]
 8013a72:	e005      	b.n	8013a80 <tcp_listen_with_backlog_and_err+0xf8>
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	617b      	str	r3, [r7, #20]
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d1ef      	bne.n	8013a60 <tcp_listen_with_backlog_and_err+0xd8>
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	2200      	movs	r2, #0
 8013a84:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013a86:	68f8      	ldr	r0, [r7, #12]
 8013a88:	f7ff fb5c 	bl	8013144 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013a8c:	69fb      	ldr	r3, [r7, #28]
 8013a8e:	4a11      	ldr	r2, [pc, #68]	; (8013ad4 <tcp_listen_with_backlog_and_err+0x14c>)
 8013a90:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013a92:	4b11      	ldr	r3, [pc, #68]	; (8013ad8 <tcp_listen_with_backlog_and_err+0x150>)
 8013a94:	681a      	ldr	r2, [r3, #0]
 8013a96:	69fb      	ldr	r3, [r7, #28]
 8013a98:	60da      	str	r2, [r3, #12]
 8013a9a:	4a0f      	ldr	r2, [pc, #60]	; (8013ad8 <tcp_listen_with_backlog_and_err+0x150>)
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	6013      	str	r3, [r2, #0]
 8013aa0:	f005 fbde 	bl	8019260 <tcp_timer_needed>
  res = ERR_OK;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d002      	beq.n	8013ab4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	7efa      	ldrb	r2, [r7, #27]
 8013ab2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013ab4:	69fb      	ldr	r3, [r7, #28]
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3720      	adds	r7, #32
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}
 8013abe:	bf00      	nop
 8013ac0:	08022d00 	.word	0x08022d00
 8013ac4:	08022ef4 	.word	0x08022ef4
 8013ac8:	08022d44 	.word	0x08022d44
 8013acc:	08022f24 	.word	0x08022f24
 8013ad0:	200101d0 	.word	0x200101d0
 8013ad4:	08013949 	.word	0x08013949
 8013ad8:	200101d4 	.word	0x200101d4

08013adc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b084      	sub	sp, #16
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d106      	bne.n	8013af8 <tcp_update_rcv_ann_wnd+0x1c>
 8013aea:	4b25      	ldr	r3, [pc, #148]	; (8013b80 <tcp_update_rcv_ann_wnd+0xa4>)
 8013aec:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013af0:	4924      	ldr	r1, [pc, #144]	; (8013b84 <tcp_update_rcv_ann_wnd+0xa8>)
 8013af2:	4825      	ldr	r0, [pc, #148]	; (8013b88 <tcp_update_rcv_ann_wnd+0xac>)
 8013af4:	f00b feda 	bl	801f8ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013afc:	687a      	ldr	r2, [r7, #4]
 8013afe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013b00:	4413      	add	r3, r2
 8013b02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013b0c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013b10:	bf28      	it	cs
 8013b12:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013b16:	b292      	uxth	r2, r2
 8013b18:	4413      	add	r3, r2
 8013b1a:	68fa      	ldr	r2, [r7, #12]
 8013b1c:	1ad3      	subs	r3, r2, r3
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	db08      	blt.n	8013b34 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b2e:	68fa      	ldr	r2, [r7, #12]
 8013b30:	1ad3      	subs	r3, r2, r3
 8013b32:	e020      	b.n	8013b76 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b3c:	1ad3      	subs	r3, r2, r3
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	dd03      	ble.n	8013b4a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2200      	movs	r2, #0
 8013b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013b48:	e014      	b.n	8013b74 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b52:	1ad3      	subs	r3, r2, r3
 8013b54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b5c:	d306      	bcc.n	8013b6c <tcp_update_rcv_ann_wnd+0x90>
 8013b5e:	4b08      	ldr	r3, [pc, #32]	; (8013b80 <tcp_update_rcv_ann_wnd+0xa4>)
 8013b60:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013b64:	4909      	ldr	r1, [pc, #36]	; (8013b8c <tcp_update_rcv_ann_wnd+0xb0>)
 8013b66:	4808      	ldr	r0, [pc, #32]	; (8013b88 <tcp_update_rcv_ann_wnd+0xac>)
 8013b68:	f00b fea0 	bl	801f8ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	b29a      	uxth	r2, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013b74:	2300      	movs	r3, #0
  }
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3710      	adds	r7, #16
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	08022d00 	.word	0x08022d00
 8013b84:	08022f5c 	.word	0x08022f5c
 8013b88:	08022d44 	.word	0x08022d44
 8013b8c:	08022f80 	.word	0x08022f80

08013b90 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b084      	sub	sp, #16
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	460b      	mov	r3, r1
 8013b9a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d107      	bne.n	8013bb2 <tcp_recved+0x22>
 8013ba2:	4b1f      	ldr	r3, [pc, #124]	; (8013c20 <tcp_recved+0x90>)
 8013ba4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013ba8:	491e      	ldr	r1, [pc, #120]	; (8013c24 <tcp_recved+0x94>)
 8013baa:	481f      	ldr	r0, [pc, #124]	; (8013c28 <tcp_recved+0x98>)
 8013bac:	f00b fe7e 	bl	801f8ac <iprintf>
 8013bb0:	e032      	b.n	8013c18 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	7d1b      	ldrb	r3, [r3, #20]
 8013bb6:	2b01      	cmp	r3, #1
 8013bb8:	d106      	bne.n	8013bc8 <tcp_recved+0x38>
 8013bba:	4b19      	ldr	r3, [pc, #100]	; (8013c20 <tcp_recved+0x90>)
 8013bbc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013bc0:	491a      	ldr	r1, [pc, #104]	; (8013c2c <tcp_recved+0x9c>)
 8013bc2:	4819      	ldr	r0, [pc, #100]	; (8013c28 <tcp_recved+0x98>)
 8013bc4:	f00b fe72 	bl	801f8ac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013bcc:	887b      	ldrh	r3, [r7, #2]
 8013bce:	4413      	add	r3, r2
 8013bd0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013bd2:	89fb      	ldrh	r3, [r7, #14]
 8013bd4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013bd8:	d804      	bhi.n	8013be4 <tcp_recved+0x54>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013bde:	89fa      	ldrh	r2, [r7, #14]
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d204      	bcs.n	8013bee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013bea:	851a      	strh	r2, [r3, #40]	; 0x28
 8013bec:	e002      	b.n	8013bf4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	89fa      	ldrh	r2, [r7, #14]
 8013bf2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f7ff ff71 	bl	8013adc <tcp_update_rcv_ann_wnd>
 8013bfa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013c02:	d309      	bcc.n	8013c18 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	8b5b      	ldrh	r3, [r3, #26]
 8013c08:	f043 0302 	orr.w	r3, r3, #2
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f004 fbae 	bl	8018374 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013c18:	3710      	adds	r7, #16
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
 8013c1e:	bf00      	nop
 8013c20:	08022d00 	.word	0x08022d00
 8013c24:	08022f9c 	.word	0x08022f9c
 8013c28:	08022d44 	.word	0x08022d44
 8013c2c:	08022fb4 	.word	0x08022fb4

08013c30 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013c30:	b480      	push	{r7}
 8013c32:	b083      	sub	sp, #12
 8013c34:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013c36:	2300      	movs	r3, #0
 8013c38:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013c3a:	4b1e      	ldr	r3, [pc, #120]	; (8013cb4 <tcp_new_port+0x84>)
 8013c3c:	881b      	ldrh	r3, [r3, #0]
 8013c3e:	3301      	adds	r3, #1
 8013c40:	b29a      	uxth	r2, r3
 8013c42:	4b1c      	ldr	r3, [pc, #112]	; (8013cb4 <tcp_new_port+0x84>)
 8013c44:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013c46:	4b1b      	ldr	r3, [pc, #108]	; (8013cb4 <tcp_new_port+0x84>)
 8013c48:	881b      	ldrh	r3, [r3, #0]
 8013c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c4e:	4293      	cmp	r3, r2
 8013c50:	d103      	bne.n	8013c5a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013c52:	4b18      	ldr	r3, [pc, #96]	; (8013cb4 <tcp_new_port+0x84>)
 8013c54:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013c58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	71fb      	strb	r3, [r7, #7]
 8013c5e:	e01e      	b.n	8013c9e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013c60:	79fb      	ldrb	r3, [r7, #7]
 8013c62:	4a15      	ldr	r2, [pc, #84]	; (8013cb8 <tcp_new_port+0x88>)
 8013c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	603b      	str	r3, [r7, #0]
 8013c6c:	e011      	b.n	8013c92 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	8ada      	ldrh	r2, [r3, #22]
 8013c72:	4b10      	ldr	r3, [pc, #64]	; (8013cb4 <tcp_new_port+0x84>)
 8013c74:	881b      	ldrh	r3, [r3, #0]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	d108      	bne.n	8013c8c <tcp_new_port+0x5c>
        n++;
 8013c7a:	88bb      	ldrh	r3, [r7, #4]
 8013c7c:	3301      	adds	r3, #1
 8013c7e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013c80:	88bb      	ldrh	r3, [r7, #4]
 8013c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013c86:	d3d8      	bcc.n	8013c3a <tcp_new_port+0xa>
          return 0;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	e00d      	b.n	8013ca8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013c8c:	683b      	ldr	r3, [r7, #0]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	603b      	str	r3, [r7, #0]
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d1ea      	bne.n	8013c6e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013c98:	79fb      	ldrb	r3, [r7, #7]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	71fb      	strb	r3, [r7, #7]
 8013c9e:	79fb      	ldrb	r3, [r7, #7]
 8013ca0:	2b03      	cmp	r3, #3
 8013ca2:	d9dd      	bls.n	8013c60 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013ca4:	4b03      	ldr	r3, [pc, #12]	; (8013cb4 <tcp_new_port+0x84>)
 8013ca6:	881b      	ldrh	r3, [r3, #0]
}
 8013ca8:	4618      	mov	r0, r3
 8013caa:	370c      	adds	r7, #12
 8013cac:	46bd      	mov	sp, r7
 8013cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb2:	4770      	bx	lr
 8013cb4:	20000024 	.word	0x20000024
 8013cb8:	080251b0 	.word	0x080251b0

08013cbc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013cbc:	b5b0      	push	{r4, r5, r7, lr}
 8013cbe:	b090      	sub	sp, #64	; 0x40
 8013cc0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8013cc8:	4b94      	ldr	r3, [pc, #592]	; (8013f1c <tcp_slowtmr+0x260>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	3301      	adds	r3, #1
 8013cce:	4a93      	ldr	r2, [pc, #588]	; (8013f1c <tcp_slowtmr+0x260>)
 8013cd0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013cd2:	4b93      	ldr	r3, [pc, #588]	; (8013f20 <tcp_slowtmr+0x264>)
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	b2da      	uxtb	r2, r3
 8013cda:	4b91      	ldr	r3, [pc, #580]	; (8013f20 <tcp_slowtmr+0x264>)
 8013cdc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013ce2:	4b90      	ldr	r3, [pc, #576]	; (8013f24 <tcp_slowtmr+0x268>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8013ce8:	e29f      	b.n	801422a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cec:	7d1b      	ldrb	r3, [r3, #20]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d106      	bne.n	8013d00 <tcp_slowtmr+0x44>
 8013cf2:	4b8d      	ldr	r3, [pc, #564]	; (8013f28 <tcp_slowtmr+0x26c>)
 8013cf4:	f240 42be 	movw	r2, #1214	; 0x4be
 8013cf8:	498c      	ldr	r1, [pc, #560]	; (8013f2c <tcp_slowtmr+0x270>)
 8013cfa:	488d      	ldr	r0, [pc, #564]	; (8013f30 <tcp_slowtmr+0x274>)
 8013cfc:	f00b fdd6 	bl	801f8ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d02:	7d1b      	ldrb	r3, [r3, #20]
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d106      	bne.n	8013d16 <tcp_slowtmr+0x5a>
 8013d08:	4b87      	ldr	r3, [pc, #540]	; (8013f28 <tcp_slowtmr+0x26c>)
 8013d0a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013d0e:	4989      	ldr	r1, [pc, #548]	; (8013f34 <tcp_slowtmr+0x278>)
 8013d10:	4887      	ldr	r0, [pc, #540]	; (8013f30 <tcp_slowtmr+0x274>)
 8013d12:	f00b fdcb 	bl	801f8ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d18:	7d1b      	ldrb	r3, [r3, #20]
 8013d1a:	2b0a      	cmp	r3, #10
 8013d1c:	d106      	bne.n	8013d2c <tcp_slowtmr+0x70>
 8013d1e:	4b82      	ldr	r3, [pc, #520]	; (8013f28 <tcp_slowtmr+0x26c>)
 8013d20:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013d24:	4984      	ldr	r1, [pc, #528]	; (8013f38 <tcp_slowtmr+0x27c>)
 8013d26:	4882      	ldr	r0, [pc, #520]	; (8013f30 <tcp_slowtmr+0x274>)
 8013d28:	f00b fdc0 	bl	801f8ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2e:	7f9a      	ldrb	r2, [r3, #30]
 8013d30:	4b7b      	ldr	r3, [pc, #492]	; (8013f20 <tcp_slowtmr+0x264>)
 8013d32:	781b      	ldrb	r3, [r3, #0]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d105      	bne.n	8013d44 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8013d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d3e:	68db      	ldr	r3, [r3, #12]
 8013d40:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013d42:	e272      	b.n	801422a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013d44:	4b76      	ldr	r3, [pc, #472]	; (8013f20 <tcp_slowtmr+0x264>)
 8013d46:	781a      	ldrb	r2, [r3, #0]
 8013d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d4a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013d52:	2300      	movs	r3, #0
 8013d54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5a:	7d1b      	ldrb	r3, [r3, #20]
 8013d5c:	2b02      	cmp	r3, #2
 8013d5e:	d10a      	bne.n	8013d76 <tcp_slowtmr+0xba>
 8013d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d66:	2b05      	cmp	r3, #5
 8013d68:	d905      	bls.n	8013d76 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8013d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d6e:	3301      	adds	r3, #1
 8013d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d74:	e11e      	b.n	8013fb4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d7c:	2b0b      	cmp	r3, #11
 8013d7e:	d905      	bls.n	8013d8c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8013d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d84:	3301      	adds	r3, #1
 8013d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d8a:	e113      	b.n	8013fb4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8013d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d075      	beq.n	8013e82 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d006      	beq.n	8013dac <tcp_slowtmr+0xf0>
 8013d9e:	4b62      	ldr	r3, [pc, #392]	; (8013f28 <tcp_slowtmr+0x26c>)
 8013da0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8013da4:	4965      	ldr	r1, [pc, #404]	; (8013f3c <tcp_slowtmr+0x280>)
 8013da6:	4862      	ldr	r0, [pc, #392]	; (8013f30 <tcp_slowtmr+0x274>)
 8013da8:	f00b fd80 	bl	801f8ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d106      	bne.n	8013dc2 <tcp_slowtmr+0x106>
 8013db4:	4b5c      	ldr	r3, [pc, #368]	; (8013f28 <tcp_slowtmr+0x26c>)
 8013db6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013dba:	4961      	ldr	r1, [pc, #388]	; (8013f40 <tcp_slowtmr+0x284>)
 8013dbc:	485c      	ldr	r0, [pc, #368]	; (8013f30 <tcp_slowtmr+0x274>)
 8013dbe:	f00b fd75 	bl	801f8ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013dc8:	2b0b      	cmp	r3, #11
 8013dca:	d905      	bls.n	8013dd8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013dd6:	e0ed      	b.n	8013fb4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013dde:	3b01      	subs	r3, #1
 8013de0:	4a58      	ldr	r2, [pc, #352]	; (8013f44 <tcp_slowtmr+0x288>)
 8013de2:	5cd3      	ldrb	r3, [r2, r3]
 8013de4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013dec:	7c7a      	ldrb	r2, [r7, #17]
 8013dee:	429a      	cmp	r2, r3
 8013df0:	d907      	bls.n	8013e02 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013df8:	3301      	adds	r3, #1
 8013dfa:	b2da      	uxtb	r2, r3
 8013dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dfe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013e08:	7c7a      	ldrb	r2, [r7, #17]
 8013e0a:	429a      	cmp	r2, r3
 8013e0c:	f200 80d2 	bhi.w	8013fb4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013e10:	2301      	movs	r3, #1
 8013e12:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d108      	bne.n	8013e30 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013e1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e20:	f005 f950 	bl	80190c4 <tcp_zero_window_probe>
 8013e24:	4603      	mov	r3, r0
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d014      	beq.n	8013e54 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	623b      	str	r3, [r7, #32]
 8013e2e:	e011      	b.n	8013e54 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e36:	4619      	mov	r1, r3
 8013e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e3a:	f004 f815 	bl	8017e68 <tcp_split_unsent_seg>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d107      	bne.n	8013e54 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013e44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013e46:	f004 fa95 	bl	8018374 <tcp_output>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d101      	bne.n	8013e54 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013e50:	2300      	movs	r3, #0
 8013e52:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013e54:	6a3b      	ldr	r3, [r7, #32]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	f000 80ac 	beq.w	8013fb4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e5e:	2200      	movs	r2, #0
 8013e60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013e6a:	2b06      	cmp	r3, #6
 8013e6c:	f200 80a2 	bhi.w	8013fb4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013e76:	3301      	adds	r3, #1
 8013e78:	b2da      	uxtb	r2, r3
 8013e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013e80:	e098      	b.n	8013fb4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	db0f      	blt.n	8013eac <tcp_slowtmr+0x1f0>
 8013e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013e92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013e96:	4293      	cmp	r3, r2
 8013e98:	d008      	beq.n	8013eac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8013e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ea0:	b29b      	uxth	r3, r3
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	b29b      	uxth	r3, r3
 8013ea6:	b21a      	sxth	r2, r3
 8013ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eaa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8013eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	db7b      	blt.n	8013fb4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ebe:	f004 fd4d 	bl	801895c <tcp_rexmit_rto_prepare>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d007      	beq.n	8013ed8 <tcp_slowtmr+0x21c>
 8013ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d171      	bne.n	8013fb4 <tcp_slowtmr+0x2f8>
 8013ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d06d      	beq.n	8013fb4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eda:	7d1b      	ldrb	r3, [r3, #20]
 8013edc:	2b02      	cmp	r3, #2
 8013ede:	d03a      	beq.n	8013f56 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ee6:	2b0c      	cmp	r3, #12
 8013ee8:	bf28      	it	cs
 8013eea:	230c      	movcs	r3, #12
 8013eec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ef0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ef4:	10db      	asrs	r3, r3, #3
 8013ef6:	b21b      	sxth	r3, r3
 8013ef8:	461a      	mov	r2, r3
 8013efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013f00:	4413      	add	r3, r2
 8013f02:	7efa      	ldrb	r2, [r7, #27]
 8013f04:	4910      	ldr	r1, [pc, #64]	; (8013f48 <tcp_slowtmr+0x28c>)
 8013f06:	5c8a      	ldrb	r2, [r1, r2]
 8013f08:	4093      	lsls	r3, r2
 8013f0a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013f12:	4293      	cmp	r3, r2
 8013f14:	dc1a      	bgt.n	8013f4c <tcp_slowtmr+0x290>
 8013f16:	697b      	ldr	r3, [r7, #20]
 8013f18:	b21a      	sxth	r2, r3
 8013f1a:	e019      	b.n	8013f50 <tcp_slowtmr+0x294>
 8013f1c:	200101cc 	.word	0x200101cc
 8013f20:	200101e2 	.word	0x200101e2
 8013f24:	200101d8 	.word	0x200101d8
 8013f28:	08022d00 	.word	0x08022d00
 8013f2c:	08023044 	.word	0x08023044
 8013f30:	08022d44 	.word	0x08022d44
 8013f34:	08023070 	.word	0x08023070
 8013f38:	0802309c 	.word	0x0802309c
 8013f3c:	080230cc 	.word	0x080230cc
 8013f40:	08023100 	.word	0x08023100
 8013f44:	080251a8 	.word	0x080251a8
 8013f48:	08025198 	.word	0x08025198
 8013f4c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f58:	2200      	movs	r2, #0
 8013f5a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f68:	4293      	cmp	r3, r2
 8013f6a:	bf28      	it	cs
 8013f6c:	4613      	movcs	r3, r2
 8013f6e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013f70:	8a7b      	ldrh	r3, [r7, #18]
 8013f72:	085b      	lsrs	r3, r3, #1
 8013f74:	b29a      	uxth	r2, r3
 8013f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f86:	005b      	lsls	r3, r3, #1
 8013f88:	b29b      	uxth	r3, r3
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d206      	bcs.n	8013f9c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f92:	005b      	lsls	r3, r3, #1
 8013f94:	b29a      	uxth	r2, r3
 8013f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f9e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa8:	2200      	movs	r2, #0
 8013faa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8013fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013fb0:	f004 fd44 	bl	8018a3c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb6:	7d1b      	ldrb	r3, [r3, #20]
 8013fb8:	2b06      	cmp	r3, #6
 8013fba:	d111      	bne.n	8013fe0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fbe:	8b5b      	ldrh	r3, [r3, #26]
 8013fc0:	f003 0310 	and.w	r3, r3, #16
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d00b      	beq.n	8013fe0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013fc8:	4b9d      	ldr	r3, [pc, #628]	; (8014240 <tcp_slowtmr+0x584>)
 8013fca:	681a      	ldr	r2, [r3, #0]
 8013fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fce:	6a1b      	ldr	r3, [r3, #32]
 8013fd0:	1ad3      	subs	r3, r2, r3
 8013fd2:	2b28      	cmp	r3, #40	; 0x28
 8013fd4:	d904      	bls.n	8013fe0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8013fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fda:	3301      	adds	r3, #1
 8013fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe2:	7a5b      	ldrb	r3, [r3, #9]
 8013fe4:	f003 0308 	and.w	r3, r3, #8
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d04c      	beq.n	8014086 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013ff0:	2b04      	cmp	r3, #4
 8013ff2:	d003      	beq.n	8013ffc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013ff8:	2b07      	cmp	r3, #7
 8013ffa:	d144      	bne.n	8014086 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013ffc:	4b90      	ldr	r3, [pc, #576]	; (8014240 <tcp_slowtmr+0x584>)
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014002:	6a1b      	ldr	r3, [r3, #32]
 8014004:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801400c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8014010:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8014014:	498b      	ldr	r1, [pc, #556]	; (8014244 <tcp_slowtmr+0x588>)
 8014016:	fba1 1303 	umull	r1, r3, r1, r3
 801401a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801401c:	429a      	cmp	r2, r3
 801401e:	d90a      	bls.n	8014036 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014024:	3301      	adds	r3, #1
 8014026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801402a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801402e:	3301      	adds	r3, #1
 8014030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014034:	e027      	b.n	8014086 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014036:	4b82      	ldr	r3, [pc, #520]	; (8014240 <tcp_slowtmr+0x584>)
 8014038:	681a      	ldr	r2, [r3, #0]
 801403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801403c:	6a1b      	ldr	r3, [r3, #32]
 801403e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014042:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014048:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801404c:	4618      	mov	r0, r3
 801404e:	4b7e      	ldr	r3, [pc, #504]	; (8014248 <tcp_slowtmr+0x58c>)
 8014050:	fb00 f303 	mul.w	r3, r0, r3
 8014054:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014056:	497b      	ldr	r1, [pc, #492]	; (8014244 <tcp_slowtmr+0x588>)
 8014058:	fba1 1303 	umull	r1, r3, r1, r3
 801405c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801405e:	429a      	cmp	r2, r3
 8014060:	d911      	bls.n	8014086 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8014062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014064:	f004 ffee 	bl	8019044 <tcp_keepalive>
 8014068:	4603      	mov	r3, r0
 801406a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801406e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014072:	2b00      	cmp	r3, #0
 8014074:	d107      	bne.n	8014086 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8014076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014078:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801407c:	3301      	adds	r3, #1
 801407e:	b2da      	uxtb	r2, r3
 8014080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014082:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8014086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801408a:	2b00      	cmp	r3, #0
 801408c:	d011      	beq.n	80140b2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801408e:	4b6c      	ldr	r3, [pc, #432]	; (8014240 <tcp_slowtmr+0x584>)
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014094:	6a1b      	ldr	r3, [r3, #32]
 8014096:	1ad2      	subs	r2, r2, r3
 8014098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801409a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801409e:	4619      	mov	r1, r3
 80140a0:	460b      	mov	r3, r1
 80140a2:	005b      	lsls	r3, r3, #1
 80140a4:	440b      	add	r3, r1
 80140a6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d302      	bcc.n	80140b2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80140ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80140ae:	f000 fea9 	bl	8014e04 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80140b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b4:	7d1b      	ldrb	r3, [r3, #20]
 80140b6:	2b03      	cmp	r3, #3
 80140b8:	d10b      	bne.n	80140d2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80140ba:	4b61      	ldr	r3, [pc, #388]	; (8014240 <tcp_slowtmr+0x584>)
 80140bc:	681a      	ldr	r2, [r3, #0]
 80140be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c0:	6a1b      	ldr	r3, [r3, #32]
 80140c2:	1ad3      	subs	r3, r2, r3
 80140c4:	2b28      	cmp	r3, #40	; 0x28
 80140c6:	d904      	bls.n	80140d2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80140c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140cc:	3301      	adds	r3, #1
 80140ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80140d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d4:	7d1b      	ldrb	r3, [r3, #20]
 80140d6:	2b09      	cmp	r3, #9
 80140d8:	d10b      	bne.n	80140f2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80140da:	4b59      	ldr	r3, [pc, #356]	; (8014240 <tcp_slowtmr+0x584>)
 80140dc:	681a      	ldr	r2, [r3, #0]
 80140de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e0:	6a1b      	ldr	r3, [r3, #32]
 80140e2:	1ad3      	subs	r3, r2, r3
 80140e4:	2bf0      	cmp	r3, #240	; 0xf0
 80140e6:	d904      	bls.n	80140f2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80140e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140ec:	3301      	adds	r3, #1
 80140ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80140f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d060      	beq.n	80141bc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80140fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014100:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8014102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014104:	f000 fcca 	bl	8014a9c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8014108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801410a:	2b00      	cmp	r3, #0
 801410c:	d010      	beq.n	8014130 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801410e:	4b4f      	ldr	r3, [pc, #316]	; (801424c <tcp_slowtmr+0x590>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014114:	429a      	cmp	r2, r3
 8014116:	d106      	bne.n	8014126 <tcp_slowtmr+0x46a>
 8014118:	4b4d      	ldr	r3, [pc, #308]	; (8014250 <tcp_slowtmr+0x594>)
 801411a:	f240 526d 	movw	r2, #1389	; 0x56d
 801411e:	494d      	ldr	r1, [pc, #308]	; (8014254 <tcp_slowtmr+0x598>)
 8014120:	484d      	ldr	r0, [pc, #308]	; (8014258 <tcp_slowtmr+0x59c>)
 8014122:	f00b fbc3 	bl	801f8ac <iprintf>
        prev->next = pcb->next;
 8014126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014128:	68da      	ldr	r2, [r3, #12]
 801412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412c:	60da      	str	r2, [r3, #12]
 801412e:	e00f      	b.n	8014150 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014130:	4b46      	ldr	r3, [pc, #280]	; (801424c <tcp_slowtmr+0x590>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014136:	429a      	cmp	r2, r3
 8014138:	d006      	beq.n	8014148 <tcp_slowtmr+0x48c>
 801413a:	4b45      	ldr	r3, [pc, #276]	; (8014250 <tcp_slowtmr+0x594>)
 801413c:	f240 5271 	movw	r2, #1393	; 0x571
 8014140:	4946      	ldr	r1, [pc, #280]	; (801425c <tcp_slowtmr+0x5a0>)
 8014142:	4845      	ldr	r0, [pc, #276]	; (8014258 <tcp_slowtmr+0x59c>)
 8014144:	f00b fbb2 	bl	801f8ac <iprintf>
        tcp_active_pcbs = pcb->next;
 8014148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801414a:	68db      	ldr	r3, [r3, #12]
 801414c:	4a3f      	ldr	r2, [pc, #252]	; (801424c <tcp_slowtmr+0x590>)
 801414e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014154:	2b00      	cmp	r3, #0
 8014156:	d013      	beq.n	8014180 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014160:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8014162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014164:	3304      	adds	r3, #4
 8014166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014168:	8ad2      	ldrh	r2, [r2, #22]
 801416a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801416c:	8b09      	ldrh	r1, [r1, #24]
 801416e:	9102      	str	r1, [sp, #8]
 8014170:	9201      	str	r2, [sp, #4]
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	462b      	mov	r3, r5
 8014176:	4622      	mov	r2, r4
 8014178:	4601      	mov	r1, r0
 801417a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801417c:	f004 feae 	bl	8018edc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014182:	691b      	ldr	r3, [r3, #16]
 8014184:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014188:	7d1b      	ldrb	r3, [r3, #20]
 801418a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801418e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014192:	68db      	ldr	r3, [r3, #12]
 8014194:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014196:	6838      	ldr	r0, [r7, #0]
 8014198:	f7fe ffd4 	bl	8013144 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801419c:	4b30      	ldr	r3, [pc, #192]	; (8014260 <tcp_slowtmr+0x5a4>)
 801419e:	2200      	movs	r2, #0
 80141a0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d004      	beq.n	80141b2 <tcp_slowtmr+0x4f6>
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f06f 010c 	mvn.w	r1, #12
 80141ae:	68b8      	ldr	r0, [r7, #8]
 80141b0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80141b2:	4b2b      	ldr	r3, [pc, #172]	; (8014260 <tcp_slowtmr+0x5a4>)
 80141b4:	781b      	ldrb	r3, [r3, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d037      	beq.n	801422a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80141ba:	e590      	b.n	8013cde <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80141bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80141c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80141c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c8:	7f1b      	ldrb	r3, [r3, #28]
 80141ca:	3301      	adds	r3, #1
 80141cc:	b2da      	uxtb	r2, r3
 80141ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80141d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d4:	7f1a      	ldrb	r2, [r3, #28]
 80141d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d8:	7f5b      	ldrb	r3, [r3, #29]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d325      	bcc.n	801422a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80141de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e0:	2200      	movs	r2, #0
 80141e2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80141e4:	4b1e      	ldr	r3, [pc, #120]	; (8014260 <tcp_slowtmr+0x5a4>)
 80141e6:	2200      	movs	r2, #0
 80141e8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80141ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d00b      	beq.n	801420c <tcp_slowtmr+0x550>
 80141f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141fc:	6912      	ldr	r2, [r2, #16]
 80141fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014200:	4610      	mov	r0, r2
 8014202:	4798      	blx	r3
 8014204:	4603      	mov	r3, r0
 8014206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801420a:	e002      	b.n	8014212 <tcp_slowtmr+0x556>
 801420c:	2300      	movs	r3, #0
 801420e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8014212:	4b13      	ldr	r3, [pc, #76]	; (8014260 <tcp_slowtmr+0x5a4>)
 8014214:	781b      	ldrb	r3, [r3, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d000      	beq.n	801421c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801421a:	e560      	b.n	8013cde <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801421c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014220:	2b00      	cmp	r3, #0
 8014222:	d102      	bne.n	801422a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8014224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014226:	f004 f8a5 	bl	8018374 <tcp_output>
  while (pcb != NULL) {
 801422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422c:	2b00      	cmp	r3, #0
 801422e:	f47f ad5c 	bne.w	8013cea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014232:	2300      	movs	r3, #0
 8014234:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8014236:	4b0b      	ldr	r3, [pc, #44]	; (8014264 <tcp_slowtmr+0x5a8>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801423c:	e067      	b.n	801430e <tcp_slowtmr+0x652>
 801423e:	bf00      	nop
 8014240:	200101cc 	.word	0x200101cc
 8014244:	10624dd3 	.word	0x10624dd3
 8014248:	000124f8 	.word	0x000124f8
 801424c:	200101d8 	.word	0x200101d8
 8014250:	08022d00 	.word	0x08022d00
 8014254:	08023138 	.word	0x08023138
 8014258:	08022d44 	.word	0x08022d44
 801425c:	08023164 	.word	0x08023164
 8014260:	200101e0 	.word	0x200101e0
 8014264:	200101dc 	.word	0x200101dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426a:	7d1b      	ldrb	r3, [r3, #20]
 801426c:	2b0a      	cmp	r3, #10
 801426e:	d006      	beq.n	801427e <tcp_slowtmr+0x5c2>
 8014270:	4b2b      	ldr	r3, [pc, #172]	; (8014320 <tcp_slowtmr+0x664>)
 8014272:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8014276:	492b      	ldr	r1, [pc, #172]	; (8014324 <tcp_slowtmr+0x668>)
 8014278:	482b      	ldr	r0, [pc, #172]	; (8014328 <tcp_slowtmr+0x66c>)
 801427a:	f00b fb17 	bl	801f8ac <iprintf>
    pcb_remove = 0;
 801427e:	2300      	movs	r3, #0
 8014280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014284:	4b29      	ldr	r3, [pc, #164]	; (801432c <tcp_slowtmr+0x670>)
 8014286:	681a      	ldr	r2, [r3, #0]
 8014288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428a:	6a1b      	ldr	r3, [r3, #32]
 801428c:	1ad3      	subs	r3, r2, r3
 801428e:	2bf0      	cmp	r3, #240	; 0xf0
 8014290:	d904      	bls.n	801429c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8014292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014296:	3301      	adds	r3, #1
 8014298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801429c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d02f      	beq.n	8014304 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80142a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142a6:	f000 fbf9 	bl	8014a9c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80142aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d010      	beq.n	80142d2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80142b0:	4b1f      	ldr	r3, [pc, #124]	; (8014330 <tcp_slowtmr+0x674>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d106      	bne.n	80142c8 <tcp_slowtmr+0x60c>
 80142ba:	4b19      	ldr	r3, [pc, #100]	; (8014320 <tcp_slowtmr+0x664>)
 80142bc:	f240 52af 	movw	r2, #1455	; 0x5af
 80142c0:	491c      	ldr	r1, [pc, #112]	; (8014334 <tcp_slowtmr+0x678>)
 80142c2:	4819      	ldr	r0, [pc, #100]	; (8014328 <tcp_slowtmr+0x66c>)
 80142c4:	f00b faf2 	bl	801f8ac <iprintf>
        prev->next = pcb->next;
 80142c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ca:	68da      	ldr	r2, [r3, #12]
 80142cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ce:	60da      	str	r2, [r3, #12]
 80142d0:	e00f      	b.n	80142f2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80142d2:	4b17      	ldr	r3, [pc, #92]	; (8014330 <tcp_slowtmr+0x674>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142d8:	429a      	cmp	r2, r3
 80142da:	d006      	beq.n	80142ea <tcp_slowtmr+0x62e>
 80142dc:	4b10      	ldr	r3, [pc, #64]	; (8014320 <tcp_slowtmr+0x664>)
 80142de:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80142e2:	4915      	ldr	r1, [pc, #84]	; (8014338 <tcp_slowtmr+0x67c>)
 80142e4:	4810      	ldr	r0, [pc, #64]	; (8014328 <tcp_slowtmr+0x66c>)
 80142e6:	f00b fae1 	bl	801f8ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 80142ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ec:	68db      	ldr	r3, [r3, #12]
 80142ee:	4a10      	ldr	r2, [pc, #64]	; (8014330 <tcp_slowtmr+0x674>)
 80142f0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80142f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80142f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f8:	68db      	ldr	r3, [r3, #12]
 80142fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80142fc:	69f8      	ldr	r0, [r7, #28]
 80142fe:	f7fe ff21 	bl	8013144 <tcp_free>
 8014302:	e004      	b.n	801430e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014306:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801430a:	68db      	ldr	r3, [r3, #12]
 801430c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014310:	2b00      	cmp	r3, #0
 8014312:	d1a9      	bne.n	8014268 <tcp_slowtmr+0x5ac>
    }
  }
}
 8014314:	bf00      	nop
 8014316:	bf00      	nop
 8014318:	3730      	adds	r7, #48	; 0x30
 801431a:	46bd      	mov	sp, r7
 801431c:	bdb0      	pop	{r4, r5, r7, pc}
 801431e:	bf00      	nop
 8014320:	08022d00 	.word	0x08022d00
 8014324:	08023190 	.word	0x08023190
 8014328:	08022d44 	.word	0x08022d44
 801432c:	200101cc 	.word	0x200101cc
 8014330:	200101dc 	.word	0x200101dc
 8014334:	080231c0 	.word	0x080231c0
 8014338:	080231e8 	.word	0x080231e8

0801433c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014342:	4b2d      	ldr	r3, [pc, #180]	; (80143f8 <tcp_fasttmr+0xbc>)
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	3301      	adds	r3, #1
 8014348:	b2da      	uxtb	r2, r3
 801434a:	4b2b      	ldr	r3, [pc, #172]	; (80143f8 <tcp_fasttmr+0xbc>)
 801434c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801434e:	4b2b      	ldr	r3, [pc, #172]	; (80143fc <tcp_fasttmr+0xc0>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014354:	e048      	b.n	80143e8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	7f9a      	ldrb	r2, [r3, #30]
 801435a:	4b27      	ldr	r3, [pc, #156]	; (80143f8 <tcp_fasttmr+0xbc>)
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	429a      	cmp	r2, r3
 8014360:	d03f      	beq.n	80143e2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014362:	4b25      	ldr	r3, [pc, #148]	; (80143f8 <tcp_fasttmr+0xbc>)
 8014364:	781a      	ldrb	r2, [r3, #0]
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	8b5b      	ldrh	r3, [r3, #26]
 801436e:	f003 0301 	and.w	r3, r3, #1
 8014372:	2b00      	cmp	r3, #0
 8014374:	d010      	beq.n	8014398 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	8b5b      	ldrh	r3, [r3, #26]
 801437a:	f043 0302 	orr.w	r3, r3, #2
 801437e:	b29a      	uxth	r2, r3
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f003 fff5 	bl	8018374 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	8b5b      	ldrh	r3, [r3, #26]
 801438e:	f023 0303 	bic.w	r3, r3, #3
 8014392:	b29a      	uxth	r2, r3
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	8b5b      	ldrh	r3, [r3, #26]
 801439c:	f003 0308 	and.w	r3, r3, #8
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d009      	beq.n	80143b8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	8b5b      	ldrh	r3, [r3, #26]
 80143a8:	f023 0308 	bic.w	r3, r3, #8
 80143ac:	b29a      	uxth	r2, r3
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f7ff f85a 	bl	801346c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d00a      	beq.n	80143dc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80143c6:	4b0e      	ldr	r3, [pc, #56]	; (8014400 <tcp_fasttmr+0xc4>)
 80143c8:	2200      	movs	r2, #0
 80143ca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f000 f819 	bl	8014404 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80143d2:	4b0b      	ldr	r3, [pc, #44]	; (8014400 <tcp_fasttmr+0xc4>)
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d000      	beq.n	80143dc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80143da:	e7b8      	b.n	801434e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	607b      	str	r3, [r7, #4]
 80143e0:	e002      	b.n	80143e8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	68db      	ldr	r3, [r3, #12]
 80143e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d1b3      	bne.n	8014356 <tcp_fasttmr+0x1a>
    }
  }
}
 80143ee:	bf00      	nop
 80143f0:	bf00      	nop
 80143f2:	3708      	adds	r7, #8
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}
 80143f8:	200101e2 	.word	0x200101e2
 80143fc:	200101d8 	.word	0x200101d8
 8014400:	200101e0 	.word	0x200101e0

08014404 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014404:	b590      	push	{r4, r7, lr}
 8014406:	b085      	sub	sp, #20
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d109      	bne.n	8014426 <tcp_process_refused_data+0x22>
 8014412:	4b37      	ldr	r3, [pc, #220]	; (80144f0 <tcp_process_refused_data+0xec>)
 8014414:	f240 6209 	movw	r2, #1545	; 0x609
 8014418:	4936      	ldr	r1, [pc, #216]	; (80144f4 <tcp_process_refused_data+0xf0>)
 801441a:	4837      	ldr	r0, [pc, #220]	; (80144f8 <tcp_process_refused_data+0xf4>)
 801441c:	f00b fa46 	bl	801f8ac <iprintf>
 8014420:	f06f 030f 	mvn.w	r3, #15
 8014424:	e060      	b.n	80144e8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801442a:	7b5b      	ldrb	r3, [r3, #13]
 801442c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014432:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2200      	movs	r2, #0
 8014438:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014440:	2b00      	cmp	r3, #0
 8014442:	d00b      	beq.n	801445c <tcp_process_refused_data+0x58>
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6918      	ldr	r0, [r3, #16]
 801444e:	2300      	movs	r3, #0
 8014450:	68ba      	ldr	r2, [r7, #8]
 8014452:	6879      	ldr	r1, [r7, #4]
 8014454:	47a0      	blx	r4
 8014456:	4603      	mov	r3, r0
 8014458:	73fb      	strb	r3, [r7, #15]
 801445a:	e007      	b.n	801446c <tcp_process_refused_data+0x68>
 801445c:	2300      	movs	r3, #0
 801445e:	68ba      	ldr	r2, [r7, #8]
 8014460:	6879      	ldr	r1, [r7, #4]
 8014462:	2000      	movs	r0, #0
 8014464:	f000 f8a4 	bl	80145b0 <tcp_recv_null>
 8014468:	4603      	mov	r3, r0
 801446a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801446c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d12a      	bne.n	80144ca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014474:	7bbb      	ldrb	r3, [r7, #14]
 8014476:	f003 0320 	and.w	r3, r3, #32
 801447a:	2b00      	cmp	r3, #0
 801447c:	d033      	beq.n	80144e6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014482:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014486:	d005      	beq.n	8014494 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801448c:	3301      	adds	r3, #1
 801448e:	b29a      	uxth	r2, r3
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801449a:	2b00      	cmp	r3, #0
 801449c:	d00b      	beq.n	80144b6 <tcp_process_refused_data+0xb2>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	6918      	ldr	r0, [r3, #16]
 80144a8:	2300      	movs	r3, #0
 80144aa:	2200      	movs	r2, #0
 80144ac:	6879      	ldr	r1, [r7, #4]
 80144ae:	47a0      	blx	r4
 80144b0:	4603      	mov	r3, r0
 80144b2:	73fb      	strb	r3, [r7, #15]
 80144b4:	e001      	b.n	80144ba <tcp_process_refused_data+0xb6>
 80144b6:	2300      	movs	r3, #0
 80144b8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80144ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144be:	f113 0f0d 	cmn.w	r3, #13
 80144c2:	d110      	bne.n	80144e6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80144c4:	f06f 030c 	mvn.w	r3, #12
 80144c8:	e00e      	b.n	80144e8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80144ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144ce:	f113 0f0d 	cmn.w	r3, #13
 80144d2:	d102      	bne.n	80144da <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80144d4:	f06f 030c 	mvn.w	r3, #12
 80144d8:	e006      	b.n	80144e8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	68ba      	ldr	r2, [r7, #8]
 80144de:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80144e0:	f06f 0304 	mvn.w	r3, #4
 80144e4:	e000      	b.n	80144e8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80144e6:	2300      	movs	r3, #0
}
 80144e8:	4618      	mov	r0, r3
 80144ea:	3714      	adds	r7, #20
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd90      	pop	{r4, r7, pc}
 80144f0:	08022d00 	.word	0x08022d00
 80144f4:	08023210 	.word	0x08023210
 80144f8:	08022d44 	.word	0x08022d44

080144fc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b084      	sub	sp, #16
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014504:	e007      	b.n	8014516 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f000 f80a 	bl	8014526 <tcp_seg_free>
    seg = next;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d1f4      	bne.n	8014506 <tcp_segs_free+0xa>
  }
}
 801451c:	bf00      	nop
 801451e:	bf00      	nop
 8014520:	3710      	adds	r7, #16
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}

08014526 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014526:	b580      	push	{r7, lr}
 8014528:	b082      	sub	sp, #8
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d00c      	beq.n	801454e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d004      	beq.n	8014546 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	685b      	ldr	r3, [r3, #4]
 8014540:	4618      	mov	r0, r3
 8014542:	f7fe fb43 	bl	8012bcc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014546:	6879      	ldr	r1, [r7, #4]
 8014548:	2003      	movs	r0, #3
 801454a:	f7fd fc57 	bl	8011dfc <memp_free>
  }
}
 801454e:	bf00      	nop
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
	...

08014558 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d106      	bne.n	8014574 <tcp_seg_copy+0x1c>
 8014566:	4b0f      	ldr	r3, [pc, #60]	; (80145a4 <tcp_seg_copy+0x4c>)
 8014568:	f240 6282 	movw	r2, #1666	; 0x682
 801456c:	490e      	ldr	r1, [pc, #56]	; (80145a8 <tcp_seg_copy+0x50>)
 801456e:	480f      	ldr	r0, [pc, #60]	; (80145ac <tcp_seg_copy+0x54>)
 8014570:	f00b f99c 	bl	801f8ac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014574:	2003      	movs	r0, #3
 8014576:	f7fd fbcb 	bl	8011d10 <memp_malloc>
 801457a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d101      	bne.n	8014586 <tcp_seg_copy+0x2e>
    return NULL;
 8014582:	2300      	movs	r3, #0
 8014584:	e00a      	b.n	801459c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014586:	2210      	movs	r2, #16
 8014588:	6879      	ldr	r1, [r7, #4]
 801458a:	68f8      	ldr	r0, [r7, #12]
 801458c:	f00b fbf3 	bl	801fd76 <memcpy>
  pbuf_ref(cseg->p);
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	4618      	mov	r0, r3
 8014596:	f7fe fbbf 	bl	8012d18 <pbuf_ref>
  return cseg;
 801459a:	68fb      	ldr	r3, [r7, #12]
}
 801459c:	4618      	mov	r0, r3
 801459e:	3710      	adds	r7, #16
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	08022d00 	.word	0x08022d00
 80145a8:	08023254 	.word	0x08023254
 80145ac:	08022d44 	.word	0x08022d44

080145b0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	607a      	str	r2, [r7, #4]
 80145bc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d109      	bne.n	80145d8 <tcp_recv_null+0x28>
 80145c4:	4b12      	ldr	r3, [pc, #72]	; (8014610 <tcp_recv_null+0x60>)
 80145c6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80145ca:	4912      	ldr	r1, [pc, #72]	; (8014614 <tcp_recv_null+0x64>)
 80145cc:	4812      	ldr	r0, [pc, #72]	; (8014618 <tcp_recv_null+0x68>)
 80145ce:	f00b f96d 	bl	801f8ac <iprintf>
 80145d2:	f06f 030f 	mvn.w	r3, #15
 80145d6:	e016      	b.n	8014606 <tcp_recv_null+0x56>

  if (p != NULL) {
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d009      	beq.n	80145f2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	891b      	ldrh	r3, [r3, #8]
 80145e2:	4619      	mov	r1, r3
 80145e4:	68b8      	ldr	r0, [r7, #8]
 80145e6:	f7ff fad3 	bl	8013b90 <tcp_recved>
    pbuf_free(p);
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f7fe faee 	bl	8012bcc <pbuf_free>
 80145f0:	e008      	b.n	8014604 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80145f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d104      	bne.n	8014604 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80145fa:	68b8      	ldr	r0, [r7, #8]
 80145fc:	f7fe ffa0 	bl	8013540 <tcp_close>
 8014600:	4603      	mov	r3, r0
 8014602:	e000      	b.n	8014606 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014604:	2300      	movs	r3, #0
}
 8014606:	4618      	mov	r0, r3
 8014608:	3710      	adds	r7, #16
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	08022d00 	.word	0x08022d00
 8014614:	08023270 	.word	0x08023270
 8014618:	08022d44 	.word	0x08022d44

0801461c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b086      	sub	sp, #24
 8014620:	af00      	add	r7, sp, #0
 8014622:	4603      	mov	r3, r0
 8014624:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801462a:	2b00      	cmp	r3, #0
 801462c:	db01      	blt.n	8014632 <tcp_kill_prio+0x16>
 801462e:	79fb      	ldrb	r3, [r7, #7]
 8014630:	e000      	b.n	8014634 <tcp_kill_prio+0x18>
 8014632:	237f      	movs	r3, #127	; 0x7f
 8014634:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014636:	7afb      	ldrb	r3, [r7, #11]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d034      	beq.n	80146a6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801463c:	7afb      	ldrb	r3, [r7, #11]
 801463e:	3b01      	subs	r3, #1
 8014640:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014642:	2300      	movs	r3, #0
 8014644:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014646:	2300      	movs	r3, #0
 8014648:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801464a:	4b19      	ldr	r3, [pc, #100]	; (80146b0 <tcp_kill_prio+0x94>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	617b      	str	r3, [r7, #20]
 8014650:	e01f      	b.n	8014692 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	7d5b      	ldrb	r3, [r3, #21]
 8014656:	7afa      	ldrb	r2, [r7, #11]
 8014658:	429a      	cmp	r2, r3
 801465a:	d80c      	bhi.n	8014676 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014660:	7afa      	ldrb	r2, [r7, #11]
 8014662:	429a      	cmp	r2, r3
 8014664:	d112      	bne.n	801468c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014666:	4b13      	ldr	r3, [pc, #76]	; (80146b4 <tcp_kill_prio+0x98>)
 8014668:	681a      	ldr	r2, [r3, #0]
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	6a1b      	ldr	r3, [r3, #32]
 801466e:	1ad3      	subs	r3, r2, r3
 8014670:	68fa      	ldr	r2, [r7, #12]
 8014672:	429a      	cmp	r2, r3
 8014674:	d80a      	bhi.n	801468c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014676:	4b0f      	ldr	r3, [pc, #60]	; (80146b4 <tcp_kill_prio+0x98>)
 8014678:	681a      	ldr	r2, [r3, #0]
 801467a:	697b      	ldr	r3, [r7, #20]
 801467c:	6a1b      	ldr	r3, [r3, #32]
 801467e:	1ad3      	subs	r3, r2, r3
 8014680:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014682:	697b      	ldr	r3, [r7, #20]
 8014684:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	7d5b      	ldrb	r3, [r3, #21]
 801468a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	617b      	str	r3, [r7, #20]
 8014692:	697b      	ldr	r3, [r7, #20]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d1dc      	bne.n	8014652 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d004      	beq.n	80146a8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801469e:	6938      	ldr	r0, [r7, #16]
 80146a0:	f7ff f894 	bl	80137cc <tcp_abort>
 80146a4:	e000      	b.n	80146a8 <tcp_kill_prio+0x8c>
    return;
 80146a6:	bf00      	nop
  }
}
 80146a8:	3718      	adds	r7, #24
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop
 80146b0:	200101d8 	.word	0x200101d8
 80146b4:	200101cc 	.word	0x200101cc

080146b8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b086      	sub	sp, #24
 80146bc:	af00      	add	r7, sp, #0
 80146be:	4603      	mov	r3, r0
 80146c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80146c2:	79fb      	ldrb	r3, [r7, #7]
 80146c4:	2b08      	cmp	r3, #8
 80146c6:	d009      	beq.n	80146dc <tcp_kill_state+0x24>
 80146c8:	79fb      	ldrb	r3, [r7, #7]
 80146ca:	2b09      	cmp	r3, #9
 80146cc:	d006      	beq.n	80146dc <tcp_kill_state+0x24>
 80146ce:	4b1a      	ldr	r3, [pc, #104]	; (8014738 <tcp_kill_state+0x80>)
 80146d0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80146d4:	4919      	ldr	r1, [pc, #100]	; (801473c <tcp_kill_state+0x84>)
 80146d6:	481a      	ldr	r0, [pc, #104]	; (8014740 <tcp_kill_state+0x88>)
 80146d8:	f00b f8e8 	bl	801f8ac <iprintf>

  inactivity = 0;
 80146dc:	2300      	movs	r3, #0
 80146de:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80146e0:	2300      	movs	r3, #0
 80146e2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80146e4:	4b17      	ldr	r3, [pc, #92]	; (8014744 <tcp_kill_state+0x8c>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	617b      	str	r3, [r7, #20]
 80146ea:	e017      	b.n	801471c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	7d1b      	ldrb	r3, [r3, #20]
 80146f0:	79fa      	ldrb	r2, [r7, #7]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d10f      	bne.n	8014716 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80146f6:	4b14      	ldr	r3, [pc, #80]	; (8014748 <tcp_kill_state+0x90>)
 80146f8:	681a      	ldr	r2, [r3, #0]
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	6a1b      	ldr	r3, [r3, #32]
 80146fe:	1ad3      	subs	r3, r2, r3
 8014700:	68fa      	ldr	r2, [r7, #12]
 8014702:	429a      	cmp	r2, r3
 8014704:	d807      	bhi.n	8014716 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014706:	4b10      	ldr	r3, [pc, #64]	; (8014748 <tcp_kill_state+0x90>)
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	6a1b      	ldr	r3, [r3, #32]
 801470e:	1ad3      	subs	r3, r2, r3
 8014710:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014716:	697b      	ldr	r3, [r7, #20]
 8014718:	68db      	ldr	r3, [r3, #12]
 801471a:	617b      	str	r3, [r7, #20]
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d1e4      	bne.n	80146ec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d003      	beq.n	8014730 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014728:	2100      	movs	r1, #0
 801472a:	6938      	ldr	r0, [r7, #16]
 801472c:	f7fe ff90 	bl	8013650 <tcp_abandon>
  }
}
 8014730:	bf00      	nop
 8014732:	3718      	adds	r7, #24
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}
 8014738:	08022d00 	.word	0x08022d00
 801473c:	0802328c 	.word	0x0802328c
 8014740:	08022d44 	.word	0x08022d44
 8014744:	200101d8 	.word	0x200101d8
 8014748:	200101cc 	.word	0x200101cc

0801474c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014752:	2300      	movs	r3, #0
 8014754:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014756:	2300      	movs	r3, #0
 8014758:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801475a:	4b12      	ldr	r3, [pc, #72]	; (80147a4 <tcp_kill_timewait+0x58>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	60fb      	str	r3, [r7, #12]
 8014760:	e012      	b.n	8014788 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014762:	4b11      	ldr	r3, [pc, #68]	; (80147a8 <tcp_kill_timewait+0x5c>)
 8014764:	681a      	ldr	r2, [r3, #0]
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	6a1b      	ldr	r3, [r3, #32]
 801476a:	1ad3      	subs	r3, r2, r3
 801476c:	687a      	ldr	r2, [r7, #4]
 801476e:	429a      	cmp	r2, r3
 8014770:	d807      	bhi.n	8014782 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014772:	4b0d      	ldr	r3, [pc, #52]	; (80147a8 <tcp_kill_timewait+0x5c>)
 8014774:	681a      	ldr	r2, [r3, #0]
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	6a1b      	ldr	r3, [r3, #32]
 801477a:	1ad3      	subs	r3, r2, r3
 801477c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	60fb      	str	r3, [r7, #12]
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d1e9      	bne.n	8014762 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d002      	beq.n	801479a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014794:	68b8      	ldr	r0, [r7, #8]
 8014796:	f7ff f819 	bl	80137cc <tcp_abort>
  }
}
 801479a:	bf00      	nop
 801479c:	3710      	adds	r7, #16
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	200101dc 	.word	0x200101dc
 80147a8:	200101cc 	.word	0x200101cc

080147ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80147b2:	4b10      	ldr	r3, [pc, #64]	; (80147f4 <tcp_handle_closepend+0x48>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80147b8:	e014      	b.n	80147e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	68db      	ldr	r3, [r3, #12]
 80147be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	8b5b      	ldrh	r3, [r3, #26]
 80147c4:	f003 0308 	and.w	r3, r3, #8
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d009      	beq.n	80147e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	8b5b      	ldrh	r3, [r3, #26]
 80147d0:	f023 0308 	bic.w	r3, r3, #8
 80147d4:	b29a      	uxth	r2, r3
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f7fe fe46 	bl	801346c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d1e7      	bne.n	80147ba <tcp_handle_closepend+0xe>
  }
}
 80147ea:	bf00      	nop
 80147ec:	bf00      	nop
 80147ee:	3708      	adds	r7, #8
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	200101d8 	.word	0x200101d8

080147f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	4603      	mov	r3, r0
 8014800:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014802:	2001      	movs	r0, #1
 8014804:	f7fd fa84 	bl	8011d10 <memp_malloc>
 8014808:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d126      	bne.n	801485e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014810:	f7ff ffcc 	bl	80147ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014814:	f7ff ff9a 	bl	801474c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014818:	2001      	movs	r0, #1
 801481a:	f7fd fa79 	bl	8011d10 <memp_malloc>
 801481e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d11b      	bne.n	801485e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014826:	2009      	movs	r0, #9
 8014828:	f7ff ff46 	bl	80146b8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801482c:	2001      	movs	r0, #1
 801482e:	f7fd fa6f 	bl	8011d10 <memp_malloc>
 8014832:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d111      	bne.n	801485e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801483a:	2008      	movs	r0, #8
 801483c:	f7ff ff3c 	bl	80146b8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014840:	2001      	movs	r0, #1
 8014842:	f7fd fa65 	bl	8011d10 <memp_malloc>
 8014846:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d107      	bne.n	801485e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801484e:	79fb      	ldrb	r3, [r7, #7]
 8014850:	4618      	mov	r0, r3
 8014852:	f7ff fee3 	bl	801461c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014856:	2001      	movs	r0, #1
 8014858:	f7fd fa5a 	bl	8011d10 <memp_malloc>
 801485c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d03f      	beq.n	80148e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014864:	229c      	movs	r2, #156	; 0x9c
 8014866:	2100      	movs	r1, #0
 8014868:	68f8      	ldr	r0, [r7, #12]
 801486a:	f00b f975 	bl	801fb58 <memset>
    pcb->prio = prio;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	79fa      	ldrb	r2, [r7, #7]
 8014872:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801487a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	22ff      	movs	r2, #255	; 0xff
 8014892:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f44f 7206 	mov.w	r2, #536	; 0x218
 801489a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	2206      	movs	r2, #6
 80148a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	2206      	movs	r2, #6
 80148a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	2201      	movs	r2, #1
 80148b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80148ba:	4b0d      	ldr	r3, [pc, #52]	; (80148f0 <tcp_alloc+0xf8>)
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80148c2:	4b0c      	ldr	r3, [pc, #48]	; (80148f4 <tcp_alloc+0xfc>)
 80148c4:	781a      	ldrb	r2, [r3, #0]
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80148d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	4a08      	ldr	r2, [pc, #32]	; (80148f8 <tcp_alloc+0x100>)
 80148d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	4a07      	ldr	r2, [pc, #28]	; (80148fc <tcp_alloc+0x104>)
 80148e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80148e4:	68fb      	ldr	r3, [r7, #12]
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3710      	adds	r7, #16
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop
 80148f0:	200101cc 	.word	0x200101cc
 80148f4:	200101e2 	.word	0x200101e2
 80148f8:	080145b1 	.word	0x080145b1
 80148fc:	006ddd00 	.word	0x006ddd00

08014900 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b084      	sub	sp, #16
 8014904:	af00      	add	r7, sp, #0
 8014906:	4603      	mov	r3, r0
 8014908:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801490a:	2040      	movs	r0, #64	; 0x40
 801490c:	f7ff ff74 	bl	80147f8 <tcp_alloc>
 8014910:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014912:	68fb      	ldr	r3, [r7, #12]
}
 8014914:	4618      	mov	r0, r3
 8014916:	3710      	adds	r7, #16
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801491c:	b480      	push	{r7}
 801491e:	b083      	sub	sp, #12
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d002      	beq.n	8014932 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	683a      	ldr	r2, [r7, #0]
 8014930:	611a      	str	r2, [r3, #16]
  }
}
 8014932:	bf00      	nop
 8014934:	370c      	adds	r7, #12
 8014936:	46bd      	mov	sp, r7
 8014938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493c:	4770      	bx	lr
	...

08014940 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d00e      	beq.n	801496e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	7d1b      	ldrb	r3, [r3, #20]
 8014954:	2b01      	cmp	r3, #1
 8014956:	d106      	bne.n	8014966 <tcp_recv+0x26>
 8014958:	4b07      	ldr	r3, [pc, #28]	; (8014978 <tcp_recv+0x38>)
 801495a:	f240 72df 	movw	r2, #2015	; 0x7df
 801495e:	4907      	ldr	r1, [pc, #28]	; (801497c <tcp_recv+0x3c>)
 8014960:	4807      	ldr	r0, [pc, #28]	; (8014980 <tcp_recv+0x40>)
 8014962:	f00a ffa3 	bl	801f8ac <iprintf>
    pcb->recv = recv;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	683a      	ldr	r2, [r7, #0]
 801496a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801496e:	bf00      	nop
 8014970:	3708      	adds	r7, #8
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}
 8014976:	bf00      	nop
 8014978:	08022d00 	.word	0x08022d00
 801497c:	0802329c 	.word	0x0802329c
 8014980:	08022d44 	.word	0x08022d44

08014984 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b082      	sub	sp, #8
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d00e      	beq.n	80149b2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	7d1b      	ldrb	r3, [r3, #20]
 8014998:	2b01      	cmp	r3, #1
 801499a:	d106      	bne.n	80149aa <tcp_sent+0x26>
 801499c:	4b07      	ldr	r3, [pc, #28]	; (80149bc <tcp_sent+0x38>)
 801499e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80149a2:	4907      	ldr	r1, [pc, #28]	; (80149c0 <tcp_sent+0x3c>)
 80149a4:	4807      	ldr	r0, [pc, #28]	; (80149c4 <tcp_sent+0x40>)
 80149a6:	f00a ff81 	bl	801f8ac <iprintf>
    pcb->sent = sent;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	683a      	ldr	r2, [r7, #0]
 80149ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80149b2:	bf00      	nop
 80149b4:	3708      	adds	r7, #8
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	08022d00 	.word	0x08022d00
 80149c0:	080232c4 	.word	0x080232c4
 80149c4:	08022d44 	.word	0x08022d44

080149c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b082      	sub	sp, #8
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d00e      	beq.n	80149f6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	7d1b      	ldrb	r3, [r3, #20]
 80149dc:	2b01      	cmp	r3, #1
 80149de:	d106      	bne.n	80149ee <tcp_err+0x26>
 80149e0:	4b07      	ldr	r3, [pc, #28]	; (8014a00 <tcp_err+0x38>)
 80149e2:	f640 020d 	movw	r2, #2061	; 0x80d
 80149e6:	4907      	ldr	r1, [pc, #28]	; (8014a04 <tcp_err+0x3c>)
 80149e8:	4807      	ldr	r0, [pc, #28]	; (8014a08 <tcp_err+0x40>)
 80149ea:	f00a ff5f 	bl	801f8ac <iprintf>
    pcb->errf = err;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	683a      	ldr	r2, [r7, #0]
 80149f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80149f6:	bf00      	nop
 80149f8:	3708      	adds	r7, #8
 80149fa:	46bd      	mov	sp, r7
 80149fc:	bd80      	pop	{r7, pc}
 80149fe:	bf00      	nop
 8014a00:	08022d00 	.word	0x08022d00
 8014a04:	080232ec 	.word	0x080232ec
 8014a08:	08022d44 	.word	0x08022d44

08014a0c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b085      	sub	sp, #20
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d008      	beq.n	8014a2e <tcp_accept+0x22>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	7d1b      	ldrb	r3, [r3, #20]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d104      	bne.n	8014a2e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	683a      	ldr	r2, [r7, #0]
 8014a2c:	619a      	str	r2, [r3, #24]
  }
}
 8014a2e:	bf00      	nop
 8014a30:	3714      	adds	r7, #20
 8014a32:	46bd      	mov	sp, r7
 8014a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a38:	4770      	bx	lr
	...

08014a3c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b084      	sub	sp, #16
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	4613      	mov	r3, r2
 8014a48:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d107      	bne.n	8014a60 <tcp_poll+0x24>
 8014a50:	4b0e      	ldr	r3, [pc, #56]	; (8014a8c <tcp_poll+0x50>)
 8014a52:	f640 023d 	movw	r2, #2109	; 0x83d
 8014a56:	490e      	ldr	r1, [pc, #56]	; (8014a90 <tcp_poll+0x54>)
 8014a58:	480e      	ldr	r0, [pc, #56]	; (8014a94 <tcp_poll+0x58>)
 8014a5a:	f00a ff27 	bl	801f8ac <iprintf>
 8014a5e:	e011      	b.n	8014a84 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	7d1b      	ldrb	r3, [r3, #20]
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d106      	bne.n	8014a76 <tcp_poll+0x3a>
 8014a68:	4b08      	ldr	r3, [pc, #32]	; (8014a8c <tcp_poll+0x50>)
 8014a6a:	f640 023e 	movw	r2, #2110	; 0x83e
 8014a6e:	490a      	ldr	r1, [pc, #40]	; (8014a98 <tcp_poll+0x5c>)
 8014a70:	4808      	ldr	r0, [pc, #32]	; (8014a94 <tcp_poll+0x58>)
 8014a72:	f00a ff1b 	bl	801f8ac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	68ba      	ldr	r2, [r7, #8]
 8014a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	79fa      	ldrb	r2, [r7, #7]
 8014a82:	775a      	strb	r2, [r3, #29]
}
 8014a84:	3710      	adds	r7, #16
 8014a86:	46bd      	mov	sp, r7
 8014a88:	bd80      	pop	{r7, pc}
 8014a8a:	bf00      	nop
 8014a8c:	08022d00 	.word	0x08022d00
 8014a90:	08023314 	.word	0x08023314
 8014a94:	08022d44 	.word	0x08022d44
 8014a98:	0802332c 	.word	0x0802332c

08014a9c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d107      	bne.n	8014aba <tcp_pcb_purge+0x1e>
 8014aaa:	4b21      	ldr	r3, [pc, #132]	; (8014b30 <tcp_pcb_purge+0x94>)
 8014aac:	f640 0251 	movw	r2, #2129	; 0x851
 8014ab0:	4920      	ldr	r1, [pc, #128]	; (8014b34 <tcp_pcb_purge+0x98>)
 8014ab2:	4821      	ldr	r0, [pc, #132]	; (8014b38 <tcp_pcb_purge+0x9c>)
 8014ab4:	f00a fefa 	bl	801f8ac <iprintf>
 8014ab8:	e037      	b.n	8014b2a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	7d1b      	ldrb	r3, [r3, #20]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d033      	beq.n	8014b2a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014ac6:	2b0a      	cmp	r3, #10
 8014ac8:	d02f      	beq.n	8014b2a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014ace:	2b01      	cmp	r3, #1
 8014ad0:	d02b      	beq.n	8014b2a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d007      	beq.n	8014aea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7fe f874 	bl	8012bcc <pbuf_free>
      pcb->refused_data = NULL;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d002      	beq.n	8014af8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	f000 f986 	bl	8014e04 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014afe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7ff fcf9 	bl	80144fc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7ff fcf4 	bl	80144fc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2200      	movs	r2, #0
 8014b18:	66da      	str	r2, [r3, #108]	; 0x6c
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2200      	movs	r2, #0
 8014b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014b2a:	3708      	adds	r7, #8
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}
 8014b30:	08022d00 	.word	0x08022d00
 8014b34:	0802334c 	.word	0x0802334c
 8014b38:	08022d44 	.word	0x08022d44

08014b3c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b084      	sub	sp, #16
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
 8014b44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d106      	bne.n	8014b5a <tcp_pcb_remove+0x1e>
 8014b4c:	4b3e      	ldr	r3, [pc, #248]	; (8014c48 <tcp_pcb_remove+0x10c>)
 8014b4e:	f640 0283 	movw	r2, #2179	; 0x883
 8014b52:	493e      	ldr	r1, [pc, #248]	; (8014c4c <tcp_pcb_remove+0x110>)
 8014b54:	483e      	ldr	r0, [pc, #248]	; (8014c50 <tcp_pcb_remove+0x114>)
 8014b56:	f00a fea9 	bl	801f8ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d106      	bne.n	8014b6e <tcp_pcb_remove+0x32>
 8014b60:	4b39      	ldr	r3, [pc, #228]	; (8014c48 <tcp_pcb_remove+0x10c>)
 8014b62:	f640 0284 	movw	r2, #2180	; 0x884
 8014b66:	493b      	ldr	r1, [pc, #236]	; (8014c54 <tcp_pcb_remove+0x118>)
 8014b68:	4839      	ldr	r0, [pc, #228]	; (8014c50 <tcp_pcb_remove+0x114>)
 8014b6a:	f00a fe9f 	bl	801f8ac <iprintf>

  TCP_RMV(pcblist, pcb);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	683a      	ldr	r2, [r7, #0]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d105      	bne.n	8014b84 <tcp_pcb_remove+0x48>
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	68da      	ldr	r2, [r3, #12]
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	601a      	str	r2, [r3, #0]
 8014b82:	e013      	b.n	8014bac <tcp_pcb_remove+0x70>
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	60fb      	str	r3, [r7, #12]
 8014b8a:	e00c      	b.n	8014ba6 <tcp_pcb_remove+0x6a>
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	68db      	ldr	r3, [r3, #12]
 8014b90:	683a      	ldr	r2, [r7, #0]
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d104      	bne.n	8014ba0 <tcp_pcb_remove+0x64>
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	68da      	ldr	r2, [r3, #12]
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	60da      	str	r2, [r3, #12]
 8014b9e:	e005      	b.n	8014bac <tcp_pcb_remove+0x70>
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	68db      	ldr	r3, [r3, #12]
 8014ba4:	60fb      	str	r3, [r7, #12]
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d1ef      	bne.n	8014b8c <tcp_pcb_remove+0x50>
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014bb2:	6838      	ldr	r0, [r7, #0]
 8014bb4:	f7ff ff72 	bl	8014a9c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	7d1b      	ldrb	r3, [r3, #20]
 8014bbc:	2b0a      	cmp	r3, #10
 8014bbe:	d013      	beq.n	8014be8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014bc4:	2b01      	cmp	r3, #1
 8014bc6:	d00f      	beq.n	8014be8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014bc8:	683b      	ldr	r3, [r7, #0]
 8014bca:	8b5b      	ldrh	r3, [r3, #26]
 8014bcc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d009      	beq.n	8014be8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014bd4:	683b      	ldr	r3, [r7, #0]
 8014bd6:	8b5b      	ldrh	r3, [r3, #26]
 8014bd8:	f043 0302 	orr.w	r3, r3, #2
 8014bdc:	b29a      	uxth	r2, r3
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014be2:	6838      	ldr	r0, [r7, #0]
 8014be4:	f003 fbc6 	bl	8018374 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	7d1b      	ldrb	r3, [r3, #20]
 8014bec:	2b01      	cmp	r3, #1
 8014bee:	d020      	beq.n	8014c32 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d006      	beq.n	8014c06 <tcp_pcb_remove+0xca>
 8014bf8:	4b13      	ldr	r3, [pc, #76]	; (8014c48 <tcp_pcb_remove+0x10c>)
 8014bfa:	f640 0293 	movw	r2, #2195	; 0x893
 8014bfe:	4916      	ldr	r1, [pc, #88]	; (8014c58 <tcp_pcb_remove+0x11c>)
 8014c00:	4813      	ldr	r0, [pc, #76]	; (8014c50 <tcp_pcb_remove+0x114>)
 8014c02:	f00a fe53 	bl	801f8ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014c06:	683b      	ldr	r3, [r7, #0]
 8014c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d006      	beq.n	8014c1c <tcp_pcb_remove+0xe0>
 8014c0e:	4b0e      	ldr	r3, [pc, #56]	; (8014c48 <tcp_pcb_remove+0x10c>)
 8014c10:	f640 0294 	movw	r2, #2196	; 0x894
 8014c14:	4911      	ldr	r1, [pc, #68]	; (8014c5c <tcp_pcb_remove+0x120>)
 8014c16:	480e      	ldr	r0, [pc, #56]	; (8014c50 <tcp_pcb_remove+0x114>)
 8014c18:	f00a fe48 	bl	801f8ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d006      	beq.n	8014c32 <tcp_pcb_remove+0xf6>
 8014c24:	4b08      	ldr	r3, [pc, #32]	; (8014c48 <tcp_pcb_remove+0x10c>)
 8014c26:	f640 0296 	movw	r2, #2198	; 0x896
 8014c2a:	490d      	ldr	r1, [pc, #52]	; (8014c60 <tcp_pcb_remove+0x124>)
 8014c2c:	4808      	ldr	r0, [pc, #32]	; (8014c50 <tcp_pcb_remove+0x114>)
 8014c2e:	f00a fe3d 	bl	801f8ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	2200      	movs	r2, #0
 8014c36:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014c3e:	bf00      	nop
 8014c40:	3710      	adds	r7, #16
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	bf00      	nop
 8014c48:	08022d00 	.word	0x08022d00
 8014c4c:	08023368 	.word	0x08023368
 8014c50:	08022d44 	.word	0x08022d44
 8014c54:	08023384 	.word	0x08023384
 8014c58:	080233a4 	.word	0x080233a4
 8014c5c:	080233bc 	.word	0x080233bc
 8014c60:	080233d8 	.word	0x080233d8

08014c64 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b082      	sub	sp, #8
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d106      	bne.n	8014c80 <tcp_next_iss+0x1c>
 8014c72:	4b0a      	ldr	r3, [pc, #40]	; (8014c9c <tcp_next_iss+0x38>)
 8014c74:	f640 02af 	movw	r2, #2223	; 0x8af
 8014c78:	4909      	ldr	r1, [pc, #36]	; (8014ca0 <tcp_next_iss+0x3c>)
 8014c7a:	480a      	ldr	r0, [pc, #40]	; (8014ca4 <tcp_next_iss+0x40>)
 8014c7c:	f00a fe16 	bl	801f8ac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014c80:	4b09      	ldr	r3, [pc, #36]	; (8014ca8 <tcp_next_iss+0x44>)
 8014c82:	681a      	ldr	r2, [r3, #0]
 8014c84:	4b09      	ldr	r3, [pc, #36]	; (8014cac <tcp_next_iss+0x48>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	4413      	add	r3, r2
 8014c8a:	4a07      	ldr	r2, [pc, #28]	; (8014ca8 <tcp_next_iss+0x44>)
 8014c8c:	6013      	str	r3, [r2, #0]
  return iss;
 8014c8e:	4b06      	ldr	r3, [pc, #24]	; (8014ca8 <tcp_next_iss+0x44>)
 8014c90:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	3708      	adds	r7, #8
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}
 8014c9a:	bf00      	nop
 8014c9c:	08022d00 	.word	0x08022d00
 8014ca0:	080233f0 	.word	0x080233f0
 8014ca4:	08022d44 	.word	0x08022d44
 8014ca8:	20000028 	.word	0x20000028
 8014cac:	200101cc 	.word	0x200101cc

08014cb0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b086      	sub	sp, #24
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	60b9      	str	r1, [r7, #8]
 8014cba:	607a      	str	r2, [r7, #4]
 8014cbc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d106      	bne.n	8014cd2 <tcp_eff_send_mss_netif+0x22>
 8014cc4:	4b14      	ldr	r3, [pc, #80]	; (8014d18 <tcp_eff_send_mss_netif+0x68>)
 8014cc6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014cca:	4914      	ldr	r1, [pc, #80]	; (8014d1c <tcp_eff_send_mss_netif+0x6c>)
 8014ccc:	4814      	ldr	r0, [pc, #80]	; (8014d20 <tcp_eff_send_mss_netif+0x70>)
 8014cce:	f00a fded 	bl	801f8ac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d101      	bne.n	8014cdc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014cd8:	89fb      	ldrh	r3, [r7, #14]
 8014cda:	e019      	b.n	8014d10 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ce0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014ce2:	8afb      	ldrh	r3, [r7, #22]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d012      	beq.n	8014d0e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014ce8:	2328      	movs	r3, #40	; 0x28
 8014cea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014cec:	8afa      	ldrh	r2, [r7, #22]
 8014cee:	8abb      	ldrh	r3, [r7, #20]
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	d904      	bls.n	8014cfe <tcp_eff_send_mss_netif+0x4e>
 8014cf4:	8afa      	ldrh	r2, [r7, #22]
 8014cf6:	8abb      	ldrh	r3, [r7, #20]
 8014cf8:	1ad3      	subs	r3, r2, r3
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	e000      	b.n	8014d00 <tcp_eff_send_mss_netif+0x50>
 8014cfe:	2300      	movs	r3, #0
 8014d00:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014d02:	8a7a      	ldrh	r2, [r7, #18]
 8014d04:	89fb      	ldrh	r3, [r7, #14]
 8014d06:	4293      	cmp	r3, r2
 8014d08:	bf28      	it	cs
 8014d0a:	4613      	movcs	r3, r2
 8014d0c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014d0e:	89fb      	ldrh	r3, [r7, #14]
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3718      	adds	r7, #24
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	08022d00 	.word	0x08022d00
 8014d1c:	0802340c 	.word	0x0802340c
 8014d20:	08022d44 	.word	0x08022d44

08014d24 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d119      	bne.n	8014d6c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014d38:	4b10      	ldr	r3, [pc, #64]	; (8014d7c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014d3a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014d3e:	4910      	ldr	r1, [pc, #64]	; (8014d80 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014d40:	4810      	ldr	r0, [pc, #64]	; (8014d84 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014d42:	f00a fdb3 	bl	801f8ac <iprintf>

  while (pcb != NULL) {
 8014d46:	e011      	b.n	8014d6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d108      	bne.n	8014d66 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014d5a:	68f8      	ldr	r0, [r7, #12]
 8014d5c:	f7fe fd36 	bl	80137cc <tcp_abort>
      pcb = next;
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	60fb      	str	r3, [r7, #12]
 8014d64:	e002      	b.n	8014d6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	68db      	ldr	r3, [r3, #12]
 8014d6a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d1ea      	bne.n	8014d48 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014d72:	bf00      	nop
 8014d74:	bf00      	nop
 8014d76:	3710      	adds	r7, #16
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	08022d00 	.word	0x08022d00
 8014d80:	08023434 	.word	0x08023434
 8014d84:	08022d44 	.word	0x08022d44

08014d88 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b084      	sub	sp, #16
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d02a      	beq.n	8014dee <tcp_netif_ip_addr_changed+0x66>
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d026      	beq.n	8014dee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014da0:	4b15      	ldr	r3, [pc, #84]	; (8014df8 <tcp_netif_ip_addr_changed+0x70>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	4619      	mov	r1, r3
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f7ff ffbc 	bl	8014d24 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014dac:	4b13      	ldr	r3, [pc, #76]	; (8014dfc <tcp_netif_ip_addr_changed+0x74>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	4619      	mov	r1, r3
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f7ff ffb6 	bl	8014d24 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d017      	beq.n	8014dee <tcp_netif_ip_addr_changed+0x66>
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d013      	beq.n	8014dee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014dc6:	4b0e      	ldr	r3, [pc, #56]	; (8014e00 <tcp_netif_ip_addr_changed+0x78>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	60fb      	str	r3, [r7, #12]
 8014dcc:	e00c      	b.n	8014de8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	681a      	ldr	r2, [r3, #0]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d103      	bne.n	8014de2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	681a      	ldr	r2, [r3, #0]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	60fb      	str	r3, [r7, #12]
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d1ef      	bne.n	8014dce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014dee:	bf00      	nop
 8014df0:	3710      	adds	r7, #16
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	200101d8 	.word	0x200101d8
 8014dfc:	200101d0 	.word	0x200101d0
 8014e00:	200101d4 	.word	0x200101d4

08014e04 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d007      	beq.n	8014e24 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f7ff fb6f 	bl	80144fc <tcp_segs_free>
    pcb->ooseq = NULL;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	2200      	movs	r2, #0
 8014e22:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014e24:	bf00      	nop
 8014e26:	3708      	adds	r7, #8
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014e2c:	b590      	push	{r4, r7, lr}
 8014e2e:	b08d      	sub	sp, #52	; 0x34
 8014e30:	af04      	add	r7, sp, #16
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d105      	bne.n	8014e48 <tcp_input+0x1c>
 8014e3c:	4b9b      	ldr	r3, [pc, #620]	; (80150ac <tcp_input+0x280>)
 8014e3e:	2283      	movs	r2, #131	; 0x83
 8014e40:	499b      	ldr	r1, [pc, #620]	; (80150b0 <tcp_input+0x284>)
 8014e42:	489c      	ldr	r0, [pc, #624]	; (80150b4 <tcp_input+0x288>)
 8014e44:	f00a fd32 	bl	801f8ac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	4a9a      	ldr	r2, [pc, #616]	; (80150b8 <tcp_input+0x28c>)
 8014e4e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	895b      	ldrh	r3, [r3, #10]
 8014e54:	2b13      	cmp	r3, #19
 8014e56:	f240 83d1 	bls.w	80155fc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014e5a:	4b98      	ldr	r3, [pc, #608]	; (80150bc <tcp_input+0x290>)
 8014e5c:	695b      	ldr	r3, [r3, #20]
 8014e5e:	4a97      	ldr	r2, [pc, #604]	; (80150bc <tcp_input+0x290>)
 8014e60:	6812      	ldr	r2, [r2, #0]
 8014e62:	4611      	mov	r1, r2
 8014e64:	4618      	mov	r0, r3
 8014e66:	f008 fa7b 	bl	801d360 <ip4_addr_isbroadcast_u32>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	f040 83c7 	bne.w	8015600 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014e72:	4b92      	ldr	r3, [pc, #584]	; (80150bc <tcp_input+0x290>)
 8014e74:	695b      	ldr	r3, [r3, #20]
 8014e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014e7a:	2be0      	cmp	r3, #224	; 0xe0
 8014e7c:	f000 83c0 	beq.w	8015600 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014e80:	4b8d      	ldr	r3, [pc, #564]	; (80150b8 <tcp_input+0x28c>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	899b      	ldrh	r3, [r3, #12]
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7fc fa69 	bl	8011360 <lwip_htons>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	0b1b      	lsrs	r3, r3, #12
 8014e92:	b29b      	uxth	r3, r3
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	009b      	lsls	r3, r3, #2
 8014e98:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014e9a:	7cbb      	ldrb	r3, [r7, #18]
 8014e9c:	2b13      	cmp	r3, #19
 8014e9e:	f240 83b1 	bls.w	8015604 <tcp_input+0x7d8>
 8014ea2:	7cbb      	ldrb	r3, [r7, #18]
 8014ea4:	b29a      	uxth	r2, r3
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	891b      	ldrh	r3, [r3, #8]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	f200 83aa 	bhi.w	8015604 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014eb0:	7cbb      	ldrb	r3, [r7, #18]
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	3b14      	subs	r3, #20
 8014eb6:	b29a      	uxth	r2, r3
 8014eb8:	4b81      	ldr	r3, [pc, #516]	; (80150c0 <tcp_input+0x294>)
 8014eba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014ebc:	4b81      	ldr	r3, [pc, #516]	; (80150c4 <tcp_input+0x298>)
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	895a      	ldrh	r2, [r3, #10]
 8014ec6:	7cbb      	ldrb	r3, [r7, #18]
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d309      	bcc.n	8014ee2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014ece:	4b7c      	ldr	r3, [pc, #496]	; (80150c0 <tcp_input+0x294>)
 8014ed0:	881a      	ldrh	r2, [r3, #0]
 8014ed2:	4b7d      	ldr	r3, [pc, #500]	; (80150c8 <tcp_input+0x29c>)
 8014ed4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014ed6:	7cbb      	ldrb	r3, [r7, #18]
 8014ed8:	4619      	mov	r1, r3
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f7fd fdf0 	bl	8012ac0 <pbuf_remove_header>
 8014ee0:	e04e      	b.n	8014f80 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d105      	bne.n	8014ef6 <tcp_input+0xca>
 8014eea:	4b70      	ldr	r3, [pc, #448]	; (80150ac <tcp_input+0x280>)
 8014eec:	22c2      	movs	r2, #194	; 0xc2
 8014eee:	4977      	ldr	r1, [pc, #476]	; (80150cc <tcp_input+0x2a0>)
 8014ef0:	4870      	ldr	r0, [pc, #448]	; (80150b4 <tcp_input+0x288>)
 8014ef2:	f00a fcdb 	bl	801f8ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014ef6:	2114      	movs	r1, #20
 8014ef8:	6878      	ldr	r0, [r7, #4]
 8014efa:	f7fd fde1 	bl	8012ac0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	895a      	ldrh	r2, [r3, #10]
 8014f02:	4b71      	ldr	r3, [pc, #452]	; (80150c8 <tcp_input+0x29c>)
 8014f04:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014f06:	4b6e      	ldr	r3, [pc, #440]	; (80150c0 <tcp_input+0x294>)
 8014f08:	881a      	ldrh	r2, [r3, #0]
 8014f0a:	4b6f      	ldr	r3, [pc, #444]	; (80150c8 <tcp_input+0x29c>)
 8014f0c:	881b      	ldrh	r3, [r3, #0]
 8014f0e:	1ad3      	subs	r3, r2, r3
 8014f10:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014f12:	4b6d      	ldr	r3, [pc, #436]	; (80150c8 <tcp_input+0x29c>)
 8014f14:	881b      	ldrh	r3, [r3, #0]
 8014f16:	4619      	mov	r1, r3
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	f7fd fdd1 	bl	8012ac0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	895b      	ldrh	r3, [r3, #10]
 8014f24:	8a3a      	ldrh	r2, [r7, #16]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	f200 836e 	bhi.w	8015608 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	4a64      	ldr	r2, [pc, #400]	; (80150c4 <tcp_input+0x298>)
 8014f34:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	8a3a      	ldrh	r2, [r7, #16]
 8014f3c:	4611      	mov	r1, r2
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f7fd fdbe 	bl	8012ac0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	891a      	ldrh	r2, [r3, #8]
 8014f48:	8a3b      	ldrh	r3, [r7, #16]
 8014f4a:	1ad3      	subs	r3, r2, r3
 8014f4c:	b29a      	uxth	r2, r3
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	895b      	ldrh	r3, [r3, #10]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d005      	beq.n	8014f66 <tcp_input+0x13a>
 8014f5a:	4b54      	ldr	r3, [pc, #336]	; (80150ac <tcp_input+0x280>)
 8014f5c:	22df      	movs	r2, #223	; 0xdf
 8014f5e:	495c      	ldr	r1, [pc, #368]	; (80150d0 <tcp_input+0x2a4>)
 8014f60:	4854      	ldr	r0, [pc, #336]	; (80150b4 <tcp_input+0x288>)
 8014f62:	f00a fca3 	bl	801f8ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	891a      	ldrh	r2, [r3, #8]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	891b      	ldrh	r3, [r3, #8]
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d005      	beq.n	8014f80 <tcp_input+0x154>
 8014f74:	4b4d      	ldr	r3, [pc, #308]	; (80150ac <tcp_input+0x280>)
 8014f76:	22e0      	movs	r2, #224	; 0xe0
 8014f78:	4956      	ldr	r1, [pc, #344]	; (80150d4 <tcp_input+0x2a8>)
 8014f7a:	484e      	ldr	r0, [pc, #312]	; (80150b4 <tcp_input+0x288>)
 8014f7c:	f00a fc96 	bl	801f8ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014f80:	4b4d      	ldr	r3, [pc, #308]	; (80150b8 <tcp_input+0x28c>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	881b      	ldrh	r3, [r3, #0]
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	4a4b      	ldr	r2, [pc, #300]	; (80150b8 <tcp_input+0x28c>)
 8014f8a:	6814      	ldr	r4, [r2, #0]
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7fc f9e7 	bl	8011360 <lwip_htons>
 8014f92:	4603      	mov	r3, r0
 8014f94:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014f96:	4b48      	ldr	r3, [pc, #288]	; (80150b8 <tcp_input+0x28c>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	885b      	ldrh	r3, [r3, #2]
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	4a46      	ldr	r2, [pc, #280]	; (80150b8 <tcp_input+0x28c>)
 8014fa0:	6814      	ldr	r4, [r2, #0]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7fc f9dc 	bl	8011360 <lwip_htons>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014fac:	4b42      	ldr	r3, [pc, #264]	; (80150b8 <tcp_input+0x28c>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	4a41      	ldr	r2, [pc, #260]	; (80150b8 <tcp_input+0x28c>)
 8014fb4:	6814      	ldr	r4, [r2, #0]
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7fc f9e7 	bl	801138a <lwip_htonl>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	6063      	str	r3, [r4, #4]
 8014fc0:	6863      	ldr	r3, [r4, #4]
 8014fc2:	4a45      	ldr	r2, [pc, #276]	; (80150d8 <tcp_input+0x2ac>)
 8014fc4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014fc6:	4b3c      	ldr	r3, [pc, #240]	; (80150b8 <tcp_input+0x28c>)
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	689b      	ldr	r3, [r3, #8]
 8014fcc:	4a3a      	ldr	r2, [pc, #232]	; (80150b8 <tcp_input+0x28c>)
 8014fce:	6814      	ldr	r4, [r2, #0]
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7fc f9da 	bl	801138a <lwip_htonl>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	60a3      	str	r3, [r4, #8]
 8014fda:	68a3      	ldr	r3, [r4, #8]
 8014fdc:	4a3f      	ldr	r2, [pc, #252]	; (80150dc <tcp_input+0x2b0>)
 8014fde:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014fe0:	4b35      	ldr	r3, [pc, #212]	; (80150b8 <tcp_input+0x28c>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	89db      	ldrh	r3, [r3, #14]
 8014fe6:	b29b      	uxth	r3, r3
 8014fe8:	4a33      	ldr	r2, [pc, #204]	; (80150b8 <tcp_input+0x28c>)
 8014fea:	6814      	ldr	r4, [r2, #0]
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fc f9b7 	bl	8011360 <lwip_htons>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014ff6:	4b30      	ldr	r3, [pc, #192]	; (80150b8 <tcp_input+0x28c>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	899b      	ldrh	r3, [r3, #12]
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7fc f9ae 	bl	8011360 <lwip_htons>
 8015004:	4603      	mov	r3, r0
 8015006:	b2db      	uxtb	r3, r3
 8015008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801500c:	b2da      	uxtb	r2, r3
 801500e:	4b34      	ldr	r3, [pc, #208]	; (80150e0 <tcp_input+0x2b4>)
 8015010:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	891a      	ldrh	r2, [r3, #8]
 8015016:	4b33      	ldr	r3, [pc, #204]	; (80150e4 <tcp_input+0x2b8>)
 8015018:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801501a:	4b31      	ldr	r3, [pc, #196]	; (80150e0 <tcp_input+0x2b4>)
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	f003 0303 	and.w	r3, r3, #3
 8015022:	2b00      	cmp	r3, #0
 8015024:	d00c      	beq.n	8015040 <tcp_input+0x214>
    tcplen++;
 8015026:	4b2f      	ldr	r3, [pc, #188]	; (80150e4 <tcp_input+0x2b8>)
 8015028:	881b      	ldrh	r3, [r3, #0]
 801502a:	3301      	adds	r3, #1
 801502c:	b29a      	uxth	r2, r3
 801502e:	4b2d      	ldr	r3, [pc, #180]	; (80150e4 <tcp_input+0x2b8>)
 8015030:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	891a      	ldrh	r2, [r3, #8]
 8015036:	4b2b      	ldr	r3, [pc, #172]	; (80150e4 <tcp_input+0x2b8>)
 8015038:	881b      	ldrh	r3, [r3, #0]
 801503a:	429a      	cmp	r2, r3
 801503c:	f200 82e6 	bhi.w	801560c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015040:	2300      	movs	r3, #0
 8015042:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015044:	4b28      	ldr	r3, [pc, #160]	; (80150e8 <tcp_input+0x2bc>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	61fb      	str	r3, [r7, #28]
 801504a:	e09d      	b.n	8015188 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801504c:	69fb      	ldr	r3, [r7, #28]
 801504e:	7d1b      	ldrb	r3, [r3, #20]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d105      	bne.n	8015060 <tcp_input+0x234>
 8015054:	4b15      	ldr	r3, [pc, #84]	; (80150ac <tcp_input+0x280>)
 8015056:	22fb      	movs	r2, #251	; 0xfb
 8015058:	4924      	ldr	r1, [pc, #144]	; (80150ec <tcp_input+0x2c0>)
 801505a:	4816      	ldr	r0, [pc, #88]	; (80150b4 <tcp_input+0x288>)
 801505c:	f00a fc26 	bl	801f8ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015060:	69fb      	ldr	r3, [r7, #28]
 8015062:	7d1b      	ldrb	r3, [r3, #20]
 8015064:	2b0a      	cmp	r3, #10
 8015066:	d105      	bne.n	8015074 <tcp_input+0x248>
 8015068:	4b10      	ldr	r3, [pc, #64]	; (80150ac <tcp_input+0x280>)
 801506a:	22fc      	movs	r2, #252	; 0xfc
 801506c:	4920      	ldr	r1, [pc, #128]	; (80150f0 <tcp_input+0x2c4>)
 801506e:	4811      	ldr	r0, [pc, #68]	; (80150b4 <tcp_input+0x288>)
 8015070:	f00a fc1c 	bl	801f8ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015074:	69fb      	ldr	r3, [r7, #28]
 8015076:	7d1b      	ldrb	r3, [r3, #20]
 8015078:	2b01      	cmp	r3, #1
 801507a:	d105      	bne.n	8015088 <tcp_input+0x25c>
 801507c:	4b0b      	ldr	r3, [pc, #44]	; (80150ac <tcp_input+0x280>)
 801507e:	22fd      	movs	r2, #253	; 0xfd
 8015080:	491c      	ldr	r1, [pc, #112]	; (80150f4 <tcp_input+0x2c8>)
 8015082:	480c      	ldr	r0, [pc, #48]	; (80150b4 <tcp_input+0x288>)
 8015084:	f00a fc12 	bl	801f8ac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015088:	69fb      	ldr	r3, [r7, #28]
 801508a:	7a1b      	ldrb	r3, [r3, #8]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d033      	beq.n	80150f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015090:	69fb      	ldr	r3, [r7, #28]
 8015092:	7a1a      	ldrb	r2, [r3, #8]
 8015094:	4b09      	ldr	r3, [pc, #36]	; (80150bc <tcp_input+0x290>)
 8015096:	685b      	ldr	r3, [r3, #4]
 8015098:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801509c:	3301      	adds	r3, #1
 801509e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d029      	beq.n	80150f8 <tcp_input+0x2cc>
      prev = pcb;
 80150a4:	69fb      	ldr	r3, [r7, #28]
 80150a6:	61bb      	str	r3, [r7, #24]
      continue;
 80150a8:	e06b      	b.n	8015182 <tcp_input+0x356>
 80150aa:	bf00      	nop
 80150ac:	08023468 	.word	0x08023468
 80150b0:	0802349c 	.word	0x0802349c
 80150b4:	080234b4 	.word	0x080234b4
 80150b8:	200101f4 	.word	0x200101f4
 80150bc:	2000ca58 	.word	0x2000ca58
 80150c0:	200101f8 	.word	0x200101f8
 80150c4:	200101fc 	.word	0x200101fc
 80150c8:	200101fa 	.word	0x200101fa
 80150cc:	080234dc 	.word	0x080234dc
 80150d0:	080234ec 	.word	0x080234ec
 80150d4:	080234f8 	.word	0x080234f8
 80150d8:	20010204 	.word	0x20010204
 80150dc:	20010208 	.word	0x20010208
 80150e0:	20010210 	.word	0x20010210
 80150e4:	2001020e 	.word	0x2001020e
 80150e8:	200101d8 	.word	0x200101d8
 80150ec:	08023518 	.word	0x08023518
 80150f0:	08023540 	.word	0x08023540
 80150f4:	0802356c 	.word	0x0802356c
    }

    if (pcb->remote_port == tcphdr->src &&
 80150f8:	69fb      	ldr	r3, [r7, #28]
 80150fa:	8b1a      	ldrh	r2, [r3, #24]
 80150fc:	4b72      	ldr	r3, [pc, #456]	; (80152c8 <tcp_input+0x49c>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	881b      	ldrh	r3, [r3, #0]
 8015102:	b29b      	uxth	r3, r3
 8015104:	429a      	cmp	r2, r3
 8015106:	d13a      	bne.n	801517e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015108:	69fb      	ldr	r3, [r7, #28]
 801510a:	8ada      	ldrh	r2, [r3, #22]
 801510c:	4b6e      	ldr	r3, [pc, #440]	; (80152c8 <tcp_input+0x49c>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	885b      	ldrh	r3, [r3, #2]
 8015112:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015114:	429a      	cmp	r2, r3
 8015116:	d132      	bne.n	801517e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015118:	69fb      	ldr	r3, [r7, #28]
 801511a:	685a      	ldr	r2, [r3, #4]
 801511c:	4b6b      	ldr	r3, [pc, #428]	; (80152cc <tcp_input+0x4a0>)
 801511e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015120:	429a      	cmp	r2, r3
 8015122:	d12c      	bne.n	801517e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015124:	69fb      	ldr	r3, [r7, #28]
 8015126:	681a      	ldr	r2, [r3, #0]
 8015128:	4b68      	ldr	r3, [pc, #416]	; (80152cc <tcp_input+0x4a0>)
 801512a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801512c:	429a      	cmp	r2, r3
 801512e:	d126      	bne.n	801517e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015130:	69fb      	ldr	r3, [r7, #28]
 8015132:	68db      	ldr	r3, [r3, #12]
 8015134:	69fa      	ldr	r2, [r7, #28]
 8015136:	429a      	cmp	r2, r3
 8015138:	d106      	bne.n	8015148 <tcp_input+0x31c>
 801513a:	4b65      	ldr	r3, [pc, #404]	; (80152d0 <tcp_input+0x4a4>)
 801513c:	f240 120d 	movw	r2, #269	; 0x10d
 8015140:	4964      	ldr	r1, [pc, #400]	; (80152d4 <tcp_input+0x4a8>)
 8015142:	4865      	ldr	r0, [pc, #404]	; (80152d8 <tcp_input+0x4ac>)
 8015144:	f00a fbb2 	bl	801f8ac <iprintf>
      if (prev != NULL) {
 8015148:	69bb      	ldr	r3, [r7, #24]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d00a      	beq.n	8015164 <tcp_input+0x338>
        prev->next = pcb->next;
 801514e:	69fb      	ldr	r3, [r7, #28]
 8015150:	68da      	ldr	r2, [r3, #12]
 8015152:	69bb      	ldr	r3, [r7, #24]
 8015154:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015156:	4b61      	ldr	r3, [pc, #388]	; (80152dc <tcp_input+0x4b0>)
 8015158:	681a      	ldr	r2, [r3, #0]
 801515a:	69fb      	ldr	r3, [r7, #28]
 801515c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801515e:	4a5f      	ldr	r2, [pc, #380]	; (80152dc <tcp_input+0x4b0>)
 8015160:	69fb      	ldr	r3, [r7, #28]
 8015162:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015164:	69fb      	ldr	r3, [r7, #28]
 8015166:	68db      	ldr	r3, [r3, #12]
 8015168:	69fa      	ldr	r2, [r7, #28]
 801516a:	429a      	cmp	r2, r3
 801516c:	d111      	bne.n	8015192 <tcp_input+0x366>
 801516e:	4b58      	ldr	r3, [pc, #352]	; (80152d0 <tcp_input+0x4a4>)
 8015170:	f240 1215 	movw	r2, #277	; 0x115
 8015174:	495a      	ldr	r1, [pc, #360]	; (80152e0 <tcp_input+0x4b4>)
 8015176:	4858      	ldr	r0, [pc, #352]	; (80152d8 <tcp_input+0x4ac>)
 8015178:	f00a fb98 	bl	801f8ac <iprintf>
      break;
 801517c:	e009      	b.n	8015192 <tcp_input+0x366>
    }
    prev = pcb;
 801517e:	69fb      	ldr	r3, [r7, #28]
 8015180:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015182:	69fb      	ldr	r3, [r7, #28]
 8015184:	68db      	ldr	r3, [r3, #12]
 8015186:	61fb      	str	r3, [r7, #28]
 8015188:	69fb      	ldr	r3, [r7, #28]
 801518a:	2b00      	cmp	r3, #0
 801518c:	f47f af5e 	bne.w	801504c <tcp_input+0x220>
 8015190:	e000      	b.n	8015194 <tcp_input+0x368>
      break;
 8015192:	bf00      	nop
  }

  if (pcb == NULL) {
 8015194:	69fb      	ldr	r3, [r7, #28]
 8015196:	2b00      	cmp	r3, #0
 8015198:	f040 80aa 	bne.w	80152f0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801519c:	4b51      	ldr	r3, [pc, #324]	; (80152e4 <tcp_input+0x4b8>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	61fb      	str	r3, [r7, #28]
 80151a2:	e03f      	b.n	8015224 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80151a4:	69fb      	ldr	r3, [r7, #28]
 80151a6:	7d1b      	ldrb	r3, [r3, #20]
 80151a8:	2b0a      	cmp	r3, #10
 80151aa:	d006      	beq.n	80151ba <tcp_input+0x38e>
 80151ac:	4b48      	ldr	r3, [pc, #288]	; (80152d0 <tcp_input+0x4a4>)
 80151ae:	f240 121f 	movw	r2, #287	; 0x11f
 80151b2:	494d      	ldr	r1, [pc, #308]	; (80152e8 <tcp_input+0x4bc>)
 80151b4:	4848      	ldr	r0, [pc, #288]	; (80152d8 <tcp_input+0x4ac>)
 80151b6:	f00a fb79 	bl	801f8ac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80151ba:	69fb      	ldr	r3, [r7, #28]
 80151bc:	7a1b      	ldrb	r3, [r3, #8]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d009      	beq.n	80151d6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80151c2:	69fb      	ldr	r3, [r7, #28]
 80151c4:	7a1a      	ldrb	r2, [r3, #8]
 80151c6:	4b41      	ldr	r3, [pc, #260]	; (80152cc <tcp_input+0x4a0>)
 80151c8:	685b      	ldr	r3, [r3, #4]
 80151ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80151ce:	3301      	adds	r3, #1
 80151d0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d122      	bne.n	801521c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80151d6:	69fb      	ldr	r3, [r7, #28]
 80151d8:	8b1a      	ldrh	r2, [r3, #24]
 80151da:	4b3b      	ldr	r3, [pc, #236]	; (80152c8 <tcp_input+0x49c>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	881b      	ldrh	r3, [r3, #0]
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d11b      	bne.n	801521e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	8ada      	ldrh	r2, [r3, #22]
 80151ea:	4b37      	ldr	r3, [pc, #220]	; (80152c8 <tcp_input+0x49c>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	885b      	ldrh	r3, [r3, #2]
 80151f0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80151f2:	429a      	cmp	r2, r3
 80151f4:	d113      	bne.n	801521e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80151f6:	69fb      	ldr	r3, [r7, #28]
 80151f8:	685a      	ldr	r2, [r3, #4]
 80151fa:	4b34      	ldr	r3, [pc, #208]	; (80152cc <tcp_input+0x4a0>)
 80151fc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80151fe:	429a      	cmp	r2, r3
 8015200:	d10d      	bne.n	801521e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015202:	69fb      	ldr	r3, [r7, #28]
 8015204:	681a      	ldr	r2, [r3, #0]
 8015206:	4b31      	ldr	r3, [pc, #196]	; (80152cc <tcp_input+0x4a0>)
 8015208:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801520a:	429a      	cmp	r2, r3
 801520c:	d107      	bne.n	801521e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801520e:	69f8      	ldr	r0, [r7, #28]
 8015210:	f000 fb56 	bl	80158c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8015214:	6878      	ldr	r0, [r7, #4]
 8015216:	f7fd fcd9 	bl	8012bcc <pbuf_free>
        return;
 801521a:	e1fd      	b.n	8015618 <tcp_input+0x7ec>
        continue;
 801521c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801521e:	69fb      	ldr	r3, [r7, #28]
 8015220:	68db      	ldr	r3, [r3, #12]
 8015222:	61fb      	str	r3, [r7, #28]
 8015224:	69fb      	ldr	r3, [r7, #28]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d1bc      	bne.n	80151a4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801522a:	2300      	movs	r3, #0
 801522c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801522e:	4b2f      	ldr	r3, [pc, #188]	; (80152ec <tcp_input+0x4c0>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	617b      	str	r3, [r7, #20]
 8015234:	e02a      	b.n	801528c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	7a1b      	ldrb	r3, [r3, #8]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d00c      	beq.n	8015258 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	7a1a      	ldrb	r2, [r3, #8]
 8015242:	4b22      	ldr	r3, [pc, #136]	; (80152cc <tcp_input+0x4a0>)
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801524a:	3301      	adds	r3, #1
 801524c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801524e:	429a      	cmp	r2, r3
 8015250:	d002      	beq.n	8015258 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8015252:	697b      	ldr	r3, [r7, #20]
 8015254:	61bb      	str	r3, [r7, #24]
        continue;
 8015256:	e016      	b.n	8015286 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	8ada      	ldrh	r2, [r3, #22]
 801525c:	4b1a      	ldr	r3, [pc, #104]	; (80152c8 <tcp_input+0x49c>)
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	885b      	ldrh	r3, [r3, #2]
 8015262:	b29b      	uxth	r3, r3
 8015264:	429a      	cmp	r2, r3
 8015266:	d10c      	bne.n	8015282 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	4b17      	ldr	r3, [pc, #92]	; (80152cc <tcp_input+0x4a0>)
 801526e:	695b      	ldr	r3, [r3, #20]
 8015270:	429a      	cmp	r2, r3
 8015272:	d00f      	beq.n	8015294 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d00d      	beq.n	8015296 <tcp_input+0x46a>
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d009      	beq.n	8015296 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8015282:	697b      	ldr	r3, [r7, #20]
 8015284:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	68db      	ldr	r3, [r3, #12]
 801528a:	617b      	str	r3, [r7, #20]
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d1d1      	bne.n	8015236 <tcp_input+0x40a>
 8015292:	e000      	b.n	8015296 <tcp_input+0x46a>
            break;
 8015294:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d029      	beq.n	80152f0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801529c:	69bb      	ldr	r3, [r7, #24]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d00a      	beq.n	80152b8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	68da      	ldr	r2, [r3, #12]
 80152a6:	69bb      	ldr	r3, [r7, #24]
 80152a8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80152aa:	4b10      	ldr	r3, [pc, #64]	; (80152ec <tcp_input+0x4c0>)
 80152ac:	681a      	ldr	r2, [r3, #0]
 80152ae:	697b      	ldr	r3, [r7, #20]
 80152b0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80152b2:	4a0e      	ldr	r2, [pc, #56]	; (80152ec <tcp_input+0x4c0>)
 80152b4:	697b      	ldr	r3, [r7, #20]
 80152b6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80152b8:	6978      	ldr	r0, [r7, #20]
 80152ba:	f000 fa03 	bl	80156c4 <tcp_listen_input>
      }
      pbuf_free(p);
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f7fd fc84 	bl	8012bcc <pbuf_free>
      return;
 80152c4:	e1a8      	b.n	8015618 <tcp_input+0x7ec>
 80152c6:	bf00      	nop
 80152c8:	200101f4 	.word	0x200101f4
 80152cc:	2000ca58 	.word	0x2000ca58
 80152d0:	08023468 	.word	0x08023468
 80152d4:	08023594 	.word	0x08023594
 80152d8:	080234b4 	.word	0x080234b4
 80152dc:	200101d8 	.word	0x200101d8
 80152e0:	080235c0 	.word	0x080235c0
 80152e4:	200101dc 	.word	0x200101dc
 80152e8:	080235ec 	.word	0x080235ec
 80152ec:	200101d4 	.word	0x200101d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	f000 8158 	beq.w	80155a8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80152f8:	4b95      	ldr	r3, [pc, #596]	; (8015550 <tcp_input+0x724>)
 80152fa:	2200      	movs	r2, #0
 80152fc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	891a      	ldrh	r2, [r3, #8]
 8015302:	4b93      	ldr	r3, [pc, #588]	; (8015550 <tcp_input+0x724>)
 8015304:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015306:	4a92      	ldr	r2, [pc, #584]	; (8015550 <tcp_input+0x724>)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801530c:	4b91      	ldr	r3, [pc, #580]	; (8015554 <tcp_input+0x728>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	4a8f      	ldr	r2, [pc, #572]	; (8015550 <tcp_input+0x724>)
 8015312:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015314:	4b90      	ldr	r3, [pc, #576]	; (8015558 <tcp_input+0x72c>)
 8015316:	2200      	movs	r2, #0
 8015318:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801531a:	4b90      	ldr	r3, [pc, #576]	; (801555c <tcp_input+0x730>)
 801531c:	2200      	movs	r2, #0
 801531e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015320:	4b8f      	ldr	r3, [pc, #572]	; (8015560 <tcp_input+0x734>)
 8015322:	2200      	movs	r2, #0
 8015324:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015326:	4b8f      	ldr	r3, [pc, #572]	; (8015564 <tcp_input+0x738>)
 8015328:	781b      	ldrb	r3, [r3, #0]
 801532a:	f003 0308 	and.w	r3, r3, #8
 801532e:	2b00      	cmp	r3, #0
 8015330:	d006      	beq.n	8015340 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	7b5b      	ldrb	r3, [r3, #13]
 8015336:	f043 0301 	orr.w	r3, r3, #1
 801533a:	b2da      	uxtb	r2, r3
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015344:	2b00      	cmp	r3, #0
 8015346:	d017      	beq.n	8015378 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015348:	69f8      	ldr	r0, [r7, #28]
 801534a:	f7ff f85b 	bl	8014404 <tcp_process_refused_data>
 801534e:	4603      	mov	r3, r0
 8015350:	f113 0f0d 	cmn.w	r3, #13
 8015354:	d007      	beq.n	8015366 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015356:	69fb      	ldr	r3, [r7, #28]
 8015358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801535a:	2b00      	cmp	r3, #0
 801535c:	d00c      	beq.n	8015378 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801535e:	4b82      	ldr	r3, [pc, #520]	; (8015568 <tcp_input+0x73c>)
 8015360:	881b      	ldrh	r3, [r3, #0]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d008      	beq.n	8015378 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015366:	69fb      	ldr	r3, [r7, #28]
 8015368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801536a:	2b00      	cmp	r3, #0
 801536c:	f040 80e3 	bne.w	8015536 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015370:	69f8      	ldr	r0, [r7, #28]
 8015372:	f003 fe05 	bl	8018f80 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015376:	e0de      	b.n	8015536 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015378:	4a7c      	ldr	r2, [pc, #496]	; (801556c <tcp_input+0x740>)
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801537e:	69f8      	ldr	r0, [r7, #28]
 8015380:	f000 fb18 	bl	80159b4 <tcp_process>
 8015384:	4603      	mov	r3, r0
 8015386:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801538c:	f113 0f0d 	cmn.w	r3, #13
 8015390:	f000 80d3 	beq.w	801553a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8015394:	4b71      	ldr	r3, [pc, #452]	; (801555c <tcp_input+0x730>)
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	f003 0308 	and.w	r3, r3, #8
 801539c:	2b00      	cmp	r3, #0
 801539e:	d015      	beq.n	80153cc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d008      	beq.n	80153bc <tcp_input+0x590>
 80153aa:	69fb      	ldr	r3, [r7, #28]
 80153ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80153b0:	69fa      	ldr	r2, [r7, #28]
 80153b2:	6912      	ldr	r2, [r2, #16]
 80153b4:	f06f 010d 	mvn.w	r1, #13
 80153b8:	4610      	mov	r0, r2
 80153ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80153bc:	69f9      	ldr	r1, [r7, #28]
 80153be:	486c      	ldr	r0, [pc, #432]	; (8015570 <tcp_input+0x744>)
 80153c0:	f7ff fbbc 	bl	8014b3c <tcp_pcb_remove>
        tcp_free(pcb);
 80153c4:	69f8      	ldr	r0, [r7, #28]
 80153c6:	f7fd febd 	bl	8013144 <tcp_free>
 80153ca:	e0da      	b.n	8015582 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80153cc:	2300      	movs	r3, #0
 80153ce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80153d0:	4b63      	ldr	r3, [pc, #396]	; (8015560 <tcp_input+0x734>)
 80153d2:	881b      	ldrh	r3, [r3, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d01d      	beq.n	8015414 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80153d8:	4b61      	ldr	r3, [pc, #388]	; (8015560 <tcp_input+0x734>)
 80153da:	881b      	ldrh	r3, [r3, #0]
 80153dc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80153de:	69fb      	ldr	r3, [r7, #28]
 80153e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d00a      	beq.n	80153fe <tcp_input+0x5d2>
 80153e8:	69fb      	ldr	r3, [r7, #28]
 80153ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80153ee:	69fa      	ldr	r2, [r7, #28]
 80153f0:	6910      	ldr	r0, [r2, #16]
 80153f2:	89fa      	ldrh	r2, [r7, #14]
 80153f4:	69f9      	ldr	r1, [r7, #28]
 80153f6:	4798      	blx	r3
 80153f8:	4603      	mov	r3, r0
 80153fa:	74fb      	strb	r3, [r7, #19]
 80153fc:	e001      	b.n	8015402 <tcp_input+0x5d6>
 80153fe:	2300      	movs	r3, #0
 8015400:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015402:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015406:	f113 0f0d 	cmn.w	r3, #13
 801540a:	f000 8098 	beq.w	801553e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801540e:	4b54      	ldr	r3, [pc, #336]	; (8015560 <tcp_input+0x734>)
 8015410:	2200      	movs	r2, #0
 8015412:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015414:	69f8      	ldr	r0, [r7, #28]
 8015416:	f000 f915 	bl	8015644 <tcp_input_delayed_close>
 801541a:	4603      	mov	r3, r0
 801541c:	2b00      	cmp	r3, #0
 801541e:	f040 8090 	bne.w	8015542 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015422:	4b4d      	ldr	r3, [pc, #308]	; (8015558 <tcp_input+0x72c>)
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d041      	beq.n	80154ae <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801542a:	69fb      	ldr	r3, [r7, #28]
 801542c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801542e:	2b00      	cmp	r3, #0
 8015430:	d006      	beq.n	8015440 <tcp_input+0x614>
 8015432:	4b50      	ldr	r3, [pc, #320]	; (8015574 <tcp_input+0x748>)
 8015434:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015438:	494f      	ldr	r1, [pc, #316]	; (8015578 <tcp_input+0x74c>)
 801543a:	4850      	ldr	r0, [pc, #320]	; (801557c <tcp_input+0x750>)
 801543c:	f00a fa36 	bl	801f8ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015440:	69fb      	ldr	r3, [r7, #28]
 8015442:	8b5b      	ldrh	r3, [r3, #26]
 8015444:	f003 0310 	and.w	r3, r3, #16
 8015448:	2b00      	cmp	r3, #0
 801544a:	d008      	beq.n	801545e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801544c:	4b42      	ldr	r3, [pc, #264]	; (8015558 <tcp_input+0x72c>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	4618      	mov	r0, r3
 8015452:	f7fd fbbb 	bl	8012bcc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015456:	69f8      	ldr	r0, [r7, #28]
 8015458:	f7fe f9b8 	bl	80137cc <tcp_abort>
            goto aborted;
 801545c:	e091      	b.n	8015582 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801545e:	69fb      	ldr	r3, [r7, #28]
 8015460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015464:	2b00      	cmp	r3, #0
 8015466:	d00c      	beq.n	8015482 <tcp_input+0x656>
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801546e:	69fb      	ldr	r3, [r7, #28]
 8015470:	6918      	ldr	r0, [r3, #16]
 8015472:	4b39      	ldr	r3, [pc, #228]	; (8015558 <tcp_input+0x72c>)
 8015474:	681a      	ldr	r2, [r3, #0]
 8015476:	2300      	movs	r3, #0
 8015478:	69f9      	ldr	r1, [r7, #28]
 801547a:	47a0      	blx	r4
 801547c:	4603      	mov	r3, r0
 801547e:	74fb      	strb	r3, [r7, #19]
 8015480:	e008      	b.n	8015494 <tcp_input+0x668>
 8015482:	4b35      	ldr	r3, [pc, #212]	; (8015558 <tcp_input+0x72c>)
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	2300      	movs	r3, #0
 8015488:	69f9      	ldr	r1, [r7, #28]
 801548a:	2000      	movs	r0, #0
 801548c:	f7ff f890 	bl	80145b0 <tcp_recv_null>
 8015490:	4603      	mov	r3, r0
 8015492:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015494:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015498:	f113 0f0d 	cmn.w	r3, #13
 801549c:	d053      	beq.n	8015546 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801549e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d003      	beq.n	80154ae <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80154a6:	4b2c      	ldr	r3, [pc, #176]	; (8015558 <tcp_input+0x72c>)
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80154ae:	4b2b      	ldr	r3, [pc, #172]	; (801555c <tcp_input+0x730>)
 80154b0:	781b      	ldrb	r3, [r3, #0]
 80154b2:	f003 0320 	and.w	r3, r3, #32
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d030      	beq.n	801551c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d009      	beq.n	80154d6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80154c2:	69fb      	ldr	r3, [r7, #28]
 80154c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80154c6:	7b5a      	ldrb	r2, [r3, #13]
 80154c8:	69fb      	ldr	r3, [r7, #28]
 80154ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80154cc:	f042 0220 	orr.w	r2, r2, #32
 80154d0:	b2d2      	uxtb	r2, r2
 80154d2:	735a      	strb	r2, [r3, #13]
 80154d4:	e022      	b.n	801551c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80154de:	d005      	beq.n	80154ec <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80154e0:	69fb      	ldr	r3, [r7, #28]
 80154e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154e4:	3301      	adds	r3, #1
 80154e6:	b29a      	uxth	r2, r3
 80154e8:	69fb      	ldr	r3, [r7, #28]
 80154ea:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80154ec:	69fb      	ldr	r3, [r7, #28]
 80154ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d00b      	beq.n	801550e <tcp_input+0x6e2>
 80154f6:	69fb      	ldr	r3, [r7, #28]
 80154f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	6918      	ldr	r0, [r3, #16]
 8015500:	2300      	movs	r3, #0
 8015502:	2200      	movs	r2, #0
 8015504:	69f9      	ldr	r1, [r7, #28]
 8015506:	47a0      	blx	r4
 8015508:	4603      	mov	r3, r0
 801550a:	74fb      	strb	r3, [r7, #19]
 801550c:	e001      	b.n	8015512 <tcp_input+0x6e6>
 801550e:	2300      	movs	r3, #0
 8015510:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015512:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015516:	f113 0f0d 	cmn.w	r3, #13
 801551a:	d016      	beq.n	801554a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801551c:	4b13      	ldr	r3, [pc, #76]	; (801556c <tcp_input+0x740>)
 801551e:	2200      	movs	r2, #0
 8015520:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015522:	69f8      	ldr	r0, [r7, #28]
 8015524:	f000 f88e 	bl	8015644 <tcp_input_delayed_close>
 8015528:	4603      	mov	r3, r0
 801552a:	2b00      	cmp	r3, #0
 801552c:	d128      	bne.n	8015580 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801552e:	69f8      	ldr	r0, [r7, #28]
 8015530:	f002 ff20 	bl	8018374 <tcp_output>
 8015534:	e025      	b.n	8015582 <tcp_input+0x756>
        goto aborted;
 8015536:	bf00      	nop
 8015538:	e023      	b.n	8015582 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801553a:	bf00      	nop
 801553c:	e021      	b.n	8015582 <tcp_input+0x756>
              goto aborted;
 801553e:	bf00      	nop
 8015540:	e01f      	b.n	8015582 <tcp_input+0x756>
          goto aborted;
 8015542:	bf00      	nop
 8015544:	e01d      	b.n	8015582 <tcp_input+0x756>
            goto aborted;
 8015546:	bf00      	nop
 8015548:	e01b      	b.n	8015582 <tcp_input+0x756>
              goto aborted;
 801554a:	bf00      	nop
 801554c:	e019      	b.n	8015582 <tcp_input+0x756>
 801554e:	bf00      	nop
 8015550:	200101e4 	.word	0x200101e4
 8015554:	200101f4 	.word	0x200101f4
 8015558:	20010214 	.word	0x20010214
 801555c:	20010211 	.word	0x20010211
 8015560:	2001020c 	.word	0x2001020c
 8015564:	20010210 	.word	0x20010210
 8015568:	2001020e 	.word	0x2001020e
 801556c:	20010218 	.word	0x20010218
 8015570:	200101d8 	.word	0x200101d8
 8015574:	08023468 	.word	0x08023468
 8015578:	0802361c 	.word	0x0802361c
 801557c:	080234b4 	.word	0x080234b4
          goto aborted;
 8015580:	bf00      	nop
    tcp_input_pcb = NULL;
 8015582:	4b27      	ldr	r3, [pc, #156]	; (8015620 <tcp_input+0x7f4>)
 8015584:	2200      	movs	r2, #0
 8015586:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015588:	4b26      	ldr	r3, [pc, #152]	; (8015624 <tcp_input+0x7f8>)
 801558a:	2200      	movs	r2, #0
 801558c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801558e:	4b26      	ldr	r3, [pc, #152]	; (8015628 <tcp_input+0x7fc>)
 8015590:	685b      	ldr	r3, [r3, #4]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d03f      	beq.n	8015616 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8015596:	4b24      	ldr	r3, [pc, #144]	; (8015628 <tcp_input+0x7fc>)
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	4618      	mov	r0, r3
 801559c:	f7fd fb16 	bl	8012bcc <pbuf_free>
      inseg.p = NULL;
 80155a0:	4b21      	ldr	r3, [pc, #132]	; (8015628 <tcp_input+0x7fc>)
 80155a2:	2200      	movs	r2, #0
 80155a4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80155a6:	e036      	b.n	8015616 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80155a8:	4b20      	ldr	r3, [pc, #128]	; (801562c <tcp_input+0x800>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	899b      	ldrh	r3, [r3, #12]
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	4618      	mov	r0, r3
 80155b2:	f7fb fed5 	bl	8011360 <lwip_htons>
 80155b6:	4603      	mov	r3, r0
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	f003 0304 	and.w	r3, r3, #4
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d118      	bne.n	80155f4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155c2:	4b1b      	ldr	r3, [pc, #108]	; (8015630 <tcp_input+0x804>)
 80155c4:	6819      	ldr	r1, [r3, #0]
 80155c6:	4b1b      	ldr	r3, [pc, #108]	; (8015634 <tcp_input+0x808>)
 80155c8:	881b      	ldrh	r3, [r3, #0]
 80155ca:	461a      	mov	r2, r3
 80155cc:	4b1a      	ldr	r3, [pc, #104]	; (8015638 <tcp_input+0x80c>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80155d2:	4b16      	ldr	r3, [pc, #88]	; (801562c <tcp_input+0x800>)
 80155d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155d6:	885b      	ldrh	r3, [r3, #2]
 80155d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80155da:	4a14      	ldr	r2, [pc, #80]	; (801562c <tcp_input+0x800>)
 80155dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155de:	8812      	ldrh	r2, [r2, #0]
 80155e0:	b292      	uxth	r2, r2
 80155e2:	9202      	str	r2, [sp, #8]
 80155e4:	9301      	str	r3, [sp, #4]
 80155e6:	4b15      	ldr	r3, [pc, #84]	; (801563c <tcp_input+0x810>)
 80155e8:	9300      	str	r3, [sp, #0]
 80155ea:	4b15      	ldr	r3, [pc, #84]	; (8015640 <tcp_input+0x814>)
 80155ec:	4602      	mov	r2, r0
 80155ee:	2000      	movs	r0, #0
 80155f0:	f003 fc74 	bl	8018edc <tcp_rst>
    pbuf_free(p);
 80155f4:	6878      	ldr	r0, [r7, #4]
 80155f6:	f7fd fae9 	bl	8012bcc <pbuf_free>
  return;
 80155fa:	e00c      	b.n	8015616 <tcp_input+0x7ea>
    goto dropped;
 80155fc:	bf00      	nop
 80155fe:	e006      	b.n	801560e <tcp_input+0x7e2>
    goto dropped;
 8015600:	bf00      	nop
 8015602:	e004      	b.n	801560e <tcp_input+0x7e2>
    goto dropped;
 8015604:	bf00      	nop
 8015606:	e002      	b.n	801560e <tcp_input+0x7e2>
      goto dropped;
 8015608:	bf00      	nop
 801560a:	e000      	b.n	801560e <tcp_input+0x7e2>
      goto dropped;
 801560c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f7fd fadc 	bl	8012bcc <pbuf_free>
 8015614:	e000      	b.n	8015618 <tcp_input+0x7ec>
  return;
 8015616:	bf00      	nop
}
 8015618:	3724      	adds	r7, #36	; 0x24
 801561a:	46bd      	mov	sp, r7
 801561c:	bd90      	pop	{r4, r7, pc}
 801561e:	bf00      	nop
 8015620:	20010218 	.word	0x20010218
 8015624:	20010214 	.word	0x20010214
 8015628:	200101e4 	.word	0x200101e4
 801562c:	200101f4 	.word	0x200101f4
 8015630:	20010208 	.word	0x20010208
 8015634:	2001020e 	.word	0x2001020e
 8015638:	20010204 	.word	0x20010204
 801563c:	2000ca68 	.word	0x2000ca68
 8015640:	2000ca6c 	.word	0x2000ca6c

08015644 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d106      	bne.n	8015660 <tcp_input_delayed_close+0x1c>
 8015652:	4b17      	ldr	r3, [pc, #92]	; (80156b0 <tcp_input_delayed_close+0x6c>)
 8015654:	f240 225a 	movw	r2, #602	; 0x25a
 8015658:	4916      	ldr	r1, [pc, #88]	; (80156b4 <tcp_input_delayed_close+0x70>)
 801565a:	4817      	ldr	r0, [pc, #92]	; (80156b8 <tcp_input_delayed_close+0x74>)
 801565c:	f00a f926 	bl	801f8ac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015660:	4b16      	ldr	r3, [pc, #88]	; (80156bc <tcp_input_delayed_close+0x78>)
 8015662:	781b      	ldrb	r3, [r3, #0]
 8015664:	f003 0310 	and.w	r3, r3, #16
 8015668:	2b00      	cmp	r3, #0
 801566a:	d01c      	beq.n	80156a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	8b5b      	ldrh	r3, [r3, #26]
 8015670:	f003 0310 	and.w	r3, r3, #16
 8015674:	2b00      	cmp	r3, #0
 8015676:	d10d      	bne.n	8015694 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801567e:	2b00      	cmp	r3, #0
 8015680:	d008      	beq.n	8015694 <tcp_input_delayed_close+0x50>
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015688:	687a      	ldr	r2, [r7, #4]
 801568a:	6912      	ldr	r2, [r2, #16]
 801568c:	f06f 010e 	mvn.w	r1, #14
 8015690:	4610      	mov	r0, r2
 8015692:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015694:	6879      	ldr	r1, [r7, #4]
 8015696:	480a      	ldr	r0, [pc, #40]	; (80156c0 <tcp_input_delayed_close+0x7c>)
 8015698:	f7ff fa50 	bl	8014b3c <tcp_pcb_remove>
    tcp_free(pcb);
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7fd fd51 	bl	8013144 <tcp_free>
    return 1;
 80156a2:	2301      	movs	r3, #1
 80156a4:	e000      	b.n	80156a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80156a6:	2300      	movs	r3, #0
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3708      	adds	r7, #8
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	08023468 	.word	0x08023468
 80156b4:	08023638 	.word	0x08023638
 80156b8:	080234b4 	.word	0x080234b4
 80156bc:	20010211 	.word	0x20010211
 80156c0:	200101d8 	.word	0x200101d8

080156c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80156c4:	b590      	push	{r4, r7, lr}
 80156c6:	b08b      	sub	sp, #44	; 0x2c
 80156c8:	af04      	add	r7, sp, #16
 80156ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80156cc:	4b6f      	ldr	r3, [pc, #444]	; (801588c <tcp_listen_input+0x1c8>)
 80156ce:	781b      	ldrb	r3, [r3, #0]
 80156d0:	f003 0304 	and.w	r3, r3, #4
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	f040 80d2 	bne.w	801587e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d106      	bne.n	80156ee <tcp_listen_input+0x2a>
 80156e0:	4b6b      	ldr	r3, [pc, #428]	; (8015890 <tcp_listen_input+0x1cc>)
 80156e2:	f240 2281 	movw	r2, #641	; 0x281
 80156e6:	496b      	ldr	r1, [pc, #428]	; (8015894 <tcp_listen_input+0x1d0>)
 80156e8:	486b      	ldr	r0, [pc, #428]	; (8015898 <tcp_listen_input+0x1d4>)
 80156ea:	f00a f8df 	bl	801f8ac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80156ee:	4b67      	ldr	r3, [pc, #412]	; (801588c <tcp_listen_input+0x1c8>)
 80156f0:	781b      	ldrb	r3, [r3, #0]
 80156f2:	f003 0310 	and.w	r3, r3, #16
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d019      	beq.n	801572e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80156fa:	4b68      	ldr	r3, [pc, #416]	; (801589c <tcp_listen_input+0x1d8>)
 80156fc:	6819      	ldr	r1, [r3, #0]
 80156fe:	4b68      	ldr	r3, [pc, #416]	; (80158a0 <tcp_listen_input+0x1dc>)
 8015700:	881b      	ldrh	r3, [r3, #0]
 8015702:	461a      	mov	r2, r3
 8015704:	4b67      	ldr	r3, [pc, #412]	; (80158a4 <tcp_listen_input+0x1e0>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801570a:	4b67      	ldr	r3, [pc, #412]	; (80158a8 <tcp_listen_input+0x1e4>)
 801570c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801570e:	885b      	ldrh	r3, [r3, #2]
 8015710:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015712:	4a65      	ldr	r2, [pc, #404]	; (80158a8 <tcp_listen_input+0x1e4>)
 8015714:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015716:	8812      	ldrh	r2, [r2, #0]
 8015718:	b292      	uxth	r2, r2
 801571a:	9202      	str	r2, [sp, #8]
 801571c:	9301      	str	r3, [sp, #4]
 801571e:	4b63      	ldr	r3, [pc, #396]	; (80158ac <tcp_listen_input+0x1e8>)
 8015720:	9300      	str	r3, [sp, #0]
 8015722:	4b63      	ldr	r3, [pc, #396]	; (80158b0 <tcp_listen_input+0x1ec>)
 8015724:	4602      	mov	r2, r0
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f003 fbd8 	bl	8018edc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801572c:	e0a9      	b.n	8015882 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801572e:	4b57      	ldr	r3, [pc, #348]	; (801588c <tcp_listen_input+0x1c8>)
 8015730:	781b      	ldrb	r3, [r3, #0]
 8015732:	f003 0302 	and.w	r3, r3, #2
 8015736:	2b00      	cmp	r3, #0
 8015738:	f000 80a3 	beq.w	8015882 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	7d5b      	ldrb	r3, [r3, #21]
 8015740:	4618      	mov	r0, r3
 8015742:	f7ff f859 	bl	80147f8 <tcp_alloc>
 8015746:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015748:	697b      	ldr	r3, [r7, #20]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d111      	bne.n	8015772 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	699b      	ldr	r3, [r3, #24]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d00a      	beq.n	801576c <tcp_listen_input+0xa8>
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	699b      	ldr	r3, [r3, #24]
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	6910      	ldr	r0, [r2, #16]
 801575e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015762:	2100      	movs	r1, #0
 8015764:	4798      	blx	r3
 8015766:	4603      	mov	r3, r0
 8015768:	73bb      	strb	r3, [r7, #14]
      return;
 801576a:	e08b      	b.n	8015884 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801576c:	23f0      	movs	r3, #240	; 0xf0
 801576e:	73bb      	strb	r3, [r7, #14]
      return;
 8015770:	e088      	b.n	8015884 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015772:	4b50      	ldr	r3, [pc, #320]	; (80158b4 <tcp_listen_input+0x1f0>)
 8015774:	695a      	ldr	r2, [r3, #20]
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801577a:	4b4e      	ldr	r3, [pc, #312]	; (80158b4 <tcp_listen_input+0x1f0>)
 801577c:	691a      	ldr	r2, [r3, #16]
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	8ada      	ldrh	r2, [r3, #22]
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801578a:	4b47      	ldr	r3, [pc, #284]	; (80158a8 <tcp_listen_input+0x1e4>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	881b      	ldrh	r3, [r3, #0]
 8015790:	b29a      	uxth	r2, r3
 8015792:	697b      	ldr	r3, [r7, #20]
 8015794:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015796:	697b      	ldr	r3, [r7, #20]
 8015798:	2203      	movs	r2, #3
 801579a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801579c:	4b41      	ldr	r3, [pc, #260]	; (80158a4 <tcp_listen_input+0x1e0>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	1c5a      	adds	r2, r3, #1
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80157ae:	6978      	ldr	r0, [r7, #20]
 80157b0:	f7ff fa58 	bl	8014c64 <tcp_next_iss>
 80157b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	693a      	ldr	r2, [r7, #16]
 80157ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	693a      	ldr	r2, [r7, #16]
 80157c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	693a      	ldr	r2, [r7, #16]
 80157c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	693a      	ldr	r2, [r7, #16]
 80157cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80157ce:	4b35      	ldr	r3, [pc, #212]	; (80158a4 <tcp_listen_input+0x1e0>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	1e5a      	subs	r2, r3, #1
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	691a      	ldr	r2, [r3, #16]
 80157dc:	697b      	ldr	r3, [r7, #20]
 80157de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	687a      	ldr	r2, [r7, #4]
 80157e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	7a5b      	ldrb	r3, [r3, #9]
 80157ea:	f003 030c 	and.w	r3, r3, #12
 80157ee:	b2da      	uxtb	r2, r3
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	7a1a      	ldrb	r2, [r3, #8]
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80157fc:	4b2e      	ldr	r3, [pc, #184]	; (80158b8 <tcp_listen_input+0x1f4>)
 80157fe:	681a      	ldr	r2, [r3, #0]
 8015800:	697b      	ldr	r3, [r7, #20]
 8015802:	60da      	str	r2, [r3, #12]
 8015804:	4a2c      	ldr	r2, [pc, #176]	; (80158b8 <tcp_listen_input+0x1f4>)
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	6013      	str	r3, [r2, #0]
 801580a:	f003 fd29 	bl	8019260 <tcp_timer_needed>
 801580e:	4b2b      	ldr	r3, [pc, #172]	; (80158bc <tcp_listen_input+0x1f8>)
 8015810:	2201      	movs	r2, #1
 8015812:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015814:	6978      	ldr	r0, [r7, #20]
 8015816:	f001 fd8f 	bl	8017338 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801581a:	4b23      	ldr	r3, [pc, #140]	; (80158a8 <tcp_listen_input+0x1e4>)
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	89db      	ldrh	r3, [r3, #14]
 8015820:	b29a      	uxth	r2, r3
 8015822:	697b      	ldr	r3, [r7, #20]
 8015824:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015834:	697b      	ldr	r3, [r7, #20]
 8015836:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	3304      	adds	r3, #4
 801583c:	4618      	mov	r0, r3
 801583e:	f007 fadb 	bl	801cdf8 <ip4_route>
 8015842:	4601      	mov	r1, r0
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	3304      	adds	r3, #4
 8015848:	461a      	mov	r2, r3
 801584a:	4620      	mov	r0, r4
 801584c:	f7ff fa30 	bl	8014cb0 <tcp_eff_send_mss_netif>
 8015850:	4603      	mov	r3, r0
 8015852:	461a      	mov	r2, r3
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015858:	2112      	movs	r1, #18
 801585a:	6978      	ldr	r0, [r7, #20]
 801585c:	f002 fc9c 	bl	8018198 <tcp_enqueue_flags>
 8015860:	4603      	mov	r3, r0
 8015862:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d004      	beq.n	8015876 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801586c:	2100      	movs	r1, #0
 801586e:	6978      	ldr	r0, [r7, #20]
 8015870:	f7fd feee 	bl	8013650 <tcp_abandon>
      return;
 8015874:	e006      	b.n	8015884 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015876:	6978      	ldr	r0, [r7, #20]
 8015878:	f002 fd7c 	bl	8018374 <tcp_output>
  return;
 801587c:	e001      	b.n	8015882 <tcp_listen_input+0x1be>
    return;
 801587e:	bf00      	nop
 8015880:	e000      	b.n	8015884 <tcp_listen_input+0x1c0>
  return;
 8015882:	bf00      	nop
}
 8015884:	371c      	adds	r7, #28
 8015886:	46bd      	mov	sp, r7
 8015888:	bd90      	pop	{r4, r7, pc}
 801588a:	bf00      	nop
 801588c:	20010210 	.word	0x20010210
 8015890:	08023468 	.word	0x08023468
 8015894:	08023660 	.word	0x08023660
 8015898:	080234b4 	.word	0x080234b4
 801589c:	20010208 	.word	0x20010208
 80158a0:	2001020e 	.word	0x2001020e
 80158a4:	20010204 	.word	0x20010204
 80158a8:	200101f4 	.word	0x200101f4
 80158ac:	2000ca68 	.word	0x2000ca68
 80158b0:	2000ca6c 	.word	0x2000ca6c
 80158b4:	2000ca58 	.word	0x2000ca58
 80158b8:	200101d8 	.word	0x200101d8
 80158bc:	200101e0 	.word	0x200101e0

080158c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b086      	sub	sp, #24
 80158c4:	af04      	add	r7, sp, #16
 80158c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80158c8:	4b2f      	ldr	r3, [pc, #188]	; (8015988 <tcp_timewait_input+0xc8>)
 80158ca:	781b      	ldrb	r3, [r3, #0]
 80158cc:	f003 0304 	and.w	r3, r3, #4
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d153      	bne.n	801597c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d106      	bne.n	80158e8 <tcp_timewait_input+0x28>
 80158da:	4b2c      	ldr	r3, [pc, #176]	; (801598c <tcp_timewait_input+0xcc>)
 80158dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80158e0:	492b      	ldr	r1, [pc, #172]	; (8015990 <tcp_timewait_input+0xd0>)
 80158e2:	482c      	ldr	r0, [pc, #176]	; (8015994 <tcp_timewait_input+0xd4>)
 80158e4:	f009 ffe2 	bl	801f8ac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80158e8:	4b27      	ldr	r3, [pc, #156]	; (8015988 <tcp_timewait_input+0xc8>)
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	f003 0302 	and.w	r3, r3, #2
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d02a      	beq.n	801594a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80158f4:	4b28      	ldr	r3, [pc, #160]	; (8015998 <tcp_timewait_input+0xd8>)
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158fc:	1ad3      	subs	r3, r2, r3
 80158fe:	2b00      	cmp	r3, #0
 8015900:	db2d      	blt.n	801595e <tcp_timewait_input+0x9e>
 8015902:	4b25      	ldr	r3, [pc, #148]	; (8015998 <tcp_timewait_input+0xd8>)
 8015904:	681a      	ldr	r2, [r3, #0]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801590a:	6879      	ldr	r1, [r7, #4]
 801590c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801590e:	440b      	add	r3, r1
 8015910:	1ad3      	subs	r3, r2, r3
 8015912:	2b00      	cmp	r3, #0
 8015914:	dc23      	bgt.n	801595e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015916:	4b21      	ldr	r3, [pc, #132]	; (801599c <tcp_timewait_input+0xdc>)
 8015918:	6819      	ldr	r1, [r3, #0]
 801591a:	4b21      	ldr	r3, [pc, #132]	; (80159a0 <tcp_timewait_input+0xe0>)
 801591c:	881b      	ldrh	r3, [r3, #0]
 801591e:	461a      	mov	r2, r3
 8015920:	4b1d      	ldr	r3, [pc, #116]	; (8015998 <tcp_timewait_input+0xd8>)
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015926:	4b1f      	ldr	r3, [pc, #124]	; (80159a4 <tcp_timewait_input+0xe4>)
 8015928:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801592a:	885b      	ldrh	r3, [r3, #2]
 801592c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801592e:	4a1d      	ldr	r2, [pc, #116]	; (80159a4 <tcp_timewait_input+0xe4>)
 8015930:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015932:	8812      	ldrh	r2, [r2, #0]
 8015934:	b292      	uxth	r2, r2
 8015936:	9202      	str	r2, [sp, #8]
 8015938:	9301      	str	r3, [sp, #4]
 801593a:	4b1b      	ldr	r3, [pc, #108]	; (80159a8 <tcp_timewait_input+0xe8>)
 801593c:	9300      	str	r3, [sp, #0]
 801593e:	4b1b      	ldr	r3, [pc, #108]	; (80159ac <tcp_timewait_input+0xec>)
 8015940:	4602      	mov	r2, r0
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f003 faca 	bl	8018edc <tcp_rst>
      return;
 8015948:	e01b      	b.n	8015982 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801594a:	4b0f      	ldr	r3, [pc, #60]	; (8015988 <tcp_timewait_input+0xc8>)
 801594c:	781b      	ldrb	r3, [r3, #0]
 801594e:	f003 0301 	and.w	r3, r3, #1
 8015952:	2b00      	cmp	r3, #0
 8015954:	d003      	beq.n	801595e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015956:	4b16      	ldr	r3, [pc, #88]	; (80159b0 <tcp_timewait_input+0xf0>)
 8015958:	681a      	ldr	r2, [r3, #0]
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801595e:	4b10      	ldr	r3, [pc, #64]	; (80159a0 <tcp_timewait_input+0xe0>)
 8015960:	881b      	ldrh	r3, [r3, #0]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d00c      	beq.n	8015980 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	8b5b      	ldrh	r3, [r3, #26]
 801596a:	f043 0302 	orr.w	r3, r3, #2
 801596e:	b29a      	uxth	r2, r3
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f002 fcfd 	bl	8018374 <tcp_output>
  }
  return;
 801597a:	e001      	b.n	8015980 <tcp_timewait_input+0xc0>
    return;
 801597c:	bf00      	nop
 801597e:	e000      	b.n	8015982 <tcp_timewait_input+0xc2>
  return;
 8015980:	bf00      	nop
}
 8015982:	3708      	adds	r7, #8
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	20010210 	.word	0x20010210
 801598c:	08023468 	.word	0x08023468
 8015990:	08023680 	.word	0x08023680
 8015994:	080234b4 	.word	0x080234b4
 8015998:	20010204 	.word	0x20010204
 801599c:	20010208 	.word	0x20010208
 80159a0:	2001020e 	.word	0x2001020e
 80159a4:	200101f4 	.word	0x200101f4
 80159a8:	2000ca68 	.word	0x2000ca68
 80159ac:	2000ca6c 	.word	0x2000ca6c
 80159b0:	200101cc 	.word	0x200101cc

080159b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80159b4:	b590      	push	{r4, r7, lr}
 80159b6:	b08d      	sub	sp, #52	; 0x34
 80159b8:	af04      	add	r7, sp, #16
 80159ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80159bc:	2300      	movs	r3, #0
 80159be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80159c0:	2300      	movs	r3, #0
 80159c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d106      	bne.n	80159d8 <tcp_process+0x24>
 80159ca:	4b9d      	ldr	r3, [pc, #628]	; (8015c40 <tcp_process+0x28c>)
 80159cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80159d0:	499c      	ldr	r1, [pc, #624]	; (8015c44 <tcp_process+0x290>)
 80159d2:	489d      	ldr	r0, [pc, #628]	; (8015c48 <tcp_process+0x294>)
 80159d4:	f009 ff6a 	bl	801f8ac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80159d8:	4b9c      	ldr	r3, [pc, #624]	; (8015c4c <tcp_process+0x298>)
 80159da:	781b      	ldrb	r3, [r3, #0]
 80159dc:	f003 0304 	and.w	r3, r3, #4
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d04e      	beq.n	8015a82 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	7d1b      	ldrb	r3, [r3, #20]
 80159e8:	2b02      	cmp	r3, #2
 80159ea:	d108      	bne.n	80159fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80159f0:	4b97      	ldr	r3, [pc, #604]	; (8015c50 <tcp_process+0x29c>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d123      	bne.n	8015a40 <tcp_process+0x8c>
        acceptable = 1;
 80159f8:	2301      	movs	r3, #1
 80159fa:	76fb      	strb	r3, [r7, #27]
 80159fc:	e020      	b.n	8015a40 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015a02:	4b94      	ldr	r3, [pc, #592]	; (8015c54 <tcp_process+0x2a0>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d102      	bne.n	8015a10 <tcp_process+0x5c>
        acceptable = 1;
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	76fb      	strb	r3, [r7, #27]
 8015a0e:	e017      	b.n	8015a40 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015a10:	4b90      	ldr	r3, [pc, #576]	; (8015c54 <tcp_process+0x2a0>)
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a18:	1ad3      	subs	r3, r2, r3
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	db10      	blt.n	8015a40 <tcp_process+0x8c>
 8015a1e:	4b8d      	ldr	r3, [pc, #564]	; (8015c54 <tcp_process+0x2a0>)
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a26:	6879      	ldr	r1, [r7, #4]
 8015a28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015a2a:	440b      	add	r3, r1
 8015a2c:	1ad3      	subs	r3, r2, r3
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	dc06      	bgt.n	8015a40 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	8b5b      	ldrh	r3, [r3, #26]
 8015a36:	f043 0302 	orr.w	r3, r3, #2
 8015a3a:	b29a      	uxth	r2, r3
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015a40:	7efb      	ldrb	r3, [r7, #27]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d01b      	beq.n	8015a7e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	7d1b      	ldrb	r3, [r3, #20]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d106      	bne.n	8015a5c <tcp_process+0xa8>
 8015a4e:	4b7c      	ldr	r3, [pc, #496]	; (8015c40 <tcp_process+0x28c>)
 8015a50:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015a54:	4980      	ldr	r1, [pc, #512]	; (8015c58 <tcp_process+0x2a4>)
 8015a56:	487c      	ldr	r0, [pc, #496]	; (8015c48 <tcp_process+0x294>)
 8015a58:	f009 ff28 	bl	801f8ac <iprintf>
      recv_flags |= TF_RESET;
 8015a5c:	4b7f      	ldr	r3, [pc, #508]	; (8015c5c <tcp_process+0x2a8>)
 8015a5e:	781b      	ldrb	r3, [r3, #0]
 8015a60:	f043 0308 	orr.w	r3, r3, #8
 8015a64:	b2da      	uxtb	r2, r3
 8015a66:	4b7d      	ldr	r3, [pc, #500]	; (8015c5c <tcp_process+0x2a8>)
 8015a68:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	8b5b      	ldrh	r3, [r3, #26]
 8015a6e:	f023 0301 	bic.w	r3, r3, #1
 8015a72:	b29a      	uxth	r2, r3
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015a78:	f06f 030d 	mvn.w	r3, #13
 8015a7c:	e37a      	b.n	8016174 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	e378      	b.n	8016174 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015a82:	4b72      	ldr	r3, [pc, #456]	; (8015c4c <tcp_process+0x298>)
 8015a84:	781b      	ldrb	r3, [r3, #0]
 8015a86:	f003 0302 	and.w	r3, r3, #2
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d010      	beq.n	8015ab0 <tcp_process+0xfc>
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	7d1b      	ldrb	r3, [r3, #20]
 8015a92:	2b02      	cmp	r3, #2
 8015a94:	d00c      	beq.n	8015ab0 <tcp_process+0xfc>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	7d1b      	ldrb	r3, [r3, #20]
 8015a9a:	2b03      	cmp	r3, #3
 8015a9c:	d008      	beq.n	8015ab0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	8b5b      	ldrh	r3, [r3, #26]
 8015aa2:	f043 0302 	orr.w	r3, r3, #2
 8015aa6:	b29a      	uxth	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015aac:	2300      	movs	r3, #0
 8015aae:	e361      	b.n	8016174 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	8b5b      	ldrh	r3, [r3, #26]
 8015ab4:	f003 0310 	and.w	r3, r3, #16
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d103      	bne.n	8015ac4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015abc:	4b68      	ldr	r3, [pc, #416]	; (8015c60 <tcp_process+0x2ac>)
 8015abe:	681a      	ldr	r2, [r3, #0]
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f001 fc2f 	bl	8017338 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	7d1b      	ldrb	r3, [r3, #20]
 8015ade:	3b02      	subs	r3, #2
 8015ae0:	2b07      	cmp	r3, #7
 8015ae2:	f200 8337 	bhi.w	8016154 <tcp_process+0x7a0>
 8015ae6:	a201      	add	r2, pc, #4	; (adr r2, 8015aec <tcp_process+0x138>)
 8015ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aec:	08015b0d 	.word	0x08015b0d
 8015af0:	08015d3d 	.word	0x08015d3d
 8015af4:	08015eb5 	.word	0x08015eb5
 8015af8:	08015edf 	.word	0x08015edf
 8015afc:	08016003 	.word	0x08016003
 8015b00:	08015eb5 	.word	0x08015eb5
 8015b04:	0801608f 	.word	0x0801608f
 8015b08:	0801611f 	.word	0x0801611f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015b0c:	4b4f      	ldr	r3, [pc, #316]	; (8015c4c <tcp_process+0x298>)
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	f003 0310 	and.w	r3, r3, #16
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	f000 80e4 	beq.w	8015ce2 <tcp_process+0x32e>
 8015b1a:	4b4c      	ldr	r3, [pc, #304]	; (8015c4c <tcp_process+0x298>)
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	f003 0302 	and.w	r3, r3, #2
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	f000 80dd 	beq.w	8015ce2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b2c:	1c5a      	adds	r2, r3, #1
 8015b2e:	4b48      	ldr	r3, [pc, #288]	; (8015c50 <tcp_process+0x29c>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	429a      	cmp	r2, r3
 8015b34:	f040 80d5 	bne.w	8015ce2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015b38:	4b46      	ldr	r3, [pc, #280]	; (8015c54 <tcp_process+0x2a0>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	1c5a      	adds	r2, r3, #1
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015b4a:	4b41      	ldr	r3, [pc, #260]	; (8015c50 <tcp_process+0x29c>)
 8015b4c:	681a      	ldr	r2, [r3, #0]
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015b52:	4b44      	ldr	r3, [pc, #272]	; (8015c64 <tcp_process+0x2b0>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	89db      	ldrh	r3, [r3, #14]
 8015b58:	b29a      	uxth	r2, r3
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015b6c:	4b39      	ldr	r3, [pc, #228]	; (8015c54 <tcp_process+0x2a0>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	1e5a      	subs	r2, r3, #1
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	2204      	movs	r2, #4
 8015b7a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	3304      	adds	r3, #4
 8015b84:	4618      	mov	r0, r3
 8015b86:	f007 f937 	bl	801cdf8 <ip4_route>
 8015b8a:	4601      	mov	r1, r0
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	3304      	adds	r3, #4
 8015b90:	461a      	mov	r2, r3
 8015b92:	4620      	mov	r0, r4
 8015b94:	f7ff f88c 	bl	8014cb0 <tcp_eff_send_mss_netif>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	461a      	mov	r2, r3
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ba4:	009a      	lsls	r2, r3, #2
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015baa:	005b      	lsls	r3, r3, #1
 8015bac:	f241 111c 	movw	r1, #4380	; 0x111c
 8015bb0:	428b      	cmp	r3, r1
 8015bb2:	bf38      	it	cc
 8015bb4:	460b      	movcc	r3, r1
 8015bb6:	429a      	cmp	r2, r3
 8015bb8:	d204      	bcs.n	8015bc4 <tcp_process+0x210>
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	e00d      	b.n	8015be0 <tcp_process+0x22c>
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bc8:	005b      	lsls	r3, r3, #1
 8015bca:	f241 121c 	movw	r2, #4380	; 0x111c
 8015bce:	4293      	cmp	r3, r2
 8015bd0:	d904      	bls.n	8015bdc <tcp_process+0x228>
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bd6:	005b      	lsls	r3, r3, #1
 8015bd8:	b29b      	uxth	r3, r3
 8015bda:	e001      	b.n	8015be0 <tcp_process+0x22c>
 8015bdc:	f241 131c 	movw	r3, #4380	; 0x111c
 8015be0:	687a      	ldr	r2, [r7, #4]
 8015be2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d106      	bne.n	8015bfe <tcp_process+0x24a>
 8015bf0:	4b13      	ldr	r3, [pc, #76]	; (8015c40 <tcp_process+0x28c>)
 8015bf2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015bf6:	491c      	ldr	r1, [pc, #112]	; (8015c68 <tcp_process+0x2b4>)
 8015bf8:	4813      	ldr	r0, [pc, #76]	; (8015c48 <tcp_process+0x294>)
 8015bfa:	f009 fe57 	bl	801f8ac <iprintf>
        --pcb->snd_queuelen;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c04:	3b01      	subs	r3, #1
 8015c06:	b29a      	uxth	r2, r3
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c12:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d12a      	bne.n	8015c70 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c1e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015c20:	69fb      	ldr	r3, [r7, #28]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d106      	bne.n	8015c34 <tcp_process+0x280>
 8015c26:	4b06      	ldr	r3, [pc, #24]	; (8015c40 <tcp_process+0x28c>)
 8015c28:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015c2c:	490f      	ldr	r1, [pc, #60]	; (8015c6c <tcp_process+0x2b8>)
 8015c2e:	4806      	ldr	r0, [pc, #24]	; (8015c48 <tcp_process+0x294>)
 8015c30:	f009 fe3c 	bl	801f8ac <iprintf>
          pcb->unsent = rseg->next;
 8015c34:	69fb      	ldr	r3, [r7, #28]
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8015c3c:	e01c      	b.n	8015c78 <tcp_process+0x2c4>
 8015c3e:	bf00      	nop
 8015c40:	08023468 	.word	0x08023468
 8015c44:	080236a0 	.word	0x080236a0
 8015c48:	080234b4 	.word	0x080234b4
 8015c4c:	20010210 	.word	0x20010210
 8015c50:	20010208 	.word	0x20010208
 8015c54:	20010204 	.word	0x20010204
 8015c58:	080236bc 	.word	0x080236bc
 8015c5c:	20010211 	.word	0x20010211
 8015c60:	200101cc 	.word	0x200101cc
 8015c64:	200101f4 	.word	0x200101f4
 8015c68:	080236dc 	.word	0x080236dc
 8015c6c:	080236f4 	.word	0x080236f4
        } else {
          pcb->unacked = rseg->next;
 8015c70:	69fb      	ldr	r3, [r7, #28]
 8015c72:	681a      	ldr	r2, [r3, #0]
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015c78:	69f8      	ldr	r0, [r7, #28]
 8015c7a:	f7fe fc54 	bl	8014526 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d104      	bne.n	8015c90 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c8c:	861a      	strh	r2, [r3, #48]	; 0x30
 8015c8e:	e006      	b.n	8015c9e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	2200      	movs	r2, #0
 8015c94:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d00a      	beq.n	8015cbe <tcp_process+0x30a>
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015cae:	687a      	ldr	r2, [r7, #4]
 8015cb0:	6910      	ldr	r0, [r2, #16]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	6879      	ldr	r1, [r7, #4]
 8015cb6:	4798      	blx	r3
 8015cb8:	4603      	mov	r3, r0
 8015cba:	76bb      	strb	r3, [r7, #26]
 8015cbc:	e001      	b.n	8015cc2 <tcp_process+0x30e>
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015cc2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015cc6:	f113 0f0d 	cmn.w	r3, #13
 8015cca:	d102      	bne.n	8015cd2 <tcp_process+0x31e>
          return ERR_ABRT;
 8015ccc:	f06f 030c 	mvn.w	r3, #12
 8015cd0:	e250      	b.n	8016174 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	8b5b      	ldrh	r3, [r3, #26]
 8015cd6:	f043 0302 	orr.w	r3, r3, #2
 8015cda:	b29a      	uxth	r2, r3
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015ce0:	e23a      	b.n	8016158 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015ce2:	4b98      	ldr	r3, [pc, #608]	; (8015f44 <tcp_process+0x590>)
 8015ce4:	781b      	ldrb	r3, [r3, #0]
 8015ce6:	f003 0310 	and.w	r3, r3, #16
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	f000 8234 	beq.w	8016158 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015cf0:	4b95      	ldr	r3, [pc, #596]	; (8015f48 <tcp_process+0x594>)
 8015cf2:	6819      	ldr	r1, [r3, #0]
 8015cf4:	4b95      	ldr	r3, [pc, #596]	; (8015f4c <tcp_process+0x598>)
 8015cf6:	881b      	ldrh	r3, [r3, #0]
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	4b95      	ldr	r3, [pc, #596]	; (8015f50 <tcp_process+0x59c>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d00:	4b94      	ldr	r3, [pc, #592]	; (8015f54 <tcp_process+0x5a0>)
 8015d02:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d04:	885b      	ldrh	r3, [r3, #2]
 8015d06:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015d08:	4a92      	ldr	r2, [pc, #584]	; (8015f54 <tcp_process+0x5a0>)
 8015d0a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015d0c:	8812      	ldrh	r2, [r2, #0]
 8015d0e:	b292      	uxth	r2, r2
 8015d10:	9202      	str	r2, [sp, #8]
 8015d12:	9301      	str	r3, [sp, #4]
 8015d14:	4b90      	ldr	r3, [pc, #576]	; (8015f58 <tcp_process+0x5a4>)
 8015d16:	9300      	str	r3, [sp, #0]
 8015d18:	4b90      	ldr	r3, [pc, #576]	; (8015f5c <tcp_process+0x5a8>)
 8015d1a:	4602      	mov	r2, r0
 8015d1c:	6878      	ldr	r0, [r7, #4]
 8015d1e:	f003 f8dd 	bl	8018edc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d28:	2b05      	cmp	r3, #5
 8015d2a:	f200 8215 	bhi.w	8016158 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2200      	movs	r2, #0
 8015d32:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015d34:	6878      	ldr	r0, [r7, #4]
 8015d36:	f002 fea9 	bl	8018a8c <tcp_rexmit_rto>
      break;
 8015d3a:	e20d      	b.n	8016158 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015d3c:	4b81      	ldr	r3, [pc, #516]	; (8015f44 <tcp_process+0x590>)
 8015d3e:	781b      	ldrb	r3, [r3, #0]
 8015d40:	f003 0310 	and.w	r3, r3, #16
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	f000 80a1 	beq.w	8015e8c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015d4a:	4b7f      	ldr	r3, [pc, #508]	; (8015f48 <tcp_process+0x594>)
 8015d4c:	681a      	ldr	r2, [r3, #0]
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d52:	1ad3      	subs	r3, r2, r3
 8015d54:	3b01      	subs	r3, #1
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	db7e      	blt.n	8015e58 <tcp_process+0x4a4>
 8015d5a:	4b7b      	ldr	r3, [pc, #492]	; (8015f48 <tcp_process+0x594>)
 8015d5c:	681a      	ldr	r2, [r3, #0]
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d62:	1ad3      	subs	r3, r2, r3
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	dc77      	bgt.n	8015e58 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2204      	movs	r2, #4
 8015d6c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d102      	bne.n	8015d7c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015d76:	23fa      	movs	r3, #250	; 0xfa
 8015d78:	76bb      	strb	r3, [r7, #26]
 8015d7a:	e01d      	b.n	8015db8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d80:	699b      	ldr	r3, [r3, #24]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d106      	bne.n	8015d94 <tcp_process+0x3e0>
 8015d86:	4b76      	ldr	r3, [pc, #472]	; (8015f60 <tcp_process+0x5ac>)
 8015d88:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8015d8c:	4975      	ldr	r1, [pc, #468]	; (8015f64 <tcp_process+0x5b0>)
 8015d8e:	4876      	ldr	r0, [pc, #472]	; (8015f68 <tcp_process+0x5b4>)
 8015d90:	f009 fd8c 	bl	801f8ac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d98:	699b      	ldr	r3, [r3, #24]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d00a      	beq.n	8015db4 <tcp_process+0x400>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015da2:	699b      	ldr	r3, [r3, #24]
 8015da4:	687a      	ldr	r2, [r7, #4]
 8015da6:	6910      	ldr	r0, [r2, #16]
 8015da8:	2200      	movs	r2, #0
 8015daa:	6879      	ldr	r1, [r7, #4]
 8015dac:	4798      	blx	r3
 8015dae:	4603      	mov	r3, r0
 8015db0:	76bb      	strb	r3, [r7, #26]
 8015db2:	e001      	b.n	8015db8 <tcp_process+0x404>
 8015db4:	23f0      	movs	r3, #240	; 0xf0
 8015db6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015db8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d00a      	beq.n	8015dd6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015dc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015dc4:	f113 0f0d 	cmn.w	r3, #13
 8015dc8:	d002      	beq.n	8015dd0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f7fd fcfe 	bl	80137cc <tcp_abort>
            }
            return ERR_ABRT;
 8015dd0:	f06f 030c 	mvn.w	r3, #12
 8015dd4:	e1ce      	b.n	8016174 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f000 fae0 	bl	801639c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015ddc:	4b63      	ldr	r3, [pc, #396]	; (8015f6c <tcp_process+0x5b8>)
 8015dde:	881b      	ldrh	r3, [r3, #0]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d005      	beq.n	8015df0 <tcp_process+0x43c>
            recv_acked--;
 8015de4:	4b61      	ldr	r3, [pc, #388]	; (8015f6c <tcp_process+0x5b8>)
 8015de6:	881b      	ldrh	r3, [r3, #0]
 8015de8:	3b01      	subs	r3, #1
 8015dea:	b29a      	uxth	r2, r3
 8015dec:	4b5f      	ldr	r3, [pc, #380]	; (8015f6c <tcp_process+0x5b8>)
 8015dee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015df4:	009a      	lsls	r2, r3, #2
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015dfa:	005b      	lsls	r3, r3, #1
 8015dfc:	f241 111c 	movw	r1, #4380	; 0x111c
 8015e00:	428b      	cmp	r3, r1
 8015e02:	bf38      	it	cc
 8015e04:	460b      	movcc	r3, r1
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d204      	bcs.n	8015e14 <tcp_process+0x460>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e0e:	009b      	lsls	r3, r3, #2
 8015e10:	b29b      	uxth	r3, r3
 8015e12:	e00d      	b.n	8015e30 <tcp_process+0x47c>
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e18:	005b      	lsls	r3, r3, #1
 8015e1a:	f241 121c 	movw	r2, #4380	; 0x111c
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	d904      	bls.n	8015e2c <tcp_process+0x478>
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015e26:	005b      	lsls	r3, r3, #1
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	e001      	b.n	8015e30 <tcp_process+0x47c>
 8015e2c:	f241 131c 	movw	r3, #4380	; 0x111c
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015e36:	4b4e      	ldr	r3, [pc, #312]	; (8015f70 <tcp_process+0x5bc>)
 8015e38:	781b      	ldrb	r3, [r3, #0]
 8015e3a:	f003 0320 	and.w	r3, r3, #32
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d037      	beq.n	8015eb2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	8b5b      	ldrh	r3, [r3, #26]
 8015e46:	f043 0302 	orr.w	r3, r3, #2
 8015e4a:	b29a      	uxth	r2, r3
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2207      	movs	r2, #7
 8015e54:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015e56:	e02c      	b.n	8015eb2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e58:	4b3b      	ldr	r3, [pc, #236]	; (8015f48 <tcp_process+0x594>)
 8015e5a:	6819      	ldr	r1, [r3, #0]
 8015e5c:	4b3b      	ldr	r3, [pc, #236]	; (8015f4c <tcp_process+0x598>)
 8015e5e:	881b      	ldrh	r3, [r3, #0]
 8015e60:	461a      	mov	r2, r3
 8015e62:	4b3b      	ldr	r3, [pc, #236]	; (8015f50 <tcp_process+0x59c>)
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e68:	4b3a      	ldr	r3, [pc, #232]	; (8015f54 <tcp_process+0x5a0>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e6c:	885b      	ldrh	r3, [r3, #2]
 8015e6e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e70:	4a38      	ldr	r2, [pc, #224]	; (8015f54 <tcp_process+0x5a0>)
 8015e72:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e74:	8812      	ldrh	r2, [r2, #0]
 8015e76:	b292      	uxth	r2, r2
 8015e78:	9202      	str	r2, [sp, #8]
 8015e7a:	9301      	str	r3, [sp, #4]
 8015e7c:	4b36      	ldr	r3, [pc, #216]	; (8015f58 <tcp_process+0x5a4>)
 8015e7e:	9300      	str	r3, [sp, #0]
 8015e80:	4b36      	ldr	r3, [pc, #216]	; (8015f5c <tcp_process+0x5a8>)
 8015e82:	4602      	mov	r2, r0
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f003 f829 	bl	8018edc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015e8a:	e167      	b.n	801615c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015e8c:	4b2d      	ldr	r3, [pc, #180]	; (8015f44 <tcp_process+0x590>)
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	f003 0302 	and.w	r3, r3, #2
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	f000 8161 	beq.w	801615c <tcp_process+0x7a8>
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e9e:	1e5a      	subs	r2, r3, #1
 8015ea0:	4b2b      	ldr	r3, [pc, #172]	; (8015f50 <tcp_process+0x59c>)
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	429a      	cmp	r2, r3
 8015ea6:	f040 8159 	bne.w	801615c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f002 fe10 	bl	8018ad0 <tcp_rexmit>
      break;
 8015eb0:	e154      	b.n	801615c <tcp_process+0x7a8>
 8015eb2:	e153      	b.n	801615c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f000 fa71 	bl	801639c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015eba:	4b2d      	ldr	r3, [pc, #180]	; (8015f70 <tcp_process+0x5bc>)
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	f003 0320 	and.w	r3, r3, #32
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	f000 814c 	beq.w	8016160 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	8b5b      	ldrh	r3, [r3, #26]
 8015ecc:	f043 0302 	orr.w	r3, r3, #2
 8015ed0:	b29a      	uxth	r2, r3
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2207      	movs	r2, #7
 8015eda:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015edc:	e140      	b.n	8016160 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f000 fa5c 	bl	801639c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015ee4:	4b22      	ldr	r3, [pc, #136]	; (8015f70 <tcp_process+0x5bc>)
 8015ee6:	781b      	ldrb	r3, [r3, #0]
 8015ee8:	f003 0320 	and.w	r3, r3, #32
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d071      	beq.n	8015fd4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015ef0:	4b14      	ldr	r3, [pc, #80]	; (8015f44 <tcp_process+0x590>)
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	f003 0310 	and.w	r3, r3, #16
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d060      	beq.n	8015fbe <tcp_process+0x60a>
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f00:	4b11      	ldr	r3, [pc, #68]	; (8015f48 <tcp_process+0x594>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	429a      	cmp	r2, r3
 8015f06:	d15a      	bne.n	8015fbe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d156      	bne.n	8015fbe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	8b5b      	ldrh	r3, [r3, #26]
 8015f14:	f043 0302 	orr.w	r3, r3, #2
 8015f18:	b29a      	uxth	r2, r3
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f7fe fdbc 	bl	8014a9c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015f24:	4b13      	ldr	r3, [pc, #76]	; (8015f74 <tcp_process+0x5c0>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	687a      	ldr	r2, [r7, #4]
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	d105      	bne.n	8015f3a <tcp_process+0x586>
 8015f2e:	4b11      	ldr	r3, [pc, #68]	; (8015f74 <tcp_process+0x5c0>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	68db      	ldr	r3, [r3, #12]
 8015f34:	4a0f      	ldr	r2, [pc, #60]	; (8015f74 <tcp_process+0x5c0>)
 8015f36:	6013      	str	r3, [r2, #0]
 8015f38:	e02e      	b.n	8015f98 <tcp_process+0x5e4>
 8015f3a:	4b0e      	ldr	r3, [pc, #56]	; (8015f74 <tcp_process+0x5c0>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	617b      	str	r3, [r7, #20]
 8015f40:	e027      	b.n	8015f92 <tcp_process+0x5de>
 8015f42:	bf00      	nop
 8015f44:	20010210 	.word	0x20010210
 8015f48:	20010208 	.word	0x20010208
 8015f4c:	2001020e 	.word	0x2001020e
 8015f50:	20010204 	.word	0x20010204
 8015f54:	200101f4 	.word	0x200101f4
 8015f58:	2000ca68 	.word	0x2000ca68
 8015f5c:	2000ca6c 	.word	0x2000ca6c
 8015f60:	08023468 	.word	0x08023468
 8015f64:	08023708 	.word	0x08023708
 8015f68:	080234b4 	.word	0x080234b4
 8015f6c:	2001020c 	.word	0x2001020c
 8015f70:	20010211 	.word	0x20010211
 8015f74:	200101d8 	.word	0x200101d8
 8015f78:	697b      	ldr	r3, [r7, #20]
 8015f7a:	68db      	ldr	r3, [r3, #12]
 8015f7c:	687a      	ldr	r2, [r7, #4]
 8015f7e:	429a      	cmp	r2, r3
 8015f80:	d104      	bne.n	8015f8c <tcp_process+0x5d8>
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	68da      	ldr	r2, [r3, #12]
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	60da      	str	r2, [r3, #12]
 8015f8a:	e005      	b.n	8015f98 <tcp_process+0x5e4>
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	617b      	str	r3, [r7, #20]
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d1ef      	bne.n	8015f78 <tcp_process+0x5c4>
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	60da      	str	r2, [r3, #12]
 8015f9e:	4b77      	ldr	r3, [pc, #476]	; (801617c <tcp_process+0x7c8>)
 8015fa0:	2201      	movs	r2, #1
 8015fa2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	220a      	movs	r2, #10
 8015fa8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015faa:	4b75      	ldr	r3, [pc, #468]	; (8016180 <tcp_process+0x7cc>)
 8015fac:	681a      	ldr	r2, [r3, #0]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	60da      	str	r2, [r3, #12]
 8015fb2:	4a73      	ldr	r2, [pc, #460]	; (8016180 <tcp_process+0x7cc>)
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6013      	str	r3, [r2, #0]
 8015fb8:	f003 f952 	bl	8019260 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015fbc:	e0d2      	b.n	8016164 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	8b5b      	ldrh	r3, [r3, #26]
 8015fc2:	f043 0302 	orr.w	r3, r3, #2
 8015fc6:	b29a      	uxth	r2, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2208      	movs	r2, #8
 8015fd0:	751a      	strb	r2, [r3, #20]
      break;
 8015fd2:	e0c7      	b.n	8016164 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015fd4:	4b6b      	ldr	r3, [pc, #428]	; (8016184 <tcp_process+0x7d0>)
 8015fd6:	781b      	ldrb	r3, [r3, #0]
 8015fd8:	f003 0310 	and.w	r3, r3, #16
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	f000 80c1 	beq.w	8016164 <tcp_process+0x7b0>
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015fe6:	4b68      	ldr	r3, [pc, #416]	; (8016188 <tcp_process+0x7d4>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	429a      	cmp	r2, r3
 8015fec:	f040 80ba 	bne.w	8016164 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	f040 80b5 	bne.w	8016164 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2206      	movs	r2, #6
 8015ffe:	751a      	strb	r2, [r3, #20]
      break;
 8016000:	e0b0      	b.n	8016164 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f000 f9ca 	bl	801639c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016008:	4b60      	ldr	r3, [pc, #384]	; (801618c <tcp_process+0x7d8>)
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	f003 0320 	and.w	r3, r3, #32
 8016010:	2b00      	cmp	r3, #0
 8016012:	f000 80a9 	beq.w	8016168 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	8b5b      	ldrh	r3, [r3, #26]
 801601a:	f043 0302 	orr.w	r3, r3, #2
 801601e:	b29a      	uxth	r2, r3
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f7fe fd39 	bl	8014a9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801602a:	4b59      	ldr	r3, [pc, #356]	; (8016190 <tcp_process+0x7dc>)
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	687a      	ldr	r2, [r7, #4]
 8016030:	429a      	cmp	r2, r3
 8016032:	d105      	bne.n	8016040 <tcp_process+0x68c>
 8016034:	4b56      	ldr	r3, [pc, #344]	; (8016190 <tcp_process+0x7dc>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	68db      	ldr	r3, [r3, #12]
 801603a:	4a55      	ldr	r2, [pc, #340]	; (8016190 <tcp_process+0x7dc>)
 801603c:	6013      	str	r3, [r2, #0]
 801603e:	e013      	b.n	8016068 <tcp_process+0x6b4>
 8016040:	4b53      	ldr	r3, [pc, #332]	; (8016190 <tcp_process+0x7dc>)
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	613b      	str	r3, [r7, #16]
 8016046:	e00c      	b.n	8016062 <tcp_process+0x6ae>
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	68db      	ldr	r3, [r3, #12]
 801604c:	687a      	ldr	r2, [r7, #4]
 801604e:	429a      	cmp	r2, r3
 8016050:	d104      	bne.n	801605c <tcp_process+0x6a8>
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	68da      	ldr	r2, [r3, #12]
 8016056:	693b      	ldr	r3, [r7, #16]
 8016058:	60da      	str	r2, [r3, #12]
 801605a:	e005      	b.n	8016068 <tcp_process+0x6b4>
 801605c:	693b      	ldr	r3, [r7, #16]
 801605e:	68db      	ldr	r3, [r3, #12]
 8016060:	613b      	str	r3, [r7, #16]
 8016062:	693b      	ldr	r3, [r7, #16]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d1ef      	bne.n	8016048 <tcp_process+0x694>
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	2200      	movs	r2, #0
 801606c:	60da      	str	r2, [r3, #12]
 801606e:	4b43      	ldr	r3, [pc, #268]	; (801617c <tcp_process+0x7c8>)
 8016070:	2201      	movs	r2, #1
 8016072:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	220a      	movs	r2, #10
 8016078:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801607a:	4b41      	ldr	r3, [pc, #260]	; (8016180 <tcp_process+0x7cc>)
 801607c:	681a      	ldr	r2, [r3, #0]
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	60da      	str	r2, [r3, #12]
 8016082:	4a3f      	ldr	r2, [pc, #252]	; (8016180 <tcp_process+0x7cc>)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	6013      	str	r3, [r2, #0]
 8016088:	f003 f8ea 	bl	8019260 <tcp_timer_needed>
      }
      break;
 801608c:	e06c      	b.n	8016168 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f000 f984 	bl	801639c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016094:	4b3b      	ldr	r3, [pc, #236]	; (8016184 <tcp_process+0x7d0>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	f003 0310 	and.w	r3, r3, #16
 801609c:	2b00      	cmp	r3, #0
 801609e:	d065      	beq.n	801616c <tcp_process+0x7b8>
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80160a4:	4b38      	ldr	r3, [pc, #224]	; (8016188 <tcp_process+0x7d4>)
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d15f      	bne.n	801616c <tcp_process+0x7b8>
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d15b      	bne.n	801616c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f7fe fcf1 	bl	8014a9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80160ba:	4b35      	ldr	r3, [pc, #212]	; (8016190 <tcp_process+0x7dc>)
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	687a      	ldr	r2, [r7, #4]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d105      	bne.n	80160d0 <tcp_process+0x71c>
 80160c4:	4b32      	ldr	r3, [pc, #200]	; (8016190 <tcp_process+0x7dc>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	68db      	ldr	r3, [r3, #12]
 80160ca:	4a31      	ldr	r2, [pc, #196]	; (8016190 <tcp_process+0x7dc>)
 80160cc:	6013      	str	r3, [r2, #0]
 80160ce:	e013      	b.n	80160f8 <tcp_process+0x744>
 80160d0:	4b2f      	ldr	r3, [pc, #188]	; (8016190 <tcp_process+0x7dc>)
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	60fb      	str	r3, [r7, #12]
 80160d6:	e00c      	b.n	80160f2 <tcp_process+0x73e>
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	68db      	ldr	r3, [r3, #12]
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	429a      	cmp	r2, r3
 80160e0:	d104      	bne.n	80160ec <tcp_process+0x738>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	68da      	ldr	r2, [r3, #12]
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	60da      	str	r2, [r3, #12]
 80160ea:	e005      	b.n	80160f8 <tcp_process+0x744>
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	68db      	ldr	r3, [r3, #12]
 80160f0:	60fb      	str	r3, [r7, #12]
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d1ef      	bne.n	80160d8 <tcp_process+0x724>
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2200      	movs	r2, #0
 80160fc:	60da      	str	r2, [r3, #12]
 80160fe:	4b1f      	ldr	r3, [pc, #124]	; (801617c <tcp_process+0x7c8>)
 8016100:	2201      	movs	r2, #1
 8016102:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	220a      	movs	r2, #10
 8016108:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801610a:	4b1d      	ldr	r3, [pc, #116]	; (8016180 <tcp_process+0x7cc>)
 801610c:	681a      	ldr	r2, [r3, #0]
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	60da      	str	r2, [r3, #12]
 8016112:	4a1b      	ldr	r2, [pc, #108]	; (8016180 <tcp_process+0x7cc>)
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	6013      	str	r3, [r2, #0]
 8016118:	f003 f8a2 	bl	8019260 <tcp_timer_needed>
      }
      break;
 801611c:	e026      	b.n	801616c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f000 f93c 	bl	801639c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016124:	4b17      	ldr	r3, [pc, #92]	; (8016184 <tcp_process+0x7d0>)
 8016126:	781b      	ldrb	r3, [r3, #0]
 8016128:	f003 0310 	and.w	r3, r3, #16
 801612c:	2b00      	cmp	r3, #0
 801612e:	d01f      	beq.n	8016170 <tcp_process+0x7bc>
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016134:	4b14      	ldr	r3, [pc, #80]	; (8016188 <tcp_process+0x7d4>)
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	429a      	cmp	r2, r3
 801613a:	d119      	bne.n	8016170 <tcp_process+0x7bc>
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016140:	2b00      	cmp	r3, #0
 8016142:	d115      	bne.n	8016170 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016144:	4b11      	ldr	r3, [pc, #68]	; (801618c <tcp_process+0x7d8>)
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	f043 0310 	orr.w	r3, r3, #16
 801614c:	b2da      	uxtb	r2, r3
 801614e:	4b0f      	ldr	r3, [pc, #60]	; (801618c <tcp_process+0x7d8>)
 8016150:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016152:	e00d      	b.n	8016170 <tcp_process+0x7bc>
    default:
      break;
 8016154:	bf00      	nop
 8016156:	e00c      	b.n	8016172 <tcp_process+0x7be>
      break;
 8016158:	bf00      	nop
 801615a:	e00a      	b.n	8016172 <tcp_process+0x7be>
      break;
 801615c:	bf00      	nop
 801615e:	e008      	b.n	8016172 <tcp_process+0x7be>
      break;
 8016160:	bf00      	nop
 8016162:	e006      	b.n	8016172 <tcp_process+0x7be>
      break;
 8016164:	bf00      	nop
 8016166:	e004      	b.n	8016172 <tcp_process+0x7be>
      break;
 8016168:	bf00      	nop
 801616a:	e002      	b.n	8016172 <tcp_process+0x7be>
      break;
 801616c:	bf00      	nop
 801616e:	e000      	b.n	8016172 <tcp_process+0x7be>
      break;
 8016170:	bf00      	nop
  }
  return ERR_OK;
 8016172:	2300      	movs	r3, #0
}
 8016174:	4618      	mov	r0, r3
 8016176:	3724      	adds	r7, #36	; 0x24
 8016178:	46bd      	mov	sp, r7
 801617a:	bd90      	pop	{r4, r7, pc}
 801617c:	200101e0 	.word	0x200101e0
 8016180:	200101dc 	.word	0x200101dc
 8016184:	20010210 	.word	0x20010210
 8016188:	20010208 	.word	0x20010208
 801618c:	20010211 	.word	0x20010211
 8016190:	200101d8 	.word	0x200101d8

08016194 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016194:	b590      	push	{r4, r7, lr}
 8016196:	b085      	sub	sp, #20
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d106      	bne.n	80161b2 <tcp_oos_insert_segment+0x1e>
 80161a4:	4b3b      	ldr	r3, [pc, #236]	; (8016294 <tcp_oos_insert_segment+0x100>)
 80161a6:	f240 421f 	movw	r2, #1055	; 0x41f
 80161aa:	493b      	ldr	r1, [pc, #236]	; (8016298 <tcp_oos_insert_segment+0x104>)
 80161ac:	483b      	ldr	r0, [pc, #236]	; (801629c <tcp_oos_insert_segment+0x108>)
 80161ae:	f009 fb7d 	bl	801f8ac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	68db      	ldr	r3, [r3, #12]
 80161b6:	899b      	ldrh	r3, [r3, #12]
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	4618      	mov	r0, r3
 80161bc:	f7fb f8d0 	bl	8011360 <lwip_htons>
 80161c0:	4603      	mov	r3, r0
 80161c2:	b2db      	uxtb	r3, r3
 80161c4:	f003 0301 	and.w	r3, r3, #1
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d028      	beq.n	801621e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80161cc:	6838      	ldr	r0, [r7, #0]
 80161ce:	f7fe f995 	bl	80144fc <tcp_segs_free>
    next = NULL;
 80161d2:	2300      	movs	r3, #0
 80161d4:	603b      	str	r3, [r7, #0]
 80161d6:	e056      	b.n	8016286 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	68db      	ldr	r3, [r3, #12]
 80161dc:	899b      	ldrh	r3, [r3, #12]
 80161de:	b29b      	uxth	r3, r3
 80161e0:	4618      	mov	r0, r3
 80161e2:	f7fb f8bd 	bl	8011360 <lwip_htons>
 80161e6:	4603      	mov	r3, r0
 80161e8:	b2db      	uxtb	r3, r3
 80161ea:	f003 0301 	and.w	r3, r3, #1
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d00d      	beq.n	801620e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	68db      	ldr	r3, [r3, #12]
 80161f6:	899b      	ldrh	r3, [r3, #12]
 80161f8:	b29c      	uxth	r4, r3
 80161fa:	2001      	movs	r0, #1
 80161fc:	f7fb f8b0 	bl	8011360 <lwip_htons>
 8016200:	4603      	mov	r3, r0
 8016202:	461a      	mov	r2, r3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	68db      	ldr	r3, [r3, #12]
 8016208:	4322      	orrs	r2, r4
 801620a:	b292      	uxth	r2, r2
 801620c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016218:	68f8      	ldr	r0, [r7, #12]
 801621a:	f7fe f984 	bl	8014526 <tcp_seg_free>
    while (next &&
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d00e      	beq.n	8016242 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	891b      	ldrh	r3, [r3, #8]
 8016228:	461a      	mov	r2, r3
 801622a:	4b1d      	ldr	r3, [pc, #116]	; (80162a0 <tcp_oos_insert_segment+0x10c>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	441a      	add	r2, r3
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	68db      	ldr	r3, [r3, #12]
 8016234:	685b      	ldr	r3, [r3, #4]
 8016236:	6839      	ldr	r1, [r7, #0]
 8016238:	8909      	ldrh	r1, [r1, #8]
 801623a:	440b      	add	r3, r1
 801623c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801623e:	2b00      	cmp	r3, #0
 8016240:	daca      	bge.n	80161d8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d01e      	beq.n	8016286 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	891b      	ldrh	r3, [r3, #8]
 801624c:	461a      	mov	r2, r3
 801624e:	4b14      	ldr	r3, [pc, #80]	; (80162a0 <tcp_oos_insert_segment+0x10c>)
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	441a      	add	r2, r3
 8016254:	683b      	ldr	r3, [r7, #0]
 8016256:	68db      	ldr	r3, [r3, #12]
 8016258:	685b      	ldr	r3, [r3, #4]
 801625a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801625c:	2b00      	cmp	r3, #0
 801625e:	dd12      	ble.n	8016286 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	68db      	ldr	r3, [r3, #12]
 8016264:	685b      	ldr	r3, [r3, #4]
 8016266:	b29a      	uxth	r2, r3
 8016268:	4b0d      	ldr	r3, [pc, #52]	; (80162a0 <tcp_oos_insert_segment+0x10c>)
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	b29b      	uxth	r3, r3
 801626e:	1ad3      	subs	r3, r2, r3
 8016270:	b29a      	uxth	r2, r3
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	685a      	ldr	r2, [r3, #4]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	891b      	ldrh	r3, [r3, #8]
 801627e:	4619      	mov	r1, r3
 8016280:	4610      	mov	r0, r2
 8016282:	f7fc fb1d 	bl	80128c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	683a      	ldr	r2, [r7, #0]
 801628a:	601a      	str	r2, [r3, #0]
}
 801628c:	bf00      	nop
 801628e:	3714      	adds	r7, #20
 8016290:	46bd      	mov	sp, r7
 8016292:	bd90      	pop	{r4, r7, pc}
 8016294:	08023468 	.word	0x08023468
 8016298:	08023728 	.word	0x08023728
 801629c:	080234b4 	.word	0x080234b4
 80162a0:	20010204 	.word	0x20010204

080162a4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80162a4:	b5b0      	push	{r4, r5, r7, lr}
 80162a6:	b086      	sub	sp, #24
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	607a      	str	r2, [r7, #4]
 80162b0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80162b2:	e03e      	b.n	8016332 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7fc fd10 	bl	8012ce8 <pbuf_clen>
 80162c8:	4603      	mov	r3, r0
 80162ca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80162d2:	8a7a      	ldrh	r2, [r7, #18]
 80162d4:	429a      	cmp	r2, r3
 80162d6:	d906      	bls.n	80162e6 <tcp_free_acked_segments+0x42>
 80162d8:	4b2a      	ldr	r3, [pc, #168]	; (8016384 <tcp_free_acked_segments+0xe0>)
 80162da:	f240 4257 	movw	r2, #1111	; 0x457
 80162de:	492a      	ldr	r1, [pc, #168]	; (8016388 <tcp_free_acked_segments+0xe4>)
 80162e0:	482a      	ldr	r0, [pc, #168]	; (801638c <tcp_free_acked_segments+0xe8>)
 80162e2:	f009 fae3 	bl	801f8ac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80162ec:	8a7b      	ldrh	r3, [r7, #18]
 80162ee:	1ad3      	subs	r3, r2, r3
 80162f0:	b29a      	uxth	r2, r3
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	891a      	ldrh	r2, [r3, #8]
 80162fc:	4b24      	ldr	r3, [pc, #144]	; (8016390 <tcp_free_acked_segments+0xec>)
 80162fe:	881b      	ldrh	r3, [r3, #0]
 8016300:	4413      	add	r3, r2
 8016302:	b29a      	uxth	r2, r3
 8016304:	4b22      	ldr	r3, [pc, #136]	; (8016390 <tcp_free_acked_segments+0xec>)
 8016306:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016308:	6978      	ldr	r0, [r7, #20]
 801630a:	f7fe f90c 	bl	8014526 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016314:	2b00      	cmp	r3, #0
 8016316:	d00c      	beq.n	8016332 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d109      	bne.n	8016332 <tcp_free_acked_segments+0x8e>
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d106      	bne.n	8016332 <tcp_free_acked_segments+0x8e>
 8016324:	4b17      	ldr	r3, [pc, #92]	; (8016384 <tcp_free_acked_segments+0xe0>)
 8016326:	f240 4261 	movw	r2, #1121	; 0x461
 801632a:	491a      	ldr	r1, [pc, #104]	; (8016394 <tcp_free_acked_segments+0xf0>)
 801632c:	4817      	ldr	r0, [pc, #92]	; (801638c <tcp_free_acked_segments+0xe8>)
 801632e:	f009 fabd 	bl	801f8ac <iprintf>
  while (seg_list != NULL &&
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d020      	beq.n	801637a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	68db      	ldr	r3, [r3, #12]
 801633c:	685b      	ldr	r3, [r3, #4]
 801633e:	4618      	mov	r0, r3
 8016340:	f7fb f823 	bl	801138a <lwip_htonl>
 8016344:	4604      	mov	r4, r0
 8016346:	68bb      	ldr	r3, [r7, #8]
 8016348:	891b      	ldrh	r3, [r3, #8]
 801634a:	461d      	mov	r5, r3
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	68db      	ldr	r3, [r3, #12]
 8016350:	899b      	ldrh	r3, [r3, #12]
 8016352:	b29b      	uxth	r3, r3
 8016354:	4618      	mov	r0, r3
 8016356:	f7fb f803 	bl	8011360 <lwip_htons>
 801635a:	4603      	mov	r3, r0
 801635c:	b2db      	uxtb	r3, r3
 801635e:	f003 0303 	and.w	r3, r3, #3
 8016362:	2b00      	cmp	r3, #0
 8016364:	d001      	beq.n	801636a <tcp_free_acked_segments+0xc6>
 8016366:	2301      	movs	r3, #1
 8016368:	e000      	b.n	801636c <tcp_free_acked_segments+0xc8>
 801636a:	2300      	movs	r3, #0
 801636c:	442b      	add	r3, r5
 801636e:	18e2      	adds	r2, r4, r3
 8016370:	4b09      	ldr	r3, [pc, #36]	; (8016398 <tcp_free_acked_segments+0xf4>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016376:	2b00      	cmp	r3, #0
 8016378:	dd9c      	ble.n	80162b4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801637a:	68bb      	ldr	r3, [r7, #8]
}
 801637c:	4618      	mov	r0, r3
 801637e:	3718      	adds	r7, #24
 8016380:	46bd      	mov	sp, r7
 8016382:	bdb0      	pop	{r4, r5, r7, pc}
 8016384:	08023468 	.word	0x08023468
 8016388:	08023750 	.word	0x08023750
 801638c:	080234b4 	.word	0x080234b4
 8016390:	2001020c 	.word	0x2001020c
 8016394:	08023778 	.word	0x08023778
 8016398:	20010208 	.word	0x20010208

0801639c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801639c:	b5b0      	push	{r4, r5, r7, lr}
 801639e:	b094      	sub	sp, #80	; 0x50
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80163a4:	2300      	movs	r3, #0
 80163a6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d106      	bne.n	80163bc <tcp_receive+0x20>
 80163ae:	4b91      	ldr	r3, [pc, #580]	; (80165f4 <tcp_receive+0x258>)
 80163b0:	f240 427b 	movw	r2, #1147	; 0x47b
 80163b4:	4990      	ldr	r1, [pc, #576]	; (80165f8 <tcp_receive+0x25c>)
 80163b6:	4891      	ldr	r0, [pc, #580]	; (80165fc <tcp_receive+0x260>)
 80163b8:	f009 fa78 	bl	801f8ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	7d1b      	ldrb	r3, [r3, #20]
 80163c0:	2b03      	cmp	r3, #3
 80163c2:	d806      	bhi.n	80163d2 <tcp_receive+0x36>
 80163c4:	4b8b      	ldr	r3, [pc, #556]	; (80165f4 <tcp_receive+0x258>)
 80163c6:	f240 427c 	movw	r2, #1148	; 0x47c
 80163ca:	498d      	ldr	r1, [pc, #564]	; (8016600 <tcp_receive+0x264>)
 80163cc:	488b      	ldr	r0, [pc, #556]	; (80165fc <tcp_receive+0x260>)
 80163ce:	f009 fa6d 	bl	801f8ac <iprintf>

  if (flags & TCP_ACK) {
 80163d2:	4b8c      	ldr	r3, [pc, #560]	; (8016604 <tcp_receive+0x268>)
 80163d4:	781b      	ldrb	r3, [r3, #0]
 80163d6:	f003 0310 	and.w	r3, r3, #16
 80163da:	2b00      	cmp	r3, #0
 80163dc:	f000 8264 	beq.w	80168a8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80163e6:	461a      	mov	r2, r3
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163ec:	4413      	add	r3, r2
 80163ee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80163f4:	4b84      	ldr	r3, [pc, #528]	; (8016608 <tcp_receive+0x26c>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	1ad3      	subs	r3, r2, r3
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	db1b      	blt.n	8016436 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016402:	4b81      	ldr	r3, [pc, #516]	; (8016608 <tcp_receive+0x26c>)
 8016404:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016406:	429a      	cmp	r2, r3
 8016408:	d106      	bne.n	8016418 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801640e:	4b7f      	ldr	r3, [pc, #508]	; (801660c <tcp_receive+0x270>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	1ad3      	subs	r3, r2, r3
 8016414:	2b00      	cmp	r3, #0
 8016416:	db0e      	blt.n	8016436 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801641c:	4b7b      	ldr	r3, [pc, #492]	; (801660c <tcp_receive+0x270>)
 801641e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016420:	429a      	cmp	r2, r3
 8016422:	d125      	bne.n	8016470 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016424:	4b7a      	ldr	r3, [pc, #488]	; (8016610 <tcp_receive+0x274>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	89db      	ldrh	r3, [r3, #14]
 801642a:	b29a      	uxth	r2, r3
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016432:	429a      	cmp	r2, r3
 8016434:	d91c      	bls.n	8016470 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016436:	4b76      	ldr	r3, [pc, #472]	; (8016610 <tcp_receive+0x274>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	89db      	ldrh	r3, [r3, #14]
 801643c:	b29a      	uxth	r2, r3
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016450:	429a      	cmp	r2, r3
 8016452:	d205      	bcs.n	8016460 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016460:	4b69      	ldr	r3, [pc, #420]	; (8016608 <tcp_receive+0x26c>)
 8016462:	681a      	ldr	r2, [r3, #0]
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016468:	4b68      	ldr	r3, [pc, #416]	; (801660c <tcp_receive+0x270>)
 801646a:	681a      	ldr	r2, [r3, #0]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016470:	4b66      	ldr	r3, [pc, #408]	; (801660c <tcp_receive+0x270>)
 8016472:	681a      	ldr	r2, [r3, #0]
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016478:	1ad3      	subs	r3, r2, r3
 801647a:	2b00      	cmp	r3, #0
 801647c:	dc58      	bgt.n	8016530 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801647e:	4b65      	ldr	r3, [pc, #404]	; (8016614 <tcp_receive+0x278>)
 8016480:	881b      	ldrh	r3, [r3, #0]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d14b      	bne.n	801651e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801648a:	687a      	ldr	r2, [r7, #4]
 801648c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016490:	4413      	add	r3, r2
 8016492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016494:	429a      	cmp	r2, r3
 8016496:	d142      	bne.n	801651e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801649e:	2b00      	cmp	r3, #0
 80164a0:	db3d      	blt.n	801651e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80164a6:	4b59      	ldr	r3, [pc, #356]	; (801660c <tcp_receive+0x270>)
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d137      	bne.n	801651e <tcp_receive+0x182>
              found_dupack = 1;
 80164ae:	2301      	movs	r3, #1
 80164b0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80164b8:	2bff      	cmp	r3, #255	; 0xff
 80164ba:	d007      	beq.n	80164cc <tcp_receive+0x130>
                ++pcb->dupacks;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80164c2:	3301      	adds	r3, #1
 80164c4:	b2da      	uxtb	r2, r3
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80164d2:	2b03      	cmp	r3, #3
 80164d4:	d91b      	bls.n	801650e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80164e0:	4413      	add	r3, r2
 80164e2:	b29a      	uxth	r2, r3
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80164ea:	429a      	cmp	r2, r3
 80164ec:	d30a      	bcc.n	8016504 <tcp_receive+0x168>
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80164f8:	4413      	add	r3, r2
 80164fa:	b29a      	uxth	r2, r3
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016502:	e004      	b.n	801650e <tcp_receive+0x172>
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801650a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016514:	2b02      	cmp	r3, #2
 8016516:	d902      	bls.n	801651e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016518:	6878      	ldr	r0, [r7, #4]
 801651a:	f002 fb45 	bl	8018ba8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801651e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016520:	2b00      	cmp	r3, #0
 8016522:	f040 8161 	bne.w	80167e8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	2200      	movs	r2, #0
 801652a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801652e:	e15b      	b.n	80167e8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016530:	4b36      	ldr	r3, [pc, #216]	; (801660c <tcp_receive+0x270>)
 8016532:	681a      	ldr	r2, [r3, #0]
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016538:	1ad3      	subs	r3, r2, r3
 801653a:	3b01      	subs	r3, #1
 801653c:	2b00      	cmp	r3, #0
 801653e:	f2c0 814e 	blt.w	80167de <tcp_receive+0x442>
 8016542:	4b32      	ldr	r3, [pc, #200]	; (801660c <tcp_receive+0x270>)
 8016544:	681a      	ldr	r2, [r3, #0]
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801654a:	1ad3      	subs	r3, r2, r3
 801654c:	2b00      	cmp	r3, #0
 801654e:	f300 8146 	bgt.w	80167de <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	8b5b      	ldrh	r3, [r3, #26]
 8016556:	f003 0304 	and.w	r3, r3, #4
 801655a:	2b00      	cmp	r3, #0
 801655c:	d010      	beq.n	8016580 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	8b5b      	ldrh	r3, [r3, #26]
 8016562:	f023 0304 	bic.w	r3, r3, #4
 8016566:	b29a      	uxth	r2, r3
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2200      	movs	r2, #0
 801657c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2200      	movs	r2, #0
 8016584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801658e:	10db      	asrs	r3, r3, #3
 8016590:	b21b      	sxth	r3, r3
 8016592:	b29a      	uxth	r2, r3
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801659a:	b29b      	uxth	r3, r3
 801659c:	4413      	add	r3, r2
 801659e:	b29b      	uxth	r3, r3
 80165a0:	b21a      	sxth	r2, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80165a8:	4b18      	ldr	r3, [pc, #96]	; (801660c <tcp_receive+0x270>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	b29a      	uxth	r2, r3
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165b2:	b29b      	uxth	r3, r3
 80165b4:	1ad3      	subs	r3, r2, r3
 80165b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2200      	movs	r2, #0
 80165bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80165c0:	4b12      	ldr	r3, [pc, #72]	; (801660c <tcp_receive+0x270>)
 80165c2:	681a      	ldr	r2, [r3, #0]
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	7d1b      	ldrb	r3, [r3, #20]
 80165cc:	2b03      	cmp	r3, #3
 80165ce:	f240 8097 	bls.w	8016700 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80165de:	429a      	cmp	r2, r3
 80165e0:	d245      	bcs.n	801666e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	8b5b      	ldrh	r3, [r3, #26]
 80165e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d014      	beq.n	8016618 <tcp_receive+0x27c>
 80165ee:	2301      	movs	r3, #1
 80165f0:	e013      	b.n	801661a <tcp_receive+0x27e>
 80165f2:	bf00      	nop
 80165f4:	08023468 	.word	0x08023468
 80165f8:	08023798 	.word	0x08023798
 80165fc:	080234b4 	.word	0x080234b4
 8016600:	080237b4 	.word	0x080237b4
 8016604:	20010210 	.word	0x20010210
 8016608:	20010204 	.word	0x20010204
 801660c:	20010208 	.word	0x20010208
 8016610:	200101f4 	.word	0x200101f4
 8016614:	2001020e 	.word	0x2001020e
 8016618:	2302      	movs	r3, #2
 801661a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801661e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016622:	b29a      	uxth	r2, r3
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016628:	fb12 f303 	smulbb	r3, r2, r3
 801662c:	b29b      	uxth	r3, r3
 801662e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016630:	4293      	cmp	r3, r2
 8016632:	bf28      	it	cs
 8016634:	4613      	movcs	r3, r2
 8016636:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801663e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016640:	4413      	add	r3, r2
 8016642:	b29a      	uxth	r2, r3
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801664a:	429a      	cmp	r2, r3
 801664c:	d309      	bcc.n	8016662 <tcp_receive+0x2c6>
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016654:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016656:	4413      	add	r3, r2
 8016658:	b29a      	uxth	r2, r3
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016660:	e04e      	b.n	8016700 <tcp_receive+0x364>
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016668:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801666c:	e048      	b.n	8016700 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016674:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016676:	4413      	add	r3, r2
 8016678:	b29a      	uxth	r2, r3
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8016680:	429a      	cmp	r2, r3
 8016682:	d309      	bcc.n	8016698 <tcp_receive+0x2fc>
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801668a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801668c:	4413      	add	r3, r2
 801668e:	b29a      	uxth	r2, r3
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016696:	e004      	b.n	80166a2 <tcp_receive+0x306>
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801669e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d326      	bcc.n	8016700 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80166be:	1ad3      	subs	r3, r2, r3
 80166c0:	b29a      	uxth	r2, r3
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166d2:	4413      	add	r3, r2
 80166d4:	b29a      	uxth	r2, r3
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80166dc:	429a      	cmp	r2, r3
 80166de:	d30a      	bcc.n	80166f6 <tcp_receive+0x35a>
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166ea:	4413      	add	r3, r2
 80166ec:	b29a      	uxth	r2, r3
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80166f4:	e004      	b.n	8016700 <tcp_receive+0x364>
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80166fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016708:	4a98      	ldr	r2, [pc, #608]	; (801696c <tcp_receive+0x5d0>)
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f7ff fdca 	bl	80162a4 <tcp_free_acked_segments>
 8016710:	4602      	mov	r2, r0
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801671e:	4a94      	ldr	r2, [pc, #592]	; (8016970 <tcp_receive+0x5d4>)
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f7ff fdbf 	bl	80162a4 <tcp_free_acked_segments>
 8016726:	4602      	mov	r2, r0
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016730:	2b00      	cmp	r3, #0
 8016732:	d104      	bne.n	801673e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801673a:	861a      	strh	r2, [r3, #48]	; 0x30
 801673c:	e002      	b.n	8016744 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	2200      	movs	r2, #0
 8016742:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2200      	movs	r2, #0
 8016748:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801674e:	2b00      	cmp	r3, #0
 8016750:	d103      	bne.n	801675a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	2200      	movs	r2, #0
 8016756:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016760:	4b84      	ldr	r3, [pc, #528]	; (8016974 <tcp_receive+0x5d8>)
 8016762:	881b      	ldrh	r3, [r3, #0]
 8016764:	4413      	add	r3, r2
 8016766:	b29a      	uxth	r2, r3
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	8b5b      	ldrh	r3, [r3, #26]
 8016772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016776:	2b00      	cmp	r3, #0
 8016778:	d035      	beq.n	80167e6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801677e:	2b00      	cmp	r3, #0
 8016780:	d118      	bne.n	80167b4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016786:	2b00      	cmp	r3, #0
 8016788:	d00c      	beq.n	80167a4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016792:	68db      	ldr	r3, [r3, #12]
 8016794:	685b      	ldr	r3, [r3, #4]
 8016796:	4618      	mov	r0, r3
 8016798:	f7fa fdf7 	bl	801138a <lwip_htonl>
 801679c:	4603      	mov	r3, r0
 801679e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	dc20      	bgt.n	80167e6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	8b5b      	ldrh	r3, [r3, #26]
 80167a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80167ac:	b29a      	uxth	r2, r3
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80167b2:	e018      	b.n	80167e6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167bc:	68db      	ldr	r3, [r3, #12]
 80167be:	685b      	ldr	r3, [r3, #4]
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7fa fde2 	bl	801138a <lwip_htonl>
 80167c6:	4603      	mov	r3, r0
 80167c8:	1ae3      	subs	r3, r4, r3
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	dc0b      	bgt.n	80167e6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	8b5b      	ldrh	r3, [r3, #26]
 80167d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80167d6:	b29a      	uxth	r2, r3
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80167dc:	e003      	b.n	80167e6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80167de:	6878      	ldr	r0, [r7, #4]
 80167e0:	f002 fbce 	bl	8018f80 <tcp_send_empty_ack>
 80167e4:	e000      	b.n	80167e8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80167e6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d05b      	beq.n	80168a8 <tcp_receive+0x50c>
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80167f4:	4b60      	ldr	r3, [pc, #384]	; (8016978 <tcp_receive+0x5dc>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	1ad3      	subs	r3, r2, r3
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	da54      	bge.n	80168a8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80167fe:	4b5f      	ldr	r3, [pc, #380]	; (801697c <tcp_receive+0x5e0>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	b29a      	uxth	r2, r3
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016808:	b29b      	uxth	r3, r3
 801680a:	1ad3      	subs	r3, r2, r3
 801680c:	b29b      	uxth	r3, r3
 801680e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016812:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801681c:	10db      	asrs	r3, r3, #3
 801681e:	b21b      	sxth	r3, r3
 8016820:	b29b      	uxth	r3, r3
 8016822:	1ad3      	subs	r3, r2, r3
 8016824:	b29b      	uxth	r3, r3
 8016826:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016830:	b29a      	uxth	r2, r3
 8016832:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016836:	4413      	add	r3, r2
 8016838:	b29b      	uxth	r3, r3
 801683a:	b21a      	sxth	r2, r3
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016840:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016844:	2b00      	cmp	r3, #0
 8016846:	da05      	bge.n	8016854 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016848:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801684c:	425b      	negs	r3, r3
 801684e:	b29b      	uxth	r3, r3
 8016850:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016854:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801685e:	109b      	asrs	r3, r3, #2
 8016860:	b21b      	sxth	r3, r3
 8016862:	b29b      	uxth	r3, r3
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	b29b      	uxth	r3, r3
 8016868:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016872:	b29a      	uxth	r2, r3
 8016874:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016878:	4413      	add	r3, r2
 801687a:	b29b      	uxth	r3, r3
 801687c:	b21a      	sxth	r2, r3
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016888:	10db      	asrs	r3, r3, #3
 801688a:	b21b      	sxth	r3, r3
 801688c:	b29a      	uxth	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016894:	b29b      	uxth	r3, r3
 8016896:	4413      	add	r3, r2
 8016898:	b29b      	uxth	r3, r3
 801689a:	b21a      	sxth	r2, r3
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	2200      	movs	r2, #0
 80168a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80168a8:	4b35      	ldr	r3, [pc, #212]	; (8016980 <tcp_receive+0x5e4>)
 80168aa:	881b      	ldrh	r3, [r3, #0]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	f000 84e2 	beq.w	8017276 <tcp_receive+0xeda>
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	7d1b      	ldrb	r3, [r3, #20]
 80168b6:	2b06      	cmp	r3, #6
 80168b8:	f200 84dd 	bhi.w	8017276 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80168c0:	4b30      	ldr	r3, [pc, #192]	; (8016984 <tcp_receive+0x5e8>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	1ad3      	subs	r3, r2, r3
 80168c6:	3b01      	subs	r3, #1
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	f2c0 808f 	blt.w	80169ec <tcp_receive+0x650>
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80168d2:	4b2b      	ldr	r3, [pc, #172]	; (8016980 <tcp_receive+0x5e4>)
 80168d4:	881b      	ldrh	r3, [r3, #0]
 80168d6:	4619      	mov	r1, r3
 80168d8:	4b2a      	ldr	r3, [pc, #168]	; (8016984 <tcp_receive+0x5e8>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	440b      	add	r3, r1
 80168de:	1ad3      	subs	r3, r2, r3
 80168e0:	3301      	adds	r3, #1
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	f300 8082 	bgt.w	80169ec <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80168e8:	4b27      	ldr	r3, [pc, #156]	; (8016988 <tcp_receive+0x5ec>)
 80168ea:	685b      	ldr	r3, [r3, #4]
 80168ec:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80168f2:	4b24      	ldr	r3, [pc, #144]	; (8016984 <tcp_receive+0x5e8>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	1ad3      	subs	r3, r2, r3
 80168f8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80168fa:	4b23      	ldr	r3, [pc, #140]	; (8016988 <tcp_receive+0x5ec>)
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d106      	bne.n	8016910 <tcp_receive+0x574>
 8016902:	4b22      	ldr	r3, [pc, #136]	; (801698c <tcp_receive+0x5f0>)
 8016904:	f240 5294 	movw	r2, #1428	; 0x594
 8016908:	4921      	ldr	r1, [pc, #132]	; (8016990 <tcp_receive+0x5f4>)
 801690a:	4822      	ldr	r0, [pc, #136]	; (8016994 <tcp_receive+0x5f8>)
 801690c:	f008 ffce 	bl	801f8ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016912:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016916:	4293      	cmp	r3, r2
 8016918:	d906      	bls.n	8016928 <tcp_receive+0x58c>
 801691a:	4b1c      	ldr	r3, [pc, #112]	; (801698c <tcp_receive+0x5f0>)
 801691c:	f240 5295 	movw	r2, #1429	; 0x595
 8016920:	491d      	ldr	r1, [pc, #116]	; (8016998 <tcp_receive+0x5fc>)
 8016922:	481c      	ldr	r0, [pc, #112]	; (8016994 <tcp_receive+0x5f8>)
 8016924:	f008 ffc2 	bl	801f8ac <iprintf>
      off = (u16_t)off32;
 8016928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801692e:	4b16      	ldr	r3, [pc, #88]	; (8016988 <tcp_receive+0x5ec>)
 8016930:	685b      	ldr	r3, [r3, #4]
 8016932:	891b      	ldrh	r3, [r3, #8]
 8016934:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016938:	429a      	cmp	r2, r3
 801693a:	d906      	bls.n	801694a <tcp_receive+0x5ae>
 801693c:	4b13      	ldr	r3, [pc, #76]	; (801698c <tcp_receive+0x5f0>)
 801693e:	f240 5297 	movw	r2, #1431	; 0x597
 8016942:	4916      	ldr	r1, [pc, #88]	; (801699c <tcp_receive+0x600>)
 8016944:	4813      	ldr	r0, [pc, #76]	; (8016994 <tcp_receive+0x5f8>)
 8016946:	f008 ffb1 	bl	801f8ac <iprintf>
      inseg.len -= off;
 801694a:	4b0f      	ldr	r3, [pc, #60]	; (8016988 <tcp_receive+0x5ec>)
 801694c:	891a      	ldrh	r2, [r3, #8]
 801694e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016952:	1ad3      	subs	r3, r2, r3
 8016954:	b29a      	uxth	r2, r3
 8016956:	4b0c      	ldr	r3, [pc, #48]	; (8016988 <tcp_receive+0x5ec>)
 8016958:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801695a:	4b0b      	ldr	r3, [pc, #44]	; (8016988 <tcp_receive+0x5ec>)
 801695c:	685b      	ldr	r3, [r3, #4]
 801695e:	891a      	ldrh	r2, [r3, #8]
 8016960:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016964:	1ad3      	subs	r3, r2, r3
 8016966:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016968:	e02a      	b.n	80169c0 <tcp_receive+0x624>
 801696a:	bf00      	nop
 801696c:	080237d0 	.word	0x080237d0
 8016970:	080237d8 	.word	0x080237d8
 8016974:	2001020c 	.word	0x2001020c
 8016978:	20010208 	.word	0x20010208
 801697c:	200101cc 	.word	0x200101cc
 8016980:	2001020e 	.word	0x2001020e
 8016984:	20010204 	.word	0x20010204
 8016988:	200101e4 	.word	0x200101e4
 801698c:	08023468 	.word	0x08023468
 8016990:	080237e0 	.word	0x080237e0
 8016994:	080234b4 	.word	0x080234b4
 8016998:	080237f0 	.word	0x080237f0
 801699c:	08023800 	.word	0x08023800
        off -= p->len;
 80169a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169a2:	895b      	ldrh	r3, [r3, #10]
 80169a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169a8:	1ad3      	subs	r3, r2, r3
 80169aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80169ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80169b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80169b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169b6:	2200      	movs	r2, #0
 80169b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80169ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80169c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169c2:	895b      	ldrh	r3, [r3, #10]
 80169c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169c8:	429a      	cmp	r2, r3
 80169ca:	d8e9      	bhi.n	80169a0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80169cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80169d0:	4619      	mov	r1, r3
 80169d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80169d4:	f7fc f874 	bl	8012ac0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169dc:	4a91      	ldr	r2, [pc, #580]	; (8016c24 <tcp_receive+0x888>)
 80169de:	6013      	str	r3, [r2, #0]
 80169e0:	4b91      	ldr	r3, [pc, #580]	; (8016c28 <tcp_receive+0x88c>)
 80169e2:	68db      	ldr	r3, [r3, #12]
 80169e4:	4a8f      	ldr	r2, [pc, #572]	; (8016c24 <tcp_receive+0x888>)
 80169e6:	6812      	ldr	r2, [r2, #0]
 80169e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80169ea:	e00d      	b.n	8016a08 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80169ec:	4b8d      	ldr	r3, [pc, #564]	; (8016c24 <tcp_receive+0x888>)
 80169ee:	681a      	ldr	r2, [r3, #0]
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169f4:	1ad3      	subs	r3, r2, r3
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	da06      	bge.n	8016a08 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	8b5b      	ldrh	r3, [r3, #26]
 80169fe:	f043 0302 	orr.w	r3, r3, #2
 8016a02:	b29a      	uxth	r2, r3
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016a08:	4b86      	ldr	r3, [pc, #536]	; (8016c24 <tcp_receive+0x888>)
 8016a0a:	681a      	ldr	r2, [r3, #0]
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a10:	1ad3      	subs	r3, r2, r3
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	f2c0 842a 	blt.w	801726c <tcp_receive+0xed0>
 8016a18:	4b82      	ldr	r3, [pc, #520]	; (8016c24 <tcp_receive+0x888>)
 8016a1a:	681a      	ldr	r2, [r3, #0]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a20:	6879      	ldr	r1, [r7, #4]
 8016a22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016a24:	440b      	add	r3, r1
 8016a26:	1ad3      	subs	r3, r2, r3
 8016a28:	3301      	adds	r3, #1
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	f300 841e 	bgt.w	801726c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016a34:	4b7b      	ldr	r3, [pc, #492]	; (8016c24 <tcp_receive+0x888>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	f040 829a 	bne.w	8016f72 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016a3e:	4b7a      	ldr	r3, [pc, #488]	; (8016c28 <tcp_receive+0x88c>)
 8016a40:	891c      	ldrh	r4, [r3, #8]
 8016a42:	4b79      	ldr	r3, [pc, #484]	; (8016c28 <tcp_receive+0x88c>)
 8016a44:	68db      	ldr	r3, [r3, #12]
 8016a46:	899b      	ldrh	r3, [r3, #12]
 8016a48:	b29b      	uxth	r3, r3
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7fa fc88 	bl	8011360 <lwip_htons>
 8016a50:	4603      	mov	r3, r0
 8016a52:	b2db      	uxtb	r3, r3
 8016a54:	f003 0303 	and.w	r3, r3, #3
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d001      	beq.n	8016a60 <tcp_receive+0x6c4>
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	e000      	b.n	8016a62 <tcp_receive+0x6c6>
 8016a60:	2300      	movs	r3, #0
 8016a62:	4423      	add	r3, r4
 8016a64:	b29a      	uxth	r2, r3
 8016a66:	4b71      	ldr	r3, [pc, #452]	; (8016c2c <tcp_receive+0x890>)
 8016a68:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016a6e:	4b6f      	ldr	r3, [pc, #444]	; (8016c2c <tcp_receive+0x890>)
 8016a70:	881b      	ldrh	r3, [r3, #0]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d275      	bcs.n	8016b62 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016a76:	4b6c      	ldr	r3, [pc, #432]	; (8016c28 <tcp_receive+0x88c>)
 8016a78:	68db      	ldr	r3, [r3, #12]
 8016a7a:	899b      	ldrh	r3, [r3, #12]
 8016a7c:	b29b      	uxth	r3, r3
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f7fa fc6e 	bl	8011360 <lwip_htons>
 8016a84:	4603      	mov	r3, r0
 8016a86:	b2db      	uxtb	r3, r3
 8016a88:	f003 0301 	and.w	r3, r3, #1
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d01f      	beq.n	8016ad0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016a90:	4b65      	ldr	r3, [pc, #404]	; (8016c28 <tcp_receive+0x88c>)
 8016a92:	68db      	ldr	r3, [r3, #12]
 8016a94:	899b      	ldrh	r3, [r3, #12]
 8016a96:	b29b      	uxth	r3, r3
 8016a98:	b21b      	sxth	r3, r3
 8016a9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016a9e:	b21c      	sxth	r4, r3
 8016aa0:	4b61      	ldr	r3, [pc, #388]	; (8016c28 <tcp_receive+0x88c>)
 8016aa2:	68db      	ldr	r3, [r3, #12]
 8016aa4:	899b      	ldrh	r3, [r3, #12]
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7fa fc59 	bl	8011360 <lwip_htons>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	b2db      	uxtb	r3, r3
 8016ab2:	b29b      	uxth	r3, r3
 8016ab4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016ab8:	b29b      	uxth	r3, r3
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7fa fc50 	bl	8011360 <lwip_htons>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	b21b      	sxth	r3, r3
 8016ac4:	4323      	orrs	r3, r4
 8016ac6:	b21a      	sxth	r2, r3
 8016ac8:	4b57      	ldr	r3, [pc, #348]	; (8016c28 <tcp_receive+0x88c>)
 8016aca:	68db      	ldr	r3, [r3, #12]
 8016acc:	b292      	uxth	r2, r2
 8016ace:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016ad4:	4b54      	ldr	r3, [pc, #336]	; (8016c28 <tcp_receive+0x88c>)
 8016ad6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016ad8:	4b53      	ldr	r3, [pc, #332]	; (8016c28 <tcp_receive+0x88c>)
 8016ada:	68db      	ldr	r3, [r3, #12]
 8016adc:	899b      	ldrh	r3, [r3, #12]
 8016ade:	b29b      	uxth	r3, r3
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f7fa fc3d 	bl	8011360 <lwip_htons>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	b2db      	uxtb	r3, r3
 8016aea:	f003 0302 	and.w	r3, r3, #2
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d005      	beq.n	8016afe <tcp_receive+0x762>
            inseg.len -= 1;
 8016af2:	4b4d      	ldr	r3, [pc, #308]	; (8016c28 <tcp_receive+0x88c>)
 8016af4:	891b      	ldrh	r3, [r3, #8]
 8016af6:	3b01      	subs	r3, #1
 8016af8:	b29a      	uxth	r2, r3
 8016afa:	4b4b      	ldr	r3, [pc, #300]	; (8016c28 <tcp_receive+0x88c>)
 8016afc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016afe:	4b4a      	ldr	r3, [pc, #296]	; (8016c28 <tcp_receive+0x88c>)
 8016b00:	685b      	ldr	r3, [r3, #4]
 8016b02:	4a49      	ldr	r2, [pc, #292]	; (8016c28 <tcp_receive+0x88c>)
 8016b04:	8912      	ldrh	r2, [r2, #8]
 8016b06:	4611      	mov	r1, r2
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f7fb fed9 	bl	80128c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016b0e:	4b46      	ldr	r3, [pc, #280]	; (8016c28 <tcp_receive+0x88c>)
 8016b10:	891c      	ldrh	r4, [r3, #8]
 8016b12:	4b45      	ldr	r3, [pc, #276]	; (8016c28 <tcp_receive+0x88c>)
 8016b14:	68db      	ldr	r3, [r3, #12]
 8016b16:	899b      	ldrh	r3, [r3, #12]
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7fa fc20 	bl	8011360 <lwip_htons>
 8016b20:	4603      	mov	r3, r0
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	f003 0303 	and.w	r3, r3, #3
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d001      	beq.n	8016b30 <tcp_receive+0x794>
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	e000      	b.n	8016b32 <tcp_receive+0x796>
 8016b30:	2300      	movs	r3, #0
 8016b32:	4423      	add	r3, r4
 8016b34:	b29a      	uxth	r2, r3
 8016b36:	4b3d      	ldr	r3, [pc, #244]	; (8016c2c <tcp_receive+0x890>)
 8016b38:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016b3a:	4b3c      	ldr	r3, [pc, #240]	; (8016c2c <tcp_receive+0x890>)
 8016b3c:	881b      	ldrh	r3, [r3, #0]
 8016b3e:	461a      	mov	r2, r3
 8016b40:	4b38      	ldr	r3, [pc, #224]	; (8016c24 <tcp_receive+0x888>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	441a      	add	r2, r3
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b4a:	6879      	ldr	r1, [r7, #4]
 8016b4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016b4e:	440b      	add	r3, r1
 8016b50:	429a      	cmp	r2, r3
 8016b52:	d006      	beq.n	8016b62 <tcp_receive+0x7c6>
 8016b54:	4b36      	ldr	r3, [pc, #216]	; (8016c30 <tcp_receive+0x894>)
 8016b56:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8016b5a:	4936      	ldr	r1, [pc, #216]	; (8016c34 <tcp_receive+0x898>)
 8016b5c:	4836      	ldr	r0, [pc, #216]	; (8016c38 <tcp_receive+0x89c>)
 8016b5e:	f008 fea5 	bl	801f8ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	f000 80e7 	beq.w	8016d3a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016b6c:	4b2e      	ldr	r3, [pc, #184]	; (8016c28 <tcp_receive+0x88c>)
 8016b6e:	68db      	ldr	r3, [r3, #12]
 8016b70:	899b      	ldrh	r3, [r3, #12]
 8016b72:	b29b      	uxth	r3, r3
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7fa fbf3 	bl	8011360 <lwip_htons>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	b2db      	uxtb	r3, r3
 8016b7e:	f003 0301 	and.w	r3, r3, #1
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d010      	beq.n	8016ba8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016b86:	e00a      	b.n	8016b9e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b8c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016b92:	681a      	ldr	r2, [r3, #0]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016b98:	68f8      	ldr	r0, [r7, #12]
 8016b9a:	f7fd fcc4 	bl	8014526 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d1f0      	bne.n	8016b88 <tcp_receive+0x7ec>
 8016ba6:	e0c8      	b.n	8016d3a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016bac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016bae:	e052      	b.n	8016c56 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bb2:	68db      	ldr	r3, [r3, #12]
 8016bb4:	899b      	ldrh	r3, [r3, #12]
 8016bb6:	b29b      	uxth	r3, r3
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7fa fbd1 	bl	8011360 <lwip_htons>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	f003 0301 	and.w	r3, r3, #1
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d03d      	beq.n	8016c46 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016bca:	4b17      	ldr	r3, [pc, #92]	; (8016c28 <tcp_receive+0x88c>)
 8016bcc:	68db      	ldr	r3, [r3, #12]
 8016bce:	899b      	ldrh	r3, [r3, #12]
 8016bd0:	b29b      	uxth	r3, r3
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f7fa fbc4 	bl	8011360 <lwip_htons>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	b2db      	uxtb	r3, r3
 8016bdc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d130      	bne.n	8016c46 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016be4:	4b10      	ldr	r3, [pc, #64]	; (8016c28 <tcp_receive+0x88c>)
 8016be6:	68db      	ldr	r3, [r3, #12]
 8016be8:	899b      	ldrh	r3, [r3, #12]
 8016bea:	b29c      	uxth	r4, r3
 8016bec:	2001      	movs	r0, #1
 8016bee:	f7fa fbb7 	bl	8011360 <lwip_htons>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	461a      	mov	r2, r3
 8016bf6:	4b0c      	ldr	r3, [pc, #48]	; (8016c28 <tcp_receive+0x88c>)
 8016bf8:	68db      	ldr	r3, [r3, #12]
 8016bfa:	4322      	orrs	r2, r4
 8016bfc:	b292      	uxth	r2, r2
 8016bfe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016c00:	4b09      	ldr	r3, [pc, #36]	; (8016c28 <tcp_receive+0x88c>)
 8016c02:	891c      	ldrh	r4, [r3, #8]
 8016c04:	4b08      	ldr	r3, [pc, #32]	; (8016c28 <tcp_receive+0x88c>)
 8016c06:	68db      	ldr	r3, [r3, #12]
 8016c08:	899b      	ldrh	r3, [r3, #12]
 8016c0a:	b29b      	uxth	r3, r3
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f7fa fba7 	bl	8011360 <lwip_htons>
 8016c12:	4603      	mov	r3, r0
 8016c14:	b2db      	uxtb	r3, r3
 8016c16:	f003 0303 	and.w	r3, r3, #3
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d00e      	beq.n	8016c3c <tcp_receive+0x8a0>
 8016c1e:	2301      	movs	r3, #1
 8016c20:	e00d      	b.n	8016c3e <tcp_receive+0x8a2>
 8016c22:	bf00      	nop
 8016c24:	20010204 	.word	0x20010204
 8016c28:	200101e4 	.word	0x200101e4
 8016c2c:	2001020e 	.word	0x2001020e
 8016c30:	08023468 	.word	0x08023468
 8016c34:	08023810 	.word	0x08023810
 8016c38:	080234b4 	.word	0x080234b4
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	4423      	add	r3, r4
 8016c40:	b29a      	uxth	r2, r3
 8016c42:	4b98      	ldr	r3, [pc, #608]	; (8016ea4 <tcp_receive+0xb08>)
 8016c44:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c48:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016c50:	6938      	ldr	r0, [r7, #16]
 8016c52:	f7fd fc68 	bl	8014526 <tcp_seg_free>
            while (next &&
 8016c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d00e      	beq.n	8016c7a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016c5c:	4b91      	ldr	r3, [pc, #580]	; (8016ea4 <tcp_receive+0xb08>)
 8016c5e:	881b      	ldrh	r3, [r3, #0]
 8016c60:	461a      	mov	r2, r3
 8016c62:	4b91      	ldr	r3, [pc, #580]	; (8016ea8 <tcp_receive+0xb0c>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	441a      	add	r2, r3
 8016c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c6a:	68db      	ldr	r3, [r3, #12]
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016c70:	8909      	ldrh	r1, [r1, #8]
 8016c72:	440b      	add	r3, r1
 8016c74:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	da9a      	bge.n	8016bb0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d059      	beq.n	8016d34 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016c80:	4b88      	ldr	r3, [pc, #544]	; (8016ea4 <tcp_receive+0xb08>)
 8016c82:	881b      	ldrh	r3, [r3, #0]
 8016c84:	461a      	mov	r2, r3
 8016c86:	4b88      	ldr	r3, [pc, #544]	; (8016ea8 <tcp_receive+0xb0c>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	441a      	add	r2, r3
 8016c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c8e:	68db      	ldr	r3, [r3, #12]
 8016c90:	685b      	ldr	r3, [r3, #4]
 8016c92:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	dd4d      	ble.n	8016d34 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c9a:	68db      	ldr	r3, [r3, #12]
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	b29a      	uxth	r2, r3
 8016ca0:	4b81      	ldr	r3, [pc, #516]	; (8016ea8 <tcp_receive+0xb0c>)
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	b29b      	uxth	r3, r3
 8016ca6:	1ad3      	subs	r3, r2, r3
 8016ca8:	b29a      	uxth	r2, r3
 8016caa:	4b80      	ldr	r3, [pc, #512]	; (8016eac <tcp_receive+0xb10>)
 8016cac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016cae:	4b7f      	ldr	r3, [pc, #508]	; (8016eac <tcp_receive+0xb10>)
 8016cb0:	68db      	ldr	r3, [r3, #12]
 8016cb2:	899b      	ldrh	r3, [r3, #12]
 8016cb4:	b29b      	uxth	r3, r3
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f7fa fb52 	bl	8011360 <lwip_htons>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	b2db      	uxtb	r3, r3
 8016cc0:	f003 0302 	and.w	r3, r3, #2
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d005      	beq.n	8016cd4 <tcp_receive+0x938>
                inseg.len -= 1;
 8016cc8:	4b78      	ldr	r3, [pc, #480]	; (8016eac <tcp_receive+0xb10>)
 8016cca:	891b      	ldrh	r3, [r3, #8]
 8016ccc:	3b01      	subs	r3, #1
 8016cce:	b29a      	uxth	r2, r3
 8016cd0:	4b76      	ldr	r3, [pc, #472]	; (8016eac <tcp_receive+0xb10>)
 8016cd2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016cd4:	4b75      	ldr	r3, [pc, #468]	; (8016eac <tcp_receive+0xb10>)
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	4a74      	ldr	r2, [pc, #464]	; (8016eac <tcp_receive+0xb10>)
 8016cda:	8912      	ldrh	r2, [r2, #8]
 8016cdc:	4611      	mov	r1, r2
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7fb fdee 	bl	80128c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016ce4:	4b71      	ldr	r3, [pc, #452]	; (8016eac <tcp_receive+0xb10>)
 8016ce6:	891c      	ldrh	r4, [r3, #8]
 8016ce8:	4b70      	ldr	r3, [pc, #448]	; (8016eac <tcp_receive+0xb10>)
 8016cea:	68db      	ldr	r3, [r3, #12]
 8016cec:	899b      	ldrh	r3, [r3, #12]
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f7fa fb35 	bl	8011360 <lwip_htons>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	b2db      	uxtb	r3, r3
 8016cfa:	f003 0303 	and.w	r3, r3, #3
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d001      	beq.n	8016d06 <tcp_receive+0x96a>
 8016d02:	2301      	movs	r3, #1
 8016d04:	e000      	b.n	8016d08 <tcp_receive+0x96c>
 8016d06:	2300      	movs	r3, #0
 8016d08:	4423      	add	r3, r4
 8016d0a:	b29a      	uxth	r2, r3
 8016d0c:	4b65      	ldr	r3, [pc, #404]	; (8016ea4 <tcp_receive+0xb08>)
 8016d0e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016d10:	4b64      	ldr	r3, [pc, #400]	; (8016ea4 <tcp_receive+0xb08>)
 8016d12:	881b      	ldrh	r3, [r3, #0]
 8016d14:	461a      	mov	r2, r3
 8016d16:	4b64      	ldr	r3, [pc, #400]	; (8016ea8 <tcp_receive+0xb0c>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	441a      	add	r2, r3
 8016d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d1e:	68db      	ldr	r3, [r3, #12]
 8016d20:	685b      	ldr	r3, [r3, #4]
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d006      	beq.n	8016d34 <tcp_receive+0x998>
 8016d26:	4b62      	ldr	r3, [pc, #392]	; (8016eb0 <tcp_receive+0xb14>)
 8016d28:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016d2c:	4961      	ldr	r1, [pc, #388]	; (8016eb4 <tcp_receive+0xb18>)
 8016d2e:	4862      	ldr	r0, [pc, #392]	; (8016eb8 <tcp_receive+0xb1c>)
 8016d30:	f008 fdbc 	bl	801f8ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d38:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016d3a:	4b5a      	ldr	r3, [pc, #360]	; (8016ea4 <tcp_receive+0xb08>)
 8016d3c:	881b      	ldrh	r3, [r3, #0]
 8016d3e:	461a      	mov	r2, r3
 8016d40:	4b59      	ldr	r3, [pc, #356]	; (8016ea8 <tcp_receive+0xb0c>)
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	441a      	add	r2, r3
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016d4e:	4b55      	ldr	r3, [pc, #340]	; (8016ea4 <tcp_receive+0xb08>)
 8016d50:	881b      	ldrh	r3, [r3, #0]
 8016d52:	429a      	cmp	r2, r3
 8016d54:	d206      	bcs.n	8016d64 <tcp_receive+0x9c8>
 8016d56:	4b56      	ldr	r3, [pc, #344]	; (8016eb0 <tcp_receive+0xb14>)
 8016d58:	f240 6207 	movw	r2, #1543	; 0x607
 8016d5c:	4957      	ldr	r1, [pc, #348]	; (8016ebc <tcp_receive+0xb20>)
 8016d5e:	4856      	ldr	r0, [pc, #344]	; (8016eb8 <tcp_receive+0xb1c>)
 8016d60:	f008 fda4 	bl	801f8ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016d68:	4b4e      	ldr	r3, [pc, #312]	; (8016ea4 <tcp_receive+0xb08>)
 8016d6a:	881b      	ldrh	r3, [r3, #0]
 8016d6c:	1ad3      	subs	r3, r2, r3
 8016d6e:	b29a      	uxth	r2, r3
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016d74:	6878      	ldr	r0, [r7, #4]
 8016d76:	f7fc feb1 	bl	8013adc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016d7a:	4b4c      	ldr	r3, [pc, #304]	; (8016eac <tcp_receive+0xb10>)
 8016d7c:	685b      	ldr	r3, [r3, #4]
 8016d7e:	891b      	ldrh	r3, [r3, #8]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d006      	beq.n	8016d92 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8016d84:	4b49      	ldr	r3, [pc, #292]	; (8016eac <tcp_receive+0xb10>)
 8016d86:	685b      	ldr	r3, [r3, #4]
 8016d88:	4a4d      	ldr	r2, [pc, #308]	; (8016ec0 <tcp_receive+0xb24>)
 8016d8a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016d8c:	4b47      	ldr	r3, [pc, #284]	; (8016eac <tcp_receive+0xb10>)
 8016d8e:	2200      	movs	r2, #0
 8016d90:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016d92:	4b46      	ldr	r3, [pc, #280]	; (8016eac <tcp_receive+0xb10>)
 8016d94:	68db      	ldr	r3, [r3, #12]
 8016d96:	899b      	ldrh	r3, [r3, #12]
 8016d98:	b29b      	uxth	r3, r3
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7fa fae0 	bl	8011360 <lwip_htons>
 8016da0:	4603      	mov	r3, r0
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	f003 0301 	and.w	r3, r3, #1
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	f000 80b8 	beq.w	8016f1e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016dae:	4b45      	ldr	r3, [pc, #276]	; (8016ec4 <tcp_receive+0xb28>)
 8016db0:	781b      	ldrb	r3, [r3, #0]
 8016db2:	f043 0320 	orr.w	r3, r3, #32
 8016db6:	b2da      	uxtb	r2, r3
 8016db8:	4b42      	ldr	r3, [pc, #264]	; (8016ec4 <tcp_receive+0xb28>)
 8016dba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016dbc:	e0af      	b.n	8016f1e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dc2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dc8:	68db      	ldr	r3, [r3, #12]
 8016dca:	685b      	ldr	r3, [r3, #4]
 8016dcc:	4a36      	ldr	r2, [pc, #216]	; (8016ea8 <tcp_receive+0xb0c>)
 8016dce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016dd0:	68bb      	ldr	r3, [r7, #8]
 8016dd2:	891b      	ldrh	r3, [r3, #8]
 8016dd4:	461c      	mov	r4, r3
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	68db      	ldr	r3, [r3, #12]
 8016dda:	899b      	ldrh	r3, [r3, #12]
 8016ddc:	b29b      	uxth	r3, r3
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7fa fabe 	bl	8011360 <lwip_htons>
 8016de4:	4603      	mov	r3, r0
 8016de6:	b2db      	uxtb	r3, r3
 8016de8:	f003 0303 	and.w	r3, r3, #3
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d001      	beq.n	8016df4 <tcp_receive+0xa58>
 8016df0:	2301      	movs	r3, #1
 8016df2:	e000      	b.n	8016df6 <tcp_receive+0xa5a>
 8016df4:	2300      	movs	r3, #0
 8016df6:	191a      	adds	r2, r3, r4
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dfc:	441a      	add	r2, r3
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e06:	461c      	mov	r4, r3
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	891b      	ldrh	r3, [r3, #8]
 8016e0c:	461d      	mov	r5, r3
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	68db      	ldr	r3, [r3, #12]
 8016e12:	899b      	ldrh	r3, [r3, #12]
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7fa faa2 	bl	8011360 <lwip_htons>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	b2db      	uxtb	r3, r3
 8016e20:	f003 0303 	and.w	r3, r3, #3
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d001      	beq.n	8016e2c <tcp_receive+0xa90>
 8016e28:	2301      	movs	r3, #1
 8016e2a:	e000      	b.n	8016e2e <tcp_receive+0xa92>
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	442b      	add	r3, r5
 8016e30:	429c      	cmp	r4, r3
 8016e32:	d206      	bcs.n	8016e42 <tcp_receive+0xaa6>
 8016e34:	4b1e      	ldr	r3, [pc, #120]	; (8016eb0 <tcp_receive+0xb14>)
 8016e36:	f240 622b 	movw	r2, #1579	; 0x62b
 8016e3a:	4923      	ldr	r1, [pc, #140]	; (8016ec8 <tcp_receive+0xb2c>)
 8016e3c:	481e      	ldr	r0, [pc, #120]	; (8016eb8 <tcp_receive+0xb1c>)
 8016e3e:	f008 fd35 	bl	801f8ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	891b      	ldrh	r3, [r3, #8]
 8016e46:	461c      	mov	r4, r3
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	68db      	ldr	r3, [r3, #12]
 8016e4c:	899b      	ldrh	r3, [r3, #12]
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	4618      	mov	r0, r3
 8016e52:	f7fa fa85 	bl	8011360 <lwip_htons>
 8016e56:	4603      	mov	r3, r0
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	f003 0303 	and.w	r3, r3, #3
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d001      	beq.n	8016e66 <tcp_receive+0xaca>
 8016e62:	2301      	movs	r3, #1
 8016e64:	e000      	b.n	8016e68 <tcp_receive+0xacc>
 8016e66:	2300      	movs	r3, #0
 8016e68:	1919      	adds	r1, r3, r4
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016e6e:	b28b      	uxth	r3, r1
 8016e70:	1ad3      	subs	r3, r2, r3
 8016e72:	b29a      	uxth	r2, r3
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016e78:	6878      	ldr	r0, [r7, #4]
 8016e7a:	f7fc fe2f 	bl	8013adc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016e7e:	68bb      	ldr	r3, [r7, #8]
 8016e80:	685b      	ldr	r3, [r3, #4]
 8016e82:	891b      	ldrh	r3, [r3, #8]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d028      	beq.n	8016eda <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016e88:	4b0d      	ldr	r3, [pc, #52]	; (8016ec0 <tcp_receive+0xb24>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d01d      	beq.n	8016ecc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8016e90:	4b0b      	ldr	r3, [pc, #44]	; (8016ec0 <tcp_receive+0xb24>)
 8016e92:	681a      	ldr	r2, [r3, #0]
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	685b      	ldr	r3, [r3, #4]
 8016e98:	4619      	mov	r1, r3
 8016e9a:	4610      	mov	r0, r2
 8016e9c:	f7fb ff64 	bl	8012d68 <pbuf_cat>
 8016ea0:	e018      	b.n	8016ed4 <tcp_receive+0xb38>
 8016ea2:	bf00      	nop
 8016ea4:	2001020e 	.word	0x2001020e
 8016ea8:	20010204 	.word	0x20010204
 8016eac:	200101e4 	.word	0x200101e4
 8016eb0:	08023468 	.word	0x08023468
 8016eb4:	08023848 	.word	0x08023848
 8016eb8:	080234b4 	.word	0x080234b4
 8016ebc:	08023884 	.word	0x08023884
 8016ec0:	20010214 	.word	0x20010214
 8016ec4:	20010211 	.word	0x20010211
 8016ec8:	080238a4 	.word	0x080238a4
            } else {
              recv_data = cseg->p;
 8016ecc:	68bb      	ldr	r3, [r7, #8]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	4a70      	ldr	r2, [pc, #448]	; (8017094 <tcp_receive+0xcf8>)
 8016ed2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016eda:	68bb      	ldr	r3, [r7, #8]
 8016edc:	68db      	ldr	r3, [r3, #12]
 8016ede:	899b      	ldrh	r3, [r3, #12]
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7fa fa3c 	bl	8011360 <lwip_htons>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	b2db      	uxtb	r3, r3
 8016eec:	f003 0301 	and.w	r3, r3, #1
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d00d      	beq.n	8016f10 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016ef4:	4b68      	ldr	r3, [pc, #416]	; (8017098 <tcp_receive+0xcfc>)
 8016ef6:	781b      	ldrb	r3, [r3, #0]
 8016ef8:	f043 0320 	orr.w	r3, r3, #32
 8016efc:	b2da      	uxtb	r2, r3
 8016efe:	4b66      	ldr	r3, [pc, #408]	; (8017098 <tcp_receive+0xcfc>)
 8016f00:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	7d1b      	ldrb	r3, [r3, #20]
 8016f06:	2b04      	cmp	r3, #4
 8016f08:	d102      	bne.n	8016f10 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2207      	movs	r2, #7
 8016f0e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	681a      	ldr	r2, [r3, #0]
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016f18:	68b8      	ldr	r0, [r7, #8]
 8016f1a:	f7fd fb04 	bl	8014526 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d008      	beq.n	8016f38 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f2a:	68db      	ldr	r3, [r3, #12]
 8016f2c:	685a      	ldr	r2, [r3, #4]
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8016f32:	429a      	cmp	r2, r3
 8016f34:	f43f af43 	beq.w	8016dbe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	8b5b      	ldrh	r3, [r3, #26]
 8016f3c:	f003 0301 	and.w	r3, r3, #1
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d00e      	beq.n	8016f62 <tcp_receive+0xbc6>
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	8b5b      	ldrh	r3, [r3, #26]
 8016f48:	f023 0301 	bic.w	r3, r3, #1
 8016f4c:	b29a      	uxth	r2, r3
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	835a      	strh	r2, [r3, #26]
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	8b5b      	ldrh	r3, [r3, #26]
 8016f56:	f043 0302 	orr.w	r3, r3, #2
 8016f5a:	b29a      	uxth	r2, r3
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016f60:	e188      	b.n	8017274 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	8b5b      	ldrh	r3, [r3, #26]
 8016f66:	f043 0301 	orr.w	r3, r3, #1
 8016f6a:	b29a      	uxth	r2, r3
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016f70:	e180      	b.n	8017274 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d106      	bne.n	8016f88 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016f7a:	4848      	ldr	r0, [pc, #288]	; (801709c <tcp_receive+0xd00>)
 8016f7c:	f7fd faec 	bl	8014558 <tcp_seg_copy>
 8016f80:	4602      	mov	r2, r0
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	675a      	str	r2, [r3, #116]	; 0x74
 8016f86:	e16d      	b.n	8017264 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016f88:	2300      	movs	r3, #0
 8016f8a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8016f92:	e157      	b.n	8017244 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f96:	68db      	ldr	r3, [r3, #12]
 8016f98:	685a      	ldr	r2, [r3, #4]
 8016f9a:	4b41      	ldr	r3, [pc, #260]	; (80170a0 <tcp_receive+0xd04>)
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	429a      	cmp	r2, r3
 8016fa0:	d11d      	bne.n	8016fde <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016fa2:	4b3e      	ldr	r3, [pc, #248]	; (801709c <tcp_receive+0xd00>)
 8016fa4:	891a      	ldrh	r2, [r3, #8]
 8016fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fa8:	891b      	ldrh	r3, [r3, #8]
 8016faa:	429a      	cmp	r2, r3
 8016fac:	f240 814f 	bls.w	801724e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016fb0:	483a      	ldr	r0, [pc, #232]	; (801709c <tcp_receive+0xd00>)
 8016fb2:	f7fd fad1 	bl	8014558 <tcp_seg_copy>
 8016fb6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016fb8:	697b      	ldr	r3, [r7, #20]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	f000 8149 	beq.w	8017252 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8016fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d003      	beq.n	8016fce <tcp_receive+0xc32>
                    prev->next = cseg;
 8016fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fc8:	697a      	ldr	r2, [r7, #20]
 8016fca:	601a      	str	r2, [r3, #0]
 8016fcc:	e002      	b.n	8016fd4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	697a      	ldr	r2, [r7, #20]
 8016fd2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016fd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016fd6:	6978      	ldr	r0, [r7, #20]
 8016fd8:	f7ff f8dc 	bl	8016194 <tcp_oos_insert_segment>
                }
                break;
 8016fdc:	e139      	b.n	8017252 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d117      	bne.n	8017014 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016fe4:	4b2e      	ldr	r3, [pc, #184]	; (80170a0 <tcp_receive+0xd04>)
 8016fe6:	681a      	ldr	r2, [r3, #0]
 8016fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fea:	68db      	ldr	r3, [r3, #12]
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	1ad3      	subs	r3, r2, r3
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	da57      	bge.n	80170a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016ff4:	4829      	ldr	r0, [pc, #164]	; (801709c <tcp_receive+0xd00>)
 8016ff6:	f7fd faaf 	bl	8014558 <tcp_seg_copy>
 8016ffa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016ffc:	69bb      	ldr	r3, [r7, #24]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	f000 8129 	beq.w	8017256 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	69ba      	ldr	r2, [r7, #24]
 8017008:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801700a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801700c:	69b8      	ldr	r0, [r7, #24]
 801700e:	f7ff f8c1 	bl	8016194 <tcp_oos_insert_segment>
                  }
                  break;
 8017012:	e120      	b.n	8017256 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017014:	4b22      	ldr	r3, [pc, #136]	; (80170a0 <tcp_receive+0xd04>)
 8017016:	681a      	ldr	r2, [r3, #0]
 8017018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801701a:	68db      	ldr	r3, [r3, #12]
 801701c:	685b      	ldr	r3, [r3, #4]
 801701e:	1ad3      	subs	r3, r2, r3
 8017020:	3b01      	subs	r3, #1
 8017022:	2b00      	cmp	r3, #0
 8017024:	db3e      	blt.n	80170a4 <tcp_receive+0xd08>
 8017026:	4b1e      	ldr	r3, [pc, #120]	; (80170a0 <tcp_receive+0xd04>)
 8017028:	681a      	ldr	r2, [r3, #0]
 801702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801702c:	68db      	ldr	r3, [r3, #12]
 801702e:	685b      	ldr	r3, [r3, #4]
 8017030:	1ad3      	subs	r3, r2, r3
 8017032:	3301      	adds	r3, #1
 8017034:	2b00      	cmp	r3, #0
 8017036:	dc35      	bgt.n	80170a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017038:	4818      	ldr	r0, [pc, #96]	; (801709c <tcp_receive+0xd00>)
 801703a:	f7fd fa8d 	bl	8014558 <tcp_seg_copy>
 801703e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017040:	69fb      	ldr	r3, [r7, #28]
 8017042:	2b00      	cmp	r3, #0
 8017044:	f000 8109 	beq.w	801725a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801704a:	68db      	ldr	r3, [r3, #12]
 801704c:	685b      	ldr	r3, [r3, #4]
 801704e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017050:	8912      	ldrh	r2, [r2, #8]
 8017052:	441a      	add	r2, r3
 8017054:	4b12      	ldr	r3, [pc, #72]	; (80170a0 <tcp_receive+0xd04>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	1ad3      	subs	r3, r2, r3
 801705a:	2b00      	cmp	r3, #0
 801705c:	dd12      	ble.n	8017084 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801705e:	4b10      	ldr	r3, [pc, #64]	; (80170a0 <tcp_receive+0xd04>)
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	b29a      	uxth	r2, r3
 8017064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017066:	68db      	ldr	r3, [r3, #12]
 8017068:	685b      	ldr	r3, [r3, #4]
 801706a:	b29b      	uxth	r3, r3
 801706c:	1ad3      	subs	r3, r2, r3
 801706e:	b29a      	uxth	r2, r3
 8017070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017072:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017076:	685a      	ldr	r2, [r3, #4]
 8017078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801707a:	891b      	ldrh	r3, [r3, #8]
 801707c:	4619      	mov	r1, r3
 801707e:	4610      	mov	r0, r2
 8017080:	f7fb fc1e 	bl	80128c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017086:	69fa      	ldr	r2, [r7, #28]
 8017088:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801708a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801708c:	69f8      	ldr	r0, [r7, #28]
 801708e:	f7ff f881 	bl	8016194 <tcp_oos_insert_segment>
                  }
                  break;
 8017092:	e0e2      	b.n	801725a <tcp_receive+0xebe>
 8017094:	20010214 	.word	0x20010214
 8017098:	20010211 	.word	0x20010211
 801709c:	200101e4 	.word	0x200101e4
 80170a0:	20010204 	.word	0x20010204
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80170a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80170a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	f040 80c6 	bne.w	801723e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80170b2:	4b80      	ldr	r3, [pc, #512]	; (80172b4 <tcp_receive+0xf18>)
 80170b4:	681a      	ldr	r2, [r3, #0]
 80170b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170b8:	68db      	ldr	r3, [r3, #12]
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80170be:	2b00      	cmp	r3, #0
 80170c0:	f340 80bd 	ble.w	801723e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80170c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170c6:	68db      	ldr	r3, [r3, #12]
 80170c8:	899b      	ldrh	r3, [r3, #12]
 80170ca:	b29b      	uxth	r3, r3
 80170cc:	4618      	mov	r0, r3
 80170ce:	f7fa f947 	bl	8011360 <lwip_htons>
 80170d2:	4603      	mov	r3, r0
 80170d4:	b2db      	uxtb	r3, r3
 80170d6:	f003 0301 	and.w	r3, r3, #1
 80170da:	2b00      	cmp	r3, #0
 80170dc:	f040 80bf 	bne.w	801725e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80170e0:	4875      	ldr	r0, [pc, #468]	; (80172b8 <tcp_receive+0xf1c>)
 80170e2:	f7fd fa39 	bl	8014558 <tcp_seg_copy>
 80170e6:	4602      	mov	r2, r0
 80170e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80170ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	f000 80b6 	beq.w	8017262 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80170f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170f8:	68db      	ldr	r3, [r3, #12]
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80170fe:	8912      	ldrh	r2, [r2, #8]
 8017100:	441a      	add	r2, r3
 8017102:	4b6c      	ldr	r3, [pc, #432]	; (80172b4 <tcp_receive+0xf18>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	1ad3      	subs	r3, r2, r3
 8017108:	2b00      	cmp	r3, #0
 801710a:	dd12      	ble.n	8017132 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801710c:	4b69      	ldr	r3, [pc, #420]	; (80172b4 <tcp_receive+0xf18>)
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	b29a      	uxth	r2, r3
 8017112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017114:	68db      	ldr	r3, [r3, #12]
 8017116:	685b      	ldr	r3, [r3, #4]
 8017118:	b29b      	uxth	r3, r3
 801711a:	1ad3      	subs	r3, r2, r3
 801711c:	b29a      	uxth	r2, r3
 801711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017120:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017124:	685a      	ldr	r2, [r3, #4]
 8017126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017128:	891b      	ldrh	r3, [r3, #8]
 801712a:	4619      	mov	r1, r3
 801712c:	4610      	mov	r0, r2
 801712e:	f7fb fbc7 	bl	80128c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8017132:	4b62      	ldr	r3, [pc, #392]	; (80172bc <tcp_receive+0xf20>)
 8017134:	881b      	ldrh	r3, [r3, #0]
 8017136:	461a      	mov	r2, r3
 8017138:	4b5e      	ldr	r3, [pc, #376]	; (80172b4 <tcp_receive+0xf18>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	441a      	add	r2, r3
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017142:	6879      	ldr	r1, [r7, #4]
 8017144:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017146:	440b      	add	r3, r1
 8017148:	1ad3      	subs	r3, r2, r3
 801714a:	2b00      	cmp	r3, #0
 801714c:	f340 8089 	ble.w	8017262 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	68db      	ldr	r3, [r3, #12]
 8017156:	899b      	ldrh	r3, [r3, #12]
 8017158:	b29b      	uxth	r3, r3
 801715a:	4618      	mov	r0, r3
 801715c:	f7fa f900 	bl	8011360 <lwip_htons>
 8017160:	4603      	mov	r3, r0
 8017162:	b2db      	uxtb	r3, r3
 8017164:	f003 0301 	and.w	r3, r3, #1
 8017168:	2b00      	cmp	r3, #0
 801716a:	d022      	beq.n	80171b2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	68db      	ldr	r3, [r3, #12]
 8017172:	899b      	ldrh	r3, [r3, #12]
 8017174:	b29b      	uxth	r3, r3
 8017176:	b21b      	sxth	r3, r3
 8017178:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801717c:	b21c      	sxth	r4, r3
 801717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	68db      	ldr	r3, [r3, #12]
 8017184:	899b      	ldrh	r3, [r3, #12]
 8017186:	b29b      	uxth	r3, r3
 8017188:	4618      	mov	r0, r3
 801718a:	f7fa f8e9 	bl	8011360 <lwip_htons>
 801718e:	4603      	mov	r3, r0
 8017190:	b2db      	uxtb	r3, r3
 8017192:	b29b      	uxth	r3, r3
 8017194:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017198:	b29b      	uxth	r3, r3
 801719a:	4618      	mov	r0, r3
 801719c:	f7fa f8e0 	bl	8011360 <lwip_htons>
 80171a0:	4603      	mov	r3, r0
 80171a2:	b21b      	sxth	r3, r3
 80171a4:	4323      	orrs	r3, r4
 80171a6:	b21a      	sxth	r2, r3
 80171a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	68db      	ldr	r3, [r3, #12]
 80171ae:	b292      	uxth	r2, r2
 80171b0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171b6:	b29a      	uxth	r2, r3
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171bc:	4413      	add	r3, r2
 80171be:	b299      	uxth	r1, r3
 80171c0:	4b3c      	ldr	r3, [pc, #240]	; (80172b4 <tcp_receive+0xf18>)
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	b29a      	uxth	r2, r3
 80171c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	1a8a      	subs	r2, r1, r2
 80171cc:	b292      	uxth	r2, r2
 80171ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80171d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	685a      	ldr	r2, [r3, #4]
 80171d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	891b      	ldrh	r3, [r3, #8]
 80171dc:	4619      	mov	r1, r3
 80171de:	4610      	mov	r0, r2
 80171e0:	f7fb fb6e 	bl	80128c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80171e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	891c      	ldrh	r4, [r3, #8]
 80171ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	68db      	ldr	r3, [r3, #12]
 80171f0:	899b      	ldrh	r3, [r3, #12]
 80171f2:	b29b      	uxth	r3, r3
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7fa f8b3 	bl	8011360 <lwip_htons>
 80171fa:	4603      	mov	r3, r0
 80171fc:	b2db      	uxtb	r3, r3
 80171fe:	f003 0303 	and.w	r3, r3, #3
 8017202:	2b00      	cmp	r3, #0
 8017204:	d001      	beq.n	801720a <tcp_receive+0xe6e>
 8017206:	2301      	movs	r3, #1
 8017208:	e000      	b.n	801720c <tcp_receive+0xe70>
 801720a:	2300      	movs	r3, #0
 801720c:	4423      	add	r3, r4
 801720e:	b29a      	uxth	r2, r3
 8017210:	4b2a      	ldr	r3, [pc, #168]	; (80172bc <tcp_receive+0xf20>)
 8017212:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017214:	4b29      	ldr	r3, [pc, #164]	; (80172bc <tcp_receive+0xf20>)
 8017216:	881b      	ldrh	r3, [r3, #0]
 8017218:	461a      	mov	r2, r3
 801721a:	4b26      	ldr	r3, [pc, #152]	; (80172b4 <tcp_receive+0xf18>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	441a      	add	r2, r3
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017224:	6879      	ldr	r1, [r7, #4]
 8017226:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017228:	440b      	add	r3, r1
 801722a:	429a      	cmp	r2, r3
 801722c:	d019      	beq.n	8017262 <tcp_receive+0xec6>
 801722e:	4b24      	ldr	r3, [pc, #144]	; (80172c0 <tcp_receive+0xf24>)
 8017230:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8017234:	4923      	ldr	r1, [pc, #140]	; (80172c4 <tcp_receive+0xf28>)
 8017236:	4824      	ldr	r0, [pc, #144]	; (80172c8 <tcp_receive+0xf2c>)
 8017238:	f008 fb38 	bl	801f8ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801723c:	e011      	b.n	8017262 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	63bb      	str	r3, [r7, #56]	; 0x38
 8017244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017246:	2b00      	cmp	r3, #0
 8017248:	f47f aea4 	bne.w	8016f94 <tcp_receive+0xbf8>
 801724c:	e00a      	b.n	8017264 <tcp_receive+0xec8>
                break;
 801724e:	bf00      	nop
 8017250:	e008      	b.n	8017264 <tcp_receive+0xec8>
                break;
 8017252:	bf00      	nop
 8017254:	e006      	b.n	8017264 <tcp_receive+0xec8>
                  break;
 8017256:	bf00      	nop
 8017258:	e004      	b.n	8017264 <tcp_receive+0xec8>
                  break;
 801725a:	bf00      	nop
 801725c:	e002      	b.n	8017264 <tcp_receive+0xec8>
                  break;
 801725e:	bf00      	nop
 8017260:	e000      	b.n	8017264 <tcp_receive+0xec8>
                break;
 8017262:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	f001 fe8b 	bl	8018f80 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801726a:	e003      	b.n	8017274 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	f001 fe87 	bl	8018f80 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017272:	e01a      	b.n	80172aa <tcp_receive+0xf0e>
 8017274:	e019      	b.n	80172aa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8017276:	4b0f      	ldr	r3, [pc, #60]	; (80172b4 <tcp_receive+0xf18>)
 8017278:	681a      	ldr	r2, [r3, #0]
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801727e:	1ad3      	subs	r3, r2, r3
 8017280:	2b00      	cmp	r3, #0
 8017282:	db0a      	blt.n	801729a <tcp_receive+0xefe>
 8017284:	4b0b      	ldr	r3, [pc, #44]	; (80172b4 <tcp_receive+0xf18>)
 8017286:	681a      	ldr	r2, [r3, #0]
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801728c:	6879      	ldr	r1, [r7, #4]
 801728e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017290:	440b      	add	r3, r1
 8017292:	1ad3      	subs	r3, r2, r3
 8017294:	3301      	adds	r3, #1
 8017296:	2b00      	cmp	r3, #0
 8017298:	dd07      	ble.n	80172aa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	8b5b      	ldrh	r3, [r3, #26]
 801729e:	f043 0302 	orr.w	r3, r3, #2
 80172a2:	b29a      	uxth	r2, r3
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80172a8:	e7ff      	b.n	80172aa <tcp_receive+0xf0e>
 80172aa:	bf00      	nop
 80172ac:	3750      	adds	r7, #80	; 0x50
 80172ae:	46bd      	mov	sp, r7
 80172b0:	bdb0      	pop	{r4, r5, r7, pc}
 80172b2:	bf00      	nop
 80172b4:	20010204 	.word	0x20010204
 80172b8:	200101e4 	.word	0x200101e4
 80172bc:	2001020e 	.word	0x2001020e
 80172c0:	08023468 	.word	0x08023468
 80172c4:	08023810 	.word	0x08023810
 80172c8:	080234b4 	.word	0x080234b4

080172cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80172cc:	b480      	push	{r7}
 80172ce:	b083      	sub	sp, #12
 80172d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80172d2:	4b15      	ldr	r3, [pc, #84]	; (8017328 <tcp_get_next_optbyte+0x5c>)
 80172d4:	881b      	ldrh	r3, [r3, #0]
 80172d6:	1c5a      	adds	r2, r3, #1
 80172d8:	b291      	uxth	r1, r2
 80172da:	4a13      	ldr	r2, [pc, #76]	; (8017328 <tcp_get_next_optbyte+0x5c>)
 80172dc:	8011      	strh	r1, [r2, #0]
 80172de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80172e0:	4b12      	ldr	r3, [pc, #72]	; (801732c <tcp_get_next_optbyte+0x60>)
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d004      	beq.n	80172f2 <tcp_get_next_optbyte+0x26>
 80172e8:	4b11      	ldr	r3, [pc, #68]	; (8017330 <tcp_get_next_optbyte+0x64>)
 80172ea:	881b      	ldrh	r3, [r3, #0]
 80172ec:	88fa      	ldrh	r2, [r7, #6]
 80172ee:	429a      	cmp	r2, r3
 80172f0:	d208      	bcs.n	8017304 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80172f2:	4b10      	ldr	r3, [pc, #64]	; (8017334 <tcp_get_next_optbyte+0x68>)
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	3314      	adds	r3, #20
 80172f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80172fa:	88fb      	ldrh	r3, [r7, #6]
 80172fc:	683a      	ldr	r2, [r7, #0]
 80172fe:	4413      	add	r3, r2
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	e00b      	b.n	801731c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017304:	88fb      	ldrh	r3, [r7, #6]
 8017306:	b2da      	uxtb	r2, r3
 8017308:	4b09      	ldr	r3, [pc, #36]	; (8017330 <tcp_get_next_optbyte+0x64>)
 801730a:	881b      	ldrh	r3, [r3, #0]
 801730c:	b2db      	uxtb	r3, r3
 801730e:	1ad3      	subs	r3, r2, r3
 8017310:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017312:	4b06      	ldr	r3, [pc, #24]	; (801732c <tcp_get_next_optbyte+0x60>)
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	797b      	ldrb	r3, [r7, #5]
 8017318:	4413      	add	r3, r2
 801731a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801731c:	4618      	mov	r0, r3
 801731e:	370c      	adds	r7, #12
 8017320:	46bd      	mov	sp, r7
 8017322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017326:	4770      	bx	lr
 8017328:	20010200 	.word	0x20010200
 801732c:	200101fc 	.word	0x200101fc
 8017330:	200101fa 	.word	0x200101fa
 8017334:	200101f4 	.word	0x200101f4

08017338 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b084      	sub	sp, #16
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d106      	bne.n	8017354 <tcp_parseopt+0x1c>
 8017346:	4b32      	ldr	r3, [pc, #200]	; (8017410 <tcp_parseopt+0xd8>)
 8017348:	f240 727d 	movw	r2, #1917	; 0x77d
 801734c:	4931      	ldr	r1, [pc, #196]	; (8017414 <tcp_parseopt+0xdc>)
 801734e:	4832      	ldr	r0, [pc, #200]	; (8017418 <tcp_parseopt+0xe0>)
 8017350:	f008 faac 	bl	801f8ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017354:	4b31      	ldr	r3, [pc, #196]	; (801741c <tcp_parseopt+0xe4>)
 8017356:	881b      	ldrh	r3, [r3, #0]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d055      	beq.n	8017408 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801735c:	4b30      	ldr	r3, [pc, #192]	; (8017420 <tcp_parseopt+0xe8>)
 801735e:	2200      	movs	r2, #0
 8017360:	801a      	strh	r2, [r3, #0]
 8017362:	e045      	b.n	80173f0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8017364:	f7ff ffb2 	bl	80172cc <tcp_get_next_optbyte>
 8017368:	4603      	mov	r3, r0
 801736a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801736c:	7bfb      	ldrb	r3, [r7, #15]
 801736e:	2b02      	cmp	r3, #2
 8017370:	d006      	beq.n	8017380 <tcp_parseopt+0x48>
 8017372:	2b02      	cmp	r3, #2
 8017374:	dc2b      	bgt.n	80173ce <tcp_parseopt+0x96>
 8017376:	2b00      	cmp	r3, #0
 8017378:	d041      	beq.n	80173fe <tcp_parseopt+0xc6>
 801737a:	2b01      	cmp	r3, #1
 801737c:	d127      	bne.n	80173ce <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801737e:	e037      	b.n	80173f0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017380:	f7ff ffa4 	bl	80172cc <tcp_get_next_optbyte>
 8017384:	4603      	mov	r3, r0
 8017386:	2b04      	cmp	r3, #4
 8017388:	d13b      	bne.n	8017402 <tcp_parseopt+0xca>
 801738a:	4b25      	ldr	r3, [pc, #148]	; (8017420 <tcp_parseopt+0xe8>)
 801738c:	881b      	ldrh	r3, [r3, #0]
 801738e:	3301      	adds	r3, #1
 8017390:	4a22      	ldr	r2, [pc, #136]	; (801741c <tcp_parseopt+0xe4>)
 8017392:	8812      	ldrh	r2, [r2, #0]
 8017394:	4293      	cmp	r3, r2
 8017396:	da34      	bge.n	8017402 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017398:	f7ff ff98 	bl	80172cc <tcp_get_next_optbyte>
 801739c:	4603      	mov	r3, r0
 801739e:	b29b      	uxth	r3, r3
 80173a0:	021b      	lsls	r3, r3, #8
 80173a2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80173a4:	f7ff ff92 	bl	80172cc <tcp_get_next_optbyte>
 80173a8:	4603      	mov	r3, r0
 80173aa:	b29a      	uxth	r2, r3
 80173ac:	89bb      	ldrh	r3, [r7, #12]
 80173ae:	4313      	orrs	r3, r2
 80173b0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80173b2:	89bb      	ldrh	r3, [r7, #12]
 80173b4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80173b8:	d804      	bhi.n	80173c4 <tcp_parseopt+0x8c>
 80173ba:	89bb      	ldrh	r3, [r7, #12]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d001      	beq.n	80173c4 <tcp_parseopt+0x8c>
 80173c0:	89ba      	ldrh	r2, [r7, #12]
 80173c2:	e001      	b.n	80173c8 <tcp_parseopt+0x90>
 80173c4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80173cc:	e010      	b.n	80173f0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80173ce:	f7ff ff7d 	bl	80172cc <tcp_get_next_optbyte>
 80173d2:	4603      	mov	r3, r0
 80173d4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80173d6:	7afb      	ldrb	r3, [r7, #11]
 80173d8:	2b01      	cmp	r3, #1
 80173da:	d914      	bls.n	8017406 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80173dc:	7afb      	ldrb	r3, [r7, #11]
 80173de:	b29a      	uxth	r2, r3
 80173e0:	4b0f      	ldr	r3, [pc, #60]	; (8017420 <tcp_parseopt+0xe8>)
 80173e2:	881b      	ldrh	r3, [r3, #0]
 80173e4:	4413      	add	r3, r2
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	3b02      	subs	r3, #2
 80173ea:	b29a      	uxth	r2, r3
 80173ec:	4b0c      	ldr	r3, [pc, #48]	; (8017420 <tcp_parseopt+0xe8>)
 80173ee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80173f0:	4b0b      	ldr	r3, [pc, #44]	; (8017420 <tcp_parseopt+0xe8>)
 80173f2:	881a      	ldrh	r2, [r3, #0]
 80173f4:	4b09      	ldr	r3, [pc, #36]	; (801741c <tcp_parseopt+0xe4>)
 80173f6:	881b      	ldrh	r3, [r3, #0]
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d3b3      	bcc.n	8017364 <tcp_parseopt+0x2c>
 80173fc:	e004      	b.n	8017408 <tcp_parseopt+0xd0>
          return;
 80173fe:	bf00      	nop
 8017400:	e002      	b.n	8017408 <tcp_parseopt+0xd0>
            return;
 8017402:	bf00      	nop
 8017404:	e000      	b.n	8017408 <tcp_parseopt+0xd0>
            return;
 8017406:	bf00      	nop
      }
    }
  }
}
 8017408:	3710      	adds	r7, #16
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}
 801740e:	bf00      	nop
 8017410:	08023468 	.word	0x08023468
 8017414:	080238cc 	.word	0x080238cc
 8017418:	080234b4 	.word	0x080234b4
 801741c:	200101f8 	.word	0x200101f8
 8017420:	20010200 	.word	0x20010200

08017424 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017424:	b480      	push	{r7}
 8017426:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017428:	4b05      	ldr	r3, [pc, #20]	; (8017440 <tcp_trigger_input_pcb_close+0x1c>)
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	f043 0310 	orr.w	r3, r3, #16
 8017430:	b2da      	uxtb	r2, r3
 8017432:	4b03      	ldr	r3, [pc, #12]	; (8017440 <tcp_trigger_input_pcb_close+0x1c>)
 8017434:	701a      	strb	r2, [r3, #0]
}
 8017436:	bf00      	nop
 8017438:	46bd      	mov	sp, r7
 801743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743e:	4770      	bx	lr
 8017440:	20010211 	.word	0x20010211

08017444 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b084      	sub	sp, #16
 8017448:	af00      	add	r7, sp, #0
 801744a:	60f8      	str	r0, [r7, #12]
 801744c:	60b9      	str	r1, [r7, #8]
 801744e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d00a      	beq.n	801746c <tcp_route+0x28>
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	7a1b      	ldrb	r3, [r3, #8]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d006      	beq.n	801746c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	7a1b      	ldrb	r3, [r3, #8]
 8017462:	4618      	mov	r0, r3
 8017464:	f7fa ffec 	bl	8012440 <netif_get_by_index>
 8017468:	4603      	mov	r3, r0
 801746a:	e003      	b.n	8017474 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f005 fcc3 	bl	801cdf8 <ip4_route>
 8017472:	4603      	mov	r3, r0
  }
}
 8017474:	4618      	mov	r0, r3
 8017476:	3710      	adds	r7, #16
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}

0801747c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801747c:	b590      	push	{r4, r7, lr}
 801747e:	b087      	sub	sp, #28
 8017480:	af00      	add	r7, sp, #0
 8017482:	60f8      	str	r0, [r7, #12]
 8017484:	60b9      	str	r1, [r7, #8]
 8017486:	603b      	str	r3, [r7, #0]
 8017488:	4613      	mov	r3, r2
 801748a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d105      	bne.n	801749e <tcp_create_segment+0x22>
 8017492:	4b44      	ldr	r3, [pc, #272]	; (80175a4 <tcp_create_segment+0x128>)
 8017494:	22a3      	movs	r2, #163	; 0xa3
 8017496:	4944      	ldr	r1, [pc, #272]	; (80175a8 <tcp_create_segment+0x12c>)
 8017498:	4844      	ldr	r0, [pc, #272]	; (80175ac <tcp_create_segment+0x130>)
 801749a:	f008 fa07 	bl	801f8ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d105      	bne.n	80174b0 <tcp_create_segment+0x34>
 80174a4:	4b3f      	ldr	r3, [pc, #252]	; (80175a4 <tcp_create_segment+0x128>)
 80174a6:	22a4      	movs	r2, #164	; 0xa4
 80174a8:	4941      	ldr	r1, [pc, #260]	; (80175b0 <tcp_create_segment+0x134>)
 80174aa:	4840      	ldr	r0, [pc, #256]	; (80175ac <tcp_create_segment+0x130>)
 80174ac:	f008 f9fe 	bl	801f8ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80174b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80174b4:	009b      	lsls	r3, r3, #2
 80174b6:	b2db      	uxtb	r3, r3
 80174b8:	f003 0304 	and.w	r3, r3, #4
 80174bc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80174be:	2003      	movs	r0, #3
 80174c0:	f7fa fc26 	bl	8011d10 <memp_malloc>
 80174c4:	6138      	str	r0, [r7, #16]
 80174c6:	693b      	ldr	r3, [r7, #16]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d104      	bne.n	80174d6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80174cc:	68b8      	ldr	r0, [r7, #8]
 80174ce:	f7fb fb7d 	bl	8012bcc <pbuf_free>
    return NULL;
 80174d2:	2300      	movs	r3, #0
 80174d4:	e061      	b.n	801759a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80174d6:	693b      	ldr	r3, [r7, #16]
 80174d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80174dc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	2200      	movs	r2, #0
 80174e2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80174e4:	693b      	ldr	r3, [r7, #16]
 80174e6:	68ba      	ldr	r2, [r7, #8]
 80174e8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	891a      	ldrh	r2, [r3, #8]
 80174ee:	7dfb      	ldrb	r3, [r7, #23]
 80174f0:	b29b      	uxth	r3, r3
 80174f2:	429a      	cmp	r2, r3
 80174f4:	d205      	bcs.n	8017502 <tcp_create_segment+0x86>
 80174f6:	4b2b      	ldr	r3, [pc, #172]	; (80175a4 <tcp_create_segment+0x128>)
 80174f8:	22b0      	movs	r2, #176	; 0xb0
 80174fa:	492e      	ldr	r1, [pc, #184]	; (80175b4 <tcp_create_segment+0x138>)
 80174fc:	482b      	ldr	r0, [pc, #172]	; (80175ac <tcp_create_segment+0x130>)
 80174fe:	f008 f9d5 	bl	801f8ac <iprintf>
  seg->len = p->tot_len - optlen;
 8017502:	68bb      	ldr	r3, [r7, #8]
 8017504:	891a      	ldrh	r2, [r3, #8]
 8017506:	7dfb      	ldrb	r3, [r7, #23]
 8017508:	b29b      	uxth	r3, r3
 801750a:	1ad3      	subs	r3, r2, r3
 801750c:	b29a      	uxth	r2, r3
 801750e:	693b      	ldr	r3, [r7, #16]
 8017510:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017512:	2114      	movs	r1, #20
 8017514:	68b8      	ldr	r0, [r7, #8]
 8017516:	f7fb fac3 	bl	8012aa0 <pbuf_add_header>
 801751a:	4603      	mov	r3, r0
 801751c:	2b00      	cmp	r3, #0
 801751e:	d004      	beq.n	801752a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017520:	6938      	ldr	r0, [r7, #16]
 8017522:	f7fd f800 	bl	8014526 <tcp_seg_free>
    return NULL;
 8017526:	2300      	movs	r3, #0
 8017528:	e037      	b.n	801759a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801752a:	693b      	ldr	r3, [r7, #16]
 801752c:	685b      	ldr	r3, [r3, #4]
 801752e:	685a      	ldr	r2, [r3, #4]
 8017530:	693b      	ldr	r3, [r7, #16]
 8017532:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	8ada      	ldrh	r2, [r3, #22]
 8017538:	693b      	ldr	r3, [r7, #16]
 801753a:	68dc      	ldr	r4, [r3, #12]
 801753c:	4610      	mov	r0, r2
 801753e:	f7f9 ff0f 	bl	8011360 <lwip_htons>
 8017542:	4603      	mov	r3, r0
 8017544:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	8b1a      	ldrh	r2, [r3, #24]
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	68dc      	ldr	r4, [r3, #12]
 801754e:	4610      	mov	r0, r2
 8017550:	f7f9 ff06 	bl	8011360 <lwip_htons>
 8017554:	4603      	mov	r3, r0
 8017556:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017558:	693b      	ldr	r3, [r7, #16]
 801755a:	68dc      	ldr	r4, [r3, #12]
 801755c:	6838      	ldr	r0, [r7, #0]
 801755e:	f7f9 ff14 	bl	801138a <lwip_htonl>
 8017562:	4603      	mov	r3, r0
 8017564:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8017566:	7dfb      	ldrb	r3, [r7, #23]
 8017568:	089b      	lsrs	r3, r3, #2
 801756a:	b2db      	uxtb	r3, r3
 801756c:	b29b      	uxth	r3, r3
 801756e:	3305      	adds	r3, #5
 8017570:	b29b      	uxth	r3, r3
 8017572:	031b      	lsls	r3, r3, #12
 8017574:	b29a      	uxth	r2, r3
 8017576:	79fb      	ldrb	r3, [r7, #7]
 8017578:	b29b      	uxth	r3, r3
 801757a:	4313      	orrs	r3, r2
 801757c:	b29a      	uxth	r2, r3
 801757e:	693b      	ldr	r3, [r7, #16]
 8017580:	68dc      	ldr	r4, [r3, #12]
 8017582:	4610      	mov	r0, r2
 8017584:	f7f9 feec 	bl	8011360 <lwip_htons>
 8017588:	4603      	mov	r3, r0
 801758a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801758c:	693b      	ldr	r3, [r7, #16]
 801758e:	68db      	ldr	r3, [r3, #12]
 8017590:	2200      	movs	r2, #0
 8017592:	749a      	strb	r2, [r3, #18]
 8017594:	2200      	movs	r2, #0
 8017596:	74da      	strb	r2, [r3, #19]
  return seg;
 8017598:	693b      	ldr	r3, [r7, #16]
}
 801759a:	4618      	mov	r0, r3
 801759c:	371c      	adds	r7, #28
 801759e:	46bd      	mov	sp, r7
 80175a0:	bd90      	pop	{r4, r7, pc}
 80175a2:	bf00      	nop
 80175a4:	080238e8 	.word	0x080238e8
 80175a8:	0802391c 	.word	0x0802391c
 80175ac:	0802393c 	.word	0x0802393c
 80175b0:	08023964 	.word	0x08023964
 80175b4:	08023988 	.word	0x08023988

080175b8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b086      	sub	sp, #24
 80175bc:	af00      	add	r7, sp, #0
 80175be:	607b      	str	r3, [r7, #4]
 80175c0:	4603      	mov	r3, r0
 80175c2:	73fb      	strb	r3, [r7, #15]
 80175c4:	460b      	mov	r3, r1
 80175c6:	81bb      	strh	r3, [r7, #12]
 80175c8:	4613      	mov	r3, r2
 80175ca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80175cc:	89bb      	ldrh	r3, [r7, #12]
 80175ce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d105      	bne.n	80175e2 <tcp_pbuf_prealloc+0x2a>
 80175d6:	4b30      	ldr	r3, [pc, #192]	; (8017698 <tcp_pbuf_prealloc+0xe0>)
 80175d8:	22e8      	movs	r2, #232	; 0xe8
 80175da:	4930      	ldr	r1, [pc, #192]	; (801769c <tcp_pbuf_prealloc+0xe4>)
 80175dc:	4830      	ldr	r0, [pc, #192]	; (80176a0 <tcp_pbuf_prealloc+0xe8>)
 80175de:	f008 f965 	bl	801f8ac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80175e2:	6a3b      	ldr	r3, [r7, #32]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d105      	bne.n	80175f4 <tcp_pbuf_prealloc+0x3c>
 80175e8:	4b2b      	ldr	r3, [pc, #172]	; (8017698 <tcp_pbuf_prealloc+0xe0>)
 80175ea:	22e9      	movs	r2, #233	; 0xe9
 80175ec:	492d      	ldr	r1, [pc, #180]	; (80176a4 <tcp_pbuf_prealloc+0xec>)
 80175ee:	482c      	ldr	r0, [pc, #176]	; (80176a0 <tcp_pbuf_prealloc+0xe8>)
 80175f0:	f008 f95c 	bl	801f8ac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80175f4:	89ba      	ldrh	r2, [r7, #12]
 80175f6:	897b      	ldrh	r3, [r7, #10]
 80175f8:	429a      	cmp	r2, r3
 80175fa:	d221      	bcs.n	8017640 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80175fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017600:	f003 0302 	and.w	r3, r3, #2
 8017604:	2b00      	cmp	r3, #0
 8017606:	d111      	bne.n	801762c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017608:	6a3b      	ldr	r3, [r7, #32]
 801760a:	8b5b      	ldrh	r3, [r3, #26]
 801760c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017610:	2b00      	cmp	r3, #0
 8017612:	d115      	bne.n	8017640 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017618:	2b00      	cmp	r3, #0
 801761a:	d007      	beq.n	801762c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801761c:	6a3b      	ldr	r3, [r7, #32]
 801761e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8017620:	2b00      	cmp	r3, #0
 8017622:	d103      	bne.n	801762c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017624:	6a3b      	ldr	r3, [r7, #32]
 8017626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8017628:	2b00      	cmp	r3, #0
 801762a:	d009      	beq.n	8017640 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801762c:	89bb      	ldrh	r3, [r7, #12]
 801762e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8017632:	f023 0203 	bic.w	r2, r3, #3
 8017636:	897b      	ldrh	r3, [r7, #10]
 8017638:	4293      	cmp	r3, r2
 801763a:	bf28      	it	cs
 801763c:	4613      	movcs	r3, r2
 801763e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017640:	8af9      	ldrh	r1, [r7, #22]
 8017642:	7bfb      	ldrb	r3, [r7, #15]
 8017644:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017648:	4618      	mov	r0, r3
 801764a:	f7fa ffdb 	bl	8012604 <pbuf_alloc>
 801764e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017650:	693b      	ldr	r3, [r7, #16]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d101      	bne.n	801765a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017656:	2300      	movs	r3, #0
 8017658:	e019      	b.n	801768e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d006      	beq.n	8017670 <tcp_pbuf_prealloc+0xb8>
 8017662:	4b0d      	ldr	r3, [pc, #52]	; (8017698 <tcp_pbuf_prealloc+0xe0>)
 8017664:	f240 120b 	movw	r2, #267	; 0x10b
 8017668:	490f      	ldr	r1, [pc, #60]	; (80176a8 <tcp_pbuf_prealloc+0xf0>)
 801766a:	480d      	ldr	r0, [pc, #52]	; (80176a0 <tcp_pbuf_prealloc+0xe8>)
 801766c:	f008 f91e 	bl	801f8ac <iprintf>
  *oversize = p->len - length;
 8017670:	693b      	ldr	r3, [r7, #16]
 8017672:	895a      	ldrh	r2, [r3, #10]
 8017674:	89bb      	ldrh	r3, [r7, #12]
 8017676:	1ad3      	subs	r3, r2, r3
 8017678:	b29a      	uxth	r2, r3
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	89ba      	ldrh	r2, [r7, #12]
 8017682:	811a      	strh	r2, [r3, #8]
 8017684:	693b      	ldr	r3, [r7, #16]
 8017686:	891a      	ldrh	r2, [r3, #8]
 8017688:	693b      	ldr	r3, [r7, #16]
 801768a:	815a      	strh	r2, [r3, #10]
  return p;
 801768c:	693b      	ldr	r3, [r7, #16]
}
 801768e:	4618      	mov	r0, r3
 8017690:	3718      	adds	r7, #24
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	080238e8 	.word	0x080238e8
 801769c:	080239a0 	.word	0x080239a0
 80176a0:	0802393c 	.word	0x0802393c
 80176a4:	080239c4 	.word	0x080239c4
 80176a8:	080239e4 	.word	0x080239e4

080176ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b082      	sub	sp, #8
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
 80176b4:	460b      	mov	r3, r1
 80176b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d106      	bne.n	80176cc <tcp_write_checks+0x20>
 80176be:	4b33      	ldr	r3, [pc, #204]	; (801778c <tcp_write_checks+0xe0>)
 80176c0:	f240 1233 	movw	r2, #307	; 0x133
 80176c4:	4932      	ldr	r1, [pc, #200]	; (8017790 <tcp_write_checks+0xe4>)
 80176c6:	4833      	ldr	r0, [pc, #204]	; (8017794 <tcp_write_checks+0xe8>)
 80176c8:	f008 f8f0 	bl	801f8ac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	7d1b      	ldrb	r3, [r3, #20]
 80176d0:	2b04      	cmp	r3, #4
 80176d2:	d00e      	beq.n	80176f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80176d8:	2b07      	cmp	r3, #7
 80176da:	d00a      	beq.n	80176f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80176e0:	2b02      	cmp	r3, #2
 80176e2:	d006      	beq.n	80176f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80176e8:	2b03      	cmp	r3, #3
 80176ea:	d002      	beq.n	80176f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80176ec:	f06f 030a 	mvn.w	r3, #10
 80176f0:	e048      	b.n	8017784 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80176f2:	887b      	ldrh	r3, [r7, #2]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d101      	bne.n	80176fc <tcp_write_checks+0x50>
    return ERR_OK;
 80176f8:	2300      	movs	r3, #0
 80176fa:	e043      	b.n	8017784 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017702:	887a      	ldrh	r2, [r7, #2]
 8017704:	429a      	cmp	r2, r3
 8017706:	d909      	bls.n	801771c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	8b5b      	ldrh	r3, [r3, #26]
 801770c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017710:	b29a      	uxth	r2, r3
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801771a:	e033      	b.n	8017784 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017722:	2b08      	cmp	r3, #8
 8017724:	d909      	bls.n	801773a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	8b5b      	ldrh	r3, [r3, #26]
 801772a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801772e:	b29a      	uxth	r2, r3
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017738:	e024      	b.n	8017784 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017740:	2b00      	cmp	r3, #0
 8017742:	d00f      	beq.n	8017764 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017748:	2b00      	cmp	r3, #0
 801774a:	d11a      	bne.n	8017782 <tcp_write_checks+0xd6>
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017750:	2b00      	cmp	r3, #0
 8017752:	d116      	bne.n	8017782 <tcp_write_checks+0xd6>
 8017754:	4b0d      	ldr	r3, [pc, #52]	; (801778c <tcp_write_checks+0xe0>)
 8017756:	f240 1255 	movw	r2, #341	; 0x155
 801775a:	490f      	ldr	r1, [pc, #60]	; (8017798 <tcp_write_checks+0xec>)
 801775c:	480d      	ldr	r0, [pc, #52]	; (8017794 <tcp_write_checks+0xe8>)
 801775e:	f008 f8a5 	bl	801f8ac <iprintf>
 8017762:	e00e      	b.n	8017782 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017768:	2b00      	cmp	r3, #0
 801776a:	d103      	bne.n	8017774 <tcp_write_checks+0xc8>
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017770:	2b00      	cmp	r3, #0
 8017772:	d006      	beq.n	8017782 <tcp_write_checks+0xd6>
 8017774:	4b05      	ldr	r3, [pc, #20]	; (801778c <tcp_write_checks+0xe0>)
 8017776:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801777a:	4908      	ldr	r1, [pc, #32]	; (801779c <tcp_write_checks+0xf0>)
 801777c:	4805      	ldr	r0, [pc, #20]	; (8017794 <tcp_write_checks+0xe8>)
 801777e:	f008 f895 	bl	801f8ac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8017782:	2300      	movs	r3, #0
}
 8017784:	4618      	mov	r0, r3
 8017786:	3708      	adds	r7, #8
 8017788:	46bd      	mov	sp, r7
 801778a:	bd80      	pop	{r7, pc}
 801778c:	080238e8 	.word	0x080238e8
 8017790:	080239f8 	.word	0x080239f8
 8017794:	0802393c 	.word	0x0802393c
 8017798:	08023a18 	.word	0x08023a18
 801779c:	08023a54 	.word	0x08023a54

080177a0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80177a0:	b590      	push	{r4, r7, lr}
 80177a2:	b09b      	sub	sp, #108	; 0x6c
 80177a4:	af04      	add	r7, sp, #16
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	4611      	mov	r1, r2
 80177ac:	461a      	mov	r2, r3
 80177ae:	460b      	mov	r3, r1
 80177b0:	80fb      	strh	r3, [r7, #6]
 80177b2:	4613      	mov	r3, r2
 80177b4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80177b6:	2300      	movs	r3, #0
 80177b8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80177ba:	2300      	movs	r3, #0
 80177bc:	653b      	str	r3, [r7, #80]	; 0x50
 80177be:	2300      	movs	r3, #0
 80177c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80177c2:	2300      	movs	r3, #0
 80177c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80177c6:	2300      	movs	r3, #0
 80177c8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80177ca:	2300      	movs	r3, #0
 80177cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80177d0:	2300      	movs	r3, #0
 80177d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80177d6:	2300      	movs	r3, #0
 80177d8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80177da:	2300      	movs	r3, #0
 80177dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80177de:	2300      	movs	r3, #0
 80177e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d109      	bne.n	80177fc <tcp_write+0x5c>
 80177e8:	4ba4      	ldr	r3, [pc, #656]	; (8017a7c <tcp_write+0x2dc>)
 80177ea:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80177ee:	49a4      	ldr	r1, [pc, #656]	; (8017a80 <tcp_write+0x2e0>)
 80177f0:	48a4      	ldr	r0, [pc, #656]	; (8017a84 <tcp_write+0x2e4>)
 80177f2:	f008 f85b 	bl	801f8ac <iprintf>
 80177f6:	f06f 030f 	mvn.w	r3, #15
 80177fa:	e32a      	b.n	8017e52 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017802:	085b      	lsrs	r3, r3, #1
 8017804:	b29a      	uxth	r2, r3
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801780a:	4293      	cmp	r3, r2
 801780c:	bf28      	it	cs
 801780e:	4613      	movcs	r3, r2
 8017810:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017814:	2b00      	cmp	r3, #0
 8017816:	d102      	bne.n	801781e <tcp_write+0x7e>
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801781c:	e000      	b.n	8017820 <tcp_write+0x80>
 801781e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017820:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017822:	68bb      	ldr	r3, [r7, #8]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d109      	bne.n	801783c <tcp_write+0x9c>
 8017828:	4b94      	ldr	r3, [pc, #592]	; (8017a7c <tcp_write+0x2dc>)
 801782a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801782e:	4996      	ldr	r1, [pc, #600]	; (8017a88 <tcp_write+0x2e8>)
 8017830:	4894      	ldr	r0, [pc, #592]	; (8017a84 <tcp_write+0x2e4>)
 8017832:	f008 f83b 	bl	801f8ac <iprintf>
 8017836:	f06f 030f 	mvn.w	r3, #15
 801783a:	e30a      	b.n	8017e52 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801783c:	88fb      	ldrh	r3, [r7, #6]
 801783e:	4619      	mov	r1, r3
 8017840:	68f8      	ldr	r0, [r7, #12]
 8017842:	f7ff ff33 	bl	80176ac <tcp_write_checks>
 8017846:	4603      	mov	r3, r0
 8017848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801784c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017850:	2b00      	cmp	r3, #0
 8017852:	d002      	beq.n	801785a <tcp_write+0xba>
    return err;
 8017854:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017858:	e2fb      	b.n	8017e52 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017860:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017864:	2300      	movs	r3, #0
 8017866:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801786e:	2b00      	cmp	r3, #0
 8017870:	f000 80f6 	beq.w	8017a60 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017878:	653b      	str	r3, [r7, #80]	; 0x50
 801787a:	e002      	b.n	8017882 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801787c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	2b00      	cmp	r3, #0
 8017888:	d1f8      	bne.n	801787c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801788a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801788c:	7a9b      	ldrb	r3, [r3, #10]
 801788e:	009b      	lsls	r3, r3, #2
 8017890:	b29b      	uxth	r3, r3
 8017892:	f003 0304 	and.w	r3, r3, #4
 8017896:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017898:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801789a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801789c:	891b      	ldrh	r3, [r3, #8]
 801789e:	4619      	mov	r1, r3
 80178a0:	8c3b      	ldrh	r3, [r7, #32]
 80178a2:	440b      	add	r3, r1
 80178a4:	429a      	cmp	r2, r3
 80178a6:	da06      	bge.n	80178b6 <tcp_write+0x116>
 80178a8:	4b74      	ldr	r3, [pc, #464]	; (8017a7c <tcp_write+0x2dc>)
 80178aa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80178ae:	4977      	ldr	r1, [pc, #476]	; (8017a8c <tcp_write+0x2ec>)
 80178b0:	4874      	ldr	r0, [pc, #464]	; (8017a84 <tcp_write+0x2e4>)
 80178b2:	f007 fffb 	bl	801f8ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80178b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178b8:	891a      	ldrh	r2, [r3, #8]
 80178ba:	8c3b      	ldrh	r3, [r7, #32]
 80178bc:	4413      	add	r3, r2
 80178be:	b29b      	uxth	r3, r3
 80178c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80178c2:	1ad3      	subs	r3, r2, r3
 80178c4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80178cc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80178ce:	8a7b      	ldrh	r3, [r7, #18]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d026      	beq.n	8017922 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80178d4:	8a7b      	ldrh	r3, [r7, #18]
 80178d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80178d8:	429a      	cmp	r2, r3
 80178da:	d206      	bcs.n	80178ea <tcp_write+0x14a>
 80178dc:	4b67      	ldr	r3, [pc, #412]	; (8017a7c <tcp_write+0x2dc>)
 80178de:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80178e2:	496b      	ldr	r1, [pc, #428]	; (8017a90 <tcp_write+0x2f0>)
 80178e4:	4867      	ldr	r0, [pc, #412]	; (8017a84 <tcp_write+0x2e4>)
 80178e6:	f007 ffe1 	bl	801f8ac <iprintf>
      seg = last_unsent;
 80178ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80178ec:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80178ee:	8a7b      	ldrh	r3, [r7, #18]
 80178f0:	88fa      	ldrh	r2, [r7, #6]
 80178f2:	4293      	cmp	r3, r2
 80178f4:	bf28      	it	cs
 80178f6:	4613      	movcs	r3, r2
 80178f8:	b29b      	uxth	r3, r3
 80178fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80178fc:	4293      	cmp	r3, r2
 80178fe:	bf28      	it	cs
 8017900:	4613      	movcs	r3, r2
 8017902:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017904:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017908:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801790a:	4413      	add	r3, r2
 801790c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017910:	8a7a      	ldrh	r2, [r7, #18]
 8017912:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017914:	1ad3      	subs	r3, r2, r3
 8017916:	b29b      	uxth	r3, r3
 8017918:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801791a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801791c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801791e:	1ad3      	subs	r3, r2, r3
 8017920:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017922:	8a7b      	ldrh	r3, [r7, #18]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d00b      	beq.n	8017940 <tcp_write+0x1a0>
 8017928:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801792c:	88fb      	ldrh	r3, [r7, #6]
 801792e:	429a      	cmp	r2, r3
 8017930:	d006      	beq.n	8017940 <tcp_write+0x1a0>
 8017932:	4b52      	ldr	r3, [pc, #328]	; (8017a7c <tcp_write+0x2dc>)
 8017934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017938:	4956      	ldr	r1, [pc, #344]	; (8017a94 <tcp_write+0x2f4>)
 801793a:	4852      	ldr	r0, [pc, #328]	; (8017a84 <tcp_write+0x2e4>)
 801793c:	f007 ffb6 	bl	801f8ac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017944:	88fb      	ldrh	r3, [r7, #6]
 8017946:	429a      	cmp	r2, r3
 8017948:	f080 8167 	bcs.w	8017c1a <tcp_write+0x47a>
 801794c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801794e:	2b00      	cmp	r3, #0
 8017950:	f000 8163 	beq.w	8017c1a <tcp_write+0x47a>
 8017954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017956:	891b      	ldrh	r3, [r3, #8]
 8017958:	2b00      	cmp	r3, #0
 801795a:	f000 815e 	beq.w	8017c1a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801795e:	88fa      	ldrh	r2, [r7, #6]
 8017960:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017964:	1ad2      	subs	r2, r2, r3
 8017966:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017968:	4293      	cmp	r3, r2
 801796a:	bfa8      	it	ge
 801796c:	4613      	movge	r3, r2
 801796e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017972:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017974:	797b      	ldrb	r3, [r7, #5]
 8017976:	f003 0301 	and.w	r3, r3, #1
 801797a:	2b00      	cmp	r3, #0
 801797c:	d027      	beq.n	80179ce <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801797e:	f107 0012 	add.w	r0, r7, #18
 8017982:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017984:	8bf9      	ldrh	r1, [r7, #30]
 8017986:	2301      	movs	r3, #1
 8017988:	9302      	str	r3, [sp, #8]
 801798a:	797b      	ldrb	r3, [r7, #5]
 801798c:	9301      	str	r3, [sp, #4]
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	9300      	str	r3, [sp, #0]
 8017992:	4603      	mov	r3, r0
 8017994:	2000      	movs	r0, #0
 8017996:	f7ff fe0f 	bl	80175b8 <tcp_pbuf_prealloc>
 801799a:	6578      	str	r0, [r7, #84]	; 0x54
 801799c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801799e:	2b00      	cmp	r3, #0
 80179a0:	f000 8225 	beq.w	8017dee <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80179a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80179a6:	6858      	ldr	r0, [r3, #4]
 80179a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80179ac:	68ba      	ldr	r2, [r7, #8]
 80179ae:	4413      	add	r3, r2
 80179b0:	8bfa      	ldrh	r2, [r7, #30]
 80179b2:	4619      	mov	r1, r3
 80179b4:	f008 f9df 	bl	801fd76 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80179b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80179ba:	f7fb f995 	bl	8012ce8 <pbuf_clen>
 80179be:	4603      	mov	r3, r0
 80179c0:	461a      	mov	r2, r3
 80179c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80179c6:	4413      	add	r3, r2
 80179c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80179cc:	e041      	b.n	8017a52 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80179ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	637b      	str	r3, [r7, #52]	; 0x34
 80179d4:	e002      	b.n	80179dc <tcp_write+0x23c>
 80179d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	637b      	str	r3, [r7, #52]	; 0x34
 80179dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d1f8      	bne.n	80179d6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80179e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179e6:	7b1b      	ldrb	r3, [r3, #12]
 80179e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d115      	bne.n	8017a1c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80179f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179f2:	685b      	ldr	r3, [r3, #4]
 80179f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80179f6:	8952      	ldrh	r2, [r2, #10]
 80179f8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80179fa:	68ba      	ldr	r2, [r7, #8]
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d10d      	bne.n	8017a1c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017a00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d006      	beq.n	8017a16 <tcp_write+0x276>
 8017a08:	4b1c      	ldr	r3, [pc, #112]	; (8017a7c <tcp_write+0x2dc>)
 8017a0a:	f240 2231 	movw	r2, #561	; 0x231
 8017a0e:	4922      	ldr	r1, [pc, #136]	; (8017a98 <tcp_write+0x2f8>)
 8017a10:	481c      	ldr	r0, [pc, #112]	; (8017a84 <tcp_write+0x2e4>)
 8017a12:	f007 ff4b 	bl	801f8ac <iprintf>
          extendlen = seglen;
 8017a16:	8bfb      	ldrh	r3, [r7, #30]
 8017a18:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017a1a:	e01a      	b.n	8017a52 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017a1c:	8bfb      	ldrh	r3, [r7, #30]
 8017a1e:	2201      	movs	r2, #1
 8017a20:	4619      	mov	r1, r3
 8017a22:	2000      	movs	r0, #0
 8017a24:	f7fa fdee 	bl	8012604 <pbuf_alloc>
 8017a28:	6578      	str	r0, [r7, #84]	; 0x54
 8017a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	f000 81e0 	beq.w	8017df2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017a32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017a36:	68ba      	ldr	r2, [r7, #8]
 8017a38:	441a      	add	r2, r3
 8017a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a3c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017a3e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017a40:	f7fb f952 	bl	8012ce8 <pbuf_clen>
 8017a44:	4603      	mov	r3, r0
 8017a46:	461a      	mov	r2, r3
 8017a48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017a4c:	4413      	add	r3, r2
 8017a4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017a52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017a56:	8bfb      	ldrh	r3, [r7, #30]
 8017a58:	4413      	add	r3, r2
 8017a5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017a5e:	e0dc      	b.n	8017c1a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	f000 80d7 	beq.w	8017c1a <tcp_write+0x47a>
 8017a6c:	4b03      	ldr	r3, [pc, #12]	; (8017a7c <tcp_write+0x2dc>)
 8017a6e:	f240 224a 	movw	r2, #586	; 0x24a
 8017a72:	490a      	ldr	r1, [pc, #40]	; (8017a9c <tcp_write+0x2fc>)
 8017a74:	4803      	ldr	r0, [pc, #12]	; (8017a84 <tcp_write+0x2e4>)
 8017a76:	f007 ff19 	bl	801f8ac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017a7a:	e0ce      	b.n	8017c1a <tcp_write+0x47a>
 8017a7c:	080238e8 	.word	0x080238e8
 8017a80:	08023a88 	.word	0x08023a88
 8017a84:	0802393c 	.word	0x0802393c
 8017a88:	08023aa0 	.word	0x08023aa0
 8017a8c:	08023ad4 	.word	0x08023ad4
 8017a90:	08023aec 	.word	0x08023aec
 8017a94:	08023b0c 	.word	0x08023b0c
 8017a98:	08023b2c 	.word	0x08023b2c
 8017a9c:	08023b58 	.word	0x08023b58
    struct pbuf *p;
    u16_t left = len - pos;
 8017aa0:	88fa      	ldrh	r2, [r7, #6]
 8017aa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017aa6:	1ad3      	subs	r3, r2, r3
 8017aa8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017aaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017aae:	b29b      	uxth	r3, r3
 8017ab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017ab2:	1ad3      	subs	r3, r2, r3
 8017ab4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017ab6:	8b7a      	ldrh	r2, [r7, #26]
 8017ab8:	8bbb      	ldrh	r3, [r7, #28]
 8017aba:	4293      	cmp	r3, r2
 8017abc:	bf28      	it	cs
 8017abe:	4613      	movcs	r3, r2
 8017ac0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017ac2:	797b      	ldrb	r3, [r7, #5]
 8017ac4:	f003 0301 	and.w	r3, r3, #1
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d036      	beq.n	8017b3a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017acc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017ad0:	b29a      	uxth	r2, r3
 8017ad2:	8b3b      	ldrh	r3, [r7, #24]
 8017ad4:	4413      	add	r3, r2
 8017ad6:	b299      	uxth	r1, r3
 8017ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	bf0c      	ite	eq
 8017ade:	2301      	moveq	r3, #1
 8017ae0:	2300      	movne	r3, #0
 8017ae2:	b2db      	uxtb	r3, r3
 8017ae4:	f107 0012 	add.w	r0, r7, #18
 8017ae8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017aea:	9302      	str	r3, [sp, #8]
 8017aec:	797b      	ldrb	r3, [r7, #5]
 8017aee:	9301      	str	r3, [sp, #4]
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	9300      	str	r3, [sp, #0]
 8017af4:	4603      	mov	r3, r0
 8017af6:	2036      	movs	r0, #54	; 0x36
 8017af8:	f7ff fd5e 	bl	80175b8 <tcp_pbuf_prealloc>
 8017afc:	6338      	str	r0, [r7, #48]	; 0x30
 8017afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	f000 8178 	beq.w	8017df6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b08:	895b      	ldrh	r3, [r3, #10]
 8017b0a:	8b3a      	ldrh	r2, [r7, #24]
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d906      	bls.n	8017b1e <tcp_write+0x37e>
 8017b10:	4b8c      	ldr	r3, [pc, #560]	; (8017d44 <tcp_write+0x5a4>)
 8017b12:	f240 2266 	movw	r2, #614	; 0x266
 8017b16:	498c      	ldr	r1, [pc, #560]	; (8017d48 <tcp_write+0x5a8>)
 8017b18:	488c      	ldr	r0, [pc, #560]	; (8017d4c <tcp_write+0x5ac>)
 8017b1a:	f007 fec7 	bl	801f8ac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b20:	685a      	ldr	r2, [r3, #4]
 8017b22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017b26:	18d0      	adds	r0, r2, r3
 8017b28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b2c:	68ba      	ldr	r2, [r7, #8]
 8017b2e:	4413      	add	r3, r2
 8017b30:	8b3a      	ldrh	r2, [r7, #24]
 8017b32:	4619      	mov	r1, r3
 8017b34:	f008 f91f 	bl	801fd76 <memcpy>
 8017b38:	e02f      	b.n	8017b9a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017b3a:	8a7b      	ldrh	r3, [r7, #18]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d006      	beq.n	8017b4e <tcp_write+0x3ae>
 8017b40:	4b80      	ldr	r3, [pc, #512]	; (8017d44 <tcp_write+0x5a4>)
 8017b42:	f240 2271 	movw	r2, #625	; 0x271
 8017b46:	4982      	ldr	r1, [pc, #520]	; (8017d50 <tcp_write+0x5b0>)
 8017b48:	4880      	ldr	r0, [pc, #512]	; (8017d4c <tcp_write+0x5ac>)
 8017b4a:	f007 feaf 	bl	801f8ac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017b4e:	8b3b      	ldrh	r3, [r7, #24]
 8017b50:	2201      	movs	r2, #1
 8017b52:	4619      	mov	r1, r3
 8017b54:	2036      	movs	r0, #54	; 0x36
 8017b56:	f7fa fd55 	bl	8012604 <pbuf_alloc>
 8017b5a:	6178      	str	r0, [r7, #20]
 8017b5c:	697b      	ldr	r3, [r7, #20]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	f000 814b 	beq.w	8017dfa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017b64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017b68:	68ba      	ldr	r2, [r7, #8]
 8017b6a:	441a      	add	r2, r3
 8017b6c:	697b      	ldr	r3, [r7, #20]
 8017b6e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017b70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017b74:	b29b      	uxth	r3, r3
 8017b76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	2036      	movs	r0, #54	; 0x36
 8017b7e:	f7fa fd41 	bl	8012604 <pbuf_alloc>
 8017b82:	6338      	str	r0, [r7, #48]	; 0x30
 8017b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d103      	bne.n	8017b92 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017b8a:	6978      	ldr	r0, [r7, #20]
 8017b8c:	f7fb f81e 	bl	8012bcc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017b90:	e136      	b.n	8017e00 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017b92:	6979      	ldr	r1, [r7, #20]
 8017b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b96:	f7fb f8e7 	bl	8012d68 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b9c:	f7fb f8a4 	bl	8012ce8 <pbuf_clen>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	461a      	mov	r2, r3
 8017ba4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017ba8:	4413      	add	r3, r2
 8017baa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017bae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017bb2:	2b09      	cmp	r3, #9
 8017bb4:	d903      	bls.n	8017bbe <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017bb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bb8:	f7fb f808 	bl	8012bcc <pbuf_free>
      goto memerr;
 8017bbc:	e120      	b.n	8017e00 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017bc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017bc6:	441a      	add	r2, r3
 8017bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bcc:	9300      	str	r3, [sp, #0]
 8017bce:	4613      	mov	r3, r2
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017bd4:	68f8      	ldr	r0, [r7, #12]
 8017bd6:	f7ff fc51 	bl	801747c <tcp_create_segment>
 8017bda:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	f000 810d 	beq.w	8017dfe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d102      	bne.n	8017bf0 <tcp_write+0x450>
      queue = seg;
 8017bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bec:	647b      	str	r3, [r7, #68]	; 0x44
 8017bee:	e00c      	b.n	8017c0a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d106      	bne.n	8017c04 <tcp_write+0x464>
 8017bf6:	4b53      	ldr	r3, [pc, #332]	; (8017d44 <tcp_write+0x5a4>)
 8017bf8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017bfc:	4955      	ldr	r1, [pc, #340]	; (8017d54 <tcp_write+0x5b4>)
 8017bfe:	4853      	ldr	r0, [pc, #332]	; (8017d4c <tcp_write+0x5ac>)
 8017c00:	f007 fe54 	bl	801f8ac <iprintf>
      prev_seg->next = seg;
 8017c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017c08:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c0c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017c0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c12:	8b3b      	ldrh	r3, [r7, #24]
 8017c14:	4413      	add	r3, r2
 8017c16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8017c1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c1e:	88fb      	ldrh	r3, [r7, #6]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	f4ff af3d 	bcc.w	8017aa0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017c26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d02c      	beq.n	8017c86 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c32:	e01e      	b.n	8017c72 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c36:	891a      	ldrh	r2, [r3, #8]
 8017c38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c3a:	4413      	add	r3, r2
 8017c3c:	b29a      	uxth	r2, r3
 8017c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c40:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d110      	bne.n	8017c6c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c4c:	685b      	ldr	r3, [r3, #4]
 8017c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c50:	8952      	ldrh	r2, [r2, #10]
 8017c52:	4413      	add	r3, r2
 8017c54:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017c56:	68b9      	ldr	r1, [r7, #8]
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f008 f88c 	bl	801fd76 <memcpy>
        p->len += oversize_used;
 8017c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c60:	895a      	ldrh	r2, [r3, #10]
 8017c62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c64:	4413      	add	r3, r2
 8017c66:	b29a      	uxth	r2, r3
 8017c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c6a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d1dd      	bne.n	8017c34 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c7a:	891a      	ldrh	r2, [r3, #8]
 8017c7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c7e:	4413      	add	r3, r2
 8017c80:	b29a      	uxth	r2, r3
 8017c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c84:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017c86:	8a7a      	ldrh	r2, [r7, #18]
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d018      	beq.n	8017cc6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d106      	bne.n	8017ca8 <tcp_write+0x508>
 8017c9a:	4b2a      	ldr	r3, [pc, #168]	; (8017d44 <tcp_write+0x5a4>)
 8017c9c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8017ca0:	492d      	ldr	r1, [pc, #180]	; (8017d58 <tcp_write+0x5b8>)
 8017ca2:	482a      	ldr	r0, [pc, #168]	; (8017d4c <tcp_write+0x5ac>)
 8017ca4:	f007 fe02 	bl	801f8ac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017caa:	685b      	ldr	r3, [r3, #4]
 8017cac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7fb f85a 	bl	8012d68 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cb6:	891a      	ldrh	r2, [r3, #8]
 8017cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017cba:	891b      	ldrh	r3, [r3, #8]
 8017cbc:	4413      	add	r3, r2
 8017cbe:	b29a      	uxth	r2, r3
 8017cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cc2:	811a      	strh	r2, [r3, #8]
 8017cc4:	e037      	b.n	8017d36 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017cc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d034      	beq.n	8017d36 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d003      	beq.n	8017cda <tcp_write+0x53a>
 8017cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cd4:	685b      	ldr	r3, [r3, #4]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d106      	bne.n	8017ce8 <tcp_write+0x548>
 8017cda:	4b1a      	ldr	r3, [pc, #104]	; (8017d44 <tcp_write+0x5a4>)
 8017cdc:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017ce0:	491e      	ldr	r1, [pc, #120]	; (8017d5c <tcp_write+0x5bc>)
 8017ce2:	481a      	ldr	r0, [pc, #104]	; (8017d4c <tcp_write+0x5ac>)
 8017ce4:	f007 fde2 	bl	801f8ac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cea:	685b      	ldr	r3, [r3, #4]
 8017cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8017cee:	e009      	b.n	8017d04 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf2:	891a      	ldrh	r2, [r3, #8]
 8017cf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017cf6:	4413      	add	r3, r2
 8017cf8:	b29a      	uxth	r2, r3
 8017cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cfc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d1f1      	bne.n	8017cf0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d0e:	891a      	ldrh	r2, [r3, #8]
 8017d10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d12:	4413      	add	r3, r2
 8017d14:	b29a      	uxth	r2, r3
 8017d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d18:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d1c:	895a      	ldrh	r2, [r3, #10]
 8017d1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d20:	4413      	add	r3, r2
 8017d22:	b29a      	uxth	r2, r3
 8017d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d26:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d2a:	891a      	ldrh	r2, [r3, #8]
 8017d2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d2e:	4413      	add	r3, r2
 8017d30:	b29a      	uxth	r2, r3
 8017d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d34:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d111      	bne.n	8017d60 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d40:	66da      	str	r2, [r3, #108]	; 0x6c
 8017d42:	e010      	b.n	8017d66 <tcp_write+0x5c6>
 8017d44:	080238e8 	.word	0x080238e8
 8017d48:	08023b88 	.word	0x08023b88
 8017d4c:	0802393c 	.word	0x0802393c
 8017d50:	08023bc8 	.word	0x08023bc8
 8017d54:	08023bd8 	.word	0x08023bd8
 8017d58:	08023bec 	.word	0x08023bec
 8017d5c:	08023c24 	.word	0x08023c24
  } else {
    last_unsent->next = queue;
 8017d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d64:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017d6a:	88fb      	ldrh	r3, [r7, #6]
 8017d6c:	441a      	add	r2, r3
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017d78:	88fb      	ldrh	r3, [r7, #6]
 8017d7a:	1ad3      	subs	r3, r2, r3
 8017d7c:	b29a      	uxth	r2, r3
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017d8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d00e      	beq.n	8017db6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d10a      	bne.n	8017db6 <tcp_write+0x616>
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d106      	bne.n	8017db6 <tcp_write+0x616>
 8017da8:	4b2c      	ldr	r3, [pc, #176]	; (8017e5c <tcp_write+0x6bc>)
 8017daa:	f240 3212 	movw	r2, #786	; 0x312
 8017dae:	492c      	ldr	r1, [pc, #176]	; (8017e60 <tcp_write+0x6c0>)
 8017db0:	482c      	ldr	r0, [pc, #176]	; (8017e64 <tcp_write+0x6c4>)
 8017db2:	f007 fd7b 	bl	801f8ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d016      	beq.n	8017dea <tcp_write+0x64a>
 8017dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017dbe:	68db      	ldr	r3, [r3, #12]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d012      	beq.n	8017dea <tcp_write+0x64a>
 8017dc4:	797b      	ldrb	r3, [r7, #5]
 8017dc6:	f003 0302 	and.w	r3, r3, #2
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d10d      	bne.n	8017dea <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017dd0:	68db      	ldr	r3, [r3, #12]
 8017dd2:	899b      	ldrh	r3, [r3, #12]
 8017dd4:	b29c      	uxth	r4, r3
 8017dd6:	2008      	movs	r0, #8
 8017dd8:	f7f9 fac2 	bl	8011360 <lwip_htons>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	461a      	mov	r2, r3
 8017de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017de2:	68db      	ldr	r3, [r3, #12]
 8017de4:	4322      	orrs	r2, r4
 8017de6:	b292      	uxth	r2, r2
 8017de8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017dea:	2300      	movs	r3, #0
 8017dec:	e031      	b.n	8017e52 <tcp_write+0x6b2>
          goto memerr;
 8017dee:	bf00      	nop
 8017df0:	e006      	b.n	8017e00 <tcp_write+0x660>
            goto memerr;
 8017df2:	bf00      	nop
 8017df4:	e004      	b.n	8017e00 <tcp_write+0x660>
        goto memerr;
 8017df6:	bf00      	nop
 8017df8:	e002      	b.n	8017e00 <tcp_write+0x660>
        goto memerr;
 8017dfa:	bf00      	nop
 8017dfc:	e000      	b.n	8017e00 <tcp_write+0x660>
      goto memerr;
 8017dfe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	8b5b      	ldrh	r3, [r3, #26]
 8017e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e08:	b29a      	uxth	r2, r3
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d002      	beq.n	8017e1a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017e14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017e16:	f7fa fed9 	bl	8012bcc <pbuf_free>
  }
  if (queue != NULL) {
 8017e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d002      	beq.n	8017e26 <tcp_write+0x686>
    tcp_segs_free(queue);
 8017e20:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017e22:	f7fc fb6b 	bl	80144fc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d00e      	beq.n	8017e4e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d10a      	bne.n	8017e4e <tcp_write+0x6ae>
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d106      	bne.n	8017e4e <tcp_write+0x6ae>
 8017e40:	4b06      	ldr	r3, [pc, #24]	; (8017e5c <tcp_write+0x6bc>)
 8017e42:	f240 3227 	movw	r2, #807	; 0x327
 8017e46:	4906      	ldr	r1, [pc, #24]	; (8017e60 <tcp_write+0x6c0>)
 8017e48:	4806      	ldr	r0, [pc, #24]	; (8017e64 <tcp_write+0x6c4>)
 8017e4a:	f007 fd2f 	bl	801f8ac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017e52:	4618      	mov	r0, r3
 8017e54:	375c      	adds	r7, #92	; 0x5c
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd90      	pop	{r4, r7, pc}
 8017e5a:	bf00      	nop
 8017e5c:	080238e8 	.word	0x080238e8
 8017e60:	08023c5c 	.word	0x08023c5c
 8017e64:	0802393c 	.word	0x0802393c

08017e68 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017e68:	b590      	push	{r4, r7, lr}
 8017e6a:	b08b      	sub	sp, #44	; 0x2c
 8017e6c:	af02      	add	r7, sp, #8
 8017e6e:	6078      	str	r0, [r7, #4]
 8017e70:	460b      	mov	r3, r1
 8017e72:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017e74:	2300      	movs	r3, #0
 8017e76:	61fb      	str	r3, [r7, #28]
 8017e78:	2300      	movs	r3, #0
 8017e7a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d106      	bne.n	8017e94 <tcp_split_unsent_seg+0x2c>
 8017e86:	4b95      	ldr	r3, [pc, #596]	; (80180dc <tcp_split_unsent_seg+0x274>)
 8017e88:	f240 324b 	movw	r2, #843	; 0x34b
 8017e8c:	4994      	ldr	r1, [pc, #592]	; (80180e0 <tcp_split_unsent_seg+0x278>)
 8017e8e:	4895      	ldr	r0, [pc, #596]	; (80180e4 <tcp_split_unsent_seg+0x27c>)
 8017e90:	f007 fd0c 	bl	801f8ac <iprintf>

  useg = pcb->unsent;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e98:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017e9a:	697b      	ldr	r3, [r7, #20]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d102      	bne.n	8017ea6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ea4:	e116      	b.n	80180d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8017ea6:	887b      	ldrh	r3, [r7, #2]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d109      	bne.n	8017ec0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017eac:	4b8b      	ldr	r3, [pc, #556]	; (80180dc <tcp_split_unsent_seg+0x274>)
 8017eae:	f240 3253 	movw	r2, #851	; 0x353
 8017eb2:	498d      	ldr	r1, [pc, #564]	; (80180e8 <tcp_split_unsent_seg+0x280>)
 8017eb4:	488b      	ldr	r0, [pc, #556]	; (80180e4 <tcp_split_unsent_seg+0x27c>)
 8017eb6:	f007 fcf9 	bl	801f8ac <iprintf>
    return ERR_VAL;
 8017eba:	f06f 0305 	mvn.w	r3, #5
 8017ebe:	e109      	b.n	80180d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017ec0:	697b      	ldr	r3, [r7, #20]
 8017ec2:	891b      	ldrh	r3, [r3, #8]
 8017ec4:	887a      	ldrh	r2, [r7, #2]
 8017ec6:	429a      	cmp	r2, r3
 8017ec8:	d301      	bcc.n	8017ece <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8017eca:	2300      	movs	r3, #0
 8017ecc:	e102      	b.n	80180d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ed2:	887a      	ldrh	r2, [r7, #2]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	d906      	bls.n	8017ee6 <tcp_split_unsent_seg+0x7e>
 8017ed8:	4b80      	ldr	r3, [pc, #512]	; (80180dc <tcp_split_unsent_seg+0x274>)
 8017eda:	f240 325b 	movw	r2, #859	; 0x35b
 8017ede:	4983      	ldr	r1, [pc, #524]	; (80180ec <tcp_split_unsent_seg+0x284>)
 8017ee0:	4880      	ldr	r0, [pc, #512]	; (80180e4 <tcp_split_unsent_seg+0x27c>)
 8017ee2:	f007 fce3 	bl	801f8ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	891b      	ldrh	r3, [r3, #8]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d106      	bne.n	8017efc <tcp_split_unsent_seg+0x94>
 8017eee:	4b7b      	ldr	r3, [pc, #492]	; (80180dc <tcp_split_unsent_seg+0x274>)
 8017ef0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017ef4:	497e      	ldr	r1, [pc, #504]	; (80180f0 <tcp_split_unsent_seg+0x288>)
 8017ef6:	487b      	ldr	r0, [pc, #492]	; (80180e4 <tcp_split_unsent_seg+0x27c>)
 8017ef8:	f007 fcd8 	bl	801f8ac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017efc:	697b      	ldr	r3, [r7, #20]
 8017efe:	7a9b      	ldrb	r3, [r3, #10]
 8017f00:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017f02:	7bfb      	ldrb	r3, [r7, #15]
 8017f04:	009b      	lsls	r3, r3, #2
 8017f06:	b2db      	uxtb	r3, r3
 8017f08:	f003 0304 	and.w	r3, r3, #4
 8017f0c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017f0e:	697b      	ldr	r3, [r7, #20]
 8017f10:	891a      	ldrh	r2, [r3, #8]
 8017f12:	887b      	ldrh	r3, [r7, #2]
 8017f14:	1ad3      	subs	r3, r2, r3
 8017f16:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017f18:	7bbb      	ldrb	r3, [r7, #14]
 8017f1a:	b29a      	uxth	r2, r3
 8017f1c:	89bb      	ldrh	r3, [r7, #12]
 8017f1e:	4413      	add	r3, r2
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017f26:	4619      	mov	r1, r3
 8017f28:	2036      	movs	r0, #54	; 0x36
 8017f2a:	f7fa fb6b 	bl	8012604 <pbuf_alloc>
 8017f2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017f30:	693b      	ldr	r3, [r7, #16]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	f000 80b7 	beq.w	80180a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017f38:	697b      	ldr	r3, [r7, #20]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	891a      	ldrh	r2, [r3, #8]
 8017f3e:	697b      	ldr	r3, [r7, #20]
 8017f40:	891b      	ldrh	r3, [r3, #8]
 8017f42:	1ad3      	subs	r3, r2, r3
 8017f44:	b29a      	uxth	r2, r3
 8017f46:	887b      	ldrh	r3, [r7, #2]
 8017f48:	4413      	add	r3, r2
 8017f4a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017f4c:	697b      	ldr	r3, [r7, #20]
 8017f4e:	6858      	ldr	r0, [r3, #4]
 8017f50:	693b      	ldr	r3, [r7, #16]
 8017f52:	685a      	ldr	r2, [r3, #4]
 8017f54:	7bbb      	ldrb	r3, [r7, #14]
 8017f56:	18d1      	adds	r1, r2, r3
 8017f58:	897b      	ldrh	r3, [r7, #10]
 8017f5a:	89ba      	ldrh	r2, [r7, #12]
 8017f5c:	f7fb f83c 	bl	8012fd8 <pbuf_copy_partial>
 8017f60:	4603      	mov	r3, r0
 8017f62:	461a      	mov	r2, r3
 8017f64:	89bb      	ldrh	r3, [r7, #12]
 8017f66:	4293      	cmp	r3, r2
 8017f68:	f040 809f 	bne.w	80180aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017f6c:	697b      	ldr	r3, [r7, #20]
 8017f6e:	68db      	ldr	r3, [r3, #12]
 8017f70:	899b      	ldrh	r3, [r3, #12]
 8017f72:	b29b      	uxth	r3, r3
 8017f74:	4618      	mov	r0, r3
 8017f76:	f7f9 f9f3 	bl	8011360 <lwip_htons>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	b2db      	uxtb	r3, r3
 8017f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f82:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017f84:	2300      	movs	r3, #0
 8017f86:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8017f88:	7efb      	ldrb	r3, [r7, #27]
 8017f8a:	f003 0308 	and.w	r3, r3, #8
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d007      	beq.n	8017fa2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017f92:	7efb      	ldrb	r3, [r7, #27]
 8017f94:	f023 0308 	bic.w	r3, r3, #8
 8017f98:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017f9a:	7ebb      	ldrb	r3, [r7, #26]
 8017f9c:	f043 0308 	orr.w	r3, r3, #8
 8017fa0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017fa2:	7efb      	ldrb	r3, [r7, #27]
 8017fa4:	f003 0301 	and.w	r3, r3, #1
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d007      	beq.n	8017fbc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017fac:	7efb      	ldrb	r3, [r7, #27]
 8017fae:	f023 0301 	bic.w	r3, r3, #1
 8017fb2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017fb4:	7ebb      	ldrb	r3, [r7, #26]
 8017fb6:	f043 0301 	orr.w	r3, r3, #1
 8017fba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017fbc:	697b      	ldr	r3, [r7, #20]
 8017fbe:	68db      	ldr	r3, [r3, #12]
 8017fc0:	685b      	ldr	r3, [r3, #4]
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7f9 f9e1 	bl	801138a <lwip_htonl>
 8017fc8:	4602      	mov	r2, r0
 8017fca:	887b      	ldrh	r3, [r7, #2]
 8017fcc:	18d1      	adds	r1, r2, r3
 8017fce:	7eba      	ldrb	r2, [r7, #26]
 8017fd0:	7bfb      	ldrb	r3, [r7, #15]
 8017fd2:	9300      	str	r3, [sp, #0]
 8017fd4:	460b      	mov	r3, r1
 8017fd6:	6939      	ldr	r1, [r7, #16]
 8017fd8:	6878      	ldr	r0, [r7, #4]
 8017fda:	f7ff fa4f 	bl	801747c <tcp_create_segment>
 8017fde:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017fe0:	69fb      	ldr	r3, [r7, #28]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d063      	beq.n	80180ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017fe6:	697b      	ldr	r3, [r7, #20]
 8017fe8:	685b      	ldr	r3, [r3, #4]
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7fa fe7c 	bl	8012ce8 <pbuf_clen>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	461a      	mov	r2, r3
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ffa:	1a9b      	subs	r3, r3, r2
 8017ffc:	b29a      	uxth	r2, r3
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018004:	697b      	ldr	r3, [r7, #20]
 8018006:	6858      	ldr	r0, [r3, #4]
 8018008:	697b      	ldr	r3, [r7, #20]
 801800a:	685b      	ldr	r3, [r3, #4]
 801800c:	891a      	ldrh	r2, [r3, #8]
 801800e:	89bb      	ldrh	r3, [r7, #12]
 8018010:	1ad3      	subs	r3, r2, r3
 8018012:	b29b      	uxth	r3, r3
 8018014:	4619      	mov	r1, r3
 8018016:	f7fa fc53 	bl	80128c0 <pbuf_realloc>
  useg->len -= remainder;
 801801a:	697b      	ldr	r3, [r7, #20]
 801801c:	891a      	ldrh	r2, [r3, #8]
 801801e:	89bb      	ldrh	r3, [r7, #12]
 8018020:	1ad3      	subs	r3, r2, r3
 8018022:	b29a      	uxth	r2, r3
 8018024:	697b      	ldr	r3, [r7, #20]
 8018026:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	68db      	ldr	r3, [r3, #12]
 801802c:	899b      	ldrh	r3, [r3, #12]
 801802e:	b29c      	uxth	r4, r3
 8018030:	7efb      	ldrb	r3, [r7, #27]
 8018032:	b29b      	uxth	r3, r3
 8018034:	4618      	mov	r0, r3
 8018036:	f7f9 f993 	bl	8011360 <lwip_htons>
 801803a:	4603      	mov	r3, r0
 801803c:	461a      	mov	r2, r3
 801803e:	697b      	ldr	r3, [r7, #20]
 8018040:	68db      	ldr	r3, [r3, #12]
 8018042:	4322      	orrs	r2, r4
 8018044:	b292      	uxth	r2, r2
 8018046:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018048:	697b      	ldr	r3, [r7, #20]
 801804a:	685b      	ldr	r3, [r3, #4]
 801804c:	4618      	mov	r0, r3
 801804e:	f7fa fe4b 	bl	8012ce8 <pbuf_clen>
 8018052:	4603      	mov	r3, r0
 8018054:	461a      	mov	r2, r3
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801805c:	4413      	add	r3, r2
 801805e:	b29a      	uxth	r2, r3
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018066:	69fb      	ldr	r3, [r7, #28]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	4618      	mov	r0, r3
 801806c:	f7fa fe3c 	bl	8012ce8 <pbuf_clen>
 8018070:	4603      	mov	r3, r0
 8018072:	461a      	mov	r2, r3
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801807a:	4413      	add	r3, r2
 801807c:	b29a      	uxth	r2, r3
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018084:	697b      	ldr	r3, [r7, #20]
 8018086:	681a      	ldr	r2, [r3, #0]
 8018088:	69fb      	ldr	r3, [r7, #28]
 801808a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801808c:	697b      	ldr	r3, [r7, #20]
 801808e:	69fa      	ldr	r2, [r7, #28]
 8018090:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018092:	69fb      	ldr	r3, [r7, #28]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	2b00      	cmp	r3, #0
 8018098:	d103      	bne.n	80180a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2200      	movs	r2, #0
 801809e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80180a2:	2300      	movs	r3, #0
 80180a4:	e016      	b.n	80180d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80180a6:	bf00      	nop
 80180a8:	e002      	b.n	80180b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80180aa:	bf00      	nop
 80180ac:	e000      	b.n	80180b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80180ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80180b0:	69fb      	ldr	r3, [r7, #28]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d006      	beq.n	80180c4 <tcp_split_unsent_seg+0x25c>
 80180b6:	4b09      	ldr	r3, [pc, #36]	; (80180dc <tcp_split_unsent_seg+0x274>)
 80180b8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80180bc:	490d      	ldr	r1, [pc, #52]	; (80180f4 <tcp_split_unsent_seg+0x28c>)
 80180be:	4809      	ldr	r0, [pc, #36]	; (80180e4 <tcp_split_unsent_seg+0x27c>)
 80180c0:	f007 fbf4 	bl	801f8ac <iprintf>
  if (p != NULL) {
 80180c4:	693b      	ldr	r3, [r7, #16]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d002      	beq.n	80180d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80180ca:	6938      	ldr	r0, [r7, #16]
 80180cc:	f7fa fd7e 	bl	8012bcc <pbuf_free>
  }

  return ERR_MEM;
 80180d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	3724      	adds	r7, #36	; 0x24
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd90      	pop	{r4, r7, pc}
 80180dc:	080238e8 	.word	0x080238e8
 80180e0:	08023c7c 	.word	0x08023c7c
 80180e4:	0802393c 	.word	0x0802393c
 80180e8:	08023ca0 	.word	0x08023ca0
 80180ec:	08023cc4 	.word	0x08023cc4
 80180f0:	08023cd4 	.word	0x08023cd4
 80180f4:	08023ce4 	.word	0x08023ce4

080180f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80180f8:	b590      	push	{r4, r7, lr}
 80180fa:	b085      	sub	sp, #20
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d106      	bne.n	8018114 <tcp_send_fin+0x1c>
 8018106:	4b21      	ldr	r3, [pc, #132]	; (801818c <tcp_send_fin+0x94>)
 8018108:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801810c:	4920      	ldr	r1, [pc, #128]	; (8018190 <tcp_send_fin+0x98>)
 801810e:	4821      	ldr	r0, [pc, #132]	; (8018194 <tcp_send_fin+0x9c>)
 8018110:	f007 fbcc 	bl	801f8ac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018118:	2b00      	cmp	r3, #0
 801811a:	d02e      	beq.n	801817a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018120:	60fb      	str	r3, [r7, #12]
 8018122:	e002      	b.n	801812a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d1f8      	bne.n	8018124 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	68db      	ldr	r3, [r3, #12]
 8018136:	899b      	ldrh	r3, [r3, #12]
 8018138:	b29b      	uxth	r3, r3
 801813a:	4618      	mov	r0, r3
 801813c:	f7f9 f910 	bl	8011360 <lwip_htons>
 8018140:	4603      	mov	r3, r0
 8018142:	b2db      	uxtb	r3, r3
 8018144:	f003 0307 	and.w	r3, r3, #7
 8018148:	2b00      	cmp	r3, #0
 801814a:	d116      	bne.n	801817a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	68db      	ldr	r3, [r3, #12]
 8018150:	899b      	ldrh	r3, [r3, #12]
 8018152:	b29c      	uxth	r4, r3
 8018154:	2001      	movs	r0, #1
 8018156:	f7f9 f903 	bl	8011360 <lwip_htons>
 801815a:	4603      	mov	r3, r0
 801815c:	461a      	mov	r2, r3
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	68db      	ldr	r3, [r3, #12]
 8018162:	4322      	orrs	r2, r4
 8018164:	b292      	uxth	r2, r2
 8018166:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	8b5b      	ldrh	r3, [r3, #26]
 801816c:	f043 0320 	orr.w	r3, r3, #32
 8018170:	b29a      	uxth	r2, r3
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018176:	2300      	movs	r3, #0
 8018178:	e004      	b.n	8018184 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801817a:	2101      	movs	r1, #1
 801817c:	6878      	ldr	r0, [r7, #4]
 801817e:	f000 f80b 	bl	8018198 <tcp_enqueue_flags>
 8018182:	4603      	mov	r3, r0
}
 8018184:	4618      	mov	r0, r3
 8018186:	3714      	adds	r7, #20
 8018188:	46bd      	mov	sp, r7
 801818a:	bd90      	pop	{r4, r7, pc}
 801818c:	080238e8 	.word	0x080238e8
 8018190:	08023cf0 	.word	0x08023cf0
 8018194:	0802393c 	.word	0x0802393c

08018198 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b08a      	sub	sp, #40	; 0x28
 801819c:	af02      	add	r7, sp, #8
 801819e:	6078      	str	r0, [r7, #4]
 80181a0:	460b      	mov	r3, r1
 80181a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80181a4:	2300      	movs	r3, #0
 80181a6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80181a8:	2300      	movs	r3, #0
 80181aa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80181ac:	78fb      	ldrb	r3, [r7, #3]
 80181ae:	f003 0303 	and.w	r3, r3, #3
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d106      	bne.n	80181c4 <tcp_enqueue_flags+0x2c>
 80181b6:	4b67      	ldr	r3, [pc, #412]	; (8018354 <tcp_enqueue_flags+0x1bc>)
 80181b8:	f240 4211 	movw	r2, #1041	; 0x411
 80181bc:	4966      	ldr	r1, [pc, #408]	; (8018358 <tcp_enqueue_flags+0x1c0>)
 80181be:	4867      	ldr	r0, [pc, #412]	; (801835c <tcp_enqueue_flags+0x1c4>)
 80181c0:	f007 fb74 	bl	801f8ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d106      	bne.n	80181d8 <tcp_enqueue_flags+0x40>
 80181ca:	4b62      	ldr	r3, [pc, #392]	; (8018354 <tcp_enqueue_flags+0x1bc>)
 80181cc:	f240 4213 	movw	r2, #1043	; 0x413
 80181d0:	4963      	ldr	r1, [pc, #396]	; (8018360 <tcp_enqueue_flags+0x1c8>)
 80181d2:	4862      	ldr	r0, [pc, #392]	; (801835c <tcp_enqueue_flags+0x1c4>)
 80181d4:	f007 fb6a 	bl	801f8ac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80181d8:	78fb      	ldrb	r3, [r7, #3]
 80181da:	f003 0302 	and.w	r3, r3, #2
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d001      	beq.n	80181e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80181e2:	2301      	movs	r3, #1
 80181e4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80181e6:	7ffb      	ldrb	r3, [r7, #31]
 80181e8:	009b      	lsls	r3, r3, #2
 80181ea:	b2db      	uxtb	r3, r3
 80181ec:	f003 0304 	and.w	r3, r3, #4
 80181f0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80181f2:	7dfb      	ldrb	r3, [r7, #23]
 80181f4:	b29b      	uxth	r3, r3
 80181f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80181fa:	4619      	mov	r1, r3
 80181fc:	2036      	movs	r0, #54	; 0x36
 80181fe:	f7fa fa01 	bl	8012604 <pbuf_alloc>
 8018202:	6138      	str	r0, [r7, #16]
 8018204:	693b      	ldr	r3, [r7, #16]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d109      	bne.n	801821e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	8b5b      	ldrh	r3, [r3, #26]
 801820e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018212:	b29a      	uxth	r2, r3
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801821c:	e095      	b.n	801834a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801821e:	693b      	ldr	r3, [r7, #16]
 8018220:	895a      	ldrh	r2, [r3, #10]
 8018222:	7dfb      	ldrb	r3, [r7, #23]
 8018224:	b29b      	uxth	r3, r3
 8018226:	429a      	cmp	r2, r3
 8018228:	d206      	bcs.n	8018238 <tcp_enqueue_flags+0xa0>
 801822a:	4b4a      	ldr	r3, [pc, #296]	; (8018354 <tcp_enqueue_flags+0x1bc>)
 801822c:	f240 4239 	movw	r2, #1081	; 0x439
 8018230:	494c      	ldr	r1, [pc, #304]	; (8018364 <tcp_enqueue_flags+0x1cc>)
 8018232:	484a      	ldr	r0, [pc, #296]	; (801835c <tcp_enqueue_flags+0x1c4>)
 8018234:	f007 fb3a 	bl	801f8ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801823c:	78fa      	ldrb	r2, [r7, #3]
 801823e:	7ffb      	ldrb	r3, [r7, #31]
 8018240:	9300      	str	r3, [sp, #0]
 8018242:	460b      	mov	r3, r1
 8018244:	6939      	ldr	r1, [r7, #16]
 8018246:	6878      	ldr	r0, [r7, #4]
 8018248:	f7ff f918 	bl	801747c <tcp_create_segment>
 801824c:	60f8      	str	r0, [r7, #12]
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d109      	bne.n	8018268 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	8b5b      	ldrh	r3, [r3, #26]
 8018258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801825c:	b29a      	uxth	r2, r3
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018266:	e070      	b.n	801834a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	68db      	ldr	r3, [r3, #12]
 801826c:	f003 0303 	and.w	r3, r3, #3
 8018270:	2b00      	cmp	r3, #0
 8018272:	d006      	beq.n	8018282 <tcp_enqueue_flags+0xea>
 8018274:	4b37      	ldr	r3, [pc, #220]	; (8018354 <tcp_enqueue_flags+0x1bc>)
 8018276:	f240 4242 	movw	r2, #1090	; 0x442
 801827a:	493b      	ldr	r1, [pc, #236]	; (8018368 <tcp_enqueue_flags+0x1d0>)
 801827c:	4837      	ldr	r0, [pc, #220]	; (801835c <tcp_enqueue_flags+0x1c4>)
 801827e:	f007 fb15 	bl	801f8ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	891b      	ldrh	r3, [r3, #8]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d006      	beq.n	8018298 <tcp_enqueue_flags+0x100>
 801828a:	4b32      	ldr	r3, [pc, #200]	; (8018354 <tcp_enqueue_flags+0x1bc>)
 801828c:	f240 4243 	movw	r2, #1091	; 0x443
 8018290:	4936      	ldr	r1, [pc, #216]	; (801836c <tcp_enqueue_flags+0x1d4>)
 8018292:	4832      	ldr	r0, [pc, #200]	; (801835c <tcp_enqueue_flags+0x1c4>)
 8018294:	f007 fb0a 	bl	801f8ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801829c:	2b00      	cmp	r3, #0
 801829e:	d103      	bne.n	80182a8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	68fa      	ldr	r2, [r7, #12]
 80182a4:	66da      	str	r2, [r3, #108]	; 0x6c
 80182a6:	e00d      	b.n	80182c4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182ac:	61bb      	str	r3, [r7, #24]
 80182ae:	e002      	b.n	80182b6 <tcp_enqueue_flags+0x11e>
 80182b0:	69bb      	ldr	r3, [r7, #24]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	61bb      	str	r3, [r7, #24]
 80182b6:	69bb      	ldr	r3, [r7, #24]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d1f8      	bne.n	80182b0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80182be:	69bb      	ldr	r3, [r7, #24]
 80182c0:	68fa      	ldr	r2, [r7, #12]
 80182c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2200      	movs	r2, #0
 80182c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80182cc:	78fb      	ldrb	r3, [r7, #3]
 80182ce:	f003 0302 	and.w	r3, r3, #2
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d104      	bne.n	80182e0 <tcp_enqueue_flags+0x148>
 80182d6:	78fb      	ldrb	r3, [r7, #3]
 80182d8:	f003 0301 	and.w	r3, r3, #1
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d004      	beq.n	80182ea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80182e4:	1c5a      	adds	r2, r3, #1
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80182ea:	78fb      	ldrb	r3, [r7, #3]
 80182ec:	f003 0301 	and.w	r3, r3, #1
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d006      	beq.n	8018302 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	8b5b      	ldrh	r3, [r3, #26]
 80182f8:	f043 0320 	orr.w	r3, r3, #32
 80182fc:	b29a      	uxth	r2, r3
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	685b      	ldr	r3, [r3, #4]
 8018306:	4618      	mov	r0, r3
 8018308:	f7fa fcee 	bl	8012ce8 <pbuf_clen>
 801830c:	4603      	mov	r3, r0
 801830e:	461a      	mov	r2, r3
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018316:	4413      	add	r3, r2
 8018318:	b29a      	uxth	r2, r3
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018326:	2b00      	cmp	r3, #0
 8018328:	d00e      	beq.n	8018348 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801832e:	2b00      	cmp	r3, #0
 8018330:	d10a      	bne.n	8018348 <tcp_enqueue_flags+0x1b0>
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018336:	2b00      	cmp	r3, #0
 8018338:	d106      	bne.n	8018348 <tcp_enqueue_flags+0x1b0>
 801833a:	4b06      	ldr	r3, [pc, #24]	; (8018354 <tcp_enqueue_flags+0x1bc>)
 801833c:	f240 4265 	movw	r2, #1125	; 0x465
 8018340:	490b      	ldr	r1, [pc, #44]	; (8018370 <tcp_enqueue_flags+0x1d8>)
 8018342:	4806      	ldr	r0, [pc, #24]	; (801835c <tcp_enqueue_flags+0x1c4>)
 8018344:	f007 fab2 	bl	801f8ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018348:	2300      	movs	r3, #0
}
 801834a:	4618      	mov	r0, r3
 801834c:	3720      	adds	r7, #32
 801834e:	46bd      	mov	sp, r7
 8018350:	bd80      	pop	{r7, pc}
 8018352:	bf00      	nop
 8018354:	080238e8 	.word	0x080238e8
 8018358:	08023d0c 	.word	0x08023d0c
 801835c:	0802393c 	.word	0x0802393c
 8018360:	08023d64 	.word	0x08023d64
 8018364:	08023d84 	.word	0x08023d84
 8018368:	08023dc0 	.word	0x08023dc0
 801836c:	08023dd8 	.word	0x08023dd8
 8018370:	08023e04 	.word	0x08023e04

08018374 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018374:	b5b0      	push	{r4, r5, r7, lr}
 8018376:	b08a      	sub	sp, #40	; 0x28
 8018378:	af00      	add	r7, sp, #0
 801837a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d106      	bne.n	8018390 <tcp_output+0x1c>
 8018382:	4b8a      	ldr	r3, [pc, #552]	; (80185ac <tcp_output+0x238>)
 8018384:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018388:	4989      	ldr	r1, [pc, #548]	; (80185b0 <tcp_output+0x23c>)
 801838a:	488a      	ldr	r0, [pc, #552]	; (80185b4 <tcp_output+0x240>)
 801838c:	f007 fa8e 	bl	801f8ac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	7d1b      	ldrb	r3, [r3, #20]
 8018394:	2b01      	cmp	r3, #1
 8018396:	d106      	bne.n	80183a6 <tcp_output+0x32>
 8018398:	4b84      	ldr	r3, [pc, #528]	; (80185ac <tcp_output+0x238>)
 801839a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801839e:	4986      	ldr	r1, [pc, #536]	; (80185b8 <tcp_output+0x244>)
 80183a0:	4884      	ldr	r0, [pc, #528]	; (80185b4 <tcp_output+0x240>)
 80183a2:	f007 fa83 	bl	801f8ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80183a6:	4b85      	ldr	r3, [pc, #532]	; (80185bc <tcp_output+0x248>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	687a      	ldr	r2, [r7, #4]
 80183ac:	429a      	cmp	r2, r3
 80183ae:	d101      	bne.n	80183b4 <tcp_output+0x40>
    return ERR_OK;
 80183b0:	2300      	movs	r3, #0
 80183b2:	e1ce      	b.n	8018752 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80183c0:	4293      	cmp	r3, r2
 80183c2:	bf28      	it	cs
 80183c4:	4613      	movcs	r3, r2
 80183c6:	b29b      	uxth	r3, r3
 80183c8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80183d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d10b      	bne.n	80183ee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	8b5b      	ldrh	r3, [r3, #26]
 80183da:	f003 0302 	and.w	r3, r3, #2
 80183de:	2b00      	cmp	r3, #0
 80183e0:	f000 81aa 	beq.w	8018738 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80183e4:	6878      	ldr	r0, [r7, #4]
 80183e6:	f000 fdcb 	bl	8018f80 <tcp_send_empty_ack>
 80183ea:	4603      	mov	r3, r0
 80183ec:	e1b1      	b.n	8018752 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80183ee:	6879      	ldr	r1, [r7, #4]
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	3304      	adds	r3, #4
 80183f4:	461a      	mov	r2, r3
 80183f6:	6878      	ldr	r0, [r7, #4]
 80183f8:	f7ff f824 	bl	8017444 <tcp_route>
 80183fc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80183fe:	697b      	ldr	r3, [r7, #20]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d102      	bne.n	801840a <tcp_output+0x96>
    return ERR_RTE;
 8018404:	f06f 0303 	mvn.w	r3, #3
 8018408:	e1a3      	b.n	8018752 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d003      	beq.n	8018418 <tcp_output+0xa4>
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d111      	bne.n	801843c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018418:	697b      	ldr	r3, [r7, #20]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d002      	beq.n	8018424 <tcp_output+0xb0>
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	3304      	adds	r3, #4
 8018422:	e000      	b.n	8018426 <tcp_output+0xb2>
 8018424:	2300      	movs	r3, #0
 8018426:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018428:	693b      	ldr	r3, [r7, #16]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d102      	bne.n	8018434 <tcp_output+0xc0>
      return ERR_RTE;
 801842e:	f06f 0303 	mvn.w	r3, #3
 8018432:	e18e      	b.n	8018752 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018434:	693b      	ldr	r3, [r7, #16]
 8018436:	681a      	ldr	r2, [r3, #0]
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801843e:	68db      	ldr	r3, [r3, #12]
 8018440:	685b      	ldr	r3, [r3, #4]
 8018442:	4618      	mov	r0, r3
 8018444:	f7f8 ffa1 	bl	801138a <lwip_htonl>
 8018448:	4602      	mov	r2, r0
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801844e:	1ad3      	subs	r3, r2, r3
 8018450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018452:	8912      	ldrh	r2, [r2, #8]
 8018454:	4413      	add	r3, r2
 8018456:	69ba      	ldr	r2, [r7, #24]
 8018458:	429a      	cmp	r2, r3
 801845a:	d227      	bcs.n	80184ac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018462:	461a      	mov	r2, r3
 8018464:	69bb      	ldr	r3, [r7, #24]
 8018466:	4293      	cmp	r3, r2
 8018468:	d114      	bne.n	8018494 <tcp_output+0x120>
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801846e:	2b00      	cmp	r3, #0
 8018470:	d110      	bne.n	8018494 <tcp_output+0x120>
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018478:	2b00      	cmp	r3, #0
 801847a:	d10b      	bne.n	8018494 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	2200      	movs	r2, #0
 8018480:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	2201      	movs	r2, #1
 8018488:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	2200      	movs	r2, #0
 8018490:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	8b5b      	ldrh	r3, [r3, #26]
 8018498:	f003 0302 	and.w	r3, r3, #2
 801849c:	2b00      	cmp	r3, #0
 801849e:	f000 814d 	beq.w	801873c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80184a2:	6878      	ldr	r0, [r7, #4]
 80184a4:	f000 fd6c 	bl	8018f80 <tcp_send_empty_ack>
 80184a8:	4603      	mov	r3, r0
 80184aa:	e152      	b.n	8018752 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2200      	movs	r2, #0
 80184b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184b8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80184ba:	6a3b      	ldr	r3, [r7, #32]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	f000 811c 	beq.w	80186fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80184c2:	e002      	b.n	80184ca <tcp_output+0x156>
 80184c4:	6a3b      	ldr	r3, [r7, #32]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	623b      	str	r3, [r7, #32]
 80184ca:	6a3b      	ldr	r3, [r7, #32]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d1f8      	bne.n	80184c4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80184d2:	e112      	b.n	80186fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80184d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184d6:	68db      	ldr	r3, [r3, #12]
 80184d8:	899b      	ldrh	r3, [r3, #12]
 80184da:	b29b      	uxth	r3, r3
 80184dc:	4618      	mov	r0, r3
 80184de:	f7f8 ff3f 	bl	8011360 <lwip_htons>
 80184e2:	4603      	mov	r3, r0
 80184e4:	b2db      	uxtb	r3, r3
 80184e6:	f003 0304 	and.w	r3, r3, #4
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d006      	beq.n	80184fc <tcp_output+0x188>
 80184ee:	4b2f      	ldr	r3, [pc, #188]	; (80185ac <tcp_output+0x238>)
 80184f0:	f240 5236 	movw	r2, #1334	; 0x536
 80184f4:	4932      	ldr	r1, [pc, #200]	; (80185c0 <tcp_output+0x24c>)
 80184f6:	482f      	ldr	r0, [pc, #188]	; (80185b4 <tcp_output+0x240>)
 80184f8:	f007 f9d8 	bl	801f8ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018500:	2b00      	cmp	r3, #0
 8018502:	d01f      	beq.n	8018544 <tcp_output+0x1d0>
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	8b5b      	ldrh	r3, [r3, #26]
 8018508:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801850c:	2b00      	cmp	r3, #0
 801850e:	d119      	bne.n	8018544 <tcp_output+0x1d0>
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018514:	2b00      	cmp	r3, #0
 8018516:	d00b      	beq.n	8018530 <tcp_output+0x1bc>
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d110      	bne.n	8018544 <tcp_output+0x1d0>
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018526:	891a      	ldrh	r2, [r3, #8]
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801852c:	429a      	cmp	r2, r3
 801852e:	d209      	bcs.n	8018544 <tcp_output+0x1d0>
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018536:	2b00      	cmp	r3, #0
 8018538:	d004      	beq.n	8018544 <tcp_output+0x1d0>
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018540:	2b08      	cmp	r3, #8
 8018542:	d901      	bls.n	8018548 <tcp_output+0x1d4>
 8018544:	2301      	movs	r3, #1
 8018546:	e000      	b.n	801854a <tcp_output+0x1d6>
 8018548:	2300      	movs	r3, #0
 801854a:	2b00      	cmp	r3, #0
 801854c:	d106      	bne.n	801855c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	8b5b      	ldrh	r3, [r3, #26]
 8018552:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018556:	2b00      	cmp	r3, #0
 8018558:	f000 80e4 	beq.w	8018724 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	7d1b      	ldrb	r3, [r3, #20]
 8018560:	2b02      	cmp	r3, #2
 8018562:	d00d      	beq.n	8018580 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018566:	68db      	ldr	r3, [r3, #12]
 8018568:	899b      	ldrh	r3, [r3, #12]
 801856a:	b29c      	uxth	r4, r3
 801856c:	2010      	movs	r0, #16
 801856e:	f7f8 fef7 	bl	8011360 <lwip_htons>
 8018572:	4603      	mov	r3, r0
 8018574:	461a      	mov	r2, r3
 8018576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018578:	68db      	ldr	r3, [r3, #12]
 801857a:	4322      	orrs	r2, r4
 801857c:	b292      	uxth	r2, r2
 801857e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018580:	697a      	ldr	r2, [r7, #20]
 8018582:	6879      	ldr	r1, [r7, #4]
 8018584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018586:	f000 f909 	bl	801879c <tcp_output_segment>
 801858a:	4603      	mov	r3, r0
 801858c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801858e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d016      	beq.n	80185c4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	8b5b      	ldrh	r3, [r3, #26]
 801859a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801859e:	b29a      	uxth	r2, r3
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	835a      	strh	r2, [r3, #26]
      return err;
 80185a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185a8:	e0d3      	b.n	8018752 <tcp_output+0x3de>
 80185aa:	bf00      	nop
 80185ac:	080238e8 	.word	0x080238e8
 80185b0:	08023e2c 	.word	0x08023e2c
 80185b4:	0802393c 	.word	0x0802393c
 80185b8:	08023e44 	.word	0x08023e44
 80185bc:	20010218 	.word	0x20010218
 80185c0:	08023e6c 	.word	0x08023e6c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80185c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	7d1b      	ldrb	r3, [r3, #20]
 80185d0:	2b02      	cmp	r3, #2
 80185d2:	d006      	beq.n	80185e2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	8b5b      	ldrh	r3, [r3, #26]
 80185d8:	f023 0303 	bic.w	r3, r3, #3
 80185dc:	b29a      	uxth	r2, r3
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80185e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185e4:	68db      	ldr	r3, [r3, #12]
 80185e6:	685b      	ldr	r3, [r3, #4]
 80185e8:	4618      	mov	r0, r3
 80185ea:	f7f8 fece 	bl	801138a <lwip_htonl>
 80185ee:	4604      	mov	r4, r0
 80185f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f2:	891b      	ldrh	r3, [r3, #8]
 80185f4:	461d      	mov	r5, r3
 80185f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185f8:	68db      	ldr	r3, [r3, #12]
 80185fa:	899b      	ldrh	r3, [r3, #12]
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	4618      	mov	r0, r3
 8018600:	f7f8 feae 	bl	8011360 <lwip_htons>
 8018604:	4603      	mov	r3, r0
 8018606:	b2db      	uxtb	r3, r3
 8018608:	f003 0303 	and.w	r3, r3, #3
 801860c:	2b00      	cmp	r3, #0
 801860e:	d001      	beq.n	8018614 <tcp_output+0x2a0>
 8018610:	2301      	movs	r3, #1
 8018612:	e000      	b.n	8018616 <tcp_output+0x2a2>
 8018614:	2300      	movs	r3, #0
 8018616:	442b      	add	r3, r5
 8018618:	4423      	add	r3, r4
 801861a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018620:	68bb      	ldr	r3, [r7, #8]
 8018622:	1ad3      	subs	r3, r2, r3
 8018624:	2b00      	cmp	r3, #0
 8018626:	da02      	bge.n	801862e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	68ba      	ldr	r2, [r7, #8]
 801862c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018630:	891b      	ldrh	r3, [r3, #8]
 8018632:	461c      	mov	r4, r3
 8018634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018636:	68db      	ldr	r3, [r3, #12]
 8018638:	899b      	ldrh	r3, [r3, #12]
 801863a:	b29b      	uxth	r3, r3
 801863c:	4618      	mov	r0, r3
 801863e:	f7f8 fe8f 	bl	8011360 <lwip_htons>
 8018642:	4603      	mov	r3, r0
 8018644:	b2db      	uxtb	r3, r3
 8018646:	f003 0303 	and.w	r3, r3, #3
 801864a:	2b00      	cmp	r3, #0
 801864c:	d001      	beq.n	8018652 <tcp_output+0x2de>
 801864e:	2301      	movs	r3, #1
 8018650:	e000      	b.n	8018654 <tcp_output+0x2e0>
 8018652:	2300      	movs	r3, #0
 8018654:	4423      	add	r3, r4
 8018656:	2b00      	cmp	r3, #0
 8018658:	d049      	beq.n	80186ee <tcp_output+0x37a>
      seg->next = NULL;
 801865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801865c:	2200      	movs	r2, #0
 801865e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018664:	2b00      	cmp	r3, #0
 8018666:	d105      	bne.n	8018674 <tcp_output+0x300>
        pcb->unacked = seg;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801866c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801866e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018670:	623b      	str	r3, [r7, #32]
 8018672:	e03f      	b.n	80186f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018676:	68db      	ldr	r3, [r3, #12]
 8018678:	685b      	ldr	r3, [r3, #4]
 801867a:	4618      	mov	r0, r3
 801867c:	f7f8 fe85 	bl	801138a <lwip_htonl>
 8018680:	4604      	mov	r4, r0
 8018682:	6a3b      	ldr	r3, [r7, #32]
 8018684:	68db      	ldr	r3, [r3, #12]
 8018686:	685b      	ldr	r3, [r3, #4]
 8018688:	4618      	mov	r0, r3
 801868a:	f7f8 fe7e 	bl	801138a <lwip_htonl>
 801868e:	4603      	mov	r3, r0
 8018690:	1ae3      	subs	r3, r4, r3
 8018692:	2b00      	cmp	r3, #0
 8018694:	da24      	bge.n	80186e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	3370      	adds	r3, #112	; 0x70
 801869a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801869c:	e002      	b.n	80186a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801869e:	69fb      	ldr	r3, [r7, #28]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80186a4:	69fb      	ldr	r3, [r7, #28]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d011      	beq.n	80186d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80186ac:	69fb      	ldr	r3, [r7, #28]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	68db      	ldr	r3, [r3, #12]
 80186b2:	685b      	ldr	r3, [r3, #4]
 80186b4:	4618      	mov	r0, r3
 80186b6:	f7f8 fe68 	bl	801138a <lwip_htonl>
 80186ba:	4604      	mov	r4, r0
 80186bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186be:	68db      	ldr	r3, [r3, #12]
 80186c0:	685b      	ldr	r3, [r3, #4]
 80186c2:	4618      	mov	r0, r3
 80186c4:	f7f8 fe61 	bl	801138a <lwip_htonl>
 80186c8:	4603      	mov	r3, r0
 80186ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	dbe6      	blt.n	801869e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80186d0:	69fb      	ldr	r3, [r7, #28]
 80186d2:	681a      	ldr	r2, [r3, #0]
 80186d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80186d8:	69fb      	ldr	r3, [r7, #28]
 80186da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186dc:	601a      	str	r2, [r3, #0]
 80186de:	e009      	b.n	80186f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80186e0:	6a3b      	ldr	r3, [r7, #32]
 80186e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80186e6:	6a3b      	ldr	r3, [r7, #32]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	623b      	str	r3, [r7, #32]
 80186ec:	e002      	b.n	80186f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80186ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186f0:	f7fb ff19 	bl	8014526 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80186fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d012      	beq.n	8018726 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018702:	68db      	ldr	r3, [r3, #12]
 8018704:	685b      	ldr	r3, [r3, #4]
 8018706:	4618      	mov	r0, r3
 8018708:	f7f8 fe3f 	bl	801138a <lwip_htonl>
 801870c:	4602      	mov	r2, r0
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018712:	1ad3      	subs	r3, r2, r3
 8018714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018716:	8912      	ldrh	r2, [r2, #8]
 8018718:	4413      	add	r3, r2
  while (seg != NULL &&
 801871a:	69ba      	ldr	r2, [r7, #24]
 801871c:	429a      	cmp	r2, r3
 801871e:	f4bf aed9 	bcs.w	80184d4 <tcp_output+0x160>
 8018722:	e000      	b.n	8018726 <tcp_output+0x3b2>
      break;
 8018724:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801872a:	2b00      	cmp	r3, #0
 801872c:	d108      	bne.n	8018740 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	2200      	movs	r2, #0
 8018732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8018736:	e004      	b.n	8018742 <tcp_output+0x3ce>
    goto output_done;
 8018738:	bf00      	nop
 801873a:	e002      	b.n	8018742 <tcp_output+0x3ce>
    goto output_done;
 801873c:	bf00      	nop
 801873e:	e000      	b.n	8018742 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018740:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	8b5b      	ldrh	r3, [r3, #26]
 8018746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801874a:	b29a      	uxth	r2, r3
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018750:	2300      	movs	r3, #0
}
 8018752:	4618      	mov	r0, r3
 8018754:	3728      	adds	r7, #40	; 0x28
 8018756:	46bd      	mov	sp, r7
 8018758:	bdb0      	pop	{r4, r5, r7, pc}
 801875a:	bf00      	nop

0801875c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	b082      	sub	sp, #8
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d106      	bne.n	8018778 <tcp_output_segment_busy+0x1c>
 801876a:	4b09      	ldr	r3, [pc, #36]	; (8018790 <tcp_output_segment_busy+0x34>)
 801876c:	f240 529a 	movw	r2, #1434	; 0x59a
 8018770:	4908      	ldr	r1, [pc, #32]	; (8018794 <tcp_output_segment_busy+0x38>)
 8018772:	4809      	ldr	r0, [pc, #36]	; (8018798 <tcp_output_segment_busy+0x3c>)
 8018774:	f007 f89a 	bl	801f8ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	685b      	ldr	r3, [r3, #4]
 801877c:	7b9b      	ldrb	r3, [r3, #14]
 801877e:	2b01      	cmp	r3, #1
 8018780:	d001      	beq.n	8018786 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018782:	2301      	movs	r3, #1
 8018784:	e000      	b.n	8018788 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018786:	2300      	movs	r3, #0
}
 8018788:	4618      	mov	r0, r3
 801878a:	3708      	adds	r7, #8
 801878c:	46bd      	mov	sp, r7
 801878e:	bd80      	pop	{r7, pc}
 8018790:	080238e8 	.word	0x080238e8
 8018794:	08023e84 	.word	0x08023e84
 8018798:	0802393c 	.word	0x0802393c

0801879c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801879c:	b5b0      	push	{r4, r5, r7, lr}
 801879e:	b08c      	sub	sp, #48	; 0x30
 80187a0:	af04      	add	r7, sp, #16
 80187a2:	60f8      	str	r0, [r7, #12]
 80187a4:	60b9      	str	r1, [r7, #8]
 80187a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d106      	bne.n	80187bc <tcp_output_segment+0x20>
 80187ae:	4b64      	ldr	r3, [pc, #400]	; (8018940 <tcp_output_segment+0x1a4>)
 80187b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80187b4:	4963      	ldr	r1, [pc, #396]	; (8018944 <tcp_output_segment+0x1a8>)
 80187b6:	4864      	ldr	r0, [pc, #400]	; (8018948 <tcp_output_segment+0x1ac>)
 80187b8:	f007 f878 	bl	801f8ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d106      	bne.n	80187d0 <tcp_output_segment+0x34>
 80187c2:	4b5f      	ldr	r3, [pc, #380]	; (8018940 <tcp_output_segment+0x1a4>)
 80187c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80187c8:	4960      	ldr	r1, [pc, #384]	; (801894c <tcp_output_segment+0x1b0>)
 80187ca:	485f      	ldr	r0, [pc, #380]	; (8018948 <tcp_output_segment+0x1ac>)
 80187cc:	f007 f86e 	bl	801f8ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d106      	bne.n	80187e4 <tcp_output_segment+0x48>
 80187d6:	4b5a      	ldr	r3, [pc, #360]	; (8018940 <tcp_output_segment+0x1a4>)
 80187d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80187dc:	495c      	ldr	r1, [pc, #368]	; (8018950 <tcp_output_segment+0x1b4>)
 80187de:	485a      	ldr	r0, [pc, #360]	; (8018948 <tcp_output_segment+0x1ac>)
 80187e0:	f007 f864 	bl	801f8ac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80187e4:	68f8      	ldr	r0, [r7, #12]
 80187e6:	f7ff ffb9 	bl	801875c <tcp_output_segment_busy>
 80187ea:	4603      	mov	r3, r0
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d001      	beq.n	80187f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80187f0:	2300      	movs	r3, #0
 80187f2:	e0a1      	b.n	8018938 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80187f4:	68bb      	ldr	r3, [r7, #8]
 80187f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	68dc      	ldr	r4, [r3, #12]
 80187fc:	4610      	mov	r0, r2
 80187fe:	f7f8 fdc4 	bl	801138a <lwip_htonl>
 8018802:	4603      	mov	r3, r0
 8018804:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018806:	68bb      	ldr	r3, [r7, #8]
 8018808:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	68dc      	ldr	r4, [r3, #12]
 801880e:	4610      	mov	r0, r2
 8018810:	f7f8 fda6 	bl	8011360 <lwip_htons>
 8018814:	4603      	mov	r3, r0
 8018816:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801881c:	68ba      	ldr	r2, [r7, #8]
 801881e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018820:	441a      	add	r2, r3
 8018822:	68bb      	ldr	r3, [r7, #8]
 8018824:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	68db      	ldr	r3, [r3, #12]
 801882a:	3314      	adds	r3, #20
 801882c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	7a9b      	ldrb	r3, [r3, #10]
 8018832:	f003 0301 	and.w	r3, r3, #1
 8018836:	2b00      	cmp	r3, #0
 8018838:	d015      	beq.n	8018866 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801883a:	68bb      	ldr	r3, [r7, #8]
 801883c:	3304      	adds	r3, #4
 801883e:	461a      	mov	r2, r3
 8018840:	6879      	ldr	r1, [r7, #4]
 8018842:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018846:	f7fc fa33 	bl	8014cb0 <tcp_eff_send_mss_netif>
 801884a:	4603      	mov	r3, r0
 801884c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801884e:	8b7b      	ldrh	r3, [r7, #26]
 8018850:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018854:	4618      	mov	r0, r3
 8018856:	f7f8 fd98 	bl	801138a <lwip_htonl>
 801885a:	4602      	mov	r2, r0
 801885c:	69fb      	ldr	r3, [r7, #28]
 801885e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018860:	69fb      	ldr	r3, [r7, #28]
 8018862:	3304      	adds	r3, #4
 8018864:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018866:	68bb      	ldr	r3, [r7, #8]
 8018868:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801886c:	2b00      	cmp	r3, #0
 801886e:	da02      	bge.n	8018876 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018870:	68bb      	ldr	r3, [r7, #8]
 8018872:	2200      	movs	r2, #0
 8018874:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018876:	68bb      	ldr	r3, [r7, #8]
 8018878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801887a:	2b00      	cmp	r3, #0
 801887c:	d10c      	bne.n	8018898 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801887e:	4b35      	ldr	r3, [pc, #212]	; (8018954 <tcp_output_segment+0x1b8>)
 8018880:	681a      	ldr	r2, [r3, #0]
 8018882:	68bb      	ldr	r3, [r7, #8]
 8018884:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	68db      	ldr	r3, [r3, #12]
 801888a:	685b      	ldr	r3, [r3, #4]
 801888c:	4618      	mov	r0, r3
 801888e:	f7f8 fd7c 	bl	801138a <lwip_htonl>
 8018892:	4602      	mov	r2, r0
 8018894:	68bb      	ldr	r3, [r7, #8]
 8018896:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	68da      	ldr	r2, [r3, #12]
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	685b      	ldr	r3, [r3, #4]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	1ad3      	subs	r3, r2, r3
 80188a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	685b      	ldr	r3, [r3, #4]
 80188aa:	8959      	ldrh	r1, [r3, #10]
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	8b3a      	ldrh	r2, [r7, #24]
 80188b2:	1a8a      	subs	r2, r1, r2
 80188b4:	b292      	uxth	r2, r2
 80188b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	8919      	ldrh	r1, [r3, #8]
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	685b      	ldr	r3, [r3, #4]
 80188c2:	8b3a      	ldrh	r2, [r7, #24]
 80188c4:	1a8a      	subs	r2, r1, r2
 80188c6:	b292      	uxth	r2, r2
 80188c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	685b      	ldr	r3, [r3, #4]
 80188ce:	68fa      	ldr	r2, [r7, #12]
 80188d0:	68d2      	ldr	r2, [r2, #12]
 80188d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	68db      	ldr	r3, [r3, #12]
 80188d8:	2200      	movs	r2, #0
 80188da:	741a      	strb	r2, [r3, #16]
 80188dc:	2200      	movs	r2, #0
 80188de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	68da      	ldr	r2, [r3, #12]
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	7a9b      	ldrb	r3, [r3, #10]
 80188e8:	f003 0301 	and.w	r3, r3, #1
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d001      	beq.n	80188f4 <tcp_output_segment+0x158>
 80188f0:	2318      	movs	r3, #24
 80188f2:	e000      	b.n	80188f6 <tcp_output_segment+0x15a>
 80188f4:	2314      	movs	r3, #20
 80188f6:	4413      	add	r3, r2
 80188f8:	69fa      	ldr	r2, [r7, #28]
 80188fa:	429a      	cmp	r2, r3
 80188fc:	d006      	beq.n	801890c <tcp_output_segment+0x170>
 80188fe:	4b10      	ldr	r3, [pc, #64]	; (8018940 <tcp_output_segment+0x1a4>)
 8018900:	f240 621c 	movw	r2, #1564	; 0x61c
 8018904:	4914      	ldr	r1, [pc, #80]	; (8018958 <tcp_output_segment+0x1bc>)
 8018906:	4810      	ldr	r0, [pc, #64]	; (8018948 <tcp_output_segment+0x1ac>)
 8018908:	f006 ffd0 	bl	801f8ac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	6858      	ldr	r0, [r3, #4]
 8018910:	68b9      	ldr	r1, [r7, #8]
 8018912:	68bb      	ldr	r3, [r7, #8]
 8018914:	1d1c      	adds	r4, r3, #4
 8018916:	68bb      	ldr	r3, [r7, #8]
 8018918:	7add      	ldrb	r5, [r3, #11]
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	7a9b      	ldrb	r3, [r3, #10]
 801891e:	687a      	ldr	r2, [r7, #4]
 8018920:	9202      	str	r2, [sp, #8]
 8018922:	2206      	movs	r2, #6
 8018924:	9201      	str	r2, [sp, #4]
 8018926:	9300      	str	r3, [sp, #0]
 8018928:	462b      	mov	r3, r5
 801892a:	4622      	mov	r2, r4
 801892c:	f004 fc40 	bl	801d1b0 <ip4_output_if>
 8018930:	4603      	mov	r3, r0
 8018932:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018934:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018938:	4618      	mov	r0, r3
 801893a:	3720      	adds	r7, #32
 801893c:	46bd      	mov	sp, r7
 801893e:	bdb0      	pop	{r4, r5, r7, pc}
 8018940:	080238e8 	.word	0x080238e8
 8018944:	08023eac 	.word	0x08023eac
 8018948:	0802393c 	.word	0x0802393c
 801894c:	08023ecc 	.word	0x08023ecc
 8018950:	08023eec 	.word	0x08023eec
 8018954:	200101cc 	.word	0x200101cc
 8018958:	08023f10 	.word	0x08023f10

0801895c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801895c:	b5b0      	push	{r4, r5, r7, lr}
 801895e:	b084      	sub	sp, #16
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	2b00      	cmp	r3, #0
 8018968:	d106      	bne.n	8018978 <tcp_rexmit_rto_prepare+0x1c>
 801896a:	4b31      	ldr	r3, [pc, #196]	; (8018a30 <tcp_rexmit_rto_prepare+0xd4>)
 801896c:	f240 6263 	movw	r2, #1635	; 0x663
 8018970:	4930      	ldr	r1, [pc, #192]	; (8018a34 <tcp_rexmit_rto_prepare+0xd8>)
 8018972:	4831      	ldr	r0, [pc, #196]	; (8018a38 <tcp_rexmit_rto_prepare+0xdc>)
 8018974:	f006 ff9a 	bl	801f8ac <iprintf>

  if (pcb->unacked == NULL) {
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801897c:	2b00      	cmp	r3, #0
 801897e:	d102      	bne.n	8018986 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018980:	f06f 0305 	mvn.w	r3, #5
 8018984:	e050      	b.n	8018a28 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801898a:	60fb      	str	r3, [r7, #12]
 801898c:	e00b      	b.n	80189a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801898e:	68f8      	ldr	r0, [r7, #12]
 8018990:	f7ff fee4 	bl	801875c <tcp_output_segment_busy>
 8018994:	4603      	mov	r3, r0
 8018996:	2b00      	cmp	r3, #0
 8018998:	d002      	beq.n	80189a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801899a:	f06f 0305 	mvn.w	r3, #5
 801899e:	e043      	b.n	8018a28 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	60fb      	str	r3, [r7, #12]
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d1ef      	bne.n	801898e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80189ae:	68f8      	ldr	r0, [r7, #12]
 80189b0:	f7ff fed4 	bl	801875c <tcp_output_segment_busy>
 80189b4:	4603      	mov	r3, r0
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d002      	beq.n	80189c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80189ba:	f06f 0305 	mvn.w	r3, #5
 80189be:	e033      	b.n	8018a28 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	2200      	movs	r2, #0
 80189d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	8b5b      	ldrh	r3, [r3, #26]
 80189da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80189de:	b29a      	uxth	r2, r3
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	68db      	ldr	r3, [r3, #12]
 80189e8:	685b      	ldr	r3, [r3, #4]
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7f8 fccd 	bl	801138a <lwip_htonl>
 80189f0:	4604      	mov	r4, r0
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	891b      	ldrh	r3, [r3, #8]
 80189f6:	461d      	mov	r5, r3
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	68db      	ldr	r3, [r3, #12]
 80189fc:	899b      	ldrh	r3, [r3, #12]
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	4618      	mov	r0, r3
 8018a02:	f7f8 fcad 	bl	8011360 <lwip_htons>
 8018a06:	4603      	mov	r3, r0
 8018a08:	b2db      	uxtb	r3, r3
 8018a0a:	f003 0303 	and.w	r3, r3, #3
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d001      	beq.n	8018a16 <tcp_rexmit_rto_prepare+0xba>
 8018a12:	2301      	movs	r3, #1
 8018a14:	e000      	b.n	8018a18 <tcp_rexmit_rto_prepare+0xbc>
 8018a16:	2300      	movs	r3, #0
 8018a18:	442b      	add	r3, r5
 8018a1a:	18e2      	adds	r2, r4, r3
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	2200      	movs	r2, #0
 8018a24:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018a26:	2300      	movs	r3, #0
}
 8018a28:	4618      	mov	r0, r3
 8018a2a:	3710      	adds	r7, #16
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8018a30:	080238e8 	.word	0x080238e8
 8018a34:	08023f24 	.word	0x08023f24
 8018a38:	0802393c 	.word	0x0802393c

08018a3c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b082      	sub	sp, #8
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d106      	bne.n	8018a58 <tcp_rexmit_rto_commit+0x1c>
 8018a4a:	4b0d      	ldr	r3, [pc, #52]	; (8018a80 <tcp_rexmit_rto_commit+0x44>)
 8018a4c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018a50:	490c      	ldr	r1, [pc, #48]	; (8018a84 <tcp_rexmit_rto_commit+0x48>)
 8018a52:	480d      	ldr	r0, [pc, #52]	; (8018a88 <tcp_rexmit_rto_commit+0x4c>)
 8018a54:	f006 ff2a 	bl	801f8ac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018a5e:	2bff      	cmp	r3, #255	; 0xff
 8018a60:	d007      	beq.n	8018a72 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018a68:	3301      	adds	r3, #1
 8018a6a:	b2da      	uxtb	r2, r3
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	f7ff fc7e 	bl	8018374 <tcp_output>
}
 8018a78:	bf00      	nop
 8018a7a:	3708      	adds	r7, #8
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	080238e8 	.word	0x080238e8
 8018a84:	08023f48 	.word	0x08023f48
 8018a88:	0802393c 	.word	0x0802393c

08018a8c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b082      	sub	sp, #8
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d106      	bne.n	8018aa8 <tcp_rexmit_rto+0x1c>
 8018a9a:	4b0a      	ldr	r3, [pc, #40]	; (8018ac4 <tcp_rexmit_rto+0x38>)
 8018a9c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018aa0:	4909      	ldr	r1, [pc, #36]	; (8018ac8 <tcp_rexmit_rto+0x3c>)
 8018aa2:	480a      	ldr	r0, [pc, #40]	; (8018acc <tcp_rexmit_rto+0x40>)
 8018aa4:	f006 ff02 	bl	801f8ac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018aa8:	6878      	ldr	r0, [r7, #4]
 8018aaa:	f7ff ff57 	bl	801895c <tcp_rexmit_rto_prepare>
 8018aae:	4603      	mov	r3, r0
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d102      	bne.n	8018aba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018ab4:	6878      	ldr	r0, [r7, #4]
 8018ab6:	f7ff ffc1 	bl	8018a3c <tcp_rexmit_rto_commit>
  }
}
 8018aba:	bf00      	nop
 8018abc:	3708      	adds	r7, #8
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	080238e8 	.word	0x080238e8
 8018ac8:	08023f6c 	.word	0x08023f6c
 8018acc:	0802393c 	.word	0x0802393c

08018ad0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018ad0:	b590      	push	{r4, r7, lr}
 8018ad2:	b085      	sub	sp, #20
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d106      	bne.n	8018aec <tcp_rexmit+0x1c>
 8018ade:	4b2f      	ldr	r3, [pc, #188]	; (8018b9c <tcp_rexmit+0xcc>)
 8018ae0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018ae4:	492e      	ldr	r1, [pc, #184]	; (8018ba0 <tcp_rexmit+0xd0>)
 8018ae6:	482f      	ldr	r0, [pc, #188]	; (8018ba4 <tcp_rexmit+0xd4>)
 8018ae8:	f006 fee0 	bl	801f8ac <iprintf>

  if (pcb->unacked == NULL) {
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d102      	bne.n	8018afa <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018af4:	f06f 0305 	mvn.w	r3, #5
 8018af8:	e04c      	b.n	8018b94 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018afe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018b00:	68b8      	ldr	r0, [r7, #8]
 8018b02:	f7ff fe2b 	bl	801875c <tcp_output_segment_busy>
 8018b06:	4603      	mov	r3, r0
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d002      	beq.n	8018b12 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018b0c:	f06f 0305 	mvn.w	r3, #5
 8018b10:	e040      	b.n	8018b94 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018b12:	68bb      	ldr	r3, [r7, #8]
 8018b14:	681a      	ldr	r2, [r3, #0]
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	336c      	adds	r3, #108	; 0x6c
 8018b1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018b20:	e002      	b.n	8018b28 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d011      	beq.n	8018b54 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	68db      	ldr	r3, [r3, #12]
 8018b36:	685b      	ldr	r3, [r3, #4]
 8018b38:	4618      	mov	r0, r3
 8018b3a:	f7f8 fc26 	bl	801138a <lwip_htonl>
 8018b3e:	4604      	mov	r4, r0
 8018b40:	68bb      	ldr	r3, [r7, #8]
 8018b42:	68db      	ldr	r3, [r3, #12]
 8018b44:	685b      	ldr	r3, [r3, #4]
 8018b46:	4618      	mov	r0, r3
 8018b48:	f7f8 fc1f 	bl	801138a <lwip_htonl>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	dbe6      	blt.n	8018b22 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	681a      	ldr	r2, [r3, #0]
 8018b58:	68bb      	ldr	r3, [r7, #8]
 8018b5a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	68ba      	ldr	r2, [r7, #8]
 8018b60:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018b62:	68bb      	ldr	r3, [r7, #8]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d103      	bne.n	8018b72 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b78:	2bff      	cmp	r3, #255	; 0xff
 8018b7a:	d007      	beq.n	8018b8c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b82:	3301      	adds	r3, #1
 8018b84:	b2da      	uxtb	r2, r3
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	2200      	movs	r2, #0
 8018b90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018b92:	2300      	movs	r3, #0
}
 8018b94:	4618      	mov	r0, r3
 8018b96:	3714      	adds	r7, #20
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd90      	pop	{r4, r7, pc}
 8018b9c:	080238e8 	.word	0x080238e8
 8018ba0:	08023f88 	.word	0x08023f88
 8018ba4:	0802393c 	.word	0x0802393c

08018ba8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b082      	sub	sp, #8
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d106      	bne.n	8018bc4 <tcp_rexmit_fast+0x1c>
 8018bb6:	4b2a      	ldr	r3, [pc, #168]	; (8018c60 <tcp_rexmit_fast+0xb8>)
 8018bb8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018bbc:	4929      	ldr	r1, [pc, #164]	; (8018c64 <tcp_rexmit_fast+0xbc>)
 8018bbe:	482a      	ldr	r0, [pc, #168]	; (8018c68 <tcp_rexmit_fast+0xc0>)
 8018bc0:	f006 fe74 	bl	801f8ac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d044      	beq.n	8018c56 <tcp_rexmit_fast+0xae>
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	8b5b      	ldrh	r3, [r3, #26]
 8018bd0:	f003 0304 	and.w	r3, r3, #4
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d13e      	bne.n	8018c56 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018bd8:	6878      	ldr	r0, [r7, #4]
 8018bda:	f7ff ff79 	bl	8018ad0 <tcp_rexmit>
 8018bde:	4603      	mov	r3, r0
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d138      	bne.n	8018c56 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018bf0:	4293      	cmp	r3, r2
 8018bf2:	bf28      	it	cs
 8018bf4:	4613      	movcs	r3, r2
 8018bf6:	b29b      	uxth	r3, r3
 8018bf8:	0fda      	lsrs	r2, r3, #31
 8018bfa:	4413      	add	r3, r2
 8018bfc:	105b      	asrs	r3, r3, #1
 8018bfe:	b29a      	uxth	r2, r3
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018c0c:	461a      	mov	r2, r3
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c12:	005b      	lsls	r3, r3, #1
 8018c14:	429a      	cmp	r2, r3
 8018c16:	d206      	bcs.n	8018c26 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c1c:	005b      	lsls	r3, r3, #1
 8018c1e:	b29a      	uxth	r2, r3
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018c30:	4619      	mov	r1, r3
 8018c32:	0049      	lsls	r1, r1, #1
 8018c34:	440b      	add	r3, r1
 8018c36:	b29b      	uxth	r3, r3
 8018c38:	4413      	add	r3, r2
 8018c3a:	b29a      	uxth	r2, r3
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	8b5b      	ldrh	r3, [r3, #26]
 8018c46:	f043 0304 	orr.w	r3, r3, #4
 8018c4a:	b29a      	uxth	r2, r3
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	2200      	movs	r2, #0
 8018c54:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018c56:	bf00      	nop
 8018c58:	3708      	adds	r7, #8
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}
 8018c5e:	bf00      	nop
 8018c60:	080238e8 	.word	0x080238e8
 8018c64:	08023fa0 	.word	0x08023fa0
 8018c68:	0802393c 	.word	0x0802393c

08018c6c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b086      	sub	sp, #24
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	607b      	str	r3, [r7, #4]
 8018c76:	460b      	mov	r3, r1
 8018c78:	817b      	strh	r3, [r7, #10]
 8018c7a:	4613      	mov	r3, r2
 8018c7c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018c7e:	897a      	ldrh	r2, [r7, #10]
 8018c80:	893b      	ldrh	r3, [r7, #8]
 8018c82:	4413      	add	r3, r2
 8018c84:	b29b      	uxth	r3, r3
 8018c86:	3314      	adds	r3, #20
 8018c88:	b29b      	uxth	r3, r3
 8018c8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018c8e:	4619      	mov	r1, r3
 8018c90:	2022      	movs	r0, #34	; 0x22
 8018c92:	f7f9 fcb7 	bl	8012604 <pbuf_alloc>
 8018c96:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018c98:	697b      	ldr	r3, [r7, #20]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d04d      	beq.n	8018d3a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018c9e:	897b      	ldrh	r3, [r7, #10]
 8018ca0:	3313      	adds	r3, #19
 8018ca2:	697a      	ldr	r2, [r7, #20]
 8018ca4:	8952      	ldrh	r2, [r2, #10]
 8018ca6:	4293      	cmp	r3, r2
 8018ca8:	db06      	blt.n	8018cb8 <tcp_output_alloc_header_common+0x4c>
 8018caa:	4b26      	ldr	r3, [pc, #152]	; (8018d44 <tcp_output_alloc_header_common+0xd8>)
 8018cac:	f240 7223 	movw	r2, #1827	; 0x723
 8018cb0:	4925      	ldr	r1, [pc, #148]	; (8018d48 <tcp_output_alloc_header_common+0xdc>)
 8018cb2:	4826      	ldr	r0, [pc, #152]	; (8018d4c <tcp_output_alloc_header_common+0xe0>)
 8018cb4:	f006 fdfa 	bl	801f8ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018cb8:	697b      	ldr	r3, [r7, #20]
 8018cba:	685b      	ldr	r3, [r3, #4]
 8018cbc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018cbe:	8c3b      	ldrh	r3, [r7, #32]
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7f8 fb4d 	bl	8011360 <lwip_htons>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	461a      	mov	r2, r3
 8018cca:	693b      	ldr	r3, [r7, #16]
 8018ccc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f7f8 fb45 	bl	8011360 <lwip_htons>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	461a      	mov	r2, r3
 8018cda:	693b      	ldr	r3, [r7, #16]
 8018cdc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018cde:	693b      	ldr	r3, [r7, #16]
 8018ce0:	687a      	ldr	r2, [r7, #4]
 8018ce2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018ce4:	68f8      	ldr	r0, [r7, #12]
 8018ce6:	f7f8 fb50 	bl	801138a <lwip_htonl>
 8018cea:	4602      	mov	r2, r0
 8018cec:	693b      	ldr	r3, [r7, #16]
 8018cee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018cf0:	897b      	ldrh	r3, [r7, #10]
 8018cf2:	089b      	lsrs	r3, r3, #2
 8018cf4:	b29b      	uxth	r3, r3
 8018cf6:	3305      	adds	r3, #5
 8018cf8:	b29b      	uxth	r3, r3
 8018cfa:	031b      	lsls	r3, r3, #12
 8018cfc:	b29a      	uxth	r2, r3
 8018cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018d02:	b29b      	uxth	r3, r3
 8018d04:	4313      	orrs	r3, r2
 8018d06:	b29b      	uxth	r3, r3
 8018d08:	4618      	mov	r0, r3
 8018d0a:	f7f8 fb29 	bl	8011360 <lwip_htons>
 8018d0e:	4603      	mov	r3, r0
 8018d10:	461a      	mov	r2, r3
 8018d12:	693b      	ldr	r3, [r7, #16]
 8018d14:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018d16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018d18:	4618      	mov	r0, r3
 8018d1a:	f7f8 fb21 	bl	8011360 <lwip_htons>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	461a      	mov	r2, r3
 8018d22:	693b      	ldr	r3, [r7, #16]
 8018d24:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018d26:	693b      	ldr	r3, [r7, #16]
 8018d28:	2200      	movs	r2, #0
 8018d2a:	741a      	strb	r2, [r3, #16]
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018d30:	693b      	ldr	r3, [r7, #16]
 8018d32:	2200      	movs	r2, #0
 8018d34:	749a      	strb	r2, [r3, #18]
 8018d36:	2200      	movs	r2, #0
 8018d38:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018d3a:	697b      	ldr	r3, [r7, #20]
}
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	3718      	adds	r7, #24
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd80      	pop	{r7, pc}
 8018d44:	080238e8 	.word	0x080238e8
 8018d48:	08023fc0 	.word	0x08023fc0
 8018d4c:	0802393c 	.word	0x0802393c

08018d50 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018d50:	b5b0      	push	{r4, r5, r7, lr}
 8018d52:	b08a      	sub	sp, #40	; 0x28
 8018d54:	af04      	add	r7, sp, #16
 8018d56:	60f8      	str	r0, [r7, #12]
 8018d58:	607b      	str	r3, [r7, #4]
 8018d5a:	460b      	mov	r3, r1
 8018d5c:	817b      	strh	r3, [r7, #10]
 8018d5e:	4613      	mov	r3, r2
 8018d60:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d106      	bne.n	8018d76 <tcp_output_alloc_header+0x26>
 8018d68:	4b15      	ldr	r3, [pc, #84]	; (8018dc0 <tcp_output_alloc_header+0x70>)
 8018d6a:	f240 7242 	movw	r2, #1858	; 0x742
 8018d6e:	4915      	ldr	r1, [pc, #84]	; (8018dc4 <tcp_output_alloc_header+0x74>)
 8018d70:	4815      	ldr	r0, [pc, #84]	; (8018dc8 <tcp_output_alloc_header+0x78>)
 8018d72:	f006 fd9b 	bl	801f8ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	8adb      	ldrh	r3, [r3, #22]
 8018d7e:	68fa      	ldr	r2, [r7, #12]
 8018d80:	8b12      	ldrh	r2, [r2, #24]
 8018d82:	68f9      	ldr	r1, [r7, #12]
 8018d84:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8018d86:	893d      	ldrh	r5, [r7, #8]
 8018d88:	897c      	ldrh	r4, [r7, #10]
 8018d8a:	9103      	str	r1, [sp, #12]
 8018d8c:	2110      	movs	r1, #16
 8018d8e:	9102      	str	r1, [sp, #8]
 8018d90:	9201      	str	r2, [sp, #4]
 8018d92:	9300      	str	r3, [sp, #0]
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	462a      	mov	r2, r5
 8018d98:	4621      	mov	r1, r4
 8018d9a:	f7ff ff67 	bl	8018c6c <tcp_output_alloc_header_common>
 8018d9e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d006      	beq.n	8018db4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018daa:	68fa      	ldr	r2, [r7, #12]
 8018dac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018dae:	441a      	add	r2, r3
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018db4:	697b      	ldr	r3, [r7, #20]
}
 8018db6:	4618      	mov	r0, r3
 8018db8:	3718      	adds	r7, #24
 8018dba:	46bd      	mov	sp, r7
 8018dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8018dbe:	bf00      	nop
 8018dc0:	080238e8 	.word	0x080238e8
 8018dc4:	08023ff0 	.word	0x08023ff0
 8018dc8:	0802393c 	.word	0x0802393c

08018dcc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b088      	sub	sp, #32
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	60f8      	str	r0, [r7, #12]
 8018dd4:	60b9      	str	r1, [r7, #8]
 8018dd6:	4611      	mov	r1, r2
 8018dd8:	461a      	mov	r2, r3
 8018dda:	460b      	mov	r3, r1
 8018ddc:	71fb      	strb	r3, [r7, #7]
 8018dde:	4613      	mov	r3, r2
 8018de0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018de2:	2300      	movs	r3, #0
 8018de4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018de6:	68bb      	ldr	r3, [r7, #8]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d106      	bne.n	8018dfa <tcp_output_fill_options+0x2e>
 8018dec:	4b12      	ldr	r3, [pc, #72]	; (8018e38 <tcp_output_fill_options+0x6c>)
 8018dee:	f240 7256 	movw	r2, #1878	; 0x756
 8018df2:	4912      	ldr	r1, [pc, #72]	; (8018e3c <tcp_output_fill_options+0x70>)
 8018df4:	4812      	ldr	r0, [pc, #72]	; (8018e40 <tcp_output_fill_options+0x74>)
 8018df6:	f006 fd59 	bl	801f8ac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018e00:	69bb      	ldr	r3, [r7, #24]
 8018e02:	3314      	adds	r3, #20
 8018e04:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018e06:	8bfb      	ldrh	r3, [r7, #30]
 8018e08:	009b      	lsls	r3, r3, #2
 8018e0a:	461a      	mov	r2, r3
 8018e0c:	79fb      	ldrb	r3, [r7, #7]
 8018e0e:	009b      	lsls	r3, r3, #2
 8018e10:	f003 0304 	and.w	r3, r3, #4
 8018e14:	4413      	add	r3, r2
 8018e16:	3314      	adds	r3, #20
 8018e18:	69ba      	ldr	r2, [r7, #24]
 8018e1a:	4413      	add	r3, r2
 8018e1c:	697a      	ldr	r2, [r7, #20]
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d006      	beq.n	8018e30 <tcp_output_fill_options+0x64>
 8018e22:	4b05      	ldr	r3, [pc, #20]	; (8018e38 <tcp_output_fill_options+0x6c>)
 8018e24:	f240 7275 	movw	r2, #1909	; 0x775
 8018e28:	4906      	ldr	r1, [pc, #24]	; (8018e44 <tcp_output_fill_options+0x78>)
 8018e2a:	4805      	ldr	r0, [pc, #20]	; (8018e40 <tcp_output_fill_options+0x74>)
 8018e2c:	f006 fd3e 	bl	801f8ac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018e30:	bf00      	nop
 8018e32:	3720      	adds	r7, #32
 8018e34:	46bd      	mov	sp, r7
 8018e36:	bd80      	pop	{r7, pc}
 8018e38:	080238e8 	.word	0x080238e8
 8018e3c:	08024018 	.word	0x08024018
 8018e40:	0802393c 	.word	0x0802393c
 8018e44:	08023f10 	.word	0x08023f10

08018e48 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b08a      	sub	sp, #40	; 0x28
 8018e4c:	af04      	add	r7, sp, #16
 8018e4e:	60f8      	str	r0, [r7, #12]
 8018e50:	60b9      	str	r1, [r7, #8]
 8018e52:	607a      	str	r2, [r7, #4]
 8018e54:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018e56:	68bb      	ldr	r3, [r7, #8]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d106      	bne.n	8018e6a <tcp_output_control_segment+0x22>
 8018e5c:	4b1c      	ldr	r3, [pc, #112]	; (8018ed0 <tcp_output_control_segment+0x88>)
 8018e5e:	f240 7287 	movw	r2, #1927	; 0x787
 8018e62:	491c      	ldr	r1, [pc, #112]	; (8018ed4 <tcp_output_control_segment+0x8c>)
 8018e64:	481c      	ldr	r0, [pc, #112]	; (8018ed8 <tcp_output_control_segment+0x90>)
 8018e66:	f006 fd21 	bl	801f8ac <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018e6a:	683a      	ldr	r2, [r7, #0]
 8018e6c:	6879      	ldr	r1, [r7, #4]
 8018e6e:	68f8      	ldr	r0, [r7, #12]
 8018e70:	f7fe fae8 	bl	8017444 <tcp_route>
 8018e74:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018e76:	693b      	ldr	r3, [r7, #16]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d102      	bne.n	8018e82 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018e7c:	23fc      	movs	r3, #252	; 0xfc
 8018e7e:	75fb      	strb	r3, [r7, #23]
 8018e80:	e01c      	b.n	8018ebc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d006      	beq.n	8018e96 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	7adb      	ldrb	r3, [r3, #11]
 8018e8c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	7a9b      	ldrb	r3, [r3, #10]
 8018e92:	757b      	strb	r3, [r7, #21]
 8018e94:	e003      	b.n	8018e9e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018e96:	23ff      	movs	r3, #255	; 0xff
 8018e98:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018e9e:	7dba      	ldrb	r2, [r7, #22]
 8018ea0:	693b      	ldr	r3, [r7, #16]
 8018ea2:	9302      	str	r3, [sp, #8]
 8018ea4:	2306      	movs	r3, #6
 8018ea6:	9301      	str	r3, [sp, #4]
 8018ea8:	7d7b      	ldrb	r3, [r7, #21]
 8018eaa:	9300      	str	r3, [sp, #0]
 8018eac:	4613      	mov	r3, r2
 8018eae:	683a      	ldr	r2, [r7, #0]
 8018eb0:	6879      	ldr	r1, [r7, #4]
 8018eb2:	68b8      	ldr	r0, [r7, #8]
 8018eb4:	f004 f97c 	bl	801d1b0 <ip4_output_if>
 8018eb8:	4603      	mov	r3, r0
 8018eba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018ebc:	68b8      	ldr	r0, [r7, #8]
 8018ebe:	f7f9 fe85 	bl	8012bcc <pbuf_free>
  return err;
 8018ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	3718      	adds	r7, #24
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	bd80      	pop	{r7, pc}
 8018ece:	bf00      	nop
 8018ed0:	080238e8 	.word	0x080238e8
 8018ed4:	08024040 	.word	0x08024040
 8018ed8:	0802393c 	.word	0x0802393c

08018edc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018edc:	b590      	push	{r4, r7, lr}
 8018ede:	b08b      	sub	sp, #44	; 0x2c
 8018ee0:	af04      	add	r7, sp, #16
 8018ee2:	60f8      	str	r0, [r7, #12]
 8018ee4:	60b9      	str	r1, [r7, #8]
 8018ee6:	607a      	str	r2, [r7, #4]
 8018ee8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018eea:	683b      	ldr	r3, [r7, #0]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d106      	bne.n	8018efe <tcp_rst+0x22>
 8018ef0:	4b1f      	ldr	r3, [pc, #124]	; (8018f70 <tcp_rst+0x94>)
 8018ef2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8018ef6:	491f      	ldr	r1, [pc, #124]	; (8018f74 <tcp_rst+0x98>)
 8018ef8:	481f      	ldr	r0, [pc, #124]	; (8018f78 <tcp_rst+0x9c>)
 8018efa:	f006 fcd7 	bl	801f8ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d106      	bne.n	8018f12 <tcp_rst+0x36>
 8018f04:	4b1a      	ldr	r3, [pc, #104]	; (8018f70 <tcp_rst+0x94>)
 8018f06:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8018f0a:	491c      	ldr	r1, [pc, #112]	; (8018f7c <tcp_rst+0xa0>)
 8018f0c:	481a      	ldr	r0, [pc, #104]	; (8018f78 <tcp_rst+0x9c>)
 8018f0e:	f006 fccd 	bl	801f8ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018f12:	2300      	movs	r3, #0
 8018f14:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018f16:	f246 0308 	movw	r3, #24584	; 0x6008
 8018f1a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018f1c:	7dfb      	ldrb	r3, [r7, #23]
 8018f1e:	b29c      	uxth	r4, r3
 8018f20:	68b8      	ldr	r0, [r7, #8]
 8018f22:	f7f8 fa32 	bl	801138a <lwip_htonl>
 8018f26:	4602      	mov	r2, r0
 8018f28:	8abb      	ldrh	r3, [r7, #20]
 8018f2a:	9303      	str	r3, [sp, #12]
 8018f2c:	2314      	movs	r3, #20
 8018f2e:	9302      	str	r3, [sp, #8]
 8018f30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018f32:	9301      	str	r3, [sp, #4]
 8018f34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018f36:	9300      	str	r3, [sp, #0]
 8018f38:	4613      	mov	r3, r2
 8018f3a:	2200      	movs	r2, #0
 8018f3c:	4621      	mov	r1, r4
 8018f3e:	6878      	ldr	r0, [r7, #4]
 8018f40:	f7ff fe94 	bl	8018c6c <tcp_output_alloc_header_common>
 8018f44:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018f46:	693b      	ldr	r3, [r7, #16]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d00c      	beq.n	8018f66 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018f4c:	7dfb      	ldrb	r3, [r7, #23]
 8018f4e:	2200      	movs	r2, #0
 8018f50:	6939      	ldr	r1, [r7, #16]
 8018f52:	68f8      	ldr	r0, [r7, #12]
 8018f54:	f7ff ff3a 	bl	8018dcc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f5a:	683a      	ldr	r2, [r7, #0]
 8018f5c:	6939      	ldr	r1, [r7, #16]
 8018f5e:	68f8      	ldr	r0, [r7, #12]
 8018f60:	f7ff ff72 	bl	8018e48 <tcp_output_control_segment>
 8018f64:	e000      	b.n	8018f68 <tcp_rst+0x8c>
    return;
 8018f66:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018f68:	371c      	adds	r7, #28
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd90      	pop	{r4, r7, pc}
 8018f6e:	bf00      	nop
 8018f70:	080238e8 	.word	0x080238e8
 8018f74:	0802406c 	.word	0x0802406c
 8018f78:	0802393c 	.word	0x0802393c
 8018f7c:	08024088 	.word	0x08024088

08018f80 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018f80:	b590      	push	{r4, r7, lr}
 8018f82:	b087      	sub	sp, #28
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018f88:	2300      	movs	r3, #0
 8018f8a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d106      	bne.n	8018fa4 <tcp_send_empty_ack+0x24>
 8018f96:	4b28      	ldr	r3, [pc, #160]	; (8019038 <tcp_send_empty_ack+0xb8>)
 8018f98:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018f9c:	4927      	ldr	r1, [pc, #156]	; (801903c <tcp_send_empty_ack+0xbc>)
 8018f9e:	4828      	ldr	r0, [pc, #160]	; (8019040 <tcp_send_empty_ack+0xc0>)
 8018fa0:	f006 fc84 	bl	801f8ac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018fa4:	7dfb      	ldrb	r3, [r7, #23]
 8018fa6:	009b      	lsls	r3, r3, #2
 8018fa8:	b2db      	uxtb	r3, r3
 8018faa:	f003 0304 	and.w	r3, r3, #4
 8018fae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018fb0:	7d7b      	ldrb	r3, [r7, #21]
 8018fb2:	b29c      	uxth	r4, r3
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f7f8 f9e6 	bl	801138a <lwip_htonl>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	4621      	mov	r1, r4
 8018fc4:	6878      	ldr	r0, [r7, #4]
 8018fc6:	f7ff fec3 	bl	8018d50 <tcp_output_alloc_header>
 8018fca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018fcc:	693b      	ldr	r3, [r7, #16]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d109      	bne.n	8018fe6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	8b5b      	ldrh	r3, [r3, #26]
 8018fd6:	f043 0303 	orr.w	r3, r3, #3
 8018fda:	b29a      	uxth	r2, r3
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018fe0:	f06f 0301 	mvn.w	r3, #1
 8018fe4:	e023      	b.n	801902e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018fe6:	7dbb      	ldrb	r3, [r7, #22]
 8018fe8:	7dfa      	ldrb	r2, [r7, #23]
 8018fea:	6939      	ldr	r1, [r7, #16]
 8018fec:	6878      	ldr	r0, [r7, #4]
 8018fee:	f7ff feed 	bl	8018dcc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018ff2:	687a      	ldr	r2, [r7, #4]
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	3304      	adds	r3, #4
 8018ff8:	6939      	ldr	r1, [r7, #16]
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f7ff ff24 	bl	8018e48 <tcp_output_control_segment>
 8019000:	4603      	mov	r3, r0
 8019002:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d007      	beq.n	801901c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	8b5b      	ldrh	r3, [r3, #26]
 8019010:	f043 0303 	orr.w	r3, r3, #3
 8019014:	b29a      	uxth	r2, r3
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	835a      	strh	r2, [r3, #26]
 801901a:	e006      	b.n	801902a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	8b5b      	ldrh	r3, [r3, #26]
 8019020:	f023 0303 	bic.w	r3, r3, #3
 8019024:	b29a      	uxth	r2, r3
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801902a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801902e:	4618      	mov	r0, r3
 8019030:	371c      	adds	r7, #28
 8019032:	46bd      	mov	sp, r7
 8019034:	bd90      	pop	{r4, r7, pc}
 8019036:	bf00      	nop
 8019038:	080238e8 	.word	0x080238e8
 801903c:	080240a4 	.word	0x080240a4
 8019040:	0802393c 	.word	0x0802393c

08019044 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019044:	b590      	push	{r4, r7, lr}
 8019046:	b087      	sub	sp, #28
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801904c:	2300      	movs	r3, #0
 801904e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d106      	bne.n	8019064 <tcp_keepalive+0x20>
 8019056:	4b18      	ldr	r3, [pc, #96]	; (80190b8 <tcp_keepalive+0x74>)
 8019058:	f640 0224 	movw	r2, #2084	; 0x824
 801905c:	4917      	ldr	r1, [pc, #92]	; (80190bc <tcp_keepalive+0x78>)
 801905e:	4818      	ldr	r0, [pc, #96]	; (80190c0 <tcp_keepalive+0x7c>)
 8019060:	f006 fc24 	bl	801f8ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019064:	7dfb      	ldrb	r3, [r7, #23]
 8019066:	b29c      	uxth	r4, r3
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801906c:	3b01      	subs	r3, #1
 801906e:	4618      	mov	r0, r3
 8019070:	f7f8 f98b 	bl	801138a <lwip_htonl>
 8019074:	4603      	mov	r3, r0
 8019076:	2200      	movs	r2, #0
 8019078:	4621      	mov	r1, r4
 801907a:	6878      	ldr	r0, [r7, #4]
 801907c:	f7ff fe68 	bl	8018d50 <tcp_output_alloc_header>
 8019080:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019082:	693b      	ldr	r3, [r7, #16]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d102      	bne.n	801908e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801908c:	e010      	b.n	80190b0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801908e:	7dfb      	ldrb	r3, [r7, #23]
 8019090:	2200      	movs	r2, #0
 8019092:	6939      	ldr	r1, [r7, #16]
 8019094:	6878      	ldr	r0, [r7, #4]
 8019096:	f7ff fe99 	bl	8018dcc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801909a:	687a      	ldr	r2, [r7, #4]
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	3304      	adds	r3, #4
 80190a0:	6939      	ldr	r1, [r7, #16]
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f7ff fed0 	bl	8018e48 <tcp_output_control_segment>
 80190a8:	4603      	mov	r3, r0
 80190aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80190ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80190b0:	4618      	mov	r0, r3
 80190b2:	371c      	adds	r7, #28
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd90      	pop	{r4, r7, pc}
 80190b8:	080238e8 	.word	0x080238e8
 80190bc:	080240c4 	.word	0x080240c4
 80190c0:	0802393c 	.word	0x0802393c

080190c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80190c4:	b590      	push	{r4, r7, lr}
 80190c6:	b08b      	sub	sp, #44	; 0x2c
 80190c8:	af00      	add	r7, sp, #0
 80190ca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80190cc:	2300      	movs	r3, #0
 80190ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d106      	bne.n	80190e6 <tcp_zero_window_probe+0x22>
 80190d8:	4b4c      	ldr	r3, [pc, #304]	; (801920c <tcp_zero_window_probe+0x148>)
 80190da:	f640 024f 	movw	r2, #2127	; 0x84f
 80190de:	494c      	ldr	r1, [pc, #304]	; (8019210 <tcp_zero_window_probe+0x14c>)
 80190e0:	484c      	ldr	r0, [pc, #304]	; (8019214 <tcp_zero_window_probe+0x150>)
 80190e2:	f006 fbe3 	bl	801f8ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190ea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80190ec:	6a3b      	ldr	r3, [r7, #32]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d101      	bne.n	80190f6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80190f2:	2300      	movs	r3, #0
 80190f4:	e086      	b.n	8019204 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80190fc:	2bff      	cmp	r3, #255	; 0xff
 80190fe:	d007      	beq.n	8019110 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019106:	3301      	adds	r3, #1
 8019108:	b2da      	uxtb	r2, r3
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019110:	6a3b      	ldr	r3, [r7, #32]
 8019112:	68db      	ldr	r3, [r3, #12]
 8019114:	899b      	ldrh	r3, [r3, #12]
 8019116:	b29b      	uxth	r3, r3
 8019118:	4618      	mov	r0, r3
 801911a:	f7f8 f921 	bl	8011360 <lwip_htons>
 801911e:	4603      	mov	r3, r0
 8019120:	b2db      	uxtb	r3, r3
 8019122:	f003 0301 	and.w	r3, r3, #1
 8019126:	2b00      	cmp	r3, #0
 8019128:	d005      	beq.n	8019136 <tcp_zero_window_probe+0x72>
 801912a:	6a3b      	ldr	r3, [r7, #32]
 801912c:	891b      	ldrh	r3, [r3, #8]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d101      	bne.n	8019136 <tcp_zero_window_probe+0x72>
 8019132:	2301      	movs	r3, #1
 8019134:	e000      	b.n	8019138 <tcp_zero_window_probe+0x74>
 8019136:	2300      	movs	r3, #0
 8019138:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801913a:	7ffb      	ldrb	r3, [r7, #31]
 801913c:	2b00      	cmp	r3, #0
 801913e:	bf0c      	ite	eq
 8019140:	2301      	moveq	r3, #1
 8019142:	2300      	movne	r3, #0
 8019144:	b2db      	uxtb	r3, r3
 8019146:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801914c:	b299      	uxth	r1, r3
 801914e:	6a3b      	ldr	r3, [r7, #32]
 8019150:	68db      	ldr	r3, [r3, #12]
 8019152:	685b      	ldr	r3, [r3, #4]
 8019154:	8bba      	ldrh	r2, [r7, #28]
 8019156:	6878      	ldr	r0, [r7, #4]
 8019158:	f7ff fdfa 	bl	8018d50 <tcp_output_alloc_header>
 801915c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801915e:	69bb      	ldr	r3, [r7, #24]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d102      	bne.n	801916a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019168:	e04c      	b.n	8019204 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801916a:	69bb      	ldr	r3, [r7, #24]
 801916c:	685b      	ldr	r3, [r3, #4]
 801916e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019170:	7ffb      	ldrb	r3, [r7, #31]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d011      	beq.n	801919a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019176:	697b      	ldr	r3, [r7, #20]
 8019178:	899b      	ldrh	r3, [r3, #12]
 801917a:	b29b      	uxth	r3, r3
 801917c:	b21b      	sxth	r3, r3
 801917e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019182:	b21c      	sxth	r4, r3
 8019184:	2011      	movs	r0, #17
 8019186:	f7f8 f8eb 	bl	8011360 <lwip_htons>
 801918a:	4603      	mov	r3, r0
 801918c:	b21b      	sxth	r3, r3
 801918e:	4323      	orrs	r3, r4
 8019190:	b21b      	sxth	r3, r3
 8019192:	b29a      	uxth	r2, r3
 8019194:	697b      	ldr	r3, [r7, #20]
 8019196:	819a      	strh	r2, [r3, #12]
 8019198:	e010      	b.n	80191bc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801919a:	69bb      	ldr	r3, [r7, #24]
 801919c:	685b      	ldr	r3, [r3, #4]
 801919e:	3314      	adds	r3, #20
 80191a0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80191a2:	6a3b      	ldr	r3, [r7, #32]
 80191a4:	6858      	ldr	r0, [r3, #4]
 80191a6:	6a3b      	ldr	r3, [r7, #32]
 80191a8:	685b      	ldr	r3, [r3, #4]
 80191aa:	891a      	ldrh	r2, [r3, #8]
 80191ac:	6a3b      	ldr	r3, [r7, #32]
 80191ae:	891b      	ldrh	r3, [r3, #8]
 80191b0:	1ad3      	subs	r3, r2, r3
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	2201      	movs	r2, #1
 80191b6:	6939      	ldr	r1, [r7, #16]
 80191b8:	f7f9 ff0e 	bl	8012fd8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80191bc:	6a3b      	ldr	r3, [r7, #32]
 80191be:	68db      	ldr	r3, [r3, #12]
 80191c0:	685b      	ldr	r3, [r3, #4]
 80191c2:	4618      	mov	r0, r3
 80191c4:	f7f8 f8e1 	bl	801138a <lwip_htonl>
 80191c8:	4603      	mov	r3, r0
 80191ca:	3301      	adds	r3, #1
 80191cc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	1ad3      	subs	r3, r2, r3
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	da02      	bge.n	80191e0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	68fa      	ldr	r2, [r7, #12]
 80191de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80191e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80191e4:	2200      	movs	r2, #0
 80191e6:	69b9      	ldr	r1, [r7, #24]
 80191e8:	6878      	ldr	r0, [r7, #4]
 80191ea:	f7ff fdef 	bl	8018dcc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80191ee:	687a      	ldr	r2, [r7, #4]
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	3304      	adds	r3, #4
 80191f4:	69b9      	ldr	r1, [r7, #24]
 80191f6:	6878      	ldr	r0, [r7, #4]
 80191f8:	f7ff fe26 	bl	8018e48 <tcp_output_control_segment>
 80191fc:	4603      	mov	r3, r0
 80191fe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019200:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019204:	4618      	mov	r0, r3
 8019206:	372c      	adds	r7, #44	; 0x2c
 8019208:	46bd      	mov	sp, r7
 801920a:	bd90      	pop	{r4, r7, pc}
 801920c:	080238e8 	.word	0x080238e8
 8019210:	080240e0 	.word	0x080240e0
 8019214:	0802393c 	.word	0x0802393c

08019218 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b082      	sub	sp, #8
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019220:	f7f9 ffc8 	bl	80131b4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019224:	4b0a      	ldr	r3, [pc, #40]	; (8019250 <tcpip_tcp_timer+0x38>)
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	2b00      	cmp	r3, #0
 801922a:	d103      	bne.n	8019234 <tcpip_tcp_timer+0x1c>
 801922c:	4b09      	ldr	r3, [pc, #36]	; (8019254 <tcpip_tcp_timer+0x3c>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d005      	beq.n	8019240 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019234:	2200      	movs	r2, #0
 8019236:	4908      	ldr	r1, [pc, #32]	; (8019258 <tcpip_tcp_timer+0x40>)
 8019238:	20fa      	movs	r0, #250	; 0xfa
 801923a:	f000 f8f3 	bl	8019424 <sys_timeout>
 801923e:	e003      	b.n	8019248 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019240:	4b06      	ldr	r3, [pc, #24]	; (801925c <tcpip_tcp_timer+0x44>)
 8019242:	2200      	movs	r2, #0
 8019244:	601a      	str	r2, [r3, #0]
  }
}
 8019246:	bf00      	nop
 8019248:	bf00      	nop
 801924a:	3708      	adds	r7, #8
 801924c:	46bd      	mov	sp, r7
 801924e:	bd80      	pop	{r7, pc}
 8019250:	200101d8 	.word	0x200101d8
 8019254:	200101dc 	.word	0x200101dc
 8019258:	08019219 	.word	0x08019219
 801925c:	20010224 	.word	0x20010224

08019260 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019260:	b580      	push	{r7, lr}
 8019262:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019264:	4b0a      	ldr	r3, [pc, #40]	; (8019290 <tcp_timer_needed+0x30>)
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d10f      	bne.n	801928c <tcp_timer_needed+0x2c>
 801926c:	4b09      	ldr	r3, [pc, #36]	; (8019294 <tcp_timer_needed+0x34>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d103      	bne.n	801927c <tcp_timer_needed+0x1c>
 8019274:	4b08      	ldr	r3, [pc, #32]	; (8019298 <tcp_timer_needed+0x38>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d007      	beq.n	801928c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801927c:	4b04      	ldr	r3, [pc, #16]	; (8019290 <tcp_timer_needed+0x30>)
 801927e:	2201      	movs	r2, #1
 8019280:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019282:	2200      	movs	r2, #0
 8019284:	4905      	ldr	r1, [pc, #20]	; (801929c <tcp_timer_needed+0x3c>)
 8019286:	20fa      	movs	r0, #250	; 0xfa
 8019288:	f000 f8cc 	bl	8019424 <sys_timeout>
  }
}
 801928c:	bf00      	nop
 801928e:	bd80      	pop	{r7, pc}
 8019290:	20010224 	.word	0x20010224
 8019294:	200101d8 	.word	0x200101d8
 8019298:	200101dc 	.word	0x200101dc
 801929c:	08019219 	.word	0x08019219

080192a0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b086      	sub	sp, #24
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	60f8      	str	r0, [r7, #12]
 80192a8:	60b9      	str	r1, [r7, #8]
 80192aa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80192ac:	200a      	movs	r0, #10
 80192ae:	f7f8 fd2f 	bl	8011d10 <memp_malloc>
 80192b2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80192b4:	693b      	ldr	r3, [r7, #16]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d109      	bne.n	80192ce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80192ba:	693b      	ldr	r3, [r7, #16]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d151      	bne.n	8019364 <sys_timeout_abs+0xc4>
 80192c0:	4b2a      	ldr	r3, [pc, #168]	; (801936c <sys_timeout_abs+0xcc>)
 80192c2:	22be      	movs	r2, #190	; 0xbe
 80192c4:	492a      	ldr	r1, [pc, #168]	; (8019370 <sys_timeout_abs+0xd0>)
 80192c6:	482b      	ldr	r0, [pc, #172]	; (8019374 <sys_timeout_abs+0xd4>)
 80192c8:	f006 faf0 	bl	801f8ac <iprintf>
    return;
 80192cc:	e04a      	b.n	8019364 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80192ce:	693b      	ldr	r3, [r7, #16]
 80192d0:	2200      	movs	r2, #0
 80192d2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80192d4:	693b      	ldr	r3, [r7, #16]
 80192d6:	68ba      	ldr	r2, [r7, #8]
 80192d8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80192da:	693b      	ldr	r3, [r7, #16]
 80192dc:	687a      	ldr	r2, [r7, #4]
 80192de:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80192e0:	693b      	ldr	r3, [r7, #16]
 80192e2:	68fa      	ldr	r2, [r7, #12]
 80192e4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80192e6:	4b24      	ldr	r3, [pc, #144]	; (8019378 <sys_timeout_abs+0xd8>)
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d103      	bne.n	80192f6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80192ee:	4a22      	ldr	r2, [pc, #136]	; (8019378 <sys_timeout_abs+0xd8>)
 80192f0:	693b      	ldr	r3, [r7, #16]
 80192f2:	6013      	str	r3, [r2, #0]
    return;
 80192f4:	e037      	b.n	8019366 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80192f6:	693b      	ldr	r3, [r7, #16]
 80192f8:	685a      	ldr	r2, [r3, #4]
 80192fa:	4b1f      	ldr	r3, [pc, #124]	; (8019378 <sys_timeout_abs+0xd8>)
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	685b      	ldr	r3, [r3, #4]
 8019300:	1ad3      	subs	r3, r2, r3
 8019302:	0fdb      	lsrs	r3, r3, #31
 8019304:	f003 0301 	and.w	r3, r3, #1
 8019308:	b2db      	uxtb	r3, r3
 801930a:	2b00      	cmp	r3, #0
 801930c:	d007      	beq.n	801931e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801930e:	4b1a      	ldr	r3, [pc, #104]	; (8019378 <sys_timeout_abs+0xd8>)
 8019310:	681a      	ldr	r2, [r3, #0]
 8019312:	693b      	ldr	r3, [r7, #16]
 8019314:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019316:	4a18      	ldr	r2, [pc, #96]	; (8019378 <sys_timeout_abs+0xd8>)
 8019318:	693b      	ldr	r3, [r7, #16]
 801931a:	6013      	str	r3, [r2, #0]
 801931c:	e023      	b.n	8019366 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801931e:	4b16      	ldr	r3, [pc, #88]	; (8019378 <sys_timeout_abs+0xd8>)
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	617b      	str	r3, [r7, #20]
 8019324:	e01a      	b.n	801935c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019326:	697b      	ldr	r3, [r7, #20]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d00b      	beq.n	8019346 <sys_timeout_abs+0xa6>
 801932e:	693b      	ldr	r3, [r7, #16]
 8019330:	685a      	ldr	r2, [r3, #4]
 8019332:	697b      	ldr	r3, [r7, #20]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	685b      	ldr	r3, [r3, #4]
 8019338:	1ad3      	subs	r3, r2, r3
 801933a:	0fdb      	lsrs	r3, r3, #31
 801933c:	f003 0301 	and.w	r3, r3, #1
 8019340:	b2db      	uxtb	r3, r3
 8019342:	2b00      	cmp	r3, #0
 8019344:	d007      	beq.n	8019356 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019346:	697b      	ldr	r3, [r7, #20]
 8019348:	681a      	ldr	r2, [r3, #0]
 801934a:	693b      	ldr	r3, [r7, #16]
 801934c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801934e:	697b      	ldr	r3, [r7, #20]
 8019350:	693a      	ldr	r2, [r7, #16]
 8019352:	601a      	str	r2, [r3, #0]
        break;
 8019354:	e007      	b.n	8019366 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019356:	697b      	ldr	r3, [r7, #20]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	617b      	str	r3, [r7, #20]
 801935c:	697b      	ldr	r3, [r7, #20]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d1e1      	bne.n	8019326 <sys_timeout_abs+0x86>
 8019362:	e000      	b.n	8019366 <sys_timeout_abs+0xc6>
    return;
 8019364:	bf00      	nop
      }
    }
  }
}
 8019366:	3718      	adds	r7, #24
 8019368:	46bd      	mov	sp, r7
 801936a:	bd80      	pop	{r7, pc}
 801936c:	08024104 	.word	0x08024104
 8019370:	08024138 	.word	0x08024138
 8019374:	08024178 	.word	0x08024178
 8019378:	2001021c 	.word	0x2001021c

0801937c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b086      	sub	sp, #24
 8019380:	af00      	add	r7, sp, #0
 8019382:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019388:	697b      	ldr	r3, [r7, #20]
 801938a:	685b      	ldr	r3, [r3, #4]
 801938c:	4798      	blx	r3

  now = sys_now();
 801938e:	f7ec fc1b 	bl	8005bc8 <sys_now>
 8019392:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019394:	697b      	ldr	r3, [r7, #20]
 8019396:	681a      	ldr	r2, [r3, #0]
 8019398:	4b0f      	ldr	r3, [pc, #60]	; (80193d8 <lwip_cyclic_timer+0x5c>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	4413      	add	r3, r2
 801939e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80193a0:	68fa      	ldr	r2, [r7, #12]
 80193a2:	693b      	ldr	r3, [r7, #16]
 80193a4:	1ad3      	subs	r3, r2, r3
 80193a6:	0fdb      	lsrs	r3, r3, #31
 80193a8:	f003 0301 	and.w	r3, r3, #1
 80193ac:	b2db      	uxtb	r3, r3
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d009      	beq.n	80193c6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80193b2:	697b      	ldr	r3, [r7, #20]
 80193b4:	681a      	ldr	r2, [r3, #0]
 80193b6:	693b      	ldr	r3, [r7, #16]
 80193b8:	4413      	add	r3, r2
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	4907      	ldr	r1, [pc, #28]	; (80193dc <lwip_cyclic_timer+0x60>)
 80193be:	4618      	mov	r0, r3
 80193c0:	f7ff ff6e 	bl	80192a0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80193c4:	e004      	b.n	80193d0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80193c6:	687a      	ldr	r2, [r7, #4]
 80193c8:	4904      	ldr	r1, [pc, #16]	; (80193dc <lwip_cyclic_timer+0x60>)
 80193ca:	68f8      	ldr	r0, [r7, #12]
 80193cc:	f7ff ff68 	bl	80192a0 <sys_timeout_abs>
}
 80193d0:	bf00      	nop
 80193d2:	3718      	adds	r7, #24
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}
 80193d8:	20010220 	.word	0x20010220
 80193dc:	0801937d 	.word	0x0801937d

080193e0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80193e0:	b580      	push	{r7, lr}
 80193e2:	b082      	sub	sp, #8
 80193e4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80193e6:	2301      	movs	r3, #1
 80193e8:	607b      	str	r3, [r7, #4]
 80193ea:	e00e      	b.n	801940a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80193ec:	4a0b      	ldr	r2, [pc, #44]	; (801941c <sys_timeouts_init+0x3c>)
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	00db      	lsls	r3, r3, #3
 80193f8:	4a08      	ldr	r2, [pc, #32]	; (801941c <sys_timeouts_init+0x3c>)
 80193fa:	4413      	add	r3, r2
 80193fc:	461a      	mov	r2, r3
 80193fe:	4908      	ldr	r1, [pc, #32]	; (8019420 <sys_timeouts_init+0x40>)
 8019400:	f000 f810 	bl	8019424 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	3301      	adds	r3, #1
 8019408:	607b      	str	r3, [r7, #4]
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	2b04      	cmp	r3, #4
 801940e:	d9ed      	bls.n	80193ec <sys_timeouts_init+0xc>
  }
}
 8019410:	bf00      	nop
 8019412:	bf00      	nop
 8019414:	3708      	adds	r7, #8
 8019416:	46bd      	mov	sp, r7
 8019418:	bd80      	pop	{r7, pc}
 801941a:	bf00      	nop
 801941c:	080251c0 	.word	0x080251c0
 8019420:	0801937d 	.word	0x0801937d

08019424 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b086      	sub	sp, #24
 8019428:	af00      	add	r7, sp, #0
 801942a:	60f8      	str	r0, [r7, #12]
 801942c:	60b9      	str	r1, [r7, #8]
 801942e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019436:	d306      	bcc.n	8019446 <sys_timeout+0x22>
 8019438:	4b0a      	ldr	r3, [pc, #40]	; (8019464 <sys_timeout+0x40>)
 801943a:	f240 1229 	movw	r2, #297	; 0x129
 801943e:	490a      	ldr	r1, [pc, #40]	; (8019468 <sys_timeout+0x44>)
 8019440:	480a      	ldr	r0, [pc, #40]	; (801946c <sys_timeout+0x48>)
 8019442:	f006 fa33 	bl	801f8ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019446:	f7ec fbbf 	bl	8005bc8 <sys_now>
 801944a:	4602      	mov	r2, r0
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	4413      	add	r3, r2
 8019450:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019452:	687a      	ldr	r2, [r7, #4]
 8019454:	68b9      	ldr	r1, [r7, #8]
 8019456:	6978      	ldr	r0, [r7, #20]
 8019458:	f7ff ff22 	bl	80192a0 <sys_timeout_abs>
#endif
}
 801945c:	bf00      	nop
 801945e:	3718      	adds	r7, #24
 8019460:	46bd      	mov	sp, r7
 8019462:	bd80      	pop	{r7, pc}
 8019464:	08024104 	.word	0x08024104
 8019468:	080241a0 	.word	0x080241a0
 801946c:	08024178 	.word	0x08024178

08019470 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b084      	sub	sp, #16
 8019474:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019476:	f7ec fba7 	bl	8005bc8 <sys_now>
 801947a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801947c:	4b17      	ldr	r3, [pc, #92]	; (80194dc <sys_check_timeouts+0x6c>)
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d022      	beq.n	80194ce <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019488:	68bb      	ldr	r3, [r7, #8]
 801948a:	685b      	ldr	r3, [r3, #4]
 801948c:	68fa      	ldr	r2, [r7, #12]
 801948e:	1ad3      	subs	r3, r2, r3
 8019490:	0fdb      	lsrs	r3, r3, #31
 8019492:	f003 0301 	and.w	r3, r3, #1
 8019496:	b2db      	uxtb	r3, r3
 8019498:	2b00      	cmp	r3, #0
 801949a:	d11a      	bne.n	80194d2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801949c:	68bb      	ldr	r3, [r7, #8]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	4a0e      	ldr	r2, [pc, #56]	; (80194dc <sys_check_timeouts+0x6c>)
 80194a2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80194a4:	68bb      	ldr	r3, [r7, #8]
 80194a6:	689b      	ldr	r3, [r3, #8]
 80194a8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80194aa:	68bb      	ldr	r3, [r7, #8]
 80194ac:	68db      	ldr	r3, [r3, #12]
 80194ae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80194b0:	68bb      	ldr	r3, [r7, #8]
 80194b2:	685b      	ldr	r3, [r3, #4]
 80194b4:	4a0a      	ldr	r2, [pc, #40]	; (80194e0 <sys_check_timeouts+0x70>)
 80194b6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80194b8:	68b9      	ldr	r1, [r7, #8]
 80194ba:	200a      	movs	r0, #10
 80194bc:	f7f8 fc9e 	bl	8011dfc <memp_free>
    if (handler != NULL) {
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d0da      	beq.n	801947c <sys_check_timeouts+0xc>
      handler(arg);
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	6838      	ldr	r0, [r7, #0]
 80194ca:	4798      	blx	r3
  do {
 80194cc:	e7d6      	b.n	801947c <sys_check_timeouts+0xc>
      return;
 80194ce:	bf00      	nop
 80194d0:	e000      	b.n	80194d4 <sys_check_timeouts+0x64>
      return;
 80194d2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80194d4:	3710      	adds	r7, #16
 80194d6:	46bd      	mov	sp, r7
 80194d8:	bd80      	pop	{r7, pc}
 80194da:	bf00      	nop
 80194dc:	2001021c 	.word	0x2001021c
 80194e0:	20010220 	.word	0x20010220

080194e4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b082      	sub	sp, #8
 80194e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80194ea:	4b16      	ldr	r3, [pc, #88]	; (8019544 <sys_timeouts_sleeptime+0x60>)
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d102      	bne.n	80194f8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80194f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80194f6:	e020      	b.n	801953a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80194f8:	f7ec fb66 	bl	8005bc8 <sys_now>
 80194fc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80194fe:	4b11      	ldr	r3, [pc, #68]	; (8019544 <sys_timeouts_sleeptime+0x60>)
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	685a      	ldr	r2, [r3, #4]
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	1ad3      	subs	r3, r2, r3
 8019508:	0fdb      	lsrs	r3, r3, #31
 801950a:	f003 0301 	and.w	r3, r3, #1
 801950e:	b2db      	uxtb	r3, r3
 8019510:	2b00      	cmp	r3, #0
 8019512:	d001      	beq.n	8019518 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019514:	2300      	movs	r3, #0
 8019516:	e010      	b.n	801953a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019518:	4b0a      	ldr	r3, [pc, #40]	; (8019544 <sys_timeouts_sleeptime+0x60>)
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	685a      	ldr	r2, [r3, #4]
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	1ad3      	subs	r3, r2, r3
 8019522:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019524:	683b      	ldr	r3, [r7, #0]
 8019526:	2b00      	cmp	r3, #0
 8019528:	da06      	bge.n	8019538 <sys_timeouts_sleeptime+0x54>
 801952a:	4b07      	ldr	r3, [pc, #28]	; (8019548 <sys_timeouts_sleeptime+0x64>)
 801952c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019530:	4906      	ldr	r1, [pc, #24]	; (801954c <sys_timeouts_sleeptime+0x68>)
 8019532:	4807      	ldr	r0, [pc, #28]	; (8019550 <sys_timeouts_sleeptime+0x6c>)
 8019534:	f006 f9ba 	bl	801f8ac <iprintf>
    return ret;
 8019538:	683b      	ldr	r3, [r7, #0]
  }
}
 801953a:	4618      	mov	r0, r3
 801953c:	3708      	adds	r7, #8
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}
 8019542:	bf00      	nop
 8019544:	2001021c 	.word	0x2001021c
 8019548:	08024104 	.word	0x08024104
 801954c:	080241d8 	.word	0x080241d8
 8019550:	08024178 	.word	0x08024178

08019554 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019558:	f006 f80a 	bl	801f570 <rand>
 801955c:	4603      	mov	r3, r0
 801955e:	b29b      	uxth	r3, r3
 8019560:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019564:	b29b      	uxth	r3, r3
 8019566:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801956a:	b29a      	uxth	r2, r3
 801956c:	4b01      	ldr	r3, [pc, #4]	; (8019574 <udp_init+0x20>)
 801956e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019570:	bf00      	nop
 8019572:	bd80      	pop	{r7, pc}
 8019574:	2000002c 	.word	0x2000002c

08019578 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019578:	b480      	push	{r7}
 801957a:	b083      	sub	sp, #12
 801957c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801957e:	2300      	movs	r3, #0
 8019580:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019582:	4b17      	ldr	r3, [pc, #92]	; (80195e0 <udp_new_port+0x68>)
 8019584:	881b      	ldrh	r3, [r3, #0]
 8019586:	1c5a      	adds	r2, r3, #1
 8019588:	b291      	uxth	r1, r2
 801958a:	4a15      	ldr	r2, [pc, #84]	; (80195e0 <udp_new_port+0x68>)
 801958c:	8011      	strh	r1, [r2, #0]
 801958e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019592:	4293      	cmp	r3, r2
 8019594:	d103      	bne.n	801959e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019596:	4b12      	ldr	r3, [pc, #72]	; (80195e0 <udp_new_port+0x68>)
 8019598:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801959c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801959e:	4b11      	ldr	r3, [pc, #68]	; (80195e4 <udp_new_port+0x6c>)
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	603b      	str	r3, [r7, #0]
 80195a4:	e011      	b.n	80195ca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	8a5a      	ldrh	r2, [r3, #18]
 80195aa:	4b0d      	ldr	r3, [pc, #52]	; (80195e0 <udp_new_port+0x68>)
 80195ac:	881b      	ldrh	r3, [r3, #0]
 80195ae:	429a      	cmp	r2, r3
 80195b0:	d108      	bne.n	80195c4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80195b2:	88fb      	ldrh	r3, [r7, #6]
 80195b4:	3301      	adds	r3, #1
 80195b6:	80fb      	strh	r3, [r7, #6]
 80195b8:	88fb      	ldrh	r3, [r7, #6]
 80195ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80195be:	d3e0      	bcc.n	8019582 <udp_new_port+0xa>
        return 0;
 80195c0:	2300      	movs	r3, #0
 80195c2:	e007      	b.n	80195d4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80195c4:	683b      	ldr	r3, [r7, #0]
 80195c6:	68db      	ldr	r3, [r3, #12]
 80195c8:	603b      	str	r3, [r7, #0]
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d1ea      	bne.n	80195a6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80195d0:	4b03      	ldr	r3, [pc, #12]	; (80195e0 <udp_new_port+0x68>)
 80195d2:	881b      	ldrh	r3, [r3, #0]
}
 80195d4:	4618      	mov	r0, r3
 80195d6:	370c      	adds	r7, #12
 80195d8:	46bd      	mov	sp, r7
 80195da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195de:	4770      	bx	lr
 80195e0:	2000002c 	.word	0x2000002c
 80195e4:	20010228 	.word	0x20010228

080195e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80195e8:	b580      	push	{r7, lr}
 80195ea:	b084      	sub	sp, #16
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	60f8      	str	r0, [r7, #12]
 80195f0:	60b9      	str	r1, [r7, #8]
 80195f2:	4613      	mov	r3, r2
 80195f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d105      	bne.n	8019608 <udp_input_local_match+0x20>
 80195fc:	4b27      	ldr	r3, [pc, #156]	; (801969c <udp_input_local_match+0xb4>)
 80195fe:	2287      	movs	r2, #135	; 0x87
 8019600:	4927      	ldr	r1, [pc, #156]	; (80196a0 <udp_input_local_match+0xb8>)
 8019602:	4828      	ldr	r0, [pc, #160]	; (80196a4 <udp_input_local_match+0xbc>)
 8019604:	f006 f952 	bl	801f8ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d105      	bne.n	801961a <udp_input_local_match+0x32>
 801960e:	4b23      	ldr	r3, [pc, #140]	; (801969c <udp_input_local_match+0xb4>)
 8019610:	2288      	movs	r2, #136	; 0x88
 8019612:	4925      	ldr	r1, [pc, #148]	; (80196a8 <udp_input_local_match+0xc0>)
 8019614:	4823      	ldr	r0, [pc, #140]	; (80196a4 <udp_input_local_match+0xbc>)
 8019616:	f006 f949 	bl	801f8ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	7a1b      	ldrb	r3, [r3, #8]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d00b      	beq.n	801963a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	7a1a      	ldrb	r2, [r3, #8]
 8019626:	4b21      	ldr	r3, [pc, #132]	; (80196ac <udp_input_local_match+0xc4>)
 8019628:	685b      	ldr	r3, [r3, #4]
 801962a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801962e:	3301      	adds	r3, #1
 8019630:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019632:	429a      	cmp	r2, r3
 8019634:	d001      	beq.n	801963a <udp_input_local_match+0x52>
    return 0;
 8019636:	2300      	movs	r3, #0
 8019638:	e02b      	b.n	8019692 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801963a:	79fb      	ldrb	r3, [r7, #7]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d018      	beq.n	8019672 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d013      	beq.n	801966e <udp_input_local_match+0x86>
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d00f      	beq.n	801966e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801964e:	4b17      	ldr	r3, [pc, #92]	; (80196ac <udp_input_local_match+0xc4>)
 8019650:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019656:	d00a      	beq.n	801966e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	681a      	ldr	r2, [r3, #0]
 801965c:	4b13      	ldr	r3, [pc, #76]	; (80196ac <udp_input_local_match+0xc4>)
 801965e:	695b      	ldr	r3, [r3, #20]
 8019660:	405a      	eors	r2, r3
 8019662:	68bb      	ldr	r3, [r7, #8]
 8019664:	3308      	adds	r3, #8
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801966a:	2b00      	cmp	r3, #0
 801966c:	d110      	bne.n	8019690 <udp_input_local_match+0xa8>
          return 1;
 801966e:	2301      	movs	r3, #1
 8019670:	e00f      	b.n	8019692 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d009      	beq.n	801968c <udp_input_local_match+0xa4>
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	2b00      	cmp	r3, #0
 801967e:	d005      	beq.n	801968c <udp_input_local_match+0xa4>
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	681a      	ldr	r2, [r3, #0]
 8019684:	4b09      	ldr	r3, [pc, #36]	; (80196ac <udp_input_local_match+0xc4>)
 8019686:	695b      	ldr	r3, [r3, #20]
 8019688:	429a      	cmp	r2, r3
 801968a:	d101      	bne.n	8019690 <udp_input_local_match+0xa8>
        return 1;
 801968c:	2301      	movs	r3, #1
 801968e:	e000      	b.n	8019692 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019690:	2300      	movs	r3, #0
}
 8019692:	4618      	mov	r0, r3
 8019694:	3710      	adds	r7, #16
 8019696:	46bd      	mov	sp, r7
 8019698:	bd80      	pop	{r7, pc}
 801969a:	bf00      	nop
 801969c:	080241ec 	.word	0x080241ec
 80196a0:	0802421c 	.word	0x0802421c
 80196a4:	08024240 	.word	0x08024240
 80196a8:	08024268 	.word	0x08024268
 80196ac:	2000ca58 	.word	0x2000ca58

080196b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80196b0:	b590      	push	{r4, r7, lr}
 80196b2:	b08d      	sub	sp, #52	; 0x34
 80196b4:	af02      	add	r7, sp, #8
 80196b6:	6078      	str	r0, [r7, #4]
 80196b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80196ba:	2300      	movs	r3, #0
 80196bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d105      	bne.n	80196d0 <udp_input+0x20>
 80196c4:	4b7c      	ldr	r3, [pc, #496]	; (80198b8 <udp_input+0x208>)
 80196c6:	22cf      	movs	r2, #207	; 0xcf
 80196c8:	497c      	ldr	r1, [pc, #496]	; (80198bc <udp_input+0x20c>)
 80196ca:	487d      	ldr	r0, [pc, #500]	; (80198c0 <udp_input+0x210>)
 80196cc:	f006 f8ee 	bl	801f8ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80196d0:	683b      	ldr	r3, [r7, #0]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d105      	bne.n	80196e2 <udp_input+0x32>
 80196d6:	4b78      	ldr	r3, [pc, #480]	; (80198b8 <udp_input+0x208>)
 80196d8:	22d0      	movs	r2, #208	; 0xd0
 80196da:	497a      	ldr	r1, [pc, #488]	; (80198c4 <udp_input+0x214>)
 80196dc:	4878      	ldr	r0, [pc, #480]	; (80198c0 <udp_input+0x210>)
 80196de:	f006 f8e5 	bl	801f8ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	895b      	ldrh	r3, [r3, #10]
 80196e6:	2b07      	cmp	r3, #7
 80196e8:	d803      	bhi.n	80196f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80196ea:	6878      	ldr	r0, [r7, #4]
 80196ec:	f7f9 fa6e 	bl	8012bcc <pbuf_free>
    goto end;
 80196f0:	e0de      	b.n	80198b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	685b      	ldr	r3, [r3, #4]
 80196f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80196f8:	4b73      	ldr	r3, [pc, #460]	; (80198c8 <udp_input+0x218>)
 80196fa:	695b      	ldr	r3, [r3, #20]
 80196fc:	4a72      	ldr	r2, [pc, #456]	; (80198c8 <udp_input+0x218>)
 80196fe:	6812      	ldr	r2, [r2, #0]
 8019700:	4611      	mov	r1, r2
 8019702:	4618      	mov	r0, r3
 8019704:	f003 fe2c 	bl	801d360 <ip4_addr_isbroadcast_u32>
 8019708:	4603      	mov	r3, r0
 801970a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	881b      	ldrh	r3, [r3, #0]
 8019710:	b29b      	uxth	r3, r3
 8019712:	4618      	mov	r0, r3
 8019714:	f7f7 fe24 	bl	8011360 <lwip_htons>
 8019718:	4603      	mov	r3, r0
 801971a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801971c:	697b      	ldr	r3, [r7, #20]
 801971e:	885b      	ldrh	r3, [r3, #2]
 8019720:	b29b      	uxth	r3, r3
 8019722:	4618      	mov	r0, r3
 8019724:	f7f7 fe1c 	bl	8011360 <lwip_htons>
 8019728:	4603      	mov	r3, r0
 801972a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801972c:	2300      	movs	r3, #0
 801972e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019730:	2300      	movs	r3, #0
 8019732:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019734:	2300      	movs	r3, #0
 8019736:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019738:	4b64      	ldr	r3, [pc, #400]	; (80198cc <udp_input+0x21c>)
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	627b      	str	r3, [r7, #36]	; 0x24
 801973e:	e054      	b.n	80197ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019742:	8a5b      	ldrh	r3, [r3, #18]
 8019744:	89fa      	ldrh	r2, [r7, #14]
 8019746:	429a      	cmp	r2, r3
 8019748:	d14a      	bne.n	80197e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801974a:	7cfb      	ldrb	r3, [r7, #19]
 801974c:	461a      	mov	r2, r3
 801974e:	6839      	ldr	r1, [r7, #0]
 8019750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019752:	f7ff ff49 	bl	80195e8 <udp_input_local_match>
 8019756:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019758:	2b00      	cmp	r3, #0
 801975a:	d041      	beq.n	80197e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801975e:	7c1b      	ldrb	r3, [r3, #16]
 8019760:	f003 0304 	and.w	r3, r3, #4
 8019764:	2b00      	cmp	r3, #0
 8019766:	d11d      	bne.n	80197a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019768:	69fb      	ldr	r3, [r7, #28]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d102      	bne.n	8019774 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019770:	61fb      	str	r3, [r7, #28]
 8019772:	e017      	b.n	80197a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019774:	7cfb      	ldrb	r3, [r7, #19]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d014      	beq.n	80197a4 <udp_input+0xf4>
 801977a:	4b53      	ldr	r3, [pc, #332]	; (80198c8 <udp_input+0x218>)
 801977c:	695b      	ldr	r3, [r3, #20]
 801977e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019782:	d10f      	bne.n	80197a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019784:	69fb      	ldr	r3, [r7, #28]
 8019786:	681a      	ldr	r2, [r3, #0]
 8019788:	683b      	ldr	r3, [r7, #0]
 801978a:	3304      	adds	r3, #4
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	429a      	cmp	r2, r3
 8019790:	d008      	beq.n	80197a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019794:	681a      	ldr	r2, [r3, #0]
 8019796:	683b      	ldr	r3, [r7, #0]
 8019798:	3304      	adds	r3, #4
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	429a      	cmp	r2, r3
 801979e:	d101      	bne.n	80197a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80197a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80197a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197a6:	8a9b      	ldrh	r3, [r3, #20]
 80197a8:	8a3a      	ldrh	r2, [r7, #16]
 80197aa:	429a      	cmp	r2, r3
 80197ac:	d118      	bne.n	80197e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80197ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d005      	beq.n	80197c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80197b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197b8:	685a      	ldr	r2, [r3, #4]
 80197ba:	4b43      	ldr	r3, [pc, #268]	; (80198c8 <udp_input+0x218>)
 80197bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80197be:	429a      	cmp	r2, r3
 80197c0:	d10e      	bne.n	80197e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80197c2:	6a3b      	ldr	r3, [r7, #32]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d014      	beq.n	80197f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80197c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ca:	68da      	ldr	r2, [r3, #12]
 80197cc:	6a3b      	ldr	r3, [r7, #32]
 80197ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80197d0:	4b3e      	ldr	r3, [pc, #248]	; (80198cc <udp_input+0x21c>)
 80197d2:	681a      	ldr	r2, [r3, #0]
 80197d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80197d8:	4a3c      	ldr	r2, [pc, #240]	; (80198cc <udp_input+0x21c>)
 80197da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80197de:	e008      	b.n	80197f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80197e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80197e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197e6:	68db      	ldr	r3, [r3, #12]
 80197e8:	627b      	str	r3, [r7, #36]	; 0x24
 80197ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d1a7      	bne.n	8019740 <udp_input+0x90>
 80197f0:	e000      	b.n	80197f4 <udp_input+0x144>
        break;
 80197f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80197f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d101      	bne.n	80197fe <udp_input+0x14e>
    pcb = uncon_pcb;
 80197fa:	69fb      	ldr	r3, [r7, #28]
 80197fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80197fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019800:	2b00      	cmp	r3, #0
 8019802:	d002      	beq.n	801980a <udp_input+0x15a>
    for_us = 1;
 8019804:	2301      	movs	r3, #1
 8019806:	76fb      	strb	r3, [r7, #27]
 8019808:	e00a      	b.n	8019820 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	3304      	adds	r3, #4
 801980e:	681a      	ldr	r2, [r3, #0]
 8019810:	4b2d      	ldr	r3, [pc, #180]	; (80198c8 <udp_input+0x218>)
 8019812:	695b      	ldr	r3, [r3, #20]
 8019814:	429a      	cmp	r2, r3
 8019816:	bf0c      	ite	eq
 8019818:	2301      	moveq	r3, #1
 801981a:	2300      	movne	r3, #0
 801981c:	b2db      	uxtb	r3, r3
 801981e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019820:	7efb      	ldrb	r3, [r7, #27]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d041      	beq.n	80198aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019826:	2108      	movs	r1, #8
 8019828:	6878      	ldr	r0, [r7, #4]
 801982a:	f7f9 f949 	bl	8012ac0 <pbuf_remove_header>
 801982e:	4603      	mov	r3, r0
 8019830:	2b00      	cmp	r3, #0
 8019832:	d00a      	beq.n	801984a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019834:	4b20      	ldr	r3, [pc, #128]	; (80198b8 <udp_input+0x208>)
 8019836:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801983a:	4925      	ldr	r1, [pc, #148]	; (80198d0 <udp_input+0x220>)
 801983c:	4820      	ldr	r0, [pc, #128]	; (80198c0 <udp_input+0x210>)
 801983e:	f006 f835 	bl	801f8ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019842:	6878      	ldr	r0, [r7, #4]
 8019844:	f7f9 f9c2 	bl	8012bcc <pbuf_free>
      goto end;
 8019848:	e032      	b.n	80198b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801984c:	2b00      	cmp	r3, #0
 801984e:	d012      	beq.n	8019876 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019852:	699b      	ldr	r3, [r3, #24]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d00a      	beq.n	801986e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801985a:	699c      	ldr	r4, [r3, #24]
 801985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801985e:	69d8      	ldr	r0, [r3, #28]
 8019860:	8a3b      	ldrh	r3, [r7, #16]
 8019862:	9300      	str	r3, [sp, #0]
 8019864:	4b1b      	ldr	r3, [pc, #108]	; (80198d4 <udp_input+0x224>)
 8019866:	687a      	ldr	r2, [r7, #4]
 8019868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801986a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801986c:	e021      	b.n	80198b2 <udp_input+0x202>
        pbuf_free(p);
 801986e:	6878      	ldr	r0, [r7, #4]
 8019870:	f7f9 f9ac 	bl	8012bcc <pbuf_free>
        goto end;
 8019874:	e01c      	b.n	80198b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019876:	7cfb      	ldrb	r3, [r7, #19]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d112      	bne.n	80198a2 <udp_input+0x1f2>
 801987c:	4b12      	ldr	r3, [pc, #72]	; (80198c8 <udp_input+0x218>)
 801987e:	695b      	ldr	r3, [r3, #20]
 8019880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019884:	2be0      	cmp	r3, #224	; 0xe0
 8019886:	d00c      	beq.n	80198a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019888:	4b0f      	ldr	r3, [pc, #60]	; (80198c8 <udp_input+0x218>)
 801988a:	899b      	ldrh	r3, [r3, #12]
 801988c:	3308      	adds	r3, #8
 801988e:	b29b      	uxth	r3, r3
 8019890:	b21b      	sxth	r3, r3
 8019892:	4619      	mov	r1, r3
 8019894:	6878      	ldr	r0, [r7, #4]
 8019896:	f7f9 f986 	bl	8012ba6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801989a:	2103      	movs	r1, #3
 801989c:	6878      	ldr	r0, [r7, #4]
 801989e:	f003 fa21 	bl	801cce4 <icmp_dest_unreach>
      pbuf_free(p);
 80198a2:	6878      	ldr	r0, [r7, #4]
 80198a4:	f7f9 f992 	bl	8012bcc <pbuf_free>
  return;
 80198a8:	e003      	b.n	80198b2 <udp_input+0x202>
    pbuf_free(p);
 80198aa:	6878      	ldr	r0, [r7, #4]
 80198ac:	f7f9 f98e 	bl	8012bcc <pbuf_free>
  return;
 80198b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80198b2:	372c      	adds	r7, #44	; 0x2c
 80198b4:	46bd      	mov	sp, r7
 80198b6:	bd90      	pop	{r4, r7, pc}
 80198b8:	080241ec 	.word	0x080241ec
 80198bc:	08024290 	.word	0x08024290
 80198c0:	08024240 	.word	0x08024240
 80198c4:	080242a8 	.word	0x080242a8
 80198c8:	2000ca58 	.word	0x2000ca58
 80198cc:	20010228 	.word	0x20010228
 80198d0:	080242c4 	.word	0x080242c4
 80198d4:	2000ca68 	.word	0x2000ca68

080198d8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80198d8:	b580      	push	{r7, lr}
 80198da:	b088      	sub	sp, #32
 80198dc:	af02      	add	r7, sp, #8
 80198de:	60f8      	str	r0, [r7, #12]
 80198e0:	60b9      	str	r1, [r7, #8]
 80198e2:	607a      	str	r2, [r7, #4]
 80198e4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d109      	bne.n	8019900 <udp_sendto_if+0x28>
 80198ec:	4b2e      	ldr	r3, [pc, #184]	; (80199a8 <udp_sendto_if+0xd0>)
 80198ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80198f2:	492e      	ldr	r1, [pc, #184]	; (80199ac <udp_sendto_if+0xd4>)
 80198f4:	482e      	ldr	r0, [pc, #184]	; (80199b0 <udp_sendto_if+0xd8>)
 80198f6:	f005 ffd9 	bl	801f8ac <iprintf>
 80198fa:	f06f 030f 	mvn.w	r3, #15
 80198fe:	e04f      	b.n	80199a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019900:	68bb      	ldr	r3, [r7, #8]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d109      	bne.n	801991a <udp_sendto_if+0x42>
 8019906:	4b28      	ldr	r3, [pc, #160]	; (80199a8 <udp_sendto_if+0xd0>)
 8019908:	f240 2281 	movw	r2, #641	; 0x281
 801990c:	4929      	ldr	r1, [pc, #164]	; (80199b4 <udp_sendto_if+0xdc>)
 801990e:	4828      	ldr	r0, [pc, #160]	; (80199b0 <udp_sendto_if+0xd8>)
 8019910:	f005 ffcc 	bl	801f8ac <iprintf>
 8019914:	f06f 030f 	mvn.w	r3, #15
 8019918:	e042      	b.n	80199a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d109      	bne.n	8019934 <udp_sendto_if+0x5c>
 8019920:	4b21      	ldr	r3, [pc, #132]	; (80199a8 <udp_sendto_if+0xd0>)
 8019922:	f240 2282 	movw	r2, #642	; 0x282
 8019926:	4924      	ldr	r1, [pc, #144]	; (80199b8 <udp_sendto_if+0xe0>)
 8019928:	4821      	ldr	r0, [pc, #132]	; (80199b0 <udp_sendto_if+0xd8>)
 801992a:	f005 ffbf 	bl	801f8ac <iprintf>
 801992e:	f06f 030f 	mvn.w	r3, #15
 8019932:	e035      	b.n	80199a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019934:	6a3b      	ldr	r3, [r7, #32]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d109      	bne.n	801994e <udp_sendto_if+0x76>
 801993a:	4b1b      	ldr	r3, [pc, #108]	; (80199a8 <udp_sendto_if+0xd0>)
 801993c:	f240 2283 	movw	r2, #643	; 0x283
 8019940:	491e      	ldr	r1, [pc, #120]	; (80199bc <udp_sendto_if+0xe4>)
 8019942:	481b      	ldr	r0, [pc, #108]	; (80199b0 <udp_sendto_if+0xd8>)
 8019944:	f005 ffb2 	bl	801f8ac <iprintf>
 8019948:	f06f 030f 	mvn.w	r3, #15
 801994c:	e028      	b.n	80199a0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801994e:	68fb      	ldr	r3, [r7, #12]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d009      	beq.n	8019968 <udp_sendto_if+0x90>
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d005      	beq.n	8019968 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019964:	2be0      	cmp	r3, #224	; 0xe0
 8019966:	d103      	bne.n	8019970 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019968:	6a3b      	ldr	r3, [r7, #32]
 801996a:	3304      	adds	r3, #4
 801996c:	617b      	str	r3, [r7, #20]
 801996e:	e00b      	b.n	8019988 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	681a      	ldr	r2, [r3, #0]
 8019974:	6a3b      	ldr	r3, [r7, #32]
 8019976:	3304      	adds	r3, #4
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	429a      	cmp	r2, r3
 801997c:	d002      	beq.n	8019984 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801997e:	f06f 0303 	mvn.w	r3, #3
 8019982:	e00d      	b.n	80199a0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019988:	887a      	ldrh	r2, [r7, #2]
 801998a:	697b      	ldr	r3, [r7, #20]
 801998c:	9301      	str	r3, [sp, #4]
 801998e:	6a3b      	ldr	r3, [r7, #32]
 8019990:	9300      	str	r3, [sp, #0]
 8019992:	4613      	mov	r3, r2
 8019994:	687a      	ldr	r2, [r7, #4]
 8019996:	68b9      	ldr	r1, [r7, #8]
 8019998:	68f8      	ldr	r0, [r7, #12]
 801999a:	f000 f811 	bl	80199c0 <udp_sendto_if_src>
 801999e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80199a0:	4618      	mov	r0, r3
 80199a2:	3718      	adds	r7, #24
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bd80      	pop	{r7, pc}
 80199a8:	080241ec 	.word	0x080241ec
 80199ac:	08024360 	.word	0x08024360
 80199b0:	08024240 	.word	0x08024240
 80199b4:	0802437c 	.word	0x0802437c
 80199b8:	08024398 	.word	0x08024398
 80199bc:	080243b8 	.word	0x080243b8

080199c0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b08c      	sub	sp, #48	; 0x30
 80199c4:	af04      	add	r7, sp, #16
 80199c6:	60f8      	str	r0, [r7, #12]
 80199c8:	60b9      	str	r1, [r7, #8]
 80199ca:	607a      	str	r2, [r7, #4]
 80199cc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d109      	bne.n	80199e8 <udp_sendto_if_src+0x28>
 80199d4:	4b65      	ldr	r3, [pc, #404]	; (8019b6c <udp_sendto_if_src+0x1ac>)
 80199d6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80199da:	4965      	ldr	r1, [pc, #404]	; (8019b70 <udp_sendto_if_src+0x1b0>)
 80199dc:	4865      	ldr	r0, [pc, #404]	; (8019b74 <udp_sendto_if_src+0x1b4>)
 80199de:	f005 ff65 	bl	801f8ac <iprintf>
 80199e2:	f06f 030f 	mvn.w	r3, #15
 80199e6:	e0bc      	b.n	8019b62 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80199e8:	68bb      	ldr	r3, [r7, #8]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d109      	bne.n	8019a02 <udp_sendto_if_src+0x42>
 80199ee:	4b5f      	ldr	r3, [pc, #380]	; (8019b6c <udp_sendto_if_src+0x1ac>)
 80199f0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80199f4:	4960      	ldr	r1, [pc, #384]	; (8019b78 <udp_sendto_if_src+0x1b8>)
 80199f6:	485f      	ldr	r0, [pc, #380]	; (8019b74 <udp_sendto_if_src+0x1b4>)
 80199f8:	f005 ff58 	bl	801f8ac <iprintf>
 80199fc:	f06f 030f 	mvn.w	r3, #15
 8019a00:	e0af      	b.n	8019b62 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d109      	bne.n	8019a1c <udp_sendto_if_src+0x5c>
 8019a08:	4b58      	ldr	r3, [pc, #352]	; (8019b6c <udp_sendto_if_src+0x1ac>)
 8019a0a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8019a0e:	495b      	ldr	r1, [pc, #364]	; (8019b7c <udp_sendto_if_src+0x1bc>)
 8019a10:	4858      	ldr	r0, [pc, #352]	; (8019b74 <udp_sendto_if_src+0x1b4>)
 8019a12:	f005 ff4b 	bl	801f8ac <iprintf>
 8019a16:	f06f 030f 	mvn.w	r3, #15
 8019a1a:	e0a2      	b.n	8019b62 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d109      	bne.n	8019a36 <udp_sendto_if_src+0x76>
 8019a22:	4b52      	ldr	r3, [pc, #328]	; (8019b6c <udp_sendto_if_src+0x1ac>)
 8019a24:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019a28:	4955      	ldr	r1, [pc, #340]	; (8019b80 <udp_sendto_if_src+0x1c0>)
 8019a2a:	4852      	ldr	r0, [pc, #328]	; (8019b74 <udp_sendto_if_src+0x1b4>)
 8019a2c:	f005 ff3e 	bl	801f8ac <iprintf>
 8019a30:	f06f 030f 	mvn.w	r3, #15
 8019a34:	e095      	b.n	8019b62 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d109      	bne.n	8019a50 <udp_sendto_if_src+0x90>
 8019a3c:	4b4b      	ldr	r3, [pc, #300]	; (8019b6c <udp_sendto_if_src+0x1ac>)
 8019a3e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8019a42:	4950      	ldr	r1, [pc, #320]	; (8019b84 <udp_sendto_if_src+0x1c4>)
 8019a44:	484b      	ldr	r0, [pc, #300]	; (8019b74 <udp_sendto_if_src+0x1b4>)
 8019a46:	f005 ff31 	bl	801f8ac <iprintf>
 8019a4a:	f06f 030f 	mvn.w	r3, #15
 8019a4e:	e088      	b.n	8019b62 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019a50:	68fb      	ldr	r3, [r7, #12]
 8019a52:	8a5b      	ldrh	r3, [r3, #18]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d10f      	bne.n	8019a78 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019a58:	68f9      	ldr	r1, [r7, #12]
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	8a5b      	ldrh	r3, [r3, #18]
 8019a5e:	461a      	mov	r2, r3
 8019a60:	68f8      	ldr	r0, [r7, #12]
 8019a62:	f000 f893 	bl	8019b8c <udp_bind>
 8019a66:	4603      	mov	r3, r0
 8019a68:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019a6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d002      	beq.n	8019a78 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019a72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019a76:	e074      	b.n	8019b62 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	891b      	ldrh	r3, [r3, #8]
 8019a7c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019a80:	4293      	cmp	r3, r2
 8019a82:	d902      	bls.n	8019a8a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a88:	e06b      	b.n	8019b62 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019a8a:	2108      	movs	r1, #8
 8019a8c:	68b8      	ldr	r0, [r7, #8]
 8019a8e:	f7f9 f807 	bl	8012aa0 <pbuf_add_header>
 8019a92:	4603      	mov	r3, r0
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d015      	beq.n	8019ac4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019a98:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a9c:	2108      	movs	r1, #8
 8019a9e:	2022      	movs	r0, #34	; 0x22
 8019aa0:	f7f8 fdb0 	bl	8012604 <pbuf_alloc>
 8019aa4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019aa6:	69fb      	ldr	r3, [r7, #28]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d102      	bne.n	8019ab2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ab0:	e057      	b.n	8019b62 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019ab2:	68bb      	ldr	r3, [r7, #8]
 8019ab4:	891b      	ldrh	r3, [r3, #8]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d006      	beq.n	8019ac8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019aba:	68b9      	ldr	r1, [r7, #8]
 8019abc:	69f8      	ldr	r0, [r7, #28]
 8019abe:	f7f9 f9a9 	bl	8012e14 <pbuf_chain>
 8019ac2:	e001      	b.n	8019ac8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019ac4:	68bb      	ldr	r3, [r7, #8]
 8019ac6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019ac8:	69fb      	ldr	r3, [r7, #28]
 8019aca:	895b      	ldrh	r3, [r3, #10]
 8019acc:	2b07      	cmp	r3, #7
 8019ace:	d806      	bhi.n	8019ade <udp_sendto_if_src+0x11e>
 8019ad0:	4b26      	ldr	r3, [pc, #152]	; (8019b6c <udp_sendto_if_src+0x1ac>)
 8019ad2:	f240 320d 	movw	r2, #781	; 0x30d
 8019ad6:	492c      	ldr	r1, [pc, #176]	; (8019b88 <udp_sendto_if_src+0x1c8>)
 8019ad8:	4826      	ldr	r0, [pc, #152]	; (8019b74 <udp_sendto_if_src+0x1b4>)
 8019ada:	f005 fee7 	bl	801f8ac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019ade:	69fb      	ldr	r3, [r7, #28]
 8019ae0:	685b      	ldr	r3, [r3, #4]
 8019ae2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019ae4:	68fb      	ldr	r3, [r7, #12]
 8019ae6:	8a5b      	ldrh	r3, [r3, #18]
 8019ae8:	4618      	mov	r0, r3
 8019aea:	f7f7 fc39 	bl	8011360 <lwip_htons>
 8019aee:	4603      	mov	r3, r0
 8019af0:	461a      	mov	r2, r3
 8019af2:	697b      	ldr	r3, [r7, #20]
 8019af4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019af6:	887b      	ldrh	r3, [r7, #2]
 8019af8:	4618      	mov	r0, r3
 8019afa:	f7f7 fc31 	bl	8011360 <lwip_htons>
 8019afe:	4603      	mov	r3, r0
 8019b00:	461a      	mov	r2, r3
 8019b02:	697b      	ldr	r3, [r7, #20]
 8019b04:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019b06:	697b      	ldr	r3, [r7, #20]
 8019b08:	2200      	movs	r2, #0
 8019b0a:	719a      	strb	r2, [r3, #6]
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019b10:	69fb      	ldr	r3, [r7, #28]
 8019b12:	891b      	ldrh	r3, [r3, #8]
 8019b14:	4618      	mov	r0, r3
 8019b16:	f7f7 fc23 	bl	8011360 <lwip_htons>
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	461a      	mov	r2, r3
 8019b1e:	697b      	ldr	r3, [r7, #20]
 8019b20:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019b22:	2311      	movs	r3, #17
 8019b24:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	7adb      	ldrb	r3, [r3, #11]
 8019b2a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	7a9b      	ldrb	r3, [r3, #10]
 8019b30:	7cb9      	ldrb	r1, [r7, #18]
 8019b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b34:	9202      	str	r2, [sp, #8]
 8019b36:	7cfa      	ldrb	r2, [r7, #19]
 8019b38:	9201      	str	r2, [sp, #4]
 8019b3a:	9300      	str	r3, [sp, #0]
 8019b3c:	460b      	mov	r3, r1
 8019b3e:	687a      	ldr	r2, [r7, #4]
 8019b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019b42:	69f8      	ldr	r0, [r7, #28]
 8019b44:	f003 fb5e 	bl	801d204 <ip4_output_if_src>
 8019b48:	4603      	mov	r3, r0
 8019b4a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019b4c:	69fa      	ldr	r2, [r7, #28]
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	429a      	cmp	r2, r3
 8019b52:	d004      	beq.n	8019b5e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019b54:	69f8      	ldr	r0, [r7, #28]
 8019b56:	f7f9 f839 	bl	8012bcc <pbuf_free>
    q = NULL;
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019b5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019b62:	4618      	mov	r0, r3
 8019b64:	3720      	adds	r7, #32
 8019b66:	46bd      	mov	sp, r7
 8019b68:	bd80      	pop	{r7, pc}
 8019b6a:	bf00      	nop
 8019b6c:	080241ec 	.word	0x080241ec
 8019b70:	080243d8 	.word	0x080243d8
 8019b74:	08024240 	.word	0x08024240
 8019b78:	080243f8 	.word	0x080243f8
 8019b7c:	08024418 	.word	0x08024418
 8019b80:	0802443c 	.word	0x0802443c
 8019b84:	08024460 	.word	0x08024460
 8019b88:	08024484 	.word	0x08024484

08019b8c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b086      	sub	sp, #24
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	60f8      	str	r0, [r7, #12]
 8019b94:	60b9      	str	r1, [r7, #8]
 8019b96:	4613      	mov	r3, r2
 8019b98:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019b9a:	68bb      	ldr	r3, [r7, #8]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d101      	bne.n	8019ba4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019ba0:	4b39      	ldr	r3, [pc, #228]	; (8019c88 <udp_bind+0xfc>)
 8019ba2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d109      	bne.n	8019bbe <udp_bind+0x32>
 8019baa:	4b38      	ldr	r3, [pc, #224]	; (8019c8c <udp_bind+0x100>)
 8019bac:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019bb0:	4937      	ldr	r1, [pc, #220]	; (8019c90 <udp_bind+0x104>)
 8019bb2:	4838      	ldr	r0, [pc, #224]	; (8019c94 <udp_bind+0x108>)
 8019bb4:	f005 fe7a 	bl	801f8ac <iprintf>
 8019bb8:	f06f 030f 	mvn.w	r3, #15
 8019bbc:	e060      	b.n	8019c80 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019bc2:	4b35      	ldr	r3, [pc, #212]	; (8019c98 <udp_bind+0x10c>)
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	617b      	str	r3, [r7, #20]
 8019bc8:	e009      	b.n	8019bde <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019bca:	68fa      	ldr	r2, [r7, #12]
 8019bcc:	697b      	ldr	r3, [r7, #20]
 8019bce:	429a      	cmp	r2, r3
 8019bd0:	d102      	bne.n	8019bd8 <udp_bind+0x4c>
      rebind = 1;
 8019bd2:	2301      	movs	r3, #1
 8019bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8019bd6:	e005      	b.n	8019be4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019bd8:	697b      	ldr	r3, [r7, #20]
 8019bda:	68db      	ldr	r3, [r3, #12]
 8019bdc:	617b      	str	r3, [r7, #20]
 8019bde:	697b      	ldr	r3, [r7, #20]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d1f2      	bne.n	8019bca <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019be4:	88fb      	ldrh	r3, [r7, #6]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d109      	bne.n	8019bfe <udp_bind+0x72>
    port = udp_new_port();
 8019bea:	f7ff fcc5 	bl	8019578 <udp_new_port>
 8019bee:	4603      	mov	r3, r0
 8019bf0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019bf2:	88fb      	ldrh	r3, [r7, #6]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d12c      	bne.n	8019c52 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019bf8:	f06f 0307 	mvn.w	r3, #7
 8019bfc:	e040      	b.n	8019c80 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019bfe:	4b26      	ldr	r3, [pc, #152]	; (8019c98 <udp_bind+0x10c>)
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	617b      	str	r3, [r7, #20]
 8019c04:	e022      	b.n	8019c4c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019c06:	68fa      	ldr	r2, [r7, #12]
 8019c08:	697b      	ldr	r3, [r7, #20]
 8019c0a:	429a      	cmp	r2, r3
 8019c0c:	d01b      	beq.n	8019c46 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019c0e:	697b      	ldr	r3, [r7, #20]
 8019c10:	8a5b      	ldrh	r3, [r3, #18]
 8019c12:	88fa      	ldrh	r2, [r7, #6]
 8019c14:	429a      	cmp	r2, r3
 8019c16:	d116      	bne.n	8019c46 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019c18:	697b      	ldr	r3, [r7, #20]
 8019c1a:	681a      	ldr	r2, [r3, #0]
 8019c1c:	68bb      	ldr	r3, [r7, #8]
 8019c1e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019c20:	429a      	cmp	r2, r3
 8019c22:	d00d      	beq.n	8019c40 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d00a      	beq.n	8019c40 <udp_bind+0xb4>
 8019c2a:	68bb      	ldr	r3, [r7, #8]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d006      	beq.n	8019c40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019c32:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d003      	beq.n	8019c40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d102      	bne.n	8019c46 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019c40:	f06f 0307 	mvn.w	r3, #7
 8019c44:	e01c      	b.n	8019c80 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	68db      	ldr	r3, [r3, #12]
 8019c4a:	617b      	str	r3, [r7, #20]
 8019c4c:	697b      	ldr	r3, [r7, #20]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d1d9      	bne.n	8019c06 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019c52:	68bb      	ldr	r3, [r7, #8]
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d002      	beq.n	8019c5e <udp_bind+0xd2>
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	e000      	b.n	8019c60 <udp_bind+0xd4>
 8019c5e:	2300      	movs	r3, #0
 8019c60:	68fa      	ldr	r2, [r7, #12]
 8019c62:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	88fa      	ldrh	r2, [r7, #6]
 8019c68:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019c6a:	7cfb      	ldrb	r3, [r7, #19]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d106      	bne.n	8019c7e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019c70:	4b09      	ldr	r3, [pc, #36]	; (8019c98 <udp_bind+0x10c>)
 8019c72:	681a      	ldr	r2, [r3, #0]
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019c78:	4a07      	ldr	r2, [pc, #28]	; (8019c98 <udp_bind+0x10c>)
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019c7e:	2300      	movs	r3, #0
}
 8019c80:	4618      	mov	r0, r3
 8019c82:	3718      	adds	r7, #24
 8019c84:	46bd      	mov	sp, r7
 8019c86:	bd80      	pop	{r7, pc}
 8019c88:	080251e8 	.word	0x080251e8
 8019c8c:	080241ec 	.word	0x080241ec
 8019c90:	080244b4 	.word	0x080244b4
 8019c94:	08024240 	.word	0x08024240
 8019c98:	20010228 	.word	0x20010228

08019c9c <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8019c9c:	b480      	push	{r7}
 8019c9e:	b083      	sub	sp, #12
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]
 8019ca4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8019ca6:	683b      	ldr	r3, [r7, #0]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d007      	beq.n	8019cbc <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8019cac:	683b      	ldr	r3, [r7, #0]
 8019cae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019cb2:	3301      	adds	r3, #1
 8019cb4:	b2da      	uxtb	r2, r3
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8019cba:	e002      	b.n	8019cc2 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	721a      	strb	r2, [r3, #8]
}
 8019cc2:	bf00      	nop
 8019cc4:	370c      	adds	r7, #12
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ccc:	4770      	bx	lr
	...

08019cd0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b086      	sub	sp, #24
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	60f8      	str	r0, [r7, #12]
 8019cd8:	60b9      	str	r1, [r7, #8]
 8019cda:	4613      	mov	r3, r2
 8019cdc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d109      	bne.n	8019cf8 <udp_connect+0x28>
 8019ce4:	4b2c      	ldr	r3, [pc, #176]	; (8019d98 <udp_connect+0xc8>)
 8019ce6:	f240 4235 	movw	r2, #1077	; 0x435
 8019cea:	492c      	ldr	r1, [pc, #176]	; (8019d9c <udp_connect+0xcc>)
 8019cec:	482c      	ldr	r0, [pc, #176]	; (8019da0 <udp_connect+0xd0>)
 8019cee:	f005 fddd 	bl	801f8ac <iprintf>
 8019cf2:	f06f 030f 	mvn.w	r3, #15
 8019cf6:	e04b      	b.n	8019d90 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019cf8:	68bb      	ldr	r3, [r7, #8]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d109      	bne.n	8019d12 <udp_connect+0x42>
 8019cfe:	4b26      	ldr	r3, [pc, #152]	; (8019d98 <udp_connect+0xc8>)
 8019d00:	f240 4236 	movw	r2, #1078	; 0x436
 8019d04:	4927      	ldr	r1, [pc, #156]	; (8019da4 <udp_connect+0xd4>)
 8019d06:	4826      	ldr	r0, [pc, #152]	; (8019da0 <udp_connect+0xd0>)
 8019d08:	f005 fdd0 	bl	801f8ac <iprintf>
 8019d0c:	f06f 030f 	mvn.w	r3, #15
 8019d10:	e03e      	b.n	8019d90 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	8a5b      	ldrh	r3, [r3, #18]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d10f      	bne.n	8019d3a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019d1a:	68f9      	ldr	r1, [r7, #12]
 8019d1c:	68fb      	ldr	r3, [r7, #12]
 8019d1e:	8a5b      	ldrh	r3, [r3, #18]
 8019d20:	461a      	mov	r2, r3
 8019d22:	68f8      	ldr	r0, [r7, #12]
 8019d24:	f7ff ff32 	bl	8019b8c <udp_bind>
 8019d28:	4603      	mov	r3, r0
 8019d2a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8019d2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d002      	beq.n	8019d3a <udp_connect+0x6a>
      return err;
 8019d34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019d38:	e02a      	b.n	8019d90 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019d3a:	68bb      	ldr	r3, [r7, #8]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d002      	beq.n	8019d46 <udp_connect+0x76>
 8019d40:	68bb      	ldr	r3, [r7, #8]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	e000      	b.n	8019d48 <udp_connect+0x78>
 8019d46:	2300      	movs	r3, #0
 8019d48:	68fa      	ldr	r2, [r7, #12]
 8019d4a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	88fa      	ldrh	r2, [r7, #6]
 8019d50:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	7c1b      	ldrb	r3, [r3, #16]
 8019d56:	f043 0304 	orr.w	r3, r3, #4
 8019d5a:	b2da      	uxtb	r2, r3
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019d60:	4b11      	ldr	r3, [pc, #68]	; (8019da8 <udp_connect+0xd8>)
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	617b      	str	r3, [r7, #20]
 8019d66:	e008      	b.n	8019d7a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8019d68:	68fa      	ldr	r2, [r7, #12]
 8019d6a:	697b      	ldr	r3, [r7, #20]
 8019d6c:	429a      	cmp	r2, r3
 8019d6e:	d101      	bne.n	8019d74 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8019d70:	2300      	movs	r3, #0
 8019d72:	e00d      	b.n	8019d90 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019d74:	697b      	ldr	r3, [r7, #20]
 8019d76:	68db      	ldr	r3, [r3, #12]
 8019d78:	617b      	str	r3, [r7, #20]
 8019d7a:	697b      	ldr	r3, [r7, #20]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d1f3      	bne.n	8019d68 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8019d80:	4b09      	ldr	r3, [pc, #36]	; (8019da8 <udp_connect+0xd8>)
 8019d82:	681a      	ldr	r2, [r3, #0]
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8019d88:	4a07      	ldr	r2, [pc, #28]	; (8019da8 <udp_connect+0xd8>)
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8019d8e:	2300      	movs	r3, #0
}
 8019d90:	4618      	mov	r0, r3
 8019d92:	3718      	adds	r7, #24
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}
 8019d98:	080241ec 	.word	0x080241ec
 8019d9c:	080244cc 	.word	0x080244cc
 8019da0:	08024240 	.word	0x08024240
 8019da4:	080244e8 	.word	0x080244e8
 8019da8:	20010228 	.word	0x20010228

08019dac <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b084      	sub	sp, #16
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	60f8      	str	r0, [r7, #12]
 8019db4:	60b9      	str	r1, [r7, #8]
 8019db6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d107      	bne.n	8019dce <udp_recv+0x22>
 8019dbe:	4b08      	ldr	r3, [pc, #32]	; (8019de0 <udp_recv+0x34>)
 8019dc0:	f240 428a 	movw	r2, #1162	; 0x48a
 8019dc4:	4907      	ldr	r1, [pc, #28]	; (8019de4 <udp_recv+0x38>)
 8019dc6:	4808      	ldr	r0, [pc, #32]	; (8019de8 <udp_recv+0x3c>)
 8019dc8:	f005 fd70 	bl	801f8ac <iprintf>
 8019dcc:	e005      	b.n	8019dda <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	68ba      	ldr	r2, [r7, #8]
 8019dd2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	687a      	ldr	r2, [r7, #4]
 8019dd8:	61da      	str	r2, [r3, #28]
}
 8019dda:	3710      	adds	r7, #16
 8019ddc:	46bd      	mov	sp, r7
 8019dde:	bd80      	pop	{r7, pc}
 8019de0:	080241ec 	.word	0x080241ec
 8019de4:	08024520 	.word	0x08024520
 8019de8:	08024240 	.word	0x08024240

08019dec <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b084      	sub	sp, #16
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d107      	bne.n	8019e0a <udp_remove+0x1e>
 8019dfa:	4b19      	ldr	r3, [pc, #100]	; (8019e60 <udp_remove+0x74>)
 8019dfc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019e00:	4918      	ldr	r1, [pc, #96]	; (8019e64 <udp_remove+0x78>)
 8019e02:	4819      	ldr	r0, [pc, #100]	; (8019e68 <udp_remove+0x7c>)
 8019e04:	f005 fd52 	bl	801f8ac <iprintf>
 8019e08:	e026      	b.n	8019e58 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019e0a:	4b18      	ldr	r3, [pc, #96]	; (8019e6c <udp_remove+0x80>)
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	687a      	ldr	r2, [r7, #4]
 8019e10:	429a      	cmp	r2, r3
 8019e12:	d105      	bne.n	8019e20 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019e14:	4b15      	ldr	r3, [pc, #84]	; (8019e6c <udp_remove+0x80>)
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	68db      	ldr	r3, [r3, #12]
 8019e1a:	4a14      	ldr	r2, [pc, #80]	; (8019e6c <udp_remove+0x80>)
 8019e1c:	6013      	str	r3, [r2, #0]
 8019e1e:	e017      	b.n	8019e50 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019e20:	4b12      	ldr	r3, [pc, #72]	; (8019e6c <udp_remove+0x80>)
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	60fb      	str	r3, [r7, #12]
 8019e26:	e010      	b.n	8019e4a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	68db      	ldr	r3, [r3, #12]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d009      	beq.n	8019e44 <udp_remove+0x58>
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	68db      	ldr	r3, [r3, #12]
 8019e34:	687a      	ldr	r2, [r7, #4]
 8019e36:	429a      	cmp	r2, r3
 8019e38:	d104      	bne.n	8019e44 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	68da      	ldr	r2, [r3, #12]
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	60da      	str	r2, [r3, #12]
        break;
 8019e42:	e005      	b.n	8019e50 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	68db      	ldr	r3, [r3, #12]
 8019e48:	60fb      	str	r3, [r7, #12]
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d1eb      	bne.n	8019e28 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019e50:	6879      	ldr	r1, [r7, #4]
 8019e52:	2000      	movs	r0, #0
 8019e54:	f7f7 ffd2 	bl	8011dfc <memp_free>
}
 8019e58:	3710      	adds	r7, #16
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	bd80      	pop	{r7, pc}
 8019e5e:	bf00      	nop
 8019e60:	080241ec 	.word	0x080241ec
 8019e64:	08024538 	.word	0x08024538
 8019e68:	08024240 	.word	0x08024240
 8019e6c:	20010228 	.word	0x20010228

08019e70 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b082      	sub	sp, #8
 8019e74:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019e76:	2000      	movs	r0, #0
 8019e78:	f7f7 ff4a 	bl	8011d10 <memp_malloc>
 8019e7c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d007      	beq.n	8019e94 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019e84:	2220      	movs	r2, #32
 8019e86:	2100      	movs	r1, #0
 8019e88:	6878      	ldr	r0, [r7, #4]
 8019e8a:	f005 fe65 	bl	801fb58 <memset>
    pcb->ttl = UDP_TTL;
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	22ff      	movs	r2, #255	; 0xff
 8019e92:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8019e94:	687b      	ldr	r3, [r7, #4]
}
 8019e96:	4618      	mov	r0, r3
 8019e98:	3708      	adds	r7, #8
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	bd80      	pop	{r7, pc}

08019e9e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8019e9e:	b580      	push	{r7, lr}
 8019ea0:	b084      	sub	sp, #16
 8019ea2:	af00      	add	r7, sp, #0
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8019ea8:	f7ff ffe2 	bl	8019e70 <udp_new>
 8019eac:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8019eae:	68fb      	ldr	r3, [r7, #12]
}
 8019eb0:	4618      	mov	r0, r3
 8019eb2:	3710      	adds	r7, #16
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	bd80      	pop	{r7, pc}

08019eb8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019eb8:	b480      	push	{r7}
 8019eba:	b085      	sub	sp, #20
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
 8019ec0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d01e      	beq.n	8019f06 <udp_netif_ip_addr_changed+0x4e>
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d01a      	beq.n	8019f06 <udp_netif_ip_addr_changed+0x4e>
 8019ed0:	683b      	ldr	r3, [r7, #0]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d017      	beq.n	8019f06 <udp_netif_ip_addr_changed+0x4e>
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d013      	beq.n	8019f06 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019ede:	4b0d      	ldr	r3, [pc, #52]	; (8019f14 <udp_netif_ip_addr_changed+0x5c>)
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	60fb      	str	r3, [r7, #12]
 8019ee4:	e00c      	b.n	8019f00 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019ee6:	68fb      	ldr	r3, [r7, #12]
 8019ee8:	681a      	ldr	r2, [r3, #0]
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	429a      	cmp	r2, r3
 8019ef0:	d103      	bne.n	8019efa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019ef2:	683b      	ldr	r3, [r7, #0]
 8019ef4:	681a      	ldr	r2, [r3, #0]
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	68db      	ldr	r3, [r3, #12]
 8019efe:	60fb      	str	r3, [r7, #12]
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d1ef      	bne.n	8019ee6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019f06:	bf00      	nop
 8019f08:	3714      	adds	r7, #20
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f10:	4770      	bx	lr
 8019f12:	bf00      	nop
 8019f14:	20010228 	.word	0x20010228

08019f18 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8019f1c:	4b20      	ldr	r3, [pc, #128]	; (8019fa0 <dhcp_inc_pcb_refcount+0x88>)
 8019f1e:	781b      	ldrb	r3, [r3, #0]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d133      	bne.n	8019f8c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8019f24:	4b1f      	ldr	r3, [pc, #124]	; (8019fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d005      	beq.n	8019f38 <dhcp_inc_pcb_refcount+0x20>
 8019f2c:	4b1e      	ldr	r3, [pc, #120]	; (8019fa8 <dhcp_inc_pcb_refcount+0x90>)
 8019f2e:	22e5      	movs	r2, #229	; 0xe5
 8019f30:	491e      	ldr	r1, [pc, #120]	; (8019fac <dhcp_inc_pcb_refcount+0x94>)
 8019f32:	481f      	ldr	r0, [pc, #124]	; (8019fb0 <dhcp_inc_pcb_refcount+0x98>)
 8019f34:	f005 fcba 	bl	801f8ac <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8019f38:	f7ff ff9a 	bl	8019e70 <udp_new>
 8019f3c:	4603      	mov	r3, r0
 8019f3e:	4a19      	ldr	r2, [pc, #100]	; (8019fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8019f40:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8019f42:	4b18      	ldr	r3, [pc, #96]	; (8019fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d102      	bne.n	8019f50 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8019f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019f4e:	e024      	b.n	8019f9a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8019f50:	4b14      	ldr	r3, [pc, #80]	; (8019fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	7a5a      	ldrb	r2, [r3, #9]
 8019f56:	4b13      	ldr	r3, [pc, #76]	; (8019fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	f042 0220 	orr.w	r2, r2, #32
 8019f5e:	b2d2      	uxtb	r2, r2
 8019f60:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8019f62:	4b10      	ldr	r3, [pc, #64]	; (8019fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	2244      	movs	r2, #68	; 0x44
 8019f68:	4912      	ldr	r1, [pc, #72]	; (8019fb4 <dhcp_inc_pcb_refcount+0x9c>)
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	f7ff fe0e 	bl	8019b8c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8019f70:	4b0c      	ldr	r3, [pc, #48]	; (8019fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	2243      	movs	r2, #67	; 0x43
 8019f76:	490f      	ldr	r1, [pc, #60]	; (8019fb4 <dhcp_inc_pcb_refcount+0x9c>)
 8019f78:	4618      	mov	r0, r3
 8019f7a:	f7ff fea9 	bl	8019cd0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8019f7e:	4b09      	ldr	r3, [pc, #36]	; (8019fa4 <dhcp_inc_pcb_refcount+0x8c>)
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	2200      	movs	r2, #0
 8019f84:	490c      	ldr	r1, [pc, #48]	; (8019fb8 <dhcp_inc_pcb_refcount+0xa0>)
 8019f86:	4618      	mov	r0, r3
 8019f88:	f7ff ff10 	bl	8019dac <udp_recv>
  }

  dhcp_pcb_refcount++;
 8019f8c:	4b04      	ldr	r3, [pc, #16]	; (8019fa0 <dhcp_inc_pcb_refcount+0x88>)
 8019f8e:	781b      	ldrb	r3, [r3, #0]
 8019f90:	3301      	adds	r3, #1
 8019f92:	b2da      	uxtb	r2, r3
 8019f94:	4b02      	ldr	r3, [pc, #8]	; (8019fa0 <dhcp_inc_pcb_refcount+0x88>)
 8019f96:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8019f98:	2300      	movs	r3, #0
}
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	bd80      	pop	{r7, pc}
 8019f9e:	bf00      	nop
 8019fa0:	20010258 	.word	0x20010258
 8019fa4:	20010254 	.word	0x20010254
 8019fa8:	08024550 	.word	0x08024550
 8019fac:	08024588 	.word	0x08024588
 8019fb0:	080245b0 	.word	0x080245b0
 8019fb4:	080251e8 	.word	0x080251e8
 8019fb8:	0801b84d 	.word	0x0801b84d

08019fbc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8019fc0:	4b0e      	ldr	r3, [pc, #56]	; (8019ffc <dhcp_dec_pcb_refcount+0x40>)
 8019fc2:	781b      	ldrb	r3, [r3, #0]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d105      	bne.n	8019fd4 <dhcp_dec_pcb_refcount+0x18>
 8019fc8:	4b0d      	ldr	r3, [pc, #52]	; (801a000 <dhcp_dec_pcb_refcount+0x44>)
 8019fca:	22ff      	movs	r2, #255	; 0xff
 8019fcc:	490d      	ldr	r1, [pc, #52]	; (801a004 <dhcp_dec_pcb_refcount+0x48>)
 8019fce:	480e      	ldr	r0, [pc, #56]	; (801a008 <dhcp_dec_pcb_refcount+0x4c>)
 8019fd0:	f005 fc6c 	bl	801f8ac <iprintf>
  dhcp_pcb_refcount--;
 8019fd4:	4b09      	ldr	r3, [pc, #36]	; (8019ffc <dhcp_dec_pcb_refcount+0x40>)
 8019fd6:	781b      	ldrb	r3, [r3, #0]
 8019fd8:	3b01      	subs	r3, #1
 8019fda:	b2da      	uxtb	r2, r3
 8019fdc:	4b07      	ldr	r3, [pc, #28]	; (8019ffc <dhcp_dec_pcb_refcount+0x40>)
 8019fde:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8019fe0:	4b06      	ldr	r3, [pc, #24]	; (8019ffc <dhcp_dec_pcb_refcount+0x40>)
 8019fe2:	781b      	ldrb	r3, [r3, #0]
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d107      	bne.n	8019ff8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8019fe8:	4b08      	ldr	r3, [pc, #32]	; (801a00c <dhcp_dec_pcb_refcount+0x50>)
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	4618      	mov	r0, r3
 8019fee:	f7ff fefd 	bl	8019dec <udp_remove>
    dhcp_pcb = NULL;
 8019ff2:	4b06      	ldr	r3, [pc, #24]	; (801a00c <dhcp_dec_pcb_refcount+0x50>)
 8019ff4:	2200      	movs	r2, #0
 8019ff6:	601a      	str	r2, [r3, #0]
  }
}
 8019ff8:	bf00      	nop
 8019ffa:	bd80      	pop	{r7, pc}
 8019ffc:	20010258 	.word	0x20010258
 801a000:	08024550 	.word	0x08024550
 801a004:	080245d8 	.word	0x080245d8
 801a008:	080245b0 	.word	0x080245b0
 801a00c:	20010254 	.word	0x20010254

0801a010 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b084      	sub	sp, #16
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a01c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801a01e:	210c      	movs	r1, #12
 801a020:	68f8      	ldr	r0, [r7, #12]
 801a022:	f001 f855 	bl	801b0d0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801a026:	4b06      	ldr	r3, [pc, #24]	; (801a040 <dhcp_handle_nak+0x30>)
 801a028:	4a05      	ldr	r2, [pc, #20]	; (801a040 <dhcp_handle_nak+0x30>)
 801a02a:	4905      	ldr	r1, [pc, #20]	; (801a040 <dhcp_handle_nak+0x30>)
 801a02c:	6878      	ldr	r0, [r7, #4]
 801a02e:	f7f8 f887 	bl	8012140 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801a032:	6878      	ldr	r0, [r7, #4]
 801a034:	f000 fc48 	bl	801a8c8 <dhcp_discover>
}
 801a038:	bf00      	nop
 801a03a:	3710      	adds	r7, #16
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	080251e8 	.word	0x080251e8

0801a044 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b084      	sub	sp, #16
 801a048:	af00      	add	r7, sp, #0
 801a04a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a050:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801a052:	2108      	movs	r1, #8
 801a054:	68f8      	ldr	r0, [r7, #12]
 801a056:	f001 f83b 	bl	801b0d0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	331c      	adds	r3, #28
 801a05e:	2200      	movs	r2, #0
 801a060:	4619      	mov	r1, r3
 801a062:	6878      	ldr	r0, [r7, #4]
 801a064:	f002 fb3c 	bl	801c6e0 <etharp_query>
 801a068:	4603      	mov	r3, r0
 801a06a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	799b      	ldrb	r3, [r3, #6]
 801a070:	2bff      	cmp	r3, #255	; 0xff
 801a072:	d005      	beq.n	801a080 <dhcp_check+0x3c>
    dhcp->tries++;
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	799b      	ldrb	r3, [r3, #6]
 801a078:	3301      	adds	r3, #1
 801a07a:	b2da      	uxtb	r2, r3
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801a080:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801a084:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a086:	893b      	ldrh	r3, [r7, #8]
 801a088:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a08c:	4a06      	ldr	r2, [pc, #24]	; (801a0a8 <dhcp_check+0x64>)
 801a08e:	fb82 1203 	smull	r1, r2, r2, r3
 801a092:	1152      	asrs	r2, r2, #5
 801a094:	17db      	asrs	r3, r3, #31
 801a096:	1ad3      	subs	r3, r2, r3
 801a098:	b29a      	uxth	r2, r3
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801a09e:	bf00      	nop
 801a0a0:	3710      	adds	r7, #16
 801a0a2:	46bd      	mov	sp, r7
 801a0a4:	bd80      	pop	{r7, pc}
 801a0a6:	bf00      	nop
 801a0a8:	10624dd3 	.word	0x10624dd3

0801a0ac <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a0ac:	b580      	push	{r7, lr}
 801a0ae:	b084      	sub	sp, #16
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	6078      	str	r0, [r7, #4]
 801a0b4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801a0bc:	4b0c      	ldr	r3, [pc, #48]	; (801a0f0 <dhcp_handle_offer+0x44>)
 801a0be:	789b      	ldrb	r3, [r3, #2]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d011      	beq.n	801a0e8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	2200      	movs	r2, #0
 801a0c8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801a0ca:	4b0a      	ldr	r3, [pc, #40]	; (801a0f4 <dhcp_handle_offer+0x48>)
 801a0cc:	689b      	ldr	r3, [r3, #8]
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f7f7 f95b 	bl	801138a <lwip_htonl>
 801a0d4:	4602      	mov	r2, r0
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	691a      	ldr	r2, [r3, #16]
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801a0e2:	6878      	ldr	r0, [r7, #4]
 801a0e4:	f000 f808 	bl	801a0f8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801a0e8:	bf00      	nop
 801a0ea:	3710      	adds	r7, #16
 801a0ec:	46bd      	mov	sp, r7
 801a0ee:	bd80      	pop	{r7, pc}
 801a0f0:	2001024c 	.word	0x2001024c
 801a0f4:	2001022c 	.word	0x2001022c

0801a0f8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801a0f8:	b5b0      	push	{r4, r5, r7, lr}
 801a0fa:	b08a      	sub	sp, #40	; 0x28
 801a0fc:	af02      	add	r7, sp, #8
 801a0fe:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d109      	bne.n	801a11a <dhcp_select+0x22>
 801a106:	4b71      	ldr	r3, [pc, #452]	; (801a2cc <dhcp_select+0x1d4>)
 801a108:	f240 1277 	movw	r2, #375	; 0x177
 801a10c:	4970      	ldr	r1, [pc, #448]	; (801a2d0 <dhcp_select+0x1d8>)
 801a10e:	4871      	ldr	r0, [pc, #452]	; (801a2d4 <dhcp_select+0x1dc>)
 801a110:	f005 fbcc 	bl	801f8ac <iprintf>
 801a114:	f06f 030f 	mvn.w	r3, #15
 801a118:	e0d3      	b.n	801a2c2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a11e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801a120:	69bb      	ldr	r3, [r7, #24]
 801a122:	2b00      	cmp	r3, #0
 801a124:	d109      	bne.n	801a13a <dhcp_select+0x42>
 801a126:	4b69      	ldr	r3, [pc, #420]	; (801a2cc <dhcp_select+0x1d4>)
 801a128:	f240 1279 	movw	r2, #377	; 0x179
 801a12c:	496a      	ldr	r1, [pc, #424]	; (801a2d8 <dhcp_select+0x1e0>)
 801a12e:	4869      	ldr	r0, [pc, #420]	; (801a2d4 <dhcp_select+0x1dc>)
 801a130:	f005 fbbc 	bl	801f8ac <iprintf>
 801a134:	f06f 0305 	mvn.w	r3, #5
 801a138:	e0c3      	b.n	801a2c2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801a13a:	2101      	movs	r1, #1
 801a13c:	69b8      	ldr	r0, [r7, #24]
 801a13e:	f000 ffc7 	bl	801b0d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a142:	f107 030c 	add.w	r3, r7, #12
 801a146:	2203      	movs	r2, #3
 801a148:	69b9      	ldr	r1, [r7, #24]
 801a14a:	6878      	ldr	r0, [r7, #4]
 801a14c:	f001 fc4c 	bl	801b9e8 <dhcp_create_msg>
 801a150:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a152:	697b      	ldr	r3, [r7, #20]
 801a154:	2b00      	cmp	r3, #0
 801a156:	f000 8085 	beq.w	801a264 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a15a:	697b      	ldr	r3, [r7, #20]
 801a15c:	685b      	ldr	r3, [r3, #4]
 801a15e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a160:	89b8      	ldrh	r0, [r7, #12]
 801a162:	693b      	ldr	r3, [r7, #16]
 801a164:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a168:	2302      	movs	r3, #2
 801a16a:	2239      	movs	r2, #57	; 0x39
 801a16c:	f000 ffca 	bl	801b104 <dhcp_option>
 801a170:	4603      	mov	r3, r0
 801a172:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a174:	89b8      	ldrh	r0, [r7, #12]
 801a176:	693b      	ldr	r3, [r7, #16]
 801a178:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a180:	461a      	mov	r2, r3
 801a182:	f001 f819 	bl	801b1b8 <dhcp_option_short>
 801a186:	4603      	mov	r3, r0
 801a188:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a18a:	89b8      	ldrh	r0, [r7, #12]
 801a18c:	693b      	ldr	r3, [r7, #16]
 801a18e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a192:	2304      	movs	r3, #4
 801a194:	2232      	movs	r2, #50	; 0x32
 801a196:	f000 ffb5 	bl	801b104 <dhcp_option>
 801a19a:	4603      	mov	r3, r0
 801a19c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a19e:	89bc      	ldrh	r4, [r7, #12]
 801a1a0:	693b      	ldr	r3, [r7, #16]
 801a1a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a1a6:	69bb      	ldr	r3, [r7, #24]
 801a1a8:	69db      	ldr	r3, [r3, #28]
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	f7f7 f8ed 	bl	801138a <lwip_htonl>
 801a1b0:	4603      	mov	r3, r0
 801a1b2:	461a      	mov	r2, r3
 801a1b4:	4629      	mov	r1, r5
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	f001 f830 	bl	801b21c <dhcp_option_long>
 801a1bc:	4603      	mov	r3, r0
 801a1be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801a1c0:	89b8      	ldrh	r0, [r7, #12]
 801a1c2:	693b      	ldr	r3, [r7, #16]
 801a1c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a1c8:	2304      	movs	r3, #4
 801a1ca:	2236      	movs	r2, #54	; 0x36
 801a1cc:	f000 ff9a 	bl	801b104 <dhcp_option>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801a1d4:	89bc      	ldrh	r4, [r7, #12]
 801a1d6:	693b      	ldr	r3, [r7, #16]
 801a1d8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a1dc:	69bb      	ldr	r3, [r7, #24]
 801a1de:	699b      	ldr	r3, [r3, #24]
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7f7 f8d2 	bl	801138a <lwip_htonl>
 801a1e6:	4603      	mov	r3, r0
 801a1e8:	461a      	mov	r2, r3
 801a1ea:	4629      	mov	r1, r5
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	f001 f815 	bl	801b21c <dhcp_option_long>
 801a1f2:	4603      	mov	r3, r0
 801a1f4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a1f6:	89b8      	ldrh	r0, [r7, #12]
 801a1f8:	693b      	ldr	r3, [r7, #16]
 801a1fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a1fe:	2303      	movs	r3, #3
 801a200:	2237      	movs	r2, #55	; 0x37
 801a202:	f000 ff7f 	bl	801b104 <dhcp_option>
 801a206:	4603      	mov	r3, r0
 801a208:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a20a:	2300      	movs	r3, #0
 801a20c:	77bb      	strb	r3, [r7, #30]
 801a20e:	e00e      	b.n	801a22e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a210:	89b8      	ldrh	r0, [r7, #12]
 801a212:	693b      	ldr	r3, [r7, #16]
 801a214:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a218:	7fbb      	ldrb	r3, [r7, #30]
 801a21a:	4a30      	ldr	r2, [pc, #192]	; (801a2dc <dhcp_select+0x1e4>)
 801a21c:	5cd3      	ldrb	r3, [r2, r3]
 801a21e:	461a      	mov	r2, r3
 801a220:	f000 ffa4 	bl	801b16c <dhcp_option_byte>
 801a224:	4603      	mov	r3, r0
 801a226:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a228:	7fbb      	ldrb	r3, [r7, #30]
 801a22a:	3301      	adds	r3, #1
 801a22c:	77bb      	strb	r3, [r7, #30]
 801a22e:	7fbb      	ldrb	r3, [r7, #30]
 801a230:	2b02      	cmp	r3, #2
 801a232:	d9ed      	bls.n	801a210 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a234:	89b8      	ldrh	r0, [r7, #12]
 801a236:	693b      	ldr	r3, [r7, #16]
 801a238:	33f0      	adds	r3, #240	; 0xf0
 801a23a:	697a      	ldr	r2, [r7, #20]
 801a23c:	4619      	mov	r1, r3
 801a23e:	f001 fca9 	bl	801bb94 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a242:	4b27      	ldr	r3, [pc, #156]	; (801a2e0 <dhcp_select+0x1e8>)
 801a244:	6818      	ldr	r0, [r3, #0]
 801a246:	4b27      	ldr	r3, [pc, #156]	; (801a2e4 <dhcp_select+0x1ec>)
 801a248:	9301      	str	r3, [sp, #4]
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	9300      	str	r3, [sp, #0]
 801a24e:	2343      	movs	r3, #67	; 0x43
 801a250:	4a25      	ldr	r2, [pc, #148]	; (801a2e8 <dhcp_select+0x1f0>)
 801a252:	6979      	ldr	r1, [r7, #20]
 801a254:	f7ff fbb4 	bl	80199c0 <udp_sendto_if_src>
 801a258:	4603      	mov	r3, r0
 801a25a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a25c:	6978      	ldr	r0, [r7, #20]
 801a25e:	f7f8 fcb5 	bl	8012bcc <pbuf_free>
 801a262:	e001      	b.n	801a268 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a264:	23ff      	movs	r3, #255	; 0xff
 801a266:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a268:	69bb      	ldr	r3, [r7, #24]
 801a26a:	799b      	ldrb	r3, [r3, #6]
 801a26c:	2bff      	cmp	r3, #255	; 0xff
 801a26e:	d005      	beq.n	801a27c <dhcp_select+0x184>
    dhcp->tries++;
 801a270:	69bb      	ldr	r3, [r7, #24]
 801a272:	799b      	ldrb	r3, [r3, #6]
 801a274:	3301      	adds	r3, #1
 801a276:	b2da      	uxtb	r2, r3
 801a278:	69bb      	ldr	r3, [r7, #24]
 801a27a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a27c:	69bb      	ldr	r3, [r7, #24]
 801a27e:	799b      	ldrb	r3, [r3, #6]
 801a280:	2b05      	cmp	r3, #5
 801a282:	d80d      	bhi.n	801a2a0 <dhcp_select+0x1a8>
 801a284:	69bb      	ldr	r3, [r7, #24]
 801a286:	799b      	ldrb	r3, [r3, #6]
 801a288:	461a      	mov	r2, r3
 801a28a:	2301      	movs	r3, #1
 801a28c:	4093      	lsls	r3, r2
 801a28e:	b29b      	uxth	r3, r3
 801a290:	461a      	mov	r2, r3
 801a292:	0152      	lsls	r2, r2, #5
 801a294:	1ad2      	subs	r2, r2, r3
 801a296:	0092      	lsls	r2, r2, #2
 801a298:	4413      	add	r3, r2
 801a29a:	00db      	lsls	r3, r3, #3
 801a29c:	b29b      	uxth	r3, r3
 801a29e:	e001      	b.n	801a2a4 <dhcp_select+0x1ac>
 801a2a0:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a2a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a2a6:	89fb      	ldrh	r3, [r7, #14]
 801a2a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a2ac:	4a0f      	ldr	r2, [pc, #60]	; (801a2ec <dhcp_select+0x1f4>)
 801a2ae:	fb82 1203 	smull	r1, r2, r2, r3
 801a2b2:	1152      	asrs	r2, r2, #5
 801a2b4:	17db      	asrs	r3, r3, #31
 801a2b6:	1ad3      	subs	r3, r2, r3
 801a2b8:	b29a      	uxth	r2, r3
 801a2ba:	69bb      	ldr	r3, [r7, #24]
 801a2bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a2be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a2c2:	4618      	mov	r0, r3
 801a2c4:	3720      	adds	r7, #32
 801a2c6:	46bd      	mov	sp, r7
 801a2c8:	bdb0      	pop	{r4, r5, r7, pc}
 801a2ca:	bf00      	nop
 801a2cc:	08024550 	.word	0x08024550
 801a2d0:	080245fc 	.word	0x080245fc
 801a2d4:	080245b0 	.word	0x080245b0
 801a2d8:	08024618 	.word	0x08024618
 801a2dc:	20000030 	.word	0x20000030
 801a2e0:	20010254 	.word	0x20010254
 801a2e4:	080251e8 	.word	0x080251e8
 801a2e8:	080251ec 	.word	0x080251ec
 801a2ec:	10624dd3 	.word	0x10624dd3

0801a2f0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b082      	sub	sp, #8
 801a2f4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801a2f6:	4b27      	ldr	r3, [pc, #156]	; (801a394 <dhcp_coarse_tmr+0xa4>)
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	607b      	str	r3, [r7, #4]
 801a2fc:	e042      	b.n	801a384 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a302:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d039      	beq.n	801a37e <dhcp_coarse_tmr+0x8e>
 801a30a:	683b      	ldr	r3, [r7, #0]
 801a30c:	795b      	ldrb	r3, [r3, #5]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d035      	beq.n	801a37e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801a312:	683b      	ldr	r3, [r7, #0]
 801a314:	8a9b      	ldrh	r3, [r3, #20]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d012      	beq.n	801a340 <dhcp_coarse_tmr+0x50>
 801a31a:	683b      	ldr	r3, [r7, #0]
 801a31c:	8a5b      	ldrh	r3, [r3, #18]
 801a31e:	3301      	adds	r3, #1
 801a320:	b29a      	uxth	r2, r3
 801a322:	683b      	ldr	r3, [r7, #0]
 801a324:	825a      	strh	r2, [r3, #18]
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	8a5a      	ldrh	r2, [r3, #18]
 801a32a:	683b      	ldr	r3, [r7, #0]
 801a32c:	8a9b      	ldrh	r3, [r3, #20]
 801a32e:	429a      	cmp	r2, r3
 801a330:	d106      	bne.n	801a340 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801a332:	6878      	ldr	r0, [r7, #4]
 801a334:	f000 fe32 	bl	801af9c <dhcp_release_and_stop>
        dhcp_start(netif);
 801a338:	6878      	ldr	r0, [r7, #4]
 801a33a:	f000 f969 	bl	801a610 <dhcp_start>
 801a33e:	e01e      	b.n	801a37e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801a340:	683b      	ldr	r3, [r7, #0]
 801a342:	8a1b      	ldrh	r3, [r3, #16]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d00b      	beq.n	801a360 <dhcp_coarse_tmr+0x70>
 801a348:	683b      	ldr	r3, [r7, #0]
 801a34a:	8a1b      	ldrh	r3, [r3, #16]
 801a34c:	1e5a      	subs	r2, r3, #1
 801a34e:	b291      	uxth	r1, r2
 801a350:	683a      	ldr	r2, [r7, #0]
 801a352:	8211      	strh	r1, [r2, #16]
 801a354:	2b01      	cmp	r3, #1
 801a356:	d103      	bne.n	801a360 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801a358:	6878      	ldr	r0, [r7, #4]
 801a35a:	f000 f8c6 	bl	801a4ea <dhcp_t2_timeout>
 801a35e:	e00e      	b.n	801a37e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801a360:	683b      	ldr	r3, [r7, #0]
 801a362:	89db      	ldrh	r3, [r3, #14]
 801a364:	2b00      	cmp	r3, #0
 801a366:	d00a      	beq.n	801a37e <dhcp_coarse_tmr+0x8e>
 801a368:	683b      	ldr	r3, [r7, #0]
 801a36a:	89db      	ldrh	r3, [r3, #14]
 801a36c:	1e5a      	subs	r2, r3, #1
 801a36e:	b291      	uxth	r1, r2
 801a370:	683a      	ldr	r2, [r7, #0]
 801a372:	81d1      	strh	r1, [r2, #14]
 801a374:	2b01      	cmp	r3, #1
 801a376:	d102      	bne.n	801a37e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801a378:	6878      	ldr	r0, [r7, #4]
 801a37a:	f000 f888 	bl	801a48e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	607b      	str	r3, [r7, #4]
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d1b9      	bne.n	801a2fe <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801a38a:	bf00      	nop
 801a38c:	bf00      	nop
 801a38e:	3708      	adds	r7, #8
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}
 801a394:	200101c0 	.word	0x200101c0

0801a398 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b082      	sub	sp, #8
 801a39c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801a39e:	4b16      	ldr	r3, [pc, #88]	; (801a3f8 <dhcp_fine_tmr+0x60>)
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	607b      	str	r3, [r7, #4]
 801a3a4:	e020      	b.n	801a3e8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3aa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801a3ac:	683b      	ldr	r3, [r7, #0]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d017      	beq.n	801a3e2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801a3b2:	683b      	ldr	r3, [r7, #0]
 801a3b4:	891b      	ldrh	r3, [r3, #8]
 801a3b6:	2b01      	cmp	r3, #1
 801a3b8:	d906      	bls.n	801a3c8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801a3ba:	683b      	ldr	r3, [r7, #0]
 801a3bc:	891b      	ldrh	r3, [r3, #8]
 801a3be:	3b01      	subs	r3, #1
 801a3c0:	b29a      	uxth	r2, r3
 801a3c2:	683b      	ldr	r3, [r7, #0]
 801a3c4:	811a      	strh	r2, [r3, #8]
 801a3c6:	e00c      	b.n	801a3e2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801a3c8:	683b      	ldr	r3, [r7, #0]
 801a3ca:	891b      	ldrh	r3, [r3, #8]
 801a3cc:	2b01      	cmp	r3, #1
 801a3ce:	d108      	bne.n	801a3e2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801a3d0:	683b      	ldr	r3, [r7, #0]
 801a3d2:	891b      	ldrh	r3, [r3, #8]
 801a3d4:	3b01      	subs	r3, #1
 801a3d6:	b29a      	uxth	r2, r3
 801a3d8:	683b      	ldr	r3, [r7, #0]
 801a3da:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801a3dc:	6878      	ldr	r0, [r7, #4]
 801a3de:	f000 f80d 	bl	801a3fc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	607b      	str	r3, [r7, #4]
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d1db      	bne.n	801a3a6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801a3ee:	bf00      	nop
 801a3f0:	bf00      	nop
 801a3f2:	3708      	adds	r7, #8
 801a3f4:	46bd      	mov	sp, r7
 801a3f6:	bd80      	pop	{r7, pc}
 801a3f8:	200101c0 	.word	0x200101c0

0801a3fc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b084      	sub	sp, #16
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a408:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	795b      	ldrb	r3, [r3, #5]
 801a40e:	2b0c      	cmp	r3, #12
 801a410:	d003      	beq.n	801a41a <dhcp_timeout+0x1e>
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	795b      	ldrb	r3, [r3, #5]
 801a416:	2b06      	cmp	r3, #6
 801a418:	d103      	bne.n	801a422 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801a41a:	6878      	ldr	r0, [r7, #4]
 801a41c:	f000 fa54 	bl	801a8c8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801a420:	e031      	b.n	801a486 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	795b      	ldrb	r3, [r3, #5]
 801a426:	2b01      	cmp	r3, #1
 801a428:	d10e      	bne.n	801a448 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	799b      	ldrb	r3, [r3, #6]
 801a42e:	2b05      	cmp	r3, #5
 801a430:	d803      	bhi.n	801a43a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801a432:	6878      	ldr	r0, [r7, #4]
 801a434:	f7ff fe60 	bl	801a0f8 <dhcp_select>
}
 801a438:	e025      	b.n	801a486 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801a43a:	6878      	ldr	r0, [r7, #4]
 801a43c:	f000 fdae 	bl	801af9c <dhcp_release_and_stop>
      dhcp_start(netif);
 801a440:	6878      	ldr	r0, [r7, #4]
 801a442:	f000 f8e5 	bl	801a610 <dhcp_start>
}
 801a446:	e01e      	b.n	801a486 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	795b      	ldrb	r3, [r3, #5]
 801a44c:	2b08      	cmp	r3, #8
 801a44e:	d10b      	bne.n	801a468 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	799b      	ldrb	r3, [r3, #6]
 801a454:	2b01      	cmp	r3, #1
 801a456:	d803      	bhi.n	801a460 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801a458:	6878      	ldr	r0, [r7, #4]
 801a45a:	f7ff fdf3 	bl	801a044 <dhcp_check>
}
 801a45e:	e012      	b.n	801a486 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801a460:	6878      	ldr	r0, [r7, #4]
 801a462:	f000 fad3 	bl	801aa0c <dhcp_bind>
}
 801a466:	e00e      	b.n	801a486 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	795b      	ldrb	r3, [r3, #5]
 801a46c:	2b03      	cmp	r3, #3
 801a46e:	d10a      	bne.n	801a486 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	799b      	ldrb	r3, [r3, #6]
 801a474:	2b01      	cmp	r3, #1
 801a476:	d803      	bhi.n	801a480 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801a478:	6878      	ldr	r0, [r7, #4]
 801a47a:	f000 fcd9 	bl	801ae30 <dhcp_reboot>
}
 801a47e:	e002      	b.n	801a486 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801a480:	6878      	ldr	r0, [r7, #4]
 801a482:	f000 fa21 	bl	801a8c8 <dhcp_discover>
}
 801a486:	bf00      	nop
 801a488:	3710      	adds	r7, #16
 801a48a:	46bd      	mov	sp, r7
 801a48c:	bd80      	pop	{r7, pc}

0801a48e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801a48e:	b580      	push	{r7, lr}
 801a490:	b084      	sub	sp, #16
 801a492:	af00      	add	r7, sp, #0
 801a494:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a49a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	795b      	ldrb	r3, [r3, #5]
 801a4a0:	2b01      	cmp	r3, #1
 801a4a2:	d007      	beq.n	801a4b4 <dhcp_t1_timeout+0x26>
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	795b      	ldrb	r3, [r3, #5]
 801a4a8:	2b0a      	cmp	r3, #10
 801a4aa:	d003      	beq.n	801a4b4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a4b0:	2b05      	cmp	r3, #5
 801a4b2:	d116      	bne.n	801a4e2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801a4b4:	6878      	ldr	r0, [r7, #4]
 801a4b6:	f000 fb83 	bl	801abc0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	899b      	ldrh	r3, [r3, #12]
 801a4be:	461a      	mov	r2, r3
 801a4c0:	68fb      	ldr	r3, [r7, #12]
 801a4c2:	8a5b      	ldrh	r3, [r3, #18]
 801a4c4:	1ad3      	subs	r3, r2, r3
 801a4c6:	2b01      	cmp	r3, #1
 801a4c8:	dd0b      	ble.n	801a4e2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	899b      	ldrh	r3, [r3, #12]
 801a4ce:	461a      	mov	r2, r3
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	8a5b      	ldrh	r3, [r3, #18]
 801a4d4:	1ad3      	subs	r3, r2, r3
 801a4d6:	0fda      	lsrs	r2, r3, #31
 801a4d8:	4413      	add	r3, r2
 801a4da:	105b      	asrs	r3, r3, #1
 801a4dc:	b29a      	uxth	r2, r3
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801a4e2:	bf00      	nop
 801a4e4:	3710      	adds	r7, #16
 801a4e6:	46bd      	mov	sp, r7
 801a4e8:	bd80      	pop	{r7, pc}

0801a4ea <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801a4ea:	b580      	push	{r7, lr}
 801a4ec:	b084      	sub	sp, #16
 801a4ee:	af00      	add	r7, sp, #0
 801a4f0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	795b      	ldrb	r3, [r3, #5]
 801a4fc:	2b01      	cmp	r3, #1
 801a4fe:	d00b      	beq.n	801a518 <dhcp_t2_timeout+0x2e>
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	795b      	ldrb	r3, [r3, #5]
 801a504:	2b0a      	cmp	r3, #10
 801a506:	d007      	beq.n	801a518 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a50c:	2b05      	cmp	r3, #5
 801a50e:	d003      	beq.n	801a518 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	795b      	ldrb	r3, [r3, #5]
 801a514:	2b04      	cmp	r3, #4
 801a516:	d116      	bne.n	801a546 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801a518:	6878      	ldr	r0, [r7, #4]
 801a51a:	f000 fbed 	bl	801acf8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	8a9b      	ldrh	r3, [r3, #20]
 801a522:	461a      	mov	r2, r3
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	8a5b      	ldrh	r3, [r3, #18]
 801a528:	1ad3      	subs	r3, r2, r3
 801a52a:	2b01      	cmp	r3, #1
 801a52c:	dd0b      	ble.n	801a546 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	8a9b      	ldrh	r3, [r3, #20]
 801a532:	461a      	mov	r2, r3
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	8a5b      	ldrh	r3, [r3, #18]
 801a538:	1ad3      	subs	r3, r2, r3
 801a53a:	0fda      	lsrs	r2, r3, #31
 801a53c:	4413      	add	r3, r2
 801a53e:	105b      	asrs	r3, r3, #1
 801a540:	b29a      	uxth	r2, r3
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801a546:	bf00      	nop
 801a548:	3710      	adds	r7, #16
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}
	...

0801a550 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a550:	b580      	push	{r7, lr}
 801a552:	b084      	sub	sp, #16
 801a554:	af00      	add	r7, sp, #0
 801a556:	6078      	str	r0, [r7, #4]
 801a558:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a55e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	2200      	movs	r2, #0
 801a564:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	2200      	movs	r2, #0
 801a56a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801a56c:	4b26      	ldr	r3, [pc, #152]	; (801a608 <dhcp_handle_ack+0xb8>)
 801a56e:	78db      	ldrb	r3, [r3, #3]
 801a570:	2b00      	cmp	r3, #0
 801a572:	d003      	beq.n	801a57c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801a574:	4b25      	ldr	r3, [pc, #148]	; (801a60c <dhcp_handle_ack+0xbc>)
 801a576:	68da      	ldr	r2, [r3, #12]
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801a57c:	4b22      	ldr	r3, [pc, #136]	; (801a608 <dhcp_handle_ack+0xb8>)
 801a57e:	791b      	ldrb	r3, [r3, #4]
 801a580:	2b00      	cmp	r3, #0
 801a582:	d004      	beq.n	801a58e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801a584:	4b21      	ldr	r3, [pc, #132]	; (801a60c <dhcp_handle_ack+0xbc>)
 801a586:	691a      	ldr	r2, [r3, #16]
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	62da      	str	r2, [r3, #44]	; 0x2c
 801a58c:	e004      	b.n	801a598 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a592:	085a      	lsrs	r2, r3, #1
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801a598:	4b1b      	ldr	r3, [pc, #108]	; (801a608 <dhcp_handle_ack+0xb8>)
 801a59a:	795b      	ldrb	r3, [r3, #5]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d004      	beq.n	801a5aa <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801a5a0:	4b1a      	ldr	r3, [pc, #104]	; (801a60c <dhcp_handle_ack+0xbc>)
 801a5a2:	695a      	ldr	r2, [r3, #20]
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	631a      	str	r2, [r3, #48]	; 0x30
 801a5a8:	e007      	b.n	801a5ba <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a5ae:	4613      	mov	r3, r2
 801a5b0:	00db      	lsls	r3, r3, #3
 801a5b2:	1a9b      	subs	r3, r3, r2
 801a5b4:	08da      	lsrs	r2, r3, #3
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a5ba:	683b      	ldr	r3, [r7, #0]
 801a5bc:	691a      	ldr	r2, [r3, #16]
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801a5c2:	4b11      	ldr	r3, [pc, #68]	; (801a608 <dhcp_handle_ack+0xb8>)
 801a5c4:	799b      	ldrb	r3, [r3, #6]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d00b      	beq.n	801a5e2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801a5ca:	4b10      	ldr	r3, [pc, #64]	; (801a60c <dhcp_handle_ack+0xbc>)
 801a5cc:	699b      	ldr	r3, [r3, #24]
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	f7f6 fedb 	bl	801138a <lwip_htonl>
 801a5d4:	4602      	mov	r2, r0
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801a5da:	68fb      	ldr	r3, [r7, #12]
 801a5dc:	2201      	movs	r2, #1
 801a5de:	71da      	strb	r2, [r3, #7]
 801a5e0:	e002      	b.n	801a5e8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801a5e8:	4b07      	ldr	r3, [pc, #28]	; (801a608 <dhcp_handle_ack+0xb8>)
 801a5ea:	79db      	ldrb	r3, [r3, #7]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d007      	beq.n	801a600 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801a5f0:	4b06      	ldr	r3, [pc, #24]	; (801a60c <dhcp_handle_ack+0xbc>)
 801a5f2:	69db      	ldr	r3, [r3, #28]
 801a5f4:	4618      	mov	r0, r3
 801a5f6:	f7f6 fec8 	bl	801138a <lwip_htonl>
 801a5fa:	4602      	mov	r2, r0
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801a600:	bf00      	nop
 801a602:	3710      	adds	r7, #16
 801a604:	46bd      	mov	sp, r7
 801a606:	bd80      	pop	{r7, pc}
 801a608:	2001024c 	.word	0x2001024c
 801a60c:	2001022c 	.word	0x2001022c

0801a610 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b084      	sub	sp, #16
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d109      	bne.n	801a632 <dhcp_start+0x22>
 801a61e:	4b37      	ldr	r3, [pc, #220]	; (801a6fc <dhcp_start+0xec>)
 801a620:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a624:	4936      	ldr	r1, [pc, #216]	; (801a700 <dhcp_start+0xf0>)
 801a626:	4837      	ldr	r0, [pc, #220]	; (801a704 <dhcp_start+0xf4>)
 801a628:	f005 f940 	bl	801f8ac <iprintf>
 801a62c:	f06f 030f 	mvn.w	r3, #15
 801a630:	e060      	b.n	801a6f4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a638:	f003 0301 	and.w	r3, r3, #1
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d109      	bne.n	801a654 <dhcp_start+0x44>
 801a640:	4b2e      	ldr	r3, [pc, #184]	; (801a6fc <dhcp_start+0xec>)
 801a642:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801a646:	4930      	ldr	r1, [pc, #192]	; (801a708 <dhcp_start+0xf8>)
 801a648:	482e      	ldr	r0, [pc, #184]	; (801a704 <dhcp_start+0xf4>)
 801a64a:	f005 f92f 	bl	801f8ac <iprintf>
 801a64e:	f06f 030f 	mvn.w	r3, #15
 801a652:	e04f      	b.n	801a6f4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a658:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a65e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a662:	d202      	bcs.n	801a66a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801a664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a668:	e044      	b.n	801a6f4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d10d      	bne.n	801a68c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801a670:	2034      	movs	r0, #52	; 0x34
 801a672:	f7f7 f9a9 	bl	80119c8 <mem_malloc>
 801a676:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d102      	bne.n	801a684 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801a67e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a682:	e037      	b.n	801a6f4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	68fa      	ldr	r2, [r7, #12]
 801a688:	625a      	str	r2, [r3, #36]	; 0x24
 801a68a:	e005      	b.n	801a698 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	791b      	ldrb	r3, [r3, #4]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d001      	beq.n	801a698 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a694:	f7ff fc92 	bl	8019fbc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801a698:	2234      	movs	r2, #52	; 0x34
 801a69a:	2100      	movs	r1, #0
 801a69c:	68f8      	ldr	r0, [r7, #12]
 801a69e:	f005 fa5b 	bl	801fb58 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801a6a2:	f7ff fc39 	bl	8019f18 <dhcp_inc_pcb_refcount>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d002      	beq.n	801a6b2 <dhcp_start+0xa2>
    return ERR_MEM;
 801a6ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a6b0:	e020      	b.n	801a6f4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	2201      	movs	r2, #1
 801a6b6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a6be:	f003 0304 	and.w	r3, r3, #4
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d105      	bne.n	801a6d2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801a6c6:	2102      	movs	r1, #2
 801a6c8:	68f8      	ldr	r0, [r7, #12]
 801a6ca:	f000 fd01 	bl	801b0d0 <dhcp_set_state>
    return ERR_OK;
 801a6ce:	2300      	movs	r3, #0
 801a6d0:	e010      	b.n	801a6f4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801a6d2:	6878      	ldr	r0, [r7, #4]
 801a6d4:	f000 f8f8 	bl	801a8c8 <dhcp_discover>
 801a6d8:	4603      	mov	r3, r0
 801a6da:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801a6dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d005      	beq.n	801a6f0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801a6e4:	6878      	ldr	r0, [r7, #4]
 801a6e6:	f000 fc59 	bl	801af9c <dhcp_release_and_stop>
    return ERR_MEM;
 801a6ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a6ee:	e001      	b.n	801a6f4 <dhcp_start+0xe4>
  }
  return result;
 801a6f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	3710      	adds	r7, #16
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	bd80      	pop	{r7, pc}
 801a6fc:	08024550 	.word	0x08024550
 801a700:	08024634 	.word	0x08024634
 801a704:	080245b0 	.word	0x080245b0
 801a708:	08024678 	.word	0x08024678

0801a70c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b084      	sub	sp, #16
 801a710:	af00      	add	r7, sp, #0
 801a712:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a718:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d025      	beq.n	801a76c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	795b      	ldrb	r3, [r3, #5]
 801a724:	2b0a      	cmp	r3, #10
 801a726:	d008      	beq.n	801a73a <dhcp_network_changed+0x2e>
 801a728:	2b0a      	cmp	r3, #10
 801a72a:	dc0d      	bgt.n	801a748 <dhcp_network_changed+0x3c>
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d01f      	beq.n	801a770 <dhcp_network_changed+0x64>
 801a730:	2b00      	cmp	r3, #0
 801a732:	db09      	blt.n	801a748 <dhcp_network_changed+0x3c>
 801a734:	3b03      	subs	r3, #3
 801a736:	2b02      	cmp	r3, #2
 801a738:	d806      	bhi.n	801a748 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	2200      	movs	r2, #0
 801a73e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801a740:	6878      	ldr	r0, [r7, #4]
 801a742:	f000 fb75 	bl	801ae30 <dhcp_reboot>
      break;
 801a746:	e014      	b.n	801a772 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	795b      	ldrb	r3, [r3, #5]
 801a74c:	2b0c      	cmp	r3, #12
 801a74e:	d906      	bls.n	801a75e <dhcp_network_changed+0x52>
 801a750:	4b09      	ldr	r3, [pc, #36]	; (801a778 <dhcp_network_changed+0x6c>)
 801a752:	f240 326d 	movw	r2, #877	; 0x36d
 801a756:	4909      	ldr	r1, [pc, #36]	; (801a77c <dhcp_network_changed+0x70>)
 801a758:	4809      	ldr	r0, [pc, #36]	; (801a780 <dhcp_network_changed+0x74>)
 801a75a:	f005 f8a7 	bl	801f8ac <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	2200      	movs	r2, #0
 801a762:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801a764:	6878      	ldr	r0, [r7, #4]
 801a766:	f000 f8af 	bl	801a8c8 <dhcp_discover>
      break;
 801a76a:	e002      	b.n	801a772 <dhcp_network_changed+0x66>
    return;
 801a76c:	bf00      	nop
 801a76e:	e000      	b.n	801a772 <dhcp_network_changed+0x66>
      break;
 801a770:	bf00      	nop
  }
}
 801a772:	3710      	adds	r7, #16
 801a774:	46bd      	mov	sp, r7
 801a776:	bd80      	pop	{r7, pc}
 801a778:	08024550 	.word	0x08024550
 801a77c:	0802469c 	.word	0x0802469c
 801a780:	080245b0 	.word	0x080245b0

0801a784 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801a784:	b580      	push	{r7, lr}
 801a786:	b084      	sub	sp, #16
 801a788:	af00      	add	r7, sp, #0
 801a78a:	6078      	str	r0, [r7, #4]
 801a78c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d107      	bne.n	801a7a4 <dhcp_arp_reply+0x20>
 801a794:	4b0e      	ldr	r3, [pc, #56]	; (801a7d0 <dhcp_arp_reply+0x4c>)
 801a796:	f240 328b 	movw	r2, #907	; 0x38b
 801a79a:	490e      	ldr	r1, [pc, #56]	; (801a7d4 <dhcp_arp_reply+0x50>)
 801a79c:	480e      	ldr	r0, [pc, #56]	; (801a7d8 <dhcp_arp_reply+0x54>)
 801a79e:	f005 f885 	bl	801f8ac <iprintf>
 801a7a2:	e012      	b.n	801a7ca <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7a8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d00c      	beq.n	801a7ca <dhcp_arp_reply+0x46>
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	795b      	ldrb	r3, [r3, #5]
 801a7b4:	2b08      	cmp	r3, #8
 801a7b6:	d108      	bne.n	801a7ca <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801a7b8:	683b      	ldr	r3, [r7, #0]
 801a7ba:	681a      	ldr	r2, [r3, #0]
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	69db      	ldr	r3, [r3, #28]
 801a7c0:	429a      	cmp	r2, r3
 801a7c2:	d102      	bne.n	801a7ca <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801a7c4:	6878      	ldr	r0, [r7, #4]
 801a7c6:	f000 f809 	bl	801a7dc <dhcp_decline>
    }
  }
}
 801a7ca:	3710      	adds	r7, #16
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	bd80      	pop	{r7, pc}
 801a7d0:	08024550 	.word	0x08024550
 801a7d4:	08024634 	.word	0x08024634
 801a7d8:	080245b0 	.word	0x080245b0

0801a7dc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801a7dc:	b5b0      	push	{r4, r5, r7, lr}
 801a7de:	b08a      	sub	sp, #40	; 0x28
 801a7e0:	af02      	add	r7, sp, #8
 801a7e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7e8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801a7ea:	210c      	movs	r1, #12
 801a7ec:	69b8      	ldr	r0, [r7, #24]
 801a7ee:	f000 fc6f 	bl	801b0d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801a7f2:	f107 030c 	add.w	r3, r7, #12
 801a7f6:	2204      	movs	r2, #4
 801a7f8:	69b9      	ldr	r1, [r7, #24]
 801a7fa:	6878      	ldr	r0, [r7, #4]
 801a7fc:	f001 f8f4 	bl	801b9e8 <dhcp_create_msg>
 801a800:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a802:	697b      	ldr	r3, [r7, #20]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d035      	beq.n	801a874 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a808:	697b      	ldr	r3, [r7, #20]
 801a80a:	685b      	ldr	r3, [r3, #4]
 801a80c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a80e:	89b8      	ldrh	r0, [r7, #12]
 801a810:	693b      	ldr	r3, [r7, #16]
 801a812:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a816:	2304      	movs	r3, #4
 801a818:	2232      	movs	r2, #50	; 0x32
 801a81a:	f000 fc73 	bl	801b104 <dhcp_option>
 801a81e:	4603      	mov	r3, r0
 801a820:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a822:	89bc      	ldrh	r4, [r7, #12]
 801a824:	693b      	ldr	r3, [r7, #16]
 801a826:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a82a:	69bb      	ldr	r3, [r7, #24]
 801a82c:	69db      	ldr	r3, [r3, #28]
 801a82e:	4618      	mov	r0, r3
 801a830:	f7f6 fdab 	bl	801138a <lwip_htonl>
 801a834:	4603      	mov	r3, r0
 801a836:	461a      	mov	r2, r3
 801a838:	4629      	mov	r1, r5
 801a83a:	4620      	mov	r0, r4
 801a83c:	f000 fcee 	bl	801b21c <dhcp_option_long>
 801a840:	4603      	mov	r3, r0
 801a842:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a844:	89b8      	ldrh	r0, [r7, #12]
 801a846:	693b      	ldr	r3, [r7, #16]
 801a848:	33f0      	adds	r3, #240	; 0xf0
 801a84a:	697a      	ldr	r2, [r7, #20]
 801a84c:	4619      	mov	r1, r3
 801a84e:	f001 f9a1 	bl	801bb94 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a852:	4b19      	ldr	r3, [pc, #100]	; (801a8b8 <dhcp_decline+0xdc>)
 801a854:	6818      	ldr	r0, [r3, #0]
 801a856:	4b19      	ldr	r3, [pc, #100]	; (801a8bc <dhcp_decline+0xe0>)
 801a858:	9301      	str	r3, [sp, #4]
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	9300      	str	r3, [sp, #0]
 801a85e:	2343      	movs	r3, #67	; 0x43
 801a860:	4a17      	ldr	r2, [pc, #92]	; (801a8c0 <dhcp_decline+0xe4>)
 801a862:	6979      	ldr	r1, [r7, #20]
 801a864:	f7ff f8ac 	bl	80199c0 <udp_sendto_if_src>
 801a868:	4603      	mov	r3, r0
 801a86a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a86c:	6978      	ldr	r0, [r7, #20]
 801a86e:	f7f8 f9ad 	bl	8012bcc <pbuf_free>
 801a872:	e001      	b.n	801a878 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a874:	23ff      	movs	r3, #255	; 0xff
 801a876:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a878:	69bb      	ldr	r3, [r7, #24]
 801a87a:	799b      	ldrb	r3, [r3, #6]
 801a87c:	2bff      	cmp	r3, #255	; 0xff
 801a87e:	d005      	beq.n	801a88c <dhcp_decline+0xb0>
    dhcp->tries++;
 801a880:	69bb      	ldr	r3, [r7, #24]
 801a882:	799b      	ldrb	r3, [r3, #6]
 801a884:	3301      	adds	r3, #1
 801a886:	b2da      	uxtb	r2, r3
 801a888:	69bb      	ldr	r3, [r7, #24]
 801a88a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801a88c:	f242 7310 	movw	r3, #10000	; 0x2710
 801a890:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a892:	89fb      	ldrh	r3, [r7, #14]
 801a894:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a898:	4a0a      	ldr	r2, [pc, #40]	; (801a8c4 <dhcp_decline+0xe8>)
 801a89a:	fb82 1203 	smull	r1, r2, r2, r3
 801a89e:	1152      	asrs	r2, r2, #5
 801a8a0:	17db      	asrs	r3, r3, #31
 801a8a2:	1ad3      	subs	r3, r2, r3
 801a8a4:	b29a      	uxth	r2, r3
 801a8a6:	69bb      	ldr	r3, [r7, #24]
 801a8a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a8aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	3720      	adds	r7, #32
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bdb0      	pop	{r4, r5, r7, pc}
 801a8b6:	bf00      	nop
 801a8b8:	20010254 	.word	0x20010254
 801a8bc:	080251e8 	.word	0x080251e8
 801a8c0:	080251ec 	.word	0x080251ec
 801a8c4:	10624dd3 	.word	0x10624dd3

0801a8c8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b08a      	sub	sp, #40	; 0x28
 801a8cc:	af02      	add	r7, sp, #8
 801a8ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a8d4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801a8d6:	2300      	movs	r3, #0
 801a8d8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801a8da:	69bb      	ldr	r3, [r7, #24]
 801a8dc:	2200      	movs	r2, #0
 801a8de:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801a8e0:	2106      	movs	r1, #6
 801a8e2:	69b8      	ldr	r0, [r7, #24]
 801a8e4:	f000 fbf4 	bl	801b0d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801a8e8:	f107 0308 	add.w	r3, r7, #8
 801a8ec:	2201      	movs	r2, #1
 801a8ee:	69b9      	ldr	r1, [r7, #24]
 801a8f0:	6878      	ldr	r0, [r7, #4]
 801a8f2:	f001 f879 	bl	801b9e8 <dhcp_create_msg>
 801a8f6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801a8f8:	693b      	ldr	r3, [r7, #16]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d04b      	beq.n	801a996 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a8fe:	693b      	ldr	r3, [r7, #16]
 801a900:	685b      	ldr	r3, [r3, #4]
 801a902:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a904:	8938      	ldrh	r0, [r7, #8]
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a90c:	2302      	movs	r3, #2
 801a90e:	2239      	movs	r2, #57	; 0x39
 801a910:	f000 fbf8 	bl	801b104 <dhcp_option>
 801a914:	4603      	mov	r3, r0
 801a916:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a918:	8938      	ldrh	r0, [r7, #8]
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a924:	461a      	mov	r2, r3
 801a926:	f000 fc47 	bl	801b1b8 <dhcp_option_short>
 801a92a:	4603      	mov	r3, r0
 801a92c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a92e:	8938      	ldrh	r0, [r7, #8]
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a936:	2303      	movs	r3, #3
 801a938:	2237      	movs	r2, #55	; 0x37
 801a93a:	f000 fbe3 	bl	801b104 <dhcp_option>
 801a93e:	4603      	mov	r3, r0
 801a940:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a942:	2300      	movs	r3, #0
 801a944:	77fb      	strb	r3, [r7, #31]
 801a946:	e00e      	b.n	801a966 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a948:	8938      	ldrh	r0, [r7, #8]
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a950:	7ffb      	ldrb	r3, [r7, #31]
 801a952:	4a29      	ldr	r2, [pc, #164]	; (801a9f8 <dhcp_discover+0x130>)
 801a954:	5cd3      	ldrb	r3, [r2, r3]
 801a956:	461a      	mov	r2, r3
 801a958:	f000 fc08 	bl	801b16c <dhcp_option_byte>
 801a95c:	4603      	mov	r3, r0
 801a95e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a960:	7ffb      	ldrb	r3, [r7, #31]
 801a962:	3301      	adds	r3, #1
 801a964:	77fb      	strb	r3, [r7, #31]
 801a966:	7ffb      	ldrb	r3, [r7, #31]
 801a968:	2b02      	cmp	r3, #2
 801a96a:	d9ed      	bls.n	801a948 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a96c:	8938      	ldrh	r0, [r7, #8]
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	33f0      	adds	r3, #240	; 0xf0
 801a972:	693a      	ldr	r2, [r7, #16]
 801a974:	4619      	mov	r1, r3
 801a976:	f001 f90d 	bl	801bb94 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a97a:	4b20      	ldr	r3, [pc, #128]	; (801a9fc <dhcp_discover+0x134>)
 801a97c:	6818      	ldr	r0, [r3, #0]
 801a97e:	4b20      	ldr	r3, [pc, #128]	; (801aa00 <dhcp_discover+0x138>)
 801a980:	9301      	str	r3, [sp, #4]
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	9300      	str	r3, [sp, #0]
 801a986:	2343      	movs	r3, #67	; 0x43
 801a988:	4a1e      	ldr	r2, [pc, #120]	; (801aa04 <dhcp_discover+0x13c>)
 801a98a:	6939      	ldr	r1, [r7, #16]
 801a98c:	f7ff f818 	bl	80199c0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801a990:	6938      	ldr	r0, [r7, #16]
 801a992:	f7f8 f91b 	bl	8012bcc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801a996:	69bb      	ldr	r3, [r7, #24]
 801a998:	799b      	ldrb	r3, [r3, #6]
 801a99a:	2bff      	cmp	r3, #255	; 0xff
 801a99c:	d005      	beq.n	801a9aa <dhcp_discover+0xe2>
    dhcp->tries++;
 801a99e:	69bb      	ldr	r3, [r7, #24]
 801a9a0:	799b      	ldrb	r3, [r3, #6]
 801a9a2:	3301      	adds	r3, #1
 801a9a4:	b2da      	uxtb	r2, r3
 801a9a6:	69bb      	ldr	r3, [r7, #24]
 801a9a8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a9aa:	69bb      	ldr	r3, [r7, #24]
 801a9ac:	799b      	ldrb	r3, [r3, #6]
 801a9ae:	2b05      	cmp	r3, #5
 801a9b0:	d80d      	bhi.n	801a9ce <dhcp_discover+0x106>
 801a9b2:	69bb      	ldr	r3, [r7, #24]
 801a9b4:	799b      	ldrb	r3, [r3, #6]
 801a9b6:	461a      	mov	r2, r3
 801a9b8:	2301      	movs	r3, #1
 801a9ba:	4093      	lsls	r3, r2
 801a9bc:	b29b      	uxth	r3, r3
 801a9be:	461a      	mov	r2, r3
 801a9c0:	0152      	lsls	r2, r2, #5
 801a9c2:	1ad2      	subs	r2, r2, r3
 801a9c4:	0092      	lsls	r2, r2, #2
 801a9c6:	4413      	add	r3, r2
 801a9c8:	00db      	lsls	r3, r3, #3
 801a9ca:	b29b      	uxth	r3, r3
 801a9cc:	e001      	b.n	801a9d2 <dhcp_discover+0x10a>
 801a9ce:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a9d2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a9d4:	897b      	ldrh	r3, [r7, #10]
 801a9d6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a9da:	4a0b      	ldr	r2, [pc, #44]	; (801aa08 <dhcp_discover+0x140>)
 801a9dc:	fb82 1203 	smull	r1, r2, r2, r3
 801a9e0:	1152      	asrs	r2, r2, #5
 801a9e2:	17db      	asrs	r3, r3, #31
 801a9e4:	1ad3      	subs	r3, r2, r3
 801a9e6:	b29a      	uxth	r2, r3
 801a9e8:	69bb      	ldr	r3, [r7, #24]
 801a9ea:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a9ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	3720      	adds	r7, #32
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}
 801a9f8:	20000030 	.word	0x20000030
 801a9fc:	20010254 	.word	0x20010254
 801aa00:	080251e8 	.word	0x080251e8
 801aa04:	080251ec 	.word	0x080251ec
 801aa08:	10624dd3 	.word	0x10624dd3

0801aa0c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b088      	sub	sp, #32
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d107      	bne.n	801aa2a <dhcp_bind+0x1e>
 801aa1a:	4b64      	ldr	r3, [pc, #400]	; (801abac <dhcp_bind+0x1a0>)
 801aa1c:	f240 4215 	movw	r2, #1045	; 0x415
 801aa20:	4963      	ldr	r1, [pc, #396]	; (801abb0 <dhcp_bind+0x1a4>)
 801aa22:	4864      	ldr	r0, [pc, #400]	; (801abb4 <dhcp_bind+0x1a8>)
 801aa24:	f004 ff42 	bl	801f8ac <iprintf>
 801aa28:	e0bc      	b.n	801aba4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa2e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801aa30:	69bb      	ldr	r3, [r7, #24]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d107      	bne.n	801aa46 <dhcp_bind+0x3a>
 801aa36:	4b5d      	ldr	r3, [pc, #372]	; (801abac <dhcp_bind+0x1a0>)
 801aa38:	f240 4217 	movw	r2, #1047	; 0x417
 801aa3c:	495e      	ldr	r1, [pc, #376]	; (801abb8 <dhcp_bind+0x1ac>)
 801aa3e:	485d      	ldr	r0, [pc, #372]	; (801abb4 <dhcp_bind+0x1a8>)
 801aa40:	f004 ff34 	bl	801f8ac <iprintf>
 801aa44:	e0ae      	b.n	801aba4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801aa46:	69bb      	ldr	r3, [r7, #24]
 801aa48:	2200      	movs	r2, #0
 801aa4a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801aa4c:	69bb      	ldr	r3, [r7, #24]
 801aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801aa54:	d019      	beq.n	801aa8a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801aa56:	69bb      	ldr	r3, [r7, #24]
 801aa58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa5a:	331e      	adds	r3, #30
 801aa5c:	4a57      	ldr	r2, [pc, #348]	; (801abbc <dhcp_bind+0x1b0>)
 801aa5e:	fba2 2303 	umull	r2, r3, r2, r3
 801aa62:	095b      	lsrs	r3, r3, #5
 801aa64:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801aa66:	69fb      	ldr	r3, [r7, #28]
 801aa68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aa6c:	d302      	bcc.n	801aa74 <dhcp_bind+0x68>
      timeout = 0xffff;
 801aa6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa72:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801aa74:	69fb      	ldr	r3, [r7, #28]
 801aa76:	b29a      	uxth	r2, r3
 801aa78:	69bb      	ldr	r3, [r7, #24]
 801aa7a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801aa7c:	69bb      	ldr	r3, [r7, #24]
 801aa7e:	8a9b      	ldrh	r3, [r3, #20]
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d102      	bne.n	801aa8a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801aa84:	69bb      	ldr	r3, [r7, #24]
 801aa86:	2201      	movs	r2, #1
 801aa88:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801aa8a:	69bb      	ldr	r3, [r7, #24]
 801aa8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801aa92:	d01d      	beq.n	801aad0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801aa94:	69bb      	ldr	r3, [r7, #24]
 801aa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa98:	331e      	adds	r3, #30
 801aa9a:	4a48      	ldr	r2, [pc, #288]	; (801abbc <dhcp_bind+0x1b0>)
 801aa9c:	fba2 2303 	umull	r2, r3, r2, r3
 801aaa0:	095b      	lsrs	r3, r3, #5
 801aaa2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801aaa4:	69fb      	ldr	r3, [r7, #28]
 801aaa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aaaa:	d302      	bcc.n	801aab2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801aaac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aab0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801aab2:	69fb      	ldr	r3, [r7, #28]
 801aab4:	b29a      	uxth	r2, r3
 801aab6:	69bb      	ldr	r3, [r7, #24]
 801aab8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801aaba:	69bb      	ldr	r3, [r7, #24]
 801aabc:	895b      	ldrh	r3, [r3, #10]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d102      	bne.n	801aac8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801aac2:	69bb      	ldr	r3, [r7, #24]
 801aac4:	2201      	movs	r2, #1
 801aac6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801aac8:	69bb      	ldr	r3, [r7, #24]
 801aaca:	895a      	ldrh	r2, [r3, #10]
 801aacc:	69bb      	ldr	r3, [r7, #24]
 801aace:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801aad0:	69bb      	ldr	r3, [r7, #24]
 801aad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801aad8:	d01d      	beq.n	801ab16 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801aada:	69bb      	ldr	r3, [r7, #24]
 801aadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aade:	331e      	adds	r3, #30
 801aae0:	4a36      	ldr	r2, [pc, #216]	; (801abbc <dhcp_bind+0x1b0>)
 801aae2:	fba2 2303 	umull	r2, r3, r2, r3
 801aae6:	095b      	lsrs	r3, r3, #5
 801aae8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801aaea:	69fb      	ldr	r3, [r7, #28]
 801aaec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aaf0:	d302      	bcc.n	801aaf8 <dhcp_bind+0xec>
      timeout = 0xffff;
 801aaf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aaf6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801aaf8:	69fb      	ldr	r3, [r7, #28]
 801aafa:	b29a      	uxth	r2, r3
 801aafc:	69bb      	ldr	r3, [r7, #24]
 801aafe:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801ab00:	69bb      	ldr	r3, [r7, #24]
 801ab02:	899b      	ldrh	r3, [r3, #12]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d102      	bne.n	801ab0e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801ab08:	69bb      	ldr	r3, [r7, #24]
 801ab0a:	2201      	movs	r2, #1
 801ab0c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801ab0e:	69bb      	ldr	r3, [r7, #24]
 801ab10:	899a      	ldrh	r2, [r3, #12]
 801ab12:	69bb      	ldr	r3, [r7, #24]
 801ab14:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801ab16:	69bb      	ldr	r3, [r7, #24]
 801ab18:	895a      	ldrh	r2, [r3, #10]
 801ab1a:	69bb      	ldr	r3, [r7, #24]
 801ab1c:	899b      	ldrh	r3, [r3, #12]
 801ab1e:	429a      	cmp	r2, r3
 801ab20:	d306      	bcc.n	801ab30 <dhcp_bind+0x124>
 801ab22:	69bb      	ldr	r3, [r7, #24]
 801ab24:	899b      	ldrh	r3, [r3, #12]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d002      	beq.n	801ab30 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801ab2a:	69bb      	ldr	r3, [r7, #24]
 801ab2c:	2200      	movs	r2, #0
 801ab2e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801ab30:	69bb      	ldr	r3, [r7, #24]
 801ab32:	79db      	ldrb	r3, [r3, #7]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d003      	beq.n	801ab40 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801ab38:	69bb      	ldr	r3, [r7, #24]
 801ab3a:	6a1b      	ldr	r3, [r3, #32]
 801ab3c:	613b      	str	r3, [r7, #16]
 801ab3e:	e014      	b.n	801ab6a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801ab40:	69bb      	ldr	r3, [r7, #24]
 801ab42:	331c      	adds	r3, #28
 801ab44:	781b      	ldrb	r3, [r3, #0]
 801ab46:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801ab48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	db02      	blt.n	801ab56 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801ab50:	23ff      	movs	r3, #255	; 0xff
 801ab52:	613b      	str	r3, [r7, #16]
 801ab54:	e009      	b.n	801ab6a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801ab56:	7dfb      	ldrb	r3, [r7, #23]
 801ab58:	2bbf      	cmp	r3, #191	; 0xbf
 801ab5a:	d903      	bls.n	801ab64 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801ab5c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801ab60:	613b      	str	r3, [r7, #16]
 801ab62:	e002      	b.n	801ab6a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801ab64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab68:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801ab6a:	69bb      	ldr	r3, [r7, #24]
 801ab6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab6e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d108      	bne.n	801ab88 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801ab76:	69bb      	ldr	r3, [r7, #24]
 801ab78:	69da      	ldr	r2, [r3, #28]
 801ab7a:	693b      	ldr	r3, [r7, #16]
 801ab7c:	4013      	ands	r3, r2
 801ab7e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801ab86:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801ab88:	210a      	movs	r1, #10
 801ab8a:	69b8      	ldr	r0, [r7, #24]
 801ab8c:	f000 faa0 	bl	801b0d0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801ab90:	69bb      	ldr	r3, [r7, #24]
 801ab92:	f103 011c 	add.w	r1, r3, #28
 801ab96:	f107 030c 	add.w	r3, r7, #12
 801ab9a:	f107 0210 	add.w	r2, r7, #16
 801ab9e:	6878      	ldr	r0, [r7, #4]
 801aba0:	f7f7 face 	bl	8012140 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801aba4:	3720      	adds	r7, #32
 801aba6:	46bd      	mov	sp, r7
 801aba8:	bd80      	pop	{r7, pc}
 801abaa:	bf00      	nop
 801abac:	08024550 	.word	0x08024550
 801abb0:	080246b0 	.word	0x080246b0
 801abb4:	080245b0 	.word	0x080245b0
 801abb8:	080246cc 	.word	0x080246cc
 801abbc:	88888889 	.word	0x88888889

0801abc0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b08a      	sub	sp, #40	; 0x28
 801abc4:	af02      	add	r7, sp, #8
 801abc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abcc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801abce:	2105      	movs	r1, #5
 801abd0:	69b8      	ldr	r0, [r7, #24]
 801abd2:	f000 fa7d 	bl	801b0d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801abd6:	f107 030c 	add.w	r3, r7, #12
 801abda:	2203      	movs	r2, #3
 801abdc:	69b9      	ldr	r1, [r7, #24]
 801abde:	6878      	ldr	r0, [r7, #4]
 801abe0:	f000 ff02 	bl	801b9e8 <dhcp_create_msg>
 801abe4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801abe6:	697b      	ldr	r3, [r7, #20]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d04e      	beq.n	801ac8a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801abec:	697b      	ldr	r3, [r7, #20]
 801abee:	685b      	ldr	r3, [r3, #4]
 801abf0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801abf2:	89b8      	ldrh	r0, [r7, #12]
 801abf4:	693b      	ldr	r3, [r7, #16]
 801abf6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801abfa:	2302      	movs	r3, #2
 801abfc:	2239      	movs	r2, #57	; 0x39
 801abfe:	f000 fa81 	bl	801b104 <dhcp_option>
 801ac02:	4603      	mov	r3, r0
 801ac04:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ac06:	89b8      	ldrh	r0, [r7, #12]
 801ac08:	693b      	ldr	r3, [r7, #16]
 801ac0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ac12:	461a      	mov	r2, r3
 801ac14:	f000 fad0 	bl	801b1b8 <dhcp_option_short>
 801ac18:	4603      	mov	r3, r0
 801ac1a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ac1c:	89b8      	ldrh	r0, [r7, #12]
 801ac1e:	693b      	ldr	r3, [r7, #16]
 801ac20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ac24:	2303      	movs	r3, #3
 801ac26:	2237      	movs	r2, #55	; 0x37
 801ac28:	f000 fa6c 	bl	801b104 <dhcp_option>
 801ac2c:	4603      	mov	r3, r0
 801ac2e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ac30:	2300      	movs	r3, #0
 801ac32:	77bb      	strb	r3, [r7, #30]
 801ac34:	e00e      	b.n	801ac54 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ac36:	89b8      	ldrh	r0, [r7, #12]
 801ac38:	693b      	ldr	r3, [r7, #16]
 801ac3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ac3e:	7fbb      	ldrb	r3, [r7, #30]
 801ac40:	4a2a      	ldr	r2, [pc, #168]	; (801acec <dhcp_renew+0x12c>)
 801ac42:	5cd3      	ldrb	r3, [r2, r3]
 801ac44:	461a      	mov	r2, r3
 801ac46:	f000 fa91 	bl	801b16c <dhcp_option_byte>
 801ac4a:	4603      	mov	r3, r0
 801ac4c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ac4e:	7fbb      	ldrb	r3, [r7, #30]
 801ac50:	3301      	adds	r3, #1
 801ac52:	77bb      	strb	r3, [r7, #30]
 801ac54:	7fbb      	ldrb	r3, [r7, #30]
 801ac56:	2b02      	cmp	r3, #2
 801ac58:	d9ed      	bls.n	801ac36 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ac5a:	89b8      	ldrh	r0, [r7, #12]
 801ac5c:	693b      	ldr	r3, [r7, #16]
 801ac5e:	33f0      	adds	r3, #240	; 0xf0
 801ac60:	697a      	ldr	r2, [r7, #20]
 801ac62:	4619      	mov	r1, r3
 801ac64:	f000 ff96 	bl	801bb94 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ac68:	4b21      	ldr	r3, [pc, #132]	; (801acf0 <dhcp_renew+0x130>)
 801ac6a:	6818      	ldr	r0, [r3, #0]
 801ac6c:	69bb      	ldr	r3, [r7, #24]
 801ac6e:	f103 0218 	add.w	r2, r3, #24
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	9300      	str	r3, [sp, #0]
 801ac76:	2343      	movs	r3, #67	; 0x43
 801ac78:	6979      	ldr	r1, [r7, #20]
 801ac7a:	f7fe fe2d 	bl	80198d8 <udp_sendto_if>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801ac82:	6978      	ldr	r0, [r7, #20]
 801ac84:	f7f7 ffa2 	bl	8012bcc <pbuf_free>
 801ac88:	e001      	b.n	801ac8e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801ac8a:	23ff      	movs	r3, #255	; 0xff
 801ac8c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801ac8e:	69bb      	ldr	r3, [r7, #24]
 801ac90:	799b      	ldrb	r3, [r3, #6]
 801ac92:	2bff      	cmp	r3, #255	; 0xff
 801ac94:	d005      	beq.n	801aca2 <dhcp_renew+0xe2>
    dhcp->tries++;
 801ac96:	69bb      	ldr	r3, [r7, #24]
 801ac98:	799b      	ldrb	r3, [r3, #6]
 801ac9a:	3301      	adds	r3, #1
 801ac9c:	b2da      	uxtb	r2, r3
 801ac9e:	69bb      	ldr	r3, [r7, #24]
 801aca0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801aca2:	69bb      	ldr	r3, [r7, #24]
 801aca4:	799b      	ldrb	r3, [r3, #6]
 801aca6:	2b09      	cmp	r3, #9
 801aca8:	d80a      	bhi.n	801acc0 <dhcp_renew+0x100>
 801acaa:	69bb      	ldr	r3, [r7, #24]
 801acac:	799b      	ldrb	r3, [r3, #6]
 801acae:	b29b      	uxth	r3, r3
 801acb0:	461a      	mov	r2, r3
 801acb2:	0152      	lsls	r2, r2, #5
 801acb4:	1ad2      	subs	r2, r2, r3
 801acb6:	0092      	lsls	r2, r2, #2
 801acb8:	4413      	add	r3, r2
 801acba:	011b      	lsls	r3, r3, #4
 801acbc:	b29b      	uxth	r3, r3
 801acbe:	e001      	b.n	801acc4 <dhcp_renew+0x104>
 801acc0:	f644 6320 	movw	r3, #20000	; 0x4e20
 801acc4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801acc6:	89fb      	ldrh	r3, [r7, #14]
 801acc8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801accc:	4a09      	ldr	r2, [pc, #36]	; (801acf4 <dhcp_renew+0x134>)
 801acce:	fb82 1203 	smull	r1, r2, r2, r3
 801acd2:	1152      	asrs	r2, r2, #5
 801acd4:	17db      	asrs	r3, r3, #31
 801acd6:	1ad3      	subs	r3, r2, r3
 801acd8:	b29a      	uxth	r2, r3
 801acda:	69bb      	ldr	r3, [r7, #24]
 801acdc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801acde:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ace2:	4618      	mov	r0, r3
 801ace4:	3720      	adds	r7, #32
 801ace6:	46bd      	mov	sp, r7
 801ace8:	bd80      	pop	{r7, pc}
 801acea:	bf00      	nop
 801acec:	20000030 	.word	0x20000030
 801acf0:	20010254 	.word	0x20010254
 801acf4:	10624dd3 	.word	0x10624dd3

0801acf8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801acf8:	b580      	push	{r7, lr}
 801acfa:	b08a      	sub	sp, #40	; 0x28
 801acfc:	af02      	add	r7, sp, #8
 801acfe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad04:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801ad06:	2104      	movs	r1, #4
 801ad08:	69b8      	ldr	r0, [r7, #24]
 801ad0a:	f000 f9e1 	bl	801b0d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ad0e:	f107 030c 	add.w	r3, r7, #12
 801ad12:	2203      	movs	r2, #3
 801ad14:	69b9      	ldr	r1, [r7, #24]
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	f000 fe66 	bl	801b9e8 <dhcp_create_msg>
 801ad1c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ad1e:	697b      	ldr	r3, [r7, #20]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d04c      	beq.n	801adbe <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ad24:	697b      	ldr	r3, [r7, #20]
 801ad26:	685b      	ldr	r3, [r3, #4]
 801ad28:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ad2a:	89b8      	ldrh	r0, [r7, #12]
 801ad2c:	693b      	ldr	r3, [r7, #16]
 801ad2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ad32:	2302      	movs	r3, #2
 801ad34:	2239      	movs	r2, #57	; 0x39
 801ad36:	f000 f9e5 	bl	801b104 <dhcp_option>
 801ad3a:	4603      	mov	r3, r0
 801ad3c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ad3e:	89b8      	ldrh	r0, [r7, #12]
 801ad40:	693b      	ldr	r3, [r7, #16]
 801ad42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ad4a:	461a      	mov	r2, r3
 801ad4c:	f000 fa34 	bl	801b1b8 <dhcp_option_short>
 801ad50:	4603      	mov	r3, r0
 801ad52:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ad54:	89b8      	ldrh	r0, [r7, #12]
 801ad56:	693b      	ldr	r3, [r7, #16]
 801ad58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ad5c:	2303      	movs	r3, #3
 801ad5e:	2237      	movs	r2, #55	; 0x37
 801ad60:	f000 f9d0 	bl	801b104 <dhcp_option>
 801ad64:	4603      	mov	r3, r0
 801ad66:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ad68:	2300      	movs	r3, #0
 801ad6a:	77bb      	strb	r3, [r7, #30]
 801ad6c:	e00e      	b.n	801ad8c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ad6e:	89b8      	ldrh	r0, [r7, #12]
 801ad70:	693b      	ldr	r3, [r7, #16]
 801ad72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ad76:	7fbb      	ldrb	r3, [r7, #30]
 801ad78:	4a29      	ldr	r2, [pc, #164]	; (801ae20 <dhcp_rebind+0x128>)
 801ad7a:	5cd3      	ldrb	r3, [r2, r3]
 801ad7c:	461a      	mov	r2, r3
 801ad7e:	f000 f9f5 	bl	801b16c <dhcp_option_byte>
 801ad82:	4603      	mov	r3, r0
 801ad84:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ad86:	7fbb      	ldrb	r3, [r7, #30]
 801ad88:	3301      	adds	r3, #1
 801ad8a:	77bb      	strb	r3, [r7, #30]
 801ad8c:	7fbb      	ldrb	r3, [r7, #30]
 801ad8e:	2b02      	cmp	r3, #2
 801ad90:	d9ed      	bls.n	801ad6e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ad92:	89b8      	ldrh	r0, [r7, #12]
 801ad94:	693b      	ldr	r3, [r7, #16]
 801ad96:	33f0      	adds	r3, #240	; 0xf0
 801ad98:	697a      	ldr	r2, [r7, #20]
 801ad9a:	4619      	mov	r1, r3
 801ad9c:	f000 fefa 	bl	801bb94 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ada0:	4b20      	ldr	r3, [pc, #128]	; (801ae24 <dhcp_rebind+0x12c>)
 801ada2:	6818      	ldr	r0, [r3, #0]
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	9300      	str	r3, [sp, #0]
 801ada8:	2343      	movs	r3, #67	; 0x43
 801adaa:	4a1f      	ldr	r2, [pc, #124]	; (801ae28 <dhcp_rebind+0x130>)
 801adac:	6979      	ldr	r1, [r7, #20]
 801adae:	f7fe fd93 	bl	80198d8 <udp_sendto_if>
 801adb2:	4603      	mov	r3, r0
 801adb4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801adb6:	6978      	ldr	r0, [r7, #20]
 801adb8:	f7f7 ff08 	bl	8012bcc <pbuf_free>
 801adbc:	e001      	b.n	801adc2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801adbe:	23ff      	movs	r3, #255	; 0xff
 801adc0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801adc2:	69bb      	ldr	r3, [r7, #24]
 801adc4:	799b      	ldrb	r3, [r3, #6]
 801adc6:	2bff      	cmp	r3, #255	; 0xff
 801adc8:	d005      	beq.n	801add6 <dhcp_rebind+0xde>
    dhcp->tries++;
 801adca:	69bb      	ldr	r3, [r7, #24]
 801adcc:	799b      	ldrb	r3, [r3, #6]
 801adce:	3301      	adds	r3, #1
 801add0:	b2da      	uxtb	r2, r3
 801add2:	69bb      	ldr	r3, [r7, #24]
 801add4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801add6:	69bb      	ldr	r3, [r7, #24]
 801add8:	799b      	ldrb	r3, [r3, #6]
 801adda:	2b09      	cmp	r3, #9
 801addc:	d80a      	bhi.n	801adf4 <dhcp_rebind+0xfc>
 801adde:	69bb      	ldr	r3, [r7, #24]
 801ade0:	799b      	ldrb	r3, [r3, #6]
 801ade2:	b29b      	uxth	r3, r3
 801ade4:	461a      	mov	r2, r3
 801ade6:	0152      	lsls	r2, r2, #5
 801ade8:	1ad2      	subs	r2, r2, r3
 801adea:	0092      	lsls	r2, r2, #2
 801adec:	4413      	add	r3, r2
 801adee:	00db      	lsls	r3, r3, #3
 801adf0:	b29b      	uxth	r3, r3
 801adf2:	e001      	b.n	801adf8 <dhcp_rebind+0x100>
 801adf4:	f242 7310 	movw	r3, #10000	; 0x2710
 801adf8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801adfa:	89fb      	ldrh	r3, [r7, #14]
 801adfc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ae00:	4a0a      	ldr	r2, [pc, #40]	; (801ae2c <dhcp_rebind+0x134>)
 801ae02:	fb82 1203 	smull	r1, r2, r2, r3
 801ae06:	1152      	asrs	r2, r2, #5
 801ae08:	17db      	asrs	r3, r3, #31
 801ae0a:	1ad3      	subs	r3, r2, r3
 801ae0c:	b29a      	uxth	r2, r3
 801ae0e:	69bb      	ldr	r3, [r7, #24]
 801ae10:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ae12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ae16:	4618      	mov	r0, r3
 801ae18:	3720      	adds	r7, #32
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	bd80      	pop	{r7, pc}
 801ae1e:	bf00      	nop
 801ae20:	20000030 	.word	0x20000030
 801ae24:	20010254 	.word	0x20010254
 801ae28:	080251ec 	.word	0x080251ec
 801ae2c:	10624dd3 	.word	0x10624dd3

0801ae30 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801ae30:	b5b0      	push	{r4, r5, r7, lr}
 801ae32:	b08a      	sub	sp, #40	; 0x28
 801ae34:	af02      	add	r7, sp, #8
 801ae36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae3c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801ae3e:	2103      	movs	r1, #3
 801ae40:	69b8      	ldr	r0, [r7, #24]
 801ae42:	f000 f945 	bl	801b0d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ae46:	f107 030c 	add.w	r3, r7, #12
 801ae4a:	2203      	movs	r2, #3
 801ae4c:	69b9      	ldr	r1, [r7, #24]
 801ae4e:	6878      	ldr	r0, [r7, #4]
 801ae50:	f000 fdca 	bl	801b9e8 <dhcp_create_msg>
 801ae54:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ae56:	697b      	ldr	r3, [r7, #20]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d066      	beq.n	801af2a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ae5c:	697b      	ldr	r3, [r7, #20]
 801ae5e:	685b      	ldr	r3, [r3, #4]
 801ae60:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ae62:	89b8      	ldrh	r0, [r7, #12]
 801ae64:	693b      	ldr	r3, [r7, #16]
 801ae66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ae6a:	2302      	movs	r3, #2
 801ae6c:	2239      	movs	r2, #57	; 0x39
 801ae6e:	f000 f949 	bl	801b104 <dhcp_option>
 801ae72:	4603      	mov	r3, r0
 801ae74:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801ae76:	89b8      	ldrh	r0, [r7, #12]
 801ae78:	693b      	ldr	r3, [r7, #16]
 801ae7a:	33f0      	adds	r3, #240	; 0xf0
 801ae7c:	f44f 7210 	mov.w	r2, #576	; 0x240
 801ae80:	4619      	mov	r1, r3
 801ae82:	f000 f999 	bl	801b1b8 <dhcp_option_short>
 801ae86:	4603      	mov	r3, r0
 801ae88:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801ae8a:	89b8      	ldrh	r0, [r7, #12]
 801ae8c:	693b      	ldr	r3, [r7, #16]
 801ae8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ae92:	2304      	movs	r3, #4
 801ae94:	2232      	movs	r2, #50	; 0x32
 801ae96:	f000 f935 	bl	801b104 <dhcp_option>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801ae9e:	89bc      	ldrh	r4, [r7, #12]
 801aea0:	693b      	ldr	r3, [r7, #16]
 801aea2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801aea6:	69bb      	ldr	r3, [r7, #24]
 801aea8:	69db      	ldr	r3, [r3, #28]
 801aeaa:	4618      	mov	r0, r3
 801aeac:	f7f6 fa6d 	bl	801138a <lwip_htonl>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	461a      	mov	r2, r3
 801aeb4:	4629      	mov	r1, r5
 801aeb6:	4620      	mov	r0, r4
 801aeb8:	f000 f9b0 	bl	801b21c <dhcp_option_long>
 801aebc:	4603      	mov	r3, r0
 801aebe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801aec0:	89b8      	ldrh	r0, [r7, #12]
 801aec2:	693b      	ldr	r3, [r7, #16]
 801aec4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aec8:	2303      	movs	r3, #3
 801aeca:	2237      	movs	r2, #55	; 0x37
 801aecc:	f000 f91a 	bl	801b104 <dhcp_option>
 801aed0:	4603      	mov	r3, r0
 801aed2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aed4:	2300      	movs	r3, #0
 801aed6:	77bb      	strb	r3, [r7, #30]
 801aed8:	e00e      	b.n	801aef8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801aeda:	89b8      	ldrh	r0, [r7, #12]
 801aedc:	693b      	ldr	r3, [r7, #16]
 801aede:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aee2:	7fbb      	ldrb	r3, [r7, #30]
 801aee4:	4a29      	ldr	r2, [pc, #164]	; (801af8c <dhcp_reboot+0x15c>)
 801aee6:	5cd3      	ldrb	r3, [r2, r3]
 801aee8:	461a      	mov	r2, r3
 801aeea:	f000 f93f 	bl	801b16c <dhcp_option_byte>
 801aeee:	4603      	mov	r3, r0
 801aef0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aef2:	7fbb      	ldrb	r3, [r7, #30]
 801aef4:	3301      	adds	r3, #1
 801aef6:	77bb      	strb	r3, [r7, #30]
 801aef8:	7fbb      	ldrb	r3, [r7, #30]
 801aefa:	2b02      	cmp	r3, #2
 801aefc:	d9ed      	bls.n	801aeda <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801aefe:	89b8      	ldrh	r0, [r7, #12]
 801af00:	693b      	ldr	r3, [r7, #16]
 801af02:	33f0      	adds	r3, #240	; 0xf0
 801af04:	697a      	ldr	r2, [r7, #20]
 801af06:	4619      	mov	r1, r3
 801af08:	f000 fe44 	bl	801bb94 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801af0c:	4b20      	ldr	r3, [pc, #128]	; (801af90 <dhcp_reboot+0x160>)
 801af0e:	6818      	ldr	r0, [r3, #0]
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	9300      	str	r3, [sp, #0]
 801af14:	2343      	movs	r3, #67	; 0x43
 801af16:	4a1f      	ldr	r2, [pc, #124]	; (801af94 <dhcp_reboot+0x164>)
 801af18:	6979      	ldr	r1, [r7, #20]
 801af1a:	f7fe fcdd 	bl	80198d8 <udp_sendto_if>
 801af1e:	4603      	mov	r3, r0
 801af20:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801af22:	6978      	ldr	r0, [r7, #20]
 801af24:	f7f7 fe52 	bl	8012bcc <pbuf_free>
 801af28:	e001      	b.n	801af2e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801af2a:	23ff      	movs	r3, #255	; 0xff
 801af2c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801af2e:	69bb      	ldr	r3, [r7, #24]
 801af30:	799b      	ldrb	r3, [r3, #6]
 801af32:	2bff      	cmp	r3, #255	; 0xff
 801af34:	d005      	beq.n	801af42 <dhcp_reboot+0x112>
    dhcp->tries++;
 801af36:	69bb      	ldr	r3, [r7, #24]
 801af38:	799b      	ldrb	r3, [r3, #6]
 801af3a:	3301      	adds	r3, #1
 801af3c:	b2da      	uxtb	r2, r3
 801af3e:	69bb      	ldr	r3, [r7, #24]
 801af40:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801af42:	69bb      	ldr	r3, [r7, #24]
 801af44:	799b      	ldrb	r3, [r3, #6]
 801af46:	2b09      	cmp	r3, #9
 801af48:	d80a      	bhi.n	801af60 <dhcp_reboot+0x130>
 801af4a:	69bb      	ldr	r3, [r7, #24]
 801af4c:	799b      	ldrb	r3, [r3, #6]
 801af4e:	b29b      	uxth	r3, r3
 801af50:	461a      	mov	r2, r3
 801af52:	0152      	lsls	r2, r2, #5
 801af54:	1ad2      	subs	r2, r2, r3
 801af56:	0092      	lsls	r2, r2, #2
 801af58:	4413      	add	r3, r2
 801af5a:	00db      	lsls	r3, r3, #3
 801af5c:	b29b      	uxth	r3, r3
 801af5e:	e001      	b.n	801af64 <dhcp_reboot+0x134>
 801af60:	f242 7310 	movw	r3, #10000	; 0x2710
 801af64:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801af66:	89fb      	ldrh	r3, [r7, #14]
 801af68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801af6c:	4a0a      	ldr	r2, [pc, #40]	; (801af98 <dhcp_reboot+0x168>)
 801af6e:	fb82 1203 	smull	r1, r2, r2, r3
 801af72:	1152      	asrs	r2, r2, #5
 801af74:	17db      	asrs	r3, r3, #31
 801af76:	1ad3      	subs	r3, r2, r3
 801af78:	b29a      	uxth	r2, r3
 801af7a:	69bb      	ldr	r3, [r7, #24]
 801af7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801af7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801af82:	4618      	mov	r0, r3
 801af84:	3720      	adds	r7, #32
 801af86:	46bd      	mov	sp, r7
 801af88:	bdb0      	pop	{r4, r5, r7, pc}
 801af8a:	bf00      	nop
 801af8c:	20000030 	.word	0x20000030
 801af90:	20010254 	.word	0x20010254
 801af94:	080251ec 	.word	0x080251ec
 801af98:	10624dd3 	.word	0x10624dd3

0801af9c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801af9c:	b5b0      	push	{r4, r5, r7, lr}
 801af9e:	b08a      	sub	sp, #40	; 0x28
 801afa0:	af02      	add	r7, sp, #8
 801afa2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801afa8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801afaa:	69fb      	ldr	r3, [r7, #28]
 801afac:	2b00      	cmp	r3, #0
 801afae:	f000 8084 	beq.w	801b0ba <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801afb2:	69fb      	ldr	r3, [r7, #28]
 801afb4:	795b      	ldrb	r3, [r3, #5]
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	f000 8081 	beq.w	801b0be <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801afbc:	69fb      	ldr	r3, [r7, #28]
 801afbe:	699b      	ldr	r3, [r3, #24]
 801afc0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801afc2:	69fb      	ldr	r3, [r7, #28]
 801afc4:	2200      	movs	r2, #0
 801afc6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801afc8:	69fb      	ldr	r3, [r7, #28]
 801afca:	2200      	movs	r2, #0
 801afcc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801afce:	69fb      	ldr	r3, [r7, #28]
 801afd0:	2200      	movs	r2, #0
 801afd2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801afd4:	69fb      	ldr	r3, [r7, #28]
 801afd6:	2200      	movs	r2, #0
 801afd8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801afda:	69fb      	ldr	r3, [r7, #28]
 801afdc:	2200      	movs	r2, #0
 801afde:	631a      	str	r2, [r3, #48]	; 0x30
 801afe0:	69fb      	ldr	r3, [r7, #28]
 801afe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801afe4:	69fb      	ldr	r3, [r7, #28]
 801afe6:	62da      	str	r2, [r3, #44]	; 0x2c
 801afe8:	69fb      	ldr	r3, [r7, #28]
 801afea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801afec:	69fb      	ldr	r3, [r7, #28]
 801afee:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801aff0:	69fb      	ldr	r3, [r7, #28]
 801aff2:	2200      	movs	r2, #0
 801aff4:	829a      	strh	r2, [r3, #20]
 801aff6:	69fb      	ldr	r3, [r7, #28]
 801aff8:	8a9a      	ldrh	r2, [r3, #20]
 801affa:	69fb      	ldr	r3, [r7, #28]
 801affc:	825a      	strh	r2, [r3, #18]
 801affe:	69fb      	ldr	r3, [r7, #28]
 801b000:	8a5a      	ldrh	r2, [r3, #18]
 801b002:	69fb      	ldr	r3, [r7, #28]
 801b004:	821a      	strh	r2, [r3, #16]
 801b006:	69fb      	ldr	r3, [r7, #28]
 801b008:	8a1a      	ldrh	r2, [r3, #16]
 801b00a:	69fb      	ldr	r3, [r7, #28]
 801b00c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801b00e:	6878      	ldr	r0, [r7, #4]
 801b010:	f000 fdee 	bl	801bbf0 <dhcp_supplied_address>
 801b014:	4603      	mov	r3, r0
 801b016:	2b00      	cmp	r3, #0
 801b018:	d03b      	beq.n	801b092 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801b01a:	f107 030e 	add.w	r3, r7, #14
 801b01e:	2207      	movs	r2, #7
 801b020:	69f9      	ldr	r1, [r7, #28]
 801b022:	6878      	ldr	r0, [r7, #4]
 801b024:	f000 fce0 	bl	801b9e8 <dhcp_create_msg>
 801b028:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801b02a:	69bb      	ldr	r3, [r7, #24]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d030      	beq.n	801b092 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b030:	69bb      	ldr	r3, [r7, #24]
 801b032:	685b      	ldr	r3, [r3, #4]
 801b034:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801b036:	89f8      	ldrh	r0, [r7, #14]
 801b038:	697b      	ldr	r3, [r7, #20]
 801b03a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b03e:	2304      	movs	r3, #4
 801b040:	2236      	movs	r2, #54	; 0x36
 801b042:	f000 f85f 	bl	801b104 <dhcp_option>
 801b046:	4603      	mov	r3, r0
 801b048:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801b04a:	89fc      	ldrh	r4, [r7, #14]
 801b04c:	697b      	ldr	r3, [r7, #20]
 801b04e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b052:	693b      	ldr	r3, [r7, #16]
 801b054:	4618      	mov	r0, r3
 801b056:	f7f6 f998 	bl	801138a <lwip_htonl>
 801b05a:	4603      	mov	r3, r0
 801b05c:	461a      	mov	r2, r3
 801b05e:	4629      	mov	r1, r5
 801b060:	4620      	mov	r0, r4
 801b062:	f000 f8db 	bl	801b21c <dhcp_option_long>
 801b066:	4603      	mov	r3, r0
 801b068:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b06a:	89f8      	ldrh	r0, [r7, #14]
 801b06c:	697b      	ldr	r3, [r7, #20]
 801b06e:	33f0      	adds	r3, #240	; 0xf0
 801b070:	69ba      	ldr	r2, [r7, #24]
 801b072:	4619      	mov	r1, r3
 801b074:	f000 fd8e 	bl	801bb94 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801b078:	4b13      	ldr	r3, [pc, #76]	; (801b0c8 <dhcp_release_and_stop+0x12c>)
 801b07a:	6818      	ldr	r0, [r3, #0]
 801b07c:	f107 0210 	add.w	r2, r7, #16
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	9300      	str	r3, [sp, #0]
 801b084:	2343      	movs	r3, #67	; 0x43
 801b086:	69b9      	ldr	r1, [r7, #24]
 801b088:	f7fe fc26 	bl	80198d8 <udp_sendto_if>
      pbuf_free(p_out);
 801b08c:	69b8      	ldr	r0, [r7, #24]
 801b08e:	f7f7 fd9d 	bl	8012bcc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801b092:	4b0e      	ldr	r3, [pc, #56]	; (801b0cc <dhcp_release_and_stop+0x130>)
 801b094:	4a0d      	ldr	r2, [pc, #52]	; (801b0cc <dhcp_release_and_stop+0x130>)
 801b096:	490d      	ldr	r1, [pc, #52]	; (801b0cc <dhcp_release_and_stop+0x130>)
 801b098:	6878      	ldr	r0, [r7, #4]
 801b09a:	f7f7 f851 	bl	8012140 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801b09e:	2100      	movs	r1, #0
 801b0a0:	69f8      	ldr	r0, [r7, #28]
 801b0a2:	f000 f815 	bl	801b0d0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801b0a6:	69fb      	ldr	r3, [r7, #28]
 801b0a8:	791b      	ldrb	r3, [r3, #4]
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	d008      	beq.n	801b0c0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801b0ae:	f7fe ff85 	bl	8019fbc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801b0b2:	69fb      	ldr	r3, [r7, #28]
 801b0b4:	2200      	movs	r2, #0
 801b0b6:	711a      	strb	r2, [r3, #4]
 801b0b8:	e002      	b.n	801b0c0 <dhcp_release_and_stop+0x124>
    return;
 801b0ba:	bf00      	nop
 801b0bc:	e000      	b.n	801b0c0 <dhcp_release_and_stop+0x124>
    return;
 801b0be:	bf00      	nop
  }
}
 801b0c0:	3720      	adds	r7, #32
 801b0c2:	46bd      	mov	sp, r7
 801b0c4:	bdb0      	pop	{r4, r5, r7, pc}
 801b0c6:	bf00      	nop
 801b0c8:	20010254 	.word	0x20010254
 801b0cc:	080251e8 	.word	0x080251e8

0801b0d0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801b0d0:	b480      	push	{r7}
 801b0d2:	b083      	sub	sp, #12
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	6078      	str	r0, [r7, #4]
 801b0d8:	460b      	mov	r3, r1
 801b0da:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	795b      	ldrb	r3, [r3, #5]
 801b0e0:	78fa      	ldrb	r2, [r7, #3]
 801b0e2:	429a      	cmp	r2, r3
 801b0e4:	d008      	beq.n	801b0f8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	78fa      	ldrb	r2, [r7, #3]
 801b0ea:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	2200      	movs	r2, #0
 801b0f6:	811a      	strh	r2, [r3, #8]
  }
}
 801b0f8:	bf00      	nop
 801b0fa:	370c      	adds	r7, #12
 801b0fc:	46bd      	mov	sp, r7
 801b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b102:	4770      	bx	lr

0801b104 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801b104:	b580      	push	{r7, lr}
 801b106:	b082      	sub	sp, #8
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6039      	str	r1, [r7, #0]
 801b10c:	4611      	mov	r1, r2
 801b10e:	461a      	mov	r2, r3
 801b110:	4603      	mov	r3, r0
 801b112:	80fb      	strh	r3, [r7, #6]
 801b114:	460b      	mov	r3, r1
 801b116:	717b      	strb	r3, [r7, #5]
 801b118:	4613      	mov	r3, r2
 801b11a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801b11c:	88fa      	ldrh	r2, [r7, #6]
 801b11e:	793b      	ldrb	r3, [r7, #4]
 801b120:	4413      	add	r3, r2
 801b122:	3302      	adds	r3, #2
 801b124:	2b44      	cmp	r3, #68	; 0x44
 801b126:	d906      	bls.n	801b136 <dhcp_option+0x32>
 801b128:	4b0d      	ldr	r3, [pc, #52]	; (801b160 <dhcp_option+0x5c>)
 801b12a:	f240 529a 	movw	r2, #1434	; 0x59a
 801b12e:	490d      	ldr	r1, [pc, #52]	; (801b164 <dhcp_option+0x60>)
 801b130:	480d      	ldr	r0, [pc, #52]	; (801b168 <dhcp_option+0x64>)
 801b132:	f004 fbbb 	bl	801f8ac <iprintf>
  options[options_out_len++] = option_type;
 801b136:	88fb      	ldrh	r3, [r7, #6]
 801b138:	1c5a      	adds	r2, r3, #1
 801b13a:	80fa      	strh	r2, [r7, #6]
 801b13c:	461a      	mov	r2, r3
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	4413      	add	r3, r2
 801b142:	797a      	ldrb	r2, [r7, #5]
 801b144:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801b146:	88fb      	ldrh	r3, [r7, #6]
 801b148:	1c5a      	adds	r2, r3, #1
 801b14a:	80fa      	strh	r2, [r7, #6]
 801b14c:	461a      	mov	r2, r3
 801b14e:	683b      	ldr	r3, [r7, #0]
 801b150:	4413      	add	r3, r2
 801b152:	793a      	ldrb	r2, [r7, #4]
 801b154:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b156:	88fb      	ldrh	r3, [r7, #6]
}
 801b158:	4618      	mov	r0, r3
 801b15a:	3708      	adds	r7, #8
 801b15c:	46bd      	mov	sp, r7
 801b15e:	bd80      	pop	{r7, pc}
 801b160:	08024550 	.word	0x08024550
 801b164:	080246e4 	.word	0x080246e4
 801b168:	080245b0 	.word	0x080245b0

0801b16c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b082      	sub	sp, #8
 801b170:	af00      	add	r7, sp, #0
 801b172:	4603      	mov	r3, r0
 801b174:	6039      	str	r1, [r7, #0]
 801b176:	80fb      	strh	r3, [r7, #6]
 801b178:	4613      	mov	r3, r2
 801b17a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801b17c:	88fb      	ldrh	r3, [r7, #6]
 801b17e:	2b43      	cmp	r3, #67	; 0x43
 801b180:	d906      	bls.n	801b190 <dhcp_option_byte+0x24>
 801b182:	4b0a      	ldr	r3, [pc, #40]	; (801b1ac <dhcp_option_byte+0x40>)
 801b184:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801b188:	4909      	ldr	r1, [pc, #36]	; (801b1b0 <dhcp_option_byte+0x44>)
 801b18a:	480a      	ldr	r0, [pc, #40]	; (801b1b4 <dhcp_option_byte+0x48>)
 801b18c:	f004 fb8e 	bl	801f8ac <iprintf>
  options[options_out_len++] = value;
 801b190:	88fb      	ldrh	r3, [r7, #6]
 801b192:	1c5a      	adds	r2, r3, #1
 801b194:	80fa      	strh	r2, [r7, #6]
 801b196:	461a      	mov	r2, r3
 801b198:	683b      	ldr	r3, [r7, #0]
 801b19a:	4413      	add	r3, r2
 801b19c:	797a      	ldrb	r2, [r7, #5]
 801b19e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b1a0:	88fb      	ldrh	r3, [r7, #6]
}
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	3708      	adds	r7, #8
 801b1a6:	46bd      	mov	sp, r7
 801b1a8:	bd80      	pop	{r7, pc}
 801b1aa:	bf00      	nop
 801b1ac:	08024550 	.word	0x08024550
 801b1b0:	08024728 	.word	0x08024728
 801b1b4:	080245b0 	.word	0x080245b0

0801b1b8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b082      	sub	sp, #8
 801b1bc:	af00      	add	r7, sp, #0
 801b1be:	4603      	mov	r3, r0
 801b1c0:	6039      	str	r1, [r7, #0]
 801b1c2:	80fb      	strh	r3, [r7, #6]
 801b1c4:	4613      	mov	r3, r2
 801b1c6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801b1c8:	88fb      	ldrh	r3, [r7, #6]
 801b1ca:	3302      	adds	r3, #2
 801b1cc:	2b44      	cmp	r3, #68	; 0x44
 801b1ce:	d906      	bls.n	801b1de <dhcp_option_short+0x26>
 801b1d0:	4b0f      	ldr	r3, [pc, #60]	; (801b210 <dhcp_option_short+0x58>)
 801b1d2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801b1d6:	490f      	ldr	r1, [pc, #60]	; (801b214 <dhcp_option_short+0x5c>)
 801b1d8:	480f      	ldr	r0, [pc, #60]	; (801b218 <dhcp_option_short+0x60>)
 801b1da:	f004 fb67 	bl	801f8ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801b1de:	88bb      	ldrh	r3, [r7, #4]
 801b1e0:	0a1b      	lsrs	r3, r3, #8
 801b1e2:	b29a      	uxth	r2, r3
 801b1e4:	88fb      	ldrh	r3, [r7, #6]
 801b1e6:	1c59      	adds	r1, r3, #1
 801b1e8:	80f9      	strh	r1, [r7, #6]
 801b1ea:	4619      	mov	r1, r3
 801b1ec:	683b      	ldr	r3, [r7, #0]
 801b1ee:	440b      	add	r3, r1
 801b1f0:	b2d2      	uxtb	r2, r2
 801b1f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801b1f4:	88fb      	ldrh	r3, [r7, #6]
 801b1f6:	1c5a      	adds	r2, r3, #1
 801b1f8:	80fa      	strh	r2, [r7, #6]
 801b1fa:	461a      	mov	r2, r3
 801b1fc:	683b      	ldr	r3, [r7, #0]
 801b1fe:	4413      	add	r3, r2
 801b200:	88ba      	ldrh	r2, [r7, #4]
 801b202:	b2d2      	uxtb	r2, r2
 801b204:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b206:	88fb      	ldrh	r3, [r7, #6]
}
 801b208:	4618      	mov	r0, r3
 801b20a:	3708      	adds	r7, #8
 801b20c:	46bd      	mov	sp, r7
 801b20e:	bd80      	pop	{r7, pc}
 801b210:	08024550 	.word	0x08024550
 801b214:	08024760 	.word	0x08024760
 801b218:	080245b0 	.word	0x080245b0

0801b21c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b084      	sub	sp, #16
 801b220:	af00      	add	r7, sp, #0
 801b222:	4603      	mov	r3, r0
 801b224:	60b9      	str	r1, [r7, #8]
 801b226:	607a      	str	r2, [r7, #4]
 801b228:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801b22a:	89fb      	ldrh	r3, [r7, #14]
 801b22c:	3304      	adds	r3, #4
 801b22e:	2b44      	cmp	r3, #68	; 0x44
 801b230:	d906      	bls.n	801b240 <dhcp_option_long+0x24>
 801b232:	4b19      	ldr	r3, [pc, #100]	; (801b298 <dhcp_option_long+0x7c>)
 801b234:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801b238:	4918      	ldr	r1, [pc, #96]	; (801b29c <dhcp_option_long+0x80>)
 801b23a:	4819      	ldr	r0, [pc, #100]	; (801b2a0 <dhcp_option_long+0x84>)
 801b23c:	f004 fb36 	bl	801f8ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	0e1a      	lsrs	r2, r3, #24
 801b244:	89fb      	ldrh	r3, [r7, #14]
 801b246:	1c59      	adds	r1, r3, #1
 801b248:	81f9      	strh	r1, [r7, #14]
 801b24a:	4619      	mov	r1, r3
 801b24c:	68bb      	ldr	r3, [r7, #8]
 801b24e:	440b      	add	r3, r1
 801b250:	b2d2      	uxtb	r2, r2
 801b252:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	0c1a      	lsrs	r2, r3, #16
 801b258:	89fb      	ldrh	r3, [r7, #14]
 801b25a:	1c59      	adds	r1, r3, #1
 801b25c:	81f9      	strh	r1, [r7, #14]
 801b25e:	4619      	mov	r1, r3
 801b260:	68bb      	ldr	r3, [r7, #8]
 801b262:	440b      	add	r3, r1
 801b264:	b2d2      	uxtb	r2, r2
 801b266:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	0a1a      	lsrs	r2, r3, #8
 801b26c:	89fb      	ldrh	r3, [r7, #14]
 801b26e:	1c59      	adds	r1, r3, #1
 801b270:	81f9      	strh	r1, [r7, #14]
 801b272:	4619      	mov	r1, r3
 801b274:	68bb      	ldr	r3, [r7, #8]
 801b276:	440b      	add	r3, r1
 801b278:	b2d2      	uxtb	r2, r2
 801b27a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801b27c:	89fb      	ldrh	r3, [r7, #14]
 801b27e:	1c5a      	adds	r2, r3, #1
 801b280:	81fa      	strh	r2, [r7, #14]
 801b282:	461a      	mov	r2, r3
 801b284:	68bb      	ldr	r3, [r7, #8]
 801b286:	4413      	add	r3, r2
 801b288:	687a      	ldr	r2, [r7, #4]
 801b28a:	b2d2      	uxtb	r2, r2
 801b28c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801b28e:	89fb      	ldrh	r3, [r7, #14]
}
 801b290:	4618      	mov	r0, r3
 801b292:	3710      	adds	r7, #16
 801b294:	46bd      	mov	sp, r7
 801b296:	bd80      	pop	{r7, pc}
 801b298:	08024550 	.word	0x08024550
 801b29c:	0802479c 	.word	0x0802479c
 801b2a0:	080245b0 	.word	0x080245b0

0801b2a4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801b2a4:	b580      	push	{r7, lr}
 801b2a6:	b090      	sub	sp, #64	; 0x40
 801b2a8:	af00      	add	r7, sp, #0
 801b2aa:	6078      	str	r0, [r7, #4]
 801b2ac:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801b2ae:	2300      	movs	r3, #0
 801b2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801b2b2:	2300      	movs	r3, #0
 801b2b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801b2b6:	2208      	movs	r2, #8
 801b2b8:	2100      	movs	r1, #0
 801b2ba:	48b5      	ldr	r0, [pc, #724]	; (801b590 <dhcp_parse_reply+0x2ec>)
 801b2bc:	f004 fc4c 	bl	801fb58 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	895b      	ldrh	r3, [r3, #10]
 801b2c4:	2b2b      	cmp	r3, #43	; 0x2b
 801b2c6:	d802      	bhi.n	801b2ce <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801b2c8:	f06f 0301 	mvn.w	r3, #1
 801b2cc:	e2a7      	b.n	801b81e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	685b      	ldr	r3, [r3, #4]
 801b2d2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801b2d4:	23f0      	movs	r3, #240	; 0xf0
 801b2d6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	891b      	ldrh	r3, [r3, #8]
 801b2dc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b2e2:	e00c      	b.n	801b2fe <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2e6:	895b      	ldrh	r3, [r3, #10]
 801b2e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b2ea:	1ad3      	subs	r3, r2, r3
 801b2ec:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2f0:	895b      	ldrh	r3, [r3, #10]
 801b2f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801b2f4:	1ad3      	subs	r3, r2, r3
 801b2f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801b2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b300:	2b00      	cmp	r3, #0
 801b302:	d004      	beq.n	801b30e <dhcp_parse_reply+0x6a>
 801b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b306:	895b      	ldrh	r3, [r3, #10]
 801b308:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801b30a:	429a      	cmp	r2, r3
 801b30c:	d2ea      	bcs.n	801b2e4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801b30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b310:	2b00      	cmp	r3, #0
 801b312:	d102      	bne.n	801b31a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801b314:	f06f 0301 	mvn.w	r3, #1
 801b318:	e281      	b.n	801b81e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801b31a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b31c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801b31e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b320:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b324:	685b      	ldr	r3, [r3, #4]
 801b326:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b328:	e239      	b.n	801b79e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801b32a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b32c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b32e:	4413      	add	r3, r2
 801b330:	781b      	ldrb	r3, [r3, #0]
 801b332:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801b334:	2300      	movs	r3, #0
 801b336:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801b33a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b33e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801b340:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b342:	3302      	adds	r3, #2
 801b344:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801b346:	8bfa      	ldrh	r2, [r7, #30]
 801b348:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b34a:	429a      	cmp	r2, r3
 801b34c:	d202      	bcs.n	801b354 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801b34e:	f06f 0301 	mvn.w	r3, #1
 801b352:	e264      	b.n	801b81e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801b354:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b356:	3301      	adds	r3, #1
 801b358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b35a:	8952      	ldrh	r2, [r2, #10]
 801b35c:	4293      	cmp	r3, r2
 801b35e:	da07      	bge.n	801b370 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801b360:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b362:	3301      	adds	r3, #1
 801b364:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b366:	4413      	add	r3, r2
 801b368:	781b      	ldrb	r3, [r3, #0]
 801b36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b36e:	e00b      	b.n	801b388 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	2b00      	cmp	r3, #0
 801b376:	d004      	beq.n	801b382 <dhcp_parse_reply+0xde>
 801b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	685b      	ldr	r3, [r3, #4]
 801b37e:	781b      	ldrb	r3, [r3, #0]
 801b380:	e000      	b.n	801b384 <dhcp_parse_reply+0xe0>
 801b382:	2300      	movs	r3, #0
 801b384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801b388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b38c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801b390:	7dfb      	ldrb	r3, [r7, #23]
 801b392:	2b3b      	cmp	r3, #59	; 0x3b
 801b394:	f200 812c 	bhi.w	801b5f0 <dhcp_parse_reply+0x34c>
 801b398:	a201      	add	r2, pc, #4	; (adr r2, 801b3a0 <dhcp_parse_reply+0xfc>)
 801b39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b39e:	bf00      	nop
 801b3a0:	0801b491 	.word	0x0801b491
 801b3a4:	0801b4a1 	.word	0x0801b4a1
 801b3a8:	0801b5f1 	.word	0x0801b5f1
 801b3ac:	0801b4c3 	.word	0x0801b4c3
 801b3b0:	0801b5f1 	.word	0x0801b5f1
 801b3b4:	0801b5f1 	.word	0x0801b5f1
 801b3b8:	0801b5f1 	.word	0x0801b5f1
 801b3bc:	0801b5f1 	.word	0x0801b5f1
 801b3c0:	0801b5f1 	.word	0x0801b5f1
 801b3c4:	0801b5f1 	.word	0x0801b5f1
 801b3c8:	0801b5f1 	.word	0x0801b5f1
 801b3cc:	0801b5f1 	.word	0x0801b5f1
 801b3d0:	0801b5f1 	.word	0x0801b5f1
 801b3d4:	0801b5f1 	.word	0x0801b5f1
 801b3d8:	0801b5f1 	.word	0x0801b5f1
 801b3dc:	0801b5f1 	.word	0x0801b5f1
 801b3e0:	0801b5f1 	.word	0x0801b5f1
 801b3e4:	0801b5f1 	.word	0x0801b5f1
 801b3e8:	0801b5f1 	.word	0x0801b5f1
 801b3ec:	0801b5f1 	.word	0x0801b5f1
 801b3f0:	0801b5f1 	.word	0x0801b5f1
 801b3f4:	0801b5f1 	.word	0x0801b5f1
 801b3f8:	0801b5f1 	.word	0x0801b5f1
 801b3fc:	0801b5f1 	.word	0x0801b5f1
 801b400:	0801b5f1 	.word	0x0801b5f1
 801b404:	0801b5f1 	.word	0x0801b5f1
 801b408:	0801b5f1 	.word	0x0801b5f1
 801b40c:	0801b5f1 	.word	0x0801b5f1
 801b410:	0801b5f1 	.word	0x0801b5f1
 801b414:	0801b5f1 	.word	0x0801b5f1
 801b418:	0801b5f1 	.word	0x0801b5f1
 801b41c:	0801b5f1 	.word	0x0801b5f1
 801b420:	0801b5f1 	.word	0x0801b5f1
 801b424:	0801b5f1 	.word	0x0801b5f1
 801b428:	0801b5f1 	.word	0x0801b5f1
 801b42c:	0801b5f1 	.word	0x0801b5f1
 801b430:	0801b5f1 	.word	0x0801b5f1
 801b434:	0801b5f1 	.word	0x0801b5f1
 801b438:	0801b5f1 	.word	0x0801b5f1
 801b43c:	0801b5f1 	.word	0x0801b5f1
 801b440:	0801b5f1 	.word	0x0801b5f1
 801b444:	0801b5f1 	.word	0x0801b5f1
 801b448:	0801b5f1 	.word	0x0801b5f1
 801b44c:	0801b5f1 	.word	0x0801b5f1
 801b450:	0801b5f1 	.word	0x0801b5f1
 801b454:	0801b5f1 	.word	0x0801b5f1
 801b458:	0801b5f1 	.word	0x0801b5f1
 801b45c:	0801b5f1 	.word	0x0801b5f1
 801b460:	0801b5f1 	.word	0x0801b5f1
 801b464:	0801b5f1 	.word	0x0801b5f1
 801b468:	0801b5f1 	.word	0x0801b5f1
 801b46c:	0801b4ef 	.word	0x0801b4ef
 801b470:	0801b511 	.word	0x0801b511
 801b474:	0801b54d 	.word	0x0801b54d
 801b478:	0801b56f 	.word	0x0801b56f
 801b47c:	0801b5f1 	.word	0x0801b5f1
 801b480:	0801b5f1 	.word	0x0801b5f1
 801b484:	0801b5f1 	.word	0x0801b5f1
 801b488:	0801b5ad 	.word	0x0801b5ad
 801b48c:	0801b5cf 	.word	0x0801b5cf
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801b490:	2300      	movs	r3, #0
 801b492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b49a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801b49e:	e0ab      	b.n	801b5f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b4a4:	2b04      	cmp	r3, #4
 801b4a6:	d009      	beq.n	801b4bc <dhcp_parse_reply+0x218>
 801b4a8:	4b3a      	ldr	r3, [pc, #232]	; (801b594 <dhcp_parse_reply+0x2f0>)
 801b4aa:	f240 622e 	movw	r2, #1582	; 0x62e
 801b4ae:	493a      	ldr	r1, [pc, #232]	; (801b598 <dhcp_parse_reply+0x2f4>)
 801b4b0:	483a      	ldr	r0, [pc, #232]	; (801b59c <dhcp_parse_reply+0x2f8>)
 801b4b2:	f004 f9fb 	bl	801f8ac <iprintf>
 801b4b6:	f06f 0305 	mvn.w	r3, #5
 801b4ba:	e1b0      	b.n	801b81e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801b4bc:	2306      	movs	r3, #6
 801b4be:	623b      	str	r3, [r7, #32]
        break;
 801b4c0:	e09a      	b.n	801b5f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801b4c2:	2304      	movs	r3, #4
 801b4c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801b4c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b4cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b4d0:	429a      	cmp	r2, r3
 801b4d2:	d209      	bcs.n	801b4e8 <dhcp_parse_reply+0x244>
 801b4d4:	4b2f      	ldr	r3, [pc, #188]	; (801b594 <dhcp_parse_reply+0x2f0>)
 801b4d6:	f240 6233 	movw	r2, #1587	; 0x633
 801b4da:	4931      	ldr	r1, [pc, #196]	; (801b5a0 <dhcp_parse_reply+0x2fc>)
 801b4dc:	482f      	ldr	r0, [pc, #188]	; (801b59c <dhcp_parse_reply+0x2f8>)
 801b4de:	f004 f9e5 	bl	801f8ac <iprintf>
 801b4e2:	f06f 0305 	mvn.w	r3, #5
 801b4e6:	e19a      	b.n	801b81e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801b4e8:	2307      	movs	r3, #7
 801b4ea:	623b      	str	r3, [r7, #32]
        break;
 801b4ec:	e084      	b.n	801b5f8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b4ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b4f2:	2b04      	cmp	r3, #4
 801b4f4:	d009      	beq.n	801b50a <dhcp_parse_reply+0x266>
 801b4f6:	4b27      	ldr	r3, [pc, #156]	; (801b594 <dhcp_parse_reply+0x2f0>)
 801b4f8:	f240 6241 	movw	r2, #1601	; 0x641
 801b4fc:	4926      	ldr	r1, [pc, #152]	; (801b598 <dhcp_parse_reply+0x2f4>)
 801b4fe:	4827      	ldr	r0, [pc, #156]	; (801b59c <dhcp_parse_reply+0x2f8>)
 801b500:	f004 f9d4 	bl	801f8ac <iprintf>
 801b504:	f06f 0305 	mvn.w	r3, #5
 801b508:	e189      	b.n	801b81e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801b50a:	2303      	movs	r3, #3
 801b50c:	623b      	str	r3, [r7, #32]
        break;
 801b50e:	e073      	b.n	801b5f8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b514:	2b01      	cmp	r3, #1
 801b516:	d009      	beq.n	801b52c <dhcp_parse_reply+0x288>
 801b518:	4b1e      	ldr	r3, [pc, #120]	; (801b594 <dhcp_parse_reply+0x2f0>)
 801b51a:	f240 624f 	movw	r2, #1615	; 0x64f
 801b51e:	4921      	ldr	r1, [pc, #132]	; (801b5a4 <dhcp_parse_reply+0x300>)
 801b520:	481e      	ldr	r0, [pc, #120]	; (801b59c <dhcp_parse_reply+0x2f8>)
 801b522:	f004 f9c3 	bl	801f8ac <iprintf>
 801b526:	f06f 0305 	mvn.w	r3, #5
 801b52a:	e178      	b.n	801b81e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801b52c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b52e:	2bf0      	cmp	r3, #240	; 0xf0
 801b530:	d009      	beq.n	801b546 <dhcp_parse_reply+0x2a2>
 801b532:	4b18      	ldr	r3, [pc, #96]	; (801b594 <dhcp_parse_reply+0x2f0>)
 801b534:	f240 6251 	movw	r2, #1617	; 0x651
 801b538:	491b      	ldr	r1, [pc, #108]	; (801b5a8 <dhcp_parse_reply+0x304>)
 801b53a:	4818      	ldr	r0, [pc, #96]	; (801b59c <dhcp_parse_reply+0x2f8>)
 801b53c:	f004 f9b6 	bl	801f8ac <iprintf>
 801b540:	f06f 0305 	mvn.w	r3, #5
 801b544:	e16b      	b.n	801b81e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801b546:	2300      	movs	r3, #0
 801b548:	623b      	str	r3, [r7, #32]
        break;
 801b54a:	e055      	b.n	801b5f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b550:	2b01      	cmp	r3, #1
 801b552:	d009      	beq.n	801b568 <dhcp_parse_reply+0x2c4>
 801b554:	4b0f      	ldr	r3, [pc, #60]	; (801b594 <dhcp_parse_reply+0x2f0>)
 801b556:	f240 6255 	movw	r2, #1621	; 0x655
 801b55a:	4912      	ldr	r1, [pc, #72]	; (801b5a4 <dhcp_parse_reply+0x300>)
 801b55c:	480f      	ldr	r0, [pc, #60]	; (801b59c <dhcp_parse_reply+0x2f8>)
 801b55e:	f004 f9a5 	bl	801f8ac <iprintf>
 801b562:	f06f 0305 	mvn.w	r3, #5
 801b566:	e15a      	b.n	801b81e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801b568:	2301      	movs	r3, #1
 801b56a:	623b      	str	r3, [r7, #32]
        break;
 801b56c:	e044      	b.n	801b5f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b56e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b572:	2b04      	cmp	r3, #4
 801b574:	d009      	beq.n	801b58a <dhcp_parse_reply+0x2e6>
 801b576:	4b07      	ldr	r3, [pc, #28]	; (801b594 <dhcp_parse_reply+0x2f0>)
 801b578:	f240 6259 	movw	r2, #1625	; 0x659
 801b57c:	4906      	ldr	r1, [pc, #24]	; (801b598 <dhcp_parse_reply+0x2f4>)
 801b57e:	4807      	ldr	r0, [pc, #28]	; (801b59c <dhcp_parse_reply+0x2f8>)
 801b580:	f004 f994 	bl	801f8ac <iprintf>
 801b584:	f06f 0305 	mvn.w	r3, #5
 801b588:	e149      	b.n	801b81e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801b58a:	2302      	movs	r3, #2
 801b58c:	623b      	str	r3, [r7, #32]
        break;
 801b58e:	e033      	b.n	801b5f8 <dhcp_parse_reply+0x354>
 801b590:	2001024c 	.word	0x2001024c
 801b594:	08024550 	.word	0x08024550
 801b598:	080247d8 	.word	0x080247d8
 801b59c:	080245b0 	.word	0x080245b0
 801b5a0:	080247e4 	.word	0x080247e4
 801b5a4:	080247f8 	.word	0x080247f8
 801b5a8:	08024804 	.word	0x08024804
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b5b0:	2b04      	cmp	r3, #4
 801b5b2:	d009      	beq.n	801b5c8 <dhcp_parse_reply+0x324>
 801b5b4:	4b9c      	ldr	r3, [pc, #624]	; (801b828 <dhcp_parse_reply+0x584>)
 801b5b6:	f240 625d 	movw	r2, #1629	; 0x65d
 801b5ba:	499c      	ldr	r1, [pc, #624]	; (801b82c <dhcp_parse_reply+0x588>)
 801b5bc:	489c      	ldr	r0, [pc, #624]	; (801b830 <dhcp_parse_reply+0x58c>)
 801b5be:	f004 f975 	bl	801f8ac <iprintf>
 801b5c2:	f06f 0305 	mvn.w	r3, #5
 801b5c6:	e12a      	b.n	801b81e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801b5c8:	2304      	movs	r3, #4
 801b5ca:	623b      	str	r3, [r7, #32]
        break;
 801b5cc:	e014      	b.n	801b5f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b5d2:	2b04      	cmp	r3, #4
 801b5d4:	d009      	beq.n	801b5ea <dhcp_parse_reply+0x346>
 801b5d6:	4b94      	ldr	r3, [pc, #592]	; (801b828 <dhcp_parse_reply+0x584>)
 801b5d8:	f240 6261 	movw	r2, #1633	; 0x661
 801b5dc:	4993      	ldr	r1, [pc, #588]	; (801b82c <dhcp_parse_reply+0x588>)
 801b5de:	4894      	ldr	r0, [pc, #592]	; (801b830 <dhcp_parse_reply+0x58c>)
 801b5e0:	f004 f964 	bl	801f8ac <iprintf>
 801b5e4:	f06f 0305 	mvn.w	r3, #5
 801b5e8:	e119      	b.n	801b81e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801b5ea:	2305      	movs	r3, #5
 801b5ec:	623b      	str	r3, [r7, #32]
        break;
 801b5ee:	e003      	b.n	801b5f8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801b5f6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801b5f8:	7dfb      	ldrb	r3, [r7, #23]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d103      	bne.n	801b606 <dhcp_parse_reply+0x362>
      offset++;
 801b5fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b600:	3301      	adds	r3, #1
 801b602:	877b      	strh	r3, [r7, #58]	; 0x3a
 801b604:	e0a1      	b.n	801b74a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801b606:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b60c:	4413      	add	r3, r2
 801b60e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801b612:	4293      	cmp	r3, r2
 801b614:	dd02      	ble.n	801b61c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801b616:	f06f 0301 	mvn.w	r3, #1
 801b61a:	e100      	b.n	801b81e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801b61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b620:	b29a      	uxth	r2, r3
 801b622:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b624:	4413      	add	r3, r2
 801b626:	b29b      	uxth	r3, r3
 801b628:	3302      	adds	r3, #2
 801b62a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801b62c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b630:	2b00      	cmp	r3, #0
 801b632:	f000 808a 	beq.w	801b74a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801b636:	2300      	movs	r3, #0
 801b638:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801b63a:	6a3b      	ldr	r3, [r7, #32]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	db02      	blt.n	801b646 <dhcp_parse_reply+0x3a2>
 801b640:	6a3b      	ldr	r3, [r7, #32]
 801b642:	2b07      	cmp	r3, #7
 801b644:	dd06      	ble.n	801b654 <dhcp_parse_reply+0x3b0>
 801b646:	4b78      	ldr	r3, [pc, #480]	; (801b828 <dhcp_parse_reply+0x584>)
 801b648:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801b64c:	4979      	ldr	r1, [pc, #484]	; (801b834 <dhcp_parse_reply+0x590>)
 801b64e:	4878      	ldr	r0, [pc, #480]	; (801b830 <dhcp_parse_reply+0x58c>)
 801b650:	f004 f92c 	bl	801f8ac <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801b654:	4a78      	ldr	r2, [pc, #480]	; (801b838 <dhcp_parse_reply+0x594>)
 801b656:	6a3b      	ldr	r3, [r7, #32]
 801b658:	4413      	add	r3, r2
 801b65a:	781b      	ldrb	r3, [r3, #0]
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d174      	bne.n	801b74a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801b660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b664:	2b04      	cmp	r3, #4
 801b666:	bf28      	it	cs
 801b668:	2304      	movcs	r3, #4
 801b66a:	b2db      	uxtb	r3, r3
 801b66c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801b66e:	8bfb      	ldrh	r3, [r7, #30]
 801b670:	8aba      	ldrh	r2, [r7, #20]
 801b672:	f107 0108 	add.w	r1, r7, #8
 801b676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b678:	f7f7 fcae 	bl	8012fd8 <pbuf_copy_partial>
 801b67c:	4603      	mov	r3, r0
 801b67e:	461a      	mov	r2, r3
 801b680:	8abb      	ldrh	r3, [r7, #20]
 801b682:	4293      	cmp	r3, r2
 801b684:	d002      	beq.n	801b68c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801b686:	f06f 0301 	mvn.w	r3, #1
 801b68a:	e0c8      	b.n	801b81e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801b68c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b690:	2b04      	cmp	r3, #4
 801b692:	d933      	bls.n	801b6fc <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801b694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b698:	f003 0303 	and.w	r3, r3, #3
 801b69c:	b2db      	uxtb	r3, r3
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d009      	beq.n	801b6b6 <dhcp_parse_reply+0x412>
 801b6a2:	4b61      	ldr	r3, [pc, #388]	; (801b828 <dhcp_parse_reply+0x584>)
 801b6a4:	f240 6281 	movw	r2, #1665	; 0x681
 801b6a8:	4964      	ldr	r1, [pc, #400]	; (801b83c <dhcp_parse_reply+0x598>)
 801b6aa:	4861      	ldr	r0, [pc, #388]	; (801b830 <dhcp_parse_reply+0x58c>)
 801b6ac:	f004 f8fe 	bl	801f8ac <iprintf>
 801b6b0:	f06f 0305 	mvn.w	r3, #5
 801b6b4:	e0b3      	b.n	801b81e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801b6b6:	4a60      	ldr	r2, [pc, #384]	; (801b838 <dhcp_parse_reply+0x594>)
 801b6b8:	6a3b      	ldr	r3, [r7, #32]
 801b6ba:	4413      	add	r3, r2
 801b6bc:	2201      	movs	r2, #1
 801b6be:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801b6c0:	68bb      	ldr	r3, [r7, #8]
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	f7f5 fe61 	bl	801138a <lwip_htonl>
 801b6c8:	4602      	mov	r2, r0
 801b6ca:	495d      	ldr	r1, [pc, #372]	; (801b840 <dhcp_parse_reply+0x59c>)
 801b6cc:	6a3b      	ldr	r3, [r7, #32]
 801b6ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801b6d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b6d6:	3b04      	subs	r3, #4
 801b6d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801b6dc:	8bfb      	ldrh	r3, [r7, #30]
 801b6de:	3304      	adds	r3, #4
 801b6e0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801b6e2:	8a7a      	ldrh	r2, [r7, #18]
 801b6e4:	8bfb      	ldrh	r3, [r7, #30]
 801b6e6:	429a      	cmp	r2, r3
 801b6e8:	d202      	bcs.n	801b6f0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801b6ea:	f06f 0301 	mvn.w	r3, #1
 801b6ee:	e096      	b.n	801b81e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801b6f0:	8a7b      	ldrh	r3, [r7, #18]
 801b6f2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801b6f4:	6a3b      	ldr	r3, [r7, #32]
 801b6f6:	3301      	adds	r3, #1
 801b6f8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801b6fa:	e79e      	b.n	801b63a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801b6fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b700:	2b04      	cmp	r3, #4
 801b702:	d106      	bne.n	801b712 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801b704:	68bb      	ldr	r3, [r7, #8]
 801b706:	4618      	mov	r0, r3
 801b708:	f7f5 fe3f 	bl	801138a <lwip_htonl>
 801b70c:	4603      	mov	r3, r0
 801b70e:	60bb      	str	r3, [r7, #8]
 801b710:	e011      	b.n	801b736 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801b712:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b716:	2b01      	cmp	r3, #1
 801b718:	d009      	beq.n	801b72e <dhcp_parse_reply+0x48a>
 801b71a:	4b43      	ldr	r3, [pc, #268]	; (801b828 <dhcp_parse_reply+0x584>)
 801b71c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801b720:	4948      	ldr	r1, [pc, #288]	; (801b844 <dhcp_parse_reply+0x5a0>)
 801b722:	4843      	ldr	r0, [pc, #268]	; (801b830 <dhcp_parse_reply+0x58c>)
 801b724:	f004 f8c2 	bl	801f8ac <iprintf>
 801b728:	f06f 0305 	mvn.w	r3, #5
 801b72c:	e077      	b.n	801b81e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801b72e:	f107 0308 	add.w	r3, r7, #8
 801b732:	781b      	ldrb	r3, [r3, #0]
 801b734:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801b736:	4a40      	ldr	r2, [pc, #256]	; (801b838 <dhcp_parse_reply+0x594>)
 801b738:	6a3b      	ldr	r3, [r7, #32]
 801b73a:	4413      	add	r3, r2
 801b73c:	2201      	movs	r2, #1
 801b73e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801b740:	68ba      	ldr	r2, [r7, #8]
 801b742:	493f      	ldr	r1, [pc, #252]	; (801b840 <dhcp_parse_reply+0x59c>)
 801b744:	6a3b      	ldr	r3, [r7, #32]
 801b746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b74c:	895b      	ldrh	r3, [r3, #10]
 801b74e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b750:	429a      	cmp	r2, r3
 801b752:	d324      	bcc.n	801b79e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b756:	895b      	ldrh	r3, [r3, #10]
 801b758:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b75a:	1ad3      	subs	r3, r2, r3
 801b75c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b760:	895b      	ldrh	r3, [r3, #10]
 801b762:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801b764:	1ad3      	subs	r3, r2, r3
 801b766:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801b768:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b76a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b76c:	429a      	cmp	r2, r3
 801b76e:	d213      	bcs.n	801b798 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d109      	bne.n	801b790 <dhcp_parse_reply+0x4ec>
 801b77c:	4b2a      	ldr	r3, [pc, #168]	; (801b828 <dhcp_parse_reply+0x584>)
 801b77e:	f240 629d 	movw	r2, #1693	; 0x69d
 801b782:	4931      	ldr	r1, [pc, #196]	; (801b848 <dhcp_parse_reply+0x5a4>)
 801b784:	482a      	ldr	r0, [pc, #168]	; (801b830 <dhcp_parse_reply+0x58c>)
 801b786:	f004 f891 	bl	801f8ac <iprintf>
 801b78a:	f06f 0305 	mvn.w	r3, #5
 801b78e:	e046      	b.n	801b81e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801b790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b792:	685b      	ldr	r3, [r3, #4]
 801b794:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b796:	e002      	b.n	801b79e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801b798:	f06f 0301 	mvn.w	r3, #1
 801b79c:	e03f      	b.n	801b81e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d00a      	beq.n	801b7ba <dhcp_parse_reply+0x516>
 801b7a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b7a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b7a8:	429a      	cmp	r2, r3
 801b7aa:	d206      	bcs.n	801b7ba <dhcp_parse_reply+0x516>
 801b7ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b7ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b7b0:	4413      	add	r3, r2
 801b7b2:	781b      	ldrb	r3, [r3, #0]
 801b7b4:	2bff      	cmp	r3, #255	; 0xff
 801b7b6:	f47f adb8 	bne.w	801b32a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801b7ba:	4b1f      	ldr	r3, [pc, #124]	; (801b838 <dhcp_parse_reply+0x594>)
 801b7bc:	781b      	ldrb	r3, [r3, #0]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d018      	beq.n	801b7f4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b7c2:	4b1f      	ldr	r3, [pc, #124]	; (801b840 <dhcp_parse_reply+0x59c>)
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b7c8:	4b1b      	ldr	r3, [pc, #108]	; (801b838 <dhcp_parse_reply+0x594>)
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	2b01      	cmp	r3, #1
 801b7d2:	d102      	bne.n	801b7da <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801b7d4:	2301      	movs	r3, #1
 801b7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b7d8:	e00c      	b.n	801b7f4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	2b02      	cmp	r3, #2
 801b7de:	d102      	bne.n	801b7e6 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801b7e0:	2301      	movs	r3, #1
 801b7e2:	62bb      	str	r3, [r7, #40]	; 0x28
 801b7e4:	e006      	b.n	801b7f4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	2b03      	cmp	r3, #3
 801b7ea:	d103      	bne.n	801b7f4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801b7ec:	2301      	movs	r3, #1
 801b7ee:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801b7f0:	2301      	movs	r3, #1
 801b7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801b7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d006      	beq.n	801b808 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801b7fa:	2300      	movs	r3, #0
 801b7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801b7fe:	236c      	movs	r3, #108	; 0x6c
 801b800:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801b802:	23ec      	movs	r3, #236	; 0xec
 801b804:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801b806:	e56a      	b.n	801b2de <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d006      	beq.n	801b81c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801b80e:	2300      	movs	r3, #0
 801b810:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801b812:	232c      	movs	r3, #44	; 0x2c
 801b814:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801b816:	236c      	movs	r3, #108	; 0x6c
 801b818:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801b81a:	e560      	b.n	801b2de <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801b81c:	2300      	movs	r3, #0
}
 801b81e:	4618      	mov	r0, r3
 801b820:	3740      	adds	r7, #64	; 0x40
 801b822:	46bd      	mov	sp, r7
 801b824:	bd80      	pop	{r7, pc}
 801b826:	bf00      	nop
 801b828:	08024550 	.word	0x08024550
 801b82c:	080247d8 	.word	0x080247d8
 801b830:	080245b0 	.word	0x080245b0
 801b834:	0802481c 	.word	0x0802481c
 801b838:	2001024c 	.word	0x2001024c
 801b83c:	08024830 	.word	0x08024830
 801b840:	2001022c 	.word	0x2001022c
 801b844:	08024848 	.word	0x08024848
 801b848:	0802485c 	.word	0x0802485c

0801b84c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801b84c:	b580      	push	{r7, lr}
 801b84e:	b08a      	sub	sp, #40	; 0x28
 801b850:	af00      	add	r7, sp, #0
 801b852:	60f8      	str	r0, [r7, #12]
 801b854:	60b9      	str	r1, [r7, #8]
 801b856:	607a      	str	r2, [r7, #4]
 801b858:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801b85a:	4b60      	ldr	r3, [pc, #384]	; (801b9dc <dhcp_recv+0x190>)
 801b85c:	685b      	ldr	r3, [r3, #4]
 801b85e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b860:	6a3b      	ldr	r3, [r7, #32]
 801b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b864:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	685b      	ldr	r3, [r3, #4]
 801b86a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801b86c:	69fb      	ldr	r3, [r7, #28]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	f000 809d 	beq.w	801b9ae <dhcp_recv+0x162>
 801b874:	69fb      	ldr	r3, [r7, #28]
 801b876:	791b      	ldrb	r3, [r3, #4]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	f000 8098 	beq.w	801b9ae <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	895b      	ldrh	r3, [r3, #10]
 801b882:	2b2b      	cmp	r3, #43	; 0x2b
 801b884:	f240 8095 	bls.w	801b9b2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801b888:	69bb      	ldr	r3, [r7, #24]
 801b88a:	781b      	ldrb	r3, [r3, #0]
 801b88c:	2b02      	cmp	r3, #2
 801b88e:	f040 8092 	bne.w	801b9b6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b892:	2300      	movs	r3, #0
 801b894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b898:	e012      	b.n	801b8c0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801b89a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b89e:	6a3a      	ldr	r2, [r7, #32]
 801b8a0:	4413      	add	r3, r2
 801b8a2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801b8a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8aa:	69b9      	ldr	r1, [r7, #24]
 801b8ac:	440b      	add	r3, r1
 801b8ae:	7f1b      	ldrb	r3, [r3, #28]
 801b8b0:	429a      	cmp	r2, r3
 801b8b2:	f040 8082 	bne.w	801b9ba <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b8b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8ba:	3301      	adds	r3, #1
 801b8bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b8c0:	6a3b      	ldr	r3, [r7, #32]
 801b8c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b8c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b8ca:	429a      	cmp	r2, r3
 801b8cc:	d203      	bcs.n	801b8d6 <dhcp_recv+0x8a>
 801b8ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8d2:	2b05      	cmp	r3, #5
 801b8d4:	d9e1      	bls.n	801b89a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801b8d6:	69bb      	ldr	r3, [r7, #24]
 801b8d8:	685b      	ldr	r3, [r3, #4]
 801b8da:	4618      	mov	r0, r3
 801b8dc:	f7f5 fd55 	bl	801138a <lwip_htonl>
 801b8e0:	4602      	mov	r2, r0
 801b8e2:	69fb      	ldr	r3, [r7, #28]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	429a      	cmp	r2, r3
 801b8e8:	d169      	bne.n	801b9be <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801b8ea:	69f9      	ldr	r1, [r7, #28]
 801b8ec:	6878      	ldr	r0, [r7, #4]
 801b8ee:	f7ff fcd9 	bl	801b2a4 <dhcp_parse_reply>
 801b8f2:	4603      	mov	r3, r0
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d164      	bne.n	801b9c2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801b8f8:	4b39      	ldr	r3, [pc, #228]	; (801b9e0 <dhcp_recv+0x194>)
 801b8fa:	785b      	ldrb	r3, [r3, #1]
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	d062      	beq.n	801b9c6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	685b      	ldr	r3, [r3, #4]
 801b904:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801b906:	4b37      	ldr	r3, [pc, #220]	; (801b9e4 <dhcp_recv+0x198>)
 801b908:	685b      	ldr	r3, [r3, #4]
 801b90a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801b90c:	7cfb      	ldrb	r3, [r7, #19]
 801b90e:	2b05      	cmp	r3, #5
 801b910:	d12a      	bne.n	801b968 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801b912:	69fb      	ldr	r3, [r7, #28]
 801b914:	795b      	ldrb	r3, [r3, #5]
 801b916:	2b01      	cmp	r3, #1
 801b918:	d112      	bne.n	801b940 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801b91a:	6979      	ldr	r1, [r7, #20]
 801b91c:	6a38      	ldr	r0, [r7, #32]
 801b91e:	f7fe fe17 	bl	801a550 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801b922:	6a3b      	ldr	r3, [r7, #32]
 801b924:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b928:	f003 0308 	and.w	r3, r3, #8
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d003      	beq.n	801b938 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801b930:	6a38      	ldr	r0, [r7, #32]
 801b932:	f7fe fb87 	bl	801a044 <dhcp_check>
 801b936:	e049      	b.n	801b9cc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801b938:	6a38      	ldr	r0, [r7, #32]
 801b93a:	f7ff f867 	bl	801aa0c <dhcp_bind>
 801b93e:	e045      	b.n	801b9cc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b940:	69fb      	ldr	r3, [r7, #28]
 801b942:	795b      	ldrb	r3, [r3, #5]
 801b944:	2b03      	cmp	r3, #3
 801b946:	d007      	beq.n	801b958 <dhcp_recv+0x10c>
 801b948:	69fb      	ldr	r3, [r7, #28]
 801b94a:	795b      	ldrb	r3, [r3, #5]
 801b94c:	2b04      	cmp	r3, #4
 801b94e:	d003      	beq.n	801b958 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801b950:	69fb      	ldr	r3, [r7, #28]
 801b952:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b954:	2b05      	cmp	r3, #5
 801b956:	d139      	bne.n	801b9cc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801b958:	6979      	ldr	r1, [r7, #20]
 801b95a:	6a38      	ldr	r0, [r7, #32]
 801b95c:	f7fe fdf8 	bl	801a550 <dhcp_handle_ack>
      dhcp_bind(netif);
 801b960:	6a38      	ldr	r0, [r7, #32]
 801b962:	f7ff f853 	bl	801aa0c <dhcp_bind>
 801b966:	e031      	b.n	801b9cc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801b968:	7cfb      	ldrb	r3, [r7, #19]
 801b96a:	2b06      	cmp	r3, #6
 801b96c:	d113      	bne.n	801b996 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b96e:	69fb      	ldr	r3, [r7, #28]
 801b970:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801b972:	2b03      	cmp	r3, #3
 801b974:	d00b      	beq.n	801b98e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b976:	69fb      	ldr	r3, [r7, #28]
 801b978:	795b      	ldrb	r3, [r3, #5]
 801b97a:	2b01      	cmp	r3, #1
 801b97c:	d007      	beq.n	801b98e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b97e:	69fb      	ldr	r3, [r7, #28]
 801b980:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b982:	2b04      	cmp	r3, #4
 801b984:	d003      	beq.n	801b98e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b986:	69fb      	ldr	r3, [r7, #28]
 801b988:	795b      	ldrb	r3, [r3, #5]
 801b98a:	2b05      	cmp	r3, #5
 801b98c:	d103      	bne.n	801b996 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801b98e:	6a38      	ldr	r0, [r7, #32]
 801b990:	f7fe fb3e 	bl	801a010 <dhcp_handle_nak>
 801b994:	e01a      	b.n	801b9cc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801b996:	7cfb      	ldrb	r3, [r7, #19]
 801b998:	2b02      	cmp	r3, #2
 801b99a:	d116      	bne.n	801b9ca <dhcp_recv+0x17e>
 801b99c:	69fb      	ldr	r3, [r7, #28]
 801b99e:	795b      	ldrb	r3, [r3, #5]
 801b9a0:	2b06      	cmp	r3, #6
 801b9a2:	d112      	bne.n	801b9ca <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801b9a4:	6979      	ldr	r1, [r7, #20]
 801b9a6:	6a38      	ldr	r0, [r7, #32]
 801b9a8:	f7fe fb80 	bl	801a0ac <dhcp_handle_offer>
 801b9ac:	e00e      	b.n	801b9cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b9ae:	bf00      	nop
 801b9b0:	e00c      	b.n	801b9cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b9b2:	bf00      	nop
 801b9b4:	e00a      	b.n	801b9cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b9b6:	bf00      	nop
 801b9b8:	e008      	b.n	801b9cc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801b9ba:	bf00      	nop
 801b9bc:	e006      	b.n	801b9cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b9be:	bf00      	nop
 801b9c0:	e004      	b.n	801b9cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b9c2:	bf00      	nop
 801b9c4:	e002      	b.n	801b9cc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b9c6:	bf00      	nop
 801b9c8:	e000      	b.n	801b9cc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801b9ca:	bf00      	nop
  pbuf_free(p);
 801b9cc:	6878      	ldr	r0, [r7, #4]
 801b9ce:	f7f7 f8fd 	bl	8012bcc <pbuf_free>
}
 801b9d2:	bf00      	nop
 801b9d4:	3728      	adds	r7, #40	; 0x28
 801b9d6:	46bd      	mov	sp, r7
 801b9d8:	bd80      	pop	{r7, pc}
 801b9da:	bf00      	nop
 801b9dc:	2000ca58 	.word	0x2000ca58
 801b9e0:	2001024c 	.word	0x2001024c
 801b9e4:	2001022c 	.word	0x2001022c

0801b9e8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b088      	sub	sp, #32
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	60f8      	str	r0, [r7, #12]
 801b9f0:	60b9      	str	r1, [r7, #8]
 801b9f2:	603b      	str	r3, [r7, #0]
 801b9f4:	4613      	mov	r3, r2
 801b9f6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	d108      	bne.n	801ba10 <dhcp_create_msg+0x28>
 801b9fe:	4b5f      	ldr	r3, [pc, #380]	; (801bb7c <dhcp_create_msg+0x194>)
 801ba00:	f240 7269 	movw	r2, #1897	; 0x769
 801ba04:	495e      	ldr	r1, [pc, #376]	; (801bb80 <dhcp_create_msg+0x198>)
 801ba06:	485f      	ldr	r0, [pc, #380]	; (801bb84 <dhcp_create_msg+0x19c>)
 801ba08:	f003 ff50 	bl	801f8ac <iprintf>
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	e0b1      	b.n	801bb74 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801ba10:	68bb      	ldr	r3, [r7, #8]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d108      	bne.n	801ba28 <dhcp_create_msg+0x40>
 801ba16:	4b59      	ldr	r3, [pc, #356]	; (801bb7c <dhcp_create_msg+0x194>)
 801ba18:	f240 726a 	movw	r2, #1898	; 0x76a
 801ba1c:	495a      	ldr	r1, [pc, #360]	; (801bb88 <dhcp_create_msg+0x1a0>)
 801ba1e:	4859      	ldr	r0, [pc, #356]	; (801bb84 <dhcp_create_msg+0x19c>)
 801ba20:	f003 ff44 	bl	801f8ac <iprintf>
 801ba24:	2300      	movs	r3, #0
 801ba26:	e0a5      	b.n	801bb74 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801ba28:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ba2c:	f44f 719a 	mov.w	r1, #308	; 0x134
 801ba30:	2036      	movs	r0, #54	; 0x36
 801ba32:	f7f6 fde7 	bl	8012604 <pbuf_alloc>
 801ba36:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801ba38:	69bb      	ldr	r3, [r7, #24]
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d101      	bne.n	801ba42 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801ba3e:	2300      	movs	r3, #0
 801ba40:	e098      	b.n	801bb74 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801ba42:	69bb      	ldr	r3, [r7, #24]
 801ba44:	895b      	ldrh	r3, [r3, #10]
 801ba46:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801ba4a:	d206      	bcs.n	801ba5a <dhcp_create_msg+0x72>
 801ba4c:	4b4b      	ldr	r3, [pc, #300]	; (801bb7c <dhcp_create_msg+0x194>)
 801ba4e:	f240 7271 	movw	r2, #1905	; 0x771
 801ba52:	494e      	ldr	r1, [pc, #312]	; (801bb8c <dhcp_create_msg+0x1a4>)
 801ba54:	484b      	ldr	r0, [pc, #300]	; (801bb84 <dhcp_create_msg+0x19c>)
 801ba56:	f003 ff29 	bl	801f8ac <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801ba5a:	79fb      	ldrb	r3, [r7, #7]
 801ba5c:	2b03      	cmp	r3, #3
 801ba5e:	d103      	bne.n	801ba68 <dhcp_create_msg+0x80>
 801ba60:	68bb      	ldr	r3, [r7, #8]
 801ba62:	795b      	ldrb	r3, [r3, #5]
 801ba64:	2b03      	cmp	r3, #3
 801ba66:	d10d      	bne.n	801ba84 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801ba68:	68bb      	ldr	r3, [r7, #8]
 801ba6a:	799b      	ldrb	r3, [r3, #6]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d105      	bne.n	801ba7c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801ba70:	f003 fd7e 	bl	801f570 <rand>
 801ba74:	4603      	mov	r3, r0
 801ba76:	461a      	mov	r2, r3
 801ba78:	4b45      	ldr	r3, [pc, #276]	; (801bb90 <dhcp_create_msg+0x1a8>)
 801ba7a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801ba7c:	4b44      	ldr	r3, [pc, #272]	; (801bb90 <dhcp_create_msg+0x1a8>)
 801ba7e:	681a      	ldr	r2, [r3, #0]
 801ba80:	68bb      	ldr	r3, [r7, #8]
 801ba82:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801ba84:	69bb      	ldr	r3, [r7, #24]
 801ba86:	685b      	ldr	r3, [r3, #4]
 801ba88:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801ba8a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801ba8e:	2100      	movs	r1, #0
 801ba90:	6978      	ldr	r0, [r7, #20]
 801ba92:	f004 f861 	bl	801fb58 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801ba96:	697b      	ldr	r3, [r7, #20]
 801ba98:	2201      	movs	r2, #1
 801ba9a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801ba9c:	697b      	ldr	r3, [r7, #20]
 801ba9e:	2201      	movs	r2, #1
 801baa0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801baa8:	697b      	ldr	r3, [r7, #20]
 801baaa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801baac:	68bb      	ldr	r3, [r7, #8]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	4618      	mov	r0, r3
 801bab2:	f7f5 fc6a 	bl	801138a <lwip_htonl>
 801bab6:	4602      	mov	r2, r0
 801bab8:	697b      	ldr	r3, [r7, #20]
 801baba:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801babc:	79fb      	ldrb	r3, [r7, #7]
 801babe:	2b08      	cmp	r3, #8
 801bac0:	d010      	beq.n	801bae4 <dhcp_create_msg+0xfc>
 801bac2:	79fb      	ldrb	r3, [r7, #7]
 801bac4:	2b04      	cmp	r3, #4
 801bac6:	d00d      	beq.n	801bae4 <dhcp_create_msg+0xfc>
 801bac8:	79fb      	ldrb	r3, [r7, #7]
 801baca:	2b07      	cmp	r3, #7
 801bacc:	d00a      	beq.n	801bae4 <dhcp_create_msg+0xfc>
 801bace:	79fb      	ldrb	r3, [r7, #7]
 801bad0:	2b03      	cmp	r3, #3
 801bad2:	d10c      	bne.n	801baee <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801bad4:	68bb      	ldr	r3, [r7, #8]
 801bad6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801bad8:	2b05      	cmp	r3, #5
 801bada:	d003      	beq.n	801bae4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801badc:	68bb      	ldr	r3, [r7, #8]
 801bade:	795b      	ldrb	r3, [r3, #5]
 801bae0:	2b04      	cmp	r3, #4
 801bae2:	d104      	bne.n	801baee <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	3304      	adds	r3, #4
 801bae8:	681a      	ldr	r2, [r3, #0]
 801baea:	697b      	ldr	r3, [r7, #20]
 801baec:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801baee:	2300      	movs	r3, #0
 801baf0:	83fb      	strh	r3, [r7, #30]
 801baf2:	e00c      	b.n	801bb0e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801baf4:	8bfa      	ldrh	r2, [r7, #30]
 801baf6:	8bfb      	ldrh	r3, [r7, #30]
 801baf8:	68f9      	ldr	r1, [r7, #12]
 801bafa:	440a      	add	r2, r1
 801bafc:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801bb00:	697a      	ldr	r2, [r7, #20]
 801bb02:	4413      	add	r3, r2
 801bb04:	460a      	mov	r2, r1
 801bb06:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801bb08:	8bfb      	ldrh	r3, [r7, #30]
 801bb0a:	3301      	adds	r3, #1
 801bb0c:	83fb      	strh	r3, [r7, #30]
 801bb0e:	8bfb      	ldrh	r3, [r7, #30]
 801bb10:	2b05      	cmp	r3, #5
 801bb12:	d9ef      	bls.n	801baf4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801bb14:	697b      	ldr	r3, [r7, #20]
 801bb16:	2200      	movs	r2, #0
 801bb18:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801bb1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801bb20:	2200      	movs	r2, #0
 801bb22:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801bb26:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801bb30:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801bb34:	2200      	movs	r2, #0
 801bb36:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801bb3a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801bb3e:	697b      	ldr	r3, [r7, #20]
 801bb40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bb44:	2301      	movs	r3, #1
 801bb46:	2235      	movs	r2, #53	; 0x35
 801bb48:	2000      	movs	r0, #0
 801bb4a:	f7ff fadb 	bl	801b104 <dhcp_option>
 801bb4e:	4603      	mov	r3, r0
 801bb50:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801bb52:	697b      	ldr	r3, [r7, #20]
 801bb54:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bb58:	79fa      	ldrb	r2, [r7, #7]
 801bb5a:	8a7b      	ldrh	r3, [r7, #18]
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f7ff fb05 	bl	801b16c <dhcp_option_byte>
 801bb62:	4603      	mov	r3, r0
 801bb64:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d002      	beq.n	801bb72 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801bb6c:	683b      	ldr	r3, [r7, #0]
 801bb6e:	8a7a      	ldrh	r2, [r7, #18]
 801bb70:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801bb72:	69bb      	ldr	r3, [r7, #24]
}
 801bb74:	4618      	mov	r0, r3
 801bb76:	3720      	adds	r7, #32
 801bb78:	46bd      	mov	sp, r7
 801bb7a:	bd80      	pop	{r7, pc}
 801bb7c:	08024550 	.word	0x08024550
 801bb80:	08024870 	.word	0x08024870
 801bb84:	080245b0 	.word	0x080245b0
 801bb88:	08024890 	.word	0x08024890
 801bb8c:	080248b0 	.word	0x080248b0
 801bb90:	2001025c 	.word	0x2001025c

0801bb94 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801bb94:	b580      	push	{r7, lr}
 801bb96:	b084      	sub	sp, #16
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	4603      	mov	r3, r0
 801bb9c:	60b9      	str	r1, [r7, #8]
 801bb9e:	607a      	str	r2, [r7, #4]
 801bba0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801bba2:	89fb      	ldrh	r3, [r7, #14]
 801bba4:	1c5a      	adds	r2, r3, #1
 801bba6:	81fa      	strh	r2, [r7, #14]
 801bba8:	461a      	mov	r2, r3
 801bbaa:	68bb      	ldr	r3, [r7, #8]
 801bbac:	4413      	add	r3, r2
 801bbae:	22ff      	movs	r2, #255	; 0xff
 801bbb0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801bbb2:	e007      	b.n	801bbc4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801bbb4:	89fb      	ldrh	r3, [r7, #14]
 801bbb6:	1c5a      	adds	r2, r3, #1
 801bbb8:	81fa      	strh	r2, [r7, #14]
 801bbba:	461a      	mov	r2, r3
 801bbbc:	68bb      	ldr	r3, [r7, #8]
 801bbbe:	4413      	add	r3, r2
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801bbc4:	89fb      	ldrh	r3, [r7, #14]
 801bbc6:	2b43      	cmp	r3, #67	; 0x43
 801bbc8:	d904      	bls.n	801bbd4 <dhcp_option_trailer+0x40>
 801bbca:	89fb      	ldrh	r3, [r7, #14]
 801bbcc:	f003 0303 	and.w	r3, r3, #3
 801bbd0:	2b00      	cmp	r3, #0
 801bbd2:	d002      	beq.n	801bbda <dhcp_option_trailer+0x46>
 801bbd4:	89fb      	ldrh	r3, [r7, #14]
 801bbd6:	2b43      	cmp	r3, #67	; 0x43
 801bbd8:	d9ec      	bls.n	801bbb4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801bbda:	89fb      	ldrh	r3, [r7, #14]
 801bbdc:	33f0      	adds	r3, #240	; 0xf0
 801bbde:	b29b      	uxth	r3, r3
 801bbe0:	4619      	mov	r1, r3
 801bbe2:	6878      	ldr	r0, [r7, #4]
 801bbe4:	f7f6 fe6c 	bl	80128c0 <pbuf_realloc>
}
 801bbe8:	bf00      	nop
 801bbea:	3710      	adds	r7, #16
 801bbec:	46bd      	mov	sp, r7
 801bbee:	bd80      	pop	{r7, pc}

0801bbf0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801bbf0:	b480      	push	{r7}
 801bbf2:	b085      	sub	sp, #20
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d017      	beq.n	801bc2e <dhcp_supplied_address+0x3e>
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc02:	2b00      	cmp	r3, #0
 801bc04:	d013      	beq.n	801bc2e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc0a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	795b      	ldrb	r3, [r3, #5]
 801bc10:	2b0a      	cmp	r3, #10
 801bc12:	d007      	beq.n	801bc24 <dhcp_supplied_address+0x34>
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	795b      	ldrb	r3, [r3, #5]
 801bc18:	2b05      	cmp	r3, #5
 801bc1a:	d003      	beq.n	801bc24 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801bc1c:	68fb      	ldr	r3, [r7, #12]
 801bc1e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801bc20:	2b04      	cmp	r3, #4
 801bc22:	d101      	bne.n	801bc28 <dhcp_supplied_address+0x38>
 801bc24:	2301      	movs	r3, #1
 801bc26:	e000      	b.n	801bc2a <dhcp_supplied_address+0x3a>
 801bc28:	2300      	movs	r3, #0
 801bc2a:	b2db      	uxtb	r3, r3
 801bc2c:	e000      	b.n	801bc30 <dhcp_supplied_address+0x40>
  }
  return 0;
 801bc2e:	2300      	movs	r3, #0
}
 801bc30:	4618      	mov	r0, r3
 801bc32:	3714      	adds	r7, #20
 801bc34:	46bd      	mov	sp, r7
 801bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc3a:	4770      	bx	lr

0801bc3c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b082      	sub	sp, #8
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801bc44:	4915      	ldr	r1, [pc, #84]	; (801bc9c <etharp_free_entry+0x60>)
 801bc46:	687a      	ldr	r2, [r7, #4]
 801bc48:	4613      	mov	r3, r2
 801bc4a:	005b      	lsls	r3, r3, #1
 801bc4c:	4413      	add	r3, r2
 801bc4e:	00db      	lsls	r3, r3, #3
 801bc50:	440b      	add	r3, r1
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d013      	beq.n	801bc80 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801bc58:	4910      	ldr	r1, [pc, #64]	; (801bc9c <etharp_free_entry+0x60>)
 801bc5a:	687a      	ldr	r2, [r7, #4]
 801bc5c:	4613      	mov	r3, r2
 801bc5e:	005b      	lsls	r3, r3, #1
 801bc60:	4413      	add	r3, r2
 801bc62:	00db      	lsls	r3, r3, #3
 801bc64:	440b      	add	r3, r1
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f7f6 ffaf 	bl	8012bcc <pbuf_free>
    arp_table[i].q = NULL;
 801bc6e:	490b      	ldr	r1, [pc, #44]	; (801bc9c <etharp_free_entry+0x60>)
 801bc70:	687a      	ldr	r2, [r7, #4]
 801bc72:	4613      	mov	r3, r2
 801bc74:	005b      	lsls	r3, r3, #1
 801bc76:	4413      	add	r3, r2
 801bc78:	00db      	lsls	r3, r3, #3
 801bc7a:	440b      	add	r3, r1
 801bc7c:	2200      	movs	r2, #0
 801bc7e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801bc80:	4906      	ldr	r1, [pc, #24]	; (801bc9c <etharp_free_entry+0x60>)
 801bc82:	687a      	ldr	r2, [r7, #4]
 801bc84:	4613      	mov	r3, r2
 801bc86:	005b      	lsls	r3, r3, #1
 801bc88:	4413      	add	r3, r2
 801bc8a:	00db      	lsls	r3, r3, #3
 801bc8c:	440b      	add	r3, r1
 801bc8e:	3314      	adds	r3, #20
 801bc90:	2200      	movs	r2, #0
 801bc92:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801bc94:	bf00      	nop
 801bc96:	3708      	adds	r7, #8
 801bc98:	46bd      	mov	sp, r7
 801bc9a:	bd80      	pop	{r7, pc}
 801bc9c:	20010260 	.word	0x20010260

0801bca0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b082      	sub	sp, #8
 801bca4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bca6:	2300      	movs	r3, #0
 801bca8:	607b      	str	r3, [r7, #4]
 801bcaa:	e096      	b.n	801bdda <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801bcac:	494f      	ldr	r1, [pc, #316]	; (801bdec <etharp_tmr+0x14c>)
 801bcae:	687a      	ldr	r2, [r7, #4]
 801bcb0:	4613      	mov	r3, r2
 801bcb2:	005b      	lsls	r3, r3, #1
 801bcb4:	4413      	add	r3, r2
 801bcb6:	00db      	lsls	r3, r3, #3
 801bcb8:	440b      	add	r3, r1
 801bcba:	3314      	adds	r3, #20
 801bcbc:	781b      	ldrb	r3, [r3, #0]
 801bcbe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801bcc0:	78fb      	ldrb	r3, [r7, #3]
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	f000 8086 	beq.w	801bdd4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801bcc8:	4948      	ldr	r1, [pc, #288]	; (801bdec <etharp_tmr+0x14c>)
 801bcca:	687a      	ldr	r2, [r7, #4]
 801bccc:	4613      	mov	r3, r2
 801bcce:	005b      	lsls	r3, r3, #1
 801bcd0:	4413      	add	r3, r2
 801bcd2:	00db      	lsls	r3, r3, #3
 801bcd4:	440b      	add	r3, r1
 801bcd6:	3312      	adds	r3, #18
 801bcd8:	881b      	ldrh	r3, [r3, #0]
 801bcda:	3301      	adds	r3, #1
 801bcdc:	b298      	uxth	r0, r3
 801bcde:	4943      	ldr	r1, [pc, #268]	; (801bdec <etharp_tmr+0x14c>)
 801bce0:	687a      	ldr	r2, [r7, #4]
 801bce2:	4613      	mov	r3, r2
 801bce4:	005b      	lsls	r3, r3, #1
 801bce6:	4413      	add	r3, r2
 801bce8:	00db      	lsls	r3, r3, #3
 801bcea:	440b      	add	r3, r1
 801bcec:	3312      	adds	r3, #18
 801bcee:	4602      	mov	r2, r0
 801bcf0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bcf2:	493e      	ldr	r1, [pc, #248]	; (801bdec <etharp_tmr+0x14c>)
 801bcf4:	687a      	ldr	r2, [r7, #4]
 801bcf6:	4613      	mov	r3, r2
 801bcf8:	005b      	lsls	r3, r3, #1
 801bcfa:	4413      	add	r3, r2
 801bcfc:	00db      	lsls	r3, r3, #3
 801bcfe:	440b      	add	r3, r1
 801bd00:	3312      	adds	r3, #18
 801bd02:	881b      	ldrh	r3, [r3, #0]
 801bd04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801bd08:	d215      	bcs.n	801bd36 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bd0a:	4938      	ldr	r1, [pc, #224]	; (801bdec <etharp_tmr+0x14c>)
 801bd0c:	687a      	ldr	r2, [r7, #4]
 801bd0e:	4613      	mov	r3, r2
 801bd10:	005b      	lsls	r3, r3, #1
 801bd12:	4413      	add	r3, r2
 801bd14:	00db      	lsls	r3, r3, #3
 801bd16:	440b      	add	r3, r1
 801bd18:	3314      	adds	r3, #20
 801bd1a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801bd1c:	2b01      	cmp	r3, #1
 801bd1e:	d10e      	bne.n	801bd3e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801bd20:	4932      	ldr	r1, [pc, #200]	; (801bdec <etharp_tmr+0x14c>)
 801bd22:	687a      	ldr	r2, [r7, #4]
 801bd24:	4613      	mov	r3, r2
 801bd26:	005b      	lsls	r3, r3, #1
 801bd28:	4413      	add	r3, r2
 801bd2a:	00db      	lsls	r3, r3, #3
 801bd2c:	440b      	add	r3, r1
 801bd2e:	3312      	adds	r3, #18
 801bd30:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801bd32:	2b04      	cmp	r3, #4
 801bd34:	d903      	bls.n	801bd3e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801bd36:	6878      	ldr	r0, [r7, #4]
 801bd38:	f7ff ff80 	bl	801bc3c <etharp_free_entry>
 801bd3c:	e04a      	b.n	801bdd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801bd3e:	492b      	ldr	r1, [pc, #172]	; (801bdec <etharp_tmr+0x14c>)
 801bd40:	687a      	ldr	r2, [r7, #4]
 801bd42:	4613      	mov	r3, r2
 801bd44:	005b      	lsls	r3, r3, #1
 801bd46:	4413      	add	r3, r2
 801bd48:	00db      	lsls	r3, r3, #3
 801bd4a:	440b      	add	r3, r1
 801bd4c:	3314      	adds	r3, #20
 801bd4e:	781b      	ldrb	r3, [r3, #0]
 801bd50:	2b03      	cmp	r3, #3
 801bd52:	d10a      	bne.n	801bd6a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801bd54:	4925      	ldr	r1, [pc, #148]	; (801bdec <etharp_tmr+0x14c>)
 801bd56:	687a      	ldr	r2, [r7, #4]
 801bd58:	4613      	mov	r3, r2
 801bd5a:	005b      	lsls	r3, r3, #1
 801bd5c:	4413      	add	r3, r2
 801bd5e:	00db      	lsls	r3, r3, #3
 801bd60:	440b      	add	r3, r1
 801bd62:	3314      	adds	r3, #20
 801bd64:	2204      	movs	r2, #4
 801bd66:	701a      	strb	r2, [r3, #0]
 801bd68:	e034      	b.n	801bdd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801bd6a:	4920      	ldr	r1, [pc, #128]	; (801bdec <etharp_tmr+0x14c>)
 801bd6c:	687a      	ldr	r2, [r7, #4]
 801bd6e:	4613      	mov	r3, r2
 801bd70:	005b      	lsls	r3, r3, #1
 801bd72:	4413      	add	r3, r2
 801bd74:	00db      	lsls	r3, r3, #3
 801bd76:	440b      	add	r3, r1
 801bd78:	3314      	adds	r3, #20
 801bd7a:	781b      	ldrb	r3, [r3, #0]
 801bd7c:	2b04      	cmp	r3, #4
 801bd7e:	d10a      	bne.n	801bd96 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801bd80:	491a      	ldr	r1, [pc, #104]	; (801bdec <etharp_tmr+0x14c>)
 801bd82:	687a      	ldr	r2, [r7, #4]
 801bd84:	4613      	mov	r3, r2
 801bd86:	005b      	lsls	r3, r3, #1
 801bd88:	4413      	add	r3, r2
 801bd8a:	00db      	lsls	r3, r3, #3
 801bd8c:	440b      	add	r3, r1
 801bd8e:	3314      	adds	r3, #20
 801bd90:	2202      	movs	r2, #2
 801bd92:	701a      	strb	r2, [r3, #0]
 801bd94:	e01e      	b.n	801bdd4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801bd96:	4915      	ldr	r1, [pc, #84]	; (801bdec <etharp_tmr+0x14c>)
 801bd98:	687a      	ldr	r2, [r7, #4]
 801bd9a:	4613      	mov	r3, r2
 801bd9c:	005b      	lsls	r3, r3, #1
 801bd9e:	4413      	add	r3, r2
 801bda0:	00db      	lsls	r3, r3, #3
 801bda2:	440b      	add	r3, r1
 801bda4:	3314      	adds	r3, #20
 801bda6:	781b      	ldrb	r3, [r3, #0]
 801bda8:	2b01      	cmp	r3, #1
 801bdaa:	d113      	bne.n	801bdd4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801bdac:	490f      	ldr	r1, [pc, #60]	; (801bdec <etharp_tmr+0x14c>)
 801bdae:	687a      	ldr	r2, [r7, #4]
 801bdb0:	4613      	mov	r3, r2
 801bdb2:	005b      	lsls	r3, r3, #1
 801bdb4:	4413      	add	r3, r2
 801bdb6:	00db      	lsls	r3, r3, #3
 801bdb8:	440b      	add	r3, r1
 801bdba:	3308      	adds	r3, #8
 801bdbc:	6818      	ldr	r0, [r3, #0]
 801bdbe:	687a      	ldr	r2, [r7, #4]
 801bdc0:	4613      	mov	r3, r2
 801bdc2:	005b      	lsls	r3, r3, #1
 801bdc4:	4413      	add	r3, r2
 801bdc6:	00db      	lsls	r3, r3, #3
 801bdc8:	4a08      	ldr	r2, [pc, #32]	; (801bdec <etharp_tmr+0x14c>)
 801bdca:	4413      	add	r3, r2
 801bdcc:	3304      	adds	r3, #4
 801bdce:	4619      	mov	r1, r3
 801bdd0:	f000 fe72 	bl	801cab8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	3301      	adds	r3, #1
 801bdd8:	607b      	str	r3, [r7, #4]
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	2b09      	cmp	r3, #9
 801bdde:	f77f af65 	ble.w	801bcac <etharp_tmr+0xc>
      }
    }
  }
}
 801bde2:	bf00      	nop
 801bde4:	bf00      	nop
 801bde6:	3708      	adds	r7, #8
 801bde8:	46bd      	mov	sp, r7
 801bdea:	bd80      	pop	{r7, pc}
 801bdec:	20010260 	.word	0x20010260

0801bdf0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b08a      	sub	sp, #40	; 0x28
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	60f8      	str	r0, [r7, #12]
 801bdf8:	460b      	mov	r3, r1
 801bdfa:	607a      	str	r2, [r7, #4]
 801bdfc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801bdfe:	230a      	movs	r3, #10
 801be00:	84fb      	strh	r3, [r7, #38]	; 0x26
 801be02:	230a      	movs	r3, #10
 801be04:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801be06:	230a      	movs	r3, #10
 801be08:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801be0a:	2300      	movs	r3, #0
 801be0c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801be0e:	230a      	movs	r3, #10
 801be10:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801be12:	2300      	movs	r3, #0
 801be14:	83bb      	strh	r3, [r7, #28]
 801be16:	2300      	movs	r3, #0
 801be18:	837b      	strh	r3, [r7, #26]
 801be1a:	2300      	movs	r3, #0
 801be1c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801be1e:	2300      	movs	r3, #0
 801be20:	843b      	strh	r3, [r7, #32]
 801be22:	e0ae      	b.n	801bf82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801be24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be28:	49a6      	ldr	r1, [pc, #664]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801be2a:	4613      	mov	r3, r2
 801be2c:	005b      	lsls	r3, r3, #1
 801be2e:	4413      	add	r3, r2
 801be30:	00db      	lsls	r3, r3, #3
 801be32:	440b      	add	r3, r1
 801be34:	3314      	adds	r3, #20
 801be36:	781b      	ldrb	r3, [r3, #0]
 801be38:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801be3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801be3e:	2b0a      	cmp	r3, #10
 801be40:	d105      	bne.n	801be4e <etharp_find_entry+0x5e>
 801be42:	7dfb      	ldrb	r3, [r7, #23]
 801be44:	2b00      	cmp	r3, #0
 801be46:	d102      	bne.n	801be4e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801be48:	8c3b      	ldrh	r3, [r7, #32]
 801be4a:	847b      	strh	r3, [r7, #34]	; 0x22
 801be4c:	e095      	b.n	801bf7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801be4e:	7dfb      	ldrb	r3, [r7, #23]
 801be50:	2b00      	cmp	r3, #0
 801be52:	f000 8092 	beq.w	801bf7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801be56:	7dfb      	ldrb	r3, [r7, #23]
 801be58:	2b01      	cmp	r3, #1
 801be5a:	d009      	beq.n	801be70 <etharp_find_entry+0x80>
 801be5c:	7dfb      	ldrb	r3, [r7, #23]
 801be5e:	2b01      	cmp	r3, #1
 801be60:	d806      	bhi.n	801be70 <etharp_find_entry+0x80>
 801be62:	4b99      	ldr	r3, [pc, #612]	; (801c0c8 <etharp_find_entry+0x2d8>)
 801be64:	f240 1223 	movw	r2, #291	; 0x123
 801be68:	4998      	ldr	r1, [pc, #608]	; (801c0cc <etharp_find_entry+0x2dc>)
 801be6a:	4899      	ldr	r0, [pc, #612]	; (801c0d0 <etharp_find_entry+0x2e0>)
 801be6c:	f003 fd1e 	bl	801f8ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	2b00      	cmp	r3, #0
 801be74:	d020      	beq.n	801beb8 <etharp_find_entry+0xc8>
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	6819      	ldr	r1, [r3, #0]
 801be7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be7e:	4891      	ldr	r0, [pc, #580]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801be80:	4613      	mov	r3, r2
 801be82:	005b      	lsls	r3, r3, #1
 801be84:	4413      	add	r3, r2
 801be86:	00db      	lsls	r3, r3, #3
 801be88:	4403      	add	r3, r0
 801be8a:	3304      	adds	r3, #4
 801be8c:	681b      	ldr	r3, [r3, #0]
 801be8e:	4299      	cmp	r1, r3
 801be90:	d112      	bne.n	801beb8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	2b00      	cmp	r3, #0
 801be96:	d00c      	beq.n	801beb2 <etharp_find_entry+0xc2>
 801be98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801be9c:	4989      	ldr	r1, [pc, #548]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801be9e:	4613      	mov	r3, r2
 801bea0:	005b      	lsls	r3, r3, #1
 801bea2:	4413      	add	r3, r2
 801bea4:	00db      	lsls	r3, r3, #3
 801bea6:	440b      	add	r3, r1
 801bea8:	3308      	adds	r3, #8
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	687a      	ldr	r2, [r7, #4]
 801beae:	429a      	cmp	r2, r3
 801beb0:	d102      	bne.n	801beb8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801beb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801beb6:	e100      	b.n	801c0ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801beb8:	7dfb      	ldrb	r3, [r7, #23]
 801beba:	2b01      	cmp	r3, #1
 801bebc:	d140      	bne.n	801bf40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801bebe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bec2:	4980      	ldr	r1, [pc, #512]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801bec4:	4613      	mov	r3, r2
 801bec6:	005b      	lsls	r3, r3, #1
 801bec8:	4413      	add	r3, r2
 801beca:	00db      	lsls	r3, r3, #3
 801becc:	440b      	add	r3, r1
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d01a      	beq.n	801bf0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801bed4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bed8:	497a      	ldr	r1, [pc, #488]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801beda:	4613      	mov	r3, r2
 801bedc:	005b      	lsls	r3, r3, #1
 801bede:	4413      	add	r3, r2
 801bee0:	00db      	lsls	r3, r3, #3
 801bee2:	440b      	add	r3, r1
 801bee4:	3312      	adds	r3, #18
 801bee6:	881b      	ldrh	r3, [r3, #0]
 801bee8:	8bba      	ldrh	r2, [r7, #28]
 801beea:	429a      	cmp	r2, r3
 801beec:	d845      	bhi.n	801bf7a <etharp_find_entry+0x18a>
            old_queue = i;
 801beee:	8c3b      	ldrh	r3, [r7, #32]
 801bef0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801bef2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bef6:	4973      	ldr	r1, [pc, #460]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801bef8:	4613      	mov	r3, r2
 801befa:	005b      	lsls	r3, r3, #1
 801befc:	4413      	add	r3, r2
 801befe:	00db      	lsls	r3, r3, #3
 801bf00:	440b      	add	r3, r1
 801bf02:	3312      	adds	r3, #18
 801bf04:	881b      	ldrh	r3, [r3, #0]
 801bf06:	83bb      	strh	r3, [r7, #28]
 801bf08:	e037      	b.n	801bf7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801bf0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf0e:	496d      	ldr	r1, [pc, #436]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801bf10:	4613      	mov	r3, r2
 801bf12:	005b      	lsls	r3, r3, #1
 801bf14:	4413      	add	r3, r2
 801bf16:	00db      	lsls	r3, r3, #3
 801bf18:	440b      	add	r3, r1
 801bf1a:	3312      	adds	r3, #18
 801bf1c:	881b      	ldrh	r3, [r3, #0]
 801bf1e:	8b7a      	ldrh	r2, [r7, #26]
 801bf20:	429a      	cmp	r2, r3
 801bf22:	d82a      	bhi.n	801bf7a <etharp_find_entry+0x18a>
            old_pending = i;
 801bf24:	8c3b      	ldrh	r3, [r7, #32]
 801bf26:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801bf28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf2c:	4965      	ldr	r1, [pc, #404]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801bf2e:	4613      	mov	r3, r2
 801bf30:	005b      	lsls	r3, r3, #1
 801bf32:	4413      	add	r3, r2
 801bf34:	00db      	lsls	r3, r3, #3
 801bf36:	440b      	add	r3, r1
 801bf38:	3312      	adds	r3, #18
 801bf3a:	881b      	ldrh	r3, [r3, #0]
 801bf3c:	837b      	strh	r3, [r7, #26]
 801bf3e:	e01c      	b.n	801bf7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801bf40:	7dfb      	ldrb	r3, [r7, #23]
 801bf42:	2b01      	cmp	r3, #1
 801bf44:	d919      	bls.n	801bf7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801bf46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf4a:	495e      	ldr	r1, [pc, #376]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801bf4c:	4613      	mov	r3, r2
 801bf4e:	005b      	lsls	r3, r3, #1
 801bf50:	4413      	add	r3, r2
 801bf52:	00db      	lsls	r3, r3, #3
 801bf54:	440b      	add	r3, r1
 801bf56:	3312      	adds	r3, #18
 801bf58:	881b      	ldrh	r3, [r3, #0]
 801bf5a:	8b3a      	ldrh	r2, [r7, #24]
 801bf5c:	429a      	cmp	r2, r3
 801bf5e:	d80c      	bhi.n	801bf7a <etharp_find_entry+0x18a>
            old_stable = i;
 801bf60:	8c3b      	ldrh	r3, [r7, #32]
 801bf62:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801bf64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bf68:	4956      	ldr	r1, [pc, #344]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801bf6a:	4613      	mov	r3, r2
 801bf6c:	005b      	lsls	r3, r3, #1
 801bf6e:	4413      	add	r3, r2
 801bf70:	00db      	lsls	r3, r3, #3
 801bf72:	440b      	add	r3, r1
 801bf74:	3312      	adds	r3, #18
 801bf76:	881b      	ldrh	r3, [r3, #0]
 801bf78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bf7a:	8c3b      	ldrh	r3, [r7, #32]
 801bf7c:	3301      	adds	r3, #1
 801bf7e:	b29b      	uxth	r3, r3
 801bf80:	843b      	strh	r3, [r7, #32]
 801bf82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bf86:	2b09      	cmp	r3, #9
 801bf88:	f77f af4c 	ble.w	801be24 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801bf8c:	7afb      	ldrb	r3, [r7, #11]
 801bf8e:	f003 0302 	and.w	r3, r3, #2
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d108      	bne.n	801bfa8 <etharp_find_entry+0x1b8>
 801bf96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bf9a:	2b0a      	cmp	r3, #10
 801bf9c:	d107      	bne.n	801bfae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801bf9e:	7afb      	ldrb	r3, [r7, #11]
 801bfa0:	f003 0301 	and.w	r3, r3, #1
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d102      	bne.n	801bfae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801bfa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bfac:	e085      	b.n	801c0ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801bfae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bfb2:	2b09      	cmp	r3, #9
 801bfb4:	dc02      	bgt.n	801bfbc <etharp_find_entry+0x1cc>
    i = empty;
 801bfb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801bfb8:	843b      	strh	r3, [r7, #32]
 801bfba:	e039      	b.n	801c030 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801bfbc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801bfc0:	2b09      	cmp	r3, #9
 801bfc2:	dc14      	bgt.n	801bfee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801bfc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bfc6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801bfc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bfcc:	493d      	ldr	r1, [pc, #244]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801bfce:	4613      	mov	r3, r2
 801bfd0:	005b      	lsls	r3, r3, #1
 801bfd2:	4413      	add	r3, r2
 801bfd4:	00db      	lsls	r3, r3, #3
 801bfd6:	440b      	add	r3, r1
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d018      	beq.n	801c010 <etharp_find_entry+0x220>
 801bfde:	4b3a      	ldr	r3, [pc, #232]	; (801c0c8 <etharp_find_entry+0x2d8>)
 801bfe0:	f240 126d 	movw	r2, #365	; 0x16d
 801bfe4:	493b      	ldr	r1, [pc, #236]	; (801c0d4 <etharp_find_entry+0x2e4>)
 801bfe6:	483a      	ldr	r0, [pc, #232]	; (801c0d0 <etharp_find_entry+0x2e0>)
 801bfe8:	f003 fc60 	bl	801f8ac <iprintf>
 801bfec:	e010      	b.n	801c010 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801bfee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801bff2:	2b09      	cmp	r3, #9
 801bff4:	dc02      	bgt.n	801bffc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801bff6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bff8:	843b      	strh	r3, [r7, #32]
 801bffa:	e009      	b.n	801c010 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801bffc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c000:	2b09      	cmp	r3, #9
 801c002:	dc02      	bgt.n	801c00a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c004:	8bfb      	ldrh	r3, [r7, #30]
 801c006:	843b      	strh	r3, [r7, #32]
 801c008:	e002      	b.n	801c010 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c00a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c00e:	e054      	b.n	801c0ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c010:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c014:	2b09      	cmp	r3, #9
 801c016:	dd06      	ble.n	801c026 <etharp_find_entry+0x236>
 801c018:	4b2b      	ldr	r3, [pc, #172]	; (801c0c8 <etharp_find_entry+0x2d8>)
 801c01a:	f240 127f 	movw	r2, #383	; 0x17f
 801c01e:	492e      	ldr	r1, [pc, #184]	; (801c0d8 <etharp_find_entry+0x2e8>)
 801c020:	482b      	ldr	r0, [pc, #172]	; (801c0d0 <etharp_find_entry+0x2e0>)
 801c022:	f003 fc43 	bl	801f8ac <iprintf>
    etharp_free_entry(i);
 801c026:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c02a:	4618      	mov	r0, r3
 801c02c:	f7ff fe06 	bl	801bc3c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c030:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c034:	2b09      	cmp	r3, #9
 801c036:	dd06      	ble.n	801c046 <etharp_find_entry+0x256>
 801c038:	4b23      	ldr	r3, [pc, #140]	; (801c0c8 <etharp_find_entry+0x2d8>)
 801c03a:	f240 1283 	movw	r2, #387	; 0x183
 801c03e:	4926      	ldr	r1, [pc, #152]	; (801c0d8 <etharp_find_entry+0x2e8>)
 801c040:	4823      	ldr	r0, [pc, #140]	; (801c0d0 <etharp_find_entry+0x2e0>)
 801c042:	f003 fc33 	bl	801f8ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c046:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c04a:	491e      	ldr	r1, [pc, #120]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801c04c:	4613      	mov	r3, r2
 801c04e:	005b      	lsls	r3, r3, #1
 801c050:	4413      	add	r3, r2
 801c052:	00db      	lsls	r3, r3, #3
 801c054:	440b      	add	r3, r1
 801c056:	3314      	adds	r3, #20
 801c058:	781b      	ldrb	r3, [r3, #0]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d006      	beq.n	801c06c <etharp_find_entry+0x27c>
 801c05e:	4b1a      	ldr	r3, [pc, #104]	; (801c0c8 <etharp_find_entry+0x2d8>)
 801c060:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801c064:	491d      	ldr	r1, [pc, #116]	; (801c0dc <etharp_find_entry+0x2ec>)
 801c066:	481a      	ldr	r0, [pc, #104]	; (801c0d0 <etharp_find_entry+0x2e0>)
 801c068:	f003 fc20 	bl	801f8ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d00b      	beq.n	801c08a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c072:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c076:	68fb      	ldr	r3, [r7, #12]
 801c078:	6819      	ldr	r1, [r3, #0]
 801c07a:	4812      	ldr	r0, [pc, #72]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801c07c:	4613      	mov	r3, r2
 801c07e:	005b      	lsls	r3, r3, #1
 801c080:	4413      	add	r3, r2
 801c082:	00db      	lsls	r3, r3, #3
 801c084:	4403      	add	r3, r0
 801c086:	3304      	adds	r3, #4
 801c088:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c08a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c08e:	490d      	ldr	r1, [pc, #52]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801c090:	4613      	mov	r3, r2
 801c092:	005b      	lsls	r3, r3, #1
 801c094:	4413      	add	r3, r2
 801c096:	00db      	lsls	r3, r3, #3
 801c098:	440b      	add	r3, r1
 801c09a:	3312      	adds	r3, #18
 801c09c:	2200      	movs	r2, #0
 801c09e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c0a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c0a4:	4907      	ldr	r1, [pc, #28]	; (801c0c4 <etharp_find_entry+0x2d4>)
 801c0a6:	4613      	mov	r3, r2
 801c0a8:	005b      	lsls	r3, r3, #1
 801c0aa:	4413      	add	r3, r2
 801c0ac:	00db      	lsls	r3, r3, #3
 801c0ae:	440b      	add	r3, r1
 801c0b0:	3308      	adds	r3, #8
 801c0b2:	687a      	ldr	r2, [r7, #4]
 801c0b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c0b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	3728      	adds	r7, #40	; 0x28
 801c0be:	46bd      	mov	sp, r7
 801c0c0:	bd80      	pop	{r7, pc}
 801c0c2:	bf00      	nop
 801c0c4:	20010260 	.word	0x20010260
 801c0c8:	080248f0 	.word	0x080248f0
 801c0cc:	08024928 	.word	0x08024928
 801c0d0:	08024968 	.word	0x08024968
 801c0d4:	08024990 	.word	0x08024990
 801c0d8:	080249a8 	.word	0x080249a8
 801c0dc:	080249bc 	.word	0x080249bc

0801c0e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c0e0:	b580      	push	{r7, lr}
 801c0e2:	b088      	sub	sp, #32
 801c0e4:	af02      	add	r7, sp, #8
 801c0e6:	60f8      	str	r0, [r7, #12]
 801c0e8:	60b9      	str	r1, [r7, #8]
 801c0ea:	607a      	str	r2, [r7, #4]
 801c0ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c0f4:	2b06      	cmp	r3, #6
 801c0f6:	d006      	beq.n	801c106 <etharp_update_arp_entry+0x26>
 801c0f8:	4b48      	ldr	r3, [pc, #288]	; (801c21c <etharp_update_arp_entry+0x13c>)
 801c0fa:	f240 12a9 	movw	r2, #425	; 0x1a9
 801c0fe:	4948      	ldr	r1, [pc, #288]	; (801c220 <etharp_update_arp_entry+0x140>)
 801c100:	4848      	ldr	r0, [pc, #288]	; (801c224 <etharp_update_arp_entry+0x144>)
 801c102:	f003 fbd3 	bl	801f8ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c106:	68bb      	ldr	r3, [r7, #8]
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d012      	beq.n	801c132 <etharp_update_arp_entry+0x52>
 801c10c:	68bb      	ldr	r3, [r7, #8]
 801c10e:	681b      	ldr	r3, [r3, #0]
 801c110:	2b00      	cmp	r3, #0
 801c112:	d00e      	beq.n	801c132 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c114:	68bb      	ldr	r3, [r7, #8]
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	68f9      	ldr	r1, [r7, #12]
 801c11a:	4618      	mov	r0, r3
 801c11c:	f001 f920 	bl	801d360 <ip4_addr_isbroadcast_u32>
 801c120:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c122:	2b00      	cmp	r3, #0
 801c124:	d105      	bne.n	801c132 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c126:	68bb      	ldr	r3, [r7, #8]
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c12e:	2be0      	cmp	r3, #224	; 0xe0
 801c130:	d102      	bne.n	801c138 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c132:	f06f 030f 	mvn.w	r3, #15
 801c136:	e06c      	b.n	801c212 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c138:	78fb      	ldrb	r3, [r7, #3]
 801c13a:	68fa      	ldr	r2, [r7, #12]
 801c13c:	4619      	mov	r1, r3
 801c13e:	68b8      	ldr	r0, [r7, #8]
 801c140:	f7ff fe56 	bl	801bdf0 <etharp_find_entry>
 801c144:	4603      	mov	r3, r0
 801c146:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c148:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	da02      	bge.n	801c156 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c150:	8afb      	ldrh	r3, [r7, #22]
 801c152:	b25b      	sxtb	r3, r3
 801c154:	e05d      	b.n	801c212 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c156:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c15a:	4933      	ldr	r1, [pc, #204]	; (801c228 <etharp_update_arp_entry+0x148>)
 801c15c:	4613      	mov	r3, r2
 801c15e:	005b      	lsls	r3, r3, #1
 801c160:	4413      	add	r3, r2
 801c162:	00db      	lsls	r3, r3, #3
 801c164:	440b      	add	r3, r1
 801c166:	3314      	adds	r3, #20
 801c168:	2202      	movs	r2, #2
 801c16a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c16c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c170:	492d      	ldr	r1, [pc, #180]	; (801c228 <etharp_update_arp_entry+0x148>)
 801c172:	4613      	mov	r3, r2
 801c174:	005b      	lsls	r3, r3, #1
 801c176:	4413      	add	r3, r2
 801c178:	00db      	lsls	r3, r3, #3
 801c17a:	440b      	add	r3, r1
 801c17c:	3308      	adds	r3, #8
 801c17e:	68fa      	ldr	r2, [r7, #12]
 801c180:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c182:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c186:	4613      	mov	r3, r2
 801c188:	005b      	lsls	r3, r3, #1
 801c18a:	4413      	add	r3, r2
 801c18c:	00db      	lsls	r3, r3, #3
 801c18e:	3308      	adds	r3, #8
 801c190:	4a25      	ldr	r2, [pc, #148]	; (801c228 <etharp_update_arp_entry+0x148>)
 801c192:	4413      	add	r3, r2
 801c194:	3304      	adds	r3, #4
 801c196:	2206      	movs	r2, #6
 801c198:	6879      	ldr	r1, [r7, #4]
 801c19a:	4618      	mov	r0, r3
 801c19c:	f003 fdeb 	bl	801fd76 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c1a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c1a4:	4920      	ldr	r1, [pc, #128]	; (801c228 <etharp_update_arp_entry+0x148>)
 801c1a6:	4613      	mov	r3, r2
 801c1a8:	005b      	lsls	r3, r3, #1
 801c1aa:	4413      	add	r3, r2
 801c1ac:	00db      	lsls	r3, r3, #3
 801c1ae:	440b      	add	r3, r1
 801c1b0:	3312      	adds	r3, #18
 801c1b2:	2200      	movs	r2, #0
 801c1b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c1b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c1ba:	491b      	ldr	r1, [pc, #108]	; (801c228 <etharp_update_arp_entry+0x148>)
 801c1bc:	4613      	mov	r3, r2
 801c1be:	005b      	lsls	r3, r3, #1
 801c1c0:	4413      	add	r3, r2
 801c1c2:	00db      	lsls	r3, r3, #3
 801c1c4:	440b      	add	r3, r1
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d021      	beq.n	801c210 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c1cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c1d0:	4915      	ldr	r1, [pc, #84]	; (801c228 <etharp_update_arp_entry+0x148>)
 801c1d2:	4613      	mov	r3, r2
 801c1d4:	005b      	lsls	r3, r3, #1
 801c1d6:	4413      	add	r3, r2
 801c1d8:	00db      	lsls	r3, r3, #3
 801c1da:	440b      	add	r3, r1
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c1e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c1e4:	4910      	ldr	r1, [pc, #64]	; (801c228 <etharp_update_arp_entry+0x148>)
 801c1e6:	4613      	mov	r3, r2
 801c1e8:	005b      	lsls	r3, r3, #1
 801c1ea:	4413      	add	r3, r2
 801c1ec:	00db      	lsls	r3, r3, #3
 801c1ee:	440b      	add	r3, r1
 801c1f0:	2200      	movs	r2, #0
 801c1f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c1fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c1fe:	9300      	str	r3, [sp, #0]
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	6939      	ldr	r1, [r7, #16]
 801c204:	68f8      	ldr	r0, [r7, #12]
 801c206:	f001 ffb9 	bl	801e17c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c20a:	6938      	ldr	r0, [r7, #16]
 801c20c:	f7f6 fcde 	bl	8012bcc <pbuf_free>
  }
  return ERR_OK;
 801c210:	2300      	movs	r3, #0
}
 801c212:	4618      	mov	r0, r3
 801c214:	3718      	adds	r7, #24
 801c216:	46bd      	mov	sp, r7
 801c218:	bd80      	pop	{r7, pc}
 801c21a:	bf00      	nop
 801c21c:	080248f0 	.word	0x080248f0
 801c220:	080249e8 	.word	0x080249e8
 801c224:	08024968 	.word	0x08024968
 801c228:	20010260 	.word	0x20010260

0801c22c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c22c:	b580      	push	{r7, lr}
 801c22e:	b084      	sub	sp, #16
 801c230:	af00      	add	r7, sp, #0
 801c232:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c234:	2300      	movs	r3, #0
 801c236:	60fb      	str	r3, [r7, #12]
 801c238:	e01e      	b.n	801c278 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c23a:	4913      	ldr	r1, [pc, #76]	; (801c288 <etharp_cleanup_netif+0x5c>)
 801c23c:	68fa      	ldr	r2, [r7, #12]
 801c23e:	4613      	mov	r3, r2
 801c240:	005b      	lsls	r3, r3, #1
 801c242:	4413      	add	r3, r2
 801c244:	00db      	lsls	r3, r3, #3
 801c246:	440b      	add	r3, r1
 801c248:	3314      	adds	r3, #20
 801c24a:	781b      	ldrb	r3, [r3, #0]
 801c24c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c24e:	7afb      	ldrb	r3, [r7, #11]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d00e      	beq.n	801c272 <etharp_cleanup_netif+0x46>
 801c254:	490c      	ldr	r1, [pc, #48]	; (801c288 <etharp_cleanup_netif+0x5c>)
 801c256:	68fa      	ldr	r2, [r7, #12]
 801c258:	4613      	mov	r3, r2
 801c25a:	005b      	lsls	r3, r3, #1
 801c25c:	4413      	add	r3, r2
 801c25e:	00db      	lsls	r3, r3, #3
 801c260:	440b      	add	r3, r1
 801c262:	3308      	adds	r3, #8
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	687a      	ldr	r2, [r7, #4]
 801c268:	429a      	cmp	r2, r3
 801c26a:	d102      	bne.n	801c272 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c26c:	68f8      	ldr	r0, [r7, #12]
 801c26e:	f7ff fce5 	bl	801bc3c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	3301      	adds	r3, #1
 801c276:	60fb      	str	r3, [r7, #12]
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	2b09      	cmp	r3, #9
 801c27c:	dddd      	ble.n	801c23a <etharp_cleanup_netif+0xe>
    }
  }
}
 801c27e:	bf00      	nop
 801c280:	bf00      	nop
 801c282:	3710      	adds	r7, #16
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}
 801c288:	20010260 	.word	0x20010260

0801c28c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c28c:	b5b0      	push	{r4, r5, r7, lr}
 801c28e:	b08a      	sub	sp, #40	; 0x28
 801c290:	af04      	add	r7, sp, #16
 801c292:	6078      	str	r0, [r7, #4]
 801c294:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c296:	683b      	ldr	r3, [r7, #0]
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d107      	bne.n	801c2ac <etharp_input+0x20>
 801c29c:	4b3f      	ldr	r3, [pc, #252]	; (801c39c <etharp_input+0x110>)
 801c29e:	f240 228a 	movw	r2, #650	; 0x28a
 801c2a2:	493f      	ldr	r1, [pc, #252]	; (801c3a0 <etharp_input+0x114>)
 801c2a4:	483f      	ldr	r0, [pc, #252]	; (801c3a4 <etharp_input+0x118>)
 801c2a6:	f003 fb01 	bl	801f8ac <iprintf>
 801c2aa:	e074      	b.n	801c396 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	685b      	ldr	r3, [r3, #4]
 801c2b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c2b2:	693b      	ldr	r3, [r7, #16]
 801c2b4:	881b      	ldrh	r3, [r3, #0]
 801c2b6:	b29b      	uxth	r3, r3
 801c2b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c2bc:	d10c      	bne.n	801c2d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c2be:	693b      	ldr	r3, [r7, #16]
 801c2c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c2c2:	2b06      	cmp	r3, #6
 801c2c4:	d108      	bne.n	801c2d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c2c6:	693b      	ldr	r3, [r7, #16]
 801c2c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c2ca:	2b04      	cmp	r3, #4
 801c2cc:	d104      	bne.n	801c2d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c2ce:	693b      	ldr	r3, [r7, #16]
 801c2d0:	885b      	ldrh	r3, [r3, #2]
 801c2d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c2d4:	2b08      	cmp	r3, #8
 801c2d6:	d003      	beq.n	801c2e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801c2d8:	6878      	ldr	r0, [r7, #4]
 801c2da:	f7f6 fc77 	bl	8012bcc <pbuf_free>
    return;
 801c2de:	e05a      	b.n	801c396 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c2e0:	693b      	ldr	r3, [r7, #16]
 801c2e2:	330e      	adds	r3, #14
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c2e8:	693b      	ldr	r3, [r7, #16]
 801c2ea:	3318      	adds	r3, #24
 801c2ec:	681b      	ldr	r3, [r3, #0]
 801c2ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c2f0:	683b      	ldr	r3, [r7, #0]
 801c2f2:	3304      	adds	r3, #4
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d102      	bne.n	801c300 <etharp_input+0x74>
    for_us = 0;
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	75fb      	strb	r3, [r7, #23]
 801c2fe:	e009      	b.n	801c314 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c300:	68ba      	ldr	r2, [r7, #8]
 801c302:	683b      	ldr	r3, [r7, #0]
 801c304:	3304      	adds	r3, #4
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	429a      	cmp	r2, r3
 801c30a:	bf0c      	ite	eq
 801c30c:	2301      	moveq	r3, #1
 801c30e:	2300      	movne	r3, #0
 801c310:	b2db      	uxtb	r3, r3
 801c312:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c314:	693b      	ldr	r3, [r7, #16]
 801c316:	f103 0208 	add.w	r2, r3, #8
 801c31a:	7dfb      	ldrb	r3, [r7, #23]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d001      	beq.n	801c324 <etharp_input+0x98>
 801c320:	2301      	movs	r3, #1
 801c322:	e000      	b.n	801c326 <etharp_input+0x9a>
 801c324:	2302      	movs	r3, #2
 801c326:	f107 010c 	add.w	r1, r7, #12
 801c32a:	6838      	ldr	r0, [r7, #0]
 801c32c:	f7ff fed8 	bl	801c0e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c330:	693b      	ldr	r3, [r7, #16]
 801c332:	88db      	ldrh	r3, [r3, #6]
 801c334:	b29b      	uxth	r3, r3
 801c336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c33a:	d003      	beq.n	801c344 <etharp_input+0xb8>
 801c33c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c340:	d01e      	beq.n	801c380 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801c342:	e025      	b.n	801c390 <etharp_input+0x104>
      if (for_us) {
 801c344:	7dfb      	ldrb	r3, [r7, #23]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d021      	beq.n	801c38e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c34a:	683b      	ldr	r3, [r7, #0]
 801c34c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c350:	693b      	ldr	r3, [r7, #16]
 801c352:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c356:	683b      	ldr	r3, [r7, #0]
 801c358:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801c35c:	683b      	ldr	r3, [r7, #0]
 801c35e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c360:	693a      	ldr	r2, [r7, #16]
 801c362:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c364:	2102      	movs	r1, #2
 801c366:	9103      	str	r1, [sp, #12]
 801c368:	f107 010c 	add.w	r1, r7, #12
 801c36c:	9102      	str	r1, [sp, #8]
 801c36e:	9201      	str	r2, [sp, #4]
 801c370:	9300      	str	r3, [sp, #0]
 801c372:	462b      	mov	r3, r5
 801c374:	4622      	mov	r2, r4
 801c376:	4601      	mov	r1, r0
 801c378:	6838      	ldr	r0, [r7, #0]
 801c37a:	f000 faef 	bl	801c95c <etharp_raw>
      break;
 801c37e:	e006      	b.n	801c38e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801c380:	f107 030c 	add.w	r3, r7, #12
 801c384:	4619      	mov	r1, r3
 801c386:	6838      	ldr	r0, [r7, #0]
 801c388:	f7fe f9fc 	bl	801a784 <dhcp_arp_reply>
      break;
 801c38c:	e000      	b.n	801c390 <etharp_input+0x104>
      break;
 801c38e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c390:	6878      	ldr	r0, [r7, #4]
 801c392:	f7f6 fc1b 	bl	8012bcc <pbuf_free>
}
 801c396:	3718      	adds	r7, #24
 801c398:	46bd      	mov	sp, r7
 801c39a:	bdb0      	pop	{r4, r5, r7, pc}
 801c39c:	080248f0 	.word	0x080248f0
 801c3a0:	08024a40 	.word	0x08024a40
 801c3a4:	08024968 	.word	0x08024968

0801c3a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c3a8:	b580      	push	{r7, lr}
 801c3aa:	b086      	sub	sp, #24
 801c3ac:	af02      	add	r7, sp, #8
 801c3ae:	60f8      	str	r0, [r7, #12]
 801c3b0:	60b9      	str	r1, [r7, #8]
 801c3b2:	4613      	mov	r3, r2
 801c3b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c3b6:	79fa      	ldrb	r2, [r7, #7]
 801c3b8:	4944      	ldr	r1, [pc, #272]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c3ba:	4613      	mov	r3, r2
 801c3bc:	005b      	lsls	r3, r3, #1
 801c3be:	4413      	add	r3, r2
 801c3c0:	00db      	lsls	r3, r3, #3
 801c3c2:	440b      	add	r3, r1
 801c3c4:	3314      	adds	r3, #20
 801c3c6:	781b      	ldrb	r3, [r3, #0]
 801c3c8:	2b01      	cmp	r3, #1
 801c3ca:	d806      	bhi.n	801c3da <etharp_output_to_arp_index+0x32>
 801c3cc:	4b40      	ldr	r3, [pc, #256]	; (801c4d0 <etharp_output_to_arp_index+0x128>)
 801c3ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 801c3d2:	4940      	ldr	r1, [pc, #256]	; (801c4d4 <etharp_output_to_arp_index+0x12c>)
 801c3d4:	4840      	ldr	r0, [pc, #256]	; (801c4d8 <etharp_output_to_arp_index+0x130>)
 801c3d6:	f003 fa69 	bl	801f8ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c3da:	79fa      	ldrb	r2, [r7, #7]
 801c3dc:	493b      	ldr	r1, [pc, #236]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c3de:	4613      	mov	r3, r2
 801c3e0:	005b      	lsls	r3, r3, #1
 801c3e2:	4413      	add	r3, r2
 801c3e4:	00db      	lsls	r3, r3, #3
 801c3e6:	440b      	add	r3, r1
 801c3e8:	3314      	adds	r3, #20
 801c3ea:	781b      	ldrb	r3, [r3, #0]
 801c3ec:	2b02      	cmp	r3, #2
 801c3ee:	d153      	bne.n	801c498 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c3f0:	79fa      	ldrb	r2, [r7, #7]
 801c3f2:	4936      	ldr	r1, [pc, #216]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c3f4:	4613      	mov	r3, r2
 801c3f6:	005b      	lsls	r3, r3, #1
 801c3f8:	4413      	add	r3, r2
 801c3fa:	00db      	lsls	r3, r3, #3
 801c3fc:	440b      	add	r3, r1
 801c3fe:	3312      	adds	r3, #18
 801c400:	881b      	ldrh	r3, [r3, #0]
 801c402:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801c406:	d919      	bls.n	801c43c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c408:	79fa      	ldrb	r2, [r7, #7]
 801c40a:	4613      	mov	r3, r2
 801c40c:	005b      	lsls	r3, r3, #1
 801c40e:	4413      	add	r3, r2
 801c410:	00db      	lsls	r3, r3, #3
 801c412:	4a2e      	ldr	r2, [pc, #184]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c414:	4413      	add	r3, r2
 801c416:	3304      	adds	r3, #4
 801c418:	4619      	mov	r1, r3
 801c41a:	68f8      	ldr	r0, [r7, #12]
 801c41c:	f000 fb4c 	bl	801cab8 <etharp_request>
 801c420:	4603      	mov	r3, r0
 801c422:	2b00      	cmp	r3, #0
 801c424:	d138      	bne.n	801c498 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c426:	79fa      	ldrb	r2, [r7, #7]
 801c428:	4928      	ldr	r1, [pc, #160]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c42a:	4613      	mov	r3, r2
 801c42c:	005b      	lsls	r3, r3, #1
 801c42e:	4413      	add	r3, r2
 801c430:	00db      	lsls	r3, r3, #3
 801c432:	440b      	add	r3, r1
 801c434:	3314      	adds	r3, #20
 801c436:	2203      	movs	r2, #3
 801c438:	701a      	strb	r2, [r3, #0]
 801c43a:	e02d      	b.n	801c498 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c43c:	79fa      	ldrb	r2, [r7, #7]
 801c43e:	4923      	ldr	r1, [pc, #140]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c440:	4613      	mov	r3, r2
 801c442:	005b      	lsls	r3, r3, #1
 801c444:	4413      	add	r3, r2
 801c446:	00db      	lsls	r3, r3, #3
 801c448:	440b      	add	r3, r1
 801c44a:	3312      	adds	r3, #18
 801c44c:	881b      	ldrh	r3, [r3, #0]
 801c44e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801c452:	d321      	bcc.n	801c498 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c454:	79fa      	ldrb	r2, [r7, #7]
 801c456:	4613      	mov	r3, r2
 801c458:	005b      	lsls	r3, r3, #1
 801c45a:	4413      	add	r3, r2
 801c45c:	00db      	lsls	r3, r3, #3
 801c45e:	4a1b      	ldr	r2, [pc, #108]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c460:	4413      	add	r3, r2
 801c462:	1d19      	adds	r1, r3, #4
 801c464:	79fa      	ldrb	r2, [r7, #7]
 801c466:	4613      	mov	r3, r2
 801c468:	005b      	lsls	r3, r3, #1
 801c46a:	4413      	add	r3, r2
 801c46c:	00db      	lsls	r3, r3, #3
 801c46e:	3308      	adds	r3, #8
 801c470:	4a16      	ldr	r2, [pc, #88]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c472:	4413      	add	r3, r2
 801c474:	3304      	adds	r3, #4
 801c476:	461a      	mov	r2, r3
 801c478:	68f8      	ldr	r0, [r7, #12]
 801c47a:	f000 fafb 	bl	801ca74 <etharp_request_dst>
 801c47e:	4603      	mov	r3, r0
 801c480:	2b00      	cmp	r3, #0
 801c482:	d109      	bne.n	801c498 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c484:	79fa      	ldrb	r2, [r7, #7]
 801c486:	4911      	ldr	r1, [pc, #68]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c488:	4613      	mov	r3, r2
 801c48a:	005b      	lsls	r3, r3, #1
 801c48c:	4413      	add	r3, r2
 801c48e:	00db      	lsls	r3, r3, #3
 801c490:	440b      	add	r3, r1
 801c492:	3314      	adds	r3, #20
 801c494:	2203      	movs	r2, #3
 801c496:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801c49e:	79fa      	ldrb	r2, [r7, #7]
 801c4a0:	4613      	mov	r3, r2
 801c4a2:	005b      	lsls	r3, r3, #1
 801c4a4:	4413      	add	r3, r2
 801c4a6:	00db      	lsls	r3, r3, #3
 801c4a8:	3308      	adds	r3, #8
 801c4aa:	4a08      	ldr	r2, [pc, #32]	; (801c4cc <etharp_output_to_arp_index+0x124>)
 801c4ac:	4413      	add	r3, r2
 801c4ae:	3304      	adds	r3, #4
 801c4b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c4b4:	9200      	str	r2, [sp, #0]
 801c4b6:	460a      	mov	r2, r1
 801c4b8:	68b9      	ldr	r1, [r7, #8]
 801c4ba:	68f8      	ldr	r0, [r7, #12]
 801c4bc:	f001 fe5e 	bl	801e17c <ethernet_output>
 801c4c0:	4603      	mov	r3, r0
}
 801c4c2:	4618      	mov	r0, r3
 801c4c4:	3710      	adds	r7, #16
 801c4c6:	46bd      	mov	sp, r7
 801c4c8:	bd80      	pop	{r7, pc}
 801c4ca:	bf00      	nop
 801c4cc:	20010260 	.word	0x20010260
 801c4d0:	080248f0 	.word	0x080248f0
 801c4d4:	08024a60 	.word	0x08024a60
 801c4d8:	08024968 	.word	0x08024968

0801c4dc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b08a      	sub	sp, #40	; 0x28
 801c4e0:	af02      	add	r7, sp, #8
 801c4e2:	60f8      	str	r0, [r7, #12]
 801c4e4:	60b9      	str	r1, [r7, #8]
 801c4e6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d106      	bne.n	801c500 <etharp_output+0x24>
 801c4f2:	4b73      	ldr	r3, [pc, #460]	; (801c6c0 <etharp_output+0x1e4>)
 801c4f4:	f240 321e 	movw	r2, #798	; 0x31e
 801c4f8:	4972      	ldr	r1, [pc, #456]	; (801c6c4 <etharp_output+0x1e8>)
 801c4fa:	4873      	ldr	r0, [pc, #460]	; (801c6c8 <etharp_output+0x1ec>)
 801c4fc:	f003 f9d6 	bl	801f8ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c500:	68bb      	ldr	r3, [r7, #8]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d106      	bne.n	801c514 <etharp_output+0x38>
 801c506:	4b6e      	ldr	r3, [pc, #440]	; (801c6c0 <etharp_output+0x1e4>)
 801c508:	f240 321f 	movw	r2, #799	; 0x31f
 801c50c:	496f      	ldr	r1, [pc, #444]	; (801c6cc <etharp_output+0x1f0>)
 801c50e:	486e      	ldr	r0, [pc, #440]	; (801c6c8 <etharp_output+0x1ec>)
 801c510:	f003 f9cc 	bl	801f8ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d106      	bne.n	801c528 <etharp_output+0x4c>
 801c51a:	4b69      	ldr	r3, [pc, #420]	; (801c6c0 <etharp_output+0x1e4>)
 801c51c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c520:	496b      	ldr	r1, [pc, #428]	; (801c6d0 <etharp_output+0x1f4>)
 801c522:	4869      	ldr	r0, [pc, #420]	; (801c6c8 <etharp_output+0x1ec>)
 801c524:	f003 f9c2 	bl	801f8ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	68f9      	ldr	r1, [r7, #12]
 801c52e:	4618      	mov	r0, r3
 801c530:	f000 ff16 	bl	801d360 <ip4_addr_isbroadcast_u32>
 801c534:	4603      	mov	r3, r0
 801c536:	2b00      	cmp	r3, #0
 801c538:	d002      	beq.n	801c540 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c53a:	4b66      	ldr	r3, [pc, #408]	; (801c6d4 <etharp_output+0x1f8>)
 801c53c:	61fb      	str	r3, [r7, #28]
 801c53e:	e0af      	b.n	801c6a0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c548:	2be0      	cmp	r3, #224	; 0xe0
 801c54a:	d118      	bne.n	801c57e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c54c:	2301      	movs	r3, #1
 801c54e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c550:	2300      	movs	r3, #0
 801c552:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c554:	235e      	movs	r3, #94	; 0x5e
 801c556:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	3301      	adds	r3, #1
 801c55c:	781b      	ldrb	r3, [r3, #0]
 801c55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c562:	b2db      	uxtb	r3, r3
 801c564:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	3302      	adds	r3, #2
 801c56a:	781b      	ldrb	r3, [r3, #0]
 801c56c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	3303      	adds	r3, #3
 801c572:	781b      	ldrb	r3, [r3, #0]
 801c574:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c576:	f107 0310 	add.w	r3, r7, #16
 801c57a:	61fb      	str	r3, [r7, #28]
 801c57c:	e090      	b.n	801c6a0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	681a      	ldr	r2, [r3, #0]
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	3304      	adds	r3, #4
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	405a      	eors	r2, r3
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	3308      	adds	r3, #8
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	4013      	ands	r3, r2
 801c592:	2b00      	cmp	r3, #0
 801c594:	d012      	beq.n	801c5bc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c59c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c5a0:	4293      	cmp	r3, r2
 801c5a2:	d00b      	beq.n	801c5bc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	330c      	adds	r3, #12
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d003      	beq.n	801c5b6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	330c      	adds	r3, #12
 801c5b2:	61bb      	str	r3, [r7, #24]
 801c5b4:	e002      	b.n	801c5bc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c5b6:	f06f 0303 	mvn.w	r3, #3
 801c5ba:	e07d      	b.n	801c6b8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c5bc:	4b46      	ldr	r3, [pc, #280]	; (801c6d8 <etharp_output+0x1fc>)
 801c5be:	781b      	ldrb	r3, [r3, #0]
 801c5c0:	4619      	mov	r1, r3
 801c5c2:	4a46      	ldr	r2, [pc, #280]	; (801c6dc <etharp_output+0x200>)
 801c5c4:	460b      	mov	r3, r1
 801c5c6:	005b      	lsls	r3, r3, #1
 801c5c8:	440b      	add	r3, r1
 801c5ca:	00db      	lsls	r3, r3, #3
 801c5cc:	4413      	add	r3, r2
 801c5ce:	3314      	adds	r3, #20
 801c5d0:	781b      	ldrb	r3, [r3, #0]
 801c5d2:	2b01      	cmp	r3, #1
 801c5d4:	d925      	bls.n	801c622 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c5d6:	4b40      	ldr	r3, [pc, #256]	; (801c6d8 <etharp_output+0x1fc>)
 801c5d8:	781b      	ldrb	r3, [r3, #0]
 801c5da:	4619      	mov	r1, r3
 801c5dc:	4a3f      	ldr	r2, [pc, #252]	; (801c6dc <etharp_output+0x200>)
 801c5de:	460b      	mov	r3, r1
 801c5e0:	005b      	lsls	r3, r3, #1
 801c5e2:	440b      	add	r3, r1
 801c5e4:	00db      	lsls	r3, r3, #3
 801c5e6:	4413      	add	r3, r2
 801c5e8:	3308      	adds	r3, #8
 801c5ea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c5ec:	68fa      	ldr	r2, [r7, #12]
 801c5ee:	429a      	cmp	r2, r3
 801c5f0:	d117      	bne.n	801c622 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c5f2:	69bb      	ldr	r3, [r7, #24]
 801c5f4:	681a      	ldr	r2, [r3, #0]
 801c5f6:	4b38      	ldr	r3, [pc, #224]	; (801c6d8 <etharp_output+0x1fc>)
 801c5f8:	781b      	ldrb	r3, [r3, #0]
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	4937      	ldr	r1, [pc, #220]	; (801c6dc <etharp_output+0x200>)
 801c5fe:	4603      	mov	r3, r0
 801c600:	005b      	lsls	r3, r3, #1
 801c602:	4403      	add	r3, r0
 801c604:	00db      	lsls	r3, r3, #3
 801c606:	440b      	add	r3, r1
 801c608:	3304      	adds	r3, #4
 801c60a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c60c:	429a      	cmp	r2, r3
 801c60e:	d108      	bne.n	801c622 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c610:	4b31      	ldr	r3, [pc, #196]	; (801c6d8 <etharp_output+0x1fc>)
 801c612:	781b      	ldrb	r3, [r3, #0]
 801c614:	461a      	mov	r2, r3
 801c616:	68b9      	ldr	r1, [r7, #8]
 801c618:	68f8      	ldr	r0, [r7, #12]
 801c61a:	f7ff fec5 	bl	801c3a8 <etharp_output_to_arp_index>
 801c61e:	4603      	mov	r3, r0
 801c620:	e04a      	b.n	801c6b8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c622:	2300      	movs	r3, #0
 801c624:	75fb      	strb	r3, [r7, #23]
 801c626:	e031      	b.n	801c68c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c628:	7dfa      	ldrb	r2, [r7, #23]
 801c62a:	492c      	ldr	r1, [pc, #176]	; (801c6dc <etharp_output+0x200>)
 801c62c:	4613      	mov	r3, r2
 801c62e:	005b      	lsls	r3, r3, #1
 801c630:	4413      	add	r3, r2
 801c632:	00db      	lsls	r3, r3, #3
 801c634:	440b      	add	r3, r1
 801c636:	3314      	adds	r3, #20
 801c638:	781b      	ldrb	r3, [r3, #0]
 801c63a:	2b01      	cmp	r3, #1
 801c63c:	d923      	bls.n	801c686 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c63e:	7dfa      	ldrb	r2, [r7, #23]
 801c640:	4926      	ldr	r1, [pc, #152]	; (801c6dc <etharp_output+0x200>)
 801c642:	4613      	mov	r3, r2
 801c644:	005b      	lsls	r3, r3, #1
 801c646:	4413      	add	r3, r2
 801c648:	00db      	lsls	r3, r3, #3
 801c64a:	440b      	add	r3, r1
 801c64c:	3308      	adds	r3, #8
 801c64e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c650:	68fa      	ldr	r2, [r7, #12]
 801c652:	429a      	cmp	r2, r3
 801c654:	d117      	bne.n	801c686 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c656:	69bb      	ldr	r3, [r7, #24]
 801c658:	6819      	ldr	r1, [r3, #0]
 801c65a:	7dfa      	ldrb	r2, [r7, #23]
 801c65c:	481f      	ldr	r0, [pc, #124]	; (801c6dc <etharp_output+0x200>)
 801c65e:	4613      	mov	r3, r2
 801c660:	005b      	lsls	r3, r3, #1
 801c662:	4413      	add	r3, r2
 801c664:	00db      	lsls	r3, r3, #3
 801c666:	4403      	add	r3, r0
 801c668:	3304      	adds	r3, #4
 801c66a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c66c:	4299      	cmp	r1, r3
 801c66e:	d10a      	bne.n	801c686 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c670:	4a19      	ldr	r2, [pc, #100]	; (801c6d8 <etharp_output+0x1fc>)
 801c672:	7dfb      	ldrb	r3, [r7, #23]
 801c674:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c676:	7dfb      	ldrb	r3, [r7, #23]
 801c678:	461a      	mov	r2, r3
 801c67a:	68b9      	ldr	r1, [r7, #8]
 801c67c:	68f8      	ldr	r0, [r7, #12]
 801c67e:	f7ff fe93 	bl	801c3a8 <etharp_output_to_arp_index>
 801c682:	4603      	mov	r3, r0
 801c684:	e018      	b.n	801c6b8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c686:	7dfb      	ldrb	r3, [r7, #23]
 801c688:	3301      	adds	r3, #1
 801c68a:	75fb      	strb	r3, [r7, #23]
 801c68c:	7dfb      	ldrb	r3, [r7, #23]
 801c68e:	2b09      	cmp	r3, #9
 801c690:	d9ca      	bls.n	801c628 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c692:	68ba      	ldr	r2, [r7, #8]
 801c694:	69b9      	ldr	r1, [r7, #24]
 801c696:	68f8      	ldr	r0, [r7, #12]
 801c698:	f000 f822 	bl	801c6e0 <etharp_query>
 801c69c:	4603      	mov	r3, r0
 801c69e:	e00b      	b.n	801c6b8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c6a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c6aa:	9300      	str	r3, [sp, #0]
 801c6ac:	69fb      	ldr	r3, [r7, #28]
 801c6ae:	68b9      	ldr	r1, [r7, #8]
 801c6b0:	68f8      	ldr	r0, [r7, #12]
 801c6b2:	f001 fd63 	bl	801e17c <ethernet_output>
 801c6b6:	4603      	mov	r3, r0
}
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	3720      	adds	r7, #32
 801c6bc:	46bd      	mov	sp, r7
 801c6be:	bd80      	pop	{r7, pc}
 801c6c0:	080248f0 	.word	0x080248f0
 801c6c4:	08024a40 	.word	0x08024a40
 801c6c8:	08024968 	.word	0x08024968
 801c6cc:	08024a90 	.word	0x08024a90
 801c6d0:	08024a30 	.word	0x08024a30
 801c6d4:	080251f0 	.word	0x080251f0
 801c6d8:	20010350 	.word	0x20010350
 801c6dc:	20010260 	.word	0x20010260

0801c6e0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c6e0:	b580      	push	{r7, lr}
 801c6e2:	b08c      	sub	sp, #48	; 0x30
 801c6e4:	af02      	add	r7, sp, #8
 801c6e6:	60f8      	str	r0, [r7, #12]
 801c6e8:	60b9      	str	r1, [r7, #8]
 801c6ea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	332a      	adds	r3, #42	; 0x2a
 801c6f0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c6f2:	23ff      	movs	r3, #255	; 0xff
 801c6f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c6fc:	68bb      	ldr	r3, [r7, #8]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	68f9      	ldr	r1, [r7, #12]
 801c702:	4618      	mov	r0, r3
 801c704:	f000 fe2c 	bl	801d360 <ip4_addr_isbroadcast_u32>
 801c708:	4603      	mov	r3, r0
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d10c      	bne.n	801c728 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c70e:	68bb      	ldr	r3, [r7, #8]
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c716:	2be0      	cmp	r3, #224	; 0xe0
 801c718:	d006      	beq.n	801c728 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c71a:	68bb      	ldr	r3, [r7, #8]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d003      	beq.n	801c728 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c720:	68bb      	ldr	r3, [r7, #8]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d102      	bne.n	801c72e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c728:	f06f 030f 	mvn.w	r3, #15
 801c72c:	e101      	b.n	801c932 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c72e:	68fa      	ldr	r2, [r7, #12]
 801c730:	2101      	movs	r1, #1
 801c732:	68b8      	ldr	r0, [r7, #8]
 801c734:	f7ff fb5c 	bl	801bdf0 <etharp_find_entry>
 801c738:	4603      	mov	r3, r0
 801c73a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c73c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c740:	2b00      	cmp	r3, #0
 801c742:	da02      	bge.n	801c74a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c744:	8a7b      	ldrh	r3, [r7, #18]
 801c746:	b25b      	sxtb	r3, r3
 801c748:	e0f3      	b.n	801c932 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c74a:	8a7b      	ldrh	r3, [r7, #18]
 801c74c:	2b7e      	cmp	r3, #126	; 0x7e
 801c74e:	d906      	bls.n	801c75e <etharp_query+0x7e>
 801c750:	4b7a      	ldr	r3, [pc, #488]	; (801c93c <etharp_query+0x25c>)
 801c752:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c756:	497a      	ldr	r1, [pc, #488]	; (801c940 <etharp_query+0x260>)
 801c758:	487a      	ldr	r0, [pc, #488]	; (801c944 <etharp_query+0x264>)
 801c75a:	f003 f8a7 	bl	801f8ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c75e:	8a7b      	ldrh	r3, [r7, #18]
 801c760:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c762:	7c7a      	ldrb	r2, [r7, #17]
 801c764:	4978      	ldr	r1, [pc, #480]	; (801c948 <etharp_query+0x268>)
 801c766:	4613      	mov	r3, r2
 801c768:	005b      	lsls	r3, r3, #1
 801c76a:	4413      	add	r3, r2
 801c76c:	00db      	lsls	r3, r3, #3
 801c76e:	440b      	add	r3, r1
 801c770:	3314      	adds	r3, #20
 801c772:	781b      	ldrb	r3, [r3, #0]
 801c774:	2b00      	cmp	r3, #0
 801c776:	d115      	bne.n	801c7a4 <etharp_query+0xc4>
    is_new_entry = 1;
 801c778:	2301      	movs	r3, #1
 801c77a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c77c:	7c7a      	ldrb	r2, [r7, #17]
 801c77e:	4972      	ldr	r1, [pc, #456]	; (801c948 <etharp_query+0x268>)
 801c780:	4613      	mov	r3, r2
 801c782:	005b      	lsls	r3, r3, #1
 801c784:	4413      	add	r3, r2
 801c786:	00db      	lsls	r3, r3, #3
 801c788:	440b      	add	r3, r1
 801c78a:	3314      	adds	r3, #20
 801c78c:	2201      	movs	r2, #1
 801c78e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c790:	7c7a      	ldrb	r2, [r7, #17]
 801c792:	496d      	ldr	r1, [pc, #436]	; (801c948 <etharp_query+0x268>)
 801c794:	4613      	mov	r3, r2
 801c796:	005b      	lsls	r3, r3, #1
 801c798:	4413      	add	r3, r2
 801c79a:	00db      	lsls	r3, r3, #3
 801c79c:	440b      	add	r3, r1
 801c79e:	3308      	adds	r3, #8
 801c7a0:	68fa      	ldr	r2, [r7, #12]
 801c7a2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c7a4:	7c7a      	ldrb	r2, [r7, #17]
 801c7a6:	4968      	ldr	r1, [pc, #416]	; (801c948 <etharp_query+0x268>)
 801c7a8:	4613      	mov	r3, r2
 801c7aa:	005b      	lsls	r3, r3, #1
 801c7ac:	4413      	add	r3, r2
 801c7ae:	00db      	lsls	r3, r3, #3
 801c7b0:	440b      	add	r3, r1
 801c7b2:	3314      	adds	r3, #20
 801c7b4:	781b      	ldrb	r3, [r3, #0]
 801c7b6:	2b01      	cmp	r3, #1
 801c7b8:	d011      	beq.n	801c7de <etharp_query+0xfe>
 801c7ba:	7c7a      	ldrb	r2, [r7, #17]
 801c7bc:	4962      	ldr	r1, [pc, #392]	; (801c948 <etharp_query+0x268>)
 801c7be:	4613      	mov	r3, r2
 801c7c0:	005b      	lsls	r3, r3, #1
 801c7c2:	4413      	add	r3, r2
 801c7c4:	00db      	lsls	r3, r3, #3
 801c7c6:	440b      	add	r3, r1
 801c7c8:	3314      	adds	r3, #20
 801c7ca:	781b      	ldrb	r3, [r3, #0]
 801c7cc:	2b01      	cmp	r3, #1
 801c7ce:	d806      	bhi.n	801c7de <etharp_query+0xfe>
 801c7d0:	4b5a      	ldr	r3, [pc, #360]	; (801c93c <etharp_query+0x25c>)
 801c7d2:	f240 32cd 	movw	r2, #973	; 0x3cd
 801c7d6:	495d      	ldr	r1, [pc, #372]	; (801c94c <etharp_query+0x26c>)
 801c7d8:	485a      	ldr	r0, [pc, #360]	; (801c944 <etharp_query+0x264>)
 801c7da:	f003 f867 	bl	801f8ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c7de:	6a3b      	ldr	r3, [r7, #32]
 801c7e0:	2b00      	cmp	r3, #0
 801c7e2:	d102      	bne.n	801c7ea <etharp_query+0x10a>
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d10c      	bne.n	801c804 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c7ea:	68b9      	ldr	r1, [r7, #8]
 801c7ec:	68f8      	ldr	r0, [r7, #12]
 801c7ee:	f000 f963 	bl	801cab8 <etharp_request>
 801c7f2:	4603      	mov	r3, r0
 801c7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d102      	bne.n	801c804 <etharp_query+0x124>
      return result;
 801c7fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c802:	e096      	b.n	801c932 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	2b00      	cmp	r3, #0
 801c808:	d106      	bne.n	801c818 <etharp_query+0x138>
 801c80a:	4b4c      	ldr	r3, [pc, #304]	; (801c93c <etharp_query+0x25c>)
 801c80c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c810:	494f      	ldr	r1, [pc, #316]	; (801c950 <etharp_query+0x270>)
 801c812:	484c      	ldr	r0, [pc, #304]	; (801c944 <etharp_query+0x264>)
 801c814:	f003 f84a 	bl	801f8ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c818:	7c7a      	ldrb	r2, [r7, #17]
 801c81a:	494b      	ldr	r1, [pc, #300]	; (801c948 <etharp_query+0x268>)
 801c81c:	4613      	mov	r3, r2
 801c81e:	005b      	lsls	r3, r3, #1
 801c820:	4413      	add	r3, r2
 801c822:	00db      	lsls	r3, r3, #3
 801c824:	440b      	add	r3, r1
 801c826:	3314      	adds	r3, #20
 801c828:	781b      	ldrb	r3, [r3, #0]
 801c82a:	2b01      	cmp	r3, #1
 801c82c:	d917      	bls.n	801c85e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c82e:	4a49      	ldr	r2, [pc, #292]	; (801c954 <etharp_query+0x274>)
 801c830:	7c7b      	ldrb	r3, [r7, #17]
 801c832:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c834:	7c7a      	ldrb	r2, [r7, #17]
 801c836:	4613      	mov	r3, r2
 801c838:	005b      	lsls	r3, r3, #1
 801c83a:	4413      	add	r3, r2
 801c83c:	00db      	lsls	r3, r3, #3
 801c83e:	3308      	adds	r3, #8
 801c840:	4a41      	ldr	r2, [pc, #260]	; (801c948 <etharp_query+0x268>)
 801c842:	4413      	add	r3, r2
 801c844:	3304      	adds	r3, #4
 801c846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c84a:	9200      	str	r2, [sp, #0]
 801c84c:	697a      	ldr	r2, [r7, #20]
 801c84e:	6879      	ldr	r1, [r7, #4]
 801c850:	68f8      	ldr	r0, [r7, #12]
 801c852:	f001 fc93 	bl	801e17c <ethernet_output>
 801c856:	4603      	mov	r3, r0
 801c858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c85c:	e067      	b.n	801c92e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c85e:	7c7a      	ldrb	r2, [r7, #17]
 801c860:	4939      	ldr	r1, [pc, #228]	; (801c948 <etharp_query+0x268>)
 801c862:	4613      	mov	r3, r2
 801c864:	005b      	lsls	r3, r3, #1
 801c866:	4413      	add	r3, r2
 801c868:	00db      	lsls	r3, r3, #3
 801c86a:	440b      	add	r3, r1
 801c86c:	3314      	adds	r3, #20
 801c86e:	781b      	ldrb	r3, [r3, #0]
 801c870:	2b01      	cmp	r3, #1
 801c872:	d15c      	bne.n	801c92e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c874:	2300      	movs	r3, #0
 801c876:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c87c:	e01c      	b.n	801c8b8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c87e:	69fb      	ldr	r3, [r7, #28]
 801c880:	895a      	ldrh	r2, [r3, #10]
 801c882:	69fb      	ldr	r3, [r7, #28]
 801c884:	891b      	ldrh	r3, [r3, #8]
 801c886:	429a      	cmp	r2, r3
 801c888:	d10a      	bne.n	801c8a0 <etharp_query+0x1c0>
 801c88a:	69fb      	ldr	r3, [r7, #28]
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	2b00      	cmp	r3, #0
 801c890:	d006      	beq.n	801c8a0 <etharp_query+0x1c0>
 801c892:	4b2a      	ldr	r3, [pc, #168]	; (801c93c <etharp_query+0x25c>)
 801c894:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c898:	492f      	ldr	r1, [pc, #188]	; (801c958 <etharp_query+0x278>)
 801c89a:	482a      	ldr	r0, [pc, #168]	; (801c944 <etharp_query+0x264>)
 801c89c:	f003 f806 	bl	801f8ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c8a0:	69fb      	ldr	r3, [r7, #28]
 801c8a2:	7b1b      	ldrb	r3, [r3, #12]
 801c8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d002      	beq.n	801c8b2 <etharp_query+0x1d2>
        copy_needed = 1;
 801c8ac:	2301      	movs	r3, #1
 801c8ae:	61bb      	str	r3, [r7, #24]
        break;
 801c8b0:	e005      	b.n	801c8be <etharp_query+0x1de>
      }
      p = p->next;
 801c8b2:	69fb      	ldr	r3, [r7, #28]
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c8b8:	69fb      	ldr	r3, [r7, #28]
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d1df      	bne.n	801c87e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c8be:	69bb      	ldr	r3, [r7, #24]
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d007      	beq.n	801c8d4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c8c4:	687a      	ldr	r2, [r7, #4]
 801c8c6:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c8ca:	200e      	movs	r0, #14
 801c8cc:	f7f6 fbf6 	bl	80130bc <pbuf_clone>
 801c8d0:	61f8      	str	r0, [r7, #28]
 801c8d2:	e004      	b.n	801c8de <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c8d8:	69f8      	ldr	r0, [r7, #28]
 801c8da:	f7f6 fa1d 	bl	8012d18 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c8de:	69fb      	ldr	r3, [r7, #28]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d021      	beq.n	801c928 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c8e4:	7c7a      	ldrb	r2, [r7, #17]
 801c8e6:	4918      	ldr	r1, [pc, #96]	; (801c948 <etharp_query+0x268>)
 801c8e8:	4613      	mov	r3, r2
 801c8ea:	005b      	lsls	r3, r3, #1
 801c8ec:	4413      	add	r3, r2
 801c8ee:	00db      	lsls	r3, r3, #3
 801c8f0:	440b      	add	r3, r1
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d00a      	beq.n	801c90e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c8f8:	7c7a      	ldrb	r2, [r7, #17]
 801c8fa:	4913      	ldr	r1, [pc, #76]	; (801c948 <etharp_query+0x268>)
 801c8fc:	4613      	mov	r3, r2
 801c8fe:	005b      	lsls	r3, r3, #1
 801c900:	4413      	add	r3, r2
 801c902:	00db      	lsls	r3, r3, #3
 801c904:	440b      	add	r3, r1
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	4618      	mov	r0, r3
 801c90a:	f7f6 f95f 	bl	8012bcc <pbuf_free>
      }
      arp_table[i].q = p;
 801c90e:	7c7a      	ldrb	r2, [r7, #17]
 801c910:	490d      	ldr	r1, [pc, #52]	; (801c948 <etharp_query+0x268>)
 801c912:	4613      	mov	r3, r2
 801c914:	005b      	lsls	r3, r3, #1
 801c916:	4413      	add	r3, r2
 801c918:	00db      	lsls	r3, r3, #3
 801c91a:	440b      	add	r3, r1
 801c91c:	69fa      	ldr	r2, [r7, #28]
 801c91e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c920:	2300      	movs	r3, #0
 801c922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c926:	e002      	b.n	801c92e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c928:	23ff      	movs	r3, #255	; 0xff
 801c92a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c92e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c932:	4618      	mov	r0, r3
 801c934:	3728      	adds	r7, #40	; 0x28
 801c936:	46bd      	mov	sp, r7
 801c938:	bd80      	pop	{r7, pc}
 801c93a:	bf00      	nop
 801c93c:	080248f0 	.word	0x080248f0
 801c940:	08024a9c 	.word	0x08024a9c
 801c944:	08024968 	.word	0x08024968
 801c948:	20010260 	.word	0x20010260
 801c94c:	08024aac 	.word	0x08024aac
 801c950:	08024a90 	.word	0x08024a90
 801c954:	20010350 	.word	0x20010350
 801c958:	08024ad4 	.word	0x08024ad4

0801c95c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c95c:	b580      	push	{r7, lr}
 801c95e:	b08a      	sub	sp, #40	; 0x28
 801c960:	af02      	add	r7, sp, #8
 801c962:	60f8      	str	r0, [r7, #12]
 801c964:	60b9      	str	r1, [r7, #8]
 801c966:	607a      	str	r2, [r7, #4]
 801c968:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c96a:	2300      	movs	r3, #0
 801c96c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	2b00      	cmp	r3, #0
 801c972:	d106      	bne.n	801c982 <etharp_raw+0x26>
 801c974:	4b3a      	ldr	r3, [pc, #232]	; (801ca60 <etharp_raw+0x104>)
 801c976:	f240 4257 	movw	r2, #1111	; 0x457
 801c97a:	493a      	ldr	r1, [pc, #232]	; (801ca64 <etharp_raw+0x108>)
 801c97c:	483a      	ldr	r0, [pc, #232]	; (801ca68 <etharp_raw+0x10c>)
 801c97e:	f002 ff95 	bl	801f8ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c982:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c986:	211c      	movs	r1, #28
 801c988:	200e      	movs	r0, #14
 801c98a:	f7f5 fe3b 	bl	8012604 <pbuf_alloc>
 801c98e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c990:	69bb      	ldr	r3, [r7, #24]
 801c992:	2b00      	cmp	r3, #0
 801c994:	d102      	bne.n	801c99c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c99a:	e05d      	b.n	801ca58 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c99c:	69bb      	ldr	r3, [r7, #24]
 801c99e:	895b      	ldrh	r3, [r3, #10]
 801c9a0:	2b1b      	cmp	r3, #27
 801c9a2:	d806      	bhi.n	801c9b2 <etharp_raw+0x56>
 801c9a4:	4b2e      	ldr	r3, [pc, #184]	; (801ca60 <etharp_raw+0x104>)
 801c9a6:	f240 4262 	movw	r2, #1122	; 0x462
 801c9aa:	4930      	ldr	r1, [pc, #192]	; (801ca6c <etharp_raw+0x110>)
 801c9ac:	482e      	ldr	r0, [pc, #184]	; (801ca68 <etharp_raw+0x10c>)
 801c9ae:	f002 ff7d 	bl	801f8ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c9b2:	69bb      	ldr	r3, [r7, #24]
 801c9b4:	685b      	ldr	r3, [r3, #4]
 801c9b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c9b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c9ba:	4618      	mov	r0, r3
 801c9bc:	f7f4 fcd0 	bl	8011360 <lwip_htons>
 801c9c0:	4603      	mov	r3, r0
 801c9c2:	461a      	mov	r2, r3
 801c9c4:	697b      	ldr	r3, [r7, #20]
 801c9c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c9c8:	68fb      	ldr	r3, [r7, #12]
 801c9ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c9ce:	2b06      	cmp	r3, #6
 801c9d0:	d006      	beq.n	801c9e0 <etharp_raw+0x84>
 801c9d2:	4b23      	ldr	r3, [pc, #140]	; (801ca60 <etharp_raw+0x104>)
 801c9d4:	f240 4269 	movw	r2, #1129	; 0x469
 801c9d8:	4925      	ldr	r1, [pc, #148]	; (801ca70 <etharp_raw+0x114>)
 801c9da:	4823      	ldr	r0, [pc, #140]	; (801ca68 <etharp_raw+0x10c>)
 801c9dc:	f002 ff66 	bl	801f8ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c9e0:	697b      	ldr	r3, [r7, #20]
 801c9e2:	3308      	adds	r3, #8
 801c9e4:	2206      	movs	r2, #6
 801c9e6:	6839      	ldr	r1, [r7, #0]
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	f003 f9c4 	bl	801fd76 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c9ee:	697b      	ldr	r3, [r7, #20]
 801c9f0:	3312      	adds	r3, #18
 801c9f2:	2206      	movs	r2, #6
 801c9f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	f003 f9bd 	bl	801fd76 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c9fc:	697b      	ldr	r3, [r7, #20]
 801c9fe:	330e      	adds	r3, #14
 801ca00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ca02:	6812      	ldr	r2, [r2, #0]
 801ca04:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801ca06:	697b      	ldr	r3, [r7, #20]
 801ca08:	3318      	adds	r3, #24
 801ca0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ca0c:	6812      	ldr	r2, [r2, #0]
 801ca0e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ca10:	697b      	ldr	r3, [r7, #20]
 801ca12:	2200      	movs	r2, #0
 801ca14:	701a      	strb	r2, [r3, #0]
 801ca16:	2200      	movs	r2, #0
 801ca18:	f042 0201 	orr.w	r2, r2, #1
 801ca1c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	2200      	movs	r2, #0
 801ca22:	f042 0208 	orr.w	r2, r2, #8
 801ca26:	709a      	strb	r2, [r3, #2]
 801ca28:	2200      	movs	r2, #0
 801ca2a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ca2c:	697b      	ldr	r3, [r7, #20]
 801ca2e:	2206      	movs	r2, #6
 801ca30:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ca32:	697b      	ldr	r3, [r7, #20]
 801ca34:	2204      	movs	r2, #4
 801ca36:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ca38:	f640 0306 	movw	r3, #2054	; 0x806
 801ca3c:	9300      	str	r3, [sp, #0]
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	68ba      	ldr	r2, [r7, #8]
 801ca42:	69b9      	ldr	r1, [r7, #24]
 801ca44:	68f8      	ldr	r0, [r7, #12]
 801ca46:	f001 fb99 	bl	801e17c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801ca4a:	69b8      	ldr	r0, [r7, #24]
 801ca4c:	f7f6 f8be 	bl	8012bcc <pbuf_free>
  p = NULL;
 801ca50:	2300      	movs	r3, #0
 801ca52:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ca54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ca58:	4618      	mov	r0, r3
 801ca5a:	3720      	adds	r7, #32
 801ca5c:	46bd      	mov	sp, r7
 801ca5e:	bd80      	pop	{r7, pc}
 801ca60:	080248f0 	.word	0x080248f0
 801ca64:	08024a40 	.word	0x08024a40
 801ca68:	08024968 	.word	0x08024968
 801ca6c:	08024af0 	.word	0x08024af0
 801ca70:	08024b24 	.word	0x08024b24

0801ca74 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	b088      	sub	sp, #32
 801ca78:	af04      	add	r7, sp, #16
 801ca7a:	60f8      	str	r0, [r7, #12]
 801ca7c:	60b9      	str	r1, [r7, #8]
 801ca7e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ca90:	2201      	movs	r2, #1
 801ca92:	9203      	str	r2, [sp, #12]
 801ca94:	68ba      	ldr	r2, [r7, #8]
 801ca96:	9202      	str	r2, [sp, #8]
 801ca98:	4a06      	ldr	r2, [pc, #24]	; (801cab4 <etharp_request_dst+0x40>)
 801ca9a:	9201      	str	r2, [sp, #4]
 801ca9c:	9300      	str	r3, [sp, #0]
 801ca9e:	4603      	mov	r3, r0
 801caa0:	687a      	ldr	r2, [r7, #4]
 801caa2:	68f8      	ldr	r0, [r7, #12]
 801caa4:	f7ff ff5a 	bl	801c95c <etharp_raw>
 801caa8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801caaa:	4618      	mov	r0, r3
 801caac:	3710      	adds	r7, #16
 801caae:	46bd      	mov	sp, r7
 801cab0:	bd80      	pop	{r7, pc}
 801cab2:	bf00      	nop
 801cab4:	080251f8 	.word	0x080251f8

0801cab8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801cab8:	b580      	push	{r7, lr}
 801caba:	b082      	sub	sp, #8
 801cabc:	af00      	add	r7, sp, #0
 801cabe:	6078      	str	r0, [r7, #4]
 801cac0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801cac2:	4a05      	ldr	r2, [pc, #20]	; (801cad8 <etharp_request+0x20>)
 801cac4:	6839      	ldr	r1, [r7, #0]
 801cac6:	6878      	ldr	r0, [r7, #4]
 801cac8:	f7ff ffd4 	bl	801ca74 <etharp_request_dst>
 801cacc:	4603      	mov	r3, r0
}
 801cace:	4618      	mov	r0, r3
 801cad0:	3708      	adds	r7, #8
 801cad2:	46bd      	mov	sp, r7
 801cad4:	bd80      	pop	{r7, pc}
 801cad6:	bf00      	nop
 801cad8:	080251f0 	.word	0x080251f0

0801cadc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801cadc:	b580      	push	{r7, lr}
 801cade:	b08e      	sub	sp, #56	; 0x38
 801cae0:	af04      	add	r7, sp, #16
 801cae2:	6078      	str	r0, [r7, #4]
 801cae4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801cae6:	4b79      	ldr	r3, [pc, #484]	; (801cccc <icmp_input+0x1f0>)
 801cae8:	689b      	ldr	r3, [r3, #8]
 801caea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801caee:	781b      	ldrb	r3, [r3, #0]
 801caf0:	f003 030f 	and.w	r3, r3, #15
 801caf4:	b2db      	uxtb	r3, r3
 801caf6:	009b      	lsls	r3, r3, #2
 801caf8:	b2db      	uxtb	r3, r3
 801cafa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801cafc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cafe:	2b13      	cmp	r3, #19
 801cb00:	f240 80cd 	bls.w	801cc9e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	895b      	ldrh	r3, [r3, #10]
 801cb08:	2b03      	cmp	r3, #3
 801cb0a:	f240 80ca 	bls.w	801cca2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	685b      	ldr	r3, [r3, #4]
 801cb12:	781b      	ldrb	r3, [r3, #0]
 801cb14:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801cb18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	f000 80b7 	beq.w	801cc90 <icmp_input+0x1b4>
 801cb22:	2b08      	cmp	r3, #8
 801cb24:	f040 80b7 	bne.w	801cc96 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801cb28:	4b69      	ldr	r3, [pc, #420]	; (801ccd0 <icmp_input+0x1f4>)
 801cb2a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cb2c:	4b67      	ldr	r3, [pc, #412]	; (801cccc <icmp_input+0x1f0>)
 801cb2e:	695b      	ldr	r3, [r3, #20]
 801cb30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cb34:	2be0      	cmp	r3, #224	; 0xe0
 801cb36:	f000 80bb 	beq.w	801ccb0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801cb3a:	4b64      	ldr	r3, [pc, #400]	; (801cccc <icmp_input+0x1f0>)
 801cb3c:	695b      	ldr	r3, [r3, #20]
 801cb3e:	4a63      	ldr	r2, [pc, #396]	; (801cccc <icmp_input+0x1f0>)
 801cb40:	6812      	ldr	r2, [r2, #0]
 801cb42:	4611      	mov	r1, r2
 801cb44:	4618      	mov	r0, r3
 801cb46:	f000 fc0b 	bl	801d360 <ip4_addr_isbroadcast_u32>
 801cb4a:	4603      	mov	r3, r0
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	f040 80b1 	bne.w	801ccb4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	891b      	ldrh	r3, [r3, #8]
 801cb56:	2b07      	cmp	r3, #7
 801cb58:	f240 80a5 	bls.w	801cca6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cb5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cb5e:	330e      	adds	r3, #14
 801cb60:	4619      	mov	r1, r3
 801cb62:	6878      	ldr	r0, [r7, #4]
 801cb64:	f7f5 ff9c 	bl	8012aa0 <pbuf_add_header>
 801cb68:	4603      	mov	r3, r0
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d04b      	beq.n	801cc06 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	891a      	ldrh	r2, [r3, #8]
 801cb72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cb74:	4413      	add	r3, r2
 801cb76:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	891b      	ldrh	r3, [r3, #8]
 801cb7c:	8b7a      	ldrh	r2, [r7, #26]
 801cb7e:	429a      	cmp	r2, r3
 801cb80:	f0c0 809a 	bcc.w	801ccb8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801cb84:	8b7b      	ldrh	r3, [r7, #26]
 801cb86:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cb8a:	4619      	mov	r1, r3
 801cb8c:	200e      	movs	r0, #14
 801cb8e:	f7f5 fd39 	bl	8012604 <pbuf_alloc>
 801cb92:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801cb94:	697b      	ldr	r3, [r7, #20]
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	f000 8090 	beq.w	801ccbc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801cb9c:	697b      	ldr	r3, [r7, #20]
 801cb9e:	895b      	ldrh	r3, [r3, #10]
 801cba0:	461a      	mov	r2, r3
 801cba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cba4:	3308      	adds	r3, #8
 801cba6:	429a      	cmp	r2, r3
 801cba8:	d203      	bcs.n	801cbb2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801cbaa:	6978      	ldr	r0, [r7, #20]
 801cbac:	f7f6 f80e 	bl	8012bcc <pbuf_free>
          goto icmperr;
 801cbb0:	e085      	b.n	801ccbe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801cbb2:	697b      	ldr	r3, [r7, #20]
 801cbb4:	685b      	ldr	r3, [r3, #4]
 801cbb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801cbb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cbba:	4618      	mov	r0, r3
 801cbbc:	f003 f8db 	bl	801fd76 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801cbc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cbc2:	4619      	mov	r1, r3
 801cbc4:	6978      	ldr	r0, [r7, #20]
 801cbc6:	f7f5 ff7b 	bl	8012ac0 <pbuf_remove_header>
 801cbca:	4603      	mov	r3, r0
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d009      	beq.n	801cbe4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801cbd0:	4b40      	ldr	r3, [pc, #256]	; (801ccd4 <icmp_input+0x1f8>)
 801cbd2:	22b6      	movs	r2, #182	; 0xb6
 801cbd4:	4940      	ldr	r1, [pc, #256]	; (801ccd8 <icmp_input+0x1fc>)
 801cbd6:	4841      	ldr	r0, [pc, #260]	; (801ccdc <icmp_input+0x200>)
 801cbd8:	f002 fe68 	bl	801f8ac <iprintf>
          pbuf_free(r);
 801cbdc:	6978      	ldr	r0, [r7, #20]
 801cbde:	f7f5 fff5 	bl	8012bcc <pbuf_free>
          goto icmperr;
 801cbe2:	e06c      	b.n	801ccbe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801cbe4:	6879      	ldr	r1, [r7, #4]
 801cbe6:	6978      	ldr	r0, [r7, #20]
 801cbe8:	f7f6 f924 	bl	8012e34 <pbuf_copy>
 801cbec:	4603      	mov	r3, r0
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d003      	beq.n	801cbfa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801cbf2:	6978      	ldr	r0, [r7, #20]
 801cbf4:	f7f5 ffea 	bl	8012bcc <pbuf_free>
          goto icmperr;
 801cbf8:	e061      	b.n	801ccbe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801cbfa:	6878      	ldr	r0, [r7, #4]
 801cbfc:	f7f5 ffe6 	bl	8012bcc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801cc00:	697b      	ldr	r3, [r7, #20]
 801cc02:	607b      	str	r3, [r7, #4]
 801cc04:	e00f      	b.n	801cc26 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801cc06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cc08:	330e      	adds	r3, #14
 801cc0a:	4619      	mov	r1, r3
 801cc0c:	6878      	ldr	r0, [r7, #4]
 801cc0e:	f7f5 ff57 	bl	8012ac0 <pbuf_remove_header>
 801cc12:	4603      	mov	r3, r0
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d006      	beq.n	801cc26 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801cc18:	4b2e      	ldr	r3, [pc, #184]	; (801ccd4 <icmp_input+0x1f8>)
 801cc1a:	22c7      	movs	r2, #199	; 0xc7
 801cc1c:	4930      	ldr	r1, [pc, #192]	; (801cce0 <icmp_input+0x204>)
 801cc1e:	482f      	ldr	r0, [pc, #188]	; (801ccdc <icmp_input+0x200>)
 801cc20:	f002 fe44 	bl	801f8ac <iprintf>
          goto icmperr;
 801cc24:	e04b      	b.n	801ccbe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	685b      	ldr	r3, [r3, #4]
 801cc2a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801cc2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cc2e:	4619      	mov	r1, r3
 801cc30:	6878      	ldr	r0, [r7, #4]
 801cc32:	f7f5 ff35 	bl	8012aa0 <pbuf_add_header>
 801cc36:	4603      	mov	r3, r0
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d12b      	bne.n	801cc94 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	685b      	ldr	r3, [r3, #4]
 801cc40:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801cc42:	69fb      	ldr	r3, [r7, #28]
 801cc44:	681a      	ldr	r2, [r3, #0]
 801cc46:	68fb      	ldr	r3, [r7, #12]
 801cc48:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801cc4a:	4b20      	ldr	r3, [pc, #128]	; (801cccc <icmp_input+0x1f0>)
 801cc4c:	691a      	ldr	r2, [r3, #16]
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801cc52:	693b      	ldr	r3, [r7, #16]
 801cc54:	2200      	movs	r2, #0
 801cc56:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801cc58:	693b      	ldr	r3, [r7, #16]
 801cc5a:	2200      	movs	r2, #0
 801cc5c:	709a      	strb	r2, [r3, #2]
 801cc5e:	2200      	movs	r2, #0
 801cc60:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	22ff      	movs	r2, #255	; 0xff
 801cc66:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	729a      	strb	r2, [r3, #10]
 801cc6e:	2200      	movs	r2, #0
 801cc70:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801cc72:	683b      	ldr	r3, [r7, #0]
 801cc74:	9302      	str	r3, [sp, #8]
 801cc76:	2301      	movs	r3, #1
 801cc78:	9301      	str	r3, [sp, #4]
 801cc7a:	2300      	movs	r3, #0
 801cc7c:	9300      	str	r3, [sp, #0]
 801cc7e:	23ff      	movs	r3, #255	; 0xff
 801cc80:	2200      	movs	r2, #0
 801cc82:	69f9      	ldr	r1, [r7, #28]
 801cc84:	6878      	ldr	r0, [r7, #4]
 801cc86:	f000 fa93 	bl	801d1b0 <ip4_output_if>
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801cc8e:	e001      	b.n	801cc94 <icmp_input+0x1b8>
      break;
 801cc90:	bf00      	nop
 801cc92:	e000      	b.n	801cc96 <icmp_input+0x1ba>
      break;
 801cc94:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801cc96:	6878      	ldr	r0, [r7, #4]
 801cc98:	f7f5 ff98 	bl	8012bcc <pbuf_free>
  return;
 801cc9c:	e013      	b.n	801ccc6 <icmp_input+0x1ea>
    goto lenerr;
 801cc9e:	bf00      	nop
 801cca0:	e002      	b.n	801cca8 <icmp_input+0x1cc>
    goto lenerr;
 801cca2:	bf00      	nop
 801cca4:	e000      	b.n	801cca8 <icmp_input+0x1cc>
        goto lenerr;
 801cca6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801cca8:	6878      	ldr	r0, [r7, #4]
 801ccaa:	f7f5 ff8f 	bl	8012bcc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ccae:	e00a      	b.n	801ccc6 <icmp_input+0x1ea>
        goto icmperr;
 801ccb0:	bf00      	nop
 801ccb2:	e004      	b.n	801ccbe <icmp_input+0x1e2>
        goto icmperr;
 801ccb4:	bf00      	nop
 801ccb6:	e002      	b.n	801ccbe <icmp_input+0x1e2>
          goto icmperr;
 801ccb8:	bf00      	nop
 801ccba:	e000      	b.n	801ccbe <icmp_input+0x1e2>
          goto icmperr;
 801ccbc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801ccbe:	6878      	ldr	r0, [r7, #4]
 801ccc0:	f7f5 ff84 	bl	8012bcc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801ccc4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801ccc6:	3728      	adds	r7, #40	; 0x28
 801ccc8:	46bd      	mov	sp, r7
 801ccca:	bd80      	pop	{r7, pc}
 801cccc:	2000ca58 	.word	0x2000ca58
 801ccd0:	2000ca6c 	.word	0x2000ca6c
 801ccd4:	08024b68 	.word	0x08024b68
 801ccd8:	08024ba0 	.word	0x08024ba0
 801ccdc:	08024bd8 	.word	0x08024bd8
 801cce0:	08024c00 	.word	0x08024c00

0801cce4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801cce4:	b580      	push	{r7, lr}
 801cce6:	b082      	sub	sp, #8
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	6078      	str	r0, [r7, #4]
 801ccec:	460b      	mov	r3, r1
 801ccee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801ccf0:	78fb      	ldrb	r3, [r7, #3]
 801ccf2:	461a      	mov	r2, r3
 801ccf4:	2103      	movs	r1, #3
 801ccf6:	6878      	ldr	r0, [r7, #4]
 801ccf8:	f000 f814 	bl	801cd24 <icmp_send_response>
}
 801ccfc:	bf00      	nop
 801ccfe:	3708      	adds	r7, #8
 801cd00:	46bd      	mov	sp, r7
 801cd02:	bd80      	pop	{r7, pc}

0801cd04 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801cd04:	b580      	push	{r7, lr}
 801cd06:	b082      	sub	sp, #8
 801cd08:	af00      	add	r7, sp, #0
 801cd0a:	6078      	str	r0, [r7, #4]
 801cd0c:	460b      	mov	r3, r1
 801cd0e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801cd10:	78fb      	ldrb	r3, [r7, #3]
 801cd12:	461a      	mov	r2, r3
 801cd14:	210b      	movs	r1, #11
 801cd16:	6878      	ldr	r0, [r7, #4]
 801cd18:	f000 f804 	bl	801cd24 <icmp_send_response>
}
 801cd1c:	bf00      	nop
 801cd1e:	3708      	adds	r7, #8
 801cd20:	46bd      	mov	sp, r7
 801cd22:	bd80      	pop	{r7, pc}

0801cd24 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801cd24:	b580      	push	{r7, lr}
 801cd26:	b08c      	sub	sp, #48	; 0x30
 801cd28:	af04      	add	r7, sp, #16
 801cd2a:	6078      	str	r0, [r7, #4]
 801cd2c:	460b      	mov	r3, r1
 801cd2e:	70fb      	strb	r3, [r7, #3]
 801cd30:	4613      	mov	r3, r2
 801cd32:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801cd34:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cd38:	2124      	movs	r1, #36	; 0x24
 801cd3a:	2022      	movs	r0, #34	; 0x22
 801cd3c:	f7f5 fc62 	bl	8012604 <pbuf_alloc>
 801cd40:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801cd42:	69fb      	ldr	r3, [r7, #28]
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d04c      	beq.n	801cde2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801cd48:	69fb      	ldr	r3, [r7, #28]
 801cd4a:	895b      	ldrh	r3, [r3, #10]
 801cd4c:	2b23      	cmp	r3, #35	; 0x23
 801cd4e:	d806      	bhi.n	801cd5e <icmp_send_response+0x3a>
 801cd50:	4b26      	ldr	r3, [pc, #152]	; (801cdec <icmp_send_response+0xc8>)
 801cd52:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801cd56:	4926      	ldr	r1, [pc, #152]	; (801cdf0 <icmp_send_response+0xcc>)
 801cd58:	4826      	ldr	r0, [pc, #152]	; (801cdf4 <icmp_send_response+0xd0>)
 801cd5a:	f002 fda7 	bl	801f8ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	685b      	ldr	r3, [r3, #4]
 801cd62:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801cd64:	69fb      	ldr	r3, [r7, #28]
 801cd66:	685b      	ldr	r3, [r3, #4]
 801cd68:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801cd6a:	697b      	ldr	r3, [r7, #20]
 801cd6c:	78fa      	ldrb	r2, [r7, #3]
 801cd6e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801cd70:	697b      	ldr	r3, [r7, #20]
 801cd72:	78ba      	ldrb	r2, [r7, #2]
 801cd74:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801cd76:	697b      	ldr	r3, [r7, #20]
 801cd78:	2200      	movs	r2, #0
 801cd7a:	711a      	strb	r2, [r3, #4]
 801cd7c:	2200      	movs	r2, #0
 801cd7e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801cd80:	697b      	ldr	r3, [r7, #20]
 801cd82:	2200      	movs	r2, #0
 801cd84:	719a      	strb	r2, [r3, #6]
 801cd86:	2200      	movs	r2, #0
 801cd88:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801cd8a:	69fb      	ldr	r3, [r7, #28]
 801cd8c:	685b      	ldr	r3, [r3, #4]
 801cd8e:	f103 0008 	add.w	r0, r3, #8
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	685b      	ldr	r3, [r3, #4]
 801cd96:	221c      	movs	r2, #28
 801cd98:	4619      	mov	r1, r3
 801cd9a:	f002 ffec 	bl	801fd76 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801cd9e:	69bb      	ldr	r3, [r7, #24]
 801cda0:	68db      	ldr	r3, [r3, #12]
 801cda2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801cda4:	f107 030c 	add.w	r3, r7, #12
 801cda8:	4618      	mov	r0, r3
 801cdaa:	f000 f825 	bl	801cdf8 <ip4_route>
 801cdae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801cdb0:	693b      	ldr	r3, [r7, #16]
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d011      	beq.n	801cdda <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801cdb6:	697b      	ldr	r3, [r7, #20]
 801cdb8:	2200      	movs	r2, #0
 801cdba:	709a      	strb	r2, [r3, #2]
 801cdbc:	2200      	movs	r2, #0
 801cdbe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801cdc0:	f107 020c 	add.w	r2, r7, #12
 801cdc4:	693b      	ldr	r3, [r7, #16]
 801cdc6:	9302      	str	r3, [sp, #8]
 801cdc8:	2301      	movs	r3, #1
 801cdca:	9301      	str	r3, [sp, #4]
 801cdcc:	2300      	movs	r3, #0
 801cdce:	9300      	str	r3, [sp, #0]
 801cdd0:	23ff      	movs	r3, #255	; 0xff
 801cdd2:	2100      	movs	r1, #0
 801cdd4:	69f8      	ldr	r0, [r7, #28]
 801cdd6:	f000 f9eb 	bl	801d1b0 <ip4_output_if>
  }
  pbuf_free(q);
 801cdda:	69f8      	ldr	r0, [r7, #28]
 801cddc:	f7f5 fef6 	bl	8012bcc <pbuf_free>
 801cde0:	e000      	b.n	801cde4 <icmp_send_response+0xc0>
    return;
 801cde2:	bf00      	nop
}
 801cde4:	3720      	adds	r7, #32
 801cde6:	46bd      	mov	sp, r7
 801cde8:	bd80      	pop	{r7, pc}
 801cdea:	bf00      	nop
 801cdec:	08024b68 	.word	0x08024b68
 801cdf0:	08024c34 	.word	0x08024c34
 801cdf4:	08024bd8 	.word	0x08024bd8

0801cdf8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801cdf8:	b480      	push	{r7}
 801cdfa:	b085      	sub	sp, #20
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ce00:	4b33      	ldr	r3, [pc, #204]	; (801ced0 <ip4_route+0xd8>)
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	60fb      	str	r3, [r7, #12]
 801ce06:	e036      	b.n	801ce76 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ce0e:	f003 0301 	and.w	r3, r3, #1
 801ce12:	b2db      	uxtb	r3, r3
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d02b      	beq.n	801ce70 <ip4_route+0x78>
 801ce18:	68fb      	ldr	r3, [r7, #12]
 801ce1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ce1e:	089b      	lsrs	r3, r3, #2
 801ce20:	f003 0301 	and.w	r3, r3, #1
 801ce24:	b2db      	uxtb	r3, r3
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d022      	beq.n	801ce70 <ip4_route+0x78>
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	3304      	adds	r3, #4
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d01d      	beq.n	801ce70 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	681a      	ldr	r2, [r3, #0]
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	3304      	adds	r3, #4
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	405a      	eors	r2, r3
 801ce40:	68fb      	ldr	r3, [r7, #12]
 801ce42:	3308      	adds	r3, #8
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	4013      	ands	r3, r2
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d101      	bne.n	801ce50 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801ce4c:	68fb      	ldr	r3, [r7, #12]
 801ce4e:	e038      	b.n	801cec2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ce56:	f003 0302 	and.w	r3, r3, #2
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d108      	bne.n	801ce70 <ip4_route+0x78>
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	681a      	ldr	r2, [r3, #0]
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	330c      	adds	r3, #12
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	429a      	cmp	r2, r3
 801ce6a:	d101      	bne.n	801ce70 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	e028      	b.n	801cec2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	60fb      	str	r3, [r7, #12]
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d1c5      	bne.n	801ce08 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ce7c:	4b15      	ldr	r3, [pc, #84]	; (801ced4 <ip4_route+0xdc>)
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	d01a      	beq.n	801ceba <ip4_route+0xc2>
 801ce84:	4b13      	ldr	r3, [pc, #76]	; (801ced4 <ip4_route+0xdc>)
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ce8c:	f003 0301 	and.w	r3, r3, #1
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d012      	beq.n	801ceba <ip4_route+0xc2>
 801ce94:	4b0f      	ldr	r3, [pc, #60]	; (801ced4 <ip4_route+0xdc>)
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ce9c:	f003 0304 	and.w	r3, r3, #4
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d00a      	beq.n	801ceba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801cea4:	4b0b      	ldr	r3, [pc, #44]	; (801ced4 <ip4_route+0xdc>)
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	3304      	adds	r3, #4
 801ceaa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d004      	beq.n	801ceba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	b2db      	uxtb	r3, r3
 801ceb6:	2b7f      	cmp	r3, #127	; 0x7f
 801ceb8:	d101      	bne.n	801cebe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ceba:	2300      	movs	r3, #0
 801cebc:	e001      	b.n	801cec2 <ip4_route+0xca>
  }

  return netif_default;
 801cebe:	4b05      	ldr	r3, [pc, #20]	; (801ced4 <ip4_route+0xdc>)
 801cec0:	681b      	ldr	r3, [r3, #0]
}
 801cec2:	4618      	mov	r0, r3
 801cec4:	3714      	adds	r7, #20
 801cec6:	46bd      	mov	sp, r7
 801cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cecc:	4770      	bx	lr
 801cece:	bf00      	nop
 801ced0:	200101c0 	.word	0x200101c0
 801ced4:	200101c4 	.word	0x200101c4

0801ced8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ced8:	b580      	push	{r7, lr}
 801ceda:	b082      	sub	sp, #8
 801cedc:	af00      	add	r7, sp, #0
 801cede:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cee6:	f003 0301 	and.w	r3, r3, #1
 801ceea:	b2db      	uxtb	r3, r3
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d016      	beq.n	801cf1e <ip4_input_accept+0x46>
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	3304      	adds	r3, #4
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d011      	beq.n	801cf1e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cefa:	4b0b      	ldr	r3, [pc, #44]	; (801cf28 <ip4_input_accept+0x50>)
 801cefc:	695a      	ldr	r2, [r3, #20]
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	3304      	adds	r3, #4
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	429a      	cmp	r2, r3
 801cf06:	d008      	beq.n	801cf1a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801cf08:	4b07      	ldr	r3, [pc, #28]	; (801cf28 <ip4_input_accept+0x50>)
 801cf0a:	695b      	ldr	r3, [r3, #20]
 801cf0c:	6879      	ldr	r1, [r7, #4]
 801cf0e:	4618      	mov	r0, r3
 801cf10:	f000 fa26 	bl	801d360 <ip4_addr_isbroadcast_u32>
 801cf14:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d001      	beq.n	801cf1e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801cf1a:	2301      	movs	r3, #1
 801cf1c:	e000      	b.n	801cf20 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801cf1e:	2300      	movs	r3, #0
}
 801cf20:	4618      	mov	r0, r3
 801cf22:	3708      	adds	r7, #8
 801cf24:	46bd      	mov	sp, r7
 801cf26:	bd80      	pop	{r7, pc}
 801cf28:	2000ca58 	.word	0x2000ca58

0801cf2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801cf2c:	b580      	push	{r7, lr}
 801cf2e:	b088      	sub	sp, #32
 801cf30:	af00      	add	r7, sp, #0
 801cf32:	6078      	str	r0, [r7, #4]
 801cf34:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801cf36:	2301      	movs	r3, #1
 801cf38:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	685b      	ldr	r3, [r3, #4]
 801cf3e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801cf40:	69fb      	ldr	r3, [r7, #28]
 801cf42:	781b      	ldrb	r3, [r3, #0]
 801cf44:	091b      	lsrs	r3, r3, #4
 801cf46:	b2db      	uxtb	r3, r3
 801cf48:	2b04      	cmp	r3, #4
 801cf4a:	d004      	beq.n	801cf56 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801cf4c:	6878      	ldr	r0, [r7, #4]
 801cf4e:	f7f5 fe3d 	bl	8012bcc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801cf52:	2300      	movs	r3, #0
 801cf54:	e123      	b.n	801d19e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801cf56:	69fb      	ldr	r3, [r7, #28]
 801cf58:	781b      	ldrb	r3, [r3, #0]
 801cf5a:	f003 030f 	and.w	r3, r3, #15
 801cf5e:	b2db      	uxtb	r3, r3
 801cf60:	009b      	lsls	r3, r3, #2
 801cf62:	b2db      	uxtb	r3, r3
 801cf64:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801cf66:	69fb      	ldr	r3, [r7, #28]
 801cf68:	885b      	ldrh	r3, [r3, #2]
 801cf6a:	b29b      	uxth	r3, r3
 801cf6c:	4618      	mov	r0, r3
 801cf6e:	f7f4 f9f7 	bl	8011360 <lwip_htons>
 801cf72:	4603      	mov	r3, r0
 801cf74:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	891b      	ldrh	r3, [r3, #8]
 801cf7a:	8a3a      	ldrh	r2, [r7, #16]
 801cf7c:	429a      	cmp	r2, r3
 801cf7e:	d204      	bcs.n	801cf8a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801cf80:	8a3b      	ldrh	r3, [r7, #16]
 801cf82:	4619      	mov	r1, r3
 801cf84:	6878      	ldr	r0, [r7, #4]
 801cf86:	f7f5 fc9b 	bl	80128c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	895b      	ldrh	r3, [r3, #10]
 801cf8e:	8a7a      	ldrh	r2, [r7, #18]
 801cf90:	429a      	cmp	r2, r3
 801cf92:	d807      	bhi.n	801cfa4 <ip4_input+0x78>
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	891b      	ldrh	r3, [r3, #8]
 801cf98:	8a3a      	ldrh	r2, [r7, #16]
 801cf9a:	429a      	cmp	r2, r3
 801cf9c:	d802      	bhi.n	801cfa4 <ip4_input+0x78>
 801cf9e:	8a7b      	ldrh	r3, [r7, #18]
 801cfa0:	2b13      	cmp	r3, #19
 801cfa2:	d804      	bhi.n	801cfae <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cfa4:	6878      	ldr	r0, [r7, #4]
 801cfa6:	f7f5 fe11 	bl	8012bcc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801cfaa:	2300      	movs	r3, #0
 801cfac:	e0f7      	b.n	801d19e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801cfae:	69fb      	ldr	r3, [r7, #28]
 801cfb0:	691b      	ldr	r3, [r3, #16]
 801cfb2:	4a7d      	ldr	r2, [pc, #500]	; (801d1a8 <ip4_input+0x27c>)
 801cfb4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801cfb6:	69fb      	ldr	r3, [r7, #28]
 801cfb8:	68db      	ldr	r3, [r3, #12]
 801cfba:	4a7b      	ldr	r2, [pc, #492]	; (801d1a8 <ip4_input+0x27c>)
 801cfbc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cfbe:	4b7a      	ldr	r3, [pc, #488]	; (801d1a8 <ip4_input+0x27c>)
 801cfc0:	695b      	ldr	r3, [r3, #20]
 801cfc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cfc6:	2be0      	cmp	r3, #224	; 0xe0
 801cfc8:	d112      	bne.n	801cff0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801cfca:	683b      	ldr	r3, [r7, #0]
 801cfcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cfd0:	f003 0301 	and.w	r3, r3, #1
 801cfd4:	b2db      	uxtb	r3, r3
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d007      	beq.n	801cfea <ip4_input+0xbe>
 801cfda:	683b      	ldr	r3, [r7, #0]
 801cfdc:	3304      	adds	r3, #4
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d002      	beq.n	801cfea <ip4_input+0xbe>
      netif = inp;
 801cfe4:	683b      	ldr	r3, [r7, #0]
 801cfe6:	61bb      	str	r3, [r7, #24]
 801cfe8:	e02a      	b.n	801d040 <ip4_input+0x114>
    } else {
      netif = NULL;
 801cfea:	2300      	movs	r3, #0
 801cfec:	61bb      	str	r3, [r7, #24]
 801cfee:	e027      	b.n	801d040 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801cff0:	6838      	ldr	r0, [r7, #0]
 801cff2:	f7ff ff71 	bl	801ced8 <ip4_input_accept>
 801cff6:	4603      	mov	r3, r0
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d002      	beq.n	801d002 <ip4_input+0xd6>
      netif = inp;
 801cffc:	683b      	ldr	r3, [r7, #0]
 801cffe:	61bb      	str	r3, [r7, #24]
 801d000:	e01e      	b.n	801d040 <ip4_input+0x114>
    } else {
      netif = NULL;
 801d002:	2300      	movs	r3, #0
 801d004:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d006:	4b68      	ldr	r3, [pc, #416]	; (801d1a8 <ip4_input+0x27c>)
 801d008:	695b      	ldr	r3, [r3, #20]
 801d00a:	b2db      	uxtb	r3, r3
 801d00c:	2b7f      	cmp	r3, #127	; 0x7f
 801d00e:	d017      	beq.n	801d040 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d010:	4b66      	ldr	r3, [pc, #408]	; (801d1ac <ip4_input+0x280>)
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	61bb      	str	r3, [r7, #24]
 801d016:	e00e      	b.n	801d036 <ip4_input+0x10a>
          if (netif == inp) {
 801d018:	69ba      	ldr	r2, [r7, #24]
 801d01a:	683b      	ldr	r3, [r7, #0]
 801d01c:	429a      	cmp	r2, r3
 801d01e:	d006      	beq.n	801d02e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d020:	69b8      	ldr	r0, [r7, #24]
 801d022:	f7ff ff59 	bl	801ced8 <ip4_input_accept>
 801d026:	4603      	mov	r3, r0
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d108      	bne.n	801d03e <ip4_input+0x112>
 801d02c:	e000      	b.n	801d030 <ip4_input+0x104>
            continue;
 801d02e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d030:	69bb      	ldr	r3, [r7, #24]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	61bb      	str	r3, [r7, #24]
 801d036:	69bb      	ldr	r3, [r7, #24]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d1ed      	bne.n	801d018 <ip4_input+0xec>
 801d03c:	e000      	b.n	801d040 <ip4_input+0x114>
            break;
 801d03e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801d040:	69bb      	ldr	r3, [r7, #24]
 801d042:	2b00      	cmp	r3, #0
 801d044:	d111      	bne.n	801d06a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801d046:	69fb      	ldr	r3, [r7, #28]
 801d048:	7a5b      	ldrb	r3, [r3, #9]
 801d04a:	2b11      	cmp	r3, #17
 801d04c:	d10d      	bne.n	801d06a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801d04e:	8a7b      	ldrh	r3, [r7, #18]
 801d050:	69fa      	ldr	r2, [r7, #28]
 801d052:	4413      	add	r3, r2
 801d054:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801d056:	68fb      	ldr	r3, [r7, #12]
 801d058:	885b      	ldrh	r3, [r3, #2]
 801d05a:	b29b      	uxth	r3, r3
 801d05c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801d060:	d103      	bne.n	801d06a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801d062:	683b      	ldr	r3, [r7, #0]
 801d064:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801d066:	2300      	movs	r3, #0
 801d068:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801d06a:	697b      	ldr	r3, [r7, #20]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d017      	beq.n	801d0a0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801d070:	4b4d      	ldr	r3, [pc, #308]	; (801d1a8 <ip4_input+0x27c>)
 801d072:	691b      	ldr	r3, [r3, #16]
 801d074:	2b00      	cmp	r3, #0
 801d076:	d013      	beq.n	801d0a0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d078:	4b4b      	ldr	r3, [pc, #300]	; (801d1a8 <ip4_input+0x27c>)
 801d07a:	691b      	ldr	r3, [r3, #16]
 801d07c:	6839      	ldr	r1, [r7, #0]
 801d07e:	4618      	mov	r0, r3
 801d080:	f000 f96e 	bl	801d360 <ip4_addr_isbroadcast_u32>
 801d084:	4603      	mov	r3, r0
 801d086:	2b00      	cmp	r3, #0
 801d088:	d105      	bne.n	801d096 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d08a:	4b47      	ldr	r3, [pc, #284]	; (801d1a8 <ip4_input+0x27c>)
 801d08c:	691b      	ldr	r3, [r3, #16]
 801d08e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d092:	2be0      	cmp	r3, #224	; 0xe0
 801d094:	d104      	bne.n	801d0a0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d096:	6878      	ldr	r0, [r7, #4]
 801d098:	f7f5 fd98 	bl	8012bcc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d09c:	2300      	movs	r3, #0
 801d09e:	e07e      	b.n	801d19e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d0a0:	69bb      	ldr	r3, [r7, #24]
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d104      	bne.n	801d0b0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d0a6:	6878      	ldr	r0, [r7, #4]
 801d0a8:	f7f5 fd90 	bl	8012bcc <pbuf_free>
    return ERR_OK;
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	e076      	b.n	801d19e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d0b0:	69fb      	ldr	r3, [r7, #28]
 801d0b2:	88db      	ldrh	r3, [r3, #6]
 801d0b4:	b29b      	uxth	r3, r3
 801d0b6:	461a      	mov	r2, r3
 801d0b8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801d0bc:	4013      	ands	r3, r2
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d00b      	beq.n	801d0da <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d0c2:	6878      	ldr	r0, [r7, #4]
 801d0c4:	f000 fc92 	bl	801d9ec <ip4_reass>
 801d0c8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d101      	bne.n	801d0d4 <ip4_input+0x1a8>
      return ERR_OK;
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	e064      	b.n	801d19e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	685b      	ldr	r3, [r3, #4]
 801d0d8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d0da:	4a33      	ldr	r2, [pc, #204]	; (801d1a8 <ip4_input+0x27c>)
 801d0dc:	69bb      	ldr	r3, [r7, #24]
 801d0de:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d0e0:	4a31      	ldr	r2, [pc, #196]	; (801d1a8 <ip4_input+0x27c>)
 801d0e2:	683b      	ldr	r3, [r7, #0]
 801d0e4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d0e6:	4a30      	ldr	r2, [pc, #192]	; (801d1a8 <ip4_input+0x27c>)
 801d0e8:	69fb      	ldr	r3, [r7, #28]
 801d0ea:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d0ec:	69fb      	ldr	r3, [r7, #28]
 801d0ee:	781b      	ldrb	r3, [r3, #0]
 801d0f0:	f003 030f 	and.w	r3, r3, #15
 801d0f4:	b2db      	uxtb	r3, r3
 801d0f6:	009b      	lsls	r3, r3, #2
 801d0f8:	b2db      	uxtb	r3, r3
 801d0fa:	b29a      	uxth	r2, r3
 801d0fc:	4b2a      	ldr	r3, [pc, #168]	; (801d1a8 <ip4_input+0x27c>)
 801d0fe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d100:	8a7b      	ldrh	r3, [r7, #18]
 801d102:	4619      	mov	r1, r3
 801d104:	6878      	ldr	r0, [r7, #4]
 801d106:	f7f5 fcdb 	bl	8012ac0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d10a:	69fb      	ldr	r3, [r7, #28]
 801d10c:	7a5b      	ldrb	r3, [r3, #9]
 801d10e:	2b11      	cmp	r3, #17
 801d110:	d006      	beq.n	801d120 <ip4_input+0x1f4>
 801d112:	2b11      	cmp	r3, #17
 801d114:	dc13      	bgt.n	801d13e <ip4_input+0x212>
 801d116:	2b01      	cmp	r3, #1
 801d118:	d00c      	beq.n	801d134 <ip4_input+0x208>
 801d11a:	2b06      	cmp	r3, #6
 801d11c:	d005      	beq.n	801d12a <ip4_input+0x1fe>
 801d11e:	e00e      	b.n	801d13e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d120:	6839      	ldr	r1, [r7, #0]
 801d122:	6878      	ldr	r0, [r7, #4]
 801d124:	f7fc fac4 	bl	80196b0 <udp_input>
        break;
 801d128:	e026      	b.n	801d178 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d12a:	6839      	ldr	r1, [r7, #0]
 801d12c:	6878      	ldr	r0, [r7, #4]
 801d12e:	f7f7 fe7d 	bl	8014e2c <tcp_input>
        break;
 801d132:	e021      	b.n	801d178 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d134:	6839      	ldr	r1, [r7, #0]
 801d136:	6878      	ldr	r0, [r7, #4]
 801d138:	f7ff fcd0 	bl	801cadc <icmp_input>
        break;
 801d13c:	e01c      	b.n	801d178 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d13e:	4b1a      	ldr	r3, [pc, #104]	; (801d1a8 <ip4_input+0x27c>)
 801d140:	695b      	ldr	r3, [r3, #20]
 801d142:	69b9      	ldr	r1, [r7, #24]
 801d144:	4618      	mov	r0, r3
 801d146:	f000 f90b 	bl	801d360 <ip4_addr_isbroadcast_u32>
 801d14a:	4603      	mov	r3, r0
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d10f      	bne.n	801d170 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d150:	4b15      	ldr	r3, [pc, #84]	; (801d1a8 <ip4_input+0x27c>)
 801d152:	695b      	ldr	r3, [r3, #20]
 801d154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d158:	2be0      	cmp	r3, #224	; 0xe0
 801d15a:	d009      	beq.n	801d170 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d15c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d160:	4619      	mov	r1, r3
 801d162:	6878      	ldr	r0, [r7, #4]
 801d164:	f7f5 fd1f 	bl	8012ba6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d168:	2102      	movs	r1, #2
 801d16a:	6878      	ldr	r0, [r7, #4]
 801d16c:	f7ff fdba 	bl	801cce4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d170:	6878      	ldr	r0, [r7, #4]
 801d172:	f7f5 fd2b 	bl	8012bcc <pbuf_free>
        break;
 801d176:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d178:	4b0b      	ldr	r3, [pc, #44]	; (801d1a8 <ip4_input+0x27c>)
 801d17a:	2200      	movs	r2, #0
 801d17c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d17e:	4b0a      	ldr	r3, [pc, #40]	; (801d1a8 <ip4_input+0x27c>)
 801d180:	2200      	movs	r2, #0
 801d182:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d184:	4b08      	ldr	r3, [pc, #32]	; (801d1a8 <ip4_input+0x27c>)
 801d186:	2200      	movs	r2, #0
 801d188:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d18a:	4b07      	ldr	r3, [pc, #28]	; (801d1a8 <ip4_input+0x27c>)
 801d18c:	2200      	movs	r2, #0
 801d18e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d190:	4b05      	ldr	r3, [pc, #20]	; (801d1a8 <ip4_input+0x27c>)
 801d192:	2200      	movs	r2, #0
 801d194:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d196:	4b04      	ldr	r3, [pc, #16]	; (801d1a8 <ip4_input+0x27c>)
 801d198:	2200      	movs	r2, #0
 801d19a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d19c:	2300      	movs	r3, #0
}
 801d19e:	4618      	mov	r0, r3
 801d1a0:	3720      	adds	r7, #32
 801d1a2:	46bd      	mov	sp, r7
 801d1a4:	bd80      	pop	{r7, pc}
 801d1a6:	bf00      	nop
 801d1a8:	2000ca58 	.word	0x2000ca58
 801d1ac:	200101c0 	.word	0x200101c0

0801d1b0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d1b0:	b580      	push	{r7, lr}
 801d1b2:	b08a      	sub	sp, #40	; 0x28
 801d1b4:	af04      	add	r7, sp, #16
 801d1b6:	60f8      	str	r0, [r7, #12]
 801d1b8:	60b9      	str	r1, [r7, #8]
 801d1ba:	607a      	str	r2, [r7, #4]
 801d1bc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d1be:	68bb      	ldr	r3, [r7, #8]
 801d1c0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d009      	beq.n	801d1dc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d1c8:	68bb      	ldr	r3, [r7, #8]
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d003      	beq.n	801d1d6 <ip4_output_if+0x26>
 801d1ce:	68bb      	ldr	r3, [r7, #8]
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d102      	bne.n	801d1dc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1d8:	3304      	adds	r3, #4
 801d1da:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d1dc:	78fa      	ldrb	r2, [r7, #3]
 801d1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1e0:	9302      	str	r3, [sp, #8]
 801d1e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d1e6:	9301      	str	r3, [sp, #4]
 801d1e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d1ec:	9300      	str	r3, [sp, #0]
 801d1ee:	4613      	mov	r3, r2
 801d1f0:	687a      	ldr	r2, [r7, #4]
 801d1f2:	6979      	ldr	r1, [r7, #20]
 801d1f4:	68f8      	ldr	r0, [r7, #12]
 801d1f6:	f000 f805 	bl	801d204 <ip4_output_if_src>
 801d1fa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	3718      	adds	r7, #24
 801d200:	46bd      	mov	sp, r7
 801d202:	bd80      	pop	{r7, pc}

0801d204 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d204:	b580      	push	{r7, lr}
 801d206:	b088      	sub	sp, #32
 801d208:	af00      	add	r7, sp, #0
 801d20a:	60f8      	str	r0, [r7, #12]
 801d20c:	60b9      	str	r1, [r7, #8]
 801d20e:	607a      	str	r2, [r7, #4]
 801d210:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d212:	68fb      	ldr	r3, [r7, #12]
 801d214:	7b9b      	ldrb	r3, [r3, #14]
 801d216:	2b01      	cmp	r3, #1
 801d218:	d006      	beq.n	801d228 <ip4_output_if_src+0x24>
 801d21a:	4b4b      	ldr	r3, [pc, #300]	; (801d348 <ip4_output_if_src+0x144>)
 801d21c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801d220:	494a      	ldr	r1, [pc, #296]	; (801d34c <ip4_output_if_src+0x148>)
 801d222:	484b      	ldr	r0, [pc, #300]	; (801d350 <ip4_output_if_src+0x14c>)
 801d224:	f002 fb42 	bl	801f8ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	d060      	beq.n	801d2f0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801d22e:	2314      	movs	r3, #20
 801d230:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d232:	2114      	movs	r1, #20
 801d234:	68f8      	ldr	r0, [r7, #12]
 801d236:	f7f5 fc33 	bl	8012aa0 <pbuf_add_header>
 801d23a:	4603      	mov	r3, r0
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d002      	beq.n	801d246 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d240:	f06f 0301 	mvn.w	r3, #1
 801d244:	e07c      	b.n	801d340 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	685b      	ldr	r3, [r3, #4]
 801d24a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	895b      	ldrh	r3, [r3, #10]
 801d250:	2b13      	cmp	r3, #19
 801d252:	d806      	bhi.n	801d262 <ip4_output_if_src+0x5e>
 801d254:	4b3c      	ldr	r3, [pc, #240]	; (801d348 <ip4_output_if_src+0x144>)
 801d256:	f44f 7262 	mov.w	r2, #904	; 0x388
 801d25a:	493e      	ldr	r1, [pc, #248]	; (801d354 <ip4_output_if_src+0x150>)
 801d25c:	483c      	ldr	r0, [pc, #240]	; (801d350 <ip4_output_if_src+0x14c>)
 801d25e:	f002 fb25 	bl	801f8ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d262:	69fb      	ldr	r3, [r7, #28]
 801d264:	78fa      	ldrb	r2, [r7, #3]
 801d266:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d268:	69fb      	ldr	r3, [r7, #28]
 801d26a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801d26e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	681a      	ldr	r2, [r3, #0]
 801d274:	69fb      	ldr	r3, [r7, #28]
 801d276:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d278:	8b7b      	ldrh	r3, [r7, #26]
 801d27a:	089b      	lsrs	r3, r3, #2
 801d27c:	b29b      	uxth	r3, r3
 801d27e:	b2db      	uxtb	r3, r3
 801d280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d284:	b2da      	uxtb	r2, r3
 801d286:	69fb      	ldr	r3, [r7, #28]
 801d288:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d28a:	69fb      	ldr	r3, [r7, #28]
 801d28c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d290:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	891b      	ldrh	r3, [r3, #8]
 801d296:	4618      	mov	r0, r3
 801d298:	f7f4 f862 	bl	8011360 <lwip_htons>
 801d29c:	4603      	mov	r3, r0
 801d29e:	461a      	mov	r2, r3
 801d2a0:	69fb      	ldr	r3, [r7, #28]
 801d2a2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d2a4:	69fb      	ldr	r3, [r7, #28]
 801d2a6:	2200      	movs	r2, #0
 801d2a8:	719a      	strb	r2, [r3, #6]
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d2ae:	4b2a      	ldr	r3, [pc, #168]	; (801d358 <ip4_output_if_src+0x154>)
 801d2b0:	881b      	ldrh	r3, [r3, #0]
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	f7f4 f854 	bl	8011360 <lwip_htons>
 801d2b8:	4603      	mov	r3, r0
 801d2ba:	461a      	mov	r2, r3
 801d2bc:	69fb      	ldr	r3, [r7, #28]
 801d2be:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d2c0:	4b25      	ldr	r3, [pc, #148]	; (801d358 <ip4_output_if_src+0x154>)
 801d2c2:	881b      	ldrh	r3, [r3, #0]
 801d2c4:	3301      	adds	r3, #1
 801d2c6:	b29a      	uxth	r2, r3
 801d2c8:	4b23      	ldr	r3, [pc, #140]	; (801d358 <ip4_output_if_src+0x154>)
 801d2ca:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d2cc:	68bb      	ldr	r3, [r7, #8]
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d104      	bne.n	801d2dc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d2d2:	4b22      	ldr	r3, [pc, #136]	; (801d35c <ip4_output_if_src+0x158>)
 801d2d4:	681a      	ldr	r2, [r3, #0]
 801d2d6:	69fb      	ldr	r3, [r7, #28]
 801d2d8:	60da      	str	r2, [r3, #12]
 801d2da:	e003      	b.n	801d2e4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d2dc:	68bb      	ldr	r3, [r7, #8]
 801d2de:	681a      	ldr	r2, [r3, #0]
 801d2e0:	69fb      	ldr	r3, [r7, #28]
 801d2e2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d2e4:	69fb      	ldr	r3, [r7, #28]
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	729a      	strb	r2, [r3, #10]
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	72da      	strb	r2, [r3, #11]
 801d2ee:	e00f      	b.n	801d310 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	895b      	ldrh	r3, [r3, #10]
 801d2f4:	2b13      	cmp	r3, #19
 801d2f6:	d802      	bhi.n	801d2fe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d2f8:	f06f 0301 	mvn.w	r3, #1
 801d2fc:	e020      	b.n	801d340 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	685b      	ldr	r3, [r3, #4]
 801d302:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d304:	69fb      	ldr	r3, [r7, #28]
 801d306:	691b      	ldr	r3, [r3, #16]
 801d308:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d30a:	f107 0314 	add.w	r3, r7, #20
 801d30e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d314:	2b00      	cmp	r3, #0
 801d316:	d00c      	beq.n	801d332 <ip4_output_if_src+0x12e>
 801d318:	68fb      	ldr	r3, [r7, #12]
 801d31a:	891a      	ldrh	r2, [r3, #8]
 801d31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d320:	429a      	cmp	r2, r3
 801d322:	d906      	bls.n	801d332 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801d324:	687a      	ldr	r2, [r7, #4]
 801d326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d328:	68f8      	ldr	r0, [r7, #12]
 801d32a:	f000 fd53 	bl	801ddd4 <ip4_frag>
 801d32e:	4603      	mov	r3, r0
 801d330:	e006      	b.n	801d340 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d334:	695b      	ldr	r3, [r3, #20]
 801d336:	687a      	ldr	r2, [r7, #4]
 801d338:	68f9      	ldr	r1, [r7, #12]
 801d33a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d33c:	4798      	blx	r3
 801d33e:	4603      	mov	r3, r0
}
 801d340:	4618      	mov	r0, r3
 801d342:	3720      	adds	r7, #32
 801d344:	46bd      	mov	sp, r7
 801d346:	bd80      	pop	{r7, pc}
 801d348:	08024c60 	.word	0x08024c60
 801d34c:	08024c94 	.word	0x08024c94
 801d350:	08024ca0 	.word	0x08024ca0
 801d354:	08024cc8 	.word	0x08024cc8
 801d358:	20010352 	.word	0x20010352
 801d35c:	080251e8 	.word	0x080251e8

0801d360 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801d360:	b480      	push	{r7}
 801d362:	b085      	sub	sp, #20
 801d364:	af00      	add	r7, sp, #0
 801d366:	6078      	str	r0, [r7, #4]
 801d368:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d374:	d002      	beq.n	801d37c <ip4_addr_isbroadcast_u32+0x1c>
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d101      	bne.n	801d380 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801d37c:	2301      	movs	r3, #1
 801d37e:	e02a      	b.n	801d3d6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801d380:	683b      	ldr	r3, [r7, #0]
 801d382:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d386:	f003 0302 	and.w	r3, r3, #2
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d101      	bne.n	801d392 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801d38e:	2300      	movs	r3, #0
 801d390:	e021      	b.n	801d3d6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801d392:	683b      	ldr	r3, [r7, #0]
 801d394:	3304      	adds	r3, #4
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	687a      	ldr	r2, [r7, #4]
 801d39a:	429a      	cmp	r2, r3
 801d39c:	d101      	bne.n	801d3a2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801d39e:	2300      	movs	r3, #0
 801d3a0:	e019      	b.n	801d3d6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801d3a2:	68fa      	ldr	r2, [r7, #12]
 801d3a4:	683b      	ldr	r3, [r7, #0]
 801d3a6:	3304      	adds	r3, #4
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	405a      	eors	r2, r3
 801d3ac:	683b      	ldr	r3, [r7, #0]
 801d3ae:	3308      	adds	r3, #8
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	4013      	ands	r3, r2
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d10d      	bne.n	801d3d4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d3b8:	683b      	ldr	r3, [r7, #0]
 801d3ba:	3308      	adds	r3, #8
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	43da      	mvns	r2, r3
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801d3c4:	683b      	ldr	r3, [r7, #0]
 801d3c6:	3308      	adds	r3, #8
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801d3cc:	429a      	cmp	r2, r3
 801d3ce:	d101      	bne.n	801d3d4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801d3d0:	2301      	movs	r3, #1
 801d3d2:	e000      	b.n	801d3d6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801d3d4:	2300      	movs	r3, #0
  }
}
 801d3d6:	4618      	mov	r0, r3
 801d3d8:	3714      	adds	r7, #20
 801d3da:	46bd      	mov	sp, r7
 801d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3e0:	4770      	bx	lr
	...

0801d3e4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801d3e4:	b580      	push	{r7, lr}
 801d3e6:	b084      	sub	sp, #16
 801d3e8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801d3ea:	2300      	movs	r3, #0
 801d3ec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801d3ee:	4b12      	ldr	r3, [pc, #72]	; (801d438 <ip_reass_tmr+0x54>)
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801d3f4:	e018      	b.n	801d428 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	7fdb      	ldrb	r3, [r3, #31]
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	d00b      	beq.n	801d416 <ip_reass_tmr+0x32>
      r->timer--;
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	7fdb      	ldrb	r3, [r3, #31]
 801d402:	3b01      	subs	r3, #1
 801d404:	b2da      	uxtb	r2, r3
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801d40a:	68fb      	ldr	r3, [r7, #12]
 801d40c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	681b      	ldr	r3, [r3, #0]
 801d412:	60fb      	str	r3, [r7, #12]
 801d414:	e008      	b.n	801d428 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801d41a:	68fb      	ldr	r3, [r7, #12]
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801d420:	68b9      	ldr	r1, [r7, #8]
 801d422:	6878      	ldr	r0, [r7, #4]
 801d424:	f000 f80a 	bl	801d43c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d1e3      	bne.n	801d3f6 <ip_reass_tmr+0x12>
    }
  }
}
 801d42e:	bf00      	nop
 801d430:	bf00      	nop
 801d432:	3710      	adds	r7, #16
 801d434:	46bd      	mov	sp, r7
 801d436:	bd80      	pop	{r7, pc}
 801d438:	20010354 	.word	0x20010354

0801d43c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d43c:	b580      	push	{r7, lr}
 801d43e:	b088      	sub	sp, #32
 801d440:	af00      	add	r7, sp, #0
 801d442:	6078      	str	r0, [r7, #4]
 801d444:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801d446:	2300      	movs	r3, #0
 801d448:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801d44a:	683a      	ldr	r2, [r7, #0]
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	429a      	cmp	r2, r3
 801d450:	d105      	bne.n	801d45e <ip_reass_free_complete_datagram+0x22>
 801d452:	4b45      	ldr	r3, [pc, #276]	; (801d568 <ip_reass_free_complete_datagram+0x12c>)
 801d454:	22ab      	movs	r2, #171	; 0xab
 801d456:	4945      	ldr	r1, [pc, #276]	; (801d56c <ip_reass_free_complete_datagram+0x130>)
 801d458:	4845      	ldr	r0, [pc, #276]	; (801d570 <ip_reass_free_complete_datagram+0x134>)
 801d45a:	f002 fa27 	bl	801f8ac <iprintf>
  if (prev != NULL) {
 801d45e:	683b      	ldr	r3, [r7, #0]
 801d460:	2b00      	cmp	r3, #0
 801d462:	d00a      	beq.n	801d47a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801d464:	683b      	ldr	r3, [r7, #0]
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	687a      	ldr	r2, [r7, #4]
 801d46a:	429a      	cmp	r2, r3
 801d46c:	d005      	beq.n	801d47a <ip_reass_free_complete_datagram+0x3e>
 801d46e:	4b3e      	ldr	r3, [pc, #248]	; (801d568 <ip_reass_free_complete_datagram+0x12c>)
 801d470:	22ad      	movs	r2, #173	; 0xad
 801d472:	4940      	ldr	r1, [pc, #256]	; (801d574 <ip_reass_free_complete_datagram+0x138>)
 801d474:	483e      	ldr	r0, [pc, #248]	; (801d570 <ip_reass_free_complete_datagram+0x134>)
 801d476:	f002 fa19 	bl	801f8ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	685b      	ldr	r3, [r3, #4]
 801d47e:	685b      	ldr	r3, [r3, #4]
 801d480:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801d482:	697b      	ldr	r3, [r7, #20]
 801d484:	889b      	ldrh	r3, [r3, #4]
 801d486:	b29b      	uxth	r3, r3
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d12a      	bne.n	801d4e2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801d48c:	687b      	ldr	r3, [r7, #4]
 801d48e:	685b      	ldr	r3, [r3, #4]
 801d490:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801d492:	697b      	ldr	r3, [r7, #20]
 801d494:	681a      	ldr	r2, [r3, #0]
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801d49a:	69bb      	ldr	r3, [r7, #24]
 801d49c:	6858      	ldr	r0, [r3, #4]
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	3308      	adds	r3, #8
 801d4a2:	2214      	movs	r2, #20
 801d4a4:	4619      	mov	r1, r3
 801d4a6:	f002 fc66 	bl	801fd76 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801d4aa:	2101      	movs	r1, #1
 801d4ac:	69b8      	ldr	r0, [r7, #24]
 801d4ae:	f7ff fc29 	bl	801cd04 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801d4b2:	69b8      	ldr	r0, [r7, #24]
 801d4b4:	f7f5 fc18 	bl	8012ce8 <pbuf_clen>
 801d4b8:	4603      	mov	r3, r0
 801d4ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d4bc:	8bfa      	ldrh	r2, [r7, #30]
 801d4be:	8a7b      	ldrh	r3, [r7, #18]
 801d4c0:	4413      	add	r3, r2
 801d4c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d4c6:	db05      	blt.n	801d4d4 <ip_reass_free_complete_datagram+0x98>
 801d4c8:	4b27      	ldr	r3, [pc, #156]	; (801d568 <ip_reass_free_complete_datagram+0x12c>)
 801d4ca:	22bc      	movs	r2, #188	; 0xbc
 801d4cc:	492a      	ldr	r1, [pc, #168]	; (801d578 <ip_reass_free_complete_datagram+0x13c>)
 801d4ce:	4828      	ldr	r0, [pc, #160]	; (801d570 <ip_reass_free_complete_datagram+0x134>)
 801d4d0:	f002 f9ec 	bl	801f8ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d4d4:	8bfa      	ldrh	r2, [r7, #30]
 801d4d6:	8a7b      	ldrh	r3, [r7, #18]
 801d4d8:	4413      	add	r3, r2
 801d4da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d4dc:	69b8      	ldr	r0, [r7, #24]
 801d4de:	f7f5 fb75 	bl	8012bcc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	685b      	ldr	r3, [r3, #4]
 801d4e6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d4e8:	e01f      	b.n	801d52a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d4ea:	69bb      	ldr	r3, [r7, #24]
 801d4ec:	685b      	ldr	r3, [r3, #4]
 801d4ee:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d4f0:	69bb      	ldr	r3, [r7, #24]
 801d4f2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d4f4:	697b      	ldr	r3, [r7, #20]
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d4fa:	68f8      	ldr	r0, [r7, #12]
 801d4fc:	f7f5 fbf4 	bl	8012ce8 <pbuf_clen>
 801d500:	4603      	mov	r3, r0
 801d502:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d504:	8bfa      	ldrh	r2, [r7, #30]
 801d506:	8a7b      	ldrh	r3, [r7, #18]
 801d508:	4413      	add	r3, r2
 801d50a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d50e:	db05      	blt.n	801d51c <ip_reass_free_complete_datagram+0xe0>
 801d510:	4b15      	ldr	r3, [pc, #84]	; (801d568 <ip_reass_free_complete_datagram+0x12c>)
 801d512:	22cc      	movs	r2, #204	; 0xcc
 801d514:	4918      	ldr	r1, [pc, #96]	; (801d578 <ip_reass_free_complete_datagram+0x13c>)
 801d516:	4816      	ldr	r0, [pc, #88]	; (801d570 <ip_reass_free_complete_datagram+0x134>)
 801d518:	f002 f9c8 	bl	801f8ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d51c:	8bfa      	ldrh	r2, [r7, #30]
 801d51e:	8a7b      	ldrh	r3, [r7, #18]
 801d520:	4413      	add	r3, r2
 801d522:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d524:	68f8      	ldr	r0, [r7, #12]
 801d526:	f7f5 fb51 	bl	8012bcc <pbuf_free>
  while (p != NULL) {
 801d52a:	69bb      	ldr	r3, [r7, #24]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d1dc      	bne.n	801d4ea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d530:	6839      	ldr	r1, [r7, #0]
 801d532:	6878      	ldr	r0, [r7, #4]
 801d534:	f000 f8c2 	bl	801d6bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d538:	4b10      	ldr	r3, [pc, #64]	; (801d57c <ip_reass_free_complete_datagram+0x140>)
 801d53a:	881b      	ldrh	r3, [r3, #0]
 801d53c:	8bfa      	ldrh	r2, [r7, #30]
 801d53e:	429a      	cmp	r2, r3
 801d540:	d905      	bls.n	801d54e <ip_reass_free_complete_datagram+0x112>
 801d542:	4b09      	ldr	r3, [pc, #36]	; (801d568 <ip_reass_free_complete_datagram+0x12c>)
 801d544:	22d2      	movs	r2, #210	; 0xd2
 801d546:	490e      	ldr	r1, [pc, #56]	; (801d580 <ip_reass_free_complete_datagram+0x144>)
 801d548:	4809      	ldr	r0, [pc, #36]	; (801d570 <ip_reass_free_complete_datagram+0x134>)
 801d54a:	f002 f9af 	bl	801f8ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d54e:	4b0b      	ldr	r3, [pc, #44]	; (801d57c <ip_reass_free_complete_datagram+0x140>)
 801d550:	881a      	ldrh	r2, [r3, #0]
 801d552:	8bfb      	ldrh	r3, [r7, #30]
 801d554:	1ad3      	subs	r3, r2, r3
 801d556:	b29a      	uxth	r2, r3
 801d558:	4b08      	ldr	r3, [pc, #32]	; (801d57c <ip_reass_free_complete_datagram+0x140>)
 801d55a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d55c:	8bfb      	ldrh	r3, [r7, #30]
}
 801d55e:	4618      	mov	r0, r3
 801d560:	3720      	adds	r7, #32
 801d562:	46bd      	mov	sp, r7
 801d564:	bd80      	pop	{r7, pc}
 801d566:	bf00      	nop
 801d568:	08024cf8 	.word	0x08024cf8
 801d56c:	08024d34 	.word	0x08024d34
 801d570:	08024d40 	.word	0x08024d40
 801d574:	08024d68 	.word	0x08024d68
 801d578:	08024d7c 	.word	0x08024d7c
 801d57c:	20010358 	.word	0x20010358
 801d580:	08024d9c 	.word	0x08024d9c

0801d584 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d584:	b580      	push	{r7, lr}
 801d586:	b08a      	sub	sp, #40	; 0x28
 801d588:	af00      	add	r7, sp, #0
 801d58a:	6078      	str	r0, [r7, #4]
 801d58c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d58e:	2300      	movs	r3, #0
 801d590:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d592:	2300      	movs	r3, #0
 801d594:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d596:	2300      	movs	r3, #0
 801d598:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d59a:	2300      	movs	r3, #0
 801d59c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d59e:	2300      	movs	r3, #0
 801d5a0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d5a2:	4b28      	ldr	r3, [pc, #160]	; (801d644 <ip_reass_remove_oldest_datagram+0xc0>)
 801d5a4:	681b      	ldr	r3, [r3, #0]
 801d5a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d5a8:	e030      	b.n	801d60c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5ac:	695a      	ldr	r2, [r3, #20]
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	68db      	ldr	r3, [r3, #12]
 801d5b2:	429a      	cmp	r2, r3
 801d5b4:	d10c      	bne.n	801d5d0 <ip_reass_remove_oldest_datagram+0x4c>
 801d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5b8:	699a      	ldr	r2, [r3, #24]
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	691b      	ldr	r3, [r3, #16]
 801d5be:	429a      	cmp	r2, r3
 801d5c0:	d106      	bne.n	801d5d0 <ip_reass_remove_oldest_datagram+0x4c>
 801d5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5c4:	899a      	ldrh	r2, [r3, #12]
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	889b      	ldrh	r3, [r3, #4]
 801d5ca:	b29b      	uxth	r3, r3
 801d5cc:	429a      	cmp	r2, r3
 801d5ce:	d014      	beq.n	801d5fa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d5d0:	693b      	ldr	r3, [r7, #16]
 801d5d2:	3301      	adds	r3, #1
 801d5d4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d5d6:	6a3b      	ldr	r3, [r7, #32]
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d104      	bne.n	801d5e6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5de:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d5e0:	69fb      	ldr	r3, [r7, #28]
 801d5e2:	61bb      	str	r3, [r7, #24]
 801d5e4:	e009      	b.n	801d5fa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5e8:	7fda      	ldrb	r2, [r3, #31]
 801d5ea:	6a3b      	ldr	r3, [r7, #32]
 801d5ec:	7fdb      	ldrb	r3, [r3, #31]
 801d5ee:	429a      	cmp	r2, r3
 801d5f0:	d803      	bhi.n	801d5fa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5f4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d5f6:	69fb      	ldr	r3, [r7, #28]
 801d5f8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5fc:	681b      	ldr	r3, [r3, #0]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d001      	beq.n	801d606 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d604:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d1cb      	bne.n	801d5aa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d612:	6a3b      	ldr	r3, [r7, #32]
 801d614:	2b00      	cmp	r3, #0
 801d616:	d008      	beq.n	801d62a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d618:	69b9      	ldr	r1, [r7, #24]
 801d61a:	6a38      	ldr	r0, [r7, #32]
 801d61c:	f7ff ff0e 	bl	801d43c <ip_reass_free_complete_datagram>
 801d620:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d622:	697a      	ldr	r2, [r7, #20]
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	4413      	add	r3, r2
 801d628:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d62a:	697a      	ldr	r2, [r7, #20]
 801d62c:	683b      	ldr	r3, [r7, #0]
 801d62e:	429a      	cmp	r2, r3
 801d630:	da02      	bge.n	801d638 <ip_reass_remove_oldest_datagram+0xb4>
 801d632:	693b      	ldr	r3, [r7, #16]
 801d634:	2b01      	cmp	r3, #1
 801d636:	dcac      	bgt.n	801d592 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d638:	697b      	ldr	r3, [r7, #20]
}
 801d63a:	4618      	mov	r0, r3
 801d63c:	3728      	adds	r7, #40	; 0x28
 801d63e:	46bd      	mov	sp, r7
 801d640:	bd80      	pop	{r7, pc}
 801d642:	bf00      	nop
 801d644:	20010354 	.word	0x20010354

0801d648 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d648:	b580      	push	{r7, lr}
 801d64a:	b084      	sub	sp, #16
 801d64c:	af00      	add	r7, sp, #0
 801d64e:	6078      	str	r0, [r7, #4]
 801d650:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d652:	2004      	movs	r0, #4
 801d654:	f7f4 fb5c 	bl	8011d10 <memp_malloc>
 801d658:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d110      	bne.n	801d682 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d660:	6839      	ldr	r1, [r7, #0]
 801d662:	6878      	ldr	r0, [r7, #4]
 801d664:	f7ff ff8e 	bl	801d584 <ip_reass_remove_oldest_datagram>
 801d668:	4602      	mov	r2, r0
 801d66a:	683b      	ldr	r3, [r7, #0]
 801d66c:	4293      	cmp	r3, r2
 801d66e:	dc03      	bgt.n	801d678 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d670:	2004      	movs	r0, #4
 801d672:	f7f4 fb4d 	bl	8011d10 <memp_malloc>
 801d676:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d678:	68fb      	ldr	r3, [r7, #12]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d101      	bne.n	801d682 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d67e:	2300      	movs	r3, #0
 801d680:	e016      	b.n	801d6b0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d682:	2220      	movs	r2, #32
 801d684:	2100      	movs	r1, #0
 801d686:	68f8      	ldr	r0, [r7, #12]
 801d688:	f002 fa66 	bl	801fb58 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	220f      	movs	r2, #15
 801d690:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d692:	4b09      	ldr	r3, [pc, #36]	; (801d6b8 <ip_reass_enqueue_new_datagram+0x70>)
 801d694:	681a      	ldr	r2, [r3, #0]
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d69a:	4a07      	ldr	r2, [pc, #28]	; (801d6b8 <ip_reass_enqueue_new_datagram+0x70>)
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d6a0:	68fb      	ldr	r3, [r7, #12]
 801d6a2:	3308      	adds	r3, #8
 801d6a4:	2214      	movs	r2, #20
 801d6a6:	6879      	ldr	r1, [r7, #4]
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	f002 fb64 	bl	801fd76 <memcpy>
  return ipr;
 801d6ae:	68fb      	ldr	r3, [r7, #12]
}
 801d6b0:	4618      	mov	r0, r3
 801d6b2:	3710      	adds	r7, #16
 801d6b4:	46bd      	mov	sp, r7
 801d6b6:	bd80      	pop	{r7, pc}
 801d6b8:	20010354 	.word	0x20010354

0801d6bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b082      	sub	sp, #8
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
 801d6c4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d6c6:	4b10      	ldr	r3, [pc, #64]	; (801d708 <ip_reass_dequeue_datagram+0x4c>)
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	687a      	ldr	r2, [r7, #4]
 801d6cc:	429a      	cmp	r2, r3
 801d6ce:	d104      	bne.n	801d6da <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	4a0c      	ldr	r2, [pc, #48]	; (801d708 <ip_reass_dequeue_datagram+0x4c>)
 801d6d6:	6013      	str	r3, [r2, #0]
 801d6d8:	e00d      	b.n	801d6f6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d6da:	683b      	ldr	r3, [r7, #0]
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	d106      	bne.n	801d6ee <ip_reass_dequeue_datagram+0x32>
 801d6e0:	4b0a      	ldr	r3, [pc, #40]	; (801d70c <ip_reass_dequeue_datagram+0x50>)
 801d6e2:	f240 1245 	movw	r2, #325	; 0x145
 801d6e6:	490a      	ldr	r1, [pc, #40]	; (801d710 <ip_reass_dequeue_datagram+0x54>)
 801d6e8:	480a      	ldr	r0, [pc, #40]	; (801d714 <ip_reass_dequeue_datagram+0x58>)
 801d6ea:	f002 f8df 	bl	801f8ac <iprintf>
    prev->next = ipr->next;
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	681a      	ldr	r2, [r3, #0]
 801d6f2:	683b      	ldr	r3, [r7, #0]
 801d6f4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d6f6:	6879      	ldr	r1, [r7, #4]
 801d6f8:	2004      	movs	r0, #4
 801d6fa:	f7f4 fb7f 	bl	8011dfc <memp_free>
}
 801d6fe:	bf00      	nop
 801d700:	3708      	adds	r7, #8
 801d702:	46bd      	mov	sp, r7
 801d704:	bd80      	pop	{r7, pc}
 801d706:	bf00      	nop
 801d708:	20010354 	.word	0x20010354
 801d70c:	08024cf8 	.word	0x08024cf8
 801d710:	08024dc0 	.word	0x08024dc0
 801d714:	08024d40 	.word	0x08024d40

0801d718 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d718:	b580      	push	{r7, lr}
 801d71a:	b08c      	sub	sp, #48	; 0x30
 801d71c:	af00      	add	r7, sp, #0
 801d71e:	60f8      	str	r0, [r7, #12]
 801d720:	60b9      	str	r1, [r7, #8]
 801d722:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d724:	2300      	movs	r3, #0
 801d726:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d728:	2301      	movs	r3, #1
 801d72a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d72c:	68bb      	ldr	r3, [r7, #8]
 801d72e:	685b      	ldr	r3, [r3, #4]
 801d730:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d732:	69fb      	ldr	r3, [r7, #28]
 801d734:	885b      	ldrh	r3, [r3, #2]
 801d736:	b29b      	uxth	r3, r3
 801d738:	4618      	mov	r0, r3
 801d73a:	f7f3 fe11 	bl	8011360 <lwip_htons>
 801d73e:	4603      	mov	r3, r0
 801d740:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d742:	69fb      	ldr	r3, [r7, #28]
 801d744:	781b      	ldrb	r3, [r3, #0]
 801d746:	f003 030f 	and.w	r3, r3, #15
 801d74a:	b2db      	uxtb	r3, r3
 801d74c:	009b      	lsls	r3, r3, #2
 801d74e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d750:	7e7b      	ldrb	r3, [r7, #25]
 801d752:	b29b      	uxth	r3, r3
 801d754:	8b7a      	ldrh	r2, [r7, #26]
 801d756:	429a      	cmp	r2, r3
 801d758:	d202      	bcs.n	801d760 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d75a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d75e:	e135      	b.n	801d9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d760:	7e7b      	ldrb	r3, [r7, #25]
 801d762:	b29b      	uxth	r3, r3
 801d764:	8b7a      	ldrh	r2, [r7, #26]
 801d766:	1ad3      	subs	r3, r2, r3
 801d768:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d76a:	69fb      	ldr	r3, [r7, #28]
 801d76c:	88db      	ldrh	r3, [r3, #6]
 801d76e:	b29b      	uxth	r3, r3
 801d770:	4618      	mov	r0, r3
 801d772:	f7f3 fdf5 	bl	8011360 <lwip_htons>
 801d776:	4603      	mov	r3, r0
 801d778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d77c:	b29b      	uxth	r3, r3
 801d77e:	00db      	lsls	r3, r3, #3
 801d780:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d782:	68bb      	ldr	r3, [r7, #8]
 801d784:	685b      	ldr	r3, [r3, #4]
 801d786:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d78a:	2200      	movs	r2, #0
 801d78c:	701a      	strb	r2, [r3, #0]
 801d78e:	2200      	movs	r2, #0
 801d790:	705a      	strb	r2, [r3, #1]
 801d792:	2200      	movs	r2, #0
 801d794:	709a      	strb	r2, [r3, #2]
 801d796:	2200      	movs	r2, #0
 801d798:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d79c:	8afa      	ldrh	r2, [r7, #22]
 801d79e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d7a0:	8afa      	ldrh	r2, [r7, #22]
 801d7a2:	8b7b      	ldrh	r3, [r7, #26]
 801d7a4:	4413      	add	r3, r2
 801d7a6:	b29a      	uxth	r2, r3
 801d7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7aa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7ae:	88db      	ldrh	r3, [r3, #6]
 801d7b0:	b29b      	uxth	r3, r3
 801d7b2:	8afa      	ldrh	r2, [r7, #22]
 801d7b4:	429a      	cmp	r2, r3
 801d7b6:	d902      	bls.n	801d7be <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d7b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d7bc:	e106      	b.n	801d9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	685b      	ldr	r3, [r3, #4]
 801d7c2:	627b      	str	r3, [r7, #36]	; 0x24
 801d7c4:	e068      	b.n	801d898 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7c8:	685b      	ldr	r3, [r3, #4]
 801d7ca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7ce:	889b      	ldrh	r3, [r3, #4]
 801d7d0:	b29a      	uxth	r2, r3
 801d7d2:	693b      	ldr	r3, [r7, #16]
 801d7d4:	889b      	ldrh	r3, [r3, #4]
 801d7d6:	b29b      	uxth	r3, r3
 801d7d8:	429a      	cmp	r2, r3
 801d7da:	d235      	bcs.n	801d848 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d7e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d020      	beq.n	801d82a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7ea:	889b      	ldrh	r3, [r3, #4]
 801d7ec:	b29a      	uxth	r2, r3
 801d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7f0:	88db      	ldrh	r3, [r3, #6]
 801d7f2:	b29b      	uxth	r3, r3
 801d7f4:	429a      	cmp	r2, r3
 801d7f6:	d307      	bcc.n	801d808 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7fa:	88db      	ldrh	r3, [r3, #6]
 801d7fc:	b29a      	uxth	r2, r3
 801d7fe:	693b      	ldr	r3, [r7, #16]
 801d800:	889b      	ldrh	r3, [r3, #4]
 801d802:	b29b      	uxth	r3, r3
 801d804:	429a      	cmp	r2, r3
 801d806:	d902      	bls.n	801d80e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d80c:	e0de      	b.n	801d9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d810:	68ba      	ldr	r2, [r7, #8]
 801d812:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d816:	88db      	ldrh	r3, [r3, #6]
 801d818:	b29a      	uxth	r2, r3
 801d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d81c:	889b      	ldrh	r3, [r3, #4]
 801d81e:	b29b      	uxth	r3, r3
 801d820:	429a      	cmp	r2, r3
 801d822:	d03d      	beq.n	801d8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d824:	2300      	movs	r3, #0
 801d826:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d828:	e03a      	b.n	801d8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d82c:	88db      	ldrh	r3, [r3, #6]
 801d82e:	b29a      	uxth	r2, r3
 801d830:	693b      	ldr	r3, [r7, #16]
 801d832:	889b      	ldrh	r3, [r3, #4]
 801d834:	b29b      	uxth	r3, r3
 801d836:	429a      	cmp	r2, r3
 801d838:	d902      	bls.n	801d840 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d83a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d83e:	e0c5      	b.n	801d9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d840:	68fb      	ldr	r3, [r7, #12]
 801d842:	68ba      	ldr	r2, [r7, #8]
 801d844:	605a      	str	r2, [r3, #4]
      break;
 801d846:	e02b      	b.n	801d8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d84a:	889b      	ldrh	r3, [r3, #4]
 801d84c:	b29a      	uxth	r2, r3
 801d84e:	693b      	ldr	r3, [r7, #16]
 801d850:	889b      	ldrh	r3, [r3, #4]
 801d852:	b29b      	uxth	r3, r3
 801d854:	429a      	cmp	r2, r3
 801d856:	d102      	bne.n	801d85e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d85c:	e0b6      	b.n	801d9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d860:	889b      	ldrh	r3, [r3, #4]
 801d862:	b29a      	uxth	r2, r3
 801d864:	693b      	ldr	r3, [r7, #16]
 801d866:	88db      	ldrh	r3, [r3, #6]
 801d868:	b29b      	uxth	r3, r3
 801d86a:	429a      	cmp	r2, r3
 801d86c:	d202      	bcs.n	801d874 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d86e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d872:	e0ab      	b.n	801d9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d876:	2b00      	cmp	r3, #0
 801d878:	d009      	beq.n	801d88e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d87c:	88db      	ldrh	r3, [r3, #6]
 801d87e:	b29a      	uxth	r2, r3
 801d880:	693b      	ldr	r3, [r7, #16]
 801d882:	889b      	ldrh	r3, [r3, #4]
 801d884:	b29b      	uxth	r3, r3
 801d886:	429a      	cmp	r2, r3
 801d888:	d001      	beq.n	801d88e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d88a:	2300      	movs	r3, #0
 801d88c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d88e:	693b      	ldr	r3, [r7, #16]
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d894:	693b      	ldr	r3, [r7, #16]
 801d896:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	d193      	bne.n	801d7c6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d89e:	e000      	b.n	801d8a2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d8a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d12d      	bne.n	801d904 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d01c      	beq.n	801d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8b0:	88db      	ldrh	r3, [r3, #6]
 801d8b2:	b29a      	uxth	r2, r3
 801d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8b6:	889b      	ldrh	r3, [r3, #4]
 801d8b8:	b29b      	uxth	r3, r3
 801d8ba:	429a      	cmp	r2, r3
 801d8bc:	d906      	bls.n	801d8cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d8be:	4b45      	ldr	r3, [pc, #276]	; (801d9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d8c0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d8c4:	4944      	ldr	r1, [pc, #272]	; (801d9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d8c6:	4845      	ldr	r0, [pc, #276]	; (801d9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d8c8:	f001 fff0 	bl	801f8ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8ce:	68ba      	ldr	r2, [r7, #8]
 801d8d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8d4:	88db      	ldrh	r3, [r3, #6]
 801d8d6:	b29a      	uxth	r2, r3
 801d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d8da:	889b      	ldrh	r3, [r3, #4]
 801d8dc:	b29b      	uxth	r3, r3
 801d8de:	429a      	cmp	r2, r3
 801d8e0:	d010      	beq.n	801d904 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	623b      	str	r3, [r7, #32]
 801d8e6:	e00d      	b.n	801d904 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d8e8:	68fb      	ldr	r3, [r7, #12]
 801d8ea:	685b      	ldr	r3, [r3, #4]
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d006      	beq.n	801d8fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d8f0:	4b38      	ldr	r3, [pc, #224]	; (801d9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d8f2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d8f6:	493a      	ldr	r1, [pc, #232]	; (801d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d8f8:	4838      	ldr	r0, [pc, #224]	; (801d9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d8fa:	f001 ffd7 	bl	801f8ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	68ba      	ldr	r2, [r7, #8]
 801d902:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	2b00      	cmp	r3, #0
 801d908:	d105      	bne.n	801d916 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	7f9b      	ldrb	r3, [r3, #30]
 801d90e:	f003 0301 	and.w	r3, r3, #1
 801d912:	2b00      	cmp	r3, #0
 801d914:	d059      	beq.n	801d9ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d916:	6a3b      	ldr	r3, [r7, #32]
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d04f      	beq.n	801d9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	685b      	ldr	r3, [r3, #4]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d006      	beq.n	801d932 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	685b      	ldr	r3, [r3, #4]
 801d928:	685b      	ldr	r3, [r3, #4]
 801d92a:	889b      	ldrh	r3, [r3, #4]
 801d92c:	b29b      	uxth	r3, r3
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d002      	beq.n	801d938 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d932:	2300      	movs	r3, #0
 801d934:	623b      	str	r3, [r7, #32]
 801d936:	e041      	b.n	801d9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d93a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d942:	e012      	b.n	801d96a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d946:	685b      	ldr	r3, [r3, #4]
 801d948:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d94c:	88db      	ldrh	r3, [r3, #6]
 801d94e:	b29a      	uxth	r2, r3
 801d950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d952:	889b      	ldrh	r3, [r3, #4]
 801d954:	b29b      	uxth	r3, r3
 801d956:	429a      	cmp	r2, r3
 801d958:	d002      	beq.n	801d960 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d95a:	2300      	movs	r3, #0
 801d95c:	623b      	str	r3, [r7, #32]
            break;
 801d95e:	e007      	b.n	801d970 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d962:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d1e9      	bne.n	801d944 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d970:	6a3b      	ldr	r3, [r7, #32]
 801d972:	2b00      	cmp	r3, #0
 801d974:	d022      	beq.n	801d9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	685b      	ldr	r3, [r3, #4]
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	d106      	bne.n	801d98c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d97e:	4b15      	ldr	r3, [pc, #84]	; (801d9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d980:	f240 12df 	movw	r2, #479	; 0x1df
 801d984:	4917      	ldr	r1, [pc, #92]	; (801d9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d986:	4815      	ldr	r0, [pc, #84]	; (801d9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d988:	f001 ff90 	bl	801f8ac <iprintf>
          LWIP_ASSERT("sanity check",
 801d98c:	68fb      	ldr	r3, [r7, #12]
 801d98e:	685b      	ldr	r3, [r3, #4]
 801d990:	685b      	ldr	r3, [r3, #4]
 801d992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d994:	429a      	cmp	r2, r3
 801d996:	d106      	bne.n	801d9a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d998:	4b0e      	ldr	r3, [pc, #56]	; (801d9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d99a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d99e:	4911      	ldr	r1, [pc, #68]	; (801d9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d9a0:	480e      	ldr	r0, [pc, #56]	; (801d9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d9a2:	f001 ff83 	bl	801f8ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d006      	beq.n	801d9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d9ae:	4b09      	ldr	r3, [pc, #36]	; (801d9d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d9b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d9b4:	490c      	ldr	r1, [pc, #48]	; (801d9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d9b6:	4809      	ldr	r0, [pc, #36]	; (801d9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d9b8:	f001 ff78 	bl	801f8ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d9bc:	6a3b      	ldr	r3, [r7, #32]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	bf14      	ite	ne
 801d9c2:	2301      	movne	r3, #1
 801d9c4:	2300      	moveq	r3, #0
 801d9c6:	b2db      	uxtb	r3, r3
 801d9c8:	e000      	b.n	801d9cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d9ca:	2300      	movs	r3, #0
}
 801d9cc:	4618      	mov	r0, r3
 801d9ce:	3730      	adds	r7, #48	; 0x30
 801d9d0:	46bd      	mov	sp, r7
 801d9d2:	bd80      	pop	{r7, pc}
 801d9d4:	08024cf8 	.word	0x08024cf8
 801d9d8:	08024ddc 	.word	0x08024ddc
 801d9dc:	08024d40 	.word	0x08024d40
 801d9e0:	08024dfc 	.word	0x08024dfc
 801d9e4:	08024e34 	.word	0x08024e34
 801d9e8:	08024e44 	.word	0x08024e44

0801d9ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d9ec:	b580      	push	{r7, lr}
 801d9ee:	b08e      	sub	sp, #56	; 0x38
 801d9f0:	af00      	add	r7, sp, #0
 801d9f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	685b      	ldr	r3, [r3, #4]
 801d9f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9fc:	781b      	ldrb	r3, [r3, #0]
 801d9fe:	f003 030f 	and.w	r3, r3, #15
 801da02:	b2db      	uxtb	r3, r3
 801da04:	009b      	lsls	r3, r3, #2
 801da06:	b2db      	uxtb	r3, r3
 801da08:	2b14      	cmp	r3, #20
 801da0a:	f040 8171 	bne.w	801dcf0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da10:	88db      	ldrh	r3, [r3, #6]
 801da12:	b29b      	uxth	r3, r3
 801da14:	4618      	mov	r0, r3
 801da16:	f7f3 fca3 	bl	8011360 <lwip_htons>
 801da1a:	4603      	mov	r3, r0
 801da1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da20:	b29b      	uxth	r3, r3
 801da22:	00db      	lsls	r3, r3, #3
 801da24:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801da26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da28:	885b      	ldrh	r3, [r3, #2]
 801da2a:	b29b      	uxth	r3, r3
 801da2c:	4618      	mov	r0, r3
 801da2e:	f7f3 fc97 	bl	8011360 <lwip_htons>
 801da32:	4603      	mov	r3, r0
 801da34:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801da36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da38:	781b      	ldrb	r3, [r3, #0]
 801da3a:	f003 030f 	and.w	r3, r3, #15
 801da3e:	b2db      	uxtb	r3, r3
 801da40:	009b      	lsls	r3, r3, #2
 801da42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801da46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801da4a:	b29b      	uxth	r3, r3
 801da4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801da4e:	429a      	cmp	r2, r3
 801da50:	f0c0 8150 	bcc.w	801dcf4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801da54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801da58:	b29b      	uxth	r3, r3
 801da5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801da5c:	1ad3      	subs	r3, r2, r3
 801da5e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801da60:	6878      	ldr	r0, [r7, #4]
 801da62:	f7f5 f941 	bl	8012ce8 <pbuf_clen>
 801da66:	4603      	mov	r3, r0
 801da68:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801da6a:	4b8c      	ldr	r3, [pc, #560]	; (801dc9c <ip4_reass+0x2b0>)
 801da6c:	881b      	ldrh	r3, [r3, #0]
 801da6e:	461a      	mov	r2, r3
 801da70:	8c3b      	ldrh	r3, [r7, #32]
 801da72:	4413      	add	r3, r2
 801da74:	2b0a      	cmp	r3, #10
 801da76:	dd10      	ble.n	801da9a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801da78:	8c3b      	ldrh	r3, [r7, #32]
 801da7a:	4619      	mov	r1, r3
 801da7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801da7e:	f7ff fd81 	bl	801d584 <ip_reass_remove_oldest_datagram>
 801da82:	4603      	mov	r3, r0
 801da84:	2b00      	cmp	r3, #0
 801da86:	f000 8137 	beq.w	801dcf8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801da8a:	4b84      	ldr	r3, [pc, #528]	; (801dc9c <ip4_reass+0x2b0>)
 801da8c:	881b      	ldrh	r3, [r3, #0]
 801da8e:	461a      	mov	r2, r3
 801da90:	8c3b      	ldrh	r3, [r7, #32]
 801da92:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801da94:	2b0a      	cmp	r3, #10
 801da96:	f300 812f 	bgt.w	801dcf8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801da9a:	4b81      	ldr	r3, [pc, #516]	; (801dca0 <ip4_reass+0x2b4>)
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	633b      	str	r3, [r7, #48]	; 0x30
 801daa0:	e015      	b.n	801dace <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801daa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daa4:	695a      	ldr	r2, [r3, #20]
 801daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daa8:	68db      	ldr	r3, [r3, #12]
 801daaa:	429a      	cmp	r2, r3
 801daac:	d10c      	bne.n	801dac8 <ip4_reass+0xdc>
 801daae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dab0:	699a      	ldr	r2, [r3, #24]
 801dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dab4:	691b      	ldr	r3, [r3, #16]
 801dab6:	429a      	cmp	r2, r3
 801dab8:	d106      	bne.n	801dac8 <ip4_reass+0xdc>
 801daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dabc:	899a      	ldrh	r2, [r3, #12]
 801dabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dac0:	889b      	ldrh	r3, [r3, #4]
 801dac2:	b29b      	uxth	r3, r3
 801dac4:	429a      	cmp	r2, r3
 801dac6:	d006      	beq.n	801dad6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	633b      	str	r3, [r7, #48]	; 0x30
 801dace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d1e6      	bne.n	801daa2 <ip4_reass+0xb6>
 801dad4:	e000      	b.n	801dad8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801dad6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dada:	2b00      	cmp	r3, #0
 801dadc:	d109      	bne.n	801daf2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801dade:	8c3b      	ldrh	r3, [r7, #32]
 801dae0:	4619      	mov	r1, r3
 801dae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dae4:	f7ff fdb0 	bl	801d648 <ip_reass_enqueue_new_datagram>
 801dae8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801daea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daec:	2b00      	cmp	r3, #0
 801daee:	d11c      	bne.n	801db2a <ip4_reass+0x13e>
      goto nullreturn;
 801daf0:	e105      	b.n	801dcfe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daf4:	88db      	ldrh	r3, [r3, #6]
 801daf6:	b29b      	uxth	r3, r3
 801daf8:	4618      	mov	r0, r3
 801dafa:	f7f3 fc31 	bl	8011360 <lwip_htons>
 801dafe:	4603      	mov	r3, r0
 801db00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801db04:	2b00      	cmp	r3, #0
 801db06:	d110      	bne.n	801db2a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db0a:	89db      	ldrh	r3, [r3, #14]
 801db0c:	4618      	mov	r0, r3
 801db0e:	f7f3 fc27 	bl	8011360 <lwip_htons>
 801db12:	4603      	mov	r3, r0
 801db14:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d006      	beq.n	801db2a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db1e:	3308      	adds	r3, #8
 801db20:	2214      	movs	r2, #20
 801db22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801db24:	4618      	mov	r0, r3
 801db26:	f002 f926 	bl	801fd76 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801db2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801db2c:	88db      	ldrh	r3, [r3, #6]
 801db2e:	b29b      	uxth	r3, r3
 801db30:	f003 0320 	and.w	r3, r3, #32
 801db34:	2b00      	cmp	r3, #0
 801db36:	bf0c      	ite	eq
 801db38:	2301      	moveq	r3, #1
 801db3a:	2300      	movne	r3, #0
 801db3c:	b2db      	uxtb	r3, r3
 801db3e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801db40:	69fb      	ldr	r3, [r7, #28]
 801db42:	2b00      	cmp	r3, #0
 801db44:	d00e      	beq.n	801db64 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801db46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801db48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801db4a:	4413      	add	r3, r2
 801db4c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801db4e:	8b7a      	ldrh	r2, [r7, #26]
 801db50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801db52:	429a      	cmp	r2, r3
 801db54:	f0c0 80a0 	bcc.w	801dc98 <ip4_reass+0x2ac>
 801db58:	8b7b      	ldrh	r3, [r7, #26]
 801db5a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801db5e:	4293      	cmp	r3, r2
 801db60:	f200 809a 	bhi.w	801dc98 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801db64:	69fa      	ldr	r2, [r7, #28]
 801db66:	6879      	ldr	r1, [r7, #4]
 801db68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801db6a:	f7ff fdd5 	bl	801d718 <ip_reass_chain_frag_into_datagram_and_validate>
 801db6e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801db70:	697b      	ldr	r3, [r7, #20]
 801db72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801db76:	f000 809b 	beq.w	801dcb0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801db7a:	4b48      	ldr	r3, [pc, #288]	; (801dc9c <ip4_reass+0x2b0>)
 801db7c:	881a      	ldrh	r2, [r3, #0]
 801db7e:	8c3b      	ldrh	r3, [r7, #32]
 801db80:	4413      	add	r3, r2
 801db82:	b29a      	uxth	r2, r3
 801db84:	4b45      	ldr	r3, [pc, #276]	; (801dc9c <ip4_reass+0x2b0>)
 801db86:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801db88:	69fb      	ldr	r3, [r7, #28]
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	d00d      	beq.n	801dbaa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801db8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801db90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801db92:	4413      	add	r3, r2
 801db94:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db98:	8a7a      	ldrh	r2, [r7, #18]
 801db9a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db9e:	7f9b      	ldrb	r3, [r3, #30]
 801dba0:	f043 0301 	orr.w	r3, r3, #1
 801dba4:	b2da      	uxtb	r2, r3
 801dba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dba8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801dbaa:	697b      	ldr	r3, [r7, #20]
 801dbac:	2b01      	cmp	r3, #1
 801dbae:	d171      	bne.n	801dc94 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801dbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbb2:	8b9b      	ldrh	r3, [r3, #28]
 801dbb4:	3314      	adds	r3, #20
 801dbb6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbba:	685b      	ldr	r3, [r3, #4]
 801dbbc:	685b      	ldr	r3, [r3, #4]
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801dbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbc4:	685b      	ldr	r3, [r3, #4]
 801dbc6:	685b      	ldr	r3, [r3, #4]
 801dbc8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801dbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbcc:	3308      	adds	r3, #8
 801dbce:	2214      	movs	r2, #20
 801dbd0:	4619      	mov	r1, r3
 801dbd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dbd4:	f002 f8cf 	bl	801fd76 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801dbd8:	8a3b      	ldrh	r3, [r7, #16]
 801dbda:	4618      	mov	r0, r3
 801dbdc:	f7f3 fbc0 	bl	8011360 <lwip_htons>
 801dbe0:	4603      	mov	r3, r0
 801dbe2:	461a      	mov	r2, r3
 801dbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbe6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801dbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbea:	2200      	movs	r2, #0
 801dbec:	719a      	strb	r2, [r3, #6]
 801dbee:	2200      	movs	r2, #0
 801dbf0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	729a      	strb	r2, [r3, #10]
 801dbf8:	2200      	movs	r2, #0
 801dbfa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801dbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbfe:	685b      	ldr	r3, [r3, #4]
 801dc00:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801dc02:	e00d      	b.n	801dc20 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801dc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc06:	685b      	ldr	r3, [r3, #4]
 801dc08:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801dc0a:	2114      	movs	r1, #20
 801dc0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801dc0e:	f7f4 ff57 	bl	8012ac0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801dc12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801dc14:	6878      	ldr	r0, [r7, #4]
 801dc16:	f7f5 f8a7 	bl	8012d68 <pbuf_cat>
      r = iprh->next_pbuf;
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801dc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d1ee      	bne.n	801dc04 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801dc26:	4b1e      	ldr	r3, [pc, #120]	; (801dca0 <ip4_reass+0x2b4>)
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dc2c:	429a      	cmp	r2, r3
 801dc2e:	d102      	bne.n	801dc36 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801dc30:	2300      	movs	r3, #0
 801dc32:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc34:	e010      	b.n	801dc58 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801dc36:	4b1a      	ldr	r3, [pc, #104]	; (801dca0 <ip4_reass+0x2b4>)
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc3c:	e007      	b.n	801dc4e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801dc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dc44:	429a      	cmp	r2, r3
 801dc46:	d006      	beq.n	801dc56 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d1f4      	bne.n	801dc3e <ip4_reass+0x252>
 801dc54:	e000      	b.n	801dc58 <ip4_reass+0x26c>
          break;
 801dc56:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801dc58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dc5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dc5c:	f7ff fd2e 	bl	801d6bc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801dc60:	6878      	ldr	r0, [r7, #4]
 801dc62:	f7f5 f841 	bl	8012ce8 <pbuf_clen>
 801dc66:	4603      	mov	r3, r0
 801dc68:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801dc6a:	4b0c      	ldr	r3, [pc, #48]	; (801dc9c <ip4_reass+0x2b0>)
 801dc6c:	881b      	ldrh	r3, [r3, #0]
 801dc6e:	8c3a      	ldrh	r2, [r7, #32]
 801dc70:	429a      	cmp	r2, r3
 801dc72:	d906      	bls.n	801dc82 <ip4_reass+0x296>
 801dc74:	4b0b      	ldr	r3, [pc, #44]	; (801dca4 <ip4_reass+0x2b8>)
 801dc76:	f240 229b 	movw	r2, #667	; 0x29b
 801dc7a:	490b      	ldr	r1, [pc, #44]	; (801dca8 <ip4_reass+0x2bc>)
 801dc7c:	480b      	ldr	r0, [pc, #44]	; (801dcac <ip4_reass+0x2c0>)
 801dc7e:	f001 fe15 	bl	801f8ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801dc82:	4b06      	ldr	r3, [pc, #24]	; (801dc9c <ip4_reass+0x2b0>)
 801dc84:	881a      	ldrh	r2, [r3, #0]
 801dc86:	8c3b      	ldrh	r3, [r7, #32]
 801dc88:	1ad3      	subs	r3, r2, r3
 801dc8a:	b29a      	uxth	r2, r3
 801dc8c:	4b03      	ldr	r3, [pc, #12]	; (801dc9c <ip4_reass+0x2b0>)
 801dc8e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	e038      	b.n	801dd06 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801dc94:	2300      	movs	r3, #0
 801dc96:	e036      	b.n	801dd06 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801dc98:	bf00      	nop
 801dc9a:	e00a      	b.n	801dcb2 <ip4_reass+0x2c6>
 801dc9c:	20010358 	.word	0x20010358
 801dca0:	20010354 	.word	0x20010354
 801dca4:	08024cf8 	.word	0x08024cf8
 801dca8:	08024e68 	.word	0x08024e68
 801dcac:	08024d40 	.word	0x08024d40
    goto nullreturn_ipr;
 801dcb0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d106      	bne.n	801dcc6 <ip4_reass+0x2da>
 801dcb8:	4b15      	ldr	r3, [pc, #84]	; (801dd10 <ip4_reass+0x324>)
 801dcba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801dcbe:	4915      	ldr	r1, [pc, #84]	; (801dd14 <ip4_reass+0x328>)
 801dcc0:	4815      	ldr	r0, [pc, #84]	; (801dd18 <ip4_reass+0x32c>)
 801dcc2:	f001 fdf3 	bl	801f8ac <iprintf>
  if (ipr->p == NULL) {
 801dcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcc8:	685b      	ldr	r3, [r3, #4]
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d116      	bne.n	801dcfc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801dcce:	4b13      	ldr	r3, [pc, #76]	; (801dd1c <ip4_reass+0x330>)
 801dcd0:	681b      	ldr	r3, [r3, #0]
 801dcd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dcd4:	429a      	cmp	r2, r3
 801dcd6:	d006      	beq.n	801dce6 <ip4_reass+0x2fa>
 801dcd8:	4b0d      	ldr	r3, [pc, #52]	; (801dd10 <ip4_reass+0x324>)
 801dcda:	f240 22ab 	movw	r2, #683	; 0x2ab
 801dcde:	4910      	ldr	r1, [pc, #64]	; (801dd20 <ip4_reass+0x334>)
 801dce0:	480d      	ldr	r0, [pc, #52]	; (801dd18 <ip4_reass+0x32c>)
 801dce2:	f001 fde3 	bl	801f8ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801dce6:	2100      	movs	r1, #0
 801dce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dcea:	f7ff fce7 	bl	801d6bc <ip_reass_dequeue_datagram>
 801dcee:	e006      	b.n	801dcfe <ip4_reass+0x312>
    goto nullreturn;
 801dcf0:	bf00      	nop
 801dcf2:	e004      	b.n	801dcfe <ip4_reass+0x312>
    goto nullreturn;
 801dcf4:	bf00      	nop
 801dcf6:	e002      	b.n	801dcfe <ip4_reass+0x312>
      goto nullreturn;
 801dcf8:	bf00      	nop
 801dcfa:	e000      	b.n	801dcfe <ip4_reass+0x312>
  }

nullreturn:
 801dcfc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801dcfe:	6878      	ldr	r0, [r7, #4]
 801dd00:	f7f4 ff64 	bl	8012bcc <pbuf_free>
  return NULL;
 801dd04:	2300      	movs	r3, #0
}
 801dd06:	4618      	mov	r0, r3
 801dd08:	3738      	adds	r7, #56	; 0x38
 801dd0a:	46bd      	mov	sp, r7
 801dd0c:	bd80      	pop	{r7, pc}
 801dd0e:	bf00      	nop
 801dd10:	08024cf8 	.word	0x08024cf8
 801dd14:	08024e84 	.word	0x08024e84
 801dd18:	08024d40 	.word	0x08024d40
 801dd1c:	20010354 	.word	0x20010354
 801dd20:	08024e90 	.word	0x08024e90

0801dd24 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801dd28:	2005      	movs	r0, #5
 801dd2a:	f7f3 fff1 	bl	8011d10 <memp_malloc>
 801dd2e:	4603      	mov	r3, r0
}
 801dd30:	4618      	mov	r0, r3
 801dd32:	bd80      	pop	{r7, pc}

0801dd34 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801dd34:	b580      	push	{r7, lr}
 801dd36:	b082      	sub	sp, #8
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d106      	bne.n	801dd50 <ip_frag_free_pbuf_custom_ref+0x1c>
 801dd42:	4b07      	ldr	r3, [pc, #28]	; (801dd60 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801dd44:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801dd48:	4906      	ldr	r1, [pc, #24]	; (801dd64 <ip_frag_free_pbuf_custom_ref+0x30>)
 801dd4a:	4807      	ldr	r0, [pc, #28]	; (801dd68 <ip_frag_free_pbuf_custom_ref+0x34>)
 801dd4c:	f001 fdae 	bl	801f8ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801dd50:	6879      	ldr	r1, [r7, #4]
 801dd52:	2005      	movs	r0, #5
 801dd54:	f7f4 f852 	bl	8011dfc <memp_free>
}
 801dd58:	bf00      	nop
 801dd5a:	3708      	adds	r7, #8
 801dd5c:	46bd      	mov	sp, r7
 801dd5e:	bd80      	pop	{r7, pc}
 801dd60:	08024cf8 	.word	0x08024cf8
 801dd64:	08024eb0 	.word	0x08024eb0
 801dd68:	08024d40 	.word	0x08024d40

0801dd6c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b084      	sub	sp, #16
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801dd78:	68fb      	ldr	r3, [r7, #12]
 801dd7a:	2b00      	cmp	r3, #0
 801dd7c:	d106      	bne.n	801dd8c <ipfrag_free_pbuf_custom+0x20>
 801dd7e:	4b11      	ldr	r3, [pc, #68]	; (801ddc4 <ipfrag_free_pbuf_custom+0x58>)
 801dd80:	f240 22ce 	movw	r2, #718	; 0x2ce
 801dd84:	4910      	ldr	r1, [pc, #64]	; (801ddc8 <ipfrag_free_pbuf_custom+0x5c>)
 801dd86:	4811      	ldr	r0, [pc, #68]	; (801ddcc <ipfrag_free_pbuf_custom+0x60>)
 801dd88:	f001 fd90 	bl	801f8ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801dd8c:	68fa      	ldr	r2, [r7, #12]
 801dd8e:	687b      	ldr	r3, [r7, #4]
 801dd90:	429a      	cmp	r2, r3
 801dd92:	d006      	beq.n	801dda2 <ipfrag_free_pbuf_custom+0x36>
 801dd94:	4b0b      	ldr	r3, [pc, #44]	; (801ddc4 <ipfrag_free_pbuf_custom+0x58>)
 801dd96:	f240 22cf 	movw	r2, #719	; 0x2cf
 801dd9a:	490d      	ldr	r1, [pc, #52]	; (801ddd0 <ipfrag_free_pbuf_custom+0x64>)
 801dd9c:	480b      	ldr	r0, [pc, #44]	; (801ddcc <ipfrag_free_pbuf_custom+0x60>)
 801dd9e:	f001 fd85 	bl	801f8ac <iprintf>
  if (pcr->original != NULL) {
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	695b      	ldr	r3, [r3, #20]
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d004      	beq.n	801ddb4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ddaa:	68fb      	ldr	r3, [r7, #12]
 801ddac:	695b      	ldr	r3, [r3, #20]
 801ddae:	4618      	mov	r0, r3
 801ddb0:	f7f4 ff0c 	bl	8012bcc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ddb4:	68f8      	ldr	r0, [r7, #12]
 801ddb6:	f7ff ffbd 	bl	801dd34 <ip_frag_free_pbuf_custom_ref>
}
 801ddba:	bf00      	nop
 801ddbc:	3710      	adds	r7, #16
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	bd80      	pop	{r7, pc}
 801ddc2:	bf00      	nop
 801ddc4:	08024cf8 	.word	0x08024cf8
 801ddc8:	08024ebc 	.word	0x08024ebc
 801ddcc:	08024d40 	.word	0x08024d40
 801ddd0:	08024ec8 	.word	0x08024ec8

0801ddd4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ddd4:	b580      	push	{r7, lr}
 801ddd6:	b094      	sub	sp, #80	; 0x50
 801ddd8:	af02      	add	r7, sp, #8
 801ddda:	60f8      	str	r0, [r7, #12]
 801dddc:	60b9      	str	r1, [r7, #8]
 801ddde:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801dde0:	2300      	movs	r3, #0
 801dde2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801dde6:	68bb      	ldr	r3, [r7, #8]
 801dde8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ddea:	3b14      	subs	r3, #20
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	da00      	bge.n	801ddf2 <ip4_frag+0x1e>
 801ddf0:	3307      	adds	r3, #7
 801ddf2:	10db      	asrs	r3, r3, #3
 801ddf4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ddf6:	2314      	movs	r3, #20
 801ddf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ddfa:	68fb      	ldr	r3, [r7, #12]
 801ddfc:	685b      	ldr	r3, [r3, #4]
 801ddfe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801de00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de02:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de06:	781b      	ldrb	r3, [r3, #0]
 801de08:	f003 030f 	and.w	r3, r3, #15
 801de0c:	b2db      	uxtb	r3, r3
 801de0e:	009b      	lsls	r3, r3, #2
 801de10:	b2db      	uxtb	r3, r3
 801de12:	2b14      	cmp	r3, #20
 801de14:	d002      	beq.n	801de1c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801de16:	f06f 0305 	mvn.w	r3, #5
 801de1a:	e110      	b.n	801e03e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801de1c:	68fb      	ldr	r3, [r7, #12]
 801de1e:	895b      	ldrh	r3, [r3, #10]
 801de20:	2b13      	cmp	r3, #19
 801de22:	d809      	bhi.n	801de38 <ip4_frag+0x64>
 801de24:	4b88      	ldr	r3, [pc, #544]	; (801e048 <ip4_frag+0x274>)
 801de26:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801de2a:	4988      	ldr	r1, [pc, #544]	; (801e04c <ip4_frag+0x278>)
 801de2c:	4888      	ldr	r0, [pc, #544]	; (801e050 <ip4_frag+0x27c>)
 801de2e:	f001 fd3d 	bl	801f8ac <iprintf>
 801de32:	f06f 0305 	mvn.w	r3, #5
 801de36:	e102      	b.n	801e03e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801de38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de3a:	88db      	ldrh	r3, [r3, #6]
 801de3c:	b29b      	uxth	r3, r3
 801de3e:	4618      	mov	r0, r3
 801de40:	f7f3 fa8e 	bl	8011360 <lwip_htons>
 801de44:	4603      	mov	r3, r0
 801de46:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801de48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801de4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801de4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801de52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801de54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801de58:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801de5a:	68fb      	ldr	r3, [r7, #12]
 801de5c:	891b      	ldrh	r3, [r3, #8]
 801de5e:	3b14      	subs	r3, #20
 801de60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801de64:	e0e1      	b.n	801e02a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801de66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801de68:	00db      	lsls	r3, r3, #3
 801de6a:	b29b      	uxth	r3, r3
 801de6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801de70:	4293      	cmp	r3, r2
 801de72:	bf28      	it	cs
 801de74:	4613      	movcs	r3, r2
 801de76:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801de78:	f44f 7220 	mov.w	r2, #640	; 0x280
 801de7c:	2114      	movs	r1, #20
 801de7e:	200e      	movs	r0, #14
 801de80:	f7f4 fbc0 	bl	8012604 <pbuf_alloc>
 801de84:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de88:	2b00      	cmp	r3, #0
 801de8a:	f000 80d5 	beq.w	801e038 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de90:	895b      	ldrh	r3, [r3, #10]
 801de92:	2b13      	cmp	r3, #19
 801de94:	d806      	bhi.n	801dea4 <ip4_frag+0xd0>
 801de96:	4b6c      	ldr	r3, [pc, #432]	; (801e048 <ip4_frag+0x274>)
 801de98:	f44f 7249 	mov.w	r2, #804	; 0x324
 801de9c:	496d      	ldr	r1, [pc, #436]	; (801e054 <ip4_frag+0x280>)
 801de9e:	486c      	ldr	r0, [pc, #432]	; (801e050 <ip4_frag+0x27c>)
 801dea0:	f001 fd04 	bl	801f8ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dea6:	685b      	ldr	r3, [r3, #4]
 801dea8:	2214      	movs	r2, #20
 801deaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801deac:	4618      	mov	r0, r3
 801deae:	f001 ff62 	bl	801fd76 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801deb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deb4:	685b      	ldr	r3, [r3, #4]
 801deb6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801deb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801deba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801debe:	e064      	b.n	801df8a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	895a      	ldrh	r2, [r3, #10]
 801dec4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dec6:	1ad3      	subs	r3, r2, r3
 801dec8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	895b      	ldrh	r3, [r3, #10]
 801dece:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ded0:	429a      	cmp	r2, r3
 801ded2:	d906      	bls.n	801dee2 <ip4_frag+0x10e>
 801ded4:	4b5c      	ldr	r3, [pc, #368]	; (801e048 <ip4_frag+0x274>)
 801ded6:	f240 322d 	movw	r2, #813	; 0x32d
 801deda:	495f      	ldr	r1, [pc, #380]	; (801e058 <ip4_frag+0x284>)
 801dedc:	485c      	ldr	r0, [pc, #368]	; (801e050 <ip4_frag+0x27c>)
 801dede:	f001 fce5 	bl	801f8ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801dee2:	8bfa      	ldrh	r2, [r7, #30]
 801dee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801dee8:	4293      	cmp	r3, r2
 801deea:	bf28      	it	cs
 801deec:	4613      	movcs	r3, r2
 801deee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801def2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801def6:	2b00      	cmp	r3, #0
 801def8:	d105      	bne.n	801df06 <ip4_frag+0x132>
        poff = 0;
 801defa:	2300      	movs	r3, #0
 801defc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801defe:	68fb      	ldr	r3, [r7, #12]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	60fb      	str	r3, [r7, #12]
        continue;
 801df04:	e041      	b.n	801df8a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801df06:	f7ff ff0d 	bl	801dd24 <ip_frag_alloc_pbuf_custom_ref>
 801df0a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801df0c:	69bb      	ldr	r3, [r7, #24]
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d103      	bne.n	801df1a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801df12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801df14:	f7f4 fe5a 	bl	8012bcc <pbuf_free>
        goto memerr;
 801df18:	e08f      	b.n	801e03a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801df1a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801df20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801df22:	4413      	add	r3, r2
 801df24:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801df28:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801df2c:	9201      	str	r2, [sp, #4]
 801df2e:	9300      	str	r3, [sp, #0]
 801df30:	4603      	mov	r3, r0
 801df32:	2241      	movs	r2, #65	; 0x41
 801df34:	2000      	movs	r0, #0
 801df36:	f7f4 fc8f 	bl	8012858 <pbuf_alloced_custom>
 801df3a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801df3c:	697b      	ldr	r3, [r7, #20]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d106      	bne.n	801df50 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801df42:	69b8      	ldr	r0, [r7, #24]
 801df44:	f7ff fef6 	bl	801dd34 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801df48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801df4a:	f7f4 fe3f 	bl	8012bcc <pbuf_free>
        goto memerr;
 801df4e:	e074      	b.n	801e03a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801df50:	68f8      	ldr	r0, [r7, #12]
 801df52:	f7f4 fee1 	bl	8012d18 <pbuf_ref>
      pcr->original = p;
 801df56:	69bb      	ldr	r3, [r7, #24]
 801df58:	68fa      	ldr	r2, [r7, #12]
 801df5a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801df5c:	69bb      	ldr	r3, [r7, #24]
 801df5e:	4a3f      	ldr	r2, [pc, #252]	; (801e05c <ip4_frag+0x288>)
 801df60:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801df62:	6979      	ldr	r1, [r7, #20]
 801df64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801df66:	f7f4 feff 	bl	8012d68 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801df6a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801df6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801df72:	1ad3      	subs	r3, r2, r3
 801df74:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801df78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801df7c:	2b00      	cmp	r3, #0
 801df7e:	d004      	beq.n	801df8a <ip4_frag+0x1b6>
        poff = 0;
 801df80:	2300      	movs	r3, #0
 801df82:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801df84:	68fb      	ldr	r3, [r7, #12]
 801df86:	681b      	ldr	r3, [r3, #0]
 801df88:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801df8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d196      	bne.n	801dec0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801df92:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801df94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801df98:	4413      	add	r3, r2
 801df9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801df9c:	68bb      	ldr	r3, [r7, #8]
 801df9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dfa0:	f1a3 0213 	sub.w	r2, r3, #19
 801dfa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dfa8:	429a      	cmp	r2, r3
 801dfaa:	bfcc      	ite	gt
 801dfac:	2301      	movgt	r3, #1
 801dfae:	2300      	movle	r3, #0
 801dfb0:	b2db      	uxtb	r3, r3
 801dfb2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801dfb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dfb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dfbc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801dfbe:	6a3b      	ldr	r3, [r7, #32]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d002      	beq.n	801dfca <ip4_frag+0x1f6>
 801dfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d003      	beq.n	801dfd2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801dfca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dfcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801dfd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801dfd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	f7f3 f9c3 	bl	8011360 <lwip_htons>
 801dfda:	4603      	mov	r3, r0
 801dfdc:	461a      	mov	r2, r3
 801dfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfe0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801dfe2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801dfe4:	3314      	adds	r3, #20
 801dfe6:	b29b      	uxth	r3, r3
 801dfe8:	4618      	mov	r0, r3
 801dfea:	f7f3 f9b9 	bl	8011360 <lwip_htons>
 801dfee:	4603      	mov	r3, r0
 801dff0:	461a      	mov	r2, r3
 801dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dff4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801dff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dff8:	2200      	movs	r2, #0
 801dffa:	729a      	strb	r2, [r3, #10]
 801dffc:	2200      	movs	r2, #0
 801dffe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e000:	68bb      	ldr	r3, [r7, #8]
 801e002:	695b      	ldr	r3, [r3, #20]
 801e004:	687a      	ldr	r2, [r7, #4]
 801e006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e008:	68b8      	ldr	r0, [r7, #8]
 801e00a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e00e:	f7f4 fddd 	bl	8012bcc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e012:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e016:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801e018:	1ad3      	subs	r3, r2, r3
 801e01a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801e01e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801e022:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801e024:	4413      	add	r3, r2
 801e026:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801e02a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e02e:	2b00      	cmp	r3, #0
 801e030:	f47f af19 	bne.w	801de66 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e034:	2300      	movs	r3, #0
 801e036:	e002      	b.n	801e03e <ip4_frag+0x26a>
      goto memerr;
 801e038:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e03a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801e03e:	4618      	mov	r0, r3
 801e040:	3748      	adds	r7, #72	; 0x48
 801e042:	46bd      	mov	sp, r7
 801e044:	bd80      	pop	{r7, pc}
 801e046:	bf00      	nop
 801e048:	08024cf8 	.word	0x08024cf8
 801e04c:	08024ed4 	.word	0x08024ed4
 801e050:	08024d40 	.word	0x08024d40
 801e054:	08024ef0 	.word	0x08024ef0
 801e058:	08024f10 	.word	0x08024f10
 801e05c:	0801dd6d 	.word	0x0801dd6d

0801e060 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e060:	b580      	push	{r7, lr}
 801e062:	b086      	sub	sp, #24
 801e064:	af00      	add	r7, sp, #0
 801e066:	6078      	str	r0, [r7, #4]
 801e068:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e06a:	230e      	movs	r3, #14
 801e06c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	895b      	ldrh	r3, [r3, #10]
 801e072:	2b0e      	cmp	r3, #14
 801e074:	d96e      	bls.n	801e154 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	7bdb      	ldrb	r3, [r3, #15]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d106      	bne.n	801e08c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801e07e:	683b      	ldr	r3, [r7, #0]
 801e080:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e084:	3301      	adds	r3, #1
 801e086:	b2da      	uxtb	r2, r3
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	685b      	ldr	r3, [r3, #4]
 801e090:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e092:	693b      	ldr	r3, [r7, #16]
 801e094:	7b1a      	ldrb	r2, [r3, #12]
 801e096:	7b5b      	ldrb	r3, [r3, #13]
 801e098:	021b      	lsls	r3, r3, #8
 801e09a:	4313      	orrs	r3, r2
 801e09c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e09e:	693b      	ldr	r3, [r7, #16]
 801e0a0:	781b      	ldrb	r3, [r3, #0]
 801e0a2:	f003 0301 	and.w	r3, r3, #1
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d023      	beq.n	801e0f2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e0aa:	693b      	ldr	r3, [r7, #16]
 801e0ac:	781b      	ldrb	r3, [r3, #0]
 801e0ae:	2b01      	cmp	r3, #1
 801e0b0:	d10f      	bne.n	801e0d2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e0b2:	693b      	ldr	r3, [r7, #16]
 801e0b4:	785b      	ldrb	r3, [r3, #1]
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d11b      	bne.n	801e0f2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e0ba:	693b      	ldr	r3, [r7, #16]
 801e0bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e0be:	2b5e      	cmp	r3, #94	; 0x5e
 801e0c0:	d117      	bne.n	801e0f2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	7b5b      	ldrb	r3, [r3, #13]
 801e0c6:	f043 0310 	orr.w	r3, r3, #16
 801e0ca:	b2da      	uxtb	r2, r3
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	735a      	strb	r2, [r3, #13]
 801e0d0:	e00f      	b.n	801e0f2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e0d2:	693b      	ldr	r3, [r7, #16]
 801e0d4:	2206      	movs	r2, #6
 801e0d6:	4928      	ldr	r1, [pc, #160]	; (801e178 <ethernet_input+0x118>)
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f001 fd2d 	bl	801fb38 <memcmp>
 801e0de:	4603      	mov	r3, r0
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d106      	bne.n	801e0f2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	7b5b      	ldrb	r3, [r3, #13]
 801e0e8:	f043 0308 	orr.w	r3, r3, #8
 801e0ec:	b2da      	uxtb	r2, r3
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e0f2:	89fb      	ldrh	r3, [r7, #14]
 801e0f4:	2b08      	cmp	r3, #8
 801e0f6:	d003      	beq.n	801e100 <ethernet_input+0xa0>
 801e0f8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801e0fc:	d014      	beq.n	801e128 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e0fe:	e032      	b.n	801e166 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e100:	683b      	ldr	r3, [r7, #0]
 801e102:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e106:	f003 0308 	and.w	r3, r3, #8
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d024      	beq.n	801e158 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e10e:	8afb      	ldrh	r3, [r7, #22]
 801e110:	4619      	mov	r1, r3
 801e112:	6878      	ldr	r0, [r7, #4]
 801e114:	f7f4 fcd4 	bl	8012ac0 <pbuf_remove_header>
 801e118:	4603      	mov	r3, r0
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d11e      	bne.n	801e15c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801e11e:	6839      	ldr	r1, [r7, #0]
 801e120:	6878      	ldr	r0, [r7, #4]
 801e122:	f7fe ff03 	bl	801cf2c <ip4_input>
      break;
 801e126:	e013      	b.n	801e150 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e128:	683b      	ldr	r3, [r7, #0]
 801e12a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e12e:	f003 0308 	and.w	r3, r3, #8
 801e132:	2b00      	cmp	r3, #0
 801e134:	d014      	beq.n	801e160 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e136:	8afb      	ldrh	r3, [r7, #22]
 801e138:	4619      	mov	r1, r3
 801e13a:	6878      	ldr	r0, [r7, #4]
 801e13c:	f7f4 fcc0 	bl	8012ac0 <pbuf_remove_header>
 801e140:	4603      	mov	r3, r0
 801e142:	2b00      	cmp	r3, #0
 801e144:	d10e      	bne.n	801e164 <ethernet_input+0x104>
        etharp_input(p, netif);
 801e146:	6839      	ldr	r1, [r7, #0]
 801e148:	6878      	ldr	r0, [r7, #4]
 801e14a:	f7fe f89f 	bl	801c28c <etharp_input>
      break;
 801e14e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e150:	2300      	movs	r3, #0
 801e152:	e00c      	b.n	801e16e <ethernet_input+0x10e>
    goto free_and_return;
 801e154:	bf00      	nop
 801e156:	e006      	b.n	801e166 <ethernet_input+0x106>
        goto free_and_return;
 801e158:	bf00      	nop
 801e15a:	e004      	b.n	801e166 <ethernet_input+0x106>
        goto free_and_return;
 801e15c:	bf00      	nop
 801e15e:	e002      	b.n	801e166 <ethernet_input+0x106>
        goto free_and_return;
 801e160:	bf00      	nop
 801e162:	e000      	b.n	801e166 <ethernet_input+0x106>
        goto free_and_return;
 801e164:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e166:	6878      	ldr	r0, [r7, #4]
 801e168:	f7f4 fd30 	bl	8012bcc <pbuf_free>
  return ERR_OK;
 801e16c:	2300      	movs	r3, #0
}
 801e16e:	4618      	mov	r0, r3
 801e170:	3718      	adds	r7, #24
 801e172:	46bd      	mov	sp, r7
 801e174:	bd80      	pop	{r7, pc}
 801e176:	bf00      	nop
 801e178:	080251f0 	.word	0x080251f0

0801e17c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e17c:	b580      	push	{r7, lr}
 801e17e:	b086      	sub	sp, #24
 801e180:	af00      	add	r7, sp, #0
 801e182:	60f8      	str	r0, [r7, #12]
 801e184:	60b9      	str	r1, [r7, #8]
 801e186:	607a      	str	r2, [r7, #4]
 801e188:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e18a:	8c3b      	ldrh	r3, [r7, #32]
 801e18c:	4618      	mov	r0, r3
 801e18e:	f7f3 f8e7 	bl	8011360 <lwip_htons>
 801e192:	4603      	mov	r3, r0
 801e194:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e196:	210e      	movs	r1, #14
 801e198:	68b8      	ldr	r0, [r7, #8]
 801e19a:	f7f4 fc81 	bl	8012aa0 <pbuf_add_header>
 801e19e:	4603      	mov	r3, r0
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d125      	bne.n	801e1f0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e1a4:	68bb      	ldr	r3, [r7, #8]
 801e1a6:	685b      	ldr	r3, [r3, #4]
 801e1a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e1aa:	693b      	ldr	r3, [r7, #16]
 801e1ac:	8afa      	ldrh	r2, [r7, #22]
 801e1ae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e1b0:	693b      	ldr	r3, [r7, #16]
 801e1b2:	2206      	movs	r2, #6
 801e1b4:	6839      	ldr	r1, [r7, #0]
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	f001 fddd 	bl	801fd76 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e1bc:	693b      	ldr	r3, [r7, #16]
 801e1be:	3306      	adds	r3, #6
 801e1c0:	2206      	movs	r2, #6
 801e1c2:	6879      	ldr	r1, [r7, #4]
 801e1c4:	4618      	mov	r0, r3
 801e1c6:	f001 fdd6 	bl	801fd76 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e1d0:	2b06      	cmp	r3, #6
 801e1d2:	d006      	beq.n	801e1e2 <ethernet_output+0x66>
 801e1d4:	4b0a      	ldr	r3, [pc, #40]	; (801e200 <ethernet_output+0x84>)
 801e1d6:	f44f 7299 	mov.w	r2, #306	; 0x132
 801e1da:	490a      	ldr	r1, [pc, #40]	; (801e204 <ethernet_output+0x88>)
 801e1dc:	480a      	ldr	r0, [pc, #40]	; (801e208 <ethernet_output+0x8c>)
 801e1de:	f001 fb65 	bl	801f8ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	699b      	ldr	r3, [r3, #24]
 801e1e6:	68b9      	ldr	r1, [r7, #8]
 801e1e8:	68f8      	ldr	r0, [r7, #12]
 801e1ea:	4798      	blx	r3
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	e002      	b.n	801e1f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801e1f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801e1f2:	f06f 0301 	mvn.w	r3, #1
}
 801e1f6:	4618      	mov	r0, r3
 801e1f8:	3718      	adds	r7, #24
 801e1fa:	46bd      	mov	sp, r7
 801e1fc:	bd80      	pop	{r7, pc}
 801e1fe:	bf00      	nop
 801e200:	08024f20 	.word	0x08024f20
 801e204:	08024f58 	.word	0x08024f58
 801e208:	08024f8c 	.word	0x08024f8c

0801e20c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e20c:	b580      	push	{r7, lr}
 801e20e:	b086      	sub	sp, #24
 801e210:	af00      	add	r7, sp, #0
 801e212:	6078      	str	r0, [r7, #4]
 801e214:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801e216:	683b      	ldr	r3, [r7, #0]
 801e218:	60bb      	str	r3, [r7, #8]
 801e21a:	2304      	movs	r3, #4
 801e21c:	60fb      	str	r3, [r7, #12]
 801e21e:	2300      	movs	r3, #0
 801e220:	613b      	str	r3, [r7, #16]
 801e222:	2300      	movs	r3, #0
 801e224:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801e226:	f107 0308 	add.w	r3, r7, #8
 801e22a:	2100      	movs	r1, #0
 801e22c:	4618      	mov	r0, r3
 801e22e:	f7e8 f8de 	bl	80063ee <osMessageCreate>
 801e232:	4602      	mov	r2, r0
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	d102      	bne.n	801e246 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801e240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e244:	e000      	b.n	801e248 <sys_mbox_new+0x3c>

  return ERR_OK;
 801e246:	2300      	movs	r3, #0
}
 801e248:	4618      	mov	r0, r3
 801e24a:	3718      	adds	r7, #24
 801e24c:	46bd      	mov	sp, r7
 801e24e:	bd80      	pop	{r7, pc}

0801e250 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e250:	b580      	push	{r7, lr}
 801e252:	b082      	sub	sp, #8
 801e254:	af00      	add	r7, sp, #0
 801e256:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	4618      	mov	r0, r3
 801e25e:	f7e8 f9a3 	bl	80065a8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	4618      	mov	r0, r3
 801e268:	f7e8 f9b4 	bl	80065d4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801e26c:	bf00      	nop
 801e26e:	3708      	adds	r7, #8
 801e270:	46bd      	mov	sp, r7
 801e272:	bd80      	pop	{r7, pc}

0801e274 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801e274:	b580      	push	{r7, lr}
 801e276:	b084      	sub	sp, #16
 801e278:	af00      	add	r7, sp, #0
 801e27a:	6078      	str	r0, [r7, #4]
 801e27c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	681b      	ldr	r3, [r3, #0]
 801e282:	6839      	ldr	r1, [r7, #0]
 801e284:	2200      	movs	r2, #0
 801e286:	4618      	mov	r0, r3
 801e288:	f7e8 f8da 	bl	8006440 <osMessagePut>
 801e28c:	4603      	mov	r3, r0
 801e28e:	2b00      	cmp	r3, #0
 801e290:	d102      	bne.n	801e298 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801e292:	2300      	movs	r3, #0
 801e294:	73fb      	strb	r3, [r7, #15]
 801e296:	e001      	b.n	801e29c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801e298:	23ff      	movs	r3, #255	; 0xff
 801e29a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801e29c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	3710      	adds	r7, #16
 801e2a4:	46bd      	mov	sp, r7
 801e2a6:	bd80      	pop	{r7, pc}

0801e2a8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801e2a8:	b580      	push	{r7, lr}
 801e2aa:	b08c      	sub	sp, #48	; 0x30
 801e2ac:	af00      	add	r7, sp, #0
 801e2ae:	61f8      	str	r0, [r7, #28]
 801e2b0:	61b9      	str	r1, [r7, #24]
 801e2b2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801e2b4:	f7e7 fec6 	bl	8006044 <osKernelSysTick>
 801e2b8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e2ba:	697b      	ldr	r3, [r7, #20]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d017      	beq.n	801e2f0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801e2c0:	69fb      	ldr	r3, [r7, #28]
 801e2c2:	6819      	ldr	r1, [r3, #0]
 801e2c4:	f107 0320 	add.w	r3, r7, #32
 801e2c8:	697a      	ldr	r2, [r7, #20]
 801e2ca:	4618      	mov	r0, r3
 801e2cc:	f7e8 f8f8 	bl	80064c0 <osMessageGet>

    if(event.status == osEventMessage)
 801e2d0:	6a3b      	ldr	r3, [r7, #32]
 801e2d2:	2b10      	cmp	r3, #16
 801e2d4:	d109      	bne.n	801e2ea <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2d8:	461a      	mov	r2, r3
 801e2da:	69bb      	ldr	r3, [r7, #24]
 801e2dc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801e2de:	f7e7 feb1 	bl	8006044 <osKernelSysTick>
 801e2e2:	4602      	mov	r2, r0
 801e2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e2e6:	1ad3      	subs	r3, r2, r3
 801e2e8:	e019      	b.n	801e31e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e2ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e2ee:	e016      	b.n	801e31e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801e2f0:	69fb      	ldr	r3, [r7, #28]
 801e2f2:	6819      	ldr	r1, [r3, #0]
 801e2f4:	463b      	mov	r3, r7
 801e2f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e2fa:	4618      	mov	r0, r3
 801e2fc:	f7e8 f8e0 	bl	80064c0 <osMessageGet>
 801e300:	f107 0320 	add.w	r3, r7, #32
 801e304:	463a      	mov	r2, r7
 801e306:	ca07      	ldmia	r2, {r0, r1, r2}
 801e308:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801e30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e30e:	461a      	mov	r2, r3
 801e310:	69bb      	ldr	r3, [r7, #24]
 801e312:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801e314:	f7e7 fe96 	bl	8006044 <osKernelSysTick>
 801e318:	4602      	mov	r2, r0
 801e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e31c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e31e:	4618      	mov	r0, r3
 801e320:	3730      	adds	r7, #48	; 0x30
 801e322:	46bd      	mov	sp, r7
 801e324:	bd80      	pop	{r7, pc}

0801e326 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801e326:	b580      	push	{r7, lr}
 801e328:	b086      	sub	sp, #24
 801e32a:	af00      	add	r7, sp, #0
 801e32c:	6078      	str	r0, [r7, #4]
 801e32e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	6819      	ldr	r1, [r3, #0]
 801e334:	f107 030c 	add.w	r3, r7, #12
 801e338:	2200      	movs	r2, #0
 801e33a:	4618      	mov	r0, r3
 801e33c:	f7e8 f8c0 	bl	80064c0 <osMessageGet>

  if(event.status == osEventMessage)
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	2b10      	cmp	r3, #16
 801e344:	d105      	bne.n	801e352 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801e346:	693b      	ldr	r3, [r7, #16]
 801e348:	461a      	mov	r2, r3
 801e34a:	683b      	ldr	r3, [r7, #0]
 801e34c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801e34e:	2300      	movs	r3, #0
 801e350:	e001      	b.n	801e356 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801e352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801e356:	4618      	mov	r0, r3
 801e358:	3718      	adds	r7, #24
 801e35a:	46bd      	mov	sp, r7
 801e35c:	bd80      	pop	{r7, pc}

0801e35e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801e35e:	b480      	push	{r7}
 801e360:	b083      	sub	sp, #12
 801e362:	af00      	add	r7, sp, #0
 801e364:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d101      	bne.n	801e372 <sys_mbox_valid+0x14>
    return 0;
 801e36e:	2300      	movs	r3, #0
 801e370:	e000      	b.n	801e374 <sys_mbox_valid+0x16>
  else
    return 1;
 801e372:	2301      	movs	r3, #1
}
 801e374:	4618      	mov	r0, r3
 801e376:	370c      	adds	r7, #12
 801e378:	46bd      	mov	sp, r7
 801e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e37e:	4770      	bx	lr

0801e380 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801e380:	b480      	push	{r7}
 801e382:	b083      	sub	sp, #12
 801e384:	af00      	add	r7, sp, #0
 801e386:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	2200      	movs	r2, #0
 801e38c:	601a      	str	r2, [r3, #0]
}
 801e38e:	bf00      	nop
 801e390:	370c      	adds	r7, #12
 801e392:	46bd      	mov	sp, r7
 801e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e398:	4770      	bx	lr

0801e39a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801e39a:	b580      	push	{r7, lr}
 801e39c:	b084      	sub	sp, #16
 801e39e:	af00      	add	r7, sp, #0
 801e3a0:	6078      	str	r0, [r7, #4]
 801e3a2:	460b      	mov	r3, r1
 801e3a4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	60bb      	str	r3, [r7, #8]
 801e3aa:	2300      	movs	r3, #0
 801e3ac:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801e3ae:	f107 0308 	add.w	r3, r7, #8
 801e3b2:	2101      	movs	r1, #1
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	f7e7 ff51 	bl	800625c <osSemaphoreCreate>
 801e3ba:	4602      	mov	r2, r0
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d102      	bne.n	801e3ce <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e3c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e3cc:	e009      	b.n	801e3e2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801e3ce:	78fb      	ldrb	r3, [r7, #3]
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d105      	bne.n	801e3e0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	681b      	ldr	r3, [r3, #0]
 801e3d8:	2100      	movs	r1, #0
 801e3da:	4618      	mov	r0, r3
 801e3dc:	f7e7 ff70 	bl	80062c0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801e3e0:	2300      	movs	r3, #0
}
 801e3e2:	4618      	mov	r0, r3
 801e3e4:	3710      	adds	r7, #16
 801e3e6:	46bd      	mov	sp, r7
 801e3e8:	bd80      	pop	{r7, pc}

0801e3ea <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801e3ea:	b580      	push	{r7, lr}
 801e3ec:	b084      	sub	sp, #16
 801e3ee:	af00      	add	r7, sp, #0
 801e3f0:	6078      	str	r0, [r7, #4]
 801e3f2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801e3f4:	f7e7 fe26 	bl	8006044 <osKernelSysTick>
 801e3f8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801e3fa:	683b      	ldr	r3, [r7, #0]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d011      	beq.n	801e424 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801e400:	687b      	ldr	r3, [r7, #4]
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	6839      	ldr	r1, [r7, #0]
 801e406:	4618      	mov	r0, r3
 801e408:	f7e7 ff5a 	bl	80062c0 <osSemaphoreWait>
 801e40c:	4603      	mov	r3, r0
 801e40e:	2b00      	cmp	r3, #0
 801e410:	d105      	bne.n	801e41e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801e412:	f7e7 fe17 	bl	8006044 <osKernelSysTick>
 801e416:	4602      	mov	r2, r0
 801e418:	68fb      	ldr	r3, [r7, #12]
 801e41a:	1ad3      	subs	r3, r2, r3
 801e41c:	e012      	b.n	801e444 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801e41e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e422:	e00f      	b.n	801e444 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801e424:	bf00      	nop
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e42e:	4618      	mov	r0, r3
 801e430:	f7e7 ff46 	bl	80062c0 <osSemaphoreWait>
 801e434:	4603      	mov	r3, r0
 801e436:	2b00      	cmp	r3, #0
 801e438:	d1f5      	bne.n	801e426 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801e43a:	f7e7 fe03 	bl	8006044 <osKernelSysTick>
 801e43e:	4602      	mov	r2, r0
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801e444:	4618      	mov	r0, r3
 801e446:	3710      	adds	r7, #16
 801e448:	46bd      	mov	sp, r7
 801e44a:	bd80      	pop	{r7, pc}

0801e44c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801e44c:	b580      	push	{r7, lr}
 801e44e:	b082      	sub	sp, #8
 801e450:	af00      	add	r7, sp, #0
 801e452:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801e454:	687b      	ldr	r3, [r7, #4]
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	4618      	mov	r0, r3
 801e45a:	f7e7 ff7f 	bl	800635c <osSemaphoreRelease>
}
 801e45e:	bf00      	nop
 801e460:	3708      	adds	r7, #8
 801e462:	46bd      	mov	sp, r7
 801e464:	bd80      	pop	{r7, pc}

0801e466 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801e466:	b580      	push	{r7, lr}
 801e468:	b082      	sub	sp, #8
 801e46a:	af00      	add	r7, sp, #0
 801e46c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	4618      	mov	r0, r3
 801e474:	f7e7 ffa8 	bl	80063c8 <osSemaphoreDelete>
}
 801e478:	bf00      	nop
 801e47a:	3708      	adds	r7, #8
 801e47c:	46bd      	mov	sp, r7
 801e47e:	bd80      	pop	{r7, pc}

0801e480 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801e480:	b480      	push	{r7}
 801e482:	b083      	sub	sp, #12
 801e484:	af00      	add	r7, sp, #0
 801e486:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	2b00      	cmp	r3, #0
 801e48e:	d101      	bne.n	801e494 <sys_sem_valid+0x14>
    return 0;
 801e490:	2300      	movs	r3, #0
 801e492:	e000      	b.n	801e496 <sys_sem_valid+0x16>
  else
    return 1;
 801e494:	2301      	movs	r3, #1
}
 801e496:	4618      	mov	r0, r3
 801e498:	370c      	adds	r7, #12
 801e49a:	46bd      	mov	sp, r7
 801e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4a0:	4770      	bx	lr

0801e4a2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801e4a2:	b480      	push	{r7}
 801e4a4:	b083      	sub	sp, #12
 801e4a6:	af00      	add	r7, sp, #0
 801e4a8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	2200      	movs	r2, #0
 801e4ae:	601a      	str	r2, [r3, #0]
}
 801e4b0:	bf00      	nop
 801e4b2:	370c      	adds	r7, #12
 801e4b4:	46bd      	mov	sp, r7
 801e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ba:	4770      	bx	lr

0801e4bc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801e4bc:	b580      	push	{r7, lr}
 801e4be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801e4c0:	4803      	ldr	r0, [pc, #12]	; (801e4d0 <sys_init+0x14>)
 801e4c2:	f7e7 fe2f 	bl	8006124 <osMutexCreate>
 801e4c6:	4603      	mov	r3, r0
 801e4c8:	4a02      	ldr	r2, [pc, #8]	; (801e4d4 <sys_init+0x18>)
 801e4ca:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801e4cc:	bf00      	nop
 801e4ce:	bd80      	pop	{r7, pc}
 801e4d0:	08025200 	.word	0x08025200
 801e4d4:	2001035c 	.word	0x2001035c

0801e4d8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e4d8:	b580      	push	{r7, lr}
 801e4da:	b084      	sub	sp, #16
 801e4dc:	af00      	add	r7, sp, #0
 801e4de:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801e4e0:	2300      	movs	r3, #0
 801e4e2:	60bb      	str	r3, [r7, #8]
 801e4e4:	2300      	movs	r3, #0
 801e4e6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801e4e8:	f107 0308 	add.w	r3, r7, #8
 801e4ec:	4618      	mov	r0, r3
 801e4ee:	f7e7 fe19 	bl	8006124 <osMutexCreate>
 801e4f2:	4602      	mov	r2, r0
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	681b      	ldr	r3, [r3, #0]
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	d102      	bne.n	801e506 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e504:	e000      	b.n	801e508 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e506:	2300      	movs	r3, #0
}
 801e508:	4618      	mov	r0, r3
 801e50a:	3710      	adds	r7, #16
 801e50c:	46bd      	mov	sp, r7
 801e50e:	bd80      	pop	{r7, pc}

0801e510 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e510:	b580      	push	{r7, lr}
 801e512:	b082      	sub	sp, #8
 801e514:	af00      	add	r7, sp, #0
 801e516:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	681b      	ldr	r3, [r3, #0]
 801e51c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e520:	4618      	mov	r0, r3
 801e522:	f7e7 fe17 	bl	8006154 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801e526:	bf00      	nop
 801e528:	3708      	adds	r7, #8
 801e52a:	46bd      	mov	sp, r7
 801e52c:	bd80      	pop	{r7, pc}

0801e52e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e52e:	b580      	push	{r7, lr}
 801e530:	b082      	sub	sp, #8
 801e532:	af00      	add	r7, sp, #0
 801e534:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	681b      	ldr	r3, [r3, #0]
 801e53a:	4618      	mov	r0, r3
 801e53c:	f7e7 fe58 	bl	80061f0 <osMutexRelease>
}
 801e540:	bf00      	nop
 801e542:	3708      	adds	r7, #8
 801e544:	46bd      	mov	sp, r7
 801e546:	bd80      	pop	{r7, pc}

0801e548 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e548:	b580      	push	{r7, lr}
 801e54a:	b08c      	sub	sp, #48	; 0x30
 801e54c:	af00      	add	r7, sp, #0
 801e54e:	60f8      	str	r0, [r7, #12]
 801e550:	60b9      	str	r1, [r7, #8]
 801e552:	607a      	str	r2, [r7, #4]
 801e554:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801e556:	f107 0314 	add.w	r3, r7, #20
 801e55a:	2200      	movs	r2, #0
 801e55c:	601a      	str	r2, [r3, #0]
 801e55e:	605a      	str	r2, [r3, #4]
 801e560:	609a      	str	r2, [r3, #8]
 801e562:	60da      	str	r2, [r3, #12]
 801e564:	611a      	str	r2, [r3, #16]
 801e566:	615a      	str	r2, [r3, #20]
 801e568:	619a      	str	r2, [r3, #24]
 801e56a:	68fb      	ldr	r3, [r7, #12]
 801e56c:	617b      	str	r3, [r7, #20]
 801e56e:	68bb      	ldr	r3, [r7, #8]
 801e570:	61bb      	str	r3, [r7, #24]
 801e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e574:	b21b      	sxth	r3, r3
 801e576:	83bb      	strh	r3, [r7, #28]
 801e578:	683b      	ldr	r3, [r7, #0]
 801e57a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801e57c:	f107 0314 	add.w	r3, r7, #20
 801e580:	6879      	ldr	r1, [r7, #4]
 801e582:	4618      	mov	r0, r3
 801e584:	f7e7 fd6e 	bl	8006064 <osThreadCreate>
 801e588:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801e58a:	4618      	mov	r0, r3
 801e58c:	3730      	adds	r7, #48	; 0x30
 801e58e:	46bd      	mov	sp, r7
 801e590:	bd80      	pop	{r7, pc}
	...

0801e594 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e594:	b580      	push	{r7, lr}
 801e596:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801e598:	4b04      	ldr	r3, [pc, #16]	; (801e5ac <sys_arch_protect+0x18>)
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e5a0:	4618      	mov	r0, r3
 801e5a2:	f7e7 fdd7 	bl	8006154 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801e5a6:	2301      	movs	r3, #1
}
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	bd80      	pop	{r7, pc}
 801e5ac:	2001035c 	.word	0x2001035c

0801e5b0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e5b0:	b580      	push	{r7, lr}
 801e5b2:	b082      	sub	sp, #8
 801e5b4:	af00      	add	r7, sp, #0
 801e5b6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e5b8:	4b04      	ldr	r3, [pc, #16]	; (801e5cc <sys_arch_unprotect+0x1c>)
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	4618      	mov	r0, r3
 801e5be:	f7e7 fe17 	bl	80061f0 <osMutexRelease>
}
 801e5c2:	bf00      	nop
 801e5c4:	3708      	adds	r7, #8
 801e5c6:	46bd      	mov	sp, r7
 801e5c8:	bd80      	pop	{r7, pc}
 801e5ca:	bf00      	nop
 801e5cc:	2001035c 	.word	0x2001035c

0801e5d0 <CalculaCRCByte>:
//volatile uint8_t modbus_buffer [ MODBUS_BUFFER_SIZE ] @ "EMAC_DMA_RAM";

//
// Calcula o CRC 16 do byte passado como par�metro levando em considera��o o valor anterior do CRC
//
uint16_t CalculaCRCByte ( uint16_t crc, uint8_t byte ) {
 801e5d0:	b480      	push	{r7}
 801e5d2:	b085      	sub	sp, #20
 801e5d4:	af00      	add	r7, sp, #0
 801e5d6:	4603      	mov	r3, r0
 801e5d8:	460a      	mov	r2, r1
 801e5da:	80fb      	strh	r3, [r7, #6]
 801e5dc:	4613      	mov	r3, r2
 801e5de:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  crc = crc^byte;
 801e5e0:	797b      	ldrb	r3, [r7, #5]
 801e5e2:	b29a      	uxth	r2, r3
 801e5e4:	88fb      	ldrh	r3, [r7, #6]
 801e5e6:	4053      	eors	r3, r2
 801e5e8:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 801e5ea:	2300      	movs	r3, #0
 801e5ec:	73fb      	strb	r3, [r7, #15]
 801e5ee:	e011      	b.n	801e614 <CalculaCRCByte+0x44>
    if ( ( crc & 1 ) == 1 ) crc = ( crc >> 1 ) ^cPOLINOMIO;
 801e5f0:	88fb      	ldrh	r3, [r7, #6]
 801e5f2:	f003 0301 	and.w	r3, r3, #1
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d006      	beq.n	801e608 <CalculaCRCByte+0x38>
 801e5fa:	88fb      	ldrh	r3, [r7, #6]
 801e5fc:	085b      	lsrs	r3, r3, #1
 801e5fe:	b29a      	uxth	r2, r3
 801e600:	4b09      	ldr	r3, [pc, #36]	; (801e628 <CalculaCRCByte+0x58>)
 801e602:	4053      	eors	r3, r2
 801e604:	80fb      	strh	r3, [r7, #6]
 801e606:	e002      	b.n	801e60e <CalculaCRCByte+0x3e>
    else crc = crc >> 1;
 801e608:	88fb      	ldrh	r3, [r7, #6]
 801e60a:	085b      	lsrs	r3, r3, #1
 801e60c:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 801e60e:	7bfb      	ldrb	r3, [r7, #15]
 801e610:	3301      	adds	r3, #1
 801e612:	73fb      	strb	r3, [r7, #15]
 801e614:	7bfb      	ldrb	r3, [r7, #15]
 801e616:	2b07      	cmp	r3, #7
 801e618:	d9ea      	bls.n	801e5f0 <CalculaCRCByte+0x20>
  }
  return crc;
 801e61a:	88fb      	ldrh	r3, [r7, #6]
}
 801e61c:	4618      	mov	r0, r3
 801e61e:	3714      	adds	r7, #20
 801e620:	46bd      	mov	sp, r7
 801e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e626:	4770      	bx	lr
 801e628:	ffffa001 	.word	0xffffa001

0801e62c <CalculaCRCStream>:

//
// Calcula o CRC 16 da stream passada como par�metro
//
uint16_t CalculaCRCStream ( uint8_t *str, uint16_t tam ) {
 801e62c:	b580      	push	{r7, lr}
 801e62e:	b084      	sub	sp, #16
 801e630:	af00      	add	r7, sp, #0
 801e632:	6078      	str	r0, [r7, #4]
 801e634:	460b      	mov	r3, r1
 801e636:	807b      	strh	r3, [r7, #2]
  uint16_t i,crc;
  crc = 0xFFFF;
 801e638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e63c:	81bb      	strh	r3, [r7, #12]
  for( i = 0; i < tam; i++, str++ ) crc = CalculaCRCByte ( crc, *str );
 801e63e:	2300      	movs	r3, #0
 801e640:	81fb      	strh	r3, [r7, #14]
 801e642:	e00e      	b.n	801e662 <CalculaCRCStream+0x36>
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	781a      	ldrb	r2, [r3, #0]
 801e648:	89bb      	ldrh	r3, [r7, #12]
 801e64a:	4611      	mov	r1, r2
 801e64c:	4618      	mov	r0, r3
 801e64e:	f7ff ffbf 	bl	801e5d0 <CalculaCRCByte>
 801e652:	4603      	mov	r3, r0
 801e654:	81bb      	strh	r3, [r7, #12]
 801e656:	89fb      	ldrh	r3, [r7, #14]
 801e658:	3301      	adds	r3, #1
 801e65a:	81fb      	strh	r3, [r7, #14]
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	3301      	adds	r3, #1
 801e660:	607b      	str	r3, [r7, #4]
 801e662:	89fa      	ldrh	r2, [r7, #14]
 801e664:	887b      	ldrh	r3, [r7, #2]
 801e666:	429a      	cmp	r2, r3
 801e668:	d3ec      	bcc.n	801e644 <CalculaCRCStream+0x18>
  return crc;
 801e66a:	89bb      	ldrh	r3, [r7, #12]
}
 801e66c:	4618      	mov	r0, r3
 801e66e:	3710      	adds	r7, #16
 801e670:	46bd      	mov	sp, r7
 801e672:	bd80      	pop	{r7, pc}

0801e674 <ReadCoilRegister>:


uint8_t ReadCoilRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801e674:	b580      	push	{r7, lr}
 801e676:	b084      	sub	sp, #16
 801e678:	af00      	add	r7, sp, #0
 801e67a:	6078      	str	r0, [r7, #4]
 801e67c:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	3305      	adds	r3, #5
 801e682:	781b      	ldrb	r3, [r3, #0]
 801e684:	005b      	lsls	r3, r3, #1
 801e686:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	3302      	adds	r3, #2
 801e68c:	7bba      	ldrb	r2, [r7, #14]
 801e68e:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e690:	2300      	movs	r3, #0
 801e692:	73fb      	strb	r3, [r7, #15]
 801e694:	e015      	b.n	801e6c2 <ReadCoilRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 801e696:	7bfb      	ldrb	r3, [r7, #15]
 801e698:	3301      	adds	r3, #1
 801e69a:	683a      	ldr	r2, [r7, #0]
 801e69c:	441a      	add	r2, r3
 801e69e:	7bfb      	ldrb	r3, [r7, #15]
 801e6a0:	3303      	adds	r3, #3
 801e6a2:	6879      	ldr	r1, [r7, #4]
 801e6a4:	440b      	add	r3, r1
 801e6a6:	7812      	ldrb	r2, [r2, #0]
 801e6a8:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 801e6aa:	7bfb      	ldrb	r3, [r7, #15]
 801e6ac:	683a      	ldr	r2, [r7, #0]
 801e6ae:	441a      	add	r2, r3
 801e6b0:	7bfb      	ldrb	r3, [r7, #15]
 801e6b2:	3304      	adds	r3, #4
 801e6b4:	6879      	ldr	r1, [r7, #4]
 801e6b6:	440b      	add	r3, r1
 801e6b8:	7812      	ldrb	r2, [r2, #0]
 801e6ba:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e6bc:	7bfb      	ldrb	r3, [r7, #15]
 801e6be:	3302      	adds	r3, #2
 801e6c0:	73fb      	strb	r3, [r7, #15]
 801e6c2:	7bfa      	ldrb	r2, [r7, #15]
 801e6c4:	7bbb      	ldrb	r3, [r7, #14]
 801e6c6:	429a      	cmp	r2, r3
 801e6c8:	d3e5      	bcc.n	801e696 <ReadCoilRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 801e6ca:	7bbb      	ldrb	r3, [r7, #14]
 801e6cc:	b29b      	uxth	r3, r3
 801e6ce:	3303      	adds	r3, #3
 801e6d0:	b29b      	uxth	r3, r3
 801e6d2:	4619      	mov	r1, r3
 801e6d4:	6878      	ldr	r0, [r7, #4]
 801e6d6:	f7ff ffa9 	bl	801e62c <CalculaCRCStream>
 801e6da:	4603      	mov	r3, r0
 801e6dc:	81bb      	strh	r3, [r7, #12]
	buffer [ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 801e6de:	7bbb      	ldrb	r3, [r7, #14]
 801e6e0:	3303      	adds	r3, #3
 801e6e2:	687a      	ldr	r2, [r7, #4]
 801e6e4:	4413      	add	r3, r2
 801e6e6:	89ba      	ldrh	r2, [r7, #12]
 801e6e8:	b2d2      	uxtb	r2, r2
 801e6ea:	701a      	strb	r2, [r3, #0]
	buffer [ bytecount + 4 ] = ( uint8_t ) ( crc >> 8);
 801e6ec:	89bb      	ldrh	r3, [r7, #12]
 801e6ee:	0a1b      	lsrs	r3, r3, #8
 801e6f0:	b299      	uxth	r1, r3
 801e6f2:	7bbb      	ldrb	r3, [r7, #14]
 801e6f4:	3304      	adds	r3, #4
 801e6f6:	687a      	ldr	r2, [r7, #4]
 801e6f8:	4413      	add	r3, r2
 801e6fa:	b2ca      	uxtb	r2, r1
 801e6fc:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 801e6fe:	7bbb      	ldrb	r3, [r7, #14]
 801e700:	3305      	adds	r3, #5
 801e702:	b2db      	uxtb	r3, r3
}
 801e704:	4618      	mov	r0, r3
 801e706:	3710      	adds	r7, #16
 801e708:	46bd      	mov	sp, r7
 801e70a:	bd80      	pop	{r7, pc}

0801e70c <ReadInputRegister>:


uint8_t ReadInputRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801e70c:	b580      	push	{r7, lr}
 801e70e:	b084      	sub	sp, #16
 801e710:	af00      	add	r7, sp, #0
 801e712:	6078      	str	r0, [r7, #4]
 801e714:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	3305      	adds	r3, #5
 801e71a:	781b      	ldrb	r3, [r3, #0]
 801e71c:	005b      	lsls	r3, r3, #1
 801e71e:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	3302      	adds	r3, #2
 801e724:	7bba      	ldrb	r2, [r7, #14]
 801e726:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e728:	2300      	movs	r3, #0
 801e72a:	73fb      	strb	r3, [r7, #15]
 801e72c:	e015      	b.n	801e75a <ReadInputRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 801e72e:	7bfb      	ldrb	r3, [r7, #15]
 801e730:	3301      	adds	r3, #1
 801e732:	683a      	ldr	r2, [r7, #0]
 801e734:	441a      	add	r2, r3
 801e736:	7bfb      	ldrb	r3, [r7, #15]
 801e738:	3303      	adds	r3, #3
 801e73a:	6879      	ldr	r1, [r7, #4]
 801e73c:	440b      	add	r3, r1
 801e73e:	7812      	ldrb	r2, [r2, #0]
 801e740:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 801e742:	7bfb      	ldrb	r3, [r7, #15]
 801e744:	683a      	ldr	r2, [r7, #0]
 801e746:	441a      	add	r2, r3
 801e748:	7bfb      	ldrb	r3, [r7, #15]
 801e74a:	3304      	adds	r3, #4
 801e74c:	6879      	ldr	r1, [r7, #4]
 801e74e:	440b      	add	r3, r1
 801e750:	7812      	ldrb	r2, [r2, #0]
 801e752:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e754:	7bfb      	ldrb	r3, [r7, #15]
 801e756:	3302      	adds	r3, #2
 801e758:	73fb      	strb	r3, [r7, #15]
 801e75a:	7bfa      	ldrb	r2, [r7, #15]
 801e75c:	7bbb      	ldrb	r3, [r7, #14]
 801e75e:	429a      	cmp	r2, r3
 801e760:	d3e5      	bcc.n	801e72e <ReadInputRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 801e762:	7bbb      	ldrb	r3, [r7, #14]
 801e764:	b29b      	uxth	r3, r3
 801e766:	3303      	adds	r3, #3
 801e768:	b29b      	uxth	r3, r3
 801e76a:	4619      	mov	r1, r3
 801e76c:	6878      	ldr	r0, [r7, #4]
 801e76e:	f7ff ff5d 	bl	801e62c <CalculaCRCStream>
 801e772:	4603      	mov	r3, r0
 801e774:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 801e776:	7bbb      	ldrb	r3, [r7, #14]
 801e778:	3303      	adds	r3, #3
 801e77a:	687a      	ldr	r2, [r7, #4]
 801e77c:	4413      	add	r3, r2
 801e77e:	89ba      	ldrh	r2, [r7, #12]
 801e780:	b2d2      	uxtb	r2, r2
 801e782:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 801e784:	89bb      	ldrh	r3, [r7, #12]
 801e786:	0a1b      	lsrs	r3, r3, #8
 801e788:	b299      	uxth	r1, r3
 801e78a:	7bbb      	ldrb	r3, [r7, #14]
 801e78c:	3304      	adds	r3, #4
 801e78e:	687a      	ldr	r2, [r7, #4]
 801e790:	4413      	add	r3, r2
 801e792:	b2ca      	uxtb	r2, r1
 801e794:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 801e796:	7bbb      	ldrb	r3, [r7, #14]
 801e798:	3305      	adds	r3, #5
 801e79a:	b2db      	uxtb	r3, r3
}
 801e79c:	4618      	mov	r0, r3
 801e79e:	3710      	adds	r7, #16
 801e7a0:	46bd      	mov	sp, r7
 801e7a2:	bd80      	pop	{r7, pc}

0801e7a4 <ReadHoldingRegister>:


uint8_t ReadHoldingRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801e7a4:	b580      	push	{r7, lr}
 801e7a6:	b084      	sub	sp, #16
 801e7a8:	af00      	add	r7, sp, #0
 801e7aa:	6078      	str	r0, [r7, #4]
 801e7ac:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	3305      	adds	r3, #5
 801e7b2:	781b      	ldrb	r3, [r3, #0]
 801e7b4:	005b      	lsls	r3, r3, #1
 801e7b6:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	3302      	adds	r3, #2
 801e7bc:	7bba      	ldrb	r2, [r7, #14]
 801e7be:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 801e7c0:	2300      	movs	r3, #0
 801e7c2:	73fb      	strb	r3, [r7, #15]
 801e7c4:	e015      	b.n	801e7f2 <ReadHoldingRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 801e7c6:	7bfb      	ldrb	r3, [r7, #15]
 801e7c8:	3301      	adds	r3, #1
 801e7ca:	683a      	ldr	r2, [r7, #0]
 801e7cc:	441a      	add	r2, r3
 801e7ce:	7bfb      	ldrb	r3, [r7, #15]
 801e7d0:	3303      	adds	r3, #3
 801e7d2:	6879      	ldr	r1, [r7, #4]
 801e7d4:	440b      	add	r3, r1
 801e7d6:	7812      	ldrb	r2, [r2, #0]
 801e7d8:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 801e7da:	7bfb      	ldrb	r3, [r7, #15]
 801e7dc:	683a      	ldr	r2, [r7, #0]
 801e7de:	441a      	add	r2, r3
 801e7e0:	7bfb      	ldrb	r3, [r7, #15]
 801e7e2:	3304      	adds	r3, #4
 801e7e4:	6879      	ldr	r1, [r7, #4]
 801e7e6:	440b      	add	r3, r1
 801e7e8:	7812      	ldrb	r2, [r2, #0]
 801e7ea:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 801e7ec:	7bfb      	ldrb	r3, [r7, #15]
 801e7ee:	3302      	adds	r3, #2
 801e7f0:	73fb      	strb	r3, [r7, #15]
 801e7f2:	7bfa      	ldrb	r2, [r7, #15]
 801e7f4:	7bbb      	ldrb	r3, [r7, #14]
 801e7f6:	429a      	cmp	r2, r3
 801e7f8:	d3e5      	bcc.n	801e7c6 <ReadHoldingRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ]   = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream(buffer, bytecount + 3 );
 801e7fa:	7bbb      	ldrb	r3, [r7, #14]
 801e7fc:	b29b      	uxth	r3, r3
 801e7fe:	3303      	adds	r3, #3
 801e800:	b29b      	uxth	r3, r3
 801e802:	4619      	mov	r1, r3
 801e804:	6878      	ldr	r0, [r7, #4]
 801e806:	f7ff ff11 	bl	801e62c <CalculaCRCStream>
 801e80a:	4603      	mov	r3, r0
 801e80c:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 801e80e:	7bbb      	ldrb	r3, [r7, #14]
 801e810:	3303      	adds	r3, #3
 801e812:	687a      	ldr	r2, [r7, #4]
 801e814:	4413      	add	r3, r2
 801e816:	89ba      	ldrh	r2, [r7, #12]
 801e818:	b2d2      	uxtb	r2, r2
 801e81a:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 801e81c:	89bb      	ldrh	r3, [r7, #12]
 801e81e:	0a1b      	lsrs	r3, r3, #8
 801e820:	b299      	uxth	r1, r3
 801e822:	7bbb      	ldrb	r3, [r7, #14]
 801e824:	3304      	adds	r3, #4
 801e826:	687a      	ldr	r2, [r7, #4]
 801e828:	4413      	add	r3, r2
 801e82a:	b2ca      	uxtb	r2, r1
 801e82c:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 801e82e:	7bbb      	ldrb	r3, [r7, #14]
 801e830:	3305      	adds	r3, #5
 801e832:	b2db      	uxtb	r3, r3
}
 801e834:	4618      	mov	r0, r3
 801e836:	3710      	adds	r7, #16
 801e838:	46bd      	mov	sp, r7
 801e83a:	bd80      	pop	{r7, pc}

0801e83c <PresetSingleRegister>:


uint8_t PresetSingleRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801e83c:	b480      	push	{r7}
 801e83e:	b083      	sub	sp, #12
 801e840:	af00      	add	r7, sp, #0
 801e842:	6078      	str	r0, [r7, #4]
 801e844:	6039      	str	r1, [r7, #0]
	#ifdef LITTLE_ENDIAN
	*( ptr ) = buffer [ 5 ];
 801e846:	687b      	ldr	r3, [r7, #4]
 801e848:	795a      	ldrb	r2, [r3, #5]
 801e84a:	683b      	ldr	r3, [r7, #0]
 801e84c:	701a      	strb	r2, [r3, #0]
	*( ptr + 1 ) = buffer [ 4 ];
 801e84e:	683b      	ldr	r3, [r7, #0]
 801e850:	3301      	adds	r3, #1
 801e852:	687a      	ldr	r2, [r7, #4]
 801e854:	7912      	ldrb	r2, [r2, #4]
 801e856:	701a      	strb	r2, [r3, #0]
	#endif
	#ifdef BIG_ENDIAN
	*( ptr ) = buffer [ 4 ];
	*( ptr + 1 ) = buffer [ 5 ];
	#endif
	return ( 8 );
 801e858:	2308      	movs	r3, #8
}
 801e85a:	4618      	mov	r0, r3
 801e85c:	370c      	adds	r7, #12
 801e85e:	46bd      	mov	sp, r7
 801e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e864:	4770      	bx	lr

0801e866 <PresetMultipleRegisters>:


uint8_t PresetMultipleRegisters ( uint8_t *buffer, uint8_t *ptr ) {
 801e866:	b580      	push	{r7, lr}
 801e868:	b084      	sub	sp, #16
 801e86a:	af00      	add	r7, sp, #0
 801e86c:	6078      	str	r0, [r7, #4]
 801e86e:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = buffer [ 6 ];
 801e870:	687b      	ldr	r3, [r7, #4]
 801e872:	799b      	ldrb	r3, [r3, #6]
 801e874:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e876:	2300      	movs	r3, #0
 801e878:	73fb      	strb	r3, [r7, #15]
 801e87a:	e016      	b.n	801e8aa <PresetMultipleRegisters+0x44>
		#ifdef LITTLE_ENDIAN
		*( ptr + i ) = buffer [ 7 + i + 1 ];
 801e87c:	7bfb      	ldrb	r3, [r7, #15]
 801e87e:	3308      	adds	r3, #8
 801e880:	687a      	ldr	r2, [r7, #4]
 801e882:	441a      	add	r2, r3
 801e884:	7bfb      	ldrb	r3, [r7, #15]
 801e886:	6839      	ldr	r1, [r7, #0]
 801e888:	440b      	add	r3, r1
 801e88a:	7812      	ldrb	r2, [r2, #0]
 801e88c:	701a      	strb	r2, [r3, #0]
		*( ptr + i + 1 ) = buffer [ 7 + i ];
 801e88e:	7bfb      	ldrb	r3, [r7, #15]
 801e890:	3307      	adds	r3, #7
 801e892:	461a      	mov	r2, r3
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	441a      	add	r2, r3
 801e898:	7bfb      	ldrb	r3, [r7, #15]
 801e89a:	3301      	adds	r3, #1
 801e89c:	6839      	ldr	r1, [r7, #0]
 801e89e:	440b      	add	r3, r1
 801e8a0:	7812      	ldrb	r2, [r2, #0]
 801e8a2:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801e8a4:	7bfb      	ldrb	r3, [r7, #15]
 801e8a6:	3302      	adds	r3, #2
 801e8a8:	73fb      	strb	r3, [r7, #15]
 801e8aa:	7bfa      	ldrb	r2, [r7, #15]
 801e8ac:	7bbb      	ldrb	r3, [r7, #14]
 801e8ae:	429a      	cmp	r2, r3
 801e8b0:	d3e4      	bcc.n	801e87c <PresetMultipleRegisters+0x16>
		#ifdef BIG_ENDIAN
		*( ptr + i ) = buffer [ 7 + i ];
		*( ptr + i + 1 ) = buffer [ 7 + i + 1 ];
		#endif
	}
	crc = CalculaCRCStream ( buffer, 6 );
 801e8b2:	2106      	movs	r1, #6
 801e8b4:	6878      	ldr	r0, [r7, #4]
 801e8b6:	f7ff feb9 	bl	801e62c <CalculaCRCStream>
 801e8ba:	4603      	mov	r3, r0
 801e8bc:	81bb      	strh	r3, [r7, #12]
	buffer [ 6 ] = ( uint8_t ) ( crc & 0x00FF );
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	3306      	adds	r3, #6
 801e8c2:	89ba      	ldrh	r2, [r7, #12]
 801e8c4:	b2d2      	uxtb	r2, r2
 801e8c6:	701a      	strb	r2, [r3, #0]
	buffer [ 7 ] = ( uint8_t ) ( crc >> 8 );
 801e8c8:	89bb      	ldrh	r3, [r7, #12]
 801e8ca:	0a1b      	lsrs	r3, r3, #8
 801e8cc:	b29a      	uxth	r2, r3
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	3307      	adds	r3, #7
 801e8d2:	b2d2      	uxtb	r2, r2
 801e8d4:	701a      	strb	r2, [r3, #0]
	return ( 8 );
 801e8d6:	2308      	movs	r3, #8
}
 801e8d8:	4618      	mov	r0, r3
 801e8da:	3710      	adds	r7, #16
 801e8dc:	46bd      	mov	sp, r7
 801e8de:	bd80      	pop	{r7, pc}

0801e8e0 <InterpreterMODBUS>:
#include "modbus.h"

MB modbus;

uint16_t InterpreterMODBUS(uint8_t *msg, uint16_t len)
{
 801e8e0:	b580      	push	{r7, lr}
 801e8e2:	b086      	sub	sp, #24
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]
 801e8e8:	460b      	mov	r3, r1
 801e8ea:	807b      	strh	r3, [r7, #2]
	uint8_t *ptr;
	uint16_t crccal, crcrec, address, totalbytes;

	crccal = 0;
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	82bb      	strh	r3, [r7, #20]
	crcrec = 0;
 801e8f0:	2300      	movs	r3, #0
 801e8f2:	827b      	strh	r3, [r7, #18]
	address = (msg[2] << 8) | msg[3];
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	3302      	adds	r3, #2
 801e8f8:	781b      	ldrb	r3, [r3, #0]
 801e8fa:	021b      	lsls	r3, r3, #8
 801e8fc:	b21a      	sxth	r2, r3
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	3303      	adds	r3, #3
 801e902:	781b      	ldrb	r3, [r3, #0]
 801e904:	b21b      	sxth	r3, r3
 801e906:	4313      	orrs	r3, r2
 801e908:	b21b      	sxth	r3, r3
 801e90a:	823b      	strh	r3, [r7, #16]
	//bytecount = msg[6];
	crccal = CalculaCRCStream(msg, len - 2);
 801e90c:	887b      	ldrh	r3, [r7, #2]
 801e90e:	3b02      	subs	r3, #2
 801e910:	b29b      	uxth	r3, r3
 801e912:	4619      	mov	r1, r3
 801e914:	6878      	ldr	r0, [r7, #4]
 801e916:	f7ff fe89 	bl	801e62c <CalculaCRCStream>
 801e91a:	4603      	mov	r3, r0
 801e91c:	82bb      	strh	r3, [r7, #20]
	crcrec = (msg[len - 1] << 8) | msg[len - 2];
 801e91e:	887b      	ldrh	r3, [r7, #2]
 801e920:	3b01      	subs	r3, #1
 801e922:	687a      	ldr	r2, [r7, #4]
 801e924:	4413      	add	r3, r2
 801e926:	781b      	ldrb	r3, [r3, #0]
 801e928:	021b      	lsls	r3, r3, #8
 801e92a:	b21a      	sxth	r2, r3
 801e92c:	887b      	ldrh	r3, [r7, #2]
 801e92e:	3b02      	subs	r3, #2
 801e930:	6879      	ldr	r1, [r7, #4]
 801e932:	440b      	add	r3, r1
 801e934:	781b      	ldrb	r3, [r3, #0]
 801e936:	b21b      	sxth	r3, r3
 801e938:	4313      	orrs	r3, r2
 801e93a:	b21b      	sxth	r3, r3
 801e93c:	827b      	strh	r3, [r7, #18]

	if (crccal == crcrec)
 801e93e:	8aba      	ldrh	r2, [r7, #20]
 801e940:	8a7b      	ldrh	r3, [r7, #18]
 801e942:	429a      	cmp	r2, r3
 801e944:	f040 80ac 	bne.w	801eaa0 <InterpreterMODBUS+0x1c0>
	{
		switch (msg[0])
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	781b      	ldrb	r3, [r3, #0]
 801e94c:	2b01      	cmp	r3, #1
 801e94e:	f040 80ab 	bne.w	801eaa8 <InterpreterMODBUS+0x1c8>
		{
		case 0x01: // Escravo 1
			switch (msg[1])
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	3301      	adds	r3, #1
 801e956:	781b      	ldrb	r3, [r3, #0]
 801e958:	3b01      	subs	r3, #1
 801e95a:	2b0f      	cmp	r3, #15
 801e95c:	f200 80a3 	bhi.w	801eaa6 <InterpreterMODBUS+0x1c6>
 801e960:	a201      	add	r2, pc, #4	; (adr r2, 801e968 <InterpreterMODBUS+0x88>)
 801e962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e966:	bf00      	nop
 801e968:	0801e9a9 	.word	0x0801e9a9
 801e96c:	0801ea9d 	.word	0x0801ea9d
 801e970:	0801e9c1 	.word	0x0801e9c1
 801e974:	0801e9d9 	.word	0x0801e9d9
 801e978:	0801ea9d 	.word	0x0801ea9d
 801e97c:	0801e9f1 	.word	0x0801e9f1
 801e980:	0801eaa7 	.word	0x0801eaa7
 801e984:	0801eaa7 	.word	0x0801eaa7
 801e988:	0801eaa7 	.word	0x0801eaa7
 801e98c:	0801eaa7 	.word	0x0801eaa7
 801e990:	0801eaa7 	.word	0x0801eaa7
 801e994:	0801eaa7 	.word	0x0801eaa7
 801e998:	0801eaa7 	.word	0x0801eaa7
 801e99c:	0801eaa7 	.word	0x0801eaa7
 801e9a0:	0801ea9d 	.word	0x0801ea9d
 801e9a4:	0801ea47 	.word	0x0801ea47
			{
			case 0x01: // Read coil registers

				ptr = GetAddrCoilRegister(address); // Pega o endereco real na memeria do CR
 801e9a8:	8a3b      	ldrh	r3, [r7, #16]
 801e9aa:	4618      	mov	r0, r3
 801e9ac:	f000 f884 	bl	801eab8 <GetAddrCoilRegister>
 801e9b0:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadCoilRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 801e9b2:	68f9      	ldr	r1, [r7, #12]
 801e9b4:	6878      	ldr	r0, [r7, #4]
 801e9b6:	f7ff fe5d 	bl	801e674 <ReadCoilRegister>
 801e9ba:	4603      	mov	r3, r0
 801e9bc:	82fb      	strh	r3, [r7, #22]
				break;
 801e9be:	e06e      	b.n	801ea9e <InterpreterMODBUS+0x1be>
			case 0x02: // Read input status
				break;
			case 0x03: // Read holding registers
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 801e9c0:	8a3b      	ldrh	r3, [r7, #16]
 801e9c2:	4618      	mov	r0, r3
 801e9c4:	f000 f8c2 	bl	801eb4c <GetAddrHoldingRegister>
 801e9c8:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadHoldingRegister(msg, ptr);	// Le o valor do IR e monta parte da mensagem
 801e9ca:	68f9      	ldr	r1, [r7, #12]
 801e9cc:	6878      	ldr	r0, [r7, #4]
 801e9ce:	f7ff fee9 	bl	801e7a4 <ReadHoldingRegister>
 801e9d2:	4603      	mov	r3, r0
 801e9d4:	82fb      	strh	r3, [r7, #22]
				break;
 801e9d6:	e062      	b.n	801ea9e <InterpreterMODBUS+0x1be>
			case 0x04: // Read input registers
				ptr = GetAddrInputRegister(address); // Pega o endereco real na memoria do IR
 801e9d8:	8a3b      	ldrh	r3, [r7, #16]
 801e9da:	4618      	mov	r0, r3
 801e9dc:	f000 f892 	bl	801eb04 <GetAddrInputRegister>
 801e9e0:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadInputRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 801e9e2:	68f9      	ldr	r1, [r7, #12]
 801e9e4:	6878      	ldr	r0, [r7, #4]
 801e9e6:	f7ff fe91 	bl	801e70c <ReadInputRegister>
 801e9ea:	4603      	mov	r3, r0
 801e9ec:	82fb      	strh	r3, [r7, #22]
				break;
 801e9ee:	e056      	b.n	801ea9e <InterpreterMODBUS+0x1be>
			case 0x05: // Force single coil
				break;
			case 0x06: // Preset single register
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 801e9f0:	8a3b      	ldrh	r3, [r7, #16]
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	f000 f8aa 	bl	801eb4c <GetAddrHoldingRegister>
 801e9f8:	60f8      	str	r0, [r7, #12]
				totalbytes = PresetSingleRegister(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 801e9fa:	68f9      	ldr	r1, [r7, #12]
 801e9fc:	6878      	ldr	r0, [r7, #4]
 801e9fe:	f7ff ff1d 	bl	801e83c <PresetSingleRegister>
 801ea02:	4603      	mov	r3, r0
 801ea04:	82fb      	strh	r3, [r7, #22]

				//eeprom_write_char ( address, *( ptr ) );
				//eeprom_write_char ( address + 1, *( ptr + 1 ) );

				if (totalbytes)
 801ea06:	8afb      	ldrh	r3, [r7, #22]
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	d016      	beq.n	801ea3a <InterpreterMODBUS+0x15a>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (modbus.INPUTREGISTERS[ADD_TIPO_HARDW] != modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 801ea0c:	4b29      	ldr	r3, [pc, #164]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea0e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d011      	beq.n	801ea3a <InterpreterMODBUS+0x15a>
 801ea16:	4b27      	ldr	r3, [pc, #156]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea18:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 801ea1c:	4b25      	ldr	r3, [pc, #148]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea1e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 801ea22:	429a      	cmp	r2, r3
 801ea24:	d009      	beq.n	801ea3a <InterpreterMODBUS+0x15a>
					{
						//if((modbusMapa.COPIA_TIPO_HARDW != 0) && (modbusMapa.TIPO_HARDW != modbusMapa.COPIA_TIPO_HARDW)){

						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] =
								modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 801ea26:	4b23      	ldr	r3, [pc, #140]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea28:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] =
 801ea2c:	4b21      	ldr	r3, [pc, #132]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea2e:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						//modbusMapa.TIPO_HARDW = modbusMapa.COPIA_TIPO_HARDW;

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 801ea32:	206f      	movs	r0, #111	; 0x6f
 801ea34:	f000 f866 	bl	801eb04 <GetAddrInputRegister>
 801ea38:	60f8      	str	r0, [r7, #12]
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 801ea3a:	8a3b      	ldrh	r3, [r7, #16]
 801ea3c:	4618      	mov	r0, r3
 801ea3e:	f000 f885 	bl	801eb4c <GetAddrHoldingRegister>
 801ea42:	60f8      	str	r0, [r7, #12]

				//eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 801ea44:	e02b      	b.n	801ea9e <InterpreterMODBUS+0x1be>
			case 0x0F: // Preset multiple coils
				break;
			case 0x10: // Preset multiple resgisters
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memeria do HR
 801ea46:	8a3b      	ldrh	r3, [r7, #16]
 801ea48:	4618      	mov	r0, r3
 801ea4a:	f000 f87f 	bl	801eb4c <GetAddrHoldingRegister>
 801ea4e:	60f8      	str	r0, [r7, #12]

				totalbytes = PresetMultipleRegisters(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 801ea50:	68f9      	ldr	r1, [r7, #12]
 801ea52:	6878      	ldr	r0, [r7, #4]
 801ea54:	f7ff ff07 	bl	801e866 <PresetMultipleRegisters>
 801ea58:	4603      	mov	r3, r0
 801ea5a:	82fb      	strh	r3, [r7, #22]

				//eeprom_write_stream((address * 2), bytecount, ptr);

				if (totalbytes)
 801ea5c:	8afb      	ldrh	r3, [r7, #22]
 801ea5e:	2b00      	cmp	r3, #0
 801ea60:	d016      	beq.n	801ea90 <InterpreterMODBUS+0x1b0>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (modbus.INPUTREGISTERS[ADD_TIPO_HARDW] != modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 801ea62:	4b14      	ldr	r3, [pc, #80]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea64:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	d011      	beq.n	801ea90 <InterpreterMODBUS+0x1b0>
 801ea6c:	4b11      	ldr	r3, [pc, #68]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea6e:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 801ea72:	4b10      	ldr	r3, [pc, #64]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea74:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 801ea78:	429a      	cmp	r2, r3
 801ea7a:	d009      	beq.n	801ea90 <InterpreterMODBUS+0x1b0>
					{

						//if((modbusMapa.COPIA_TIPO_HARDW != 0) && (modbusMapa.TIPO_HARDW != modbusMapa.COPIA_TIPO_HARDW)){
						// modbusMapa.TIPO_HARDW = modbusMapa.COPIA_TIPO_HARDW;
						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] = modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 801ea7c:	4b0d      	ldr	r3, [pc, #52]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea7e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 801ea82:	4b0c      	ldr	r3, [pc, #48]	; (801eab4 <InterpreterMODBUS+0x1d4>)
 801ea84:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 801ea88:	206f      	movs	r0, #111	; 0x6f
 801ea8a:	f000 f83b 	bl	801eb04 <GetAddrInputRegister>
 801ea8e:	60f8      	str	r0, [r7, #12]
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 801ea90:	8a3b      	ldrh	r3, [r7, #16]
 801ea92:	4618      	mov	r0, r3
 801ea94:	f000 f85a 	bl	801eb4c <GetAddrHoldingRegister>
 801ea98:	60f8      	str	r0, [r7, #12]
				// eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 801ea9a:	e000      	b.n	801ea9e <InterpreterMODBUS+0x1be>
				break;
 801ea9c:	bf00      	nop
			}
			break;
 801ea9e:	e002      	b.n	801eaa6 <InterpreterMODBUS+0x1c6>
		}
	}
	else
	{

		totalbytes = 0;
 801eaa0:	2300      	movs	r3, #0
 801eaa2:	82fb      	strh	r3, [r7, #22]
 801eaa4:	e000      	b.n	801eaa8 <InterpreterMODBUS+0x1c8>
			break;
 801eaa6:	bf00      	nop
	}

	return totalbytes;
 801eaa8:	8afb      	ldrh	r3, [r7, #22]
}
 801eaaa:	4618      	mov	r0, r3
 801eaac:	3718      	adds	r7, #24
 801eaae:	46bd      	mov	sp, r7
 801eab0:	bd80      	pop	{r7, pc}
 801eab2:	bf00      	nop
 801eab4:	20010360 	.word	0x20010360

0801eab8 <GetAddrCoilRegister>:

uint8_t* GetAddrCoilRegister(uint16_t address)
{
 801eab8:	b480      	push	{r7}
 801eaba:	b085      	sub	sp, #20
 801eabc:	af00      	add	r7, sp, #0
 801eabe:	4603      	mov	r3, r0
 801eac0:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	switch (address)
 801eac2:	88fb      	ldrh	r3, [r7, #6]
 801eac4:	2b02      	cmp	r3, #2
 801eac6:	d00c      	beq.n	801eae2 <GetAddrCoilRegister+0x2a>
 801eac8:	2b02      	cmp	r3, #2
 801eaca:	dc0d      	bgt.n	801eae8 <GetAddrCoilRegister+0x30>
 801eacc:	2b00      	cmp	r3, #0
 801eace:	d002      	beq.n	801ead6 <GetAddrCoilRegister+0x1e>
 801ead0:	2b01      	cmp	r3, #1
 801ead2:	d003      	beq.n	801eadc <GetAddrCoilRegister+0x24>
 801ead4:	e008      	b.n	801eae8 <GetAddrCoilRegister+0x30>
	{

	case ADD_IN_1:
		ptr = (uint8_t*) &modbus.COILS[ADD_IN_1];
 801ead6:	4b08      	ldr	r3, [pc, #32]	; (801eaf8 <GetAddrCoilRegister+0x40>)
 801ead8:	60fb      	str	r3, [r7, #12]
		break;
 801eada:	e005      	b.n	801eae8 <GetAddrCoilRegister+0x30>
	case ADD_IN_2:
		ptr = (uint8_t*) &modbus.COILS[ADD_IN_2];
 801eadc:	4b07      	ldr	r3, [pc, #28]	; (801eafc <GetAddrCoilRegister+0x44>)
 801eade:	60fb      	str	r3, [r7, #12]
		break;
 801eae0:	e002      	b.n	801eae8 <GetAddrCoilRegister+0x30>
	case ADD_OUT_1:
		ptr = (uint8_t*) &modbus.COILS[ADD_OUT_1];
 801eae2:	4b07      	ldr	r3, [pc, #28]	; (801eb00 <GetAddrCoilRegister+0x48>)
 801eae4:	60fb      	str	r3, [r7, #12]
		break;
 801eae6:	bf00      	nop
	}
	return ptr;
 801eae8:	68fb      	ldr	r3, [r7, #12]
}
 801eaea:	4618      	mov	r0, r3
 801eaec:	3714      	adds	r7, #20
 801eaee:	46bd      	mov	sp, r7
 801eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaf4:	4770      	bx	lr
 801eaf6:	bf00      	nop
 801eaf8:	20010360 	.word	0x20010360
 801eafc:	20010362 	.word	0x20010362
 801eb00:	20010364 	.word	0x20010364

0801eb04 <GetAddrInputRegister>:

uint8_t* GetAddrInputRegister(uint16_t address)
{
 801eb04:	b480      	push	{r7}
 801eb06:	b085      	sub	sp, #20
 801eb08:	af00      	add	r7, sp, #0
 801eb0a:	4603      	mov	r3, r0
 801eb0c:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 256)
 801eb0e:	88fb      	ldrh	r3, [r7, #6]
 801eb10:	2bff      	cmp	r3, #255	; 0xff
 801eb12:	d808      	bhi.n	801eb26 <GetAddrInputRegister+0x22>

		ptr = (uint8_t*) &modbus.INPUTREGISTERS[ADD_IMEI_1 + (address)];
 801eb14:	88fb      	ldrh	r3, [r7, #6]
 801eb16:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801eb1a:	005b      	lsls	r3, r3, #1
 801eb1c:	4a0a      	ldr	r2, [pc, #40]	; (801eb48 <GetAddrInputRegister+0x44>)
 801eb1e:	4413      	add	r3, r2
 801eb20:	3306      	adds	r3, #6
 801eb22:	60fb      	str	r3, [r7, #12]
 801eb24:	e009      	b.n	801eb3a <GetAddrInputRegister+0x36>
	else
		ptr = (uint8_t*) &modbus.ESPELHO[ADD_IMEI_1 + ((address - 256))];
 801eb26:	88fb      	ldrh	r3, [r7, #6]
 801eb28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801eb2c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801eb30:	005b      	lsls	r3, r3, #1
 801eb32:	4a05      	ldr	r2, [pc, #20]	; (801eb48 <GetAddrInputRegister+0x44>)
 801eb34:	4413      	add	r3, r2
 801eb36:	3304      	adds	r3, #4
 801eb38:	60fb      	str	r3, [r7, #12]
	return ptr;
 801eb3a:	68fb      	ldr	r3, [r7, #12]
}
 801eb3c:	4618      	mov	r0, r3
 801eb3e:	3714      	adds	r7, #20
 801eb40:	46bd      	mov	sp, r7
 801eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb46:	4770      	bx	lr
 801eb48:	20010360 	.word	0x20010360

0801eb4c <GetAddrHoldingRegister>:

uint8_t* GetAddrHoldingRegister(uint16_t address)
{
 801eb4c:	b480      	push	{r7}
 801eb4e:	b085      	sub	sp, #20
 801eb50:	af00      	add	r7, sp, #0
 801eb52:	4603      	mov	r3, r0
 801eb54:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 500)
 801eb56:	88fb      	ldrh	r3, [r7, #6]
 801eb58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801eb5c:	d206      	bcs.n	801eb6c <GetAddrHoldingRegister+0x20>

		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[ADD_TEMVALCONGPR + (address)];
 801eb5e:	88fb      	ldrh	r3, [r7, #6]
 801eb60:	005b      	lsls	r3, r3, #1
 801eb62:	4a09      	ldr	r2, [pc, #36]	; (801eb88 <GetAddrHoldingRegister+0x3c>)
 801eb64:	4413      	add	r3, r2
 801eb66:	3306      	adds	r3, #6
 801eb68:	60fb      	str	r3, [r7, #12]
 801eb6a:	e006      	b.n	801eb7a <GetAddrHoldingRegister+0x2e>
	//ptr = (uint8_t*) &modbusMapa.TEMVALCONGPR + (address * 2);
	else
		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[(ADD_NUMSER_1 - 130)
				+ (address - 500)];
 801eb6c:	88fb      	ldrh	r3, [r7, #6]
 801eb6e:	3b82      	subs	r3, #130	; 0x82
		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[(ADD_NUMSER_1 - 130)
 801eb70:	005b      	lsls	r3, r3, #1
 801eb72:	4a05      	ldr	r2, [pc, #20]	; (801eb88 <GetAddrHoldingRegister+0x3c>)
 801eb74:	4413      	add	r3, r2
 801eb76:	3306      	adds	r3, #6
 801eb78:	60fb      	str	r3, [r7, #12]
	//ptr = (uint8_t*) &modbusMapa.NUMSER_1 + ((address - 500) * 2);
	return ptr;
 801eb7a:	68fb      	ldr	r3, [r7, #12]
}
 801eb7c:	4618      	mov	r0, r3
 801eb7e:	3714      	adds	r7, #20
 801eb80:	46bd      	mov	sp, r7
 801eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb86:	4770      	bx	lr
 801eb88:	20010360 	.word	0x20010360

0801eb8c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 801eb8c:	b580      	push	{r7, lr}
 801eb8e:	b086      	sub	sp, #24
 801eb90:	af02      	add	r7, sp, #8
 801eb92:	4603      	mov	r3, r0
 801eb94:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 801eb96:	f107 020f 	add.w	r2, r7, #15
 801eb9a:	1df9      	adds	r1, r7, #7
 801eb9c:	2364      	movs	r3, #100	; 0x64
 801eb9e:	9300      	str	r3, [sp, #0]
 801eba0:	2301      	movs	r3, #1
 801eba2:	4804      	ldr	r0, [pc, #16]	; (801ebb4 <W25qxx_Spi+0x28>)
 801eba4:	f7e5 fcb2 	bl	800450c <HAL_SPI_TransmitReceive>


	return ret;
 801eba8:	7bfb      	ldrb	r3, [r7, #15]
}
 801ebaa:	4618      	mov	r0, r3
 801ebac:	3710      	adds	r7, #16
 801ebae:	46bd      	mov	sp, r7
 801ebb0:	bd80      	pop	{r7, pc}
 801ebb2:	bf00      	nop
 801ebb4:	20000564 	.word	0x20000564

0801ebb8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 801ebb8:	b580      	push	{r7, lr}
 801ebba:	b084      	sub	sp, #16
 801ebbc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 801ebbe:	2300      	movs	r3, #0
 801ebc0:	60fb      	str	r3, [r7, #12]
 801ebc2:	2300      	movs	r3, #0
 801ebc4:	60bb      	str	r3, [r7, #8]
 801ebc6:	2300      	movs	r3, #0
 801ebc8:	607b      	str	r3, [r7, #4]
 801ebca:	2300      	movs	r3, #0
 801ebcc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ebce:	2200      	movs	r2, #0
 801ebd0:	2108      	movs	r1, #8
 801ebd2:	4813      	ldr	r0, [pc, #76]	; (801ec20 <W25qxx_ReadID+0x68>)
 801ebd4:	f7e4 fbce 	bl	8003374 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 801ebd8:	209f      	movs	r0, #159	; 0x9f
 801ebda:	f7ff ffd7 	bl	801eb8c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ebde:	20a5      	movs	r0, #165	; 0xa5
 801ebe0:	f7ff ffd4 	bl	801eb8c <W25qxx_Spi>
 801ebe4:	4603      	mov	r3, r0
 801ebe6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ebe8:	20a5      	movs	r0, #165	; 0xa5
 801ebea:	f7ff ffcf 	bl	801eb8c <W25qxx_Spi>
 801ebee:	4603      	mov	r3, r0
 801ebf0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ebf2:	20a5      	movs	r0, #165	; 0xa5
 801ebf4:	f7ff ffca 	bl	801eb8c <W25qxx_Spi>
 801ebf8:	4603      	mov	r3, r0
 801ebfa:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ebfc:	2201      	movs	r2, #1
 801ebfe:	2108      	movs	r1, #8
 801ec00:	4807      	ldr	r0, [pc, #28]	; (801ec20 <W25qxx_ReadID+0x68>)
 801ec02:	f7e4 fbb7 	bl	8003374 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 801ec06:	68bb      	ldr	r3, [r7, #8]
 801ec08:	041a      	lsls	r2, r3, #16
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	021b      	lsls	r3, r3, #8
 801ec0e:	4313      	orrs	r3, r2
 801ec10:	683a      	ldr	r2, [r7, #0]
 801ec12:	4313      	orrs	r3, r2
 801ec14:	60fb      	str	r3, [r7, #12]
	return Temp;
 801ec16:	68fb      	ldr	r3, [r7, #12]
}
 801ec18:	4618      	mov	r0, r3
 801ec1a:	3710      	adds	r7, #16
 801ec1c:	46bd      	mov	sp, r7
 801ec1e:	bd80      	pop	{r7, pc}
 801ec20:	40021000 	.word	0x40021000

0801ec24 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 801ec24:	b590      	push	{r4, r7, lr}
 801ec26:	b083      	sub	sp, #12
 801ec28:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ec2a:	2200      	movs	r2, #0
 801ec2c:	2108      	movs	r1, #8
 801ec2e:	4816      	ldr	r0, [pc, #88]	; (801ec88 <W25qxx_ReadUniqID+0x64>)
 801ec30:	f7e4 fba0 	bl	8003374 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 801ec34:	204b      	movs	r0, #75	; 0x4b
 801ec36:	f7ff ffa9 	bl	801eb8c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 801ec3a:	2300      	movs	r3, #0
 801ec3c:	71fb      	strb	r3, [r7, #7]
 801ec3e:	e005      	b.n	801ec4c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ec40:	20a5      	movs	r0, #165	; 0xa5
 801ec42:	f7ff ffa3 	bl	801eb8c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 801ec46:	79fb      	ldrb	r3, [r7, #7]
 801ec48:	3301      	adds	r3, #1
 801ec4a:	71fb      	strb	r3, [r7, #7]
 801ec4c:	79fb      	ldrb	r3, [r7, #7]
 801ec4e:	2b03      	cmp	r3, #3
 801ec50:	d9f6      	bls.n	801ec40 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 801ec52:	2300      	movs	r3, #0
 801ec54:	71bb      	strb	r3, [r7, #6]
 801ec56:	e00b      	b.n	801ec70 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ec58:	79bc      	ldrb	r4, [r7, #6]
 801ec5a:	20a5      	movs	r0, #165	; 0xa5
 801ec5c:	f7ff ff96 	bl	801eb8c <W25qxx_Spi>
 801ec60:	4603      	mov	r3, r0
 801ec62:	461a      	mov	r2, r3
 801ec64:	4b09      	ldr	r3, [pc, #36]	; (801ec8c <W25qxx_ReadUniqID+0x68>)
 801ec66:	4423      	add	r3, r4
 801ec68:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 801ec6a:	79bb      	ldrb	r3, [r7, #6]
 801ec6c:	3301      	adds	r3, #1
 801ec6e:	71bb      	strb	r3, [r7, #6]
 801ec70:	79bb      	ldrb	r3, [r7, #6]
 801ec72:	2b07      	cmp	r3, #7
 801ec74:	d9f0      	bls.n	801ec58 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ec76:	2201      	movs	r2, #1
 801ec78:	2108      	movs	r1, #8
 801ec7a:	4803      	ldr	r0, [pc, #12]	; (801ec88 <W25qxx_ReadUniqID+0x64>)
 801ec7c:	f7e4 fb7a 	bl	8003374 <HAL_GPIO_WritePin>
}
 801ec80:	bf00      	nop
 801ec82:	370c      	adds	r7, #12
 801ec84:	46bd      	mov	sp, r7
 801ec86:	bd90      	pop	{r4, r7, pc}
 801ec88:	40021000 	.word	0x40021000
 801ec8c:	200107dc 	.word	0x200107dc

0801ec90 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 801ec90:	b580      	push	{r7, lr}
 801ec92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ec94:	2200      	movs	r2, #0
 801ec96:	2108      	movs	r1, #8
 801ec98:	4807      	ldr	r0, [pc, #28]	; (801ecb8 <W25qxx_WriteEnable+0x28>)
 801ec9a:	f7e4 fb6b 	bl	8003374 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 801ec9e:	2006      	movs	r0, #6
 801eca0:	f7ff ff74 	bl	801eb8c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801eca4:	2201      	movs	r2, #1
 801eca6:	2108      	movs	r1, #8
 801eca8:	4803      	ldr	r0, [pc, #12]	; (801ecb8 <W25qxx_WriteEnable+0x28>)
 801ecaa:	f7e4 fb63 	bl	8003374 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 801ecae:	2001      	movs	r0, #1
 801ecb0:	f7e2 fe62 	bl	8001978 <HAL_Delay>
}
 801ecb4:	bf00      	nop
 801ecb6:	bd80      	pop	{r7, pc}
 801ecb8:	40021000 	.word	0x40021000

0801ecbc <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 801ecbc:	b580      	push	{r7, lr}
 801ecbe:	b084      	sub	sp, #16
 801ecc0:	af00      	add	r7, sp, #0
 801ecc2:	4603      	mov	r3, r0
 801ecc4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ecca:	2200      	movs	r2, #0
 801eccc:	2108      	movs	r1, #8
 801ecce:	481c      	ldr	r0, [pc, #112]	; (801ed40 <W25qxx_ReadStatusRegister+0x84>)
 801ecd0:	f7e4 fb50 	bl	8003374 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 801ecd4:	79fb      	ldrb	r3, [r7, #7]
 801ecd6:	2b01      	cmp	r3, #1
 801ecd8:	d10c      	bne.n	801ecf4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 801ecda:	2005      	movs	r0, #5
 801ecdc:	f7ff ff56 	bl	801eb8c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ece0:	20a5      	movs	r0, #165	; 0xa5
 801ece2:	f7ff ff53 	bl	801eb8c <W25qxx_Spi>
 801ece6:	4603      	mov	r3, r0
 801ece8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 801ecea:	4a16      	ldr	r2, [pc, #88]	; (801ed44 <W25qxx_ReadStatusRegister+0x88>)
 801ecec:	7bfb      	ldrb	r3, [r7, #15]
 801ecee:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 801ecf2:	e01b      	b.n	801ed2c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 801ecf4:	79fb      	ldrb	r3, [r7, #7]
 801ecf6:	2b02      	cmp	r3, #2
 801ecf8:	d10c      	bne.n	801ed14 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 801ecfa:	2035      	movs	r0, #53	; 0x35
 801ecfc:	f7ff ff46 	bl	801eb8c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ed00:	20a5      	movs	r0, #165	; 0xa5
 801ed02:	f7ff ff43 	bl	801eb8c <W25qxx_Spi>
 801ed06:	4603      	mov	r3, r0
 801ed08:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 801ed0a:	4a0e      	ldr	r2, [pc, #56]	; (801ed44 <W25qxx_ReadStatusRegister+0x88>)
 801ed0c:	7bfb      	ldrb	r3, [r7, #15]
 801ed0e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 801ed12:	e00b      	b.n	801ed2c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 801ed14:	2015      	movs	r0, #21
 801ed16:	f7ff ff39 	bl	801eb8c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ed1a:	20a5      	movs	r0, #165	; 0xa5
 801ed1c:	f7ff ff36 	bl	801eb8c <W25qxx_Spi>
 801ed20:	4603      	mov	r3, r0
 801ed22:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 801ed24:	4a07      	ldr	r2, [pc, #28]	; (801ed44 <W25qxx_ReadStatusRegister+0x88>)
 801ed26:	7bfb      	ldrb	r3, [r7, #15]
 801ed28:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ed2c:	2201      	movs	r2, #1
 801ed2e:	2108      	movs	r1, #8
 801ed30:	4803      	ldr	r0, [pc, #12]	; (801ed40 <W25qxx_ReadStatusRegister+0x84>)
 801ed32:	f7e4 fb1f 	bl	8003374 <HAL_GPIO_WritePin>
	return status;
 801ed36:	7bfb      	ldrb	r3, [r7, #15]
}
 801ed38:	4618      	mov	r0, r3
 801ed3a:	3710      	adds	r7, #16
 801ed3c:	46bd      	mov	sp, r7
 801ed3e:	bd80      	pop	{r7, pc}
 801ed40:	40021000 	.word	0x40021000
 801ed44:	200107dc 	.word	0x200107dc

0801ed48 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 801ed48:	b580      	push	{r7, lr}
 801ed4a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 801ed4c:	2001      	movs	r0, #1
 801ed4e:	f7e2 fe13 	bl	8001978 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ed52:	2200      	movs	r2, #0
 801ed54:	2108      	movs	r1, #8
 801ed56:	480f      	ldr	r0, [pc, #60]	; (801ed94 <W25qxx_WaitForWriteEnd+0x4c>)
 801ed58:	f7e4 fb0c 	bl	8003374 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 801ed5c:	2005      	movs	r0, #5
 801ed5e:	f7ff ff15 	bl	801eb8c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801ed62:	20a5      	movs	r0, #165	; 0xa5
 801ed64:	f7ff ff12 	bl	801eb8c <W25qxx_Spi>
 801ed68:	4603      	mov	r3, r0
 801ed6a:	461a      	mov	r2, r3
 801ed6c:	4b0a      	ldr	r3, [pc, #40]	; (801ed98 <W25qxx_WaitForWriteEnd+0x50>)
 801ed6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 801ed72:	2001      	movs	r0, #1
 801ed74:	f7e2 fe00 	bl	8001978 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 801ed78:	4b07      	ldr	r3, [pc, #28]	; (801ed98 <W25qxx_WaitForWriteEnd+0x50>)
 801ed7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ed7e:	f003 0301 	and.w	r3, r3, #1
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	d1ed      	bne.n	801ed62 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801ed86:	2201      	movs	r2, #1
 801ed88:	2108      	movs	r1, #8
 801ed8a:	4802      	ldr	r0, [pc, #8]	; (801ed94 <W25qxx_WaitForWriteEnd+0x4c>)
 801ed8c:	f7e4 faf2 	bl	8003374 <HAL_GPIO_WritePin>
}
 801ed90:	bf00      	nop
 801ed92:	bd80      	pop	{r7, pc}
 801ed94:	40021000 	.word	0x40021000
 801ed98:	200107dc 	.word	0x200107dc

0801ed9c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 801ed9c:	b580      	push	{r7, lr}
 801ed9e:	b082      	sub	sp, #8
 801eda0:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 801eda2:	4b65      	ldr	r3, [pc, #404]	; (801ef38 <W25qxx_Init+0x19c>)
 801eda4:	2201      	movs	r2, #1
 801eda6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 801edaa:	e002      	b.n	801edb2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 801edac:	2001      	movs	r0, #1
 801edae:	f7e2 fde3 	bl	8001978 <HAL_Delay>
	while (HAL_GetTick() < 100)
 801edb2:	f7e2 fdd5 	bl	8001960 <HAL_GetTick>
 801edb6:	4603      	mov	r3, r0
 801edb8:	2b63      	cmp	r3, #99	; 0x63
 801edba:	d9f7      	bls.n	801edac <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801edbc:	2201      	movs	r2, #1
 801edbe:	2108      	movs	r1, #8
 801edc0:	485e      	ldr	r0, [pc, #376]	; (801ef3c <W25qxx_Init+0x1a0>)
 801edc2:	f7e4 fad7 	bl	8003374 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 801edc6:	2064      	movs	r0, #100	; 0x64
 801edc8:	f7e2 fdd6 	bl	8001978 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 801edcc:	f7ff fef4 	bl	801ebb8 <W25qxx_ReadID>
 801edd0:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	b2db      	uxtb	r3, r3
 801edd6:	3b11      	subs	r3, #17
 801edd8:	2b0f      	cmp	r3, #15
 801edda:	d86c      	bhi.n	801eeb6 <W25qxx_Init+0x11a>
 801eddc:	a201      	add	r2, pc, #4	; (adr r2, 801ede4 <W25qxx_Init+0x48>)
 801edde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ede2:	bf00      	nop
 801ede4:	0801eea9 	.word	0x0801eea9
 801ede8:	0801ee9b 	.word	0x0801ee9b
 801edec:	0801ee8d 	.word	0x0801ee8d
 801edf0:	0801ee7f 	.word	0x0801ee7f
 801edf4:	0801ee71 	.word	0x0801ee71
 801edf8:	0801ee63 	.word	0x0801ee63
 801edfc:	0801ee55 	.word	0x0801ee55
 801ee00:	0801ee45 	.word	0x0801ee45
 801ee04:	0801ee35 	.word	0x0801ee35
 801ee08:	0801eeb7 	.word	0x0801eeb7
 801ee0c:	0801eeb7 	.word	0x0801eeb7
 801ee10:	0801eeb7 	.word	0x0801eeb7
 801ee14:	0801eeb7 	.word	0x0801eeb7
 801ee18:	0801eeb7 	.word	0x0801eeb7
 801ee1c:	0801eeb7 	.word	0x0801eeb7
 801ee20:	0801ee25 	.word	0x0801ee25
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 801ee24:	4b44      	ldr	r3, [pc, #272]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee26:	220a      	movs	r2, #10
 801ee28:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 801ee2a:	4b43      	ldr	r3, [pc, #268]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ee30:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 801ee32:	e046      	b.n	801eec2 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 801ee34:	4b40      	ldr	r3, [pc, #256]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee36:	2209      	movs	r2, #9
 801ee38:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 801ee3a:	4b3f      	ldr	r3, [pc, #252]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ee40:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 801ee42:	e03e      	b.n	801eec2 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 801ee44:	4b3c      	ldr	r3, [pc, #240]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee46:	2208      	movs	r2, #8
 801ee48:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 801ee4a:	4b3b      	ldr	r3, [pc, #236]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ee50:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 801ee52:	e036      	b.n	801eec2 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 801ee54:	4b38      	ldr	r3, [pc, #224]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee56:	2207      	movs	r2, #7
 801ee58:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 801ee5a:	4b37      	ldr	r3, [pc, #220]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee5c:	2280      	movs	r2, #128	; 0x80
 801ee5e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 801ee60:	e02f      	b.n	801eec2 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 801ee62:	4b35      	ldr	r3, [pc, #212]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee64:	2206      	movs	r2, #6
 801ee66:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 801ee68:	4b33      	ldr	r3, [pc, #204]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee6a:	2240      	movs	r2, #64	; 0x40
 801ee6c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 801ee6e:	e028      	b.n	801eec2 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 801ee70:	4b31      	ldr	r3, [pc, #196]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee72:	2205      	movs	r2, #5
 801ee74:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 801ee76:	4b30      	ldr	r3, [pc, #192]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee78:	2220      	movs	r2, #32
 801ee7a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 801ee7c:	e021      	b.n	801eec2 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 801ee7e:	4b2e      	ldr	r3, [pc, #184]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee80:	2204      	movs	r2, #4
 801ee82:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 801ee84:	4b2c      	ldr	r3, [pc, #176]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee86:	2210      	movs	r2, #16
 801ee88:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 801ee8a:	e01a      	b.n	801eec2 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 801ee8c:	4b2a      	ldr	r3, [pc, #168]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee8e:	2203      	movs	r2, #3
 801ee90:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 801ee92:	4b29      	ldr	r3, [pc, #164]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee94:	2208      	movs	r2, #8
 801ee96:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 801ee98:	e013      	b.n	801eec2 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 801ee9a:	4b27      	ldr	r3, [pc, #156]	; (801ef38 <W25qxx_Init+0x19c>)
 801ee9c:	2202      	movs	r2, #2
 801ee9e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 801eea0:	4b25      	ldr	r3, [pc, #148]	; (801ef38 <W25qxx_Init+0x19c>)
 801eea2:	2204      	movs	r2, #4
 801eea4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 801eea6:	e00c      	b.n	801eec2 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 801eea8:	4b23      	ldr	r3, [pc, #140]	; (801ef38 <W25qxx_Init+0x19c>)
 801eeaa:	2201      	movs	r2, #1
 801eeac:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 801eeae:	4b22      	ldr	r3, [pc, #136]	; (801ef38 <W25qxx_Init+0x19c>)
 801eeb0:	2202      	movs	r2, #2
 801eeb2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 801eeb4:	e005      	b.n	801eec2 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 801eeb6:	4b20      	ldr	r3, [pc, #128]	; (801ef38 <W25qxx_Init+0x19c>)
 801eeb8:	2200      	movs	r2, #0
 801eeba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 801eebe:	2300      	movs	r3, #0
 801eec0:	e036      	b.n	801ef30 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 801eec2:	4b1d      	ldr	r3, [pc, #116]	; (801ef38 <W25qxx_Init+0x19c>)
 801eec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801eec8:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 801eeca:	4b1b      	ldr	r3, [pc, #108]	; (801ef38 <W25qxx_Init+0x19c>)
 801eecc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801eed0:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 801eed2:	4b19      	ldr	r3, [pc, #100]	; (801ef38 <W25qxx_Init+0x19c>)
 801eed4:	69db      	ldr	r3, [r3, #28]
 801eed6:	011b      	lsls	r3, r3, #4
 801eed8:	4a17      	ldr	r2, [pc, #92]	; (801ef38 <W25qxx_Init+0x19c>)
 801eeda:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 801eedc:	4b16      	ldr	r3, [pc, #88]	; (801ef38 <W25qxx_Init+0x19c>)
 801eede:	695b      	ldr	r3, [r3, #20]
 801eee0:	4a15      	ldr	r2, [pc, #84]	; (801ef38 <W25qxx_Init+0x19c>)
 801eee2:	6912      	ldr	r2, [r2, #16]
 801eee4:	fb02 f303 	mul.w	r3, r2, r3
 801eee8:	4a13      	ldr	r2, [pc, #76]	; (801ef38 <W25qxx_Init+0x19c>)
 801eeea:	8952      	ldrh	r2, [r2, #10]
 801eeec:	fbb3 f3f2 	udiv	r3, r3, r2
 801eef0:	4a11      	ldr	r2, [pc, #68]	; (801ef38 <W25qxx_Init+0x19c>)
 801eef2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 801eef4:	4b10      	ldr	r3, [pc, #64]	; (801ef38 <W25qxx_Init+0x19c>)
 801eef6:	691b      	ldr	r3, [r3, #16]
 801eef8:	011b      	lsls	r3, r3, #4
 801eefa:	4a0f      	ldr	r2, [pc, #60]	; (801ef38 <W25qxx_Init+0x19c>)
 801eefc:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 801eefe:	4b0e      	ldr	r3, [pc, #56]	; (801ef38 <W25qxx_Init+0x19c>)
 801ef00:	695b      	ldr	r3, [r3, #20]
 801ef02:	4a0d      	ldr	r2, [pc, #52]	; (801ef38 <W25qxx_Init+0x19c>)
 801ef04:	6912      	ldr	r2, [r2, #16]
 801ef06:	fb02 f303 	mul.w	r3, r2, r3
 801ef0a:	0a9b      	lsrs	r3, r3, #10
 801ef0c:	4a0a      	ldr	r2, [pc, #40]	; (801ef38 <W25qxx_Init+0x19c>)
 801ef0e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 801ef10:	f7ff fe88 	bl	801ec24 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 801ef14:	2001      	movs	r0, #1
 801ef16:	f7ff fed1 	bl	801ecbc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 801ef1a:	2002      	movs	r0, #2
 801ef1c:	f7ff fece 	bl	801ecbc <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 801ef20:	2003      	movs	r0, #3
 801ef22:	f7ff fecb 	bl	801ecbc <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 801ef26:	4b04      	ldr	r3, [pc, #16]	; (801ef38 <W25qxx_Init+0x19c>)
 801ef28:	2200      	movs	r2, #0
 801ef2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 801ef2e:	2301      	movs	r3, #1
}
 801ef30:	4618      	mov	r0, r3
 801ef32:	3708      	adds	r7, #8
 801ef34:	46bd      	mov	sp, r7
 801ef36:	bd80      	pop	{r7, pc}
 801ef38:	200107dc 	.word	0x200107dc
 801ef3c:	40021000 	.word	0x40021000

0801ef40 <W25qxx_EraseSector>:
#endif
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
uint8_t W25qxx_EraseSector(uint32_t SectorAddr) {
 801ef40:	b580      	push	{r7, lr}
 801ef42:	b082      	sub	sp, #8
 801ef44:	af00      	add	r7, sp, #0
 801ef46:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 801ef48:	e002      	b.n	801ef50 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 801ef4a:	2001      	movs	r0, #1
 801ef4c:	f7e2 fd14 	bl	8001978 <HAL_Delay>
	while (w25qxx.Lock == 1)
 801ef50:	4b26      	ldr	r3, [pc, #152]	; (801efec <W25qxx_EraseSector+0xac>)
 801ef52:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801ef56:	2b01      	cmp	r3, #1
 801ef58:	d0f7      	beq.n	801ef4a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 801ef5a:	4b24      	ldr	r3, [pc, #144]	; (801efec <W25qxx_EraseSector+0xac>)
 801ef5c:	2201      	movs	r2, #1
 801ef5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 801ef62:	f7ff fef1 	bl	801ed48 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 801ef66:	4b21      	ldr	r3, [pc, #132]	; (801efec <W25qxx_EraseSector+0xac>)
 801ef68:	691a      	ldr	r2, [r3, #16]
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	fb02 f303 	mul.w	r3, r2, r3
 801ef70:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 801ef72:	f7ff fe8d 	bl	801ec90 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801ef76:	2200      	movs	r2, #0
 801ef78:	2108      	movs	r1, #8
 801ef7a:	481d      	ldr	r0, [pc, #116]	; (801eff0 <W25qxx_EraseSector+0xb0>)
 801ef7c:	f7e4 f9fa 	bl	8003374 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 801ef80:	4b1a      	ldr	r3, [pc, #104]	; (801efec <W25qxx_EraseSector+0xac>)
 801ef82:	781b      	ldrb	r3, [r3, #0]
 801ef84:	2b08      	cmp	r3, #8
 801ef86:	d909      	bls.n	801ef9c <W25qxx_EraseSector+0x5c>
		W25qxx_Spi(0x21);
 801ef88:	2021      	movs	r0, #33	; 0x21
 801ef8a:	f7ff fdff 	bl	801eb8c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	0e1b      	lsrs	r3, r3, #24
 801ef92:	b2db      	uxtb	r3, r3
 801ef94:	4618      	mov	r0, r3
 801ef96:	f7ff fdf9 	bl	801eb8c <W25qxx_Spi>
 801ef9a:	e002      	b.n	801efa2 <W25qxx_EraseSector+0x62>
	} else {
		W25qxx_Spi(0x20);
 801ef9c:	2020      	movs	r0, #32
 801ef9e:	f7ff fdf5 	bl	801eb8c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	0c1b      	lsrs	r3, r3, #16
 801efa6:	b2db      	uxtb	r3, r3
 801efa8:	4618      	mov	r0, r3
 801efaa:	f7ff fdef 	bl	801eb8c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	0a1b      	lsrs	r3, r3, #8
 801efb2:	b2db      	uxtb	r3, r3
 801efb4:	4618      	mov	r0, r3
 801efb6:	f7ff fde9 	bl	801eb8c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	b2db      	uxtb	r3, r3
 801efbe:	4618      	mov	r0, r3
 801efc0:	f7ff fde4 	bl	801eb8c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801efc4:	2201      	movs	r2, #1
 801efc6:	2108      	movs	r1, #8
 801efc8:	4809      	ldr	r0, [pc, #36]	; (801eff0 <W25qxx_EraseSector+0xb0>)
 801efca:	f7e4 f9d3 	bl	8003374 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 801efce:	f7ff febb 	bl	801ed48 <W25qxx_WaitForWriteEnd>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 801efd2:	2001      	movs	r0, #1
 801efd4:	f7e2 fcd0 	bl	8001978 <HAL_Delay>
	w25qxx.Lock = 0;
 801efd8:	4b04      	ldr	r3, [pc, #16]	; (801efec <W25qxx_EraseSector+0xac>)
 801efda:	2200      	movs	r2, #0
 801efdc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 801efe0:	bf00      	nop
 801efe2:	4618      	mov	r0, r3
 801efe4:	3708      	adds	r7, #8
 801efe6:	46bd      	mov	sp, r7
 801efe8:	bd80      	pop	{r7, pc}
 801efea:	bf00      	nop
 801efec:	200107dc 	.word	0x200107dc
 801eff0:	40021000 	.word	0x40021000

0801eff4 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 801eff4:	b480      	push	{r7}
 801eff6:	b083      	sub	sp, #12
 801eff8:	af00      	add	r7, sp, #0
 801effa:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 801effc:	4b07      	ldr	r3, [pc, #28]	; (801f01c <W25qxx_SectorToPage+0x28>)
 801effe:	691b      	ldr	r3, [r3, #16]
 801f000:	687a      	ldr	r2, [r7, #4]
 801f002:	fb02 f303 	mul.w	r3, r2, r3
 801f006:	4a05      	ldr	r2, [pc, #20]	; (801f01c <W25qxx_SectorToPage+0x28>)
 801f008:	8952      	ldrh	r2, [r2, #10]
 801f00a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 801f00e:	4618      	mov	r0, r3
 801f010:	370c      	adds	r7, #12
 801f012:	46bd      	mov	sp, r7
 801f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f018:	4770      	bx	lr
 801f01a:	bf00      	nop
 801f01c:	200107dc 	.word	0x200107dc

0801f020 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b084      	sub	sp, #16
 801f024:	af00      	add	r7, sp, #0
 801f026:	60f8      	str	r0, [r7, #12]
 801f028:	60b9      	str	r1, [r7, #8]
 801f02a:	607a      	str	r2, [r7, #4]
 801f02c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 801f02e:	e002      	b.n	801f036 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 801f030:	2001      	movs	r0, #1
 801f032:	f7e2 fca1 	bl	8001978 <HAL_Delay>
	while (w25qxx.Lock == 1)
 801f036:	4b39      	ldr	r3, [pc, #228]	; (801f11c <W25qxx_WritePage+0xfc>)
 801f038:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f03c:	2b01      	cmp	r3, #1
 801f03e:	d0f7      	beq.n	801f030 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 801f040:	4b36      	ldr	r3, [pc, #216]	; (801f11c <W25qxx_WritePage+0xfc>)
 801f042:	2201      	movs	r2, #1
 801f044:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 801f048:	683a      	ldr	r2, [r7, #0]
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	4413      	add	r3, r2
 801f04e:	4a33      	ldr	r2, [pc, #204]	; (801f11c <W25qxx_WritePage+0xfc>)
 801f050:	8952      	ldrh	r2, [r2, #10]
 801f052:	4293      	cmp	r3, r2
 801f054:	d802      	bhi.n	801f05c <W25qxx_WritePage+0x3c>
 801f056:	683b      	ldr	r3, [r7, #0]
 801f058:	2b00      	cmp	r3, #0
 801f05a:	d105      	bne.n	801f068 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801f05c:	4b2f      	ldr	r3, [pc, #188]	; (801f11c <W25qxx_WritePage+0xfc>)
 801f05e:	895b      	ldrh	r3, [r3, #10]
 801f060:	461a      	mov	r2, r3
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	1ad3      	subs	r3, r2, r3
 801f066:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 801f068:	687a      	ldr	r2, [r7, #4]
 801f06a:	683b      	ldr	r3, [r7, #0]
 801f06c:	4413      	add	r3, r2
 801f06e:	4a2b      	ldr	r2, [pc, #172]	; (801f11c <W25qxx_WritePage+0xfc>)
 801f070:	8952      	ldrh	r2, [r2, #10]
 801f072:	4293      	cmp	r3, r2
 801f074:	d905      	bls.n	801f082 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801f076:	4b29      	ldr	r3, [pc, #164]	; (801f11c <W25qxx_WritePage+0xfc>)
 801f078:	895b      	ldrh	r3, [r3, #10]
 801f07a:	461a      	mov	r2, r3
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	1ad3      	subs	r3, r2, r3
 801f080:	603b      	str	r3, [r7, #0]

	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();
#endif

	W25qxx_WaitForWriteEnd();
 801f082:	f7ff fe61 	bl	801ed48 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 801f086:	f7ff fe03 	bl	801ec90 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801f08a:	2200      	movs	r2, #0
 801f08c:	2108      	movs	r1, #8
 801f08e:	4824      	ldr	r0, [pc, #144]	; (801f120 <W25qxx_WritePage+0x100>)
 801f090:	f7e4 f970 	bl	8003374 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 801f094:	4b21      	ldr	r3, [pc, #132]	; (801f11c <W25qxx_WritePage+0xfc>)
 801f096:	895b      	ldrh	r3, [r3, #10]
 801f098:	461a      	mov	r2, r3
 801f09a:	68bb      	ldr	r3, [r7, #8]
 801f09c:	fb02 f303 	mul.w	r3, r2, r3
 801f0a0:	687a      	ldr	r2, [r7, #4]
 801f0a2:	4413      	add	r3, r2
 801f0a4:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 801f0a6:	4b1d      	ldr	r3, [pc, #116]	; (801f11c <W25qxx_WritePage+0xfc>)
 801f0a8:	781b      	ldrb	r3, [r3, #0]
 801f0aa:	2b08      	cmp	r3, #8
 801f0ac:	d909      	bls.n	801f0c2 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 801f0ae:	2012      	movs	r0, #18
 801f0b0:	f7ff fd6c 	bl	801eb8c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 801f0b4:	68bb      	ldr	r3, [r7, #8]
 801f0b6:	0e1b      	lsrs	r3, r3, #24
 801f0b8:	b2db      	uxtb	r3, r3
 801f0ba:	4618      	mov	r0, r3
 801f0bc:	f7ff fd66 	bl	801eb8c <W25qxx_Spi>
 801f0c0:	e002      	b.n	801f0c8 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 801f0c2:	2002      	movs	r0, #2
 801f0c4:	f7ff fd62 	bl	801eb8c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 801f0c8:	68bb      	ldr	r3, [r7, #8]
 801f0ca:	0c1b      	lsrs	r3, r3, #16
 801f0cc:	b2db      	uxtb	r3, r3
 801f0ce:	4618      	mov	r0, r3
 801f0d0:	f7ff fd5c 	bl	801eb8c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 801f0d4:	68bb      	ldr	r3, [r7, #8]
 801f0d6:	0a1b      	lsrs	r3, r3, #8
 801f0d8:	b2db      	uxtb	r3, r3
 801f0da:	4618      	mov	r0, r3
 801f0dc:	f7ff fd56 	bl	801eb8c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 801f0e0:	68bb      	ldr	r3, [r7, #8]
 801f0e2:	b2db      	uxtb	r3, r3
 801f0e4:	4618      	mov	r0, r3
 801f0e6:	f7ff fd51 	bl	801eb8c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 801f0ea:	683b      	ldr	r3, [r7, #0]
 801f0ec:	b29a      	uxth	r2, r3
 801f0ee:	2364      	movs	r3, #100	; 0x64
 801f0f0:	68f9      	ldr	r1, [r7, #12]
 801f0f2:	480c      	ldr	r0, [pc, #48]	; (801f124 <W25qxx_WritePage+0x104>)
 801f0f4:	f7e4 ffaf 	bl	8004056 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801f0f8:	2201      	movs	r2, #1
 801f0fa:	2108      	movs	r1, #8
 801f0fc:	4808      	ldr	r0, [pc, #32]	; (801f120 <W25qxx_WritePage+0x100>)
 801f0fe:	f7e4 f939 	bl	8003374 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 801f102:	f7ff fe21 	bl	801ed48 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 801f106:	2001      	movs	r0, #1
 801f108:	f7e2 fc36 	bl	8001978 <HAL_Delay>
	w25qxx.Lock = 0;
 801f10c:	4b03      	ldr	r3, [pc, #12]	; (801f11c <W25qxx_WritePage+0xfc>)
 801f10e:	2200      	movs	r2, #0
 801f110:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 801f114:	bf00      	nop
 801f116:	3710      	adds	r7, #16
 801f118:	46bd      	mov	sp, r7
 801f11a:	bd80      	pop	{r7, pc}
 801f11c:	200107dc 	.word	0x200107dc
 801f120:	40021000 	.word	0x40021000
 801f124:	20000564 	.word	0x20000564

0801f128 <W25qxx_WriteSector>:
//###################################################################################################################
uint8_t W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 801f128:	b580      	push	{r7, lr}
 801f12a:	b088      	sub	sp, #32
 801f12c:	af00      	add	r7, sp, #0
 801f12e:	60f8      	str	r0, [r7, #12]
 801f130:	60b9      	str	r1, [r7, #8]
 801f132:	607a      	str	r2, [r7, #4]
 801f134:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 801f136:	4b2d      	ldr	r3, [pc, #180]	; (801f1ec <W25qxx_WriteSector+0xc4>)
 801f138:	691b      	ldr	r3, [r3, #16]
 801f13a:	683a      	ldr	r2, [r7, #0]
 801f13c:	429a      	cmp	r2, r3
 801f13e:	d802      	bhi.n	801f146 <W25qxx_WriteSector+0x1e>
 801f140:	683b      	ldr	r3, [r7, #0]
 801f142:	2b00      	cmp	r3, #0
 801f144:	d102      	bne.n	801f14c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 801f146:	4b29      	ldr	r3, [pc, #164]	; (801f1ec <W25qxx_WriteSector+0xc4>)
 801f148:	691b      	ldr	r3, [r3, #16]
 801f14a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 801f14c:	4b27      	ldr	r3, [pc, #156]	; (801f1ec <W25qxx_WriteSector+0xc4>)
 801f14e:	691b      	ldr	r3, [r3, #16]
 801f150:	687a      	ldr	r2, [r7, #4]
 801f152:	429a      	cmp	r2, r3
 801f154:	d301      	bcc.n	801f15a <W25qxx_WriteSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 801f156:	2300      	movs	r3, #0
 801f158:	e043      	b.n	801f1e2 <W25qxx_WriteSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 801f15a:	687a      	ldr	r2, [r7, #4]
 801f15c:	683b      	ldr	r3, [r7, #0]
 801f15e:	441a      	add	r2, r3
 801f160:	4b22      	ldr	r3, [pc, #136]	; (801f1ec <W25qxx_WriteSector+0xc4>)
 801f162:	691b      	ldr	r3, [r3, #16]
 801f164:	429a      	cmp	r2, r3
 801f166:	d905      	bls.n	801f174 <W25qxx_WriteSector+0x4c>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 801f168:	4b20      	ldr	r3, [pc, #128]	; (801f1ec <W25qxx_WriteSector+0xc4>)
 801f16a:	691a      	ldr	r2, [r3, #16]
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	1ad3      	subs	r3, r2, r3
 801f170:	61bb      	str	r3, [r7, #24]
 801f172:	e001      	b.n	801f178 <W25qxx_WriteSector+0x50>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 801f174:	683b      	ldr	r3, [r7, #0]
 801f176:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 801f178:	68b8      	ldr	r0, [r7, #8]
 801f17a:	f7ff ff3b 	bl	801eff4 <W25qxx_SectorToPage>
 801f17e:	4602      	mov	r2, r0
 801f180:	4b1a      	ldr	r3, [pc, #104]	; (801f1ec <W25qxx_WriteSector+0xc4>)
 801f182:	895b      	ldrh	r3, [r3, #10]
 801f184:	4619      	mov	r1, r3
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	fbb3 f3f1 	udiv	r3, r3, r1
 801f18c:	4413      	add	r3, r2
 801f18e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 801f190:	4b16      	ldr	r3, [pc, #88]	; (801f1ec <W25qxx_WriteSector+0xc4>)
 801f192:	895b      	ldrh	r3, [r3, #10]
 801f194:	461a      	mov	r2, r3
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	fbb3 f1f2 	udiv	r1, r3, r2
 801f19c:	fb01 f202 	mul.w	r2, r1, r2
 801f1a0:	1a9b      	subs	r3, r3, r2
 801f1a2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 801f1a4:	69bb      	ldr	r3, [r7, #24]
 801f1a6:	697a      	ldr	r2, [r7, #20]
 801f1a8:	69f9      	ldr	r1, [r7, #28]
 801f1aa:	68f8      	ldr	r0, [r7, #12]
 801f1ac:	f7ff ff38 	bl	801f020 <W25qxx_WritePage>
		StartPage++;
 801f1b0:	69fb      	ldr	r3, [r7, #28]
 801f1b2:	3301      	adds	r3, #1
 801f1b4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 801f1b6:	4b0d      	ldr	r3, [pc, #52]	; (801f1ec <W25qxx_WriteSector+0xc4>)
 801f1b8:	895b      	ldrh	r3, [r3, #10]
 801f1ba:	461a      	mov	r2, r3
 801f1bc:	697b      	ldr	r3, [r7, #20]
 801f1be:	1a9a      	subs	r2, r3, r2
 801f1c0:	69bb      	ldr	r3, [r7, #24]
 801f1c2:	4413      	add	r3, r2
 801f1c4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 801f1c6:	4b09      	ldr	r3, [pc, #36]	; (801f1ec <W25qxx_WriteSector+0xc4>)
 801f1c8:	895b      	ldrh	r3, [r3, #10]
 801f1ca:	461a      	mov	r2, r3
 801f1cc:	697b      	ldr	r3, [r7, #20]
 801f1ce:	1ad3      	subs	r3, r2, r3
 801f1d0:	68fa      	ldr	r2, [r7, #12]
 801f1d2:	4413      	add	r3, r2
 801f1d4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 801f1d6:	2300      	movs	r3, #0
 801f1d8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 801f1da:	69bb      	ldr	r3, [r7, #24]
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	dce1      	bgt.n	801f1a4 <W25qxx_WriteSector+0x7c>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif

	return 1;
 801f1e0:	2301      	movs	r3, #1

}
 801f1e2:	4618      	mov	r0, r3
 801f1e4:	3720      	adds	r7, #32
 801f1e6:	46bd      	mov	sp, r7
 801f1e8:	bd80      	pop	{r7, pc}
 801f1ea:	bf00      	nop
 801f1ec:	200107dc 	.word	0x200107dc

0801f1f0 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 801f1f0:	b580      	push	{r7, lr}
 801f1f2:	b084      	sub	sp, #16
 801f1f4:	af00      	add	r7, sp, #0
 801f1f6:	60f8      	str	r0, [r7, #12]
 801f1f8:	60b9      	str	r1, [r7, #8]
 801f1fa:	607a      	str	r2, [r7, #4]
 801f1fc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 801f1fe:	e002      	b.n	801f206 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 801f200:	2001      	movs	r0, #1
 801f202:	f7e2 fbb9 	bl	8001978 <HAL_Delay>
	while (w25qxx.Lock == 1)
 801f206:	4b36      	ldr	r3, [pc, #216]	; (801f2e0 <W25qxx_ReadPage+0xf0>)
 801f208:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801f20c:	2b01      	cmp	r3, #1
 801f20e:	d0f7      	beq.n	801f200 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 801f210:	4b33      	ldr	r3, [pc, #204]	; (801f2e0 <W25qxx_ReadPage+0xf0>)
 801f212:	2201      	movs	r2, #1
 801f214:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 801f218:	4b31      	ldr	r3, [pc, #196]	; (801f2e0 <W25qxx_ReadPage+0xf0>)
 801f21a:	895b      	ldrh	r3, [r3, #10]
 801f21c:	461a      	mov	r2, r3
 801f21e:	683b      	ldr	r3, [r7, #0]
 801f220:	4293      	cmp	r3, r2
 801f222:	d802      	bhi.n	801f22a <W25qxx_ReadPage+0x3a>
 801f224:	683b      	ldr	r3, [r7, #0]
 801f226:	2b00      	cmp	r3, #0
 801f228:	d102      	bne.n	801f230 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 801f22a:	4b2d      	ldr	r3, [pc, #180]	; (801f2e0 <W25qxx_ReadPage+0xf0>)
 801f22c:	895b      	ldrh	r3, [r3, #10]
 801f22e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 801f230:	687a      	ldr	r2, [r7, #4]
 801f232:	683b      	ldr	r3, [r7, #0]
 801f234:	4413      	add	r3, r2
 801f236:	4a2a      	ldr	r2, [pc, #168]	; (801f2e0 <W25qxx_ReadPage+0xf0>)
 801f238:	8952      	ldrh	r2, [r2, #10]
 801f23a:	4293      	cmp	r3, r2
 801f23c:	d905      	bls.n	801f24a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801f23e:	4b28      	ldr	r3, [pc, #160]	; (801f2e0 <W25qxx_ReadPage+0xf0>)
 801f240:	895b      	ldrh	r3, [r3, #10]
 801f242:	461a      	mov	r2, r3
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	1ad3      	subs	r3, r2, r3
 801f248:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG_1 == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();

#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 801f24a:	4b25      	ldr	r3, [pc, #148]	; (801f2e0 <W25qxx_ReadPage+0xf0>)
 801f24c:	895b      	ldrh	r3, [r3, #10]
 801f24e:	461a      	mov	r2, r3
 801f250:	68bb      	ldr	r3, [r7, #8]
 801f252:	fb02 f303 	mul.w	r3, r2, r3
 801f256:	687a      	ldr	r2, [r7, #4]
 801f258:	4413      	add	r3, r2
 801f25a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801f25c:	2200      	movs	r2, #0
 801f25e:	2108      	movs	r1, #8
 801f260:	4820      	ldr	r0, [pc, #128]	; (801f2e4 <W25qxx_ReadPage+0xf4>)
 801f262:	f7e4 f887 	bl	8003374 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 801f266:	4b1e      	ldr	r3, [pc, #120]	; (801f2e0 <W25qxx_ReadPage+0xf0>)
 801f268:	781b      	ldrb	r3, [r3, #0]
 801f26a:	2b08      	cmp	r3, #8
 801f26c:	d909      	bls.n	801f282 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 801f26e:	200c      	movs	r0, #12
 801f270:	f7ff fc8c 	bl	801eb8c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 801f274:	68bb      	ldr	r3, [r7, #8]
 801f276:	0e1b      	lsrs	r3, r3, #24
 801f278:	b2db      	uxtb	r3, r3
 801f27a:	4618      	mov	r0, r3
 801f27c:	f7ff fc86 	bl	801eb8c <W25qxx_Spi>
 801f280:	e002      	b.n	801f288 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 801f282:	200b      	movs	r0, #11
 801f284:	f7ff fc82 	bl	801eb8c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 801f288:	68bb      	ldr	r3, [r7, #8]
 801f28a:	0c1b      	lsrs	r3, r3, #16
 801f28c:	b2db      	uxtb	r3, r3
 801f28e:	4618      	mov	r0, r3
 801f290:	f7ff fc7c 	bl	801eb8c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 801f294:	68bb      	ldr	r3, [r7, #8]
 801f296:	0a1b      	lsrs	r3, r3, #8
 801f298:	b2db      	uxtb	r3, r3
 801f29a:	4618      	mov	r0, r3
 801f29c:	f7ff fc76 	bl	801eb8c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 801f2a0:	68bb      	ldr	r3, [r7, #8]
 801f2a2:	b2db      	uxtb	r3, r3
 801f2a4:	4618      	mov	r0, r3
 801f2a6:	f7ff fc71 	bl	801eb8c <W25qxx_Spi>
	W25qxx_Spi(0);
 801f2aa:	2000      	movs	r0, #0
 801f2ac:	f7ff fc6e 	bl	801eb8c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 801f2b0:	683b      	ldr	r3, [r7, #0]
 801f2b2:	b29a      	uxth	r2, r3
 801f2b4:	2364      	movs	r3, #100	; 0x64
 801f2b6:	68f9      	ldr	r1, [r7, #12]
 801f2b8:	480b      	ldr	r0, [pc, #44]	; (801f2e8 <W25qxx_ReadPage+0xf8>)
 801f2ba:	f7e5 f80f 	bl	80042dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801f2be:	2201      	movs	r2, #1
 801f2c0:	2108      	movs	r1, #8
 801f2c2:	4808      	ldr	r0, [pc, #32]	; (801f2e4 <W25qxx_ReadPage+0xf4>)
 801f2c4:	f7e4 f856 	bl	8003374 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 801f2c8:	2001      	movs	r0, #1
 801f2ca:	f7e2 fb55 	bl	8001978 <HAL_Delay>
	w25qxx.Lock = 0;
 801f2ce:	4b04      	ldr	r3, [pc, #16]	; (801f2e0 <W25qxx_ReadPage+0xf0>)
 801f2d0:	2200      	movs	r2, #0
 801f2d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 801f2d6:	bf00      	nop
 801f2d8:	3710      	adds	r7, #16
 801f2da:	46bd      	mov	sp, r7
 801f2dc:	bd80      	pop	{r7, pc}
 801f2de:	bf00      	nop
 801f2e0:	200107dc 	.word	0x200107dc
 801f2e4:	40021000 	.word	0x40021000
 801f2e8:	20000564 	.word	0x20000564

0801f2ec <W25qxx_ReadSector>:
//###################################################################################################################
uint8_t W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 801f2ec:	b580      	push	{r7, lr}
 801f2ee:	b088      	sub	sp, #32
 801f2f0:	af00      	add	r7, sp, #0
 801f2f2:	60f8      	str	r0, [r7, #12]
 801f2f4:	60b9      	str	r1, [r7, #8]
 801f2f6:	607a      	str	r2, [r7, #4]
 801f2f8:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 801f2fa:	4b2d      	ldr	r3, [pc, #180]	; (801f3b0 <W25qxx_ReadSector+0xc4>)
 801f2fc:	691b      	ldr	r3, [r3, #16]
 801f2fe:	683a      	ldr	r2, [r7, #0]
 801f300:	429a      	cmp	r2, r3
 801f302:	d802      	bhi.n	801f30a <W25qxx_ReadSector+0x1e>
 801f304:	683b      	ldr	r3, [r7, #0]
 801f306:	2b00      	cmp	r3, #0
 801f308:	d102      	bne.n	801f310 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 801f30a:	4b29      	ldr	r3, [pc, #164]	; (801f3b0 <W25qxx_ReadSector+0xc4>)
 801f30c:	691b      	ldr	r3, [r3, #16]
 801f30e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 801f310:	4b27      	ldr	r3, [pc, #156]	; (801f3b0 <W25qxx_ReadSector+0xc4>)
 801f312:	691b      	ldr	r3, [r3, #16]
 801f314:	687a      	ldr	r2, [r7, #4]
 801f316:	429a      	cmp	r2, r3
 801f318:	d301      	bcc.n	801f31e <W25qxx_ReadSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 801f31a:	2300      	movs	r3, #0
 801f31c:	e043      	b.n	801f3a6 <W25qxx_ReadSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 801f31e:	687a      	ldr	r2, [r7, #4]
 801f320:	683b      	ldr	r3, [r7, #0]
 801f322:	441a      	add	r2, r3
 801f324:	4b22      	ldr	r3, [pc, #136]	; (801f3b0 <W25qxx_ReadSector+0xc4>)
 801f326:	691b      	ldr	r3, [r3, #16]
 801f328:	429a      	cmp	r2, r3
 801f32a:	d905      	bls.n	801f338 <W25qxx_ReadSector+0x4c>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 801f32c:	4b20      	ldr	r3, [pc, #128]	; (801f3b0 <W25qxx_ReadSector+0xc4>)
 801f32e:	691a      	ldr	r2, [r3, #16]
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	1ad3      	subs	r3, r2, r3
 801f334:	61bb      	str	r3, [r7, #24]
 801f336:	e001      	b.n	801f33c <W25qxx_ReadSector+0x50>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 801f338:	683b      	ldr	r3, [r7, #0]
 801f33a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 801f33c:	68b8      	ldr	r0, [r7, #8]
 801f33e:	f7ff fe59 	bl	801eff4 <W25qxx_SectorToPage>
 801f342:	4602      	mov	r2, r0
 801f344:	4b1a      	ldr	r3, [pc, #104]	; (801f3b0 <W25qxx_ReadSector+0xc4>)
 801f346:	895b      	ldrh	r3, [r3, #10]
 801f348:	4619      	mov	r1, r3
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	fbb3 f3f1 	udiv	r3, r3, r1
 801f350:	4413      	add	r3, r2
 801f352:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 801f354:	4b16      	ldr	r3, [pc, #88]	; (801f3b0 <W25qxx_ReadSector+0xc4>)
 801f356:	895b      	ldrh	r3, [r3, #10]
 801f358:	461a      	mov	r2, r3
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	fbb3 f1f2 	udiv	r1, r3, r2
 801f360:	fb01 f202 	mul.w	r2, r1, r2
 801f364:	1a9b      	subs	r3, r3, r2
 801f366:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 801f368:	69bb      	ldr	r3, [r7, #24]
 801f36a:	697a      	ldr	r2, [r7, #20]
 801f36c:	69f9      	ldr	r1, [r7, #28]
 801f36e:	68f8      	ldr	r0, [r7, #12]
 801f370:	f7ff ff3e 	bl	801f1f0 <W25qxx_ReadPage>
		StartPage++;
 801f374:	69fb      	ldr	r3, [r7, #28]
 801f376:	3301      	adds	r3, #1
 801f378:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 801f37a:	4b0d      	ldr	r3, [pc, #52]	; (801f3b0 <W25qxx_ReadSector+0xc4>)
 801f37c:	895b      	ldrh	r3, [r3, #10]
 801f37e:	461a      	mov	r2, r3
 801f380:	697b      	ldr	r3, [r7, #20]
 801f382:	1a9a      	subs	r2, r3, r2
 801f384:	69bb      	ldr	r3, [r7, #24]
 801f386:	4413      	add	r3, r2
 801f388:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 801f38a:	4b09      	ldr	r3, [pc, #36]	; (801f3b0 <W25qxx_ReadSector+0xc4>)
 801f38c:	895b      	ldrh	r3, [r3, #10]
 801f38e:	461a      	mov	r2, r3
 801f390:	697b      	ldr	r3, [r7, #20]
 801f392:	1ad3      	subs	r3, r2, r3
 801f394:	68fa      	ldr	r2, [r7, #12]
 801f396:	4413      	add	r3, r2
 801f398:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 801f39a:	2300      	movs	r3, #0
 801f39c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 801f39e:	69bb      	ldr	r3, [r7, #24]
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	dce1      	bgt.n	801f368 <W25qxx_ReadSector+0x7c>
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif


	return 1;
 801f3a4:	2301      	movs	r3, #1
}
 801f3a6:	4618      	mov	r0, r3
 801f3a8:	3720      	adds	r7, #32
 801f3aa:	46bd      	mov	sp, r7
 801f3ac:	bd80      	pop	{r7, pc}
 801f3ae:	bf00      	nop
 801f3b0:	200107dc 	.word	0x200107dc

0801f3b4 <__assert_func>:
 801f3b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f3b6:	4614      	mov	r4, r2
 801f3b8:	461a      	mov	r2, r3
 801f3ba:	4b09      	ldr	r3, [pc, #36]	; (801f3e0 <__assert_func+0x2c>)
 801f3bc:	681b      	ldr	r3, [r3, #0]
 801f3be:	4605      	mov	r5, r0
 801f3c0:	68d8      	ldr	r0, [r3, #12]
 801f3c2:	b14c      	cbz	r4, 801f3d8 <__assert_func+0x24>
 801f3c4:	4b07      	ldr	r3, [pc, #28]	; (801f3e4 <__assert_func+0x30>)
 801f3c6:	9100      	str	r1, [sp, #0]
 801f3c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f3cc:	4906      	ldr	r1, [pc, #24]	; (801f3e8 <__assert_func+0x34>)
 801f3ce:	462b      	mov	r3, r5
 801f3d0:	f000 fa3c 	bl	801f84c <fiprintf>
 801f3d4:	f000 fcdd 	bl	801fd92 <abort>
 801f3d8:	4b04      	ldr	r3, [pc, #16]	; (801f3ec <__assert_func+0x38>)
 801f3da:	461c      	mov	r4, r3
 801f3dc:	e7f3      	b.n	801f3c6 <__assert_func+0x12>
 801f3de:	bf00      	nop
 801f3e0:	2000008c 	.word	0x2000008c
 801f3e4:	08025208 	.word	0x08025208
 801f3e8:	08025215 	.word	0x08025215
 801f3ec:	08025243 	.word	0x08025243

0801f3f0 <atoi>:
 801f3f0:	220a      	movs	r2, #10
 801f3f2:	2100      	movs	r1, #0
 801f3f4:	f000 b97c 	b.w	801f6f0 <strtol>

0801f3f8 <malloc>:
 801f3f8:	4b02      	ldr	r3, [pc, #8]	; (801f404 <malloc+0xc>)
 801f3fa:	4601      	mov	r1, r0
 801f3fc:	6818      	ldr	r0, [r3, #0]
 801f3fe:	f000 b82b 	b.w	801f458 <_malloc_r>
 801f402:	bf00      	nop
 801f404:	2000008c 	.word	0x2000008c

0801f408 <free>:
 801f408:	4b02      	ldr	r3, [pc, #8]	; (801f414 <free+0xc>)
 801f40a:	4601      	mov	r1, r0
 801f40c:	6818      	ldr	r0, [r3, #0]
 801f40e:	f000 bcc7 	b.w	801fda0 <_free_r>
 801f412:	bf00      	nop
 801f414:	2000008c 	.word	0x2000008c

0801f418 <sbrk_aligned>:
 801f418:	b570      	push	{r4, r5, r6, lr}
 801f41a:	4e0e      	ldr	r6, [pc, #56]	; (801f454 <sbrk_aligned+0x3c>)
 801f41c:	460c      	mov	r4, r1
 801f41e:	6831      	ldr	r1, [r6, #0]
 801f420:	4605      	mov	r5, r0
 801f422:	b911      	cbnz	r1, 801f42a <sbrk_aligned+0x12>
 801f424:	f000 fc58 	bl	801fcd8 <_sbrk_r>
 801f428:	6030      	str	r0, [r6, #0]
 801f42a:	4621      	mov	r1, r4
 801f42c:	4628      	mov	r0, r5
 801f42e:	f000 fc53 	bl	801fcd8 <_sbrk_r>
 801f432:	1c43      	adds	r3, r0, #1
 801f434:	d00a      	beq.n	801f44c <sbrk_aligned+0x34>
 801f436:	1cc4      	adds	r4, r0, #3
 801f438:	f024 0403 	bic.w	r4, r4, #3
 801f43c:	42a0      	cmp	r0, r4
 801f43e:	d007      	beq.n	801f450 <sbrk_aligned+0x38>
 801f440:	1a21      	subs	r1, r4, r0
 801f442:	4628      	mov	r0, r5
 801f444:	f000 fc48 	bl	801fcd8 <_sbrk_r>
 801f448:	3001      	adds	r0, #1
 801f44a:	d101      	bne.n	801f450 <sbrk_aligned+0x38>
 801f44c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f450:	4620      	mov	r0, r4
 801f452:	bd70      	pop	{r4, r5, r6, pc}
 801f454:	20010808 	.word	0x20010808

0801f458 <_malloc_r>:
 801f458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f45c:	1ccd      	adds	r5, r1, #3
 801f45e:	f025 0503 	bic.w	r5, r5, #3
 801f462:	3508      	adds	r5, #8
 801f464:	2d0c      	cmp	r5, #12
 801f466:	bf38      	it	cc
 801f468:	250c      	movcc	r5, #12
 801f46a:	2d00      	cmp	r5, #0
 801f46c:	4607      	mov	r7, r0
 801f46e:	db01      	blt.n	801f474 <_malloc_r+0x1c>
 801f470:	42a9      	cmp	r1, r5
 801f472:	d905      	bls.n	801f480 <_malloc_r+0x28>
 801f474:	230c      	movs	r3, #12
 801f476:	603b      	str	r3, [r7, #0]
 801f478:	2600      	movs	r6, #0
 801f47a:	4630      	mov	r0, r6
 801f47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f480:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f554 <_malloc_r+0xfc>
 801f484:	f000 f868 	bl	801f558 <__malloc_lock>
 801f488:	f8d8 3000 	ldr.w	r3, [r8]
 801f48c:	461c      	mov	r4, r3
 801f48e:	bb5c      	cbnz	r4, 801f4e8 <_malloc_r+0x90>
 801f490:	4629      	mov	r1, r5
 801f492:	4638      	mov	r0, r7
 801f494:	f7ff ffc0 	bl	801f418 <sbrk_aligned>
 801f498:	1c43      	adds	r3, r0, #1
 801f49a:	4604      	mov	r4, r0
 801f49c:	d155      	bne.n	801f54a <_malloc_r+0xf2>
 801f49e:	f8d8 4000 	ldr.w	r4, [r8]
 801f4a2:	4626      	mov	r6, r4
 801f4a4:	2e00      	cmp	r6, #0
 801f4a6:	d145      	bne.n	801f534 <_malloc_r+0xdc>
 801f4a8:	2c00      	cmp	r4, #0
 801f4aa:	d048      	beq.n	801f53e <_malloc_r+0xe6>
 801f4ac:	6823      	ldr	r3, [r4, #0]
 801f4ae:	4631      	mov	r1, r6
 801f4b0:	4638      	mov	r0, r7
 801f4b2:	eb04 0903 	add.w	r9, r4, r3
 801f4b6:	f000 fc0f 	bl	801fcd8 <_sbrk_r>
 801f4ba:	4581      	cmp	r9, r0
 801f4bc:	d13f      	bne.n	801f53e <_malloc_r+0xe6>
 801f4be:	6821      	ldr	r1, [r4, #0]
 801f4c0:	1a6d      	subs	r5, r5, r1
 801f4c2:	4629      	mov	r1, r5
 801f4c4:	4638      	mov	r0, r7
 801f4c6:	f7ff ffa7 	bl	801f418 <sbrk_aligned>
 801f4ca:	3001      	adds	r0, #1
 801f4cc:	d037      	beq.n	801f53e <_malloc_r+0xe6>
 801f4ce:	6823      	ldr	r3, [r4, #0]
 801f4d0:	442b      	add	r3, r5
 801f4d2:	6023      	str	r3, [r4, #0]
 801f4d4:	f8d8 3000 	ldr.w	r3, [r8]
 801f4d8:	2b00      	cmp	r3, #0
 801f4da:	d038      	beq.n	801f54e <_malloc_r+0xf6>
 801f4dc:	685a      	ldr	r2, [r3, #4]
 801f4de:	42a2      	cmp	r2, r4
 801f4e0:	d12b      	bne.n	801f53a <_malloc_r+0xe2>
 801f4e2:	2200      	movs	r2, #0
 801f4e4:	605a      	str	r2, [r3, #4]
 801f4e6:	e00f      	b.n	801f508 <_malloc_r+0xb0>
 801f4e8:	6822      	ldr	r2, [r4, #0]
 801f4ea:	1b52      	subs	r2, r2, r5
 801f4ec:	d41f      	bmi.n	801f52e <_malloc_r+0xd6>
 801f4ee:	2a0b      	cmp	r2, #11
 801f4f0:	d917      	bls.n	801f522 <_malloc_r+0xca>
 801f4f2:	1961      	adds	r1, r4, r5
 801f4f4:	42a3      	cmp	r3, r4
 801f4f6:	6025      	str	r5, [r4, #0]
 801f4f8:	bf18      	it	ne
 801f4fa:	6059      	strne	r1, [r3, #4]
 801f4fc:	6863      	ldr	r3, [r4, #4]
 801f4fe:	bf08      	it	eq
 801f500:	f8c8 1000 	streq.w	r1, [r8]
 801f504:	5162      	str	r2, [r4, r5]
 801f506:	604b      	str	r3, [r1, #4]
 801f508:	4638      	mov	r0, r7
 801f50a:	f104 060b 	add.w	r6, r4, #11
 801f50e:	f000 f829 	bl	801f564 <__malloc_unlock>
 801f512:	f026 0607 	bic.w	r6, r6, #7
 801f516:	1d23      	adds	r3, r4, #4
 801f518:	1af2      	subs	r2, r6, r3
 801f51a:	d0ae      	beq.n	801f47a <_malloc_r+0x22>
 801f51c:	1b9b      	subs	r3, r3, r6
 801f51e:	50a3      	str	r3, [r4, r2]
 801f520:	e7ab      	b.n	801f47a <_malloc_r+0x22>
 801f522:	42a3      	cmp	r3, r4
 801f524:	6862      	ldr	r2, [r4, #4]
 801f526:	d1dd      	bne.n	801f4e4 <_malloc_r+0x8c>
 801f528:	f8c8 2000 	str.w	r2, [r8]
 801f52c:	e7ec      	b.n	801f508 <_malloc_r+0xb0>
 801f52e:	4623      	mov	r3, r4
 801f530:	6864      	ldr	r4, [r4, #4]
 801f532:	e7ac      	b.n	801f48e <_malloc_r+0x36>
 801f534:	4634      	mov	r4, r6
 801f536:	6876      	ldr	r6, [r6, #4]
 801f538:	e7b4      	b.n	801f4a4 <_malloc_r+0x4c>
 801f53a:	4613      	mov	r3, r2
 801f53c:	e7cc      	b.n	801f4d8 <_malloc_r+0x80>
 801f53e:	230c      	movs	r3, #12
 801f540:	603b      	str	r3, [r7, #0]
 801f542:	4638      	mov	r0, r7
 801f544:	f000 f80e 	bl	801f564 <__malloc_unlock>
 801f548:	e797      	b.n	801f47a <_malloc_r+0x22>
 801f54a:	6025      	str	r5, [r4, #0]
 801f54c:	e7dc      	b.n	801f508 <_malloc_r+0xb0>
 801f54e:	605b      	str	r3, [r3, #4]
 801f550:	deff      	udf	#255	; 0xff
 801f552:	bf00      	nop
 801f554:	20010804 	.word	0x20010804

0801f558 <__malloc_lock>:
 801f558:	4801      	ldr	r0, [pc, #4]	; (801f560 <__malloc_lock+0x8>)
 801f55a:	f000 bc0a 	b.w	801fd72 <__retarget_lock_acquire_recursive>
 801f55e:	bf00      	nop
 801f560:	2001094c 	.word	0x2001094c

0801f564 <__malloc_unlock>:
 801f564:	4801      	ldr	r0, [pc, #4]	; (801f56c <__malloc_unlock+0x8>)
 801f566:	f000 bc05 	b.w	801fd74 <__retarget_lock_release_recursive>
 801f56a:	bf00      	nop
 801f56c:	2001094c 	.word	0x2001094c

0801f570 <rand>:
 801f570:	4b16      	ldr	r3, [pc, #88]	; (801f5cc <rand+0x5c>)
 801f572:	b510      	push	{r4, lr}
 801f574:	681c      	ldr	r4, [r3, #0]
 801f576:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f578:	b9b3      	cbnz	r3, 801f5a8 <rand+0x38>
 801f57a:	2018      	movs	r0, #24
 801f57c:	f7ff ff3c 	bl	801f3f8 <malloc>
 801f580:	4602      	mov	r2, r0
 801f582:	6320      	str	r0, [r4, #48]	; 0x30
 801f584:	b920      	cbnz	r0, 801f590 <rand+0x20>
 801f586:	4b12      	ldr	r3, [pc, #72]	; (801f5d0 <rand+0x60>)
 801f588:	4812      	ldr	r0, [pc, #72]	; (801f5d4 <rand+0x64>)
 801f58a:	2152      	movs	r1, #82	; 0x52
 801f58c:	f7ff ff12 	bl	801f3b4 <__assert_func>
 801f590:	4911      	ldr	r1, [pc, #68]	; (801f5d8 <rand+0x68>)
 801f592:	4b12      	ldr	r3, [pc, #72]	; (801f5dc <rand+0x6c>)
 801f594:	e9c0 1300 	strd	r1, r3, [r0]
 801f598:	4b11      	ldr	r3, [pc, #68]	; (801f5e0 <rand+0x70>)
 801f59a:	6083      	str	r3, [r0, #8]
 801f59c:	230b      	movs	r3, #11
 801f59e:	8183      	strh	r3, [r0, #12]
 801f5a0:	2100      	movs	r1, #0
 801f5a2:	2001      	movs	r0, #1
 801f5a4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f5a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f5aa:	480e      	ldr	r0, [pc, #56]	; (801f5e4 <rand+0x74>)
 801f5ac:	690b      	ldr	r3, [r1, #16]
 801f5ae:	694c      	ldr	r4, [r1, #20]
 801f5b0:	4a0d      	ldr	r2, [pc, #52]	; (801f5e8 <rand+0x78>)
 801f5b2:	4358      	muls	r0, r3
 801f5b4:	fb02 0004 	mla	r0, r2, r4, r0
 801f5b8:	fba3 3202 	umull	r3, r2, r3, r2
 801f5bc:	3301      	adds	r3, #1
 801f5be:	eb40 0002 	adc.w	r0, r0, r2
 801f5c2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801f5c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f5ca:	bd10      	pop	{r4, pc}
 801f5cc:	2000008c 	.word	0x2000008c
 801f5d0:	08025244 	.word	0x08025244
 801f5d4:	0802525b 	.word	0x0802525b
 801f5d8:	abcd330e 	.word	0xabcd330e
 801f5dc:	e66d1234 	.word	0xe66d1234
 801f5e0:	0005deec 	.word	0x0005deec
 801f5e4:	5851f42d 	.word	0x5851f42d
 801f5e8:	4c957f2d 	.word	0x4c957f2d

0801f5ec <_strtol_l.constprop.0>:
 801f5ec:	2b01      	cmp	r3, #1
 801f5ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5f2:	d001      	beq.n	801f5f8 <_strtol_l.constprop.0+0xc>
 801f5f4:	2b24      	cmp	r3, #36	; 0x24
 801f5f6:	d906      	bls.n	801f606 <_strtol_l.constprop.0+0x1a>
 801f5f8:	f000 fb90 	bl	801fd1c <__errno>
 801f5fc:	2316      	movs	r3, #22
 801f5fe:	6003      	str	r3, [r0, #0]
 801f600:	2000      	movs	r0, #0
 801f602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f606:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801f6ec <_strtol_l.constprop.0+0x100>
 801f60a:	460d      	mov	r5, r1
 801f60c:	462e      	mov	r6, r5
 801f60e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f612:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801f616:	f017 0708 	ands.w	r7, r7, #8
 801f61a:	d1f7      	bne.n	801f60c <_strtol_l.constprop.0+0x20>
 801f61c:	2c2d      	cmp	r4, #45	; 0x2d
 801f61e:	d132      	bne.n	801f686 <_strtol_l.constprop.0+0x9a>
 801f620:	782c      	ldrb	r4, [r5, #0]
 801f622:	2701      	movs	r7, #1
 801f624:	1cb5      	adds	r5, r6, #2
 801f626:	2b00      	cmp	r3, #0
 801f628:	d05b      	beq.n	801f6e2 <_strtol_l.constprop.0+0xf6>
 801f62a:	2b10      	cmp	r3, #16
 801f62c:	d109      	bne.n	801f642 <_strtol_l.constprop.0+0x56>
 801f62e:	2c30      	cmp	r4, #48	; 0x30
 801f630:	d107      	bne.n	801f642 <_strtol_l.constprop.0+0x56>
 801f632:	782c      	ldrb	r4, [r5, #0]
 801f634:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801f638:	2c58      	cmp	r4, #88	; 0x58
 801f63a:	d14d      	bne.n	801f6d8 <_strtol_l.constprop.0+0xec>
 801f63c:	786c      	ldrb	r4, [r5, #1]
 801f63e:	2310      	movs	r3, #16
 801f640:	3502      	adds	r5, #2
 801f642:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801f646:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801f64a:	f04f 0e00 	mov.w	lr, #0
 801f64e:	fbb8 f9f3 	udiv	r9, r8, r3
 801f652:	4676      	mov	r6, lr
 801f654:	fb03 8a19 	mls	sl, r3, r9, r8
 801f658:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f65c:	f1bc 0f09 	cmp.w	ip, #9
 801f660:	d816      	bhi.n	801f690 <_strtol_l.constprop.0+0xa4>
 801f662:	4664      	mov	r4, ip
 801f664:	42a3      	cmp	r3, r4
 801f666:	dd24      	ble.n	801f6b2 <_strtol_l.constprop.0+0xc6>
 801f668:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801f66c:	d008      	beq.n	801f680 <_strtol_l.constprop.0+0x94>
 801f66e:	45b1      	cmp	r9, r6
 801f670:	d31c      	bcc.n	801f6ac <_strtol_l.constprop.0+0xc0>
 801f672:	d101      	bne.n	801f678 <_strtol_l.constprop.0+0x8c>
 801f674:	45a2      	cmp	sl, r4
 801f676:	db19      	blt.n	801f6ac <_strtol_l.constprop.0+0xc0>
 801f678:	fb06 4603 	mla	r6, r6, r3, r4
 801f67c:	f04f 0e01 	mov.w	lr, #1
 801f680:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f684:	e7e8      	b.n	801f658 <_strtol_l.constprop.0+0x6c>
 801f686:	2c2b      	cmp	r4, #43	; 0x2b
 801f688:	bf04      	itt	eq
 801f68a:	782c      	ldrbeq	r4, [r5, #0]
 801f68c:	1cb5      	addeq	r5, r6, #2
 801f68e:	e7ca      	b.n	801f626 <_strtol_l.constprop.0+0x3a>
 801f690:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f694:	f1bc 0f19 	cmp.w	ip, #25
 801f698:	d801      	bhi.n	801f69e <_strtol_l.constprop.0+0xb2>
 801f69a:	3c37      	subs	r4, #55	; 0x37
 801f69c:	e7e2      	b.n	801f664 <_strtol_l.constprop.0+0x78>
 801f69e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801f6a2:	f1bc 0f19 	cmp.w	ip, #25
 801f6a6:	d804      	bhi.n	801f6b2 <_strtol_l.constprop.0+0xc6>
 801f6a8:	3c57      	subs	r4, #87	; 0x57
 801f6aa:	e7db      	b.n	801f664 <_strtol_l.constprop.0+0x78>
 801f6ac:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 801f6b0:	e7e6      	b.n	801f680 <_strtol_l.constprop.0+0x94>
 801f6b2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801f6b6:	d105      	bne.n	801f6c4 <_strtol_l.constprop.0+0xd8>
 801f6b8:	2322      	movs	r3, #34	; 0x22
 801f6ba:	6003      	str	r3, [r0, #0]
 801f6bc:	4646      	mov	r6, r8
 801f6be:	b942      	cbnz	r2, 801f6d2 <_strtol_l.constprop.0+0xe6>
 801f6c0:	4630      	mov	r0, r6
 801f6c2:	e79e      	b.n	801f602 <_strtol_l.constprop.0+0x16>
 801f6c4:	b107      	cbz	r7, 801f6c8 <_strtol_l.constprop.0+0xdc>
 801f6c6:	4276      	negs	r6, r6
 801f6c8:	2a00      	cmp	r2, #0
 801f6ca:	d0f9      	beq.n	801f6c0 <_strtol_l.constprop.0+0xd4>
 801f6cc:	f1be 0f00 	cmp.w	lr, #0
 801f6d0:	d000      	beq.n	801f6d4 <_strtol_l.constprop.0+0xe8>
 801f6d2:	1e69      	subs	r1, r5, #1
 801f6d4:	6011      	str	r1, [r2, #0]
 801f6d6:	e7f3      	b.n	801f6c0 <_strtol_l.constprop.0+0xd4>
 801f6d8:	2430      	movs	r4, #48	; 0x30
 801f6da:	2b00      	cmp	r3, #0
 801f6dc:	d1b1      	bne.n	801f642 <_strtol_l.constprop.0+0x56>
 801f6de:	2308      	movs	r3, #8
 801f6e0:	e7af      	b.n	801f642 <_strtol_l.constprop.0+0x56>
 801f6e2:	2c30      	cmp	r4, #48	; 0x30
 801f6e4:	d0a5      	beq.n	801f632 <_strtol_l.constprop.0+0x46>
 801f6e6:	230a      	movs	r3, #10
 801f6e8:	e7ab      	b.n	801f642 <_strtol_l.constprop.0+0x56>
 801f6ea:	bf00      	nop
 801f6ec:	080252b4 	.word	0x080252b4

0801f6f0 <strtol>:
 801f6f0:	4613      	mov	r3, r2
 801f6f2:	460a      	mov	r2, r1
 801f6f4:	4601      	mov	r1, r0
 801f6f6:	4802      	ldr	r0, [pc, #8]	; (801f700 <strtol+0x10>)
 801f6f8:	6800      	ldr	r0, [r0, #0]
 801f6fa:	f7ff bf77 	b.w	801f5ec <_strtol_l.constprop.0>
 801f6fe:	bf00      	nop
 801f700:	2000008c 	.word	0x2000008c

0801f704 <std>:
 801f704:	2300      	movs	r3, #0
 801f706:	b510      	push	{r4, lr}
 801f708:	4604      	mov	r4, r0
 801f70a:	e9c0 3300 	strd	r3, r3, [r0]
 801f70e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f712:	6083      	str	r3, [r0, #8]
 801f714:	8181      	strh	r1, [r0, #12]
 801f716:	6643      	str	r3, [r0, #100]	; 0x64
 801f718:	81c2      	strh	r2, [r0, #14]
 801f71a:	6183      	str	r3, [r0, #24]
 801f71c:	4619      	mov	r1, r3
 801f71e:	2208      	movs	r2, #8
 801f720:	305c      	adds	r0, #92	; 0x5c
 801f722:	f000 fa19 	bl	801fb58 <memset>
 801f726:	4b0d      	ldr	r3, [pc, #52]	; (801f75c <std+0x58>)
 801f728:	6263      	str	r3, [r4, #36]	; 0x24
 801f72a:	4b0d      	ldr	r3, [pc, #52]	; (801f760 <std+0x5c>)
 801f72c:	62a3      	str	r3, [r4, #40]	; 0x28
 801f72e:	4b0d      	ldr	r3, [pc, #52]	; (801f764 <std+0x60>)
 801f730:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f732:	4b0d      	ldr	r3, [pc, #52]	; (801f768 <std+0x64>)
 801f734:	6323      	str	r3, [r4, #48]	; 0x30
 801f736:	4b0d      	ldr	r3, [pc, #52]	; (801f76c <std+0x68>)
 801f738:	6224      	str	r4, [r4, #32]
 801f73a:	429c      	cmp	r4, r3
 801f73c:	d006      	beq.n	801f74c <std+0x48>
 801f73e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801f742:	4294      	cmp	r4, r2
 801f744:	d002      	beq.n	801f74c <std+0x48>
 801f746:	33d0      	adds	r3, #208	; 0xd0
 801f748:	429c      	cmp	r4, r3
 801f74a:	d105      	bne.n	801f758 <std+0x54>
 801f74c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f754:	f000 bb0c 	b.w	801fd70 <__retarget_lock_init_recursive>
 801f758:	bd10      	pop	{r4, pc}
 801f75a:	bf00      	nop
 801f75c:	0801f989 	.word	0x0801f989
 801f760:	0801f9ab 	.word	0x0801f9ab
 801f764:	0801f9e3 	.word	0x0801f9e3
 801f768:	0801fa07 	.word	0x0801fa07
 801f76c:	2001080c 	.word	0x2001080c

0801f770 <stdio_exit_handler>:
 801f770:	4a02      	ldr	r2, [pc, #8]	; (801f77c <stdio_exit_handler+0xc>)
 801f772:	4903      	ldr	r1, [pc, #12]	; (801f780 <stdio_exit_handler+0x10>)
 801f774:	4803      	ldr	r0, [pc, #12]	; (801f784 <stdio_exit_handler+0x14>)
 801f776:	f000 b87b 	b.w	801f870 <_fwalk_sglue>
 801f77a:	bf00      	nop
 801f77c:	20000034 	.word	0x20000034
 801f780:	080204ed 	.word	0x080204ed
 801f784:	20000040 	.word	0x20000040

0801f788 <cleanup_stdio>:
 801f788:	6841      	ldr	r1, [r0, #4]
 801f78a:	4b0c      	ldr	r3, [pc, #48]	; (801f7bc <cleanup_stdio+0x34>)
 801f78c:	4299      	cmp	r1, r3
 801f78e:	b510      	push	{r4, lr}
 801f790:	4604      	mov	r4, r0
 801f792:	d001      	beq.n	801f798 <cleanup_stdio+0x10>
 801f794:	f000 feaa 	bl	80204ec <_fflush_r>
 801f798:	68a1      	ldr	r1, [r4, #8]
 801f79a:	4b09      	ldr	r3, [pc, #36]	; (801f7c0 <cleanup_stdio+0x38>)
 801f79c:	4299      	cmp	r1, r3
 801f79e:	d002      	beq.n	801f7a6 <cleanup_stdio+0x1e>
 801f7a0:	4620      	mov	r0, r4
 801f7a2:	f000 fea3 	bl	80204ec <_fflush_r>
 801f7a6:	68e1      	ldr	r1, [r4, #12]
 801f7a8:	4b06      	ldr	r3, [pc, #24]	; (801f7c4 <cleanup_stdio+0x3c>)
 801f7aa:	4299      	cmp	r1, r3
 801f7ac:	d004      	beq.n	801f7b8 <cleanup_stdio+0x30>
 801f7ae:	4620      	mov	r0, r4
 801f7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f7b4:	f000 be9a 	b.w	80204ec <_fflush_r>
 801f7b8:	bd10      	pop	{r4, pc}
 801f7ba:	bf00      	nop
 801f7bc:	2001080c 	.word	0x2001080c
 801f7c0:	20010874 	.word	0x20010874
 801f7c4:	200108dc 	.word	0x200108dc

0801f7c8 <global_stdio_init.part.0>:
 801f7c8:	b510      	push	{r4, lr}
 801f7ca:	4b0b      	ldr	r3, [pc, #44]	; (801f7f8 <global_stdio_init.part.0+0x30>)
 801f7cc:	4c0b      	ldr	r4, [pc, #44]	; (801f7fc <global_stdio_init.part.0+0x34>)
 801f7ce:	4a0c      	ldr	r2, [pc, #48]	; (801f800 <global_stdio_init.part.0+0x38>)
 801f7d0:	601a      	str	r2, [r3, #0]
 801f7d2:	4620      	mov	r0, r4
 801f7d4:	2200      	movs	r2, #0
 801f7d6:	2104      	movs	r1, #4
 801f7d8:	f7ff ff94 	bl	801f704 <std>
 801f7dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801f7e0:	2201      	movs	r2, #1
 801f7e2:	2109      	movs	r1, #9
 801f7e4:	f7ff ff8e 	bl	801f704 <std>
 801f7e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801f7ec:	2202      	movs	r2, #2
 801f7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f7f2:	2112      	movs	r1, #18
 801f7f4:	f7ff bf86 	b.w	801f704 <std>
 801f7f8:	20010944 	.word	0x20010944
 801f7fc:	2001080c 	.word	0x2001080c
 801f800:	0801f771 	.word	0x0801f771

0801f804 <__sfp_lock_acquire>:
 801f804:	4801      	ldr	r0, [pc, #4]	; (801f80c <__sfp_lock_acquire+0x8>)
 801f806:	f000 bab4 	b.w	801fd72 <__retarget_lock_acquire_recursive>
 801f80a:	bf00      	nop
 801f80c:	2001094d 	.word	0x2001094d

0801f810 <__sfp_lock_release>:
 801f810:	4801      	ldr	r0, [pc, #4]	; (801f818 <__sfp_lock_release+0x8>)
 801f812:	f000 baaf 	b.w	801fd74 <__retarget_lock_release_recursive>
 801f816:	bf00      	nop
 801f818:	2001094d 	.word	0x2001094d

0801f81c <__sinit>:
 801f81c:	b510      	push	{r4, lr}
 801f81e:	4604      	mov	r4, r0
 801f820:	f7ff fff0 	bl	801f804 <__sfp_lock_acquire>
 801f824:	6a23      	ldr	r3, [r4, #32]
 801f826:	b11b      	cbz	r3, 801f830 <__sinit+0x14>
 801f828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f82c:	f7ff bff0 	b.w	801f810 <__sfp_lock_release>
 801f830:	4b04      	ldr	r3, [pc, #16]	; (801f844 <__sinit+0x28>)
 801f832:	6223      	str	r3, [r4, #32]
 801f834:	4b04      	ldr	r3, [pc, #16]	; (801f848 <__sinit+0x2c>)
 801f836:	681b      	ldr	r3, [r3, #0]
 801f838:	2b00      	cmp	r3, #0
 801f83a:	d1f5      	bne.n	801f828 <__sinit+0xc>
 801f83c:	f7ff ffc4 	bl	801f7c8 <global_stdio_init.part.0>
 801f840:	e7f2      	b.n	801f828 <__sinit+0xc>
 801f842:	bf00      	nop
 801f844:	0801f789 	.word	0x0801f789
 801f848:	20010944 	.word	0x20010944

0801f84c <fiprintf>:
 801f84c:	b40e      	push	{r1, r2, r3}
 801f84e:	b503      	push	{r0, r1, lr}
 801f850:	4601      	mov	r1, r0
 801f852:	ab03      	add	r3, sp, #12
 801f854:	4805      	ldr	r0, [pc, #20]	; (801f86c <fiprintf+0x20>)
 801f856:	f853 2b04 	ldr.w	r2, [r3], #4
 801f85a:	6800      	ldr	r0, [r0, #0]
 801f85c:	9301      	str	r3, [sp, #4]
 801f85e:	f000 fb15 	bl	801fe8c <_vfiprintf_r>
 801f862:	b002      	add	sp, #8
 801f864:	f85d eb04 	ldr.w	lr, [sp], #4
 801f868:	b003      	add	sp, #12
 801f86a:	4770      	bx	lr
 801f86c:	2000008c 	.word	0x2000008c

0801f870 <_fwalk_sglue>:
 801f870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f874:	4607      	mov	r7, r0
 801f876:	4688      	mov	r8, r1
 801f878:	4614      	mov	r4, r2
 801f87a:	2600      	movs	r6, #0
 801f87c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f880:	f1b9 0901 	subs.w	r9, r9, #1
 801f884:	d505      	bpl.n	801f892 <_fwalk_sglue+0x22>
 801f886:	6824      	ldr	r4, [r4, #0]
 801f888:	2c00      	cmp	r4, #0
 801f88a:	d1f7      	bne.n	801f87c <_fwalk_sglue+0xc>
 801f88c:	4630      	mov	r0, r6
 801f88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f892:	89ab      	ldrh	r3, [r5, #12]
 801f894:	2b01      	cmp	r3, #1
 801f896:	d907      	bls.n	801f8a8 <_fwalk_sglue+0x38>
 801f898:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f89c:	3301      	adds	r3, #1
 801f89e:	d003      	beq.n	801f8a8 <_fwalk_sglue+0x38>
 801f8a0:	4629      	mov	r1, r5
 801f8a2:	4638      	mov	r0, r7
 801f8a4:	47c0      	blx	r8
 801f8a6:	4306      	orrs	r6, r0
 801f8a8:	3568      	adds	r5, #104	; 0x68
 801f8aa:	e7e9      	b.n	801f880 <_fwalk_sglue+0x10>

0801f8ac <iprintf>:
 801f8ac:	b40f      	push	{r0, r1, r2, r3}
 801f8ae:	b507      	push	{r0, r1, r2, lr}
 801f8b0:	4906      	ldr	r1, [pc, #24]	; (801f8cc <iprintf+0x20>)
 801f8b2:	ab04      	add	r3, sp, #16
 801f8b4:	6808      	ldr	r0, [r1, #0]
 801f8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801f8ba:	6881      	ldr	r1, [r0, #8]
 801f8bc:	9301      	str	r3, [sp, #4]
 801f8be:	f000 fae5 	bl	801fe8c <_vfiprintf_r>
 801f8c2:	b003      	add	sp, #12
 801f8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801f8c8:	b004      	add	sp, #16
 801f8ca:	4770      	bx	lr
 801f8cc:	2000008c 	.word	0x2000008c

0801f8d0 <_puts_r>:
 801f8d0:	6a03      	ldr	r3, [r0, #32]
 801f8d2:	b570      	push	{r4, r5, r6, lr}
 801f8d4:	6884      	ldr	r4, [r0, #8]
 801f8d6:	4605      	mov	r5, r0
 801f8d8:	460e      	mov	r6, r1
 801f8da:	b90b      	cbnz	r3, 801f8e0 <_puts_r+0x10>
 801f8dc:	f7ff ff9e 	bl	801f81c <__sinit>
 801f8e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f8e2:	07db      	lsls	r3, r3, #31
 801f8e4:	d405      	bmi.n	801f8f2 <_puts_r+0x22>
 801f8e6:	89a3      	ldrh	r3, [r4, #12]
 801f8e8:	0598      	lsls	r0, r3, #22
 801f8ea:	d402      	bmi.n	801f8f2 <_puts_r+0x22>
 801f8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f8ee:	f000 fa40 	bl	801fd72 <__retarget_lock_acquire_recursive>
 801f8f2:	89a3      	ldrh	r3, [r4, #12]
 801f8f4:	0719      	lsls	r1, r3, #28
 801f8f6:	d513      	bpl.n	801f920 <_puts_r+0x50>
 801f8f8:	6923      	ldr	r3, [r4, #16]
 801f8fa:	b18b      	cbz	r3, 801f920 <_puts_r+0x50>
 801f8fc:	3e01      	subs	r6, #1
 801f8fe:	68a3      	ldr	r3, [r4, #8]
 801f900:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f904:	3b01      	subs	r3, #1
 801f906:	60a3      	str	r3, [r4, #8]
 801f908:	b9e9      	cbnz	r1, 801f946 <_puts_r+0x76>
 801f90a:	2b00      	cmp	r3, #0
 801f90c:	da2e      	bge.n	801f96c <_puts_r+0x9c>
 801f90e:	4622      	mov	r2, r4
 801f910:	210a      	movs	r1, #10
 801f912:	4628      	mov	r0, r5
 801f914:	f000 f87b 	bl	801fa0e <__swbuf_r>
 801f918:	3001      	adds	r0, #1
 801f91a:	d007      	beq.n	801f92c <_puts_r+0x5c>
 801f91c:	250a      	movs	r5, #10
 801f91e:	e007      	b.n	801f930 <_puts_r+0x60>
 801f920:	4621      	mov	r1, r4
 801f922:	4628      	mov	r0, r5
 801f924:	f000 f8b0 	bl	801fa88 <__swsetup_r>
 801f928:	2800      	cmp	r0, #0
 801f92a:	d0e7      	beq.n	801f8fc <_puts_r+0x2c>
 801f92c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801f930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f932:	07da      	lsls	r2, r3, #31
 801f934:	d405      	bmi.n	801f942 <_puts_r+0x72>
 801f936:	89a3      	ldrh	r3, [r4, #12]
 801f938:	059b      	lsls	r3, r3, #22
 801f93a:	d402      	bmi.n	801f942 <_puts_r+0x72>
 801f93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f93e:	f000 fa19 	bl	801fd74 <__retarget_lock_release_recursive>
 801f942:	4628      	mov	r0, r5
 801f944:	bd70      	pop	{r4, r5, r6, pc}
 801f946:	2b00      	cmp	r3, #0
 801f948:	da04      	bge.n	801f954 <_puts_r+0x84>
 801f94a:	69a2      	ldr	r2, [r4, #24]
 801f94c:	429a      	cmp	r2, r3
 801f94e:	dc06      	bgt.n	801f95e <_puts_r+0x8e>
 801f950:	290a      	cmp	r1, #10
 801f952:	d004      	beq.n	801f95e <_puts_r+0x8e>
 801f954:	6823      	ldr	r3, [r4, #0]
 801f956:	1c5a      	adds	r2, r3, #1
 801f958:	6022      	str	r2, [r4, #0]
 801f95a:	7019      	strb	r1, [r3, #0]
 801f95c:	e7cf      	b.n	801f8fe <_puts_r+0x2e>
 801f95e:	4622      	mov	r2, r4
 801f960:	4628      	mov	r0, r5
 801f962:	f000 f854 	bl	801fa0e <__swbuf_r>
 801f966:	3001      	adds	r0, #1
 801f968:	d1c9      	bne.n	801f8fe <_puts_r+0x2e>
 801f96a:	e7df      	b.n	801f92c <_puts_r+0x5c>
 801f96c:	6823      	ldr	r3, [r4, #0]
 801f96e:	250a      	movs	r5, #10
 801f970:	1c5a      	adds	r2, r3, #1
 801f972:	6022      	str	r2, [r4, #0]
 801f974:	701d      	strb	r5, [r3, #0]
 801f976:	e7db      	b.n	801f930 <_puts_r+0x60>

0801f978 <puts>:
 801f978:	4b02      	ldr	r3, [pc, #8]	; (801f984 <puts+0xc>)
 801f97a:	4601      	mov	r1, r0
 801f97c:	6818      	ldr	r0, [r3, #0]
 801f97e:	f7ff bfa7 	b.w	801f8d0 <_puts_r>
 801f982:	bf00      	nop
 801f984:	2000008c 	.word	0x2000008c

0801f988 <__sread>:
 801f988:	b510      	push	{r4, lr}
 801f98a:	460c      	mov	r4, r1
 801f98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f990:	f000 f990 	bl	801fcb4 <_read_r>
 801f994:	2800      	cmp	r0, #0
 801f996:	bfab      	itete	ge
 801f998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f99a:	89a3      	ldrhlt	r3, [r4, #12]
 801f99c:	181b      	addge	r3, r3, r0
 801f99e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f9a2:	bfac      	ite	ge
 801f9a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801f9a6:	81a3      	strhlt	r3, [r4, #12]
 801f9a8:	bd10      	pop	{r4, pc}

0801f9aa <__swrite>:
 801f9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9ae:	461f      	mov	r7, r3
 801f9b0:	898b      	ldrh	r3, [r1, #12]
 801f9b2:	05db      	lsls	r3, r3, #23
 801f9b4:	4605      	mov	r5, r0
 801f9b6:	460c      	mov	r4, r1
 801f9b8:	4616      	mov	r6, r2
 801f9ba:	d505      	bpl.n	801f9c8 <__swrite+0x1e>
 801f9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9c0:	2302      	movs	r3, #2
 801f9c2:	2200      	movs	r2, #0
 801f9c4:	f000 f964 	bl	801fc90 <_lseek_r>
 801f9c8:	89a3      	ldrh	r3, [r4, #12]
 801f9ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f9ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f9d2:	81a3      	strh	r3, [r4, #12]
 801f9d4:	4632      	mov	r2, r6
 801f9d6:	463b      	mov	r3, r7
 801f9d8:	4628      	mov	r0, r5
 801f9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f9de:	f000 b98b 	b.w	801fcf8 <_write_r>

0801f9e2 <__sseek>:
 801f9e2:	b510      	push	{r4, lr}
 801f9e4:	460c      	mov	r4, r1
 801f9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9ea:	f000 f951 	bl	801fc90 <_lseek_r>
 801f9ee:	1c43      	adds	r3, r0, #1
 801f9f0:	89a3      	ldrh	r3, [r4, #12]
 801f9f2:	bf15      	itete	ne
 801f9f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801f9f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f9fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f9fe:	81a3      	strheq	r3, [r4, #12]
 801fa00:	bf18      	it	ne
 801fa02:	81a3      	strhne	r3, [r4, #12]
 801fa04:	bd10      	pop	{r4, pc}

0801fa06 <__sclose>:
 801fa06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa0a:	f000 b8db 	b.w	801fbc4 <_close_r>

0801fa0e <__swbuf_r>:
 801fa0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa10:	460e      	mov	r6, r1
 801fa12:	4614      	mov	r4, r2
 801fa14:	4605      	mov	r5, r0
 801fa16:	b118      	cbz	r0, 801fa20 <__swbuf_r+0x12>
 801fa18:	6a03      	ldr	r3, [r0, #32]
 801fa1a:	b90b      	cbnz	r3, 801fa20 <__swbuf_r+0x12>
 801fa1c:	f7ff fefe 	bl	801f81c <__sinit>
 801fa20:	69a3      	ldr	r3, [r4, #24]
 801fa22:	60a3      	str	r3, [r4, #8]
 801fa24:	89a3      	ldrh	r3, [r4, #12]
 801fa26:	071a      	lsls	r2, r3, #28
 801fa28:	d525      	bpl.n	801fa76 <__swbuf_r+0x68>
 801fa2a:	6923      	ldr	r3, [r4, #16]
 801fa2c:	b31b      	cbz	r3, 801fa76 <__swbuf_r+0x68>
 801fa2e:	6823      	ldr	r3, [r4, #0]
 801fa30:	6922      	ldr	r2, [r4, #16]
 801fa32:	1a98      	subs	r0, r3, r2
 801fa34:	6963      	ldr	r3, [r4, #20]
 801fa36:	b2f6      	uxtb	r6, r6
 801fa38:	4283      	cmp	r3, r0
 801fa3a:	4637      	mov	r7, r6
 801fa3c:	dc04      	bgt.n	801fa48 <__swbuf_r+0x3a>
 801fa3e:	4621      	mov	r1, r4
 801fa40:	4628      	mov	r0, r5
 801fa42:	f000 fd53 	bl	80204ec <_fflush_r>
 801fa46:	b9e0      	cbnz	r0, 801fa82 <__swbuf_r+0x74>
 801fa48:	68a3      	ldr	r3, [r4, #8]
 801fa4a:	3b01      	subs	r3, #1
 801fa4c:	60a3      	str	r3, [r4, #8]
 801fa4e:	6823      	ldr	r3, [r4, #0]
 801fa50:	1c5a      	adds	r2, r3, #1
 801fa52:	6022      	str	r2, [r4, #0]
 801fa54:	701e      	strb	r6, [r3, #0]
 801fa56:	6962      	ldr	r2, [r4, #20]
 801fa58:	1c43      	adds	r3, r0, #1
 801fa5a:	429a      	cmp	r2, r3
 801fa5c:	d004      	beq.n	801fa68 <__swbuf_r+0x5a>
 801fa5e:	89a3      	ldrh	r3, [r4, #12]
 801fa60:	07db      	lsls	r3, r3, #31
 801fa62:	d506      	bpl.n	801fa72 <__swbuf_r+0x64>
 801fa64:	2e0a      	cmp	r6, #10
 801fa66:	d104      	bne.n	801fa72 <__swbuf_r+0x64>
 801fa68:	4621      	mov	r1, r4
 801fa6a:	4628      	mov	r0, r5
 801fa6c:	f000 fd3e 	bl	80204ec <_fflush_r>
 801fa70:	b938      	cbnz	r0, 801fa82 <__swbuf_r+0x74>
 801fa72:	4638      	mov	r0, r7
 801fa74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa76:	4621      	mov	r1, r4
 801fa78:	4628      	mov	r0, r5
 801fa7a:	f000 f805 	bl	801fa88 <__swsetup_r>
 801fa7e:	2800      	cmp	r0, #0
 801fa80:	d0d5      	beq.n	801fa2e <__swbuf_r+0x20>
 801fa82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fa86:	e7f4      	b.n	801fa72 <__swbuf_r+0x64>

0801fa88 <__swsetup_r>:
 801fa88:	b538      	push	{r3, r4, r5, lr}
 801fa8a:	4b2a      	ldr	r3, [pc, #168]	; (801fb34 <__swsetup_r+0xac>)
 801fa8c:	4605      	mov	r5, r0
 801fa8e:	6818      	ldr	r0, [r3, #0]
 801fa90:	460c      	mov	r4, r1
 801fa92:	b118      	cbz	r0, 801fa9c <__swsetup_r+0x14>
 801fa94:	6a03      	ldr	r3, [r0, #32]
 801fa96:	b90b      	cbnz	r3, 801fa9c <__swsetup_r+0x14>
 801fa98:	f7ff fec0 	bl	801f81c <__sinit>
 801fa9c:	89a3      	ldrh	r3, [r4, #12]
 801fa9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801faa2:	0718      	lsls	r0, r3, #28
 801faa4:	d422      	bmi.n	801faec <__swsetup_r+0x64>
 801faa6:	06d9      	lsls	r1, r3, #27
 801faa8:	d407      	bmi.n	801faba <__swsetup_r+0x32>
 801faaa:	2309      	movs	r3, #9
 801faac:	602b      	str	r3, [r5, #0]
 801faae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fab2:	81a3      	strh	r3, [r4, #12]
 801fab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fab8:	e034      	b.n	801fb24 <__swsetup_r+0x9c>
 801faba:	0758      	lsls	r0, r3, #29
 801fabc:	d512      	bpl.n	801fae4 <__swsetup_r+0x5c>
 801fabe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fac0:	b141      	cbz	r1, 801fad4 <__swsetup_r+0x4c>
 801fac2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fac6:	4299      	cmp	r1, r3
 801fac8:	d002      	beq.n	801fad0 <__swsetup_r+0x48>
 801faca:	4628      	mov	r0, r5
 801facc:	f000 f968 	bl	801fda0 <_free_r>
 801fad0:	2300      	movs	r3, #0
 801fad2:	6363      	str	r3, [r4, #52]	; 0x34
 801fad4:	89a3      	ldrh	r3, [r4, #12]
 801fad6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fada:	81a3      	strh	r3, [r4, #12]
 801fadc:	2300      	movs	r3, #0
 801fade:	6063      	str	r3, [r4, #4]
 801fae0:	6923      	ldr	r3, [r4, #16]
 801fae2:	6023      	str	r3, [r4, #0]
 801fae4:	89a3      	ldrh	r3, [r4, #12]
 801fae6:	f043 0308 	orr.w	r3, r3, #8
 801faea:	81a3      	strh	r3, [r4, #12]
 801faec:	6923      	ldr	r3, [r4, #16]
 801faee:	b94b      	cbnz	r3, 801fb04 <__swsetup_r+0x7c>
 801faf0:	89a3      	ldrh	r3, [r4, #12]
 801faf2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801faf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fafa:	d003      	beq.n	801fb04 <__swsetup_r+0x7c>
 801fafc:	4621      	mov	r1, r4
 801fafe:	4628      	mov	r0, r5
 801fb00:	f000 fd42 	bl	8020588 <__smakebuf_r>
 801fb04:	89a0      	ldrh	r0, [r4, #12]
 801fb06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb0a:	f010 0301 	ands.w	r3, r0, #1
 801fb0e:	d00a      	beq.n	801fb26 <__swsetup_r+0x9e>
 801fb10:	2300      	movs	r3, #0
 801fb12:	60a3      	str	r3, [r4, #8]
 801fb14:	6963      	ldr	r3, [r4, #20]
 801fb16:	425b      	negs	r3, r3
 801fb18:	61a3      	str	r3, [r4, #24]
 801fb1a:	6923      	ldr	r3, [r4, #16]
 801fb1c:	b943      	cbnz	r3, 801fb30 <__swsetup_r+0xa8>
 801fb1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fb22:	d1c4      	bne.n	801faae <__swsetup_r+0x26>
 801fb24:	bd38      	pop	{r3, r4, r5, pc}
 801fb26:	0781      	lsls	r1, r0, #30
 801fb28:	bf58      	it	pl
 801fb2a:	6963      	ldrpl	r3, [r4, #20]
 801fb2c:	60a3      	str	r3, [r4, #8]
 801fb2e:	e7f4      	b.n	801fb1a <__swsetup_r+0x92>
 801fb30:	2000      	movs	r0, #0
 801fb32:	e7f7      	b.n	801fb24 <__swsetup_r+0x9c>
 801fb34:	2000008c 	.word	0x2000008c

0801fb38 <memcmp>:
 801fb38:	b510      	push	{r4, lr}
 801fb3a:	3901      	subs	r1, #1
 801fb3c:	4402      	add	r2, r0
 801fb3e:	4290      	cmp	r0, r2
 801fb40:	d101      	bne.n	801fb46 <memcmp+0xe>
 801fb42:	2000      	movs	r0, #0
 801fb44:	e005      	b.n	801fb52 <memcmp+0x1a>
 801fb46:	7803      	ldrb	r3, [r0, #0]
 801fb48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fb4c:	42a3      	cmp	r3, r4
 801fb4e:	d001      	beq.n	801fb54 <memcmp+0x1c>
 801fb50:	1b18      	subs	r0, r3, r4
 801fb52:	bd10      	pop	{r4, pc}
 801fb54:	3001      	adds	r0, #1
 801fb56:	e7f2      	b.n	801fb3e <memcmp+0x6>

0801fb58 <memset>:
 801fb58:	4402      	add	r2, r0
 801fb5a:	4603      	mov	r3, r0
 801fb5c:	4293      	cmp	r3, r2
 801fb5e:	d100      	bne.n	801fb62 <memset+0xa>
 801fb60:	4770      	bx	lr
 801fb62:	f803 1b01 	strb.w	r1, [r3], #1
 801fb66:	e7f9      	b.n	801fb5c <memset+0x4>

0801fb68 <strchr>:
 801fb68:	b2c9      	uxtb	r1, r1
 801fb6a:	4603      	mov	r3, r0
 801fb6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fb70:	b11a      	cbz	r2, 801fb7a <strchr+0x12>
 801fb72:	428a      	cmp	r2, r1
 801fb74:	d1f9      	bne.n	801fb6a <strchr+0x2>
 801fb76:	4618      	mov	r0, r3
 801fb78:	4770      	bx	lr
 801fb7a:	2900      	cmp	r1, #0
 801fb7c:	bf18      	it	ne
 801fb7e:	2300      	movne	r3, #0
 801fb80:	e7f9      	b.n	801fb76 <strchr+0xe>

0801fb82 <strcspn>:
 801fb82:	b570      	push	{r4, r5, r6, lr}
 801fb84:	4603      	mov	r3, r0
 801fb86:	461e      	mov	r6, r3
 801fb88:	f813 4b01 	ldrb.w	r4, [r3], #1
 801fb8c:	b144      	cbz	r4, 801fba0 <strcspn+0x1e>
 801fb8e:	1e4a      	subs	r2, r1, #1
 801fb90:	e001      	b.n	801fb96 <strcspn+0x14>
 801fb92:	42a5      	cmp	r5, r4
 801fb94:	d004      	beq.n	801fba0 <strcspn+0x1e>
 801fb96:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801fb9a:	2d00      	cmp	r5, #0
 801fb9c:	d1f9      	bne.n	801fb92 <strcspn+0x10>
 801fb9e:	e7f2      	b.n	801fb86 <strcspn+0x4>
 801fba0:	1a30      	subs	r0, r6, r0
 801fba2:	bd70      	pop	{r4, r5, r6, pc}

0801fba4 <strspn>:
 801fba4:	b570      	push	{r4, r5, r6, lr}
 801fba6:	4603      	mov	r3, r0
 801fba8:	461e      	mov	r6, r3
 801fbaa:	f813 4b01 	ldrb.w	r4, [r3], #1
 801fbae:	b13c      	cbz	r4, 801fbc0 <strspn+0x1c>
 801fbb0:	1e4a      	subs	r2, r1, #1
 801fbb2:	e001      	b.n	801fbb8 <strspn+0x14>
 801fbb4:	42a5      	cmp	r5, r4
 801fbb6:	d0f7      	beq.n	801fba8 <strspn+0x4>
 801fbb8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801fbbc:	2d00      	cmp	r5, #0
 801fbbe:	d1f9      	bne.n	801fbb4 <strspn+0x10>
 801fbc0:	1a30      	subs	r0, r6, r0
 801fbc2:	bd70      	pop	{r4, r5, r6, pc}

0801fbc4 <_close_r>:
 801fbc4:	b538      	push	{r3, r4, r5, lr}
 801fbc6:	4d06      	ldr	r5, [pc, #24]	; (801fbe0 <_close_r+0x1c>)
 801fbc8:	2300      	movs	r3, #0
 801fbca:	4604      	mov	r4, r0
 801fbcc:	4608      	mov	r0, r1
 801fbce:	602b      	str	r3, [r5, #0]
 801fbd0:	f7e1 fc15 	bl	80013fe <_close>
 801fbd4:	1c43      	adds	r3, r0, #1
 801fbd6:	d102      	bne.n	801fbde <_close_r+0x1a>
 801fbd8:	682b      	ldr	r3, [r5, #0]
 801fbda:	b103      	cbz	r3, 801fbde <_close_r+0x1a>
 801fbdc:	6023      	str	r3, [r4, #0]
 801fbde:	bd38      	pop	{r3, r4, r5, pc}
 801fbe0:	20010948 	.word	0x20010948

0801fbe4 <_reclaim_reent>:
 801fbe4:	4b29      	ldr	r3, [pc, #164]	; (801fc8c <_reclaim_reent+0xa8>)
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	4283      	cmp	r3, r0
 801fbea:	b570      	push	{r4, r5, r6, lr}
 801fbec:	4604      	mov	r4, r0
 801fbee:	d04b      	beq.n	801fc88 <_reclaim_reent+0xa4>
 801fbf0:	69c3      	ldr	r3, [r0, #28]
 801fbf2:	b143      	cbz	r3, 801fc06 <_reclaim_reent+0x22>
 801fbf4:	68db      	ldr	r3, [r3, #12]
 801fbf6:	2b00      	cmp	r3, #0
 801fbf8:	d144      	bne.n	801fc84 <_reclaim_reent+0xa0>
 801fbfa:	69e3      	ldr	r3, [r4, #28]
 801fbfc:	6819      	ldr	r1, [r3, #0]
 801fbfe:	b111      	cbz	r1, 801fc06 <_reclaim_reent+0x22>
 801fc00:	4620      	mov	r0, r4
 801fc02:	f000 f8cd 	bl	801fda0 <_free_r>
 801fc06:	6961      	ldr	r1, [r4, #20]
 801fc08:	b111      	cbz	r1, 801fc10 <_reclaim_reent+0x2c>
 801fc0a:	4620      	mov	r0, r4
 801fc0c:	f000 f8c8 	bl	801fda0 <_free_r>
 801fc10:	69e1      	ldr	r1, [r4, #28]
 801fc12:	b111      	cbz	r1, 801fc1a <_reclaim_reent+0x36>
 801fc14:	4620      	mov	r0, r4
 801fc16:	f000 f8c3 	bl	801fda0 <_free_r>
 801fc1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801fc1c:	b111      	cbz	r1, 801fc24 <_reclaim_reent+0x40>
 801fc1e:	4620      	mov	r0, r4
 801fc20:	f000 f8be 	bl	801fda0 <_free_r>
 801fc24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc26:	b111      	cbz	r1, 801fc2e <_reclaim_reent+0x4a>
 801fc28:	4620      	mov	r0, r4
 801fc2a:	f000 f8b9 	bl	801fda0 <_free_r>
 801fc2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fc30:	b111      	cbz	r1, 801fc38 <_reclaim_reent+0x54>
 801fc32:	4620      	mov	r0, r4
 801fc34:	f000 f8b4 	bl	801fda0 <_free_r>
 801fc38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fc3a:	b111      	cbz	r1, 801fc42 <_reclaim_reent+0x5e>
 801fc3c:	4620      	mov	r0, r4
 801fc3e:	f000 f8af 	bl	801fda0 <_free_r>
 801fc42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801fc44:	b111      	cbz	r1, 801fc4c <_reclaim_reent+0x68>
 801fc46:	4620      	mov	r0, r4
 801fc48:	f000 f8aa 	bl	801fda0 <_free_r>
 801fc4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801fc4e:	b111      	cbz	r1, 801fc56 <_reclaim_reent+0x72>
 801fc50:	4620      	mov	r0, r4
 801fc52:	f000 f8a5 	bl	801fda0 <_free_r>
 801fc56:	6a23      	ldr	r3, [r4, #32]
 801fc58:	b1b3      	cbz	r3, 801fc88 <_reclaim_reent+0xa4>
 801fc5a:	4620      	mov	r0, r4
 801fc5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fc60:	4718      	bx	r3
 801fc62:	5949      	ldr	r1, [r1, r5]
 801fc64:	b941      	cbnz	r1, 801fc78 <_reclaim_reent+0x94>
 801fc66:	3504      	adds	r5, #4
 801fc68:	69e3      	ldr	r3, [r4, #28]
 801fc6a:	2d80      	cmp	r5, #128	; 0x80
 801fc6c:	68d9      	ldr	r1, [r3, #12]
 801fc6e:	d1f8      	bne.n	801fc62 <_reclaim_reent+0x7e>
 801fc70:	4620      	mov	r0, r4
 801fc72:	f000 f895 	bl	801fda0 <_free_r>
 801fc76:	e7c0      	b.n	801fbfa <_reclaim_reent+0x16>
 801fc78:	680e      	ldr	r6, [r1, #0]
 801fc7a:	4620      	mov	r0, r4
 801fc7c:	f000 f890 	bl	801fda0 <_free_r>
 801fc80:	4631      	mov	r1, r6
 801fc82:	e7ef      	b.n	801fc64 <_reclaim_reent+0x80>
 801fc84:	2500      	movs	r5, #0
 801fc86:	e7ef      	b.n	801fc68 <_reclaim_reent+0x84>
 801fc88:	bd70      	pop	{r4, r5, r6, pc}
 801fc8a:	bf00      	nop
 801fc8c:	2000008c 	.word	0x2000008c

0801fc90 <_lseek_r>:
 801fc90:	b538      	push	{r3, r4, r5, lr}
 801fc92:	4d07      	ldr	r5, [pc, #28]	; (801fcb0 <_lseek_r+0x20>)
 801fc94:	4604      	mov	r4, r0
 801fc96:	4608      	mov	r0, r1
 801fc98:	4611      	mov	r1, r2
 801fc9a:	2200      	movs	r2, #0
 801fc9c:	602a      	str	r2, [r5, #0]
 801fc9e:	461a      	mov	r2, r3
 801fca0:	f7e1 fbd4 	bl	800144c <_lseek>
 801fca4:	1c43      	adds	r3, r0, #1
 801fca6:	d102      	bne.n	801fcae <_lseek_r+0x1e>
 801fca8:	682b      	ldr	r3, [r5, #0]
 801fcaa:	b103      	cbz	r3, 801fcae <_lseek_r+0x1e>
 801fcac:	6023      	str	r3, [r4, #0]
 801fcae:	bd38      	pop	{r3, r4, r5, pc}
 801fcb0:	20010948 	.word	0x20010948

0801fcb4 <_read_r>:
 801fcb4:	b538      	push	{r3, r4, r5, lr}
 801fcb6:	4d07      	ldr	r5, [pc, #28]	; (801fcd4 <_read_r+0x20>)
 801fcb8:	4604      	mov	r4, r0
 801fcba:	4608      	mov	r0, r1
 801fcbc:	4611      	mov	r1, r2
 801fcbe:	2200      	movs	r2, #0
 801fcc0:	602a      	str	r2, [r5, #0]
 801fcc2:	461a      	mov	r2, r3
 801fcc4:	f7e1 fb62 	bl	800138c <_read>
 801fcc8:	1c43      	adds	r3, r0, #1
 801fcca:	d102      	bne.n	801fcd2 <_read_r+0x1e>
 801fccc:	682b      	ldr	r3, [r5, #0]
 801fcce:	b103      	cbz	r3, 801fcd2 <_read_r+0x1e>
 801fcd0:	6023      	str	r3, [r4, #0]
 801fcd2:	bd38      	pop	{r3, r4, r5, pc}
 801fcd4:	20010948 	.word	0x20010948

0801fcd8 <_sbrk_r>:
 801fcd8:	b538      	push	{r3, r4, r5, lr}
 801fcda:	4d06      	ldr	r5, [pc, #24]	; (801fcf4 <_sbrk_r+0x1c>)
 801fcdc:	2300      	movs	r3, #0
 801fcde:	4604      	mov	r4, r0
 801fce0:	4608      	mov	r0, r1
 801fce2:	602b      	str	r3, [r5, #0]
 801fce4:	f7e1 fbc0 	bl	8001468 <_sbrk>
 801fce8:	1c43      	adds	r3, r0, #1
 801fcea:	d102      	bne.n	801fcf2 <_sbrk_r+0x1a>
 801fcec:	682b      	ldr	r3, [r5, #0]
 801fcee:	b103      	cbz	r3, 801fcf2 <_sbrk_r+0x1a>
 801fcf0:	6023      	str	r3, [r4, #0]
 801fcf2:	bd38      	pop	{r3, r4, r5, pc}
 801fcf4:	20010948 	.word	0x20010948

0801fcf8 <_write_r>:
 801fcf8:	b538      	push	{r3, r4, r5, lr}
 801fcfa:	4d07      	ldr	r5, [pc, #28]	; (801fd18 <_write_r+0x20>)
 801fcfc:	4604      	mov	r4, r0
 801fcfe:	4608      	mov	r0, r1
 801fd00:	4611      	mov	r1, r2
 801fd02:	2200      	movs	r2, #0
 801fd04:	602a      	str	r2, [r5, #0]
 801fd06:	461a      	mov	r2, r3
 801fd08:	f7e1 fb5d 	bl	80013c6 <_write>
 801fd0c:	1c43      	adds	r3, r0, #1
 801fd0e:	d102      	bne.n	801fd16 <_write_r+0x1e>
 801fd10:	682b      	ldr	r3, [r5, #0]
 801fd12:	b103      	cbz	r3, 801fd16 <_write_r+0x1e>
 801fd14:	6023      	str	r3, [r4, #0]
 801fd16:	bd38      	pop	{r3, r4, r5, pc}
 801fd18:	20010948 	.word	0x20010948

0801fd1c <__errno>:
 801fd1c:	4b01      	ldr	r3, [pc, #4]	; (801fd24 <__errno+0x8>)
 801fd1e:	6818      	ldr	r0, [r3, #0]
 801fd20:	4770      	bx	lr
 801fd22:	bf00      	nop
 801fd24:	2000008c 	.word	0x2000008c

0801fd28 <__libc_init_array>:
 801fd28:	b570      	push	{r4, r5, r6, lr}
 801fd2a:	4d0d      	ldr	r5, [pc, #52]	; (801fd60 <__libc_init_array+0x38>)
 801fd2c:	4c0d      	ldr	r4, [pc, #52]	; (801fd64 <__libc_init_array+0x3c>)
 801fd2e:	1b64      	subs	r4, r4, r5
 801fd30:	10a4      	asrs	r4, r4, #2
 801fd32:	2600      	movs	r6, #0
 801fd34:	42a6      	cmp	r6, r4
 801fd36:	d109      	bne.n	801fd4c <__libc_init_array+0x24>
 801fd38:	4d0b      	ldr	r5, [pc, #44]	; (801fd68 <__libc_init_array+0x40>)
 801fd3a:	4c0c      	ldr	r4, [pc, #48]	; (801fd6c <__libc_init_array+0x44>)
 801fd3c:	f000 fcc6 	bl	80206cc <_init>
 801fd40:	1b64      	subs	r4, r4, r5
 801fd42:	10a4      	asrs	r4, r4, #2
 801fd44:	2600      	movs	r6, #0
 801fd46:	42a6      	cmp	r6, r4
 801fd48:	d105      	bne.n	801fd56 <__libc_init_array+0x2e>
 801fd4a:	bd70      	pop	{r4, r5, r6, pc}
 801fd4c:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd50:	4798      	blx	r3
 801fd52:	3601      	adds	r6, #1
 801fd54:	e7ee      	b.n	801fd34 <__libc_init_array+0xc>
 801fd56:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd5a:	4798      	blx	r3
 801fd5c:	3601      	adds	r6, #1
 801fd5e:	e7f2      	b.n	801fd46 <__libc_init_array+0x1e>
 801fd60:	080253f0 	.word	0x080253f0
 801fd64:	080253f0 	.word	0x080253f0
 801fd68:	080253f0 	.word	0x080253f0
 801fd6c:	080253f4 	.word	0x080253f4

0801fd70 <__retarget_lock_init_recursive>:
 801fd70:	4770      	bx	lr

0801fd72 <__retarget_lock_acquire_recursive>:
 801fd72:	4770      	bx	lr

0801fd74 <__retarget_lock_release_recursive>:
 801fd74:	4770      	bx	lr

0801fd76 <memcpy>:
 801fd76:	440a      	add	r2, r1
 801fd78:	4291      	cmp	r1, r2
 801fd7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801fd7e:	d100      	bne.n	801fd82 <memcpy+0xc>
 801fd80:	4770      	bx	lr
 801fd82:	b510      	push	{r4, lr}
 801fd84:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fd88:	f803 4f01 	strb.w	r4, [r3, #1]!
 801fd8c:	4291      	cmp	r1, r2
 801fd8e:	d1f9      	bne.n	801fd84 <memcpy+0xe>
 801fd90:	bd10      	pop	{r4, pc}

0801fd92 <abort>:
 801fd92:	b508      	push	{r3, lr}
 801fd94:	2006      	movs	r0, #6
 801fd96:	f000 fc5b 	bl	8020650 <raise>
 801fd9a:	2001      	movs	r0, #1
 801fd9c:	f7e1 faec 	bl	8001378 <_exit>

0801fda0 <_free_r>:
 801fda0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fda2:	2900      	cmp	r1, #0
 801fda4:	d044      	beq.n	801fe30 <_free_r+0x90>
 801fda6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fdaa:	9001      	str	r0, [sp, #4]
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	f1a1 0404 	sub.w	r4, r1, #4
 801fdb2:	bfb8      	it	lt
 801fdb4:	18e4      	addlt	r4, r4, r3
 801fdb6:	f7ff fbcf 	bl	801f558 <__malloc_lock>
 801fdba:	4a1e      	ldr	r2, [pc, #120]	; (801fe34 <_free_r+0x94>)
 801fdbc:	9801      	ldr	r0, [sp, #4]
 801fdbe:	6813      	ldr	r3, [r2, #0]
 801fdc0:	b933      	cbnz	r3, 801fdd0 <_free_r+0x30>
 801fdc2:	6063      	str	r3, [r4, #4]
 801fdc4:	6014      	str	r4, [r2, #0]
 801fdc6:	b003      	add	sp, #12
 801fdc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fdcc:	f7ff bbca 	b.w	801f564 <__malloc_unlock>
 801fdd0:	42a3      	cmp	r3, r4
 801fdd2:	d908      	bls.n	801fde6 <_free_r+0x46>
 801fdd4:	6825      	ldr	r5, [r4, #0]
 801fdd6:	1961      	adds	r1, r4, r5
 801fdd8:	428b      	cmp	r3, r1
 801fdda:	bf01      	itttt	eq
 801fddc:	6819      	ldreq	r1, [r3, #0]
 801fdde:	685b      	ldreq	r3, [r3, #4]
 801fde0:	1949      	addeq	r1, r1, r5
 801fde2:	6021      	streq	r1, [r4, #0]
 801fde4:	e7ed      	b.n	801fdc2 <_free_r+0x22>
 801fde6:	461a      	mov	r2, r3
 801fde8:	685b      	ldr	r3, [r3, #4]
 801fdea:	b10b      	cbz	r3, 801fdf0 <_free_r+0x50>
 801fdec:	42a3      	cmp	r3, r4
 801fdee:	d9fa      	bls.n	801fde6 <_free_r+0x46>
 801fdf0:	6811      	ldr	r1, [r2, #0]
 801fdf2:	1855      	adds	r5, r2, r1
 801fdf4:	42a5      	cmp	r5, r4
 801fdf6:	d10b      	bne.n	801fe10 <_free_r+0x70>
 801fdf8:	6824      	ldr	r4, [r4, #0]
 801fdfa:	4421      	add	r1, r4
 801fdfc:	1854      	adds	r4, r2, r1
 801fdfe:	42a3      	cmp	r3, r4
 801fe00:	6011      	str	r1, [r2, #0]
 801fe02:	d1e0      	bne.n	801fdc6 <_free_r+0x26>
 801fe04:	681c      	ldr	r4, [r3, #0]
 801fe06:	685b      	ldr	r3, [r3, #4]
 801fe08:	6053      	str	r3, [r2, #4]
 801fe0a:	440c      	add	r4, r1
 801fe0c:	6014      	str	r4, [r2, #0]
 801fe0e:	e7da      	b.n	801fdc6 <_free_r+0x26>
 801fe10:	d902      	bls.n	801fe18 <_free_r+0x78>
 801fe12:	230c      	movs	r3, #12
 801fe14:	6003      	str	r3, [r0, #0]
 801fe16:	e7d6      	b.n	801fdc6 <_free_r+0x26>
 801fe18:	6825      	ldr	r5, [r4, #0]
 801fe1a:	1961      	adds	r1, r4, r5
 801fe1c:	428b      	cmp	r3, r1
 801fe1e:	bf04      	itt	eq
 801fe20:	6819      	ldreq	r1, [r3, #0]
 801fe22:	685b      	ldreq	r3, [r3, #4]
 801fe24:	6063      	str	r3, [r4, #4]
 801fe26:	bf04      	itt	eq
 801fe28:	1949      	addeq	r1, r1, r5
 801fe2a:	6021      	streq	r1, [r4, #0]
 801fe2c:	6054      	str	r4, [r2, #4]
 801fe2e:	e7ca      	b.n	801fdc6 <_free_r+0x26>
 801fe30:	b003      	add	sp, #12
 801fe32:	bd30      	pop	{r4, r5, pc}
 801fe34:	20010804 	.word	0x20010804

0801fe38 <__sfputc_r>:
 801fe38:	6893      	ldr	r3, [r2, #8]
 801fe3a:	3b01      	subs	r3, #1
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	b410      	push	{r4}
 801fe40:	6093      	str	r3, [r2, #8]
 801fe42:	da08      	bge.n	801fe56 <__sfputc_r+0x1e>
 801fe44:	6994      	ldr	r4, [r2, #24]
 801fe46:	42a3      	cmp	r3, r4
 801fe48:	db01      	blt.n	801fe4e <__sfputc_r+0x16>
 801fe4a:	290a      	cmp	r1, #10
 801fe4c:	d103      	bne.n	801fe56 <__sfputc_r+0x1e>
 801fe4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fe52:	f7ff bddc 	b.w	801fa0e <__swbuf_r>
 801fe56:	6813      	ldr	r3, [r2, #0]
 801fe58:	1c58      	adds	r0, r3, #1
 801fe5a:	6010      	str	r0, [r2, #0]
 801fe5c:	7019      	strb	r1, [r3, #0]
 801fe5e:	4608      	mov	r0, r1
 801fe60:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fe64:	4770      	bx	lr

0801fe66 <__sfputs_r>:
 801fe66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe68:	4606      	mov	r6, r0
 801fe6a:	460f      	mov	r7, r1
 801fe6c:	4614      	mov	r4, r2
 801fe6e:	18d5      	adds	r5, r2, r3
 801fe70:	42ac      	cmp	r4, r5
 801fe72:	d101      	bne.n	801fe78 <__sfputs_r+0x12>
 801fe74:	2000      	movs	r0, #0
 801fe76:	e007      	b.n	801fe88 <__sfputs_r+0x22>
 801fe78:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe7c:	463a      	mov	r2, r7
 801fe7e:	4630      	mov	r0, r6
 801fe80:	f7ff ffda 	bl	801fe38 <__sfputc_r>
 801fe84:	1c43      	adds	r3, r0, #1
 801fe86:	d1f3      	bne.n	801fe70 <__sfputs_r+0xa>
 801fe88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fe8c <_vfiprintf_r>:
 801fe8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe90:	460d      	mov	r5, r1
 801fe92:	b09d      	sub	sp, #116	; 0x74
 801fe94:	4614      	mov	r4, r2
 801fe96:	4698      	mov	r8, r3
 801fe98:	4606      	mov	r6, r0
 801fe9a:	b118      	cbz	r0, 801fea4 <_vfiprintf_r+0x18>
 801fe9c:	6a03      	ldr	r3, [r0, #32]
 801fe9e:	b90b      	cbnz	r3, 801fea4 <_vfiprintf_r+0x18>
 801fea0:	f7ff fcbc 	bl	801f81c <__sinit>
 801fea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fea6:	07d9      	lsls	r1, r3, #31
 801fea8:	d405      	bmi.n	801feb6 <_vfiprintf_r+0x2a>
 801feaa:	89ab      	ldrh	r3, [r5, #12]
 801feac:	059a      	lsls	r2, r3, #22
 801feae:	d402      	bmi.n	801feb6 <_vfiprintf_r+0x2a>
 801feb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801feb2:	f7ff ff5e 	bl	801fd72 <__retarget_lock_acquire_recursive>
 801feb6:	89ab      	ldrh	r3, [r5, #12]
 801feb8:	071b      	lsls	r3, r3, #28
 801feba:	d501      	bpl.n	801fec0 <_vfiprintf_r+0x34>
 801febc:	692b      	ldr	r3, [r5, #16]
 801febe:	b99b      	cbnz	r3, 801fee8 <_vfiprintf_r+0x5c>
 801fec0:	4629      	mov	r1, r5
 801fec2:	4630      	mov	r0, r6
 801fec4:	f7ff fde0 	bl	801fa88 <__swsetup_r>
 801fec8:	b170      	cbz	r0, 801fee8 <_vfiprintf_r+0x5c>
 801feca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fecc:	07dc      	lsls	r4, r3, #31
 801fece:	d504      	bpl.n	801feda <_vfiprintf_r+0x4e>
 801fed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fed4:	b01d      	add	sp, #116	; 0x74
 801fed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feda:	89ab      	ldrh	r3, [r5, #12]
 801fedc:	0598      	lsls	r0, r3, #22
 801fede:	d4f7      	bmi.n	801fed0 <_vfiprintf_r+0x44>
 801fee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fee2:	f7ff ff47 	bl	801fd74 <__retarget_lock_release_recursive>
 801fee6:	e7f3      	b.n	801fed0 <_vfiprintf_r+0x44>
 801fee8:	2300      	movs	r3, #0
 801feea:	9309      	str	r3, [sp, #36]	; 0x24
 801feec:	2320      	movs	r3, #32
 801feee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fef2:	f8cd 800c 	str.w	r8, [sp, #12]
 801fef6:	2330      	movs	r3, #48	; 0x30
 801fef8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80200ac <_vfiprintf_r+0x220>
 801fefc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ff00:	f04f 0901 	mov.w	r9, #1
 801ff04:	4623      	mov	r3, r4
 801ff06:	469a      	mov	sl, r3
 801ff08:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ff0c:	b10a      	cbz	r2, 801ff12 <_vfiprintf_r+0x86>
 801ff0e:	2a25      	cmp	r2, #37	; 0x25
 801ff10:	d1f9      	bne.n	801ff06 <_vfiprintf_r+0x7a>
 801ff12:	ebba 0b04 	subs.w	fp, sl, r4
 801ff16:	d00b      	beq.n	801ff30 <_vfiprintf_r+0xa4>
 801ff18:	465b      	mov	r3, fp
 801ff1a:	4622      	mov	r2, r4
 801ff1c:	4629      	mov	r1, r5
 801ff1e:	4630      	mov	r0, r6
 801ff20:	f7ff ffa1 	bl	801fe66 <__sfputs_r>
 801ff24:	3001      	adds	r0, #1
 801ff26:	f000 80a9 	beq.w	802007c <_vfiprintf_r+0x1f0>
 801ff2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ff2c:	445a      	add	r2, fp
 801ff2e:	9209      	str	r2, [sp, #36]	; 0x24
 801ff30:	f89a 3000 	ldrb.w	r3, [sl]
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	f000 80a1 	beq.w	802007c <_vfiprintf_r+0x1f0>
 801ff3a:	2300      	movs	r3, #0
 801ff3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ff40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ff44:	f10a 0a01 	add.w	sl, sl, #1
 801ff48:	9304      	str	r3, [sp, #16]
 801ff4a:	9307      	str	r3, [sp, #28]
 801ff4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ff50:	931a      	str	r3, [sp, #104]	; 0x68
 801ff52:	4654      	mov	r4, sl
 801ff54:	2205      	movs	r2, #5
 801ff56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff5a:	4854      	ldr	r0, [pc, #336]	; (80200ac <_vfiprintf_r+0x220>)
 801ff5c:	f7e0 f940 	bl	80001e0 <memchr>
 801ff60:	9a04      	ldr	r2, [sp, #16]
 801ff62:	b9d8      	cbnz	r0, 801ff9c <_vfiprintf_r+0x110>
 801ff64:	06d1      	lsls	r1, r2, #27
 801ff66:	bf44      	itt	mi
 801ff68:	2320      	movmi	r3, #32
 801ff6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ff6e:	0713      	lsls	r3, r2, #28
 801ff70:	bf44      	itt	mi
 801ff72:	232b      	movmi	r3, #43	; 0x2b
 801ff74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ff78:	f89a 3000 	ldrb.w	r3, [sl]
 801ff7c:	2b2a      	cmp	r3, #42	; 0x2a
 801ff7e:	d015      	beq.n	801ffac <_vfiprintf_r+0x120>
 801ff80:	9a07      	ldr	r2, [sp, #28]
 801ff82:	4654      	mov	r4, sl
 801ff84:	2000      	movs	r0, #0
 801ff86:	f04f 0c0a 	mov.w	ip, #10
 801ff8a:	4621      	mov	r1, r4
 801ff8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ff90:	3b30      	subs	r3, #48	; 0x30
 801ff92:	2b09      	cmp	r3, #9
 801ff94:	d94d      	bls.n	8020032 <_vfiprintf_r+0x1a6>
 801ff96:	b1b0      	cbz	r0, 801ffc6 <_vfiprintf_r+0x13a>
 801ff98:	9207      	str	r2, [sp, #28]
 801ff9a:	e014      	b.n	801ffc6 <_vfiprintf_r+0x13a>
 801ff9c:	eba0 0308 	sub.w	r3, r0, r8
 801ffa0:	fa09 f303 	lsl.w	r3, r9, r3
 801ffa4:	4313      	orrs	r3, r2
 801ffa6:	9304      	str	r3, [sp, #16]
 801ffa8:	46a2      	mov	sl, r4
 801ffaa:	e7d2      	b.n	801ff52 <_vfiprintf_r+0xc6>
 801ffac:	9b03      	ldr	r3, [sp, #12]
 801ffae:	1d19      	adds	r1, r3, #4
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	9103      	str	r1, [sp, #12]
 801ffb4:	2b00      	cmp	r3, #0
 801ffb6:	bfbb      	ittet	lt
 801ffb8:	425b      	neglt	r3, r3
 801ffba:	f042 0202 	orrlt.w	r2, r2, #2
 801ffbe:	9307      	strge	r3, [sp, #28]
 801ffc0:	9307      	strlt	r3, [sp, #28]
 801ffc2:	bfb8      	it	lt
 801ffc4:	9204      	strlt	r2, [sp, #16]
 801ffc6:	7823      	ldrb	r3, [r4, #0]
 801ffc8:	2b2e      	cmp	r3, #46	; 0x2e
 801ffca:	d10c      	bne.n	801ffe6 <_vfiprintf_r+0x15a>
 801ffcc:	7863      	ldrb	r3, [r4, #1]
 801ffce:	2b2a      	cmp	r3, #42	; 0x2a
 801ffd0:	d134      	bne.n	802003c <_vfiprintf_r+0x1b0>
 801ffd2:	9b03      	ldr	r3, [sp, #12]
 801ffd4:	1d1a      	adds	r2, r3, #4
 801ffd6:	681b      	ldr	r3, [r3, #0]
 801ffd8:	9203      	str	r2, [sp, #12]
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	bfb8      	it	lt
 801ffde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ffe2:	3402      	adds	r4, #2
 801ffe4:	9305      	str	r3, [sp, #20]
 801ffe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80200bc <_vfiprintf_r+0x230>
 801ffea:	7821      	ldrb	r1, [r4, #0]
 801ffec:	2203      	movs	r2, #3
 801ffee:	4650      	mov	r0, sl
 801fff0:	f7e0 f8f6 	bl	80001e0 <memchr>
 801fff4:	b138      	cbz	r0, 8020006 <_vfiprintf_r+0x17a>
 801fff6:	9b04      	ldr	r3, [sp, #16]
 801fff8:	eba0 000a 	sub.w	r0, r0, sl
 801fffc:	2240      	movs	r2, #64	; 0x40
 801fffe:	4082      	lsls	r2, r0
 8020000:	4313      	orrs	r3, r2
 8020002:	3401      	adds	r4, #1
 8020004:	9304      	str	r3, [sp, #16]
 8020006:	f814 1b01 	ldrb.w	r1, [r4], #1
 802000a:	4829      	ldr	r0, [pc, #164]	; (80200b0 <_vfiprintf_r+0x224>)
 802000c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020010:	2206      	movs	r2, #6
 8020012:	f7e0 f8e5 	bl	80001e0 <memchr>
 8020016:	2800      	cmp	r0, #0
 8020018:	d03f      	beq.n	802009a <_vfiprintf_r+0x20e>
 802001a:	4b26      	ldr	r3, [pc, #152]	; (80200b4 <_vfiprintf_r+0x228>)
 802001c:	bb1b      	cbnz	r3, 8020066 <_vfiprintf_r+0x1da>
 802001e:	9b03      	ldr	r3, [sp, #12]
 8020020:	3307      	adds	r3, #7
 8020022:	f023 0307 	bic.w	r3, r3, #7
 8020026:	3308      	adds	r3, #8
 8020028:	9303      	str	r3, [sp, #12]
 802002a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802002c:	443b      	add	r3, r7
 802002e:	9309      	str	r3, [sp, #36]	; 0x24
 8020030:	e768      	b.n	801ff04 <_vfiprintf_r+0x78>
 8020032:	fb0c 3202 	mla	r2, ip, r2, r3
 8020036:	460c      	mov	r4, r1
 8020038:	2001      	movs	r0, #1
 802003a:	e7a6      	b.n	801ff8a <_vfiprintf_r+0xfe>
 802003c:	2300      	movs	r3, #0
 802003e:	3401      	adds	r4, #1
 8020040:	9305      	str	r3, [sp, #20]
 8020042:	4619      	mov	r1, r3
 8020044:	f04f 0c0a 	mov.w	ip, #10
 8020048:	4620      	mov	r0, r4
 802004a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802004e:	3a30      	subs	r2, #48	; 0x30
 8020050:	2a09      	cmp	r2, #9
 8020052:	d903      	bls.n	802005c <_vfiprintf_r+0x1d0>
 8020054:	2b00      	cmp	r3, #0
 8020056:	d0c6      	beq.n	801ffe6 <_vfiprintf_r+0x15a>
 8020058:	9105      	str	r1, [sp, #20]
 802005a:	e7c4      	b.n	801ffe6 <_vfiprintf_r+0x15a>
 802005c:	fb0c 2101 	mla	r1, ip, r1, r2
 8020060:	4604      	mov	r4, r0
 8020062:	2301      	movs	r3, #1
 8020064:	e7f0      	b.n	8020048 <_vfiprintf_r+0x1bc>
 8020066:	ab03      	add	r3, sp, #12
 8020068:	9300      	str	r3, [sp, #0]
 802006a:	462a      	mov	r2, r5
 802006c:	4b12      	ldr	r3, [pc, #72]	; (80200b8 <_vfiprintf_r+0x22c>)
 802006e:	a904      	add	r1, sp, #16
 8020070:	4630      	mov	r0, r6
 8020072:	f3af 8000 	nop.w
 8020076:	4607      	mov	r7, r0
 8020078:	1c78      	adds	r0, r7, #1
 802007a:	d1d6      	bne.n	802002a <_vfiprintf_r+0x19e>
 802007c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802007e:	07d9      	lsls	r1, r3, #31
 8020080:	d405      	bmi.n	802008e <_vfiprintf_r+0x202>
 8020082:	89ab      	ldrh	r3, [r5, #12]
 8020084:	059a      	lsls	r2, r3, #22
 8020086:	d402      	bmi.n	802008e <_vfiprintf_r+0x202>
 8020088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802008a:	f7ff fe73 	bl	801fd74 <__retarget_lock_release_recursive>
 802008e:	89ab      	ldrh	r3, [r5, #12]
 8020090:	065b      	lsls	r3, r3, #25
 8020092:	f53f af1d 	bmi.w	801fed0 <_vfiprintf_r+0x44>
 8020096:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020098:	e71c      	b.n	801fed4 <_vfiprintf_r+0x48>
 802009a:	ab03      	add	r3, sp, #12
 802009c:	9300      	str	r3, [sp, #0]
 802009e:	462a      	mov	r2, r5
 80200a0:	4b05      	ldr	r3, [pc, #20]	; (80200b8 <_vfiprintf_r+0x22c>)
 80200a2:	a904      	add	r1, sp, #16
 80200a4:	4630      	mov	r0, r6
 80200a6:	f000 f879 	bl	802019c <_printf_i>
 80200aa:	e7e4      	b.n	8020076 <_vfiprintf_r+0x1ea>
 80200ac:	080253b4 	.word	0x080253b4
 80200b0:	080253be 	.word	0x080253be
 80200b4:	00000000 	.word	0x00000000
 80200b8:	0801fe67 	.word	0x0801fe67
 80200bc:	080253ba 	.word	0x080253ba

080200c0 <_printf_common>:
 80200c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200c4:	4616      	mov	r6, r2
 80200c6:	4699      	mov	r9, r3
 80200c8:	688a      	ldr	r2, [r1, #8]
 80200ca:	690b      	ldr	r3, [r1, #16]
 80200cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80200d0:	4293      	cmp	r3, r2
 80200d2:	bfb8      	it	lt
 80200d4:	4613      	movlt	r3, r2
 80200d6:	6033      	str	r3, [r6, #0]
 80200d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80200dc:	4607      	mov	r7, r0
 80200de:	460c      	mov	r4, r1
 80200e0:	b10a      	cbz	r2, 80200e6 <_printf_common+0x26>
 80200e2:	3301      	adds	r3, #1
 80200e4:	6033      	str	r3, [r6, #0]
 80200e6:	6823      	ldr	r3, [r4, #0]
 80200e8:	0699      	lsls	r1, r3, #26
 80200ea:	bf42      	ittt	mi
 80200ec:	6833      	ldrmi	r3, [r6, #0]
 80200ee:	3302      	addmi	r3, #2
 80200f0:	6033      	strmi	r3, [r6, #0]
 80200f2:	6825      	ldr	r5, [r4, #0]
 80200f4:	f015 0506 	ands.w	r5, r5, #6
 80200f8:	d106      	bne.n	8020108 <_printf_common+0x48>
 80200fa:	f104 0a19 	add.w	sl, r4, #25
 80200fe:	68e3      	ldr	r3, [r4, #12]
 8020100:	6832      	ldr	r2, [r6, #0]
 8020102:	1a9b      	subs	r3, r3, r2
 8020104:	42ab      	cmp	r3, r5
 8020106:	dc26      	bgt.n	8020156 <_printf_common+0x96>
 8020108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802010c:	1e13      	subs	r3, r2, #0
 802010e:	6822      	ldr	r2, [r4, #0]
 8020110:	bf18      	it	ne
 8020112:	2301      	movne	r3, #1
 8020114:	0692      	lsls	r2, r2, #26
 8020116:	d42b      	bmi.n	8020170 <_printf_common+0xb0>
 8020118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802011c:	4649      	mov	r1, r9
 802011e:	4638      	mov	r0, r7
 8020120:	47c0      	blx	r8
 8020122:	3001      	adds	r0, #1
 8020124:	d01e      	beq.n	8020164 <_printf_common+0xa4>
 8020126:	6823      	ldr	r3, [r4, #0]
 8020128:	6922      	ldr	r2, [r4, #16]
 802012a:	f003 0306 	and.w	r3, r3, #6
 802012e:	2b04      	cmp	r3, #4
 8020130:	bf02      	ittt	eq
 8020132:	68e5      	ldreq	r5, [r4, #12]
 8020134:	6833      	ldreq	r3, [r6, #0]
 8020136:	1aed      	subeq	r5, r5, r3
 8020138:	68a3      	ldr	r3, [r4, #8]
 802013a:	bf0c      	ite	eq
 802013c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020140:	2500      	movne	r5, #0
 8020142:	4293      	cmp	r3, r2
 8020144:	bfc4      	itt	gt
 8020146:	1a9b      	subgt	r3, r3, r2
 8020148:	18ed      	addgt	r5, r5, r3
 802014a:	2600      	movs	r6, #0
 802014c:	341a      	adds	r4, #26
 802014e:	42b5      	cmp	r5, r6
 8020150:	d11a      	bne.n	8020188 <_printf_common+0xc8>
 8020152:	2000      	movs	r0, #0
 8020154:	e008      	b.n	8020168 <_printf_common+0xa8>
 8020156:	2301      	movs	r3, #1
 8020158:	4652      	mov	r2, sl
 802015a:	4649      	mov	r1, r9
 802015c:	4638      	mov	r0, r7
 802015e:	47c0      	blx	r8
 8020160:	3001      	adds	r0, #1
 8020162:	d103      	bne.n	802016c <_printf_common+0xac>
 8020164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802016c:	3501      	adds	r5, #1
 802016e:	e7c6      	b.n	80200fe <_printf_common+0x3e>
 8020170:	18e1      	adds	r1, r4, r3
 8020172:	1c5a      	adds	r2, r3, #1
 8020174:	2030      	movs	r0, #48	; 0x30
 8020176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802017a:	4422      	add	r2, r4
 802017c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020184:	3302      	adds	r3, #2
 8020186:	e7c7      	b.n	8020118 <_printf_common+0x58>
 8020188:	2301      	movs	r3, #1
 802018a:	4622      	mov	r2, r4
 802018c:	4649      	mov	r1, r9
 802018e:	4638      	mov	r0, r7
 8020190:	47c0      	blx	r8
 8020192:	3001      	adds	r0, #1
 8020194:	d0e6      	beq.n	8020164 <_printf_common+0xa4>
 8020196:	3601      	adds	r6, #1
 8020198:	e7d9      	b.n	802014e <_printf_common+0x8e>
	...

0802019c <_printf_i>:
 802019c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80201a0:	7e0f      	ldrb	r7, [r1, #24]
 80201a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80201a4:	2f78      	cmp	r7, #120	; 0x78
 80201a6:	4691      	mov	r9, r2
 80201a8:	4680      	mov	r8, r0
 80201aa:	460c      	mov	r4, r1
 80201ac:	469a      	mov	sl, r3
 80201ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80201b2:	d807      	bhi.n	80201c4 <_printf_i+0x28>
 80201b4:	2f62      	cmp	r7, #98	; 0x62
 80201b6:	d80a      	bhi.n	80201ce <_printf_i+0x32>
 80201b8:	2f00      	cmp	r7, #0
 80201ba:	f000 80d4 	beq.w	8020366 <_printf_i+0x1ca>
 80201be:	2f58      	cmp	r7, #88	; 0x58
 80201c0:	f000 80c0 	beq.w	8020344 <_printf_i+0x1a8>
 80201c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80201c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80201cc:	e03a      	b.n	8020244 <_printf_i+0xa8>
 80201ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80201d2:	2b15      	cmp	r3, #21
 80201d4:	d8f6      	bhi.n	80201c4 <_printf_i+0x28>
 80201d6:	a101      	add	r1, pc, #4	; (adr r1, 80201dc <_printf_i+0x40>)
 80201d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80201dc:	08020235 	.word	0x08020235
 80201e0:	08020249 	.word	0x08020249
 80201e4:	080201c5 	.word	0x080201c5
 80201e8:	080201c5 	.word	0x080201c5
 80201ec:	080201c5 	.word	0x080201c5
 80201f0:	080201c5 	.word	0x080201c5
 80201f4:	08020249 	.word	0x08020249
 80201f8:	080201c5 	.word	0x080201c5
 80201fc:	080201c5 	.word	0x080201c5
 8020200:	080201c5 	.word	0x080201c5
 8020204:	080201c5 	.word	0x080201c5
 8020208:	0802034d 	.word	0x0802034d
 802020c:	08020275 	.word	0x08020275
 8020210:	08020307 	.word	0x08020307
 8020214:	080201c5 	.word	0x080201c5
 8020218:	080201c5 	.word	0x080201c5
 802021c:	0802036f 	.word	0x0802036f
 8020220:	080201c5 	.word	0x080201c5
 8020224:	08020275 	.word	0x08020275
 8020228:	080201c5 	.word	0x080201c5
 802022c:	080201c5 	.word	0x080201c5
 8020230:	0802030f 	.word	0x0802030f
 8020234:	682b      	ldr	r3, [r5, #0]
 8020236:	1d1a      	adds	r2, r3, #4
 8020238:	681b      	ldr	r3, [r3, #0]
 802023a:	602a      	str	r2, [r5, #0]
 802023c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020244:	2301      	movs	r3, #1
 8020246:	e09f      	b.n	8020388 <_printf_i+0x1ec>
 8020248:	6820      	ldr	r0, [r4, #0]
 802024a:	682b      	ldr	r3, [r5, #0]
 802024c:	0607      	lsls	r7, r0, #24
 802024e:	f103 0104 	add.w	r1, r3, #4
 8020252:	6029      	str	r1, [r5, #0]
 8020254:	d501      	bpl.n	802025a <_printf_i+0xbe>
 8020256:	681e      	ldr	r6, [r3, #0]
 8020258:	e003      	b.n	8020262 <_printf_i+0xc6>
 802025a:	0646      	lsls	r6, r0, #25
 802025c:	d5fb      	bpl.n	8020256 <_printf_i+0xba>
 802025e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8020262:	2e00      	cmp	r6, #0
 8020264:	da03      	bge.n	802026e <_printf_i+0xd2>
 8020266:	232d      	movs	r3, #45	; 0x2d
 8020268:	4276      	negs	r6, r6
 802026a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802026e:	485a      	ldr	r0, [pc, #360]	; (80203d8 <_printf_i+0x23c>)
 8020270:	230a      	movs	r3, #10
 8020272:	e012      	b.n	802029a <_printf_i+0xfe>
 8020274:	682b      	ldr	r3, [r5, #0]
 8020276:	6820      	ldr	r0, [r4, #0]
 8020278:	1d19      	adds	r1, r3, #4
 802027a:	6029      	str	r1, [r5, #0]
 802027c:	0605      	lsls	r5, r0, #24
 802027e:	d501      	bpl.n	8020284 <_printf_i+0xe8>
 8020280:	681e      	ldr	r6, [r3, #0]
 8020282:	e002      	b.n	802028a <_printf_i+0xee>
 8020284:	0641      	lsls	r1, r0, #25
 8020286:	d5fb      	bpl.n	8020280 <_printf_i+0xe4>
 8020288:	881e      	ldrh	r6, [r3, #0]
 802028a:	4853      	ldr	r0, [pc, #332]	; (80203d8 <_printf_i+0x23c>)
 802028c:	2f6f      	cmp	r7, #111	; 0x6f
 802028e:	bf0c      	ite	eq
 8020290:	2308      	moveq	r3, #8
 8020292:	230a      	movne	r3, #10
 8020294:	2100      	movs	r1, #0
 8020296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802029a:	6865      	ldr	r5, [r4, #4]
 802029c:	60a5      	str	r5, [r4, #8]
 802029e:	2d00      	cmp	r5, #0
 80202a0:	bfa2      	ittt	ge
 80202a2:	6821      	ldrge	r1, [r4, #0]
 80202a4:	f021 0104 	bicge.w	r1, r1, #4
 80202a8:	6021      	strge	r1, [r4, #0]
 80202aa:	b90e      	cbnz	r6, 80202b0 <_printf_i+0x114>
 80202ac:	2d00      	cmp	r5, #0
 80202ae:	d04b      	beq.n	8020348 <_printf_i+0x1ac>
 80202b0:	4615      	mov	r5, r2
 80202b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80202b6:	fb03 6711 	mls	r7, r3, r1, r6
 80202ba:	5dc7      	ldrb	r7, [r0, r7]
 80202bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80202c0:	4637      	mov	r7, r6
 80202c2:	42bb      	cmp	r3, r7
 80202c4:	460e      	mov	r6, r1
 80202c6:	d9f4      	bls.n	80202b2 <_printf_i+0x116>
 80202c8:	2b08      	cmp	r3, #8
 80202ca:	d10b      	bne.n	80202e4 <_printf_i+0x148>
 80202cc:	6823      	ldr	r3, [r4, #0]
 80202ce:	07de      	lsls	r6, r3, #31
 80202d0:	d508      	bpl.n	80202e4 <_printf_i+0x148>
 80202d2:	6923      	ldr	r3, [r4, #16]
 80202d4:	6861      	ldr	r1, [r4, #4]
 80202d6:	4299      	cmp	r1, r3
 80202d8:	bfde      	ittt	le
 80202da:	2330      	movle	r3, #48	; 0x30
 80202dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80202e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80202e4:	1b52      	subs	r2, r2, r5
 80202e6:	6122      	str	r2, [r4, #16]
 80202e8:	f8cd a000 	str.w	sl, [sp]
 80202ec:	464b      	mov	r3, r9
 80202ee:	aa03      	add	r2, sp, #12
 80202f0:	4621      	mov	r1, r4
 80202f2:	4640      	mov	r0, r8
 80202f4:	f7ff fee4 	bl	80200c0 <_printf_common>
 80202f8:	3001      	adds	r0, #1
 80202fa:	d14a      	bne.n	8020392 <_printf_i+0x1f6>
 80202fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020300:	b004      	add	sp, #16
 8020302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020306:	6823      	ldr	r3, [r4, #0]
 8020308:	f043 0320 	orr.w	r3, r3, #32
 802030c:	6023      	str	r3, [r4, #0]
 802030e:	4833      	ldr	r0, [pc, #204]	; (80203dc <_printf_i+0x240>)
 8020310:	2778      	movs	r7, #120	; 0x78
 8020312:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020316:	6823      	ldr	r3, [r4, #0]
 8020318:	6829      	ldr	r1, [r5, #0]
 802031a:	061f      	lsls	r7, r3, #24
 802031c:	f851 6b04 	ldr.w	r6, [r1], #4
 8020320:	d402      	bmi.n	8020328 <_printf_i+0x18c>
 8020322:	065f      	lsls	r7, r3, #25
 8020324:	bf48      	it	mi
 8020326:	b2b6      	uxthmi	r6, r6
 8020328:	07df      	lsls	r7, r3, #31
 802032a:	bf48      	it	mi
 802032c:	f043 0320 	orrmi.w	r3, r3, #32
 8020330:	6029      	str	r1, [r5, #0]
 8020332:	bf48      	it	mi
 8020334:	6023      	strmi	r3, [r4, #0]
 8020336:	b91e      	cbnz	r6, 8020340 <_printf_i+0x1a4>
 8020338:	6823      	ldr	r3, [r4, #0]
 802033a:	f023 0320 	bic.w	r3, r3, #32
 802033e:	6023      	str	r3, [r4, #0]
 8020340:	2310      	movs	r3, #16
 8020342:	e7a7      	b.n	8020294 <_printf_i+0xf8>
 8020344:	4824      	ldr	r0, [pc, #144]	; (80203d8 <_printf_i+0x23c>)
 8020346:	e7e4      	b.n	8020312 <_printf_i+0x176>
 8020348:	4615      	mov	r5, r2
 802034a:	e7bd      	b.n	80202c8 <_printf_i+0x12c>
 802034c:	682b      	ldr	r3, [r5, #0]
 802034e:	6826      	ldr	r6, [r4, #0]
 8020350:	6961      	ldr	r1, [r4, #20]
 8020352:	1d18      	adds	r0, r3, #4
 8020354:	6028      	str	r0, [r5, #0]
 8020356:	0635      	lsls	r5, r6, #24
 8020358:	681b      	ldr	r3, [r3, #0]
 802035a:	d501      	bpl.n	8020360 <_printf_i+0x1c4>
 802035c:	6019      	str	r1, [r3, #0]
 802035e:	e002      	b.n	8020366 <_printf_i+0x1ca>
 8020360:	0670      	lsls	r0, r6, #25
 8020362:	d5fb      	bpl.n	802035c <_printf_i+0x1c0>
 8020364:	8019      	strh	r1, [r3, #0]
 8020366:	2300      	movs	r3, #0
 8020368:	6123      	str	r3, [r4, #16]
 802036a:	4615      	mov	r5, r2
 802036c:	e7bc      	b.n	80202e8 <_printf_i+0x14c>
 802036e:	682b      	ldr	r3, [r5, #0]
 8020370:	1d1a      	adds	r2, r3, #4
 8020372:	602a      	str	r2, [r5, #0]
 8020374:	681d      	ldr	r5, [r3, #0]
 8020376:	6862      	ldr	r2, [r4, #4]
 8020378:	2100      	movs	r1, #0
 802037a:	4628      	mov	r0, r5
 802037c:	f7df ff30 	bl	80001e0 <memchr>
 8020380:	b108      	cbz	r0, 8020386 <_printf_i+0x1ea>
 8020382:	1b40      	subs	r0, r0, r5
 8020384:	6060      	str	r0, [r4, #4]
 8020386:	6863      	ldr	r3, [r4, #4]
 8020388:	6123      	str	r3, [r4, #16]
 802038a:	2300      	movs	r3, #0
 802038c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020390:	e7aa      	b.n	80202e8 <_printf_i+0x14c>
 8020392:	6923      	ldr	r3, [r4, #16]
 8020394:	462a      	mov	r2, r5
 8020396:	4649      	mov	r1, r9
 8020398:	4640      	mov	r0, r8
 802039a:	47d0      	blx	sl
 802039c:	3001      	adds	r0, #1
 802039e:	d0ad      	beq.n	80202fc <_printf_i+0x160>
 80203a0:	6823      	ldr	r3, [r4, #0]
 80203a2:	079b      	lsls	r3, r3, #30
 80203a4:	d413      	bmi.n	80203ce <_printf_i+0x232>
 80203a6:	68e0      	ldr	r0, [r4, #12]
 80203a8:	9b03      	ldr	r3, [sp, #12]
 80203aa:	4298      	cmp	r0, r3
 80203ac:	bfb8      	it	lt
 80203ae:	4618      	movlt	r0, r3
 80203b0:	e7a6      	b.n	8020300 <_printf_i+0x164>
 80203b2:	2301      	movs	r3, #1
 80203b4:	4632      	mov	r2, r6
 80203b6:	4649      	mov	r1, r9
 80203b8:	4640      	mov	r0, r8
 80203ba:	47d0      	blx	sl
 80203bc:	3001      	adds	r0, #1
 80203be:	d09d      	beq.n	80202fc <_printf_i+0x160>
 80203c0:	3501      	adds	r5, #1
 80203c2:	68e3      	ldr	r3, [r4, #12]
 80203c4:	9903      	ldr	r1, [sp, #12]
 80203c6:	1a5b      	subs	r3, r3, r1
 80203c8:	42ab      	cmp	r3, r5
 80203ca:	dcf2      	bgt.n	80203b2 <_printf_i+0x216>
 80203cc:	e7eb      	b.n	80203a6 <_printf_i+0x20a>
 80203ce:	2500      	movs	r5, #0
 80203d0:	f104 0619 	add.w	r6, r4, #25
 80203d4:	e7f5      	b.n	80203c2 <_printf_i+0x226>
 80203d6:	bf00      	nop
 80203d8:	080253c5 	.word	0x080253c5
 80203dc:	080253d6 	.word	0x080253d6

080203e0 <__sflush_r>:
 80203e0:	898a      	ldrh	r2, [r1, #12]
 80203e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203e6:	4605      	mov	r5, r0
 80203e8:	0710      	lsls	r0, r2, #28
 80203ea:	460c      	mov	r4, r1
 80203ec:	d458      	bmi.n	80204a0 <__sflush_r+0xc0>
 80203ee:	684b      	ldr	r3, [r1, #4]
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	dc05      	bgt.n	8020400 <__sflush_r+0x20>
 80203f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	dc02      	bgt.n	8020400 <__sflush_r+0x20>
 80203fa:	2000      	movs	r0, #0
 80203fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020402:	2e00      	cmp	r6, #0
 8020404:	d0f9      	beq.n	80203fa <__sflush_r+0x1a>
 8020406:	2300      	movs	r3, #0
 8020408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802040c:	682f      	ldr	r7, [r5, #0]
 802040e:	6a21      	ldr	r1, [r4, #32]
 8020410:	602b      	str	r3, [r5, #0]
 8020412:	d032      	beq.n	802047a <__sflush_r+0x9a>
 8020414:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020416:	89a3      	ldrh	r3, [r4, #12]
 8020418:	075a      	lsls	r2, r3, #29
 802041a:	d505      	bpl.n	8020428 <__sflush_r+0x48>
 802041c:	6863      	ldr	r3, [r4, #4]
 802041e:	1ac0      	subs	r0, r0, r3
 8020420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020422:	b10b      	cbz	r3, 8020428 <__sflush_r+0x48>
 8020424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020426:	1ac0      	subs	r0, r0, r3
 8020428:	2300      	movs	r3, #0
 802042a:	4602      	mov	r2, r0
 802042c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802042e:	6a21      	ldr	r1, [r4, #32]
 8020430:	4628      	mov	r0, r5
 8020432:	47b0      	blx	r6
 8020434:	1c43      	adds	r3, r0, #1
 8020436:	89a3      	ldrh	r3, [r4, #12]
 8020438:	d106      	bne.n	8020448 <__sflush_r+0x68>
 802043a:	6829      	ldr	r1, [r5, #0]
 802043c:	291d      	cmp	r1, #29
 802043e:	d82b      	bhi.n	8020498 <__sflush_r+0xb8>
 8020440:	4a29      	ldr	r2, [pc, #164]	; (80204e8 <__sflush_r+0x108>)
 8020442:	410a      	asrs	r2, r1
 8020444:	07d6      	lsls	r6, r2, #31
 8020446:	d427      	bmi.n	8020498 <__sflush_r+0xb8>
 8020448:	2200      	movs	r2, #0
 802044a:	6062      	str	r2, [r4, #4]
 802044c:	04d9      	lsls	r1, r3, #19
 802044e:	6922      	ldr	r2, [r4, #16]
 8020450:	6022      	str	r2, [r4, #0]
 8020452:	d504      	bpl.n	802045e <__sflush_r+0x7e>
 8020454:	1c42      	adds	r2, r0, #1
 8020456:	d101      	bne.n	802045c <__sflush_r+0x7c>
 8020458:	682b      	ldr	r3, [r5, #0]
 802045a:	b903      	cbnz	r3, 802045e <__sflush_r+0x7e>
 802045c:	6560      	str	r0, [r4, #84]	; 0x54
 802045e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020460:	602f      	str	r7, [r5, #0]
 8020462:	2900      	cmp	r1, #0
 8020464:	d0c9      	beq.n	80203fa <__sflush_r+0x1a>
 8020466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802046a:	4299      	cmp	r1, r3
 802046c:	d002      	beq.n	8020474 <__sflush_r+0x94>
 802046e:	4628      	mov	r0, r5
 8020470:	f7ff fc96 	bl	801fda0 <_free_r>
 8020474:	2000      	movs	r0, #0
 8020476:	6360      	str	r0, [r4, #52]	; 0x34
 8020478:	e7c0      	b.n	80203fc <__sflush_r+0x1c>
 802047a:	2301      	movs	r3, #1
 802047c:	4628      	mov	r0, r5
 802047e:	47b0      	blx	r6
 8020480:	1c41      	adds	r1, r0, #1
 8020482:	d1c8      	bne.n	8020416 <__sflush_r+0x36>
 8020484:	682b      	ldr	r3, [r5, #0]
 8020486:	2b00      	cmp	r3, #0
 8020488:	d0c5      	beq.n	8020416 <__sflush_r+0x36>
 802048a:	2b1d      	cmp	r3, #29
 802048c:	d001      	beq.n	8020492 <__sflush_r+0xb2>
 802048e:	2b16      	cmp	r3, #22
 8020490:	d101      	bne.n	8020496 <__sflush_r+0xb6>
 8020492:	602f      	str	r7, [r5, #0]
 8020494:	e7b1      	b.n	80203fa <__sflush_r+0x1a>
 8020496:	89a3      	ldrh	r3, [r4, #12]
 8020498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802049c:	81a3      	strh	r3, [r4, #12]
 802049e:	e7ad      	b.n	80203fc <__sflush_r+0x1c>
 80204a0:	690f      	ldr	r7, [r1, #16]
 80204a2:	2f00      	cmp	r7, #0
 80204a4:	d0a9      	beq.n	80203fa <__sflush_r+0x1a>
 80204a6:	0793      	lsls	r3, r2, #30
 80204a8:	680e      	ldr	r6, [r1, #0]
 80204aa:	bf08      	it	eq
 80204ac:	694b      	ldreq	r3, [r1, #20]
 80204ae:	600f      	str	r7, [r1, #0]
 80204b0:	bf18      	it	ne
 80204b2:	2300      	movne	r3, #0
 80204b4:	eba6 0807 	sub.w	r8, r6, r7
 80204b8:	608b      	str	r3, [r1, #8]
 80204ba:	f1b8 0f00 	cmp.w	r8, #0
 80204be:	dd9c      	ble.n	80203fa <__sflush_r+0x1a>
 80204c0:	6a21      	ldr	r1, [r4, #32]
 80204c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80204c4:	4643      	mov	r3, r8
 80204c6:	463a      	mov	r2, r7
 80204c8:	4628      	mov	r0, r5
 80204ca:	47b0      	blx	r6
 80204cc:	2800      	cmp	r0, #0
 80204ce:	dc06      	bgt.n	80204de <__sflush_r+0xfe>
 80204d0:	89a3      	ldrh	r3, [r4, #12]
 80204d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80204d6:	81a3      	strh	r3, [r4, #12]
 80204d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80204dc:	e78e      	b.n	80203fc <__sflush_r+0x1c>
 80204de:	4407      	add	r7, r0
 80204e0:	eba8 0800 	sub.w	r8, r8, r0
 80204e4:	e7e9      	b.n	80204ba <__sflush_r+0xda>
 80204e6:	bf00      	nop
 80204e8:	dfbffffe 	.word	0xdfbffffe

080204ec <_fflush_r>:
 80204ec:	b538      	push	{r3, r4, r5, lr}
 80204ee:	690b      	ldr	r3, [r1, #16]
 80204f0:	4605      	mov	r5, r0
 80204f2:	460c      	mov	r4, r1
 80204f4:	b913      	cbnz	r3, 80204fc <_fflush_r+0x10>
 80204f6:	2500      	movs	r5, #0
 80204f8:	4628      	mov	r0, r5
 80204fa:	bd38      	pop	{r3, r4, r5, pc}
 80204fc:	b118      	cbz	r0, 8020506 <_fflush_r+0x1a>
 80204fe:	6a03      	ldr	r3, [r0, #32]
 8020500:	b90b      	cbnz	r3, 8020506 <_fflush_r+0x1a>
 8020502:	f7ff f98b 	bl	801f81c <__sinit>
 8020506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802050a:	2b00      	cmp	r3, #0
 802050c:	d0f3      	beq.n	80204f6 <_fflush_r+0xa>
 802050e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020510:	07d0      	lsls	r0, r2, #31
 8020512:	d404      	bmi.n	802051e <_fflush_r+0x32>
 8020514:	0599      	lsls	r1, r3, #22
 8020516:	d402      	bmi.n	802051e <_fflush_r+0x32>
 8020518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802051a:	f7ff fc2a 	bl	801fd72 <__retarget_lock_acquire_recursive>
 802051e:	4628      	mov	r0, r5
 8020520:	4621      	mov	r1, r4
 8020522:	f7ff ff5d 	bl	80203e0 <__sflush_r>
 8020526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020528:	07da      	lsls	r2, r3, #31
 802052a:	4605      	mov	r5, r0
 802052c:	d4e4      	bmi.n	80204f8 <_fflush_r+0xc>
 802052e:	89a3      	ldrh	r3, [r4, #12]
 8020530:	059b      	lsls	r3, r3, #22
 8020532:	d4e1      	bmi.n	80204f8 <_fflush_r+0xc>
 8020534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020536:	f7ff fc1d 	bl	801fd74 <__retarget_lock_release_recursive>
 802053a:	e7dd      	b.n	80204f8 <_fflush_r+0xc>

0802053c <__swhatbuf_r>:
 802053c:	b570      	push	{r4, r5, r6, lr}
 802053e:	460c      	mov	r4, r1
 8020540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020544:	2900      	cmp	r1, #0
 8020546:	b096      	sub	sp, #88	; 0x58
 8020548:	4615      	mov	r5, r2
 802054a:	461e      	mov	r6, r3
 802054c:	da0d      	bge.n	802056a <__swhatbuf_r+0x2e>
 802054e:	89a3      	ldrh	r3, [r4, #12]
 8020550:	f013 0f80 	tst.w	r3, #128	; 0x80
 8020554:	f04f 0100 	mov.w	r1, #0
 8020558:	bf0c      	ite	eq
 802055a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802055e:	2340      	movne	r3, #64	; 0x40
 8020560:	2000      	movs	r0, #0
 8020562:	6031      	str	r1, [r6, #0]
 8020564:	602b      	str	r3, [r5, #0]
 8020566:	b016      	add	sp, #88	; 0x58
 8020568:	bd70      	pop	{r4, r5, r6, pc}
 802056a:	466a      	mov	r2, sp
 802056c:	f000 f878 	bl	8020660 <_fstat_r>
 8020570:	2800      	cmp	r0, #0
 8020572:	dbec      	blt.n	802054e <__swhatbuf_r+0x12>
 8020574:	9901      	ldr	r1, [sp, #4]
 8020576:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802057a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802057e:	4259      	negs	r1, r3
 8020580:	4159      	adcs	r1, r3
 8020582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020586:	e7eb      	b.n	8020560 <__swhatbuf_r+0x24>

08020588 <__smakebuf_r>:
 8020588:	898b      	ldrh	r3, [r1, #12]
 802058a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802058c:	079d      	lsls	r5, r3, #30
 802058e:	4606      	mov	r6, r0
 8020590:	460c      	mov	r4, r1
 8020592:	d507      	bpl.n	80205a4 <__smakebuf_r+0x1c>
 8020594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020598:	6023      	str	r3, [r4, #0]
 802059a:	6123      	str	r3, [r4, #16]
 802059c:	2301      	movs	r3, #1
 802059e:	6163      	str	r3, [r4, #20]
 80205a0:	b002      	add	sp, #8
 80205a2:	bd70      	pop	{r4, r5, r6, pc}
 80205a4:	ab01      	add	r3, sp, #4
 80205a6:	466a      	mov	r2, sp
 80205a8:	f7ff ffc8 	bl	802053c <__swhatbuf_r>
 80205ac:	9900      	ldr	r1, [sp, #0]
 80205ae:	4605      	mov	r5, r0
 80205b0:	4630      	mov	r0, r6
 80205b2:	f7fe ff51 	bl	801f458 <_malloc_r>
 80205b6:	b948      	cbnz	r0, 80205cc <__smakebuf_r+0x44>
 80205b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80205bc:	059a      	lsls	r2, r3, #22
 80205be:	d4ef      	bmi.n	80205a0 <__smakebuf_r+0x18>
 80205c0:	f023 0303 	bic.w	r3, r3, #3
 80205c4:	f043 0302 	orr.w	r3, r3, #2
 80205c8:	81a3      	strh	r3, [r4, #12]
 80205ca:	e7e3      	b.n	8020594 <__smakebuf_r+0xc>
 80205cc:	89a3      	ldrh	r3, [r4, #12]
 80205ce:	6020      	str	r0, [r4, #0]
 80205d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80205d4:	81a3      	strh	r3, [r4, #12]
 80205d6:	9b00      	ldr	r3, [sp, #0]
 80205d8:	6163      	str	r3, [r4, #20]
 80205da:	9b01      	ldr	r3, [sp, #4]
 80205dc:	6120      	str	r0, [r4, #16]
 80205de:	b15b      	cbz	r3, 80205f8 <__smakebuf_r+0x70>
 80205e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80205e4:	4630      	mov	r0, r6
 80205e6:	f000 f84d 	bl	8020684 <_isatty_r>
 80205ea:	b128      	cbz	r0, 80205f8 <__smakebuf_r+0x70>
 80205ec:	89a3      	ldrh	r3, [r4, #12]
 80205ee:	f023 0303 	bic.w	r3, r3, #3
 80205f2:	f043 0301 	orr.w	r3, r3, #1
 80205f6:	81a3      	strh	r3, [r4, #12]
 80205f8:	89a3      	ldrh	r3, [r4, #12]
 80205fa:	431d      	orrs	r5, r3
 80205fc:	81a5      	strh	r5, [r4, #12]
 80205fe:	e7cf      	b.n	80205a0 <__smakebuf_r+0x18>

08020600 <_raise_r>:
 8020600:	291f      	cmp	r1, #31
 8020602:	b538      	push	{r3, r4, r5, lr}
 8020604:	4604      	mov	r4, r0
 8020606:	460d      	mov	r5, r1
 8020608:	d904      	bls.n	8020614 <_raise_r+0x14>
 802060a:	2316      	movs	r3, #22
 802060c:	6003      	str	r3, [r0, #0]
 802060e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020612:	bd38      	pop	{r3, r4, r5, pc}
 8020614:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8020616:	b112      	cbz	r2, 802061e <_raise_r+0x1e>
 8020618:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802061c:	b94b      	cbnz	r3, 8020632 <_raise_r+0x32>
 802061e:	4620      	mov	r0, r4
 8020620:	f000 f852 	bl	80206c8 <_getpid_r>
 8020624:	462a      	mov	r2, r5
 8020626:	4601      	mov	r1, r0
 8020628:	4620      	mov	r0, r4
 802062a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802062e:	f000 b839 	b.w	80206a4 <_kill_r>
 8020632:	2b01      	cmp	r3, #1
 8020634:	d00a      	beq.n	802064c <_raise_r+0x4c>
 8020636:	1c59      	adds	r1, r3, #1
 8020638:	d103      	bne.n	8020642 <_raise_r+0x42>
 802063a:	2316      	movs	r3, #22
 802063c:	6003      	str	r3, [r0, #0]
 802063e:	2001      	movs	r0, #1
 8020640:	e7e7      	b.n	8020612 <_raise_r+0x12>
 8020642:	2400      	movs	r4, #0
 8020644:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020648:	4628      	mov	r0, r5
 802064a:	4798      	blx	r3
 802064c:	2000      	movs	r0, #0
 802064e:	e7e0      	b.n	8020612 <_raise_r+0x12>

08020650 <raise>:
 8020650:	4b02      	ldr	r3, [pc, #8]	; (802065c <raise+0xc>)
 8020652:	4601      	mov	r1, r0
 8020654:	6818      	ldr	r0, [r3, #0]
 8020656:	f7ff bfd3 	b.w	8020600 <_raise_r>
 802065a:	bf00      	nop
 802065c:	2000008c 	.word	0x2000008c

08020660 <_fstat_r>:
 8020660:	b538      	push	{r3, r4, r5, lr}
 8020662:	4d07      	ldr	r5, [pc, #28]	; (8020680 <_fstat_r+0x20>)
 8020664:	2300      	movs	r3, #0
 8020666:	4604      	mov	r4, r0
 8020668:	4608      	mov	r0, r1
 802066a:	4611      	mov	r1, r2
 802066c:	602b      	str	r3, [r5, #0]
 802066e:	f7e0 fed2 	bl	8001416 <_fstat>
 8020672:	1c43      	adds	r3, r0, #1
 8020674:	d102      	bne.n	802067c <_fstat_r+0x1c>
 8020676:	682b      	ldr	r3, [r5, #0]
 8020678:	b103      	cbz	r3, 802067c <_fstat_r+0x1c>
 802067a:	6023      	str	r3, [r4, #0]
 802067c:	bd38      	pop	{r3, r4, r5, pc}
 802067e:	bf00      	nop
 8020680:	20010948 	.word	0x20010948

08020684 <_isatty_r>:
 8020684:	b538      	push	{r3, r4, r5, lr}
 8020686:	4d06      	ldr	r5, [pc, #24]	; (80206a0 <_isatty_r+0x1c>)
 8020688:	2300      	movs	r3, #0
 802068a:	4604      	mov	r4, r0
 802068c:	4608      	mov	r0, r1
 802068e:	602b      	str	r3, [r5, #0]
 8020690:	f7e0 fed1 	bl	8001436 <_isatty>
 8020694:	1c43      	adds	r3, r0, #1
 8020696:	d102      	bne.n	802069e <_isatty_r+0x1a>
 8020698:	682b      	ldr	r3, [r5, #0]
 802069a:	b103      	cbz	r3, 802069e <_isatty_r+0x1a>
 802069c:	6023      	str	r3, [r4, #0]
 802069e:	bd38      	pop	{r3, r4, r5, pc}
 80206a0:	20010948 	.word	0x20010948

080206a4 <_kill_r>:
 80206a4:	b538      	push	{r3, r4, r5, lr}
 80206a6:	4d07      	ldr	r5, [pc, #28]	; (80206c4 <_kill_r+0x20>)
 80206a8:	2300      	movs	r3, #0
 80206aa:	4604      	mov	r4, r0
 80206ac:	4608      	mov	r0, r1
 80206ae:	4611      	mov	r1, r2
 80206b0:	602b      	str	r3, [r5, #0]
 80206b2:	f7e0 fe4f 	bl	8001354 <_kill>
 80206b6:	1c43      	adds	r3, r0, #1
 80206b8:	d102      	bne.n	80206c0 <_kill_r+0x1c>
 80206ba:	682b      	ldr	r3, [r5, #0]
 80206bc:	b103      	cbz	r3, 80206c0 <_kill_r+0x1c>
 80206be:	6023      	str	r3, [r4, #0]
 80206c0:	bd38      	pop	{r3, r4, r5, pc}
 80206c2:	bf00      	nop
 80206c4:	20010948 	.word	0x20010948

080206c8 <_getpid_r>:
 80206c8:	f7e0 be3c 	b.w	8001344 <_getpid>

080206cc <_init>:
 80206cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206ce:	bf00      	nop
 80206d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80206d2:	bc08      	pop	{r3}
 80206d4:	469e      	mov	lr, r3
 80206d6:	4770      	bx	lr

080206d8 <_fini>:
 80206d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206da:	bf00      	nop
 80206dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80206de:	bc08      	pop	{r3}
 80206e0:	469e      	mov	lr, r3
 80206e2:	4770      	bx	lr
